cscope 15 $HOME/v22.2b14 -q 0000012052 0002373392
	@Win32/ar.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	#MAX_LEN
 1024

	)

7 
	$maö
(
¨gc
, *
¨gv
[]) {

8 
comm™d
[
MAX_LEN
];

9 
i
;

11 i‡(
	`°rcmp
(
¨gv
[1], "rcu"))

13 i‡(!
	`°r°r
(
¨gv
[2], ".lib"))

15 
	`°r˝y
(
comm™d
, "lib ");

16 
i
 = 3; i < 
¨gc
; i++) {

17 i‡(!
	`°r°r
(
¨gv
[
i
], ".obj"))

19 
	`°rˇt
(
comm™d
, 
¨gv
[
i
]);

20 
	`°rˇt
(
comm™d
, " ");

22 
	`°rˇt
(
comm™d
, "/OUT:");

23 
	`°rˇt
(
comm™d
, 
¨gv
[2]);

24 
	`sy°em
(
comm™d
);

26 
	}
}

	@Win32/configure.h

1 
	#INCL_STDLIB_H


	)

2 
	#INCL_TIME_H


	)

3 
	#INCL_FCNTL_H


	)

4 
	#INCL_DOS_H


	)

5 
	#INCL_LIMITS_H


	)

6 
	#USE_STRUCT_DIRENT


	)

7 
	#INCL_SYS_STAT_H


	)

8 
	#INCL_STDARG_H


	)

9 
	#HAS_MEMMOVE


	)

10 
	#RAND


	)

11 
	#HAS_STRERROR


	)

12 
	#HAS_GETCWD


	)

14 
	#CONST
 c⁄°

	)

15 
	#INLINE


	)

16 
	#UINT32
 

	)

17 
	#UINT32
 

	)

	@Win32/touch.c

1 
	~<°dio.h
>

2 
	~<io.h
>

3 
	~<f˙é.h
>

4 
	~<sys/°©.h
>

5 
	~<sys/utime.h
>

7 
	$maö
(
¨gc
, *
¨gv
[]) {

8 
i
, 
h™dÀ
;

10 
i
 = 1; i <
¨gc
; i++) {

11 i‡(
	`ac˚ss
(
¨gv
[
i
], 0) == -1) {

12 
h™dÀ
 = 
	`›í
(
¨gv
[
i
], 
_O_RDWR
 | 
_O_CREAT
, 
_S_IREAD
 | 
_S_IWRITE
);

13 
	`˛o£
(
h™dÀ
);

15 
	`utime
(
¨gv
[
i
], 
NULL
);

19 
	}
}

	@add_action.c

1 
	~"°d.h
"

2 
	~"comm.h
"

3 
	~"backíd.h
"

4 
	~"add_a˘i⁄.h
"

6 #i‚de‡
NO_ADD_ACTION


8 
	#MAX_VERB_BUFF
 100

	)

10 
obje˘_t
 * 
	ghashed_livög
[
CFG_LIVING_HASH_SIZE
] = { 0 };

12 
	gnum_livög_«mes
;

13 
	gnum_£¨ches
 = 1;

14 
	g£¨ch_Àngth
 = 1;

15 
	gûÀgÆ_£¡í˚_a˘i⁄
;

16 * 
	gœ°_vîb
;

17 
obje˘_t
 * 
	gûÀgÆ_£¡í˚_ob
;

19 
nŸify_no_comm™d
 
PROT
(())

21 
°rög_‹_func
 
	gp
;

22 
svÆue_t
 *
	gv
;

24 i‡(!
	gcomm™d_givî
 || !comm™d_givî->
	göãø˘ive
)

26 
	gp
 = 
comm™d_givî
->
öãø˘ive
->
deÁu…_îr_mesßge
;

27 i‡(
	gcomm™d_givî
->
	göãø˘ive
->
	giÊags
 & 
	gNOTIFY_FAIL_FUNC
) {

28 
ßve_comm™d_givî
(
comm™d_givî
);

29 
	gv
 = 
ˇŒ_fun˘i⁄_poöãr
(
p
.
f
, 0);

30 
ª°‹e_comm™d_givî
();

31 
‰ì_fu≈
(
p
.
f
);

32 i‡(
	gcomm™d_givî
 && comm™d_givî->
	göãø˘ive
) {

33 i‡(
	gv
 && v->
	gty≥
 =
T_STRING
) {

34 
ãŒ_obje˘
(
comm™d_givî
, 
v
->
u
.
°rög
, 
SVALUE_STRLEN
(v));

36 
	gcomm™d_givî
->
	göãø˘ive
->
	giÊags
 &~
NOTIFY_FAIL_FUNC
;

37 
	gcomm™d_givî
->
	göãø˘ive
->
	gdeÁu…_îr_mesßge
.
	gs
 = 0;

40 i‡(
	gp
.
	gs
) {

41 
ãŒ_obje˘
(
comm™d_givî
, 
p
.
s
, 
°æí
(p.s));

42 
‰ì_°rög
(
p
.
s
);

43 
	gcomm™d_givî
->
	göãø˘ive
->
	gdeÁu…_îr_mesßge
.
	gs
 = 0;

45 
ãŒ_obje˘
(
comm™d_givî
, 
deÁu…_Áû_mesßge
, 
°æí
(default_fail_message));

50 
˛ór_nŸify
 
	$P1
(
obje˘_t
 *, 
ob
)

52 
°rög_‹_func
 
dem
;

53 
öãø˘ive_t
 *
ù
 = 
ob
->
öãø˘ive
;

55 
dem
 = 
ù
->
deÁu…_îr_mesßge
;

56 i‡(
ù
->
iÊags
 & 
NOTIFY_FAIL_FUNC
) {

57 
	`‰ì_fu≈
(
dem
.
f
);

58 
ù
->
iÊags
 &~
NOTIFY_FAIL_FUNC
;

60 i‡(
dem
.
s
)

61 
	`‰ì_°rög
(
dem
.
s
);

62 
ù
->
deÁu…_îr_mesßge
.
s
 = 0;

63 
	}
}

65 
INLINE_STATIC
 
hash_livög_«me
 
	$P1
(*, 
°r
)

67  
	`whash°r
(
°r
, 20Ë& (
CFG_LIVING_HASH_SIZE
 - 1);

68 
	}
}

70 
obje˘_t
 *
föd_livög_obje˘
 
	$P2
(*, 
°r
, , 
u£r
)

72 
obje˘_t
 **
obp
, *
tmp
;

73 
obje˘_t
 **
hl
;

75 i‡(!
°r
)

77 
num_£¨ches
++;

78 
hl
 = &
hashed_livög
[
	`hash_livög_«me
(
°r
)];

79 
obp
 = 
hl
; *obp; ob∞&(*obp)->
√xt_hashed_livög
) {

80 
£¨ch_Àngth
++;

81 #ifde‡
F_SET_HIDE


82 i‡((*
obp
)->
Êags
 & 
O_HIDDEN
) {

83 i‡(!
	`vÆid_hide
(
cuºít_obje˘
))

87 i‡(
u£r
 && !((*
obp
)->
Êags
 & 
O_ONCE_INTERACTIVE
))

89 i‡(!((*
obp
)->
Êags
 & 
O_ENABLE_COMMANDS
))

91 i‡(
	`°rcmp
((*
obp
)->
livög_«me
, 
°r
) == 0)

94 i‡(*
obp
 == 0)

97 i‡(
obp
 =
hl
)

98  *
obp
;

99 
tmp
 = *
obp
;

100 *
obp
 = 
tmp
->
√xt_hashed_livög
;

101 
tmp
->
√xt_hashed_livög
 = *
hl
;

102 *
hl
 = 
tmp
;

103  
tmp
;

104 
	}
}

106 
ªmove_livög_«me
 
	$P1
(
obje˘_t
 *, 
ob
)

108 
obje˘_t
 **
hl
;

110 
ob
->
Êags
 &~
O_ENABLE_COMMANDS
;

111 i‡(!
ob
->
livög_«me
)

114 
num_livög_«mes
--;

115 
	`DEBUG_CHECK
(!
ob
->
livög_«me
, "remove_living_name:ÇoÜivingÇame set.\n");

116 
hl
 = &
hashed_livög
[
	`hash_livög_«me
(
ob
->
livög_«me
)];

117 *
hl
) {

118 i‡(*
hl
 =
ob
)

120 
hl
 = &(*hl)->
√xt_hashed_livög
;

122 
	`DEBUG_CHECK1
(*
hl
 == 0,

124 
ob
->
livög_«me
);

125 *
hl
 = 
ob
->
√xt_hashed_livög
;

126 
	`‰ì_°rög
(
ob
->
livög_«me
);

127 
ob
->
√xt_hashed_livög
 = 0;

128 
ob
->
livög_«me
 = 0;

129 
	}
}

131 
£t_livög_«me
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
°r
)

133 
Êags
 = 
ob
->Êag†& 
O_ENABLE_COMMANDS
;

134 
obje˘_t
 **
hl
;

136 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

138 
	`ªmove_livög_«me
(
ob
);

139 
num_livög_«mes
++;

140 
hl
 = &
hashed_livög
[
	`hash_livög_«me
(
°r
)];

141 
ob
->
√xt_hashed_livög
 = *
hl
;

142 *
hl
 = 
ob
;

143 
ob
->
livög_«me
 = 
	`make_sh¨ed_°rög
(
°r
);

144 
ob
->
Êags
 |= flags;

145 
	}
}

147 
°©_livög_obje˘s
 
	$P1
(
outbuf„r_t
 *, 
out
)

149 
	`outbuf_add
(
out
, "HashÅable ofÜiving objects:\n");

150 
	`outbuf_add
(
out
, "-----------------------------\n");

151 
	`outbuf_addv
(
out
, "%dÜivingÇamed objects,áverage searchÜength: %4.2f\n\n",

152 
num_livög_«mes
, (Ë
£¨ch_Àngth
 / 
num_£¨ches
);

153 
	}
}

155 
£tup_√w_comm™ds
 
	$P2
(
obje˘_t
 *, 
de°
, obje˘_à*, 
ôem
)

157 
obje˘_t
 *
√xt_ob
, *
ob
;

167 i‡(
ôem
->
Êags
 & 
O_ENABLE_COMMANDS
) {

168 
	`ßve_comm™d_givî
(
ôem
);

169 (Ë
	`≠∂y
(
APPLY_INIT
, 
de°
, 0, 
ORIGIN_DRIVER
);

170 
	`ª°‹e_comm™d_givî
();

171 i‡(
ôem
->
su≥r
 !
de°
)

178 
ob
 = 
de°
->
c⁄èös
; ob; ob = 
√xt_ob
) {

179 
√xt_ob
 = 
ob
->
√xt_öv
;

180 i‡(
ob
 =
ôem
)

182 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

183 
	`îr‹
("A¿obje˘ wa†de°ru˘edáàˇŒ o‡" 
APPLY_INIT
 "()\n");

184 i‡(
ob
->
Êags
 & 
O_ENABLE_COMMANDS
) {

185 
	`ßve_comm™d_givî
(
ob
);

186 (Ë
	`≠∂y
(
APPLY_INIT
, 
ôem
, 0, 
ORIGIN_DRIVER
);

187 
	`ª°‹e_comm™d_givî
();

188 i‡(
de°
 !
ôem
->
su≥r
)

191 i‡(
ôem
->
Êags
 & 
O_DESTRUCTED
)

192 
	`îr‹
("Thêobje˘Åÿbêmoved wa†de°ru˘edáàˇŒ o‡" 
APPLY_INIT
 "()\n");

193 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

194 
	`îr‹
("A¿obje˘ wa†de°ru˘edáàˇŒ o‡" 
APPLY_INIT
 "()\n");

195 i‡(
ôem
->
Êags
 & 
O_ENABLE_COMMANDS
) {

196 
	`ßve_comm™d_givî
(
ôem
);

197 (Ë
	`≠∂y
(
APPLY_INIT
, 
ob
, 0, 
ORIGIN_DRIVER
);

198 
	`ª°‹e_comm™d_givî
();

199 i‡(
de°
 !
ôem
->
su≥r
)

203 i‡(
de°
->
Êags
 & 
O_DESTRUCTED
)

204 
	`îr‹
("Thêde°ö©i⁄Åÿmovêtÿwa†de°ru˘edáàˇŒ o‡" 
APPLY_INIT
 "()\n");

205 i‡(
ôem
->
Êags
 & 
O_DESTRUCTED
)

206 
	`îr‹
("Thêobje˘Åÿbêmoved wa†de°ru˘edáàˇŒ o‡" 
APPLY_INIT
 "()\n");

207 i‡(
de°
->
Êags
 & 
O_ENABLE_COMMANDS
) {

208 
	`ßve_comm™d_givî
(
de°
);

209 (Ë
	`≠∂y
(
APPLY_INIT
, 
ôem
, 0, 
ORIGIN_DRIVER
);

210 
	`ª°‹e_comm™d_givî
();

212 
	}
}

220 
íabÀ_comm™ds
 
	$P1
(, 
num
)

222 #i‚de‡
NO_ENVIRONMENT


223 
obje˘_t
 *
µ
;

226 i‡(
cuºít_obje˘
->
Êags
 & 
O_DESTRUCTED
)

229 
	`debug
(
d_Êag
, ("Enable commands /%s (ref %d)",

230 
cuºít_obje˘
->
«me
, cuºít_obje˘->
ªf
));

232 i‡(
num
) {

233 
cuºít_obje˘
->
Êags
 |
O_ENABLE_COMMANDS
;

234 
	`£t_comm™d_givî
(
cuºít_obje˘
);

236 #i‚de‡
NO_ENVIRONMENT


238 i‡(
cuºít_obje˘
->
Êags
 & 
O_ENABLE_COMMANDS
) {

239 i‡(
cuºít_obje˘
->
su≥r
) {

240 
	`ªmove_£¡
(
cuºít_obje˘
->
su≥r
, current_object);

241 
µ
 = 
cuºít_obje˘
->
su≥r
->
c⁄èös
;Öp;Ö∞µ->
√xt_öv
)

242 
	`ªmove_£¡
(
µ
, 
cuºít_obje˘
);

244 
µ
 = 
cuºít_obje˘
->
c⁄èös
;Öp;Ö∞µ->
√xt_öv
)

245 
	`ªmove_£¡
(
µ
, 
cuºít_obje˘
);

248 
cuºít_obje˘
->
Êags
 &~
O_ENABLE_COMMANDS
;

249 i‡(
cuºít_obje˘
 =
comm™d_givî
)

250 
	`£t_comm™d_givî
(0);

252 
	}
}

259 
u£r_∑r£r
 
	$P1
(*, 
buff
)

261 
vîb_buff
[
MAX_VERB_BUFF
];

262 
£¡í˚_t
 *
s
;

263 *
p
;

264 
Àngth
;

265 *
u£r_vîb
 = 0;

266 
whîe
;

267 
ßve_ûÀgÆ_£¡í˚_a˘i⁄
;

269 
	`debug
(
d_Êag
, ("cmd [/%s]: %s\n", 
comm™d_givî
->
«me
, 
buff
));

272 
p
 = 
buff
 + 
	`°æí
(buff) - 1;Ö >= buff;Ö--) {

273 i‡(*
p
 != ' ')

275 *
p
 = '\0';

277 i‡(
buff
[0] == '\0')

279 
Àngth
 = 
p
 - 
buff
 + 1;

280 
p
 = 
	`°rchr
(
buff
, ' ');

281 i‡(
p
 == 0) {

282 
u£r_vîb
 = 
	`föd°rög
(
buff
);

284 *
p
 = '\0';

285 
u£r_vîb
 = 
	`föd°rög
(
buff
);

286 *
p
 = ' ';

287 
Àngth
 = 
p
 - 
buff
;

289 i‡(!
u£r_vîb
) {

291 
u£r_vîb
 = 
buff
;

297 
	`°∫˝y
(
vîb_buff
, 
u£r_vîb
, 
MAX_VERB_BUFF
 - 1);

298 i‡(
p
) {

299 
pos
;

301 
pos
 = 
p
 - 
buff
;

302 i‡(
pos
 < 
MAX_VERB_BUFF
) {

303 
vîb_buff
[
pos
] = '\0';

307 
ßve_ûÀgÆ_£¡í˚_a˘i⁄
 = 
ûÀgÆ_£¡í˚_a˘i⁄
;

308 
ûÀgÆ_£¡í˚_a˘i⁄
 = 0;

309 
s
 = 
comm™d_givî
->
£¡
; s; s = s->
√xt
) {

310 
svÆue_t
 *
ªt
;

311 
obje˘_t
 *
comm™d_obje˘
;

313 i‡(
s
->
Êags
 & (
V_NOSPACE
 | 
V_SHORT
)) {

314 i‡(
	`°∫cmp
(
buff
, 
s
->
vîb
, 
	`°æí
(s->verb)) != 0)

318 i‡(
s
->
vîb
[0] && (
u£r_vîb
 != s->verb))

325 i‡(!(
s
->
Êags
 & 
V_FUNCTION
))

326 
	`debug
(
d_Êag
, ("Local command %s on /%s",

327 
s
->
fun˘i⁄
.s, s->
ob
->
«me
));

329 i‡(
s
->
Êags
 & 
V_NOSPACE
) {

330 
l1
 = 
	`°æí
(
s
->
vîb
);

331 
l2
 = 
	`°æí
(
vîb_buff
);

333 i‡(
l1
 < 
l2
)

334 
œ°_vîb
 = 
vîb_buff
 + 
l1
;

336 
œ°_vîb
 = "";

338 i‡(!
s
->
vîb
[0] || (s->
Êags
 & 
V_SHORT
))

339 
œ°_vîb
 = 
vîb_buff
;

341 
œ°_vîb
 = 
s
->
vîb
;

348 
whîe
 = (
cuºít_obje˘
 ? 
ORIGIN_EFUN
 : 
ORIGIN_DRIVER
);

353 
comm™d_obje˘
 = 
s
->
ob
;

354 
	`ßve_comm™d_givî
(
comm™d_givî
);

355 i‡(
s
->
Êags
 & 
V_NOSPACE
) {

356 
	`c›y_™d_push_°rög
(&
buff
[
	`°æí
(
s
->
vîb
)]);

357 } i‡(
buff
[
Àngth
] == ' ') {

358 
	`c›y_™d_push_°rög
(&
buff
[
Àngth
 + 1]);

360 
	`push_undeföed
();

362 i‡(
s
->
Êags
 & 
V_FUNCTION
) {

363 
ªt
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
s
->
fun˘i⁄
.
f
, 1);

365 i‡(
s
->
fun˘i⁄
.s[0] =
APPLY___INIT_SPECIAL_CHAR
)

366 
	`îr‹
("Illegal functionÇame.\n");

367 
ªt
 = 
	`≠∂y
(
s
->
fun˘i⁄
.s, s->
ob
, 1, 
whîe
);

371 
	`ª°‹e_comm™d_givî
();

373 
œ°_vîb
 = 0;

376 i‡(
ªt
 == 0) {

379 i‡(
s
 =
comm™d_givî
->
£¡
) {

380 
buf
[256];

381 i‡(
s
->
Êags
 & 
V_FUNCTION
) {

382 
	`•rötf
(
buf
, "Vîb '%s' boundÅÿunˇŒabÀ fun˘i⁄Öoöãr.\n", 
s
->
vîb
);

383 
	`îr‹
(
buf
);

385 
	`•rötf
(
buf
, "Function for verb '%s'Çot found.\n",

386 
s
->
vîb
);

387 
	`îr‹
(
buf
);

392 i‡(
ªt
 && (ªt->
ty≥
 !
T_NUMBER
 ||Ñë->
u
.
numbî
 != 0)) {

393 #ifde‡
PACKAGE_MUDLIB_STATS


394 i‡(
comm™d_givî
 && comm™d_givî->
öãø˘ive


395 #i‚de‡
NO_WIZARDS


396 && !(
comm™d_givî
->
Êags
 & 
O_IS_WIZARD
)

399 
	`add_moves
(&
comm™d_obje˘
->
°©s
, 1);

401 i‡(!
ûÀgÆ_£¡í˚_a˘i⁄
)

402 
ûÀgÆ_£¡í˚_a˘i⁄
 = 
ßve_ûÀgÆ_£¡í˚_a˘i⁄
;

405 i‡(
ûÀgÆ_£¡í˚_a˘i⁄
) {

406 
ûÀgÆ_£¡í˚_a˘i⁄
) {

408 
	`îr‹
("IŒegÆÅÿˇŒÑemove_a˘i⁄(Ë[ˇŒî wa†/%s] fromá vîbÑëu∫ög zîo.\n", 
ûÀgÆ_£¡í˚_ob
->
«me
);

410 
	`îr‹
("IŒegÆÅÿmovê‹ de°ru˘á¿obje˘ (/%sËdeföögá˘i⁄†‰omá vîb fun˘i⁄ whichÑëu∫†zîo.\n", 
ûÀgÆ_£¡í˚_ob
->
«me
);

414 
	`nŸify_no_comm™d
();

415 
ûÀgÆ_£¡í˚_a˘i⁄
 = 
ßve_ûÀgÆ_£¡í˚_a˘i⁄
;

418 
	}
}

425 
∑r£_comm™d
 
	$P2
(*, 
°r
, 
obje˘_t
 *, 
ob
)

427 
ªs
;

430 #i‡
	`deföed
(
NO_ANSI
Ë&& !deföed(
STRIP_BEFORE_PROCESS_INPUT
)

431 *
c
;

433 
c
 = 
°r
; *c; c++) {

434 i‡(*
c
 == 27) {

435 *
c
 = ' ';

440 
	`ßve_comm™d_givî
(
ob
);

441 
ªs
 = 
	`u£r_∑r£r
(
°r
);

442 
	`ª°‹e_comm™d_givî
();

444  
ªs
;

445 
	}
}

459 
add_a˘i⁄
 
	$P3
(
svÆue_t
 *, 
°r
, *, 
cmd
, , 
Êag
)

461 
£¡í˚_t
 *
p
;

462 
obje˘_t
 *
ob
;

464 i‡(
cuºít_obje˘
->
Êags
 & 
O_DESTRUCTED
)

466 
ob
 = 
cuºít_obje˘
;

467 #i‚de‡
NO_SHADOWS


468 
ob
->
shadowög
) {

469 
ob
 = ob->
shadowög
;

472 i‡((
ob
 !
cuºít_obje˘
Ë&& 
°r
->
ty≥
 =
T_STRING
 && 
	`is_°©ic
(°r->
u
.
°rög
, ob)) {

476 i‡(
comm™d_givî
 =0 || (comm™d_givî->
Êags
 & 
O_DESTRUCTED
))

478 i‡(
ob
 !
comm™d_givî


479 #i‚de‡
NO_ENVIRONMENT


480 && 
ob
->
su≥r
 !
comm™d_givî
 &&

481 
ob
->
su≥r
 !
comm™d_givî
->super && ob != command_giver->super

486 
p
 = 
	`Æloc_£¡í˚
();

487 i‡(
°r
->
ty≥
 =
T_STRING
) {

488 
	`debug
(
d_Êag
, ("--Addá˘i⁄ %s", 
°r
->
u
.
°rög
));

489 
p
->
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
(
°r
->
u
.
°rög
);

490 
p
->
Êags
 = 
Êag
;

492 
	`debug
(
d_Êag
, ("--Addáction <function>"));

494 
p
->
fun˘i⁄
.
f
 = 
°r
->
u
.
Â
;

495 
°r
->
u
.
Â
->
hdr
.
ªf
++;

496 
p
->
Êags
 = 
Êag
 | 
V_FUNCTION
;

498 
p
->
ob
 = ob;

499 
p
->
vîb
 = 
	`make_sh¨ed_°rög
(
cmd
);

501 
p
->
√xt
 = 
comm™d_givî
->
£¡
;

502 
comm™d_givî
->
£¡
 = 
p
;

503 
	}
}

510 
ªmove_a˘i⁄
 
	$P2
(*, 
a˘
, *, 
vîb
)

512 
obje˘_t
 *
ob
;

513 
£¡í˚_t
 **
s
;

515 i‡(
comm™d_givî
)

516 
ob
 = 
comm™d_givî
;

518 
ob
 = 
cuºít_obje˘
;

520 i‡(
ob
) {

521 
s
 = &
ob
->
£¡
; *s; s = &((*s)->
√xt
)) {

522 
£¡í˚_t
 *
tmp
;

524 i‡(((*
s
)->
ob
 =
cuºít_obje˘
Ë&& (!((*s)->
Êags
 & 
V_FUNCTION
))

525 && !
	`°rcmp
((*
s
)->
fun˘i⁄
.s, 
a˘
)

526 && !
	`°rcmp
((*
s
)->
vîb
, verb)) {

527 
tmp
 = *
s
;

528 *
s
 = 
tmp
->
√xt
;

529 
	`‰ì_£¡í˚
(
tmp
);

530 
ûÀgÆ_£¡í˚_a˘i⁄
 = 1;

531 
ûÀgÆ_£¡í˚_ob
 = 
cuºít_obje˘
;

537 
	}
}

543 #i‚de‡
NO_ENVIRONMENT


544 
ªmove_£¡
 
	$P2
(
obje˘_t
 *, 
ob
, obje˘_à*, 
u£r
)

546 
£¡í˚_t
 **
s
;

548 i‡(!(
u£r
->
Êags
 & 
O_ENABLE_COMMANDS
))

551 
s
 = &
u£r
->
£¡
; *s;) {

552 
£¡í˚_t
 *
tmp
;

554 i‡((*
s
)->
ob
 == ob) {

555 #ifde‡
DEBUG


556 i‡(!((*
s
)->
Êags
 & 
V_FUNCTION
))

557 
	`debug
(
d_Êag
, ("--U∆ökög síãn˚ %s\n", (*
s
)->
fun˘i⁄
.s));

560 
tmp
 = *
s
;

561 *
s
 = 
tmp
->
√xt
;

562 
	`‰ì_£¡í˚
(
tmp
);

563 
ûÀgÆ_£¡í˚_a˘i⁄
 = 2;

564 
ûÀgÆ_£¡í˚_ob
 = 
ob
;

566 
s
 = &((*s)->
√xt
);

568 
	}
}

571 #ifde‡
F_ADD_ACTION


573 
f_add_a˘i⁄
 
PROT
(())

575 
	gÊag
;

577 i‡(
	g°_num_¨g
 == 3) {

578 
Êag
 = (
•
--)->
u
.
numbî
;

579 } 
	gÊag
 = 0;

581 i‡(
	g•
->
	gty≥
 =
T_ARRAY
) {

582 
i
, 
n
 = 
•
->
u
.
¨r
->
size
;

583 
svÆue_t
 *
	gsv
 = 
•
->
u
.
¨r
->
ôem
;

585 
	gi
 = 0; i < 
	gn
; i++) {

586 i‡(
	gsv
[
i
].
	gty≥
 =
T_STRING
) {

587 
add_a˘i⁄
(
•
-1, 
sv
[
i
].
u
.
°rög
, 
Êag
 & 3);

590 
‰ì_¨øy
((
•
--)->
u
.
¨r
);

592 
add_a˘i⁄
((
•
-1), sp->
u
.
°rög
, 
Êag
 & 3);

593 
‰ì_°rög_svÆue
(
•
--);

595 
p›_°ack
();

599 #ifde‡
F_COMMAND


609 
f_comm™d
 
PROT
(())

611 
	grc
 = 0;

613 i‡(
	gcuºít_obje˘
 && !(cuºít_obje˘->
	gÊags
 & 
	gO_DESTRUCTED
))

615 
	gbuff
[1000];

616 
	gßve_evÆ_co°
 = 
evÆ_co°
;

618 i‡(
SVALUE_STRLEN
(
•
Ë> (
	gbuff
) - 1)

619 
îr‹
("TooÜong command.\n");

621 
°∫˝y
(
buff
, 
•
->
u
.
°rög
, (buff));

622 
	gbuff
[(
buff
) - 1] = 0;

624 i‡(
∑r£_comm™d
(
buff
, 
cuºít_obje˘
))

625 
	grc
 = 
ßve_evÆ_co°
 - 
evÆ_co°
;

628 
‰ì_°rög_svÆue
(
•
);

629 
put_numbî
(
rc
);

633 #ifde‡
F_COMMANDS


634 
f_comm™ds
 
PROT
(())

636 
push_ª„d_¨øy
(
comm™ds
(
cuºít_obje˘
));

640 #ifde‡
F_DISABLE_COMMANDS


641 
f_dißbÀ_comm™ds
 
PROT
(())

643 
íabÀ_comm™ds
(0);

647 #ifde‡
F_ENABLE_COMMANDS


648 
f_íabÀ_comm™ds
 
PROT
(())

650 
íabÀ_comm™ds
(1);

654 #ifde‡
F_FIND_LIVING


655 
f_föd_livög
 
PROT
(())

657 
obje˘_t
 *
	gob
;

659 
	gob
 = 
föd_livög_obje˘
(
•
->
u
.
°rög
, 0);

660 
‰ì_°rög_svÆue
(
•
);

662 i‡(
	gob
) {

663 
put_uƒe„d_unde°ed_obje˘
(
ob
, "find_living");

665 *
	g•
 = 
c⁄°0
;

670 #ifde‡
F_FIND_PLAYER


671 
f_föd_∂ayî
 
PROT
(())

673 
obje˘_t
 *
	gob
;

675 
	gob
 = 
föd_livög_obje˘
(
•
->
u
.
°rög
, 1);

676 
‰ì_°rög_svÆue
(
•
);

678 i‡(
	gob
) {

679 
put_uƒe„d_unde°ed_obje˘
(
ob
, "find_living");

681 *
	g•
 = 
c⁄°0
;

686 #ifde‡
F_LIVING


687 
f_livög
 
PROT
(())

689 i‡(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_ENABLE_COMMANDS
) {

690 
‰ì_obje˘
(
•
->
u
.
ob
, "f_living:1");

691 *
	g•
 = 
c⁄°1
;

693 
‰ì_obje˘
(
•
->
u
.
ob
, "f_living:2");

694 *
	g•
 = 
c⁄°0
;

699 #ifde‡
F_LIVINGS


700 
f_livögs
 
PROT
(())

702 
push_ª„d_¨øy
(
livögs
());

706 #ifde‡
F_NOTIFY_FAIL


707 
f_nŸify_Áû
 
PROT
(())

709 i‡(
	gcomm™d_givî
 && comm™d_givî->
	göãø˘ive
) {

710 
˛ór_nŸify
(
comm™d_givî
);

711 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

712 
comm™d_givî
->
öãø˘ive
->
deÁu…_îr_mesßge
.
s
 = 
make_sh¨ed_°rög
(
•
->
u
.
°rög
);

714 
	gcomm™d_givî
->
	göãø˘ive
->
	giÊags
 |
NOTIFY_FAIL_FUNC
;

715 
	gcomm™d_givî
->
	göãø˘ive
->
	gdeÁu…_îr_mesßge
.
	gf
 = 
•
->
u
.
Â
;

716 
	g•
->
	gu
.
	gÂ
->
	ghdr
.
	gªf
++;

719 
p›_°ack
();

723 #ifde‡
F_QUERY_VERB


724 
f_quîy_vîb
 
PROT
(())

726 i‡(!
	gœ°_vîb
) {

727 
push_numbî
(0);

730 
sh¨e_™d_push_°rög
(
œ°_vîb
);

734 #ifde‡
F_REMOVE_ACTION


735 
f_ªmove_a˘i⁄
 
PROT
(())

737 
	gsuc˚ss
;

739 
	gsuc˚ss
 = 
ªmove_a˘i⁄
((
•
 - 1)->
u
.
°rög
, sp->u.string);

740 
‰ì_°rög_svÆue
(
•
--);

741 
‰ì_°rög_svÆue
(
•
);

742 
put_numbî
(
suc˚ss
);

746 #ifde‡
F_SET_LIVING_NAME


747 
f_£t_livög_«me
 
PROT
(())

749 
£t_livög_«me
(
cuºít_obje˘
, 
•
->
u
.
°rög
);

750 
‰ì_°rög_svÆue
(
•
--);

	@add_action.h

1 #i‚de‡
ADD_ACTION_H


2 
	#ADD_ACTION_H
 1

	)

4 #i‚de‡
NO_ADD_ACTION


5 
obje˘_t
 *
hashed_livög
[
CFG_LIVING_HASH_SIZE
];

7 
∑r£_comm™d
 
PROT
((*, 
obje˘_t
 *));

8 
˛ór_nŸify
 
PROT
((
obje˘_t
 *));

9 
°©_livög_obje˘s
 
PROT
((
outbuf„r_t
 *));

10 
ªmove_livög_«me
 
PROT
((
obje˘_t
 *));

11 
obje˘_t
 * 
föd_livög_obje˘
 
PROT
((*, ));

12 
£tup_√w_comm™ds
 
PROT
((
obje˘_t
 *, object_t *));

13 #i‚de‡
NO_ENVIRONMENT


14 
ªmove_£¡
 
PROT
((
obje˘_t
 *, object_t *));

18 
	#∑r£_comm™d
(
x
, 
y
Ëdo{}0)

	)

19 
	#˛ór_nŸify
(
x
Ëdo{}0)

	)

20 
	#°©_livög_obje˘s
(
x
Ëdo{}0)

	)

21 
	#ªmove_livög_«me
(
x
Ëdo{}0)

	)

22 
	#ªmove_£¡
(
x
, 
y
Ëdo{}0)

	)

23 
	#£tup_√w_comm™ds
(
x
, 
y
Ëdo{}0)

	)

	@addr_server.c

6 
	~"°d.h
"

7 
	~"addr_£rvî.h
"

8 
	~"sockë_˘æ.h
"

9 
	~"fûe_ö˛.h
"

10 
	~"p‹t.h
"

12 #ifde‡
DEBUG_MACRO


13 
	gdebug_Àvñ
 = 
DBG_addr_£rvî
;

16 
	#DBG
(
x
Ë
	`debug
(
addr_£rvî
, x)

	)

21 
c⁄√˘i⁄
 
	gÆl_c⁄ns
[
MAX_CONNS
];

22 
	gtŸÆ_c⁄ns
 = 0;

23 
queue_ñemít_±r
 
	gqueue_hód
 = 
NULL
;

24 
queue_ñemít_±r
 
	gqueue_èû
 = 
NULL
;

25 
queue_ñemít_±r
 
	g°ack_hód
 = 
NULL
;

26 
	gqueue_Àngth
 = 0;

27 
	gc⁄n_fd
;

29 
fd_£t
 
	gªadmask
;

31 
«me_by_ù
 
PROT
((, *));

32 
ù_by_«me
 
PROT
((, *));

33 
INLINE_STATIC
 
¥o˚ss_queue
 
PROT
(());

34 
öô_c⁄ns
 
PROT
(());

35 
öô_c⁄n_sock
 
PROT
((, *));

37 #ifde‡
SIGNAL_FUNC_TAKES_INT


38 
sigpùe_h™dÀr
 
PROT
(());

40 
sigpùe_h™dÀr
 
PROT
(());

43 
INLINE
 
a£rv_¥o˚ss_io
 
PROT
(());

44 
íqueue_d©≠ídög
 
PROT
((, ));

45 
h™dÀ_t›_evít
 
PROT
(());

46 
dequeue_t›_evít
 
PROT
(());

47 
p›_queue_ñemít
 
PROT
((
queue_ñemít_±r
 *));

48 
push_queue_ñemít
 
PROT
((
queue_ñemít_±r
));

49 
√w_c⁄n_h™dÀr
 
PROT
(());

50 
c⁄n_d©a_h™dÀr
 
PROT
(());

51 
ödex_by_fd
 
PROT
(());

52 
ãrmö©e
 
PROT
(());

54 
debug_≥º‹
 
PROT
((*, *));

56 
debug_≥º‹
 
	$P2
(*, 
wh©
, *, 
fûe
) {

57 i‡(
fûe
)

58 
	`Ârötf
(
°dîr
, "Sy°em Eº‹: %s:%s:%s\n", 
wh©
, 
fûe
, 
	`p‹t_°ªº‹
(
î∫o
));

60 
	`Ârötf
(
°dîr
, "Sy°em Eº‹: %s:%s\n", 
wh©
, 
	`p‹t_°ªº‹
(
î∫o
));

61 
	}
}

63 
	$öô_c⁄ns
()

65 
i
;

67 
i
 = 0; i < 
MAX_CONNS
; i++) {

68 
Æl_c⁄ns
[
i
].
fd
 = -1;

69 
Æl_c⁄ns
[
i
].
°©e
 = 
CONN_CLOSED
;

70 
Æl_c⁄ns
[
i
].
¢ame
[0] = '\0';

73 
Æl_c⁄ns
[
i
].
buf
[0] = '\0';

74 
Æl_c⁄ns
[
i
].
buf
[
IN_BUF_SIZE
 - 1] = '\0';

75 
Æl_c⁄ns
[
i
].
À·ovî
 = 0;

77 
	}
}

82 
öô_c⁄n_sock
 
	$P2
(, 
p‹t_num
, *, 
ùaddªss
)

84 
sockaddr_ö
 
sö
;

85 
sö_Àn
;

86 
›tvÆ
;

87 #ifde‡
WINSOCK


88 
WSADATA
 
WSAD©a
;

90 
	`WSASèπup
(
	`MAKEWORD
(1,1), &
WSAD©a
);

91 
	`©exô
(
˛ónup_sockës
);

97 i‡((
c⁄n_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)Ë=
INVALID_SOCKET
) {

98 
	`sockë_≥º‹
("init_conn_sock: socket", 0);

99 
	`exô
(1);

104 
›tvÆ
 = 1;

105 i‡(
	`£tsock›t
(
c⁄n_fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›tvÆ
,

106 (
›tvÆ
)) == -1) {

107 
	`sockë_≥º‹
("init_conn_sock: setsockopt", 0);

108 
	`exô
(2);

113 
sö
.
sö_Ámûy
 = 
AF_INET
;

114 
sö
.
sö_addr
.
s_addr
 = (
ùaddªss
 ? 
	`öë_addr
(ùaddªssË: 
INADDR_ANY
);

115 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
p‹t_num
);

119 i‡(
	`böd
(
c⁄n_fd
, (
sockaddr
 *Ë& 
sö
, (sin)) == -1) {

120 
	`sockë_≥º‹
("init_conn_sock: bind", 0);

121 
	`exô
(3);

126 
sö_Àn
 = (
sö
);

127 i‡(
	`gësock«me
(
c⁄n_fd
, (
sockaddr
 *Ë& 
sö
, &
sö_Àn
) == -1) {

128 
	`sockë_≥º‹
("init_conn_sock: getsockname", 0);

129 
	`exô
(4);

134 #i‡!
	`deföed
(
LATTICE
Ë&& deföed(
SIGPIPE
)

135 i‡(
	`sig«l
(
SIGPIPE
, 
sigpùe_h™dÀr
Ë=
SIGNAL_ERROR
) {

136 
	`sockë_≥º‹
("init_conn_sock: signal SIGPIPE", 0);

137 
	`exô
(5);

143 i‡(
	`£t_sockë_n⁄blockög
(
c⁄n_fd
, 1) == -1) {

144 
	`sockë_≥º‹
("init_conn_sock: set_socket_nonblocking 1", 0);

145 
	`exô
(8);

150 i‡(
	`li°í
(
c⁄n_fd
, 128) == -1) {

151 
	`sockë_≥º‹
("init_conn_sock:Üisten", 0);

152 
	`exô
(10);

154 
	`DBG
(("li°íög f‹ c⁄√˘i⁄†⁄Ö‹à%d", 
p‹t_num
));

155 
	}
}

160 #ifde‡
SIGNAL_FUNC_TAKES_INT


161 
sigpùe_h™dÀr
 
	$P1
(, 
sig
)

164 
	$sigpùe_h™dÀr
()

167 
	`Ârötf
(
°dîr
, "SIGPIPEÑeceived.\n");

168 
	}
}

173 
INLINE
 
a£rv_¥o˚ss_io
 
	$P1
(, 
nb
)

175 
i
;

177 
nb
) {

179 
	`debug_≥º‹
("sigio_handler: select", 0);

187 i‡(
	`FD_ISSET
(
c⁄n_fd
, &
ªadmask
)) {

188 
	`DBG
(("sigio_handler: NEW_CONN"));

189 
	`íqueue_d©≠ídög
(
c⁄n_fd
, 
NEW_CONN
);

194 
i
 = 0; i < 
MAX_CONNS
; i++) {

195 i‡(
	`FD_ISSET
(
Æl_c⁄ns
[
i
].
fd
, &
ªadmask
)) {

196 
	`DBG
(("sigio_handler: CONN"));

197 
	`íqueue_d©≠ídög
(
Æl_c⁄ns
[
i
].
fd
, 
CONN
);

202 
	}
}

204 
INLINE_STATIC
 
	$¥o˚ss_queue
()

206 
i
;

208 
i
 = 0; 
queue_hód
 && (ò< 
MAX_EVENTS_TO_PROCESS
); i++) {

209 
	`h™dÀ_t›_evít
();

210 
	`dequeue_t›_evít
();

212 
	}
}

214 
íqueue_d©≠ídög
 
	$P2
(, 
fd
, , 
fd_ty≥
)

216 
queue_ñemít_±r
 
√w_queue_ñemít
;

218 
	`p›_queue_ñemít
(&
√w_queue_ñemít
);

219 
√w_queue_ñemít
->
evít_ty≥
 = 
fd_ty≥
;

220 
√w_queue_ñemít
->
fd
 = fd;

221 
√w_queue_ñemít
->
√xt
 = 
NULL
;

222 i‡(
queue_hód
) {

223 
queue_èû
->
√xt
 = 
√w_queue_ñemít
;

225 
queue_hód
 = 
√w_queue_ñemít
;

227 
queue_èû
 = 
√w_queue_ñemít
;

228 
	}
}

230 
	$dequeue_t›_evít
()

232 
queue_ñemít_±r
 
t›_queue_ñemít
;

234 i‡(
queue_hód
) {

235 
t›_queue_ñemít
 = 
queue_hód
;

236 
queue_hód
 = queue_hód->
√xt
;

237 
	`push_queue_ñemít
(
t›_queue_ñemít
);

239 
	`Ârötf
(
°dîr
, "dequeue_top_event:ÅriedÅo dequeue fromÉmpty queue!\n");

241 
	}
}

243 
p›_queue_ñemít
 
	$P1
(
queue_ñemít_±r
 *, 
the_queue_ñemít
)

245 i‡((*
the_queue_ñemít
 = 
°ack_hód
))

246 
°ack_hód
 = sèck_hód->
√xt
;

248 *
the_queue_ñemít
 = (
queue_ñemít_±r
Ë
	`mÆloc
((
queue_ñemít
));

249 
queue_Àngth
++;

250 
	}
}

252 
push_queue_ñemít
 
	$P1
(
queue_ñemít_±r
, 
the_queue_ñemít
)

254 
the_queue_ñemít
->
√xt
 = 
°ack_hód
;

255 
°ack_hód
 = 
the_queue_ñemít
;

256 
queue_Àngth
--;

257 
	}
}

259 
	$h™dÀ_t›_evít
()

261 
queue_hód
->
evít_ty≥
) {

262 
NEW_CONN
:

263 
	`DBG
(("handle_top_event: NEW_CONN"));

264 
	`√w_c⁄n_h™dÀr
();

266 
CONN
:

267 
	`DBG
(("h™dÀ_t›_evít: CONN d©®⁄ fd %d", 
queue_hód
->
fd
));

268 
	`c⁄n_d©a_h™dÀr
(
queue_hód
->
fd
);

271 
	`Ârötf
(
°dîr
, "handle_top_event: unknownÉventÅype %d\n",

272 
queue_hód
->
evít_ty≥
);

275 
	}
}

283 
	$√w_c⁄n_h™dÀr
()

285 
sockaddr_ö
 
˛õ¡
;

286 
˛õ¡_Àn
;

287 
ho°ít
 *
c_ho°ít
;

288 
√w_fd
;

289 
c⁄n_ödex
;

291 
˛õ¡_Àn
 = (
˛õ¡
);

292 
√w_fd
 = 
	`ac˚±
(
c⁄n_fd
, (
sockaddr
 *Ë& 
˛õ¡
, (*Ë&
˛õ¡_Àn
);

293 i‡(
√w_fd
 == -1) {

294 
	`sockë_≥º‹
("new_conn_handler:áccept", 0);

297 i‡(
	`£t_sockë_n⁄blockög
(
√w_fd
, 1) == -1) {

298 
	`sockë_≥º‹
("new_conn_handler: set_socket_nonblocking 1", 0);

299 
	`OS_sockë_˛o£
(
√w_fd
);

302 i‡(
tŸÆ_c⁄ns
 >
MAX_CONNS
) {

303 *
mesßge
 = "noávailable slots -- closing connection.\n";

305 
	`Ârötf
(
°dîr
, "new_conn_handler:Çoávailable connection slots.\n");

306 
	`OS_sockë_wrôe
(
√w_fd
, 
mesßge
, 
	`°æí
(message));

307 i‡(
	`OS_sockë_˛o£
(
√w_fd
) == -1)

308 
	`sockë_≥º‹
("new_conn_handler: close", 0);

312 
c_ho°ít
 = 
	`gëho°byaddr
((*Ë&
˛õ¡
.
sö_addr
.
s_addr
,

313 (
˛õ¡
.
sö_addr
.
s_addr
), 
AF_INET
);

314 
c⁄n_ödex
 = 0; c⁄n_ödex < 
MAX_CONNS
; conn_index++) {

315 i‡(
Æl_c⁄ns
[
c⁄n_ödex
].
°©e
 =
CONN_CLOSED
) {

316 
	`DBG
(("√w_c⁄n_h™dÀr: o≥nög c⁄¿ödex %d", 
c⁄n_ödex
));

318 
Æl_c⁄ns
[
c⁄n_ödex
].
fd
 = 
√w_fd
;

319 
Æl_c⁄ns
[
c⁄n_ödex
].
°©e
 = 
CONN_OPEN
;

320 
Æl_c⁄ns
[
c⁄n_ödex
].
addr
 = 
˛õ¡
;

321 i‡(
c_ho°ít
)

322 
	`°r˝y
(
Æl_c⁄ns
[
c⁄n_ödex
].
¢ame
, 
c_ho°ít
->
h_«me
);

324 
	`°r˝y
(
Æl_c⁄ns
[
c⁄n_ödex
].
¢ame
, "<unknown>");

325 
tŸÆ_c⁄ns
++;

329 
	`Ârötf
(
°dîr
, "new_conn_handler: sanity check failed!\n");

330 
	}
}

332 
c⁄n_d©a_h™dÀr
 
	$P1
(, 
fd
)

334 
c⁄n_ödex
;

335 
buf_ödex
;

336 
num_byãs
;

337 
msgty≥
;

338 
À·ovî
;

339 *
buf
;

340 
ªs
, 
msgÀn
, 
ex≥˘ög
;

341 
uƒód_byãs
;

343 i‡((
c⁄n_ödex
 = 
	`ödex_by_fd
(
fd
)) == -1) {

344 
	`Ârötf
(
°dîr
, "conn_data_handler: invalid fd.\n");

347 
	`DBG
(("c⁄n_d©a_h™dÀr:Ñód o¿fd %d", 
fd
));

350 
À·ovî
 = 
Æl_c⁄ns
[
c⁄n_ödex
].leftover;

351 
buf
 = (*Ë&
Æl_c⁄ns
[
c⁄n_ödex
].buf[0];

352 
num_byãs
 = 
	`OS_sockë_ªad
(
fd
, 
buf
 + 
À·ovî
, (
IN_BUF_SIZE
 - 1) -Üeftover);

354 
num_byãs
) {

356 
sockë_î∫o
) {

357 
EWOULDBLOCK
:

358 
	`DBG
(("conn_data_handler:Ñead on fd %d: Operation would block.",

359 
fd
));

362 
	`sockë_≥º‹
("conn_data_handler:Ñead", 0);

363 
	`ãrmö©e
(
c⁄n_ödex
);

368 i‡(
Æl_c⁄ns
[
c⁄n_ödex
].
°©e
 =
CONN_CLOSED
)

369 
	`Ârötf
(
°dîr
, "get_user_data:ÅriedÅoÑead from closed fd.\n");

370 
	`ãrmö©e
(
c⁄n_ödex
);

373 
	`DBG
(("c⁄n_d©a_h™dÀr:Ñód %d byã†⁄ fd %d", 
num_byãs
, 
fd
));

374 
num_byãs
 +
À·ovî
;

375 
buf_ödex
 = 0;

376 
ex≥˘ög
 = 0;

377 
num_byãs
 > (Ë&& 
buf_ödex
 < (
IN_BUF_SIZE
 - 1)) {

379 
	`mem˝y
((*Ë&
msgty≥
, (*Ë&
buf
[
buf_ödex
], ());

380 
	`DBG
(("c⁄n_d©a_h™dÀr: mesßgêty≥: %d", 
msgty≥
));

382 i‡(
msgty≥
 =
NAMEBYIP
) {

383 i‡(
buf
[
buf_ödex
 + ()] == '\0') {

385 
buf_ödex
++;

386 
num_byãs
--;

389 i‡(
ex≥˘ög
 && 
num_byãs
 <Éxpecting) {

394 
buf_ödex
 -= (() + ());

395 
num_byãs
 += (() + ());

398 
ªs
 = 
	`«me_by_ù
(
c⁄n_ödex
, &
buf
[
buf_ödex
]);

399 } i‡(
msgty≥
 =
IPBYNAME
) {

400 i‡(
buf
[
buf_ödex
 + ()] == '\0') {

402 
buf_ödex
++;

403 
num_byãs
--;

406 i‡(
ex≥˘ög
 && 
num_byãs
 <Éxpecting) {

411 
buf_ödex
 -= (() + ());

412 
num_byãs
 += (() + ());

415 
ªs
 = 
	`ù_by_«me
(
c⁄n_ödex
, &
buf
[
buf_ödex
]);

416 } i‡(
msgty≥
 =
DATALEN
) {

417 i‡(
num_byãs
 > (() + ())) {

418 
	`mem˝y
((*Ë&
ex≥˘ög
, (*Ë&
buf
[
buf_ödex
 + ()], ());

422 
buf_ödex
 += (() + ());

423 
num_byãs
 -= (() + ());

424 i‡(
ex≥˘ög
 > 
IN_BUF_SIZE
 ||Éxpecting <= 0) {

425 
	`Ârötf
(
°dîr
, "c⁄n_d©a_h™dÀr: bad d©®Àngth %d\n", 
ex≥˘ög
);

426 
ex≥˘ög
 = 0;

437 
	`Ârötf
(
°dîr
, "c⁄n_d©a_h™dÀr: unknow¿mesßgêty≥ %08x\n", 
msgty≥
);

439 
buf_ödex
++;

440 
num_byãs
--;

444 
msgÀn
 = (Ë((Ë+ 
	`°æí
(&
buf
[
buf_ödex
 + ()]) +1);

445 i‡(
ªs
) {

449 
buf_ödex
 +
msgÀn
;

450 
num_byãs
 -
msgÀn
;

451 } i‡(
msgÀn
 < 
num_byãs
 || (
ex≥˘ög
 &&Éxpecting == msglen)) {

459 
msgÀn
 = (Ë((Ë+ 
	`°æí
(&
buf
[
buf_ödex
 + ()]) +1);

460 
buf_ödex
 +
msgÀn
;

461 
num_byãs
 -
msgÀn
;

462 
ex≥˘ög
 = 0;

464 i‡(!
	`OS_sockë_io˘l
(
fd
, 
FIONREAD
, &
uƒód_byãs
) &&

465 
uƒód_byãs
 > 0) {

475 
buf_ödex
 = 0;

476 
num_byãs
 = 0;

482 i‡(
num_byãs
 && 
buf_ödex
)

483 
	`memmove
(
buf
, &buf[
buf_ödex
], 
num_byãs
);

484 
buf
[
num_byãs
] = '\0';

485 
Æl_c⁄ns
[
c⁄n_ödex
].
À·ovî
 = 
num_byãs
;

489 
	}
}

491 
	#OUT_BUF_SIZE
 80

	)

493 
ù_by_«me
 
	$P2
(, 
c⁄n_ödex
, *, 
buf
)

495 
ho°ít
 *
hp
;

496 
ö_addr
 
my_ö_addr
;

497 
out_buf
[
OUT_BUF_SIZE
];

499 
hp
 = 
	`gëho°by«me
(&
buf
[()]);

500 i‡(
hp
 =
NULL
) {

502 
	`•rötf
(
out_buf
, "%†0\n", &
buf
[()]);

503 
	`DBG
(("%s", 
out_buf
));

504 
	`OS_sockë_wrôe
(
Æl_c⁄ns
[
c⁄n_ödex
].
fd
, 
out_buf
, 
	`°æí
(out_buf));

508 
	`mem˝y
(&
my_ö_addr
, 
hp
->
h_addr
, (
ö_addr
));

509 
	`•rötf
(
out_buf
, "%†%s\n", &
buf
[()],

510 
	`öë_¡ﬂ
(
my_ö_addr
));

511 
	`DBG
(("%s", 
out_buf
));

512 
	`OS_sockë_wrôe
(
Æl_c⁄ns
[
c⁄n_ödex
].
fd
, 
out_buf
, 
	`°æí
(out_buf));

515 
	}
}

517 
«me_by_ù
 
	$P2
(, 
c⁄n_ödex
, *, 
buf
)

519 
addr
;

520 
ho°ít
 *
hp
;

521 
out_buf
[
OUT_BUF_SIZE
];

523 i‡((
addr
 = 
	`öë_addr
(&
buf
[()])) == -1) {

524 
	`•rötf
(
out_buf
, "%†0\n", &
buf
[()]);

525 
	`DBG
(("name_by_ip: malformedáddressÑequest."));

526 
	`OS_sockë_wrôe
(
Æl_c⁄ns
[
c⁄n_ödex
].
fd
, 
out_buf
, 
	`°æí
(out_buf));

529 i‡((
hp
 = 
	`gëho°byaddr
((*Ë&
addr
, ◊ddr), 
AF_INET
))) {

530 
	`•rötf
(
out_buf
, "%†%s\n", &
buf
[()], 
hp
->
h_«me
);

531 
	`DBG
(("%s", 
out_buf
));

532 
	`OS_sockë_wrôe
(
Æl_c⁄ns
[
c⁄n_ödex
].
fd
, 
out_buf
, 
	`°æí
(out_buf));

535 
	`•rötf
(
out_buf
, "%†0\n", &
buf
[()]);

536 
	`DBG
(("%s", 
out_buf
));

537 
	`OS_sockë_wrôe
(
Æl_c⁄ns
[
c⁄n_ödex
].
fd
, 
out_buf
, 
	`°æí
(out_buf));

538 
	`DBG
(("name_by_ip: unableÅoÑesolveáddress."));

541 
	}
}

543 
ödex_by_fd
 
	$P1
(, 
fd
)

545 
i
;

547 
i
 = 0; i < 
MAX_CONNS
; i++) {

548 i‡((
Æl_c⁄ns
[
i
].
°©e
 =
CONN_OPEN
Ë&& (Æl_c⁄ns[i].
fd
 == fd))

549  (
i
);

552 
	}
}

554 
ãrmö©e
 
	$P1
(, 
c⁄n_ödex
)

556 i‡(
c⁄n_ödex
 < 0 || c⁄n_ödex >
MAX_CONNS
) {

557 
	`Ârötf
(
°dîr
, "ãrmö©e: c⁄n_ödex %d ouào‡ønge.\n", 
c⁄n_ödex
);

560 i‡(
Æl_c⁄ns
[
c⁄n_ödex
].
°©e
 =
CONN_CLOSED
) {

561 
	`Ârötf
(
°dîr
, "ãrmö©e: c⁄√˘i⁄ %dáÃódy clo£d.\n", 
c⁄n_ödex
);

564 
	`DBG
(("ãrmö©ög c⁄√˘i⁄ %d", 
c⁄n_ödex
));

566 i‡(
	`OS_sockë_˛o£
(
Æl_c⁄ns
[
c⁄n_ödex
].
fd
) == -1) {

567 
	`sockë_≥º‹
("terminate: close", 0);

570 
Æl_c⁄ns
[
c⁄n_ödex
].
°©e
 = 
CONN_CLOSED
;

571 
tŸÆ_c⁄ns
--;

572 
	}
}

574 
maö
 
	$P2
(, 
¨gc
, **, 
¨gv
)

576 
addr_£rvî_p‹t
;

577 
timevÆ
 
timeout
;

578 
i
;

579 
nb
;

580 *
ùaddªss
 = 0;

582 i‡(
¨gc
 > 1) {

583 i‡((
addr_£rvî_p‹t
 = 
	`©oi
(
¨gv
[1])) == 0) {

584 
	`Ârötf
(
°dîr
, "addr_server: malformedÖortÇumber.\n");

585 
	`exô
(2);

587 i‡(
¨gc
 > 2) {

588 i‡(
	`öë_addr
((
ùaddªss
 = 
¨gv
[2])Ë=
INADDR_NONE
) {

589 
	`Ârötf
(
°dîr
, "addr_server: malformed ipáddress.\n");

590 
	`exô
(3);

594 
	`Ârötf
(
°dîr
, "addr_server: firstárg must beÖortÇumber.\n");

595 
	`exô
(1);

597 #i‡
	`deföed
(
LATTICE
Ë&& deföed(
AMITCP
)

598 
	`öô_c⁄ns
();

600 
	`öô_c⁄n_sock
(
addr_£rvî_p‹t
, 
ùaddªss
);

605 
timeout
.
tv_£c
 = 2;

606 
timeout
.
tv_u£c
 = 0;

610 
	`FD_ZERO
(&
ªadmask
);

614 
	`FD_SET
(
c⁄n_fd
, &
ªadmask
);

618 
i
 = 0; i < 
MAX_CONNS
; i++) {

619 i‡(
Æl_c⁄ns
[
i
].
°©e
 =
CONN_OPEN
)

620 
	`FD_SET
(
Æl_c⁄ns
[
i
].
fd
, &
ªadmask
);

622 #i‚de‡
hpux


623 
nb
 = 
	`£À˘
(
FD_SETSIZE
, &
ªadmask
, (
fd_£t
 *Ë0, (fd_£à*Ë0, &
timeout
);

625 
nb
 = 
	`£À˘
(
FD_SETSIZE
, (*Ë&
ªadmask
, (*Ë0, (*Ë0, &
timeout
);

627 i‡(
nb
 != 0)

628 
	`a£rv_¥o˚ss_io
(
nb
);

629 
	`¥o˚ss_queue
();

634 
	}
}

636 #ifde‡
WIN32


637 
debug_mesßge
 
	$P1V
(*, 
fmt
)

639 
deb_buf
[100];

640 *
deb
 = 
deb_buf
;

641 
va_li°
 
¨gs
;

642 
	`V_DCL
(*
fmt
);

644 
	`V_START
(
¨gs
, 
fmt
);

645 
	`V_VAR
(*, 
fmt
, 
¨gs
);

646 
	`vÂrötf
(
°dîr
, 
fmt
, 
¨gs
);

647 
	`fÊush
(
°dîr
);

648 
	`va_íd
(
¨gs
);

649 
	}
}

	@addr_server.h

6 #i‚de‡
ADDR_SERVER_H


7 
	#ADDR_SERVER_H


	)

9 
	~"√tw‹k_ö˛.h
"

11 
	#DFAULT_PROTO
 0

	)

12 
	#MAX_CONNS
 4

	)

13 
	#SNAME_LEN
 64

	)

14 
	#MAX_EVENTS_IN_QUEUE
 100

	)

15 
	#MAX_EVENTS_TO_PROCESS
 100

	)

16 
	#IN_BUF_SIZE
 100

	)

18 
	ec⁄n_°©es
 {

19 
	mCONN_CLOSED
, 
	mCONN_OPEN


22 
	eev_ty≥
 {

23 
	mNEW_CONN
, 
	mCONN


26 
	emsgty≥s
 {

27 
	mNAMEBYIP
 = 0, 
	mIPBYNAME
, 
	mDATALEN


30 
c⁄n
 *
	tc⁄n_±r
;

32 
	sc⁄n
 {

33 
	mfd
;

34 
	m°©e
;

35 
sockaddr_ö
 
	maddr
;

36 
	m¢ame
[
SNAME_LEN
];

37 
	mÀ·ovî
;

38 
	mbuf
[
IN_BUF_SIZE
];

39 } 
	tc⁄√˘i⁄
;

41 
queue_ñem
 *
	tqueue_ñemít_±r
;

43 
	squeue_ñem
 {

44 
	mevít_ty≥
;

45 
	mfd
;

46 
queue_ñemít_±r
 
	m√xt
;

47 } 
	tqueue_ñemít
;

	@amiga/amiga.h

6 #i‚de‡
AMIGA_AMIGA_H


7 
	#AMIGA_AMIGA_H


	)

10 
	#_IFIFO
 0010000

	)

11 
	#_IFCHR
 0020000

	)

12 
	#_IFBLK
 0060000

	)

13 
	#_IFLNK
 0120000

	)

14 
	#S_IFCHR
 
_IFCHR


	)

15 
	#S_IFBLK
 
_IFBLK


	)

16 
	#S_IFIFO
 
_IFIFO


	)

17 
	#S_IFLNK
 
_IFLNK


	)

20 
	#NBBY
 8

	)

21 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

22 
	#FD_SET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] |(1 << (“Ë% NFDBITS)))

	)

23 
	#FD_CLR
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] &~(1 << (“Ë% NFDBITS)))

	)

24 
	#FD_ISSET
(
n
, 
p
Ë(’)->
fds_bôs
[“)/
NFDBITS
] & (1 << (“Ë% NFDBITS)))

	)

27 
	#TELOPT_ECHO
 1

	)

28 
	#TELOPT_SGA
 3

	)

29 
	#TELOPT_TM
 6

	)

30 
	#EOR
 239

	)

31 
	#SE
 240

	)

32 
	#NOP
 241

	)

33 
	#DM
 242

	)

34 
	#BREAK
 243

	)

35 
	#IP
 244

	)

36 
	#AO
 245

	)

37 
	#AYT
 246

	)

38 
	#EC
 247

	)

39 
	#EL
 248

	)

40 
	#GA
 249

	)

41 
	#SB
 250

	)

42 
	#WILL
 251

	)

43 
	#WONT
 252

	)

44 
	#DO
 253

	)

45 
	#DONT
 254

	)

46 
	#IAC
 255

	)

47 
	#MSG_OOB
 0x1

	)

50 
	#MAXPATHLEN
 1024

	)

53 
	#EINPROGRESS
 36

	)

54 
	#EALREADY
 37

	)

55 
	#ECONNREFUSED
 61

	)

61 
	#mkdú
(
a
,
b
Ë
	`mkdú
◊)

	)

66 
gëho°«me
 
PROT
((*, ));

	@amiga/ccdep.h

1 #i‚de‡
AMIGA_CCDEP_H


2 
	#AMIGA_CCDEP_H


	)

4 #ifde‡
LATTICE


7 
	#__°k¨gs
 
__°d¨gs


	)

8 
	#__sigfunc
 *

	)

9 
	#__gëa4
 
__asm


	)

10 
	#__D0
 
__d0


	)

	@amiga/crypt.c

1 
	~<°dio.h
>

10 
	tdes_cblock
[8];

11 
	sdes_ks_°ru˘
 {

12 
des_cblock
 
	m_
;

13 } 
	tdes_key_scheduÀ
[16];

15 
	#DES_KEY_SZ
 ((
des_cblock
))

	)

16 
	#DES_ENCRYPT
 1

	)

17 
	#DES_DECRYPT
 0

	)

19 
	tuch¨
;

20 
	tush‹t
;

21 
	tuöt
;

22 
	tul⁄g
;

24 
	#ITERATIONS
 16

	)

25 
	#HALF_ITERATIONS
 8

	)

27 
	#c2l
(
c
,
l
Ë÷ =((
ul⁄g
)(*((c)++))) , \

28 
l
|=((
ul⁄g
)(*((
c
)++)))<< 8, \

29 
l
|=((
ul⁄g
)(*((
c
)++)))<<16, \

30 
l
|=((
ul⁄g
)(*((
c
)++)))<<24)

	)

32 
	#l2c
(
l
,
c
Ë(*((c)++)=(
uch¨
)(((l) )&0xff), \

33 *((
c
)++)=(
uch¨
)(((
l
)>> 8)&0xff), \

34 *((
c
)++)=(
uch¨
)(((
l
)>>16)&0xff), \

35 *((
c
)++)=(
uch¨
)(((
l
)>>24)&0xff))

	)

37 
	gSPå™s
[8][64] =

182 
ul⁄g
 
	gskb
[8][64] =

323 
	#PERM_OP
(
a
,
b
,
t
,
n
,
m
) ((t)=((((a)>>(n))^(b))&(m)),\

324 (
b
)^=(
t
),\

325 (
a
)^=((
t
)<<(
n
)))

	)

327 
	#HPERM_OP
(
a
,
t
,
n
,
m
) ((t)=((((a)<<(16-(n)))^(a))&(m)),\

328 (
a
)=◊)^(
t
)^—>>(16-(
n
))))\

329 

	)

330 
	gshi·s2
[16] =

333 
des_£t_key
(
des_cblock
 *, 
des_key_scheduÀ
);

334 *
¸y±
(*, *);

335 
body
(
ul⁄g
 *, ul⁄g *, 
des_key_scheduÀ
, ulong, ulong);

337 
	$des_£t_key
(
key
, 
scheduÀ
)

338 
des_cblock
 *
key
;

339 
des_key_scheduÀ
 
scheduÀ
;

341 
c
, 
d
, 
t
, 
s
;

342 *
ö
;

343 *
k
;

344 
i
;

346 
k
 = (*Ë
scheduÀ
;

347 
ö
 = (
uch¨
 *Ë
key
;

349 
	`c2l
(
ö
, 
c
);

350 
	`c2l
(
ö
, 
d
);

353 
	`PERM_OP
(
d
, 
c
, 
t
, 4, 0x0f0f0f0f);

354 
	`HPERM_OP
(
c
, 
t
, -2, 0xcccc0000);

355 
	`HPERM_OP
(
c
, 
t
, -1, 0xaaaa0000);

356 
	`HPERM_OP
(
c
, 
t
, 8, 0x00ff0000);

357 
	`HPERM_OP
(
c
, 
t
, -1, 0xaaaa0000);

358 
	`HPERM_OP
(
d
, 
t
, -8, 0xff000000);

359 
	`HPERM_OP
(
d
, 
t
, 8, 0x00ff0000);

360 
	`HPERM_OP
(
d
, 
t
, 2, 0x33330000);

361 
d
 = ((d & 0x00aa00aa) << 7) | ((d & 0x55005500) >> 7) | (d & 0xaa55aa55);

362 
d
 = (d >> 8Ë| ((
c
 & 0xf0000000) >> 4);

363 
c
 &= 0x0fffffff;

365 
i
 = 0; i < 
ITERATIONS
; i++) {

366 i‡(
shi·s2
[
i
]) {

367 
c
 = ((c >> 2) | (c << 26));

368 
d
 = ((d >> 2) | (d << 26));

370 
c
 = ((c >> 1) | (c << 27));

371 
d
 = ((d >> 1) | (d << 27));

373 
c
 &= 0x0fffffff;

374 
d
 &= 0x0fffffff;

379 
s
 = 
skb
[0][(
c
) & 0x3f] |

380 
skb
[1][((
c
 >> 6) & 0x03) | ((c >> 7) & 0x3c)] |

381 
skb
[2][((
c
 >> 13) & 0x0f) | ((c >> 14) & 0x30)] |

382 
skb
[3][((
c
 >> 20) & 0x01) | ((c >> 21) & 0x06) |

383 ((
c
 >> 22) & 0x38)];

384 
t
 = 
skb
[4][(
d
) & 0x3f] |

385 
skb
[5][((
d
 >> 7) & 0x03) | ((d >> 8) & 0x3c)] |

386 
skb
[6][(
d
 >> 15) & 0x3f] |

387 
skb
[7][((
d
 >> 21) & 0x0f) | ((d >> 22) & 0x30)];

390 *(
k
++Ë((
t
 << 16Ë| (
s
 & 0x0000ffff));

391 
s
 = ((†>> 16Ë| (
t
 & 0xffff0000));

393 
s
 = (s << 4) | (s >> 28);

394 *(
k
++Ë
s
;

397 
	}
}

403 
	#D_ENCRYPT
(
L
,
R
,
S
) \

404 
t
=(
R
<<1)|(R>>31); \

405 
v
=(
t
^(t>>16)); \

406 
u
=(
v
&
E0
); \

407 
v
=(v&
E1
); \

408 
u
=(u^(u<<16))^
t
^
s
[
S
 ]; \

409 
t
=(
v
^(v<<16))^t^
s
[
S
+1]; \

410 
t
=(t>>4)|(t<<28); \

411 
L
^
SPå™s
[1][(
t
 )&0x3f]| \

412 
SPå™s
[3][(
t
>> 8)&0x3f]| \

413 
SPå™s
[5][(
t
>>16)&0x3f]| \

414 
SPå™s
[7][(
t
>>24)&0x3f]| \

415 
SPå™s
[0][(
u
 )&0x3f]| \

416 
SPå™s
[2][(
u
>> 8)&0x3f]| \

417 
SPå™s
[4][(
u
>>16)&0x3f]| \

418 
SPå™s
[6][(
u
>>24)&0x3f];

	)

420 
	#PERM_OP
(
a
,
b
,
t
,
n
,
m
) ((t)=((((a)>>(n))^(b))&(m)),\

421 (
b
)^=(
t
),\

422 (
a
)^=((
t
)<<(
n
)))

	)

424 
uch¨
 
	gc⁄_ß…
[128] =

444 
uch¨
 
	gcov_2ch¨
[64] =

456 *
	$¸y±
(
buf
, 
ß…
)

457 *
buf
;

458 *
ß…
;

460 
i
, 
j
, 
x
, 
y
;

461 
ul⁄g
 
Esw≠0
 = 0, 
Esw≠1
 = 0;

462 
ul⁄g
 
out
[2], 
Œ
;

463 
des_cblock
 
key
;

464 
des_key_scheduÀ
 
ks
;

465 
uch¨
 
buff
[20];

466 
uch¨
 
bb
[9];

467 
uch¨
 *
b
 = 
bb
;

468 
uch¨
 
c
, 
u
;

470 
x
 = 
buff
[0] = 
ß…
[0];

471 
Esw≠0
 = 
c⁄_ß…
[
x
];

472 
x
 = 
buff
[1] = 
ß…
[1];

473 
Esw≠1
 = 
c⁄_ß…
[
x
] << 4;

475 
i
 = 0; i < 8; i++) {

476 
c
 = *(
buf
++);

477 i‡(!
c
)

479 
key
[
i
] = (
c
 << 1);

481 ; 
i
 < 8; i++)

482 
key
[
i
] = 0;

484 
	`des_£t_key
((
des_cblock
 *Ë(
key
), 
ks
);

485 
	`body
(&
out
[0], &out[1], 
ks
, 
Esw≠0
, 
Esw≠1
);

487 
Œ
 = 
out
[0];

488 
	`l2c
(
Œ
, 
b
);

489 
Œ
 = 
out
[1];

490 
	`l2c
(
Œ
, 
b
);

491 
y
 = 0;

492 
u
 = 0x80;

493 
bb
[8] = 0;

494 
i
 = 2; i < 13; i++) {

495 
c
 = 0;

496 
j
 = 0; j < 6; j++) {

497 
c
 <<= 1;

498 i‡(
bb
[
y
] & 
u
)

499 
c
 |= 1;

500 
u
 >>= 1;

501 i‡(!
u
) {

502 
y
++;

503 
u
 = 0x80;

506 
buff
[
i
] = 
cov_2ch¨
[
c
];

508  ((*Ë
buff
);

509 
	}
}

511 
	$body
(
out0
, 
out1
, 
ks
, 
Esw≠0
, 
Esw≠1
)

512 
ul⁄g
 *
out0
, *
out1
;

513 
des_key_scheduÀ
 
ks
;

514 
ul⁄g
 
Esw≠0
, 
Esw≠1
;

516 
l
, 
r
, 
t
, 
u
, 
v
;

517 *
s
;

518 
i
, 
j
;

519 
E0
, 
E1
;

521 
l
 = 0;

522 
r
 = 0;

524 
s
 = (
ul⁄g
 *Ë
ks
;

525 
E0
 = 
Esw≠0
;

526 
E1
 = 
Esw≠1
;

528 
j
 = 0; j < 25; j++) {

529 
i
 = 0; i < (
ITERATIONS
 * 2); i += 4) {

530 
	`D_ENCRYPT
(
l
, 
r
, 
i
);

531 
	`D_ENCRYPT
(
r
, 
l
, 
i
 + 2);

533 
t
 = 
l
;

534 
l
 = 
r
;

535 
r
 = 
t
;

537 
t
 = 
l
;

538 
l
 = 
r
;

539 
r
 = 
t
;

540 
	`PERM_OP
(
r
, 
l
, 
t
, 1, 0x55555555);

541 
	`PERM_OP
(
l
, 
r
, 
t
, 8, 0x00ff00ff);

542 
	`PERM_OP
(
r
, 
l
, 
t
, 2, 0x33333333);

543 
	`PERM_OP
(
l
, 
r
, 
t
, 16, 0x0000ffff);

544 
	`PERM_OP
(
r
, 
l
, 
t
, 4, 0x0f0f0f0f);

546 *
out0
 = 
l
;

547 *
out1
 = 
r
;

549 
	}
}

	@amiga/cstrip.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	$maö
(
¨gc
, *
¨gv
[])

6 
FILE
 *
FIn
;

7 
c
;

8 
mode
 = 0;

10 i‡(
¨gc
 != 2) {

11 
	`Ârötf
(
°dîr
, "Error:Ço input filename given.\n");

12 
	`exô
(0);

14 i‡(!(
FIn
 = 
	`f›í
(
¨gv
[1], "rb"))) {

15 
	`Ârötf
(
°dîr
, "Eº‹ o≥nög %s\n", 
¨gv
[1]);

16 
	`exô
(0);

18 
c
 = 
	`fgëc
(
FIn
);

19 !
	`„of
(
FIn
)) {

20 
mode
) {

22 i‡(
c
 == '/')

23 
mode
 = 1;

25 
	`Âutc
(
c
, 
°dout
);

28 i‡(
c
 == '*')

29 
mode
 = 2;

31 
mode
 = 0;

32 
	`Âutc
('/', 
°dout
);

33 
	`Âutc
(
c
, 
°dout
);

37 i‡(
c
 == '*')

38 
mode
 = 3;

41 i‡(
c
 == '/')

42 
mode
 = 0;

44 
mode
 = 2;

47 
c
 = 
	`fgëc
(
FIn
);

49 
	`f˛o£
(
FIn
);

50 
	}
}

	@amiga/nsignal.h

3 #i‚de‡
AMIGA_NSIGNAL_H


4 
	#AMIGA_NSIGNAL_H


	)

6 
	~<exec/ty≥s.h
>

7 
	~"ccdï.h
"

14 
	#sig«l
(
a
,
b
Ë
	`√w_sig«l
◊,b)

	)

18 
	#SIGALRM
 (
NSIG
-1)

	)

19 
	#SIGUSR1
 (
NSIG
-2)

	)

21 
	#SIGHUP
 29

	)

25 
	#EXT_SIGHUP
 
SIGBREAKF_CTRL_C


	)

26 
	#EXT_SIGINT
 
SIGBREAKF_CTRL_E


	)

27 
	#EXT_SIGUSR
 
SIGBREAKF_CTRL_F


	)

31 
__°k¨gs
 
Æ¨m
();

32 
__°k¨gs
 
__sigfunc
 
√w_sig«l
(, __sigfunc);

33 
__°k¨gs
 
°¨t_timî
(
timevÆ
 *, 
timîeque°
 *);

34 
__°k¨gs
 
£tup_timî
(
LONG
, 
timîeque°
 **);

35 
__°k¨gs
 
˛ónup_timî
(
timîeque°
 **);

36 
__°k¨gs
 
ULONG
 
check_sig«ls
();

	@amiga/replace.c

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

13 
	#MAXBUFSIZE
 4096

	)

18 *
	$£¨ch
(*
•c
, 
¶í
, *
∑t
, 
∂í
)

20 
skù
[256];

21 
i
, 
j
, 
t
;

23 
i
 = 0; i < 256; i++)

24 
skù
[
i
] = 
∂í
;

25 
i
 = 0; i < 
∂í
; i++)

26 
skù
[
∑t
[
i
]] = 
∂í
 - i - 1;

28 
i
 = 
∂í
 - 1, 
j
 =Ölen - 1; j > 0; i--, j--)

29 
•c
[
i
] !
∑t
[
j
]) {

30 
t
 = 
skù
[
•c
[
i
]];

31 
i
 +
∂í
 - 
j
 > 
t
 ?Ölen - j :Å;

32 i‡(
i
 >
¶í
)

33  
NULL
;

34 
j
 = 
∂í
 - 1;

36  
•c
 + 
i
;

37 
	}
}

39 
	$maö
(
¨gc
, *
¨gv
[])

41 
FILE
 *
FIn
;

42 
∂í
, 
¶í
, 
æí
;

43 *
buf
;

44 *
pbuf
, *
sbuf
;

45 
r
, 
w
;

50 i‡(
¨gc
 < 3 ||árgc > 4) {

51 
	`Ârötf
(
°dîr
, "Syntax:Ñeplace search_strÑeplace_str [src_file]\n");

52 
	`exô
(0);

57 i‡(
¨gc
 == 3)

58 
FIn
 = 
°dö
;

60 i‡(!(
FIn
 = 
	`f›í
(
¨gv
[3], "rb"))) {

61 
	`Ârötf
(
°dîr
, "Eº‹ o≥nög %s\n", 
¨gv
[3]);

62 
	`exô
(0);

69 
∂í
 = 
	`°æí
(
¨gv
[1]);

70 
æí
 = 
	`°æí
(
¨gv
[2]);

71 
¶í
 = 
∂í
 + 
MAXBUFSIZE
;

72 
pbuf
 = 
NULL
;

73 
w
 = 0;

74 
buf
 = (*Ë
	`mÆloc
(
¶í
 + 1);

75 i‡(!
buf
) {

76 
	`Ârötf
(
°dîr
, "Errorállocating memory for buffer.\n");

77 
	`exô
(0);

82 
r
 = 
	`‰ód
(
buf
, 1, 
¶í
, 
FIn
);

83 
r
 > 0) {

87 
buf
[
r
] = '\0';

92 
pbuf
 = 
buf
;

93 
sbuf
 = 
	`£¨ch
(
pbuf
, 
r
, 
¨gv
[1], 
∂í
)) {

97 
w
 = 
sbuf
 - 
pbuf
;

98 i‡(
w
) {

99 
	`fwrôe
(
pbuf
, 1, 
w
, 
°dout
);

100 
r
 -
w
;

105 
	`fwrôe
(
¨gv
[2], 1, 
æí
, 
°dout
);

110 
pbuf
 = 
sbuf
 + 
∂í
;

111 
r
 -
∂í
;

117 i‡(
r
 > 
∂í
) {

118 
	`fwrôe
(
pbuf
, 1, 
r
 - 
∂í
, 
°dout
);

119 
pbuf
 +
r
 - 
∂í
;

120 
w
 = 
∂í
;

122 
w
 = 
r
;

128 i‡(
w
) {

129 
	`°∫˝y
(
buf
, 
pbuf
, 
w
);

131 i‡(
	`„of
(
FIn
))

134 
r
 = 
	`‰ód
(
buf
 + 
w
, 1, 
¶í
 - w, 
FIn
);

135 i‡(
r
 >= 0) {

136 
w
 +
r
;

137 
r
 = 
w
;

144 i‡(
w
) {

145 
	`fwrôe
(
buf
, 1, 
w
, 
°dout
);

150 
	`‰ì
(
buf
);

152 
	`fÊush
(
°dout
);

154 i‡(
¨gc
 == 4)

155 
	`f˛o£
(
FIn
);

158 
	}
}

	@amiga/signal.c

31 
	~<sys/ty≥s.h
>

32 
	~<exec/ty≥s.h
>

33 
	~<exec/mem‹y.h
>

34 
	~<exec/èsks.h
>

35 
	~<exec/öãºu±s.h
>

36 
	~<devi˚s/timî.h
>

37 #ifde‡
INCLUDE_VERSION


38 
	~<dos/dos.h
>

39 
	~<˛ib/Æib_¥Ÿos.h
>

40 
	~<˛ib/dos_¥Ÿos.h
>

41 
	~<˛ib/exec_¥Ÿos.h
>

43 
	~<libørõs/dos.h
>

45 
	~<î∫o.h
>

46 
	~<°dlib.h
>

47 
	~<°dio.h
>

48 
	~<sig«l.h
>

49 
	~<f˙é.h
>

50 
	~"nsig«l.h
"

51 #unde‡
sig«l


55 
__ªg¨gs
 
__gëa4
 
ULONG
 
ˇtch_ex˚±i⁄
(
__D0
 ULONG);

57 
ULONG
 
	gsys_sig«l_Æ¨m
 = 0,

58 
	gsys_sig«l_hup
 = 0, 
	gsys_sig«l_u§
 = 0;

60 (*
h™dÀr_hup
Ë(), (*
h™dÀr_Æ¨m
Ë(), (*
h™dÀr_u§
) ();

62 
timîeque°
 *
åeq
 = 
NULL
;

70 
__°k¨gs
 
	$°¨t_timî
(
timevÆ
 * 
tv
, 
timîeque°
 * 
å
)

72 i‡(!
å
) {

73 
	`¥ötf
("noÑequest structure\n");

76 i‡(
tv
->
tv_£cs
 =0L &&Åv->
tv_mi¸o
 < 2L)

77 
tv
->
tv_mi¸o
 = 2L;

79 
å
->
å_time
 = *
tv
;

80 
å
->
å_node
.
io_Comm™d
 = 
TR_ADDREQUEST
;

82 
	`SídIO
((
IOReque°
 *Ë
å
);

84 
	}
}

92 
__°k¨gs
 
	$£tup_timî
(
LONG
 
unô
, 
timîeque°
 ** 
å
)

94 
MsgP‹t
 *
timîp‹t
;

95 
timîeque°
 *
ªq
;

97 i‡(*
å
)

100 i‡(!(
timîp‹t
 = (
MsgP‹t
 *Ë
	`Cª©eP‹t
(0L, 0L))) {

101 *
å
 = 
NULL
;

102 
	`¥ötf
("setup_timer: couldÇot createÖort\n");

105 i‡(!(
ªq
 = (
timîeque°
 *Ë
	`Cª©eExtIO
(
timîp‹t


106 ,(
timîeque°
))

108 
	`DñëeP‹t
(
timîp‹t
);

109 *
å
 = 
NULL
;

110 
	`¥ötf
("setup_timer: couldÇot getÑequest\n");

113 i‡(
	`O≥nDevi˚
(
TIMERNAME
, 
unô
, (
IOReque°
 *Ë
ªq
, 0L)) {

114 
	`Clo£Devi˚
((
IOReque°
 *Ë
ªq
);

115 
	`DñëeExtIO
((
IOReque°
 *Ë
ªq
);

116 
	`DñëeP‹t
(
timîp‹t
);

117 
	`¥ötf
("setup_timer: couldÇot openÅimer\n");

118 *
å
 = 
NULL
;

121 *
å
 = 
ªq
;

123 
	}
}

131 
__°k¨gs
 
	$˛ónup_timî
(
timîeque°
 ** 
å
)

133 
MsgP‹t
 *
ç
;

134 
timîeque°
 *
tmp
;

135 
UBYTE
 
pFœgs
;

137 i‡(*
å
) {

138 
tmp
 = *
å
;

139 
ç
 = 
tmp
->
å_node
.
io_Mesßge
.
mn_RïlyP‹t
;

140 i‡(
ç
) {

142 
pFœgs
 = 
ç
->
mp_Fœgs
;

143 
ç
->
mp_Fœgs
 = 
PA_IGNORE
;

144 
	`Ab‹tIO
((
IOReque°
 *Ë
tmp
);

145 
	`WaôIO
((
IOReque°
 *Ë
tmp
);

146 
	`GëMsg
(
ç
));

147 
	`F‹bid
();

148 
ç
->
mp_Fœgs
 = 
pFœgs
;

149 
	`DñëeP‹t
(
ç
);

150 
	`Pîmô
();

152 
	`Clo£Devi˚
((
IOReque°
 *Ë
tmp
);

153 
	`DñëeExtIO
((
IOReque°
 *Ë
tmp
);

155 *
å
 = 
NULL
;

156 
	}
}

166 
__°k¨gs
 
	$Æ¨m
(
£c⁄ds
)

168 
timevÆ
 
tv
;

169 
fú°
 = 1;

171 i‡(!
åeq
) {

172 
	`¥ötf
("No handler installed !\n");

173 i‡(
£c⁄ds
 > 0)

176 
tv
.
tv_£cs
 = 
£c⁄ds
;

177 
tv
.
tv_mi¸o
 = 0;

179 i‡(
£c⁄ds
 > 0) {

181 i‡(!
fú°
) {

182 
åeq
->
å_node
.
io_Mesßge
.
mn_RïlyP‹t
->
mp_Fœgs
 = 
PA_IGNORE
;

183 
	`Ab‹tIO
((
IOReque°
 *Ë
åeq
);

184 
	`WaôIO
((
IOReque°
 *Ë
åeq
);

185 
åeq
->
å_node
.
io_Mesßge
.
mn_RïlyP‹t
->
mp_Fœgs
 = 
PA_SIGNAL
;

187 
fú°
 = 0;

188 
	`°¨t_timî
(&
tv
, 
åeq
);

195 
åeq
->
å_node
.
io_Mesßge
.
mn_RïlyP‹t
->
mp_Fœgs
 = 
PA_IGNORE
;

196 
	`Ab‹tIO
((
IOReque°
 *Ë
åeq
);

197 
	`WaôIO
((
IOReque°
 *Ë
åeq
);

198 
	`˛ónup_timî
(&
åeq
);

199 
fú°
 = 1;

202 
	}
}

213 
__°k¨gs
 
__sigfunc
 
	$√w_sig«l
(
signo
, 
__sigfunc
 
h™dÀr
)

215 
Task
 *
this_èsk
;

217 
this_èsk
 = (
Task
 *Ë
	`FödTask
(
NULL
);

219 
signo
) {

220 
SIGALRM
:{

221 
ULONG
 
sigÆrm
;

223 
sigÆrm
 = 
sys_sig«l_Æ¨m
;

224 i‡((
__sigfunc
Ë
h™dÀr
 =
SIG_IGN
) {

226 
	`SëEx˚±
(0L, 
sigÆrm
);

227 
sys_sig«l_Æ¨m
 = 0;

228 
h™dÀr_Æ¨m
 = 
NULL
;

229 
	`˛ónup_timî
(&
åeq
);

231 i‡(!
	`£tup_timî
(
UNIT_VBLANK
, &
åeq
)) {

232 
	`¥ötf
("CouldÇot setup_timer\n");

235 
sigÆrm
 = 1L << (
åeq
->
å_node
.
io_Mesßge
.
mn_RïlyP‹t
->
mp_SigBô
);

237 
this_èsk
->
tc_Ex˚±Code
 = (
APTR
Ë
ˇtch_ex˚±i⁄
;

238 
sys_sig«l_Æ¨m
 = 
sigÆrm
;

239 
h™dÀr_Æ¨m
 = ((*Ë()Ë
h™dÀr
;

240 
	`SëEx˚±
(
sigÆrm
, sigalrm);

245 
SIGHUP
:{

246 
ULONG
 
sighup
;

248 
sighup
 = (((
__sigfunc
Ë
h™dÀr
 =
SIG_IGN
Ë|| ((__sigfuncËh™dÀ∏=
SIG_DFL
))

249 ? 0 : 
EXT_SIGHUP
;

251 
this_èsk
->
tc_Ex˚±Code
 = (
APTR
Ë
ˇtch_ex˚±i⁄
;

252 
sys_sig«l_hup
 = 
sighup
;

253 
h™dÀr_hup
 = ((*Ë()Ë
h™dÀr
;

254 
	`SëEx˚±
(
sighup
, 
EXT_SIGHUP
);

257 
SIGUSR1
:{

258 
ULONG
 
sigu§
;

260 
sigu§
 = (((
__sigfunc
Ë
h™dÀr
 =
SIG_IGN
Ë|| ((__sigfuncËh™dÀ∏=
SIG_DFL
))

261 ? 0 : 
EXT_SIGUSR
;

263 
this_èsk
->
tc_Ex˚±Code
 = (
APTR
Ë
ˇtch_ex˚±i⁄
;

264 
sys_sig«l_u§
 = 
sigu§
;

265 
h™dÀr_u§
 = ((*Ë()Ë
h™dÀr
;

266 
	`SëEx˚±
(
sigu§
, 
EXT_SIGUSR
);

270 
	`sig«l
(
signo
, 
h™dÀr
);

273  
h™dÀr
;

274 
	}
}

284 
	g_ChkSig«lLockout
 = 0;

287 
ULONG
 
	$check_sig«ls
()

289 
ULONG
 
mask
;

291 i‡(
_ChkSig«lLockout
)

293 ++
_ChkSig«lLockout
;

295 
mask
 = ((
Task
 *Ë
	`FödTask
(
NULL
))->
tc_SigRecvd
;

298 i‡(!
sys_sig«l_hup
 && (
mask
 & 
SIGBREAKF_CTRL_C
)) {

299 
	`SëSig«l
(0L, 
SIGBREAKF_CTRL_C
);

300 
	`wrôe
(2, "*** Break.\n", 11);

301 
	`exô
(
EXIT_FAILURE
);

304 i‡(
mask
 & 
sys_sig«l_Æ¨m
) {

305 (*
h™dÀr_Æ¨m
) ();

306 
	`SëSig«l
(0L, 
sys_sig«l_Æ¨m
);

308 i‡(
mask
 & 
sys_sig«l_hup
) {

309 (*
h™dÀr_hup
) ();

310 
	`SëSig«l
(0L, 
sys_sig«l_hup
);

312 i‡(
mask
 & 
sys_sig«l_u§
) {

313 (*
h™dÀr_u§
) ();

314 
	`SëSig«l
(0L, 
sys_sig«l_u§
);

316 --
_ChkSig«lLockout
;

317  
mask
;

318 
	}
}

	@amiga/signal_rr.c

9 
	~<exec/ty≥s.h
>

10 #ifde‡
INCLUDE_VERSION


11 
	~<dos/dos.h
>

13 
	~<libørõs/dos.h
>

15 
	~"nsig«l.h
"

16 
__°k¨gs
 
ULONG
 
SëSig«l
(
√wSig«ls
, 
sig«lSë
);

21 
ULONG
 
sys_sig«l_Æ¨m
,

22 
sys_sig«l_hup
, 
sys_sig«l_u§
;

24 (*
h™dÀr_hup
Ë(), (*
h™dÀr_Æ¨m
Ë(), (*
h™dÀr_u§
) ();

35 
__ªg¨gs
 
__gëa4
 
ULONG
 
	$ˇtch_ex˚±i⁄
(
__D0
 
ULONG
 
mask
)

38 i‡(
mask
 & 
sys_sig«l_Æ¨m
)

39 (*
h™dÀr_Æ¨m
) ();

40 i‡(
mask
 & 
sys_sig«l_hup
)

41 (*
h™dÀr_hup
) ();

42 i‡(
mask
 & 
sys_sig«l_u§
)

43 (*
h™dÀr_u§
) ();

45 
	`SëSig«l
(
EXT_SIGINT
, EXT_SIGINT);

46  
mask
;

47 
	}
}

	@amiga/socket.c

8 
	~<˛ib/exec_¥Ÿos.h
>

9 
	~<exec/libørõs.h
>

10 
	~<î∫o.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

14 
	~"sockë.h
"

16 #i‚de‡
__SASC


19 
	#MAXSOCKS
 50

	)

21 #ifde‡
AS225


25 
Libøry
 *
	gSockBa£
 = 
NULL
;

27 
	$amiga_socköô
() {

28 i‡((
SockBa£
 = 
	`O≥nLibøry
("sockë.libøry", 1L)Ë=
NULL
) {

29 
	`¥ötf
("Error opening socket.library\n");

30 
	`exô
(10);

32 
	`£tup_sockës
(
MAXSOCKS
, &
î∫o
);

33 
	}
}

35 
	$amiga_sockexô
() {

36 
	`˛ónup_sockës
();

37 
	`Clo£Libøry
(
SockBa£
);

38 
SockBa£
 = 
NULL
;

39 
	}
}

43 #ifde‡
AMITCP


47 
Libøry
 *
	gSockëBa£
 = 
NULL
;

49 
	$amiga_socköô
() {

50 i‡((
SockëBa£
 = 
	`O≥nLibøry
("bsdsockë.libøry", 1L)Ë=
NULL
) {

51 
	`¥ötf
("Error opening bsdsocket.library\n");

52 
	`exô
(10);

54 
	`SëEºnoPå
(&
î∫o
, (errno));

55 
	}
}

57 
	$amiga_sockexô
() {

58 
	`Clo£Libøry
(
SockëBa£
);

59 
SockëBa£
 = 
NULL
;

60 
	}
}

	@amiga/socket.h

3 #i‚de‡
AMIGA_SOCKET_H


4 
	#AMIGA_SOCKET_H


	)

6 
	~<sys/ty≥s.h
>

7 
	~<sys/î∫o.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sys/sockë.h
>

10 
	~<√töë/ö.h
>

11 
	~<√tdb.h
>

16 #unde‡
˛o£


17 #unde‡
io˘l


18 #unde‡
wrôe


19 #unde‡
ªad


24 #ifde‡
AMITCP


26 
Libøry
 *
SockëBa£
;

28 
	#˛o£
(
s
Ë
	`Clo£Sockë
(s)

	)

29 
	#io˘l
(
s
,
t
,
u
Ë
	`Io˘lSockë
(s,t,(*)u)

	)

30 
	#wrôe
(
s
,
b
,
l
Ë
	`£nd
(s,b,l,0)

	)

31 
	#ªad
(
s
,
b
,
l
Ë
	`ªcv
(s,b,l,0)

	)

32 
	#gësock«me
(
a
,
b
,
c
Ë
	`gësock«me
◊,b,(
LONG
 *)c)

	)

33 
	#ac˚±
(
a
,
b
,
c
Ë
	`ac˚±
◊,b,(
LONG
 *)c)

	)

34 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`ªcv‰om
◊,b,c,d,e,(
LONG
 *)f)

	)

41 #ifde‡
AS225


43 
Libøry
 *
SockBa£
;

45 
	#FD_SETSIZE
 256

	)

46 
	#SOCKET_T
 

	)

48 
	#˛o£
(
s
Ë
	`s_˛o£
(s)

	)

49 
	#io˘l
(
s
,
t
,
u
Ë
	`s_io˘l
(s,t,u)

	)

50 
	#wrôe
(
s
,
b
,
l
Ë
	`£nd
(s,b,l,0)

	)

51 
	#ªad
(
s
,
b
,
l
Ë
	`ªcv
(s,b,l,0)

	)

55 
amiga_socköô
();

56 
amiga_sockexô
();

	@amiga/times.h

1 #i‚de‡
AMIGA_TIMES_H


2 
	#AMIGA_TIMES_H


	)

4 
	~<devi˚s/timî.h
>

9 
	#tv_£c
 
tv_£cs


	)

10 
	#tv_u£c
 
tv_mi¸o


	)

	@amiga/touch.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<time.h
>

12 
	~<exec/libørõs.h
>

13 
	~<dos/dos.h
>

14 
	~<˛ib/dos_¥Ÿos.h
>

16 
	$maö
(
¨gc
, *
¨gv
[]) {

17 i‡(
¨gc
 > 1) {

18 
Libøry
 *
DOSBa£
;

19 
D©eSèmp
 
ds
;

21 i‡(
DOSBa£
->
lib_Vîsi⁄
 >= 37) {

22 --
¨gc
) {

23 
	`D©eSèmp
((
D©eSèmp
 *)&
ds
);

24 
	`SëFûeD©e
(
¨gv
[
¨gc
], (
D©eSèmp
 *)&
ds
);

28 
	}
}

	@applies.h

2 #i‚de‡
APPLIES_H


3 
	#APPLIES_H


	)

5 *
≠∂õs_èbÀ
[];

8 
	#APPLY___INIT_SPECIAL_CHAR
 '#'

	)

9 
	#APPLY___INIT
 "#globÆ_öô#"

	)

10 
	#APPLY_ADJECTIVE
 "∑r£_comm™d_adje˘iv_id_li°"

	)

11 
	#APPLY_CATCH_TELL
 "ˇtch_ãŒ"

	)

12 
	#APPLY_CLEAN_UP
 "˛ón_up"

	)

13 
	#APPLY_CREATE
 "¸óã"

	)

14 
	#APPLY_DESTRUCTOR
 "de°ru˘‹"

	)

15 
	#APPLY_ID
 "id"

	)

16 
	#APPLY_INIT
 "öô"

	)

17 
	#APPLY_LOGON
 "log⁄"

	)

18 
	#APPLY_MOVE
 "move_‹_de°ru˘"

	)

19 
	#APPLY_NET_DEAD
 "√t_dód"

	)

20 
	#APPLY_NOUN
 "∑r£_comm™d_id_li°"

	)

21 
	#APPLY_PLURAL
 "∑r£_comm™d_∂uøl_id_li°"

	)

22 
	#APPLY_PROCESS_INPUT
 "¥o˚ss_öput"

	)

23 
	#APPLY_QGET_ADJID
 "∑r£_comm™d_adje˘ive_id_li°"

	)

24 
	#APPLY_QGET_ID
 "∑r£_comm™d_id_li°"

	)

25 
	#APPLY_QGET_PLURID
 "∑r£_comm™d_∂uøl_id_li°"

	)

26 
	#APPLY_RECEIVE_MESSAGE
 "ª˚ive_mesßge"

	)

27 
	#APPLY_RECEIVE_SNOOP
 "ª˚ive_¢o›"

	)

28 
	#APPLY_RESET
 "ª£t"

	)

29 
	#APPLY_TELNET_SUBOPTION
 "ã ë_sub›ti⁄"

	)

30 
	#APPLY_TERMINAL_TYPE
 "ãrmöÆ_ty≥"

	)

31 
	#APPLY_WINDOW_SIZE
 "wödow_size"

	)

32 
	#APPLY_WRITE_PROMPT
 "wrôe_¥om±"

	)

33 
	#APPLY_AUTHOR_FILE
 0

	)

34 
	#APPLY_COMPILE_OBJECT
 1

	)

35 
	#APPLY_CONNECT
 2

	)

36 
	#APPLY_CRASH
 3

	)

37 
	#APPLY_CREATOR_FILE
 4

	)

38 
	#APPLY_DOMAIN_FILE
 5

	)

39 
	#APPLY_EPILOG
 6

	)

40 
	#APPLY_ERROR_HANDLER
 7

	)

41 
	#APPLY_GET_BACKBONE_UID
 8

	)

42 
	#APPLY_GET_ED_BUFFER_SAVE_FILE_NAME
 9

	)

43 
	#APPLY_GET_ROOT_UID
 10

	)

44 
	#APPLY_LOG_ERROR
 11

	)

45 
	#APPLY_MAKE_PATH_ABSOLUTE
 12

	)

46 
	#APPLY_FLAG
 13

	)

47 
	#APPLY_OBJECT_NAME
 14

	)

48 
	#APPLY_PARSER_ERROR_MESSAGE
 15

	)

49 
	#APPLY_PRELOAD
 16

	)

50 
	#APPLY_PRIVS_FILE
 17

	)

51 
	#APPLY_RETRIEVE_ED_SETUP
 18

	)

52 
	#APPLY_SAVE_ED_SETUP
 19

	)

53 
	#APPLY_SLOW_SHUTDOWN
 20

	)

54 
	#APPLY_USERS
 21

	)

55 
	#APPLY_VALID_ASM
 22

	)

56 
	#APPLY_VALID_BIND
 23

	)

57 
	#APPLY_VALID_COMPILE_TO_C
 24

	)

58 
	#APPLY_VALID_DATABASE
 25

	)

59 
	#APPLY_VALID_HIDE
 26

	)

60 
	#APPLY_VALID_LINK
 27

	)

61 
	#APPLY_LITERALS
 28

	)

62 
	#APPLY_VALID_OBJECT
 29

	)

63 
	#APPLY_VALID_OVERRIDE
 30

	)

64 
	#APPLY_QGET_ALLWORD
 31

	)

65 
	#APPLY_QGET_PREPOS
 32

	)

66 
	#APPLY_VALID_READ
 33

	)

67 
	#APPLY_VALID_SAVE_BINARY
 34

	)

68 
	#APPLY_VALID_SETEUID
 35

	)

69 
	#APPLY_VALID_SHADOW
 36

	)

70 
	#APPLY_VALID_SOCKET
 37

	)

71 
	#APPLY_VALID_WRITE
 38

	)

72 
	#APPLY_PARSE_FIRST_INVENTORY
 39

	)

73 
	#APPLY_PARSE_NEXT_INVENTORY
 40

	)

74 
	#APPLY_PARSE_ENVIRONMENT
 41

	)

76 
	#NUM_MASTER_APPLIES
 42

	)

	@applies_table.c

3 *
	g≠∂õs_èbÀ
[] = {

	@arch.h

3 #i‚de‡
_ARCH_H_


4 
	#_ARCH_H_


	)

6 #ifde‡
£quít


7 
	#ARCH
 "SequíàDYNIX"

	)

10 #ifde‡
WINNT


11 
	#ARCH
 "Mi¸oso· Wödow†NT"

	)

14 #ifde‡
WIN95


15 
	#ARCH
 "Mi¸oso· Wödow†95"

	)

18 #ifde‡
_SEQUENT_


19 
	#ARCH
 "SequíàDYNIX/±x"

	)

22 #ifde‡
__FªeBSD__


23 
	#ARCH
 "FªeBSD"

	)

26 #ifde‡
__NëBSD__


27 #ifde‡
•¨c


28 
	#ARCH
 "NëBSD/•¨c"

	)

30 
	#ARCH
 "NëBSD"

	)

34 #ifde‡
NeXT


35 #ifde‡
m68k


36 
	#ARCH
 "NeXT/68k"

	)

38 
	#ARCH
 "NeXT"

	)

42 #ifde‡
_AIX


43 
	#ARCH
 "AIX"

	)

46 #ifde‡
ac˚l


47 
	#ARCH
 "Ac˚l"

	)

51 #i‡
deföed
(
sun
Ë&& !deföed(
SunOS_5
)

52 #i‡
deföed
(
__svr4__
Ë|| deföed(
__sﬁ__
Ë|| deföed(
SVR4
)

53 
	#SunOS_5


	)

55 #ifde‡
sun4


56 
	#ARCH
 "Sun4"

	)

59 #ifde‡
sun3


60 
	#ARCH
 "Sun3"

	)

62 
	#ARCH
 "Sun"

	)

68 #i‡
deföed
(
SunOS_5
)

69 
	#ARCH
 "Sﬁ¨is"

	)

72 #ifde‡
_AUX_SOURCE


73 
	#ARCH
 "A/UX"

	)

76 #ifde‡
löux


77 #ifde‡
__mc68000


78 
	#ARCH
 "Löux/m68k"

	)

80 #ifde‡
__Æpha


81 
	#ARCH
 "Löux/Æpha"

	)

83 
	#ARCH
 "Löux"

	)

88 #ifde‡
hp68k


89 
	#ARCH
 "HP/68k"

	)

92 #ifde‡
hµa


93 
	#ARCH
 "HP/PA-RISC"

	)

96 #ifde‡
¸ay


97 
	#ARCH
 "Cøy"

	)

100 #i‡!
deföed
(
ARCH
Ë&& deföed(
__Æpha
)

101 
	#ARCH
 "AÕha"

	)

104 #i‡!
deföed
(
ARCH
Ë&& deföed(
__bsdi__
)

105 
	#ARCH
 "BSDI"

	)

108 #i‡!
deföed
(
ARCH
Ë&& deföed(
__386BSD__
)

109 
	#ARCH
 "386bsd"

	)

112 #i‡!
deföed
(
ARCH
Ë&& deföed(
u…rix
)

113 
	#ARCH
 "U…rix"

	)

116 #i‡!
deföed
(
ARCH
Ë&& deföed(
hpux
)

117 
	#ARCH
 "HP/UX"

	)

120 #i‡!
deföed
(
ARCH
Ë&& deföed(
sgi
)

121 
	#ARCH
 "IRIX"

	)

124 #i‡(!
deföed
(
ARCH
Ë&& deföed(
SVR4
))

125 
	#ARCH
 "SVR4"

	)

128 #i‡!
deföed
(
ARCH
Ë&& deföed(
OSF
)

129 
	#ARCH
 "OSF/1"

	)

132 #i‡!
deföed
(
ARCH
Ë&& deföed(
LATTICE
)

133 
	#ARCH
 "Amiga"

	)

136 #i‡!
deföed
(
ARCH
Ë&& deföed(
__APPLE__
Ë&& deföed(
__GNUC__
)

137 
	#ARCH
 "Ma¯OS X"

	)

140 #i‚de‡
ARCH


141 
	#ARCH
 "unknow¿¨chôe˘uª"

	)

	@array.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"comm.h
"

4 
	~"ªgexp.h
"

5 
	~"backíd.h
"

6 
	~"qs‹t.h
"

7 
	~"md.h
"

8 
	~"efun_¥Ÿos.h
"

16 #ifde‡
ARRAY_STATS


17 
	gnum_¨øys
;

18 
	gtŸÆ_¨øy_size
;

21 
INLINE_STATIC
 
buûtö_s‹t_¨øy_cmp_fwd
 
PROT
((
svÆue_t
 *, svalue_t *));

22 
INLINE_STATIC
 
buûtö_s‹t_¨øy_cmp_ªv
 
PROT
((
svÆue_t
 *, svalue_t *));

23 
INLINE_STATIC
 
s‹t_¨øy_cmp
 
PROT
((
svÆue_t
 *, svalue_t *));

24 #i‚de‡
NO_ENVIRONMENT


25 
dìp_övít‹y_cou¡
 
PROT
((
obje˘_t
 *));

26 
dìp_övít‹y_cﬁÀ˘
 
PROT
((
obje˘_t
 *, 
¨øy_t
 *, *));

28 
INLINE_STATIC
 
Æi°_cmp
 
PROT
((
svÆue_t
 *, svalue_t *));

35 
¨øy_t
 
	gthe_nuŒ_¨øy
 =

39 #ifde‡
DEBUG


45 #ifde‡
PACKAGE_MUDLIB_STATS


46 
ms_£tup_°©s
 
	$P1
(
¨øy_t
 *, 
p
) {

47 i‡(
cuºít_obje˘
) {

48 
	`assign_°©s
(&
p
->
°©s
, 
cuºít_obje˘
);

49 
	`add_¨øy_size
(&
p
->
°©s
,Ö->
size
);

51 
	`nuŒ_°©s
(&
p
->
°©s
);

53 
	}
}

55 
	#ms_ªmove_°©s
(
p
Ë
	`add_¨øy_size
(&’)->
°©s
, -()(’)->
size
))

	)

56 
	#ms_add_¨øy_size
(
p
, 
n
Ë
	`add_¨øy_size
’,Ç)

	)

58 
	#ms_£tup_°©s
(
x
)

	)

59 
	#ms_ªmove_°©s
(
x
)

	)

60 
	#ms_add_¨øy_size
(
p
, 
n
)

	)

77 
¨øy_t
 *
öt_Æloˇã_em±y_¨øy
 
	$P1
(, 
n
) {

78 
¨øy_t
 *
p
;

80 #ifde‡
ARRAY_STATS


81 
num_¨øys
++;

82 
tŸÆ_¨øy_size
 +(
¨øy_t
Ë+ (
svÆue_t
Ë* (
n
-1);

84 
p
 = 
	`ALLOC_ARRAY
(
n
);

85 
p
->
ªf
 = 1;

86 
p
->
size
 = 
n
;

87 
	`ms_£tup_°©s
(
p
);

89  
p
;

90 
	}
}

92 
¨øy_t
 *
Æloˇã_em±y_¨øy
 
	$P1
(, 
n
)

94 i‡(
n
 < 0 ||Ç > 
max_¨øy_size
)

95 
	`îr‹
("Illegalárray size.\n");

96 i‡(!
n
Ë &
the_nuŒ_¨øy
;

98  
	`öt_Æloˇã_em±y_¨øy
(
n
);

99 
	}
}

101 
¨øy_t
 *
öt_Æloˇã_¨øy
 
	$P1
(, 
n
)

103 
¨øy_t
 *
p
 = 
	`öt_Æloˇã_em±y_¨øy
(
n
);

105 
n
--)

106 
p
->
ôem
[
n
] = 
c⁄°0
;

108  
p
;

109 
	}
}

111 
¨øy_t
 *
Æloˇã_¨øy
 
	$P1
(, 
n
)

113 
¨øy_t
 *
p
 = 
	`Æloˇã_em±y_¨øy
(
n
);

115 
n
--)

116 
p
->
ôem
[
n
] = 
c⁄°0
;

118  
p
;

119 
	}
}

121 
¨øy_t
 *
Æloˇã_¨øy2
 
	$P2
(, 
n
, 
svÆue_t
 *, 
svp
) {

122 
i
;

123 
¨øy_t
 *
ªt
;

125 i‡(
svp
->
ty≥
 =
T_FUNCTION
) {

126 
ªt
 = 
	`Æloˇã_¨øy
(
n
);

128 
i
 = 0; i < 
n
; i++) {

129 
svÆue_t
 *
r
;

131 
	`push_numbî
(
i
);

132 
r
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
svp
->
u
.
Â
, 1);

133 
ªt
->
ôem
[
i
] = *
r
;

134 
r
->
ty≥
 = 
T_NUMBER
;

137 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
n
);

139 
i
 = 0; i < 
n
; i++)

140 
	`assign_svÆue_no_‰ì
(
ªt
->
ôem
 + 
i
, 
svp
);

143  
ªt
;

144 
	}
}

146 
dóŒoc_em±y_¨øy
 
	$P1
(
¨øy_t
 *, 
p
) {

147 
	`ms_ªmove_°©s
(
p
);

148 #ifde‡
ARRAY_STATS


149 
num_¨øys
--;

150 
tŸÆ_¨øy_size
 -(
¨øy_t
Ë+ (
svÆue_t
) *

151 (
p
->
size
 - 1);

153 
	`FREE
((*Ë
p
);

154 
	}
}

156 
dóŒoc_¨øy
 
	$P1
(
¨øy_t
 *, 
p
)

158 
i
;

160 
i
 = 
p
->
size
; i--;)

161 
	`‰ì_svÆue
(&
p
->
ôem
[
i
], "free_array");

162 
	`dóŒoc_em±y_¨øy
(
p
);

163 
	}
}

165 
‰ì_¨øy
 
	$P1
(
¨øy_t
 *, 
p
)

167 i‡(--(
p
->
ªf
Ë> 0 || (∞=&
the_nuŒ_¨øy
))

170 
	`dóŒoc_¨øy
(
p
);

171 
	}
}

173 
‰ì_em±y_¨øy
 
	$P1
(
¨øy_t
 *, 
p
)

175 i‡((--(
p
->
ªf
Ë> 0Ë|| (∞=&
the_nuŒ_¨øy
))

178 
	`dóŒoc_em±y_¨øy
(
p
);

179 
	}
}

183 
¨øy_t
 *
fix_¨øy
 
	$P2
(
¨øy_t
 *, 
p
, , 
n
) {

184 #ifde‡
ARRAY_STATS


185 
num_¨øys
++;

186 
tŸÆ_¨øy_size
 +(
¨øy_t
Ë+ (
svÆue_t
Ë* (
n
-1);

188 
p
->
size
 = 
n
;

189 
p
->
ªf
 = 1;

190 
	`ms_£tup_°©s
(
p
);

191  
	`RESIZE_ARRAY
(
p
, 
n
);

192 
	}
}

194 
INLINE_STATIC
 
¨øy_t
 *
ªsize_¨øy
 
	$P2
(
¨øy_t
 *, 
p
, , 
n
) {

195 #ifde‡
ARRAY_STATS


196 
tŸÆ_¨øy_size
 +(
n
 - 
p
->
size
Ë* (
svÆue_t
);

198 
	`ms_ªmove_°©s
(
p
);

199 
p
 = 
	`RESIZE_ARRAY
’, 
n
);

200 i‡(!
p
)

201 
	`Áèl
("Out of memory.\n");

202 
p
->
size
 = 
n
;

203 
	`ms_£tup_°©s
(
p
);

205  
p
;

206 
	}
}

208 
¨øy_t
 *
ex∂ode_°rög
 
	$P4
(*, 
°r
, , 
¶í
, *, 
dñ
, , 
Àn
)

210 *
p
, *
beg
, *
œ°dñ
 = 0;

211 
num
, 
j
, 
limô
;

212 
¨øy_t
 *
ªt
;

213 *
buff
, *
tmp
;

214 
sz
;

216 i‡(!
¶í
)

217  &
the_nuŒ_¨øy
;

220 i‡(
Àn
 == 0) {

221 
sz
 = 1;

223 i‡(
¶í
 > 
max_¨øy_size
) {

224 
¶í
 = 
max_¨øy_size
;

226 
ªt
 = 
	`öt_Æloˇã_em±y_¨øy
(
¶í
);

227 
j
 = 0; j < 
¶í
; j++) {

228 
ªt
->
ôem
[
j
].
ty≥
 = 
T_STRING
;

229 
ªt
->
ôem
[
j
].
subty≥
 = 
STRING_MALLOC
;

230 
ªt
->
ôem
[
j
].
u
.
°rög
 = 
tmp
 = 
	`√w_°rög
(1, "explode_string:Åmp");

231 
tmp
[0] = 
°r
[
j
];

232 
tmp
[1] = '\0';

234  
ªt
;

236 i‡(
Àn
 == 1) {

237 
dñimëî
;

239 
dñimëî
 = *
dñ
;

241 #i‚de‡
REVERSIBLE_EXPLODE_STRING


245 *
°r
 =
dñimëî
) {

246 
°r
++;

247 
¶í
--;

248 i‡(
°r
[0] == '\0') {

249  &
the_nuŒ_¨øy
;

251 #ifde‡
SANE_EXPLODE_STRING


259 
p
 = 
°r
, 
num
 = 0; *p;) {

260 i‡(*
p
 =
dñimëî
) {

261 
num
++;

262 
œ°dñ
 = 
p
;

264 
p
++;

271 
limô
 = 
max_¨øy_size
;

272 #ifde‡
REVERSIBLE_EXPLODE_STRING


273 
num
++;

274 
limô
--;

276 i‡(
œ°dñ
 !(
°r
 + 
¶í
 - 1)) {

277 
num
++;

278 
limô
--;

281 i‡(
num
 > 
max_¨øy_size
) {

282 
num
 = 
max_¨øy_size
;

284 
ªt
 = 
	`öt_Æloˇã_em±y_¨øy
(
num
);

285 
p
 = 
°r
, 
beg
 = så, 
num
 = 0; *∞&& (num < 
limô
);) {

286 i‡(*
p
 =
dñimëî
) {

287 
	`DEBUG_CHECK
(
num
 >
ªt
->
size
, "Index out of bounds inÉxplode!\n");

288 
sz
 = 
p
 - 
beg
;

289 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

290 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

291 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
buff
 = 
	`√w_°rög
(
sz
, "explode_string: buff");

293 
	`°∫˝y
(
buff
, 
beg
, 
sz
);

294 
buff
[
sz
] = '\0';

295 
num
++;

296 
beg
 = ++
p
;

298 
p
++;

302 #ifde‡
REVERSIBLE_EXPLODE_STRING


303 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

304 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

305 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen == 1");

308 i‡(*
beg
 !'\0' && 
num
 !
limô
) {

309 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

310 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

311 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen == 1");

314  
ªt
;

316 #i‚de‡
REVERSIBLE_EXPLODE_STRING


320 
	`°∫cmp
(
°r
, 
dñ
, 
Àn
) == 0) {

321 
°r
 +
Àn
;

322 
¶í
 -
Àn
;

323 i‡(
°r
[0] == '\0') {

324  &
the_nuŒ_¨øy
;

326 #ifde‡
SANE_EXPLODE_STRING


335 
p
 = 
°r
, 
num
 = 0; *p;) {

336 i‡(
	`°∫cmp
(
p
, 
dñ
, 
Àn
) == 0) {

337 
num
++;

338 
œ°dñ
 = 
p
;

339 
p
 +
Àn
;

341 
p
++;

349 #ifde‡
REVERSIBLE_EXPLODE_STRING


350 
num
++;

352 i‡(
œ°dñ
 !(
°r
 + 
¶í
 - 
Àn
)) {

353 
num
++;

356 i‡(
num
 > 
max_¨øy_size
) {

357 
num
 = 
max_¨øy_size
;

359 
ªt
 = 
	`öt_Æloˇã_em±y_¨øy
(
num
);

360 
limô
 = 
max_¨øy_size
 - 1;

361 
p
 = 
°r
, 
beg
 = så, 
num
 = 0; *∞&& (num < 
limô
);) {

362 i‡(
	`°∫cmp
(
p
, 
dñ
, 
Àn
) == 0) {

363 i‡(
num
 >
ªt
->
size
)

364 
	`Áèl
("Index out of bounds inÉxplode!\n");

366 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

367 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

368 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
buff
 = 
	`√w_°rög
(
p
 - 
beg
,

371 
	`°∫˝y
(
buff
, 
beg
, 
p
 - beg);

372 
buff
[
p
 - 
beg
] = '\0';

373 
num
++;

374 
beg
 = 
p
 + 
Àn
;

375 
p
 = 
beg
;

377 
p
++;

382 #ifde‡
REVERSIBLE_EXPLODE_STRING


383 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

384 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

385 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen != 1");

387 i‡(*
beg
 !'\0' && 
num
 !
limô
) {

388 
ªt
->
ôem
[
num
].
ty≥
 = 
T_STRING
;

389 
ªt
->
ôem
[
num
].
subty≥
 = 
STRING_MALLOC
;

390 
ªt
->
ôem
[
num
].
u
.
°rög
 = 
	`°rög_c›y
(
beg
, "explode_string:Üast,Üen != 1");

393  
ªt
;

394 
	}
}

396 *
im∂ode_°rög
 
	$P3
(
¨øy_t
 *, 
¨r
, *, 
dñ
, , 
dñ_Àn
)

398 
size
, 
i
, 
num
;

399 *
p
, *
q
;

401 
i
 = 
¨r
->
size
, sizê0, 
num
 = 0; i--;) {

402 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_STRING
) {

403 
size
 +
	`SVALUE_STRLEN
(&
¨r
->
ôem
[
i
]);

404 
num
++;

407 i‡(
num
 == 0)

408  
	`°rög_c›y
("", "implode_string");

410 
p
 = 
	`√w_°rög
(
size
 + (
num
 - 1Ë* 
dñ_Àn
, "implode_string:Ö");

411 
q
 = 
p
;

412 
i
 = 0, 
num
 = 0; i < 
¨r
->
size
; i++) {

413 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_STRING
) {

414 i‡(
num
) {

415 
	`°∫˝y
(
p
, 
dñ
, 
dñ_Àn
);

416 
p
 +
dñ_Àn
;

418 
size
 = 
	`SVALUE_STRLEN
(&
¨r
->
ôem
[
i
]);

419 
	`°∫˝y
(
p
, 
¨r
->
ôem
[
i
].
u
.
°rög
, 
size
);

420 
p
 +
size
;

421 
num
++;

424 *
p
 = 0;

425  
q
;

426 
	}
}

428 
im∂ode_¨øy
 
	$P4
(
fu≈å_t
 *, 
Â
, 
¨øy_t
 *, 
¨r
,

429 
svÆue_t
 *, 
de°
, , 
fú°_⁄_°ack
) {

430 
i
 = 0, 
n
;

431 
svÆue_t
 *
v
;

433 i‡(
fú°_⁄_°ack
) {

434 i‡(!(
n
 = 
¨r
->
size
)) {

435 *
de°
 = *
•
--;

439 i‡(!(
n
 = 
¨r
->
size
)) {

440 *
de°
 = 
c⁄°0
;

442 } i‡(
n
 == 1) {

443 
	`assign_svÆue_no_‰ì
(
de°
, &
¨r
->
ôem
[0]);

448 i‡(!
fú°_⁄_°ack
)

449 
	`push_svÆue
(&
¨r
->
ôem
[
i
++]);

452 
	`push_svÆue
(&
¨r
->
ôem
[
i
++]);

453 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
Â
, 2);

454 i‡(!
v
) {

455 *
de°
 = 
c⁄°0
;

458 i‡(
i
 < 
n
)

459 
	`push_svÆue
(
v
);

463 
	`assign_svÆue_no_‰ì
(
de°
, 
v
);

464 
	}
}

466 
¨øy_t
 *
	$u£rs
()

468 
obje˘_t
 *
ob
;

469 
i
, 
j
;

470 
¨øy_t
 *
ªt
;

471 #ifde‡
F_SET_HIDE


472 
di•œy_hiddí
 = 0;

474 i‡(
num_hiddí_u£rs
 > 0) {

475 i‡(
cuºít_obje˘
->
Êags
 & 
O_HIDDEN
) {

476 
di•œy_hiddí
 = 1;

478 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

481 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num_u£r
 - (
di•œy_hiddí
 ? 0 : 
num_hiddí_u£rs
));

483 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num_u£r
);

485 
i
 = 
j
 = 0; i < 
max_u£rs
; i++) {

486 i‡(!
Æl_u£rs
[
i
]) {

489 
ob
 = 
Æl_u£rs
[
i
]->ob;

490 #ifde‡
F_SET_HIDE


491 i‡(!
di•œy_hiddí
 && (
ob
->
Êags
 & 
O_HIDDEN
))

494 
ªt
->
ôem
[
j
].
ty≥
 = 
T_OBJECT
;

495 
ªt
->
ôem
[
j
].
u
.
ob
 = ob;

496 
	`add_ªf
(
ob
, "users");

497 
j
++;

499  
ªt
;

500 
	}
}

506 
¨øy_t
 *
¶i˚_¨øy
 
	$P3
(
¨øy_t
 *, 
p
, , 
‰om
, , 
to
)

508 
˙t
;

509 
svÆue_t
 *
sv1
, *
sv2
;

511 i‡(
‰om
 < 0)

512 
‰om
 = 0;

513 i‡(
to
 >
p
->
size
)

514 
to
 = 
p
->
size
 - 1;

515 i‡(
‰om
 > 
to
) {

516 
	`‰ì_¨øy
(
p
);

517  &
the_nuŒ_¨øy
;

520 i‡(!(--
p
->
ªf
)) {

521 i‡(
‰om
) {

522 
sv1
 = 
p
->
ôem
 + 
‰om
;

523 
˙t
 = 
‰om
;

524 
˙t
--Ë
	`‰ì_svÆue
(--
sv1
, "slice_array:2");

525 
˙t
 = 
to
 - 
‰om
 + 1;

526 
sv1
 = 
p
->
ôem
;

527 
sv2
 = 
p
->
ôem
 + 
‰om
;

528 
˙t
--Ë*
sv1
++ = *
sv2
++;

530 
sv2
 = 
p
->
ôem
 + 
to
 + 1;

532 
˙t
 = (
p
->
size
 - 1Ë- 
to
;

533 
˙t
--Ë
	`‰ì_svÆue
(
sv2
++, "slice_array:3");

534 
p
 = 
	`ªsize_¨øy
’, 
to
-
‰om
+1);

535 
p
->
ªf
 = 1;

536  
p
;

538 
¨øy_t
 *
d
;

540 
d
 = 
	`öt_Æloˇã_em±y_¨øy
(
to
 - 
‰om
 + 1);

541 
sv1
 = 
d
->
ôem
 - 
‰om
;

542 
sv2
 = 
p
->
ôem
;

543 
˙t
 = 
‰om
; c¡ <
to
; cnt++)

544 
	`assign_svÆue_no_‰ì
(
sv1
 + 
˙t
, 
sv2
 + cnt);

545  
d
;

547 
	}
}

552 
¨øy_t
 *
c›y_¨øy
 
	$P1
(
¨øy_t
 *, 
p
)

554 
¨øy_t
 *
d
;

555 
n
;

556 
svÆue_t
 *
sv1
 = 
p
->
ôem
, *
sv2
;

558 
d
 = 
	`Æloˇã_em±y_¨øy
(
n
 = 
p
->
size
);

559 
sv2
 = 
d
->
ôem
;

560 
n
--)

561 
	`assign_svÆue_no_‰ì
(
sv2
 + 
n
, 
sv1
 +Ç);

562  
d
;

563 
	}
}

565 #ifde‡
F_COMMANDS


566 
¨øy_t
 *
comm™ds
 
	$P1
(
obje˘_t
 *, 
ob
)

568 
£¡í˚_t
 *
s
;

569 
¨øy_t
 *
v
, *
p
;

570 
˙t
 = 0;

571 
svÆue_t
 *
sv
;

573 
s
 = 
ob
->
£¡
; s && s->
vîb
; s = s->
√xt
) {

574 i‡(++
˙t
 =
max_¨øy_size
) ;

576 
v
 = 
	`Æloˇã_em±y_¨øy
(
˙t
);

577 
sv
 = 
v
->
ôem
;

578 
s
 = 
ob
->
£¡
; 
˙t
-- && s && s->
vîb
; s = s->
√xt
) {

579 
sv
->
ty≥
 = 
T_ARRAY
;

580 (
sv
++)->
u
.
¨r
 = 
p
 = 
	`öt_Æloˇã_em±y_¨øy
(4);

581 
p
->
ôem
[0].
ty≥
 = 
T_STRING
;

582 
p
->
ôem
[0].
u
.
°rög
 = 
	`ªf_°rög
(
s
->
vîb
);

583 
p
->
ôem
[0].
subty≥
 = 
STRING_SHARED
;

584 
p
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

585 
p
->
ôem
[1].
u
.
numbî
 = 
s
->
Êags
;

586 
p
->
ôem
[2].
ty≥
 = 
T_OBJECT
;

587 
p
->
ôem
[2].
u
.
ob
 = 
s
->ob;

588 
p
->
ôem
[3].
ty≥
 = 
T_STRING
;

589 i‡(
s
->
Êags
 & 
V_FUNCTION
) {

590 
p
->
ôem
[3].
u
.
°rög
 = "<function>";

591 
p
->
ôem
[3].
subty≥
 = 
STRING_CONSTANT
;

593 
p
->
ôem
[3].
u
.
°rög
 = 
	`ªf_°rög
(
s
->
fun˘i⁄
.s);

594 
p
->
ôem
[3].
subty≥
 = 
STRING_SHARED
;

596 
	`add_ªf
(
s
->
ob
, "commands");

598  
v
;

599 
	}
}

609 #ifde‡
F_FILTER


611 
fûãr_¨øy
 
	$P2
(
svÆue_t
 *, 
¨g
, , 
num_¨g
)

613 
¨øy_t
 *
vec
 = 
¨g
->
u
.
¨r
, *
r
;

614 
size
;

616 i‡((
size
 = 
vec
->size) < 1) {

617 
	`p›_n_ñems
(
num_¨g
 - 1);

621 *
Êags
;

622 
svÆue_t
 *
v
;

623 
ªs
 = 0, 
˙t
;

624 
fun˘i⁄_to_ˇŒ_t
 
·c
;

626 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_FILTER
);

628 
Êags
 = 
	`√w_°rög
(
size
, "TEMP: filter: flags");

629 
	`push_mÆlo˚d_°rög
(
Êags
);

631 
˙t
 = 0; c¡ < 
size
; cnt++) {

632 
	`push_svÆue
(
vec
->
ôem
 + 
˙t
);

633 
v
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 1);

634 i‡(!
	`IS_ZERO
(
v
)) {

635 
Êags
[
˙t
] = 1;

636 
ªs
++;

638 
Êags
[
˙t
] = 0;

640 
r
 = 
	`Æloˇã_em±y_¨øy
(
ªs
);

641 i‡(
ªs
) {

642 
˙t
--) {

643 i‡(
Êags
[
˙t
])

644 
	`assign_svÆue_no_‰ì
(&
r
->
ôem
[--
ªs
], 
vec
->ôem+
˙t
);

648 
	`FREE_MSTR
(
Êags
);

649 
•
--;

650 
	`p›_n_ñems
(
num_¨g
 - 1);

651 
	`‰ì_¨øy
(
vec
);

652 
•
->
u
.
¨r
 = 
r
;

654 
	}
}

657 
fûãr_°rög
 
	$P2
(
svÆue_t
 *, 
¨g
, , 
num_¨g
)

659 i‡(
¨g
->
u
.
°rög
[0] == 0) {

660 
	`p›_n_ñems
(
num_¨g
 - 1);

664 
size
;

665 
svÆue_t
 *
v
;

666 
idx
 = 0, 
˙t
;

667 
fun˘i⁄_to_ˇŒ_t
 
·c
;

668 *
°r
;

670 
	`u∆ök_°rög_svÆue
(
¨g
);

671 
size
 = 
	`SVALUE_STRLEN
(
¨g
);

672 
°r
 = 
¨g
->
u
.
°rög
;

674 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_FILTER
);

676 
˙t
 = 0; c¡ < 
size
; cnt++) {

677 
	`push_numbî
(
°r
[
˙t
]);

678 
v
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 1);

679 i‡(!
	`IS_ZERO
(
v
))

680 
°r
[
idx
++] = så[
˙t
];

683 i‡(
idx
 !
˙t
)

684 
¨g
->
u
.
°rög
 = 
	`exãnd_°rög
◊rg->u.°rög, 
idx
);

686 
	`p›_n_ñems
(
num_¨g
 - 1);

688 
	}
}

715 
ßmevÆ
 
	$P2
(
svÆue_t
 *, 
¨g1
, svÆue_à*, 
¨g2
)

717 
	`DEBUG_CHECK
(!
¨g1
 || !
¨g2
, "NullÖointerÖassedÅo sameval.\n");

719 
¨g1
->
ty≥
 | 
¨g2
->type) {

720 
T_NUMBER
:

721  
¨g1
->
u
.
numbî
 =
¨g2
->u.number;

722 
T_ARRAY
:

723 
T_CLASS
:

724  
¨g1
->
u
.
¨r
 =
¨g2
->u.arr;

725 
T_STRING
:

726 i‡(
	`SVALUE_STRLEN_DIFFERS
(
¨g1
, 
¨g2
))  0;

727  !
	`°rcmp
(
¨g1
->
u
.
°rög
, 
¨g2
->u.string);

728 
T_OBJECT
:

729  
¨g1
->
u
.
ob
 =
¨g2
->u.ob;

730 
T_MAPPING
:

731  
¨g1
->
u
.
m≠
 =
¨g2
->u.map;

732 
T_FUNCTION
:

733  
¨g1
->
u
.
Â
 =
¨g2
->u.fp;

734 
T_REAL
:

735  
¨g1
->
u
.
ªÆ
 =
¨g2
->u.real;

736 #i‚de‡
NO_BUFFER_TYPE


737 
T_BUFFER
:

738  
¨g1
->
u
.
buf
 =
¨g2
->u.buf;

742 
	}
}

744 #ifde‡
F_UNIQUE_ARRAY


746 
	sunique_s
 {

747 
svÆue_t
 
	mm¨k
;

748 
	mcou¡
;

749 
unique_s
 *
	m√xt
;

750 *
	mödi˚s
;

751 } 
	tunique_t
;

753 
	sunique_li°_s
 {

754 
unique_t
 *
	mhód
;

755 
unique_li°_s
 *
	m√xt
;

756 } 
	tunique_li°_t
;

758 
unique_li°_t
 *
	gg_u_li°
 = 0;

760 
unique_¨øy_îr‹_h™dÀr
 
PROT
(()) {

761 
unique_li°_t
 *
	gu∆i°
 = 
g_u_li°
;

762 
unique_t
 *
	gu±r
 = 
u∆i°
->
hód
, *
	g≈å
;

764 
	gg_u_li°
 = 
g_u_li°
->
√xt
;

765 
	gu±r
) {

766 
	g≈å
 = 
u±r
->
√xt
;

767 
FREE
((*Ë
u±r
->
ödi˚s
);

768 
‰ì_svÆue
(&
u±r
->
m¨k
, "unique_array_error_handler");

769 
FREE
((*Ë
u±r
);

770 
	gu±r
 = 
≈å
;

772 
FREE
((*)
u∆i°
);

775 
f_unique_¨øy
 
PROT
(()) {

776 
¨øy_t
 *
	gv
, *
	gªt
;

777 
	gsize
, 
	gi
, 
	gnumkeys
 = 0, *
	göd
, 
	gnum_¨g
 = 
°_num_¨g
;

778 
svÆue_t
 *
	gskùvÆ
, *
	gsv
, *
	gsvp
;

779 
unique_li°_t
 *
	gu∆i°
;

780 
unique_t
 **
	ghód
, *
	gu±r
, *
	g≈å
;

781 
fu≈å_t
 *
	gÂ
 = 0;

782 *
	gfunc
;

784 
	gsize
 = (
v
 = (
•
 - 
num_¨g
 + 1)->
u
.
¨r
)->
size
;

785 i‡(!
	gsize
) {

786 i‡(
	gnum_¨g
 =3Ë
‰ì_svÆue
(
•
--, "f_unique_array");

787 
‰ì_svÆue
(
•
--, "f_unique_array");

791 i‡(
	gnum_¨g
 == 3) {

792 
skùvÆ
 = 
•
;

793 i‡((
	g•
-1)->
	gty≥
 =
T_FUNCTION
Ë
Â
 = (
•
-1)->
u
.fp;

794 
	gfunc
 = (
•
-1)->
u
.
°rög
;

797 
	gskùvÆ
 = &
c⁄°0
;

798 i‡(
	g•
->
	gty≥
 =
T_FUNCTION
Ë
Â
 = 
•
->
u
.fp;

799 
	gfunc
 = 
•
->
u
.
°rög
;

802 
	gu∆i°
 = 
ALLOCATE
(
unique_li°_t
, 
TAG_TEMPORARY
, "f_unique_array:1");

803 
	gu∆i°
->
	g√xt
 = 
g_u_li°
;

804 
	gu∆i°
->
	ghód
 = 0;

805 
	ghód
 = &
u∆i°
->
hód
;

806 
	gg_u_li°
 = 
u∆i°
;

808 
	gSTACK_INC
;

809 
	g•
->
	gty≥
 = 
T_ERROR_HANDLER
;

810 
	g•
->
	gu
.
	gîr‹_h™dÀr
 = 
unique_¨øy_îr‹_h™dÀr
;

812 
	gi
 = 0; i < 
	gsize
; i++) {

813 i‡(
	gÂ
) {

814 
push_svÆue
(
v
->
ôem
 + 
i
);

815 
	gsv
 = 
ˇŒ_fun˘i⁄_poöãr
(
Â
, 1);

816 } i‡((
	gv
->
	gôem
 + 
	gi
)->
	gty≥
 =
T_OBJECT
) {

817 
sv
 = 
≠∂y
(
func
, (
v
->
ôem
 + 
i
)->
u
.
ob
, 0, 
ORIGIN_EFUN
);

818 } 
	gsv
 = 0;

820 i‡(
	gsv
 && !
ßmevÆ
(
sv
, 
skùvÆ
)) {

821 
	gu±r
 = *
hód
;

822 
	gu±r
) {

823 i‡(
ßmevÆ
(
sv
, &
u±r
->
m¨k
)) {

824 
	gu±r
->
	gödi˚s
 = 
RESIZE
(
u±r
->
ödi˚s
, u±r->
cou¡
 + 1, ,

825 
TAG_TEMPORARY
, "f_unique_array:2");

826 
	gu±r
->
	gödi˚s
[
u±r
->
cou¡
++] = 
i
;

829 
	gu±r
 = 
u±r
->
√xt
;

831 i‡(!
	gu±r
) {

832 
	gnumkeys
++;

833 
	gu±r
 = 
ALLOCATE
(
unique_t
, 
TAG_TEMPORARY
, "f_unique_array:3");

834 
	gu±r
->
	gödi˚s
 = 
ALLOCATE
(, 
TAG_TEMPORARY
, "f_unique_array:4");

835 
	gu±r
->
	gcou¡
 = 1;

836 
	gu±r
->
	gödi˚s
[0] = 
i
;

837 
	gu±r
->
	g√xt
 = *
hód
;

838 
assign_svÆue_no_‰ì
(&
u±r
->
m¨k
, 
sv
);

839 *
	ghód
 = 
u±r
;

844 
	gªt
 = 
Æloˇã_em±y_¨øy
(
numkeys
);

845 
	gu±r
 = *
hód
;

846 
	gsvp
 = 
v
->
ôem
;

847 
	gnumkeys
--) {

848 
	g≈å
 = 
u±r
->
√xt
;

849 (
	gsv
 = 
ªt
->
ôem
 + 
numkeys
)->
ty≥
 = 
T_ARRAY
;

850 
	gsv
->
	gu
.
	g¨r
 = 
Æloˇã_em±y_¨øy
(
i
 = 
u±r
->
cou¡
);

851 
	gskùvÆ
 = 
sv
->
u
.
¨r
->
ôem
 + 
i
;

852 
	göd
 = 
u±r
->
ödi˚s
;

853 
	gi
--) {

854 
assign_svÆue_no_‰ì
(--
skùvÆ
, 
svp
 + 
öd
[
i
]);

856 
FREE
((*)
öd
);

857 
‰ì_svÆue
(&
u±r
->
m¨k
, "f_unique_array");

858 
FREE
((*)
u±r
);

859 
	gu±r
 = 
≈å
;

862 
	gu∆i°
 = 
g_u_li°
->
√xt
;

863 
FREE
((*)
g_u_li°
);

864 
	gg_u_li°
 = 
u∆i°
;

865 
	g•
--;

866 
p›_n_ñems
(
num_¨g
 - 1);

867 
‰ì_¨øy
(
v
);

868 
	g•
->
	gu
.
	g¨r
 = 
ªt
;

879 
¨øy_t
 *
add_¨øy
 
	$P2
(
¨øy_t
 *, 
p
,áºay_à*, 
r
)

881 
˙t
, 
ªs
;

882 
¨øy_t
 *
d
;

888 i‡(
p
->
size
 == 0) {

889 
p
->
ªf
--;

890  
r
->
ªf
 > 1 ? (r->ªf--, 
	`c›y_¨øy
(r)) :Ñ;

892 i‡(
r
->
size
 == 0) {

893 
r
->
ªf
--;

894  
p
->
ªf
 > 1 ? (p->ªf--, 
	`c›y_¨øy
(p)) :Ö;

897 
ªs
 = 
p
->
size
 + 
r
->size;

898 i‡(
ªs
 < 0 ||Ñe†> 
max_¨øy_size
)

899 
	`îr‹
("result ofárrayáddition is greaterÅhan maximumárray size.\n");

902 i‡((
p
 =
r
Ë&& (p->
ªf
 == 2)) {

903 
osize
 = 
p
->
size
;

905 
p
->
ªf
 = 1;

906 
d
 = 
	`ªsize_¨øy
(
p
, 
ªs
);

909 
˙t
 = 
osize
; cnt--; )

910 
	`assign_svÆue_no_‰ì
(&
d
->
ôem
[--
ªs
], &d->ôem[
˙t
]);

912  
d
;

916 i‡(
p
->
ªf
 == 1) {

917 
d
 = 
	`ªsize_¨øy
(
p
, 
ªs
);

920 
d
 = 
	`öt_Æloˇã_em±y_¨øy
(
ªs
);

922 
˙t
 = 
p
->
size
; cnt--;)

923 
	`assign_svÆue_no_‰ì
(&
d
->
ôem
[
˙t
], &
p
->item[cnt]);

924 
p
->
ªf
--;

928 i‡(
r
->
ªf
 == 1) {

929 
˙t
 = 
r
->
size
; cnt--;)

930 
d
->
ôem
[--
ªs
] = 
r
->ôem[
˙t
];

931 
	`dóŒoc_em±y_¨øy
(
r
);

933 
˙t
 = 
r
->
size
; cnt--;)

934 
	`assign_svÆue_no_‰ì
(&
d
->
ôem
[--
ªs
], &
r
->ôem[
˙t
]);

935 
r
->
ªf
--;

938  
d
;

939 
	}
}

941 #i‚de‡
NO_ENVIRONMENT


943 
¨øy_t
 *
Æl_övít‹y
 
	$P2
(
obje˘_t
 *, 
ob
, , 
ovîride
)

945 
¨øy_t
 *
d
;

946 
obje˘_t
 *
cur
;

947 
˙t
, 
ªs
;

948 
di•œy_hiddí
;

950 i‡(
ovîride
) {

951 
di•œy_hiddí
 = 1;

953 
di•œy_hiddí
 = -1;

955 
˙t
 = 0;

956 
cur
 = 
ob
->
c⁄èös
; cur; cu∏cur->
√xt_öv
) {

957 #ifde‡
F_SET_HIDE


958 i‡(
cur
->
Êags
 & 
O_HIDDEN
) {

959 i‡(
di•œy_hiddí
 == -1) {

960 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

962 i‡(
di•œy_hiddí
)

963 
˙t
++;

966 
˙t
++;

969 i‡(!
˙t
)

970  &
the_nuŒ_¨øy
;

972 
d
 = 
	`öt_Æloˇã_em±y_¨øy
(
˙t
);

973 
cur
 = 
ob
->
c⁄èös
;

975 
ªs
 = 0;Ñe†< 
˙t
;Ñes++) {

976 #ifde‡
F_SET_HIDE


977 i‡((
cur
->
Êags
 & 
O_HIDDEN
Ë&& !
di•œy_hiddí
) {

978 
cur
 = cur->
√xt_öv
;

979 
ªs
--;

983 
d
->
ôem
[
ªs
].
ty≥
 = 
T_OBJECT
;

984 
d
->
ôem
[
ªs
].
u
.
ob
 = 
cur
;

985 
	`add_ªf
(
cur
, "all_inventory");

986 
cur
 = cur->
√xt_öv
;

988  
d
;

989 
	}
}

995 #ifde‡
F_MAP


997 
m≠_¨øy
 
	$P2
(
svÆue_t
 *, 
¨g
, , 
num_¨g
)

999 
¨øy_t
 *
¨r
 = 
¨g
->
u
.arr;

1000 
¨øy_t
 *
r
;

1001 
size
;

1003 i‡((
size
 = 
¨r
->sizeË=0Ë
r
 = &
the_nuŒ_¨øy
;

1005 
fun˘i⁄_to_ˇŒ_t
 
·c
;

1006 
˙t
;

1007 
svÆue_t
 *
v
;

1009 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_MAP
);

1011 
r
 = 
	`öt_Æloˇã_¨øy
(
size
);

1013 
	`push_ª„d_¨øy
(
r
);

1015 
˙t
 = 0; c¡ < 
size
; cnt++) {

1016 
	`push_svÆue
(
¨r
->
ôem
 + 
˙t
);

1017 
v
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 1);

1018 i‡(
v
Ë
	`assign_svÆue_no_‰ì
(&
r
->
ôem
[
˙t
], v);

1021 
•
--;

1024 
	`p›_n_ñems
(
num_¨g
);

1025 
	`push_ª„d_¨øy
(
r
);

1026 
	}
}

1029 
m≠_°rög
 
	$P2
(
svÆue_t
 *, 
¨g
, , 
num_¨g
)

1031 *
¨r
 = 
¨g
->
u
.
°rög
;

1032 *
p
;

1033 
fu≈å_t
 *
Â
 = 0;

1034 
numex
 = 0;

1035 
obje˘_t
 *
ob
;

1036 
svÆue_t
 *
exåa
, *
v
;

1037 *
func
;

1044 
	`u∆ök_°rög_svÆue
(
¨g
);

1045 
¨r
 = 
¨g
->
u
.
°rög
;

1047 i‡(
¨g
[1].
ty≥
 =
T_FUNCTION
) {

1048 
Â
 = 
¨g
[1].
u
.fp;

1049 i‡(
num_¨g
 > 2Ë
exåa
 = 
¨g
 + 2, 
numex
 =Çum_arg - 2;

1052 
func
 = 
¨g
[1].
u
.
°rög
;

1053 i‡(
num_¨g
 < 3Ë
ob
 = 
cuºít_obje˘
;

1055 i‡(
¨g
[2].
ty≥
 =
T_OBJECT
Ë
ob
 =árg[2].
u
.ob;

1056 i‡(
¨g
[2].
ty≥
 =
T_STRING
) {

1057 i‡((
ob
 = 
	`föd_obje˘
(
¨g
[2].
u
.
°rög
)Ë&& !
	`obje˘_visibÀ
(ob))

1058 
ob
 = 0;

1060 i‡(
num_¨g
 > 3Ë
exåa
 = 
¨g
 + 3, 
numex
 =Çum_arg - 3;

1061 i‡(!
ob
Ë
	`îr‹
("Badárgument 3Åo map_string.\n");

1065 
p
 = 
¨r
; *p;Ö++) {

1066 
	`push_numbî
(()*
p
);

1067 i‡(
numex
Ë
	`push_some_svÆues
(
exåa
,Çumex);

1068 
v
 = 
Â
 ? 
	`ˇŒ_fun˘i⁄_poöãr
(Â, 
numex
 + 1Ë: 
	`≠∂y
(
func
, 
ob
, 1 +Çumex, 
ORIGIN_EFUN
);

1076 i‡(!
v
) ;

1077 i‡(
v
->
ty≥
 =
T_NUMBER
 && v->
u
.
numbî
 !0Ë*
p
 = (()(v->u.number));

1080 
	`p›_n_ñems
(
num_¨g
 - 1);

1082 
	}
}

1085 #ifde‡
F_SORT_ARRAY


1086 
fun˘i⁄_to_ˇŒ_t
 *
	gs‹t_¨øy_·c
;

1088 
	#COMPARE_NUMS
(
x
,
y
Ë(x < y ? -1 : (x > y ? 1 : 0))

	)

1090 
¨øy_t
 *
buûtö_s‹t_¨øy
 
	$P2
(
¨øy_t
 *, 
öli°
, , 
dú
)

1092 
	`quickS‹t
((*Ë
öli°
->
ôem
, i∆i°->
size
, (inlist->item),

1093 (
dú
<0Ë? 
buûtö_s‹t_¨øy_cmp_ªv
 : 
buûtö_s‹t_¨øy_cmp_fwd
);

1095  
öli°
;

1096 
	}
}

1098 
INLINE_STATIC
 
buûtö_s‹t_¨øy_cmp_fwd
 
	$P2
(
svÆue_t
 *, 
p1
, svÆue_à*, 
p2
)

1100 
p1
->
ty≥
 | 
p2
->type) {

1101 
T_STRING
:

1103  
	`°rcmp
(
p1
->
u
.
°rög
, 
p2
->u.string);

1106 
T_NUMBER
:

1108  
	`COMPARE_NUMS
(
p1
->
u
.
numbî
, 
p2
->u.number);

1111 
T_REAL
:

1113  
	`COMPARE_NUMS
(
p1
->
u
.
ªÆ
, 
p2
->u.real);

1116 
T_ARRAY
:

1118 
¨øy_t
 *
v1
 = 
p1
->
u
.
¨r
, *
v2
 = 
p2
->u.arr;

1119 i‡(!
v1
->
size
 || !
v2
->size)

1120 
	`îr‹
("IllegalÅo haveÉmptyárray inárray for sort_array()\n");

1123 
v1
->
ôem
->
ty≥
 | 
v2
->item->type) {

1124 
T_STRING
:

1126  
	`°rcmp
(
v1
->
ôem
->
u
.
°rög
, 
v2
->item->u.string);

1129 
T_NUMBER
:

1131  
	`COMPARE_NUMS
(
v1
->
ôem
->
u
.
numbî
, 
v2
->item->u.number);

1134 
T_REAL
:

1136  
	`COMPARE_NUMS
(
v1
->
ôem
->
u
.
ªÆ
, 
v2
->item->u.real);

1141 
	`îr‹
("sort_array() cannot handleárrays ofárrays whose 1stÉlems\naren't strings/ints/floats\n");

1147 
	`îr‹
("built-in sort_array() can only handle homogeneousárrays of strings/ints/floats/arrays\n");

1149 
	}
}

1151 
INLINE_STATIC
 
buûtö_s‹t_¨øy_cmp_ªv
 
	$P2
(
svÆue_t
 *, 
p1
, svÆue_à*, 
p2
)

1153 
p1
->
ty≥
 | 
p2
->type) {

1154 
T_STRING
:

1156  
	`°rcmp
(
p2
->
u
.
°rög
, 
p1
->u.string);

1159 
T_NUMBER
:

1161  
	`COMPARE_NUMS
(
p2
->
u
.
numbî
, 
p1
->u.number);

1164 
T_REAL
:

1166  
	`COMPARE_NUMS
(
p2
->
u
.
ªÆ
, 
p1
->u.real);

1169 
T_ARRAY
:

1171 
¨øy_t
 *
v1
 = 
p1
->
u
.
¨r
, *
v2
 = 
p2
->u.arr;

1172 i‡(!
v1
->
size
 || !
v2
->size)

1173 
	`îr‹
("IllegalÅo haveÉmptyárray inárray for sort_array()\n");

1176 
v1
->
ôem
->
ty≥
 | 
v2
->item->type) {

1177 
T_STRING
:

1179  
	`°rcmp
(
v2
->
ôem
->
u
.
°rög
, 
v1
->item->u.string);

1182 
T_NUMBER
:

1184  
	`COMPARE_NUMS
(
v2
->
ôem
->
u
.
numbî
, 
v1
->item->u.number);

1187 
T_REAL
:

1189  
	`COMPARE_NUMS
(
v2
->
ôem
->
u
.
ªÆ
, 
v1
->item->u.real);

1194 
	`îr‹
("sort_array() cannot handleárrays ofárrays whose 1stÉlems\naren't strings/ints/floats\n");

1200 
	`îr‹
("built-in sort_array() can only handle homogeneousárrays of strings/ints/floats/arrays\n");

1202 
	}
}

1204 
INLINE_STATIC


1205 
s‹t_¨øy_cmp
 
	$P2
(
svÆue_t
 *, 
p1
, svÆue_à*, 
p2
) {

1206 
svÆue_t
 *
d
;

1208 
	`push_svÆue
(
p1
);

1209 
	`push_svÆue
(
p2
);

1211 
d
 = 
	`ˇŒ_efun_ˇŒback
(
s‹t_¨øy_·c
, 2);

1213 i‡(!
d
 || d->
ty≥
 !
T_NUMBER
) {

1216  
d
->
u
.
numbî
;

1218 
	}
}

1221 
f_s‹t_¨øy
 
PROT
(())

1223 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

1224 
¨øy_t
 *
	gtmp
 = 
¨g
->
u
.
¨r
;

1225 
	gnum_¨g
 = 
°_num_¨g
;

1227 
check_f‹_de°r
(
tmp
);

1229 
	g¨g
[1].
	gty≥
) {

1230 
	gT_NUMBER
:

1232 
tmp
 = 
buûtö_s‹t_¨øy
(
c›y_¨øy
—mp), 
¨g
[1].
u
.
numbî
);

1236 
	gT_FUNCTION
:

1237 
T_STRING
:

1247 
fun˘i⁄_to_ˇŒ_t
 
·c
, *
	gﬁd_±r
;

1249 
	gﬁd_±r
 = 
s‹t_¨øy_·c
;

1250 
	gs‹t_¨øy_·c
 = &
·c
;

1251 
¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_SORT_ARRAY
);

1253 
	gtmp
 = 
c›y_¨øy
(
tmp
);

1254 
quickS‹t
((*Ë
tmp
->
ôem
,Åmp->
size
, —mp->ôem), 
s‹t_¨øy_cmp
);

1255 
	gs‹t_¨øy_·c
 = 
ﬁd_±r
;

1260 
p›_n_ñems
(
num_¨g
);

1261 
push_ª„d_¨øy
(
tmp
);

1277 #i‚de‡
NO_ENVIRONMENT


1278 
	gvÆid_hide_Êag
;

1280 
dìp_övít‹y_cou¡
 
	$P1
(
obje˘_t
 *, 
ob
)

1282 
obje˘_t
 *
cur
;

1283 
˙t
;

1285 
˙t
 = 0;

1288 
cur
 = 
ob
->
c⁄èös
; cur; cu∏cur->
√xt_öv
) {

1289 #ifde‡
F_SET_HIDE


1290 i‡(
cur
->
Êags
 & 
O_HIDDEN
) {

1291 i‡(!
vÆid_hide_Êag
)

1292 
vÆid_hide_Êag
 = 1 +

1293 (
	`vÆid_hide
(
cuºít_obje˘
) ? 1 : 0);

1294 i‡(
vÆid_hide_Êag
 & 2) {

1295 
˙t
++;

1296 
˙t
 +
	`dìp_övít‹y_cou¡
(
cur
);

1300 
˙t
++;

1301 
˙t
 +
	`dìp_övít‹y_cou¡
(
cur
);

1302 #ifde‡
F_SET_HIDE


1307  
˙t
;

1308 
	}
}

1310 
dìp_övít‹y_cﬁÀ˘
 
	$P3
(
obje˘_t
 *, 
ob
, 
¨øy_t
 *, 
öv
, *, 
i
)

1312 
obje˘_t
 *
cur
;

1315 
cur
 = 
ob
->
c⁄èös
; cur; cu∏cur->
√xt_öv
) {

1316 #ifde‡
F_SET_HIDE


1317 i‡(
cur
->
Êags
 & 
O_HIDDEN
) {

1318 i‡(
vÆid_hide_Êag
 & 2) {

1319 
öv
->
ôem
[*
i
].
ty≥
 = 
T_OBJECT
;

1320 
öv
->
ôem
[*
i
].
u
.
ob
 = 
cur
;

1321 (*
i
)++;

1322 
	`add_ªf
(
cur
, "deep_inventory_collect");

1324 
	`dìp_övít‹y_cﬁÀ˘
(
cur
, 
öv
, 
i
);

1328 
öv
->
ôem
[*
i
].
ty≥
 = 
T_OBJECT
;

1329 
öv
->
ôem
[*
i
].
u
.
ob
 = 
cur
;

1330 (*
i
)++;

1331 
	`add_ªf
(
cur
, "deep_inventory_collect");

1333 
	`dìp_övít‹y_cﬁÀ˘
(
cur
, 
öv
, 
i
);

1334 #ifde‡
F_SET_HIDE


1338 
	}
}

1340 
¨øy_t
 *
dìp_övít‹y
 
	$P2
(
obje˘_t
 *, 
ob
, , 
èke_t›
)

1342 
¨øy_t
 *
döv
;

1343 
i
;

1345 
vÆid_hide_Êag
 = 0;

1351 
i
 = 
	`dìp_övít‹y_cou¡
(
ob
);

1352 i‡(
èke_t›
)

1353 
i
++;

1355 i‡(
i
 == 0)

1356  &
the_nuŒ_¨øy
;

1361 
döv
 = 
	`öt_Æloˇã_em±y_¨øy
(
i
);

1362 i‡(
èke_t›
) {

1363 
döv
->
ôem
[0].
ty≥
 = 
T_OBJECT
;

1364 
döv
->
ôem
[0].
u
.
ob
 = ob;

1365 
	`add_ªf
(
ob
, "deep_inventory");

1370 
i
 = 
èke_t›
;

1371 
	`dìp_övít‹y_cﬁÀ˘
(
ob
, 
döv
, &
i
);

1373  
döv
;

1374 
	}
}

1377 
INLINE_STATIC
 
Æi°_cmp
 
	$P2
(
svÆue_t
 *, 
p1
, svÆue_à*, 
p2
)

1379 
d
;

1381 i‡((
d
 = 
p1
->
u
.
numbî
 - 
p2
->u.number))

1382  
d
;

1383 i‡((
d
 = 
p1
->
ty≥
 - 
p2
->type))

1384  
d
;

1386 
	}
}

1388 
INLINE_STATIC
 
svÆue_t
 *
Æi°_s‹t
 
	$P1
(
¨øy_t
 *, 
öli°
) {

1389 
size
, 
j
, 
curix
, 
∑rix
, 
chûd1
, 
chûd2
, 
Êag
;

1390 
svÆue_t
 *
sv_èb
, *
tmp
, *
èbÀ
, *
sv_±r
, 
vÆ
;

1391 *
°r
;

1393 i‡(!(
size
 = 
öli°
->size)Ë (
svÆue_t
 *)
NULL
;

1394 i‡((
Êag
 = (
öli°
->
ªf
 > 1))) {

1395 
sv_èb
 = 
	`CALLOCATE
(
size
, 
svÆue_t
, 
TAG_TEMPORARY
, "alist_sort: sv_tab");

1396 
sv_±r
 = 
öli°
->
ôem
;

1397 
j
 = 0; j < 
size
; j++) {

1398 i‡(((
tmp
 = (
sv_±r
 + 
j
))->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1399 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "alist_sort");

1400 
sv_èb
[
j
] = *
tmp
 = 
c⁄°0u
;

1401 } i‡((
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
)) {

1402 
sv_èb
[
j
].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
tmp
->u.string);

1403 (
tmp
 = 
sv_èb
 + 
j
)->
subty≥
 = 
STRING_SHARED
;

1404 
tmp
->
ty≥
 = 
T_STRING
;

1405 } 
	`assign_svÆue_no_‰ì
(
sv_èb
 + 
j
, 
tmp
);

1407 i‡((
curix
 = 
j
)) {

1408 
vÆ
 = *
tmp
;

1411 
∑rix
 = (
curix
 - 1) >> 1;

1412 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0) {

1413 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1414 
sv_èb
[
∑rix
] = 
vÆ
;

1416 } (
curix
 = 
∑rix
));

1420 
sv_èb
 = 
öli°
->
ôem
;

1421 
j
 = 0; j < 
size
; j++) {

1422 i‡(((
tmp
 = (
sv_èb
 + 
j
))->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1423 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "alist_sort");

1424 *
tmp
 = 
c⁄°0u
;

1425 } i‡((
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
)) {

1426 
°r
 = 
	`make_sh¨ed_°rög
(
tmp
->
u
.
°rög
);

1427 
	`‰ì_°rög_svÆue
(
tmp
);

1428 
tmp
->
u
.
°rög
 = 
°r
;

1429 
tmp
->
subty≥
 = 
STRING_SHARED
;

1432 i‡((
curix
 = 
j
)) {

1433 
vÆ
 = *
tmp
;

1436 
∑rix
 = (
curix
 - 1) >> 1;

1437 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0) {

1438 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1439 
sv_èb
[
∑rix
] = 
vÆ
;

1441 } (
curix
 = 
∑rix
));

1446 
èbÀ
 = 
	`CALLOCATE
(
size
, 
svÆue_t
, 
TAG_TEMPORARY
, "alist_sort:Åable");

1448 
j
 = 0; j < 
size
; j++) {

1449 
èbÀ
[
j
] = 
sv_èb
[0];

1451 
curix
 = 0; ; ) {

1452 
chûd1
 = (
curix
 << 1) + 1;

1453 
chûd2
 = 
chûd1
 + 1;

1455 i‡(
chûd2
 < 
size
 && 
sv_èb
[chûd2].
ty≥
 !
T_INVALID
 &&

1456 (
sv_èb
[
chûd1
].
ty≥
 =
T_INVALID
 ||

1457 
	`Æi°_cmp
(
sv_èb
+
chûd1
, sv_èb+
chûd2
) > 0)) {

1458 
chûd1
 = 
chûd2
;

1460 i‡(
chûd1
 < 
size
 && 
sv_èb
[chûd1].
ty≥
 !
T_INVALID
) {

1461 
sv_èb
[
curix
] = sv_èb[
chûd1
];

1462 
curix
 = 
chûd1
;

1466 
sv_èb
[
curix
].
ty≥
 = 
T_INVALID
;

1469 i‡(
Êag
Ë
	`FREE
((*)
sv_èb
);

1470  
èbÀ
;

1471 
	}
}

1473 
¨øy_t
 *
subåa˘_¨øy
 
	$P2
(
¨øy_t
 *, 
möuíd
,áºay_à*, 
subåahíd
) {

1474 
¨øy_t
 *
dif„ªn˚
;

1475 
svÆue_t
 *
sour˚
, *
de°
, *
svt
;

1476 
i
, 
size
, 
o
, 
d
, 
l
, 
h
, 
msize
;

1478 i‡(!(
size
 = 
subåahíd
->size)) {

1479 
subåahíd
->
ªf
--;

1480  
möuíd
->
ªf
 > 1 ? (möuíd->ªf--, 
	`c›y_¨øy
(minuend)) : minuend;

1482 i‡(!(
msize
 = 
möuíd
->
size
)) {

1483 
	`‰ì_¨øy
(
subåahíd
);

1484  &
the_nuŒ_¨øy
;

1486 
svt
 = 
	`Æi°_s‹t
(
subåahíd
);

1487 
dif„ªn˚
 = 
	`ALLOC_ARRAY
(
msize
);

1488 
sour˚
 = 
möuíd
->
ôem
, 
de°
 = 
dif„ªn˚
->ôem, 
i
 = 
msize
;

1489 
i
--; 
sour˚
++) {

1491 
l
 = 0;

1492 
o
 = (
h
 = 
size
 - 1) >> 1;

1494 i‡((
sour˚
->
ty≥
 =
T_OBJECT
Ë&& (sour˚->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1495 
	`‰ì_obje˘
(
sour˚
->
u
.
ob
, "subtract_array");

1496 *
sour˚
 = 
c⁄°0u
;

1497 } i‡((
sour˚
->
ty≥
 =
T_STRING
Ë&& !(sour˚->
subty≥
 =
STRING_SHARED
)) {

1498 
svÆue_t
 
°mp
 = {
T_STRING
, 
STRING_SHARED
};

1500 i‡(!(
°mp
.
u
.
°rög
 = 
	`föd°rög
(
sour˚
->u.string))) {

1501 
	`assign_svÆue_no_‰ì
(
de°
++, 
sour˚
);

1504 (
d
 = 
	`Æi°_cmp
(&
°mp
, 
svt
 + 
o
))) {

1505 i‡(
d
 < 0Ë
h
 = 
o
 - 1;

1506 
l
 = 
o
 + 1;

1507 i‡(
l
 > 
h
) {

1508 
	`assign_svÆue_no_‰ì
(
de°
++, 
sour˚
);

1511 
o
 = (
l
 + 
h
) >> 1;

1516 (
d
 = 
	`Æi°_cmp
(
sour˚
, 
svt
 + 
o
))) {

1517 i‡(
d
 < 0Ë
h
 = 
o
 - 1;

1518 
l
 = 
o
 + 1;

1519 i‡(
l
 > 
h
) {

1520 
	`assign_svÆue_no_‰ì
(
de°
++, 
sour˚
);

1523 
o
 = (
l
 + 
h
) >> 1;

1527 
i
 = 
size
;

1528 
i
--Ë
	`‰ì_svÆue
(
svt
 + i, "subtract_array");

1529 
	`FREE
((*Ë
svt
);

1530 
	`‰ì_em±y_¨øy
(
subåahíd
);

1531 
	`‰ì_¨øy
(
möuíd
);

1532 
msize
 = 
de°
 - 
dif„ªn˚
->
ôem
;

1533 i‡(!
msize
) {

1534 
	`FREE
((*)
dif„ªn˚
);

1535  &
the_nuŒ_¨øy
;

1537  
	`fix_¨øy
(
dif„ªn˚
, 
msize
);

1538 
	}
}

1540 
¨øy_t
 *
öãr£˘_¨øy
 
	$P2
(
¨øy_t
 *, 
a1
,áºay_à*, 
a2
) {

1541 
¨øy_t
 *
a3
;

1542 
d
, 
l
, 
j
, 
i
, 
a1s
 = 
a1
->
size
, 
a2s
 = 
a2
->size, 
Êag
;

1543 
svÆue_t
 *
svt_1
, *
¡ab
, *
sv_èb
, *
sv_±r
, 
vÆ
, *
tmp
;

1544 
curix
, 
∑rix
, 
chûd1
, 
chûd2
;

1546 i‡(!
a1s
 || !
a2s
) {

1547 
	`‰ì_¨øy
(
a1
);

1548 
	`‰ì_¨øy
(
a2
);

1549  &
the_nuŒ_¨øy
;

1552 
svt_1
 = 
	`Æi°_s‹t
(
a1
);

1553 i‡((
Êag
 = (
a2
->
ªf
 > 1))) {

1554 
sv_èb
 = 
	`CALLOCATE
(
a2s
, 
svÆue_t
, 
TAG_TEMPORARY
, "intersect_array: sv2_tab");

1555 
sv_±r
 = 
a2
->
ôem
;

1556 
j
 = 0; j < 
a2s
; j++) {

1557 i‡(((
tmp
 = (
sv_±r
 + 
j
))->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1558 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "intersect_array");

1559 
sv_èb
[
j
] = *
tmp
 = 
c⁄°0u
;

1560 } i‡((
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
)) {

1561 
sv_èb
[
j
].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
tmp
->u.string);

1562 (
tmp
 = 
sv_èb
 + 
j
)->
subty≥
 = 
STRING_SHARED
;

1563 
tmp
->
ty≥
 = 
T_STRING
;

1564 } 
	`assign_svÆue_no_‰ì
(
sv_èb
 + 
j
, 
tmp
);

1566 i‡((
curix
 = 
j
)) {

1567 
vÆ
 = *
tmp
;

1570 
∑rix
 = (
curix
 - 1) >> 1;

1571 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0) {

1572 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1573 
sv_èb
[
∑rix
] = 
vÆ
;

1575 } (
curix
 = 
∑rix
));

1579 *
°r
;

1581 
sv_èb
 = 
a2
->
ôem
;

1582 
j
 = 0; j < 
a2s
; j++) {

1583 i‡(((
tmp
 = (
sv_èb
 + 
j
))->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1584 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "alist_sort");

1585 *
tmp
 = 
c⁄°0u
;

1586 } i‡((
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
)) {

1587 
°r
 = 
	`make_sh¨ed_°rög
(
tmp
->
u
.
°rög
);

1588 
	`‰ì_°rög_svÆue
(
tmp
);

1589 
tmp
->
u
.
°rög
 = 
°r
;

1590 
tmp
->
subty≥
 = 
STRING_SHARED
;

1593 i‡((
curix
 = 
j
)) {

1594 
vÆ
 = *
tmp
;

1597 
∑rix
 = (
curix
 - 1) >> 1;

1598 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0) {

1599 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1600 
sv_èb
[
∑rix
] = 
vÆ
;

1602 } (
curix
 = 
∑rix
));

1607 
a3
 = 
	`ALLOC_ARRAY
(
a2s
);

1608 
¡ab
 = 
a3
->
ôem
;

1610 
l
 = 
i
 = 0;

1612 
j
 = 0; j < 
a2s
; j++) {

1613 
vÆ
 = 
sv_èb
[0];

1615 (
d
 = 
	`Æi°_cmp
(&
vÆ
, &
svt_1
[
i
])) > 0) {

1616 i‡(++
i
 >
a1s
Ë
£âÀ_busöess
;

1619 i‡(!
d
) {

1620 
¡ab
[
l
++] = 
vÆ
;

1622 
	`‰ì_svÆue
(&
vÆ
, "intersect_array");

1625 
curix
 = 0;; ) {

1626 
chûd1
 = (
curix
 << 1) + 1;

1627 
chûd2
 = 
chûd1
 + 1;

1629 i‡(
chûd2
 < 
a2s
 && 
sv_èb
[chûd2].
ty≥
 !
T_INVALID
 &&

1630 (
sv_èb
[
chûd1
].
ty≥
 =
T_INVALID
 ||

1631 
	`Æi°_cmp
(
sv_èb
 + 
chûd1
, sv_èb + 
chûd2
) > 0)) {

1632 
chûd1
 = 
chûd2
;

1635 i‡(
chûd1
 < 
a2s
 && 
sv_èb
[chûd1].
ty≥
 !
T_INVALID
) {

1636 
sv_èb
[
curix
] = sv_èb[
chûd1
];

1637 
curix
 = 
chûd1
;

1641 
sv_èb
[
curix
].
ty≥
 = 
T_INVALID
;

1644 
£âÀ_busöess
:

1646 
curix
 = 
a2s
;

1647 
curix
--) {

1648 i‡(
sv_èb
[
curix
].
ty≥
 !
T_INVALID
Ë
	`‰ì_svÆue
(sv_tab + curix, "intersect_array:2");

1651 
i
 = 
a1s
;

1652 
i
--Ë
	`‰ì_svÆue
(
svt_1
 + i, "intersect_array");

1653 
	`FREE
((*)
svt_1
);

1655 
	`‰ì_em±y_¨øy
(
a1
);

1657 i‡(
Êag
) {

1658 
a2
->
ªf
--;

1659 
	`FREE
((*Ë
sv_èb
);

1661 
	`dóŒoc_em±y_¨øy
(
a2
);

1663  
	`fix_¨øy
(
a3
, 
l
);

1664 
	}
}

1666 
¨øy_t
 *
uni⁄_¨øy
 
	$P2
(
¨øy_t
 *, 
a1
,áºay_à*, 
a2
) {

1667 
a1s
 = 
a1
->
size
, 
a2s
 = 
a2
->size;

1668 
d
, 
l
, 
j
, 
i
, 
˙t
, 
Êag
;

1669 
¨øy_t
 *
a3
;

1670 
svÆue_t
 *
svt_1
, *
¡ab
, *
sv_èb
, *
tmp
, *
sv_±r
, 
vÆ
;

1671 
curix
, 
∑rix
, 
chûd1
, 
chûd2
;

1673 i‡(
a1s
 == 0) {

1674 
a1
->
ªf
--;

1675  
a2
->
ªf
 > 1 ? (a2->ªf--, 
	`c›y_¨øy
(a2)) :á2;

1678 i‡(
a2s
 =0 || 
a1
 =
a2
) {

1679 
a2
->
ªf
--;

1680  
a1
->
ªf
 > 1 ? (a1->ªf--, 
	`c›y_¨øy
(a1)) :á1;

1683 
d
 = 
a1s
 + 
a2s
;

1684 i‡(
d
 < 0 || d > 
max_¨øy_size
)

1685 
	`îr‹
("result ofárray union could be greaterÅhan maximumárray size.\n");

1686 
a3
 = 
	`öt_Æloˇã_em±y_¨øy
(
d
);

1687 
tmp
 = 
a1
->
ôem
;

1688 
¡ab
 = 
a3
->
ôem
;

1689 
l
 = 
˙t
 = 
a1s
;

1690 
˙t
--)

1691 
	`assign_svÆue_no_‰ì
(
¡ab
 + 
˙t
, 
tmp
 + cnt);

1693 
svt_1
 = 
	`Æi°_s‹t
(
a1
);

1694 i‡((
Êag
 = (
a2
->
ªf
 > 1))) {

1695 
sv_èb
 = 
	`CALLOCATE
(
a2s
, 
svÆue_t
, 
TAG_TEMPORARY
, "union_array: sv2_tab");

1696 
sv_±r
 = 
a2
->
ôem
;

1697 
j
 = 0; j < 
a2s
; j++) {

1698 i‡(((
tmp
 = (
sv_±r
 + 
j
))->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1699 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "union_array");

1700 
sv_èb
[
j
] = *
tmp
 = 
c⁄°0u
;

1702 i‡((
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
)) {

1703 
sv_èb
[
j
].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
tmp
->u.string);

1704 (
tmp
 = 
sv_èb
 + 
j
)->
subty≥
 = 
STRING_SHARED
;

1705 
tmp
->
ty≥
 = 
T_STRING
;

1707 
	`assign_svÆue_no_‰ì
(
sv_èb
 + 
j
, 
tmp
);

1709 i‡((
curix
 = 
j
)) {

1710 
vÆ
 = *
tmp
;

1713 
∑rix
 = (
curix
 - 1) >> 1;

1714 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0) {

1715 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1716 
sv_èb
[
∑rix
] = 
vÆ
;

1718 } (
curix
 = 
∑rix
));

1722 *
°r
;

1724 
sv_èb
 = 
a2
->
ôem
;

1725 
j
 = 0; j < 
a2s
; j++) {

1726 i‡(((
tmp
 = (
sv_èb
 + 
j
))->
ty≥
 =
T_OBJECT
Ë&& (tmp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1727 
	`‰ì_obje˘
(
tmp
->
u
.
ob
, "union_array");

1728 *
tmp
 = 
c⁄°0u
;

1730 i‡((
tmp
->
ty≥
 =
T_STRING
Ë&& !—mp->
subty≥
 =
STRING_SHARED
)) {

1731 
°r
 = 
	`make_sh¨ed_°rög
(
tmp
->
u
.
°rög
);

1732 
	`‰ì_°rög_svÆue
(
tmp
);

1733 
tmp
->
u
.
°rög
 = 
°r
;

1734 
tmp
->
subty≥
 = 
STRING_SHARED
;

1737 i‡((
curix
 = 
j
)) {

1738 
vÆ
 = *
tmp
;

1741 
∑rix
 = (
curix
 - 1) >> 1;

1742 i‡(
	`Æi°_cmp
(
sv_èb
 + 
∑rix
, sv_èb + 
curix
) > 0) {

1743 
sv_èb
[
curix
] = sv_èb[
∑rix
];

1744 
sv_èb
[
∑rix
] = 
vÆ
;

1746 } (
curix
 = 
∑rix
));

1751 
i
 = 0;

1753 
j
 = 0; j < 
a2s
; j++) {

1754 
vÆ
 = 
sv_èb
[0];

1756 
i
 < 
a1s
 && (
d
 = 
	`Æi°_cmp
(&
vÆ
, &
svt_1
[i])) > 0) {

1757 
i
++;

1760 i‡(
d
) {

1761 
¡ab
[
l
++] = 
vÆ
;

1763 
	`‰ì_svÆue
(&
vÆ
, "union_array");

1766 
curix
 = 0;; ) {

1767 
chûd1
 = (
curix
 << 1) + 1;

1768 
chûd2
 = 
chûd1
 + 1;

1770 i‡(
chûd2
 < 
a2s
 && 
sv_èb
[chûd2].
ty≥
 !
T_INVALID
 &&

1771 (
sv_èb
[
chûd1
].
ty≥
 =
T_INVALID
 ||

1772 
	`Æi°_cmp
(
sv_èb
 + 
chûd1
, sv_èb + 
chûd2
) > 0)) {

1773 
chûd1
 = 
chûd2
;

1776 i‡(
chûd1
 < 
a2s
 && 
sv_èb
[chûd1].
ty≥
 !
T_INVALID
) {

1777 
sv_èb
[
curix
] = sv_èb[
chûd1
];

1778 
curix
 = 
chûd1
;

1783 
sv_èb
[
curix
].
ty≥
 = 
T_INVALID
;

1786 
curix
 = 
a2s
;

1787 
curix
--) {

1788 i‡(
sv_èb
[
curix
].
ty≥
 !
T_INVALID
)

1789 
	`‰ì_svÆue
(
sv_èb
 + 
curix
, "union_array:2");

1792 
i
 = 
a1s
;

1793 
i
--Ë
	`‰ì_svÆue
(
svt_1
 + i, "union_array");

1794 
	`FREE
((*)
svt_1
);

1796 
	`‰ì_em±y_¨øy
(
a1
);

1798 i‡(
Êag
) {

1799 
a2
->
ªf
--;

1800 
	`FREE
((*)
sv_èb
);

1802 
	`dóŒoc_em±y_¨øy
(
a2
);

1804 
a3
 = 
	`ªsize_¨øy
◊3, 
l
);

1805 
a3
->
ªf
 = 1;

1807  
a3
;

1808 
	}
}

1810 
m©ch_sögÀ_ªgexp
 
	$P2
(*, 
°r
, *, 
∑âîn
) {

1811 
ªgexp
 *
ªg
;

1812 
ªt
;

1814 
ªgexp_u£r
 = 
EFUN_REGEXP
;

1815 
ªg
 = 
	`ªgcomp
((*)
∑âîn
, 0);

1816 i‡(!
ªg
Ë
	`îr‹
(
ªgexp_îr‹
);

1817 
ªt
 = 
	`ªgexec
(
ªg
, 
°r
);

1818 
	`FREE
(
ªg
);

1819  
ªt
;

1820 
	}
}

1822 
¨øy_t
 *
m©ch_ªgexp
 
	$P3
(
¨øy_t
 *, 
v
, *, 
∑âîn
, , 
Êag
) {

1823 
ªgexp
 *
ªg
;

1824 *
ªs
;

1825 
num_m©ch
, 
size
, 
m©ch
 = !(
Êag
 & 2);

1826 
¨øy_t
 *
ªt
;

1827 
svÆue_t
 *
sv1
, *
sv2
;

1829 
ªgexp_u£r
 = 
EFUN_REGEXP
;

1830 i‡(!(
size
 = 
v
->size)Ë &
the_nuŒ_¨øy
;

1831 
ªg
 = 
	`ªgcomp
((*)
∑âîn
, 0);

1832 i‡(!
ªg
Ë
	`îr‹
(
ªgexp_îr‹
);

1833 
ªs
 = (*)
	`DMALLOC
(
size
, 
TAG_TEMPORARY
, "match_regexp:Ñes");

1834 
sv1
 = 
v
->
ôem
 + 
size
;

1835 
num_m©ch
 = 0;

1836 
size
--) {

1837 i‡(!((--
sv1
)->
ty≥
 =
T_STRING
Ë|| (
	`ªgexec
(
ªg
, sv1->
u
.
°rög
Ë!
m©ch
)) {

1838 
ªs
[
size
] = 0;

1840 
ªs
[
size
] = 1;

1841 
num_m©ch
++;

1845 
Êag
 &= 1;

1846 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
num_m©ch
 << 
Êag
);

1847 
sv2
 = 
ªt
->
ôem
 + (
num_m©ch
 << 
Êag
);

1848 
size
 = 
v
->size;

1849 
size
--) {

1850 i‡(
ªs
[
size
]) {

1851 i‡(
Êag
) {

1852 (--
sv2
)->
ty≥
 = 
T_NUMBER
;

1853 
sv2
->
u
.
numbî
 = 
size
 + 1;

1855 (--
sv2
)->
ty≥
 = 
T_STRING
;

1856 
sv1
 = 
v
->
ôem
 + 
size
;

1857 *
sv2
 = *
sv1
;

1858 i‡(
sv1
->
subty≥
 & 
STRING_COUNTED
) {

1859 
	`INC_COUNTED_REF
(
sv1
->
u
.
°rög
);

1860 
	`ADD_STRING
(
	`MSTR_SIZE
(
sv1
->
u
.
°rög
));

1862 i‡(!--
num_m©ch
) ;

1865 
	`FREE
(
ªs
);

1866 
	`FREE
((*Ë
ªg
);

1867  
ªt
;

1868 
	}
}

1876 
¨øy_t
 *
dìp_öhîô_li°
 
	$P1
(
obje˘_t
 *, 
ob
)

1878 
¨øy_t
 *
ªt
;

1879 
¥ogøm_t
 *
¥
, *
∂i°
[256];

1880 
û
, 
û2
, 
√xt
, 
cur
;

1882 
∂i°
[0] = 
ob
->
¥og
;

1883 
√xt
 = 1;

1884 
cur
 = 0;

1886 ; 
cur
 < 
√xt
 &&Çext < 256; cur++) {

1887 
¥
 = 
∂i°
[
cur
];

1888 
û2
 = 0; il2 < (Ë
¥
->
num_öhîôed
; il2++)

1889 
∂i°
[
√xt
++] = 
¥
->
öhîô
[
û2
].
¥og
;

1892 
√xt
--;

1893 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
√xt
);

1895 
û
 = 0; i»< 
√xt
; il++) {

1896 
¥
 = 
∂i°
[
û
 + 1];

1897 
ªt
->
ôem
[
û
].
ty≥
 = 
T_STRING
;

1898 
ªt
->
ôem
[
û
].
subty≥
 = 
STRING_MALLOC
;

1899 
ªt
->
ôem
[
û
].
u
.
°rög
 = 
	`add_¶ash
(
¥
->
«me
);

1901  
ªt
;

1902 
	}
}

1908 
¨øy_t
 *
öhîô_li°
 
	$P1
(
obje˘_t
 *, 
ob
)

1910 
¨øy_t
 *
ªt
;

1911 
¥ogøm_t
 *
¥
, *
∂i°
[256];

1912 
û
, 
û2
, 
√xt
, 
cur
;

1914 
∂i°
[0] = 
ob
->
¥og
;

1915 
√xt
 = 1;

1916 
cur
 = 0;

1918 
¥
 = 
∂i°
[
cur
];

1919 
û2
 = 0; il2 < (Ë
¥
->
num_öhîôed
; il2++) {

1920 
∂i°
[
√xt
++] = 
¥
->
öhîô
[
û2
].
¥og
;

1923 
√xt
--;

1924 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
√xt
);

1926 
û
 = 0; i»< 
√xt
; il++) {

1927 
¥
 = 
∂i°
[
û
 + 1];

1928 
ªt
->
ôem
[
û
].
ty≥
 = 
T_STRING
;

1929 
ªt
->
ôem
[
û
].
subty≥
 = 
STRING_MALLOC
;

1930 
ªt
->
ôem
[
û
].
u
.
°rög
 = 
	`add_¶ash
(
¥
->
«me
);

1932  
ªt
;

1933 
	}
}

1935 
	schûdªn_fûãr_s
 {

1936 
	mÀn
;

1937 
	mbuf
[
MAX_OBJECT_NAME_SIZE
];

1938 } 
	tchûdªn_fûãr_t
;

1940 
chûdªn_fûãr
 
	$P2
(
obje˘_t
 *, 
ob
, 
chûdªn_fûãr_t
 *, 
cf
)

1942 
ﬁ
 = 
	`°æí
(
ob
->
«me
);

1943  ((
ﬁ
 =
cf
->
Àn
 || (ﬁ > cf->À¿&& 
ob
->
«me
[cf->Àn] ='#')Ë&& !
	`°∫cmp
(ob->«me, cf->
buf
, cf->len));

1944 
	}
}

1946 
¨øy_t
 *

1947 
chûdªn
 
	$P1
(*, 
°r
)

1949 
cou¡
;

1950 
chûdªn_fûãr_t
 
cf
;

1951 
obje˘_t
 **
li°
;

1952 
¨øy_t
 *
ªt
;

1954 i‡(!
	`°rù_«me
(
°r
, 
cf
.
buf
, (cf.buf)))

1955  &
the_nuŒ_¨øy
;

1956 
cf
.
Àn
 = 
	`°æí
(cf.
buf
);

1958 
	`gë_obje˘s
(&
li°
, &
cou¡
, (
gë_obje˘s‚_t
)
chûdªn_fûãr
, (*)&
cf
);

1960 i‡(
cou¡
 > 
max_¨øy_size
)

1961 
cou¡
 = 
max_¨øy_size
;

1962 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
cou¡
);

1963 
cou¡
--) {

1964 
ªt
->
ôem
[
cou¡
].
ty≥
 = 
T_OBJECT
;

1965 
ªt
->
ôem
[
cou¡
].
u
.
ob
 = 
li°
[count];

1966 
	`add_ªf
(
li°
[
cou¡
], "children");

1969 
	`p›_°ack
();

1970  
ªt
;

1971 
	}
}

1973 #ifde‡
F_LIVINGS


1974 
livögs_fûãr
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
d©a
)

1976  (
ob
->
Êags
 & 
O_ENABLE_COMMANDS
);

1977 
	}
}

1979 
¨øy_t
 *
	$livögs
()

1981 
cou¡
;

1982 
obje˘_t
 **
li°
;

1983 
¨øy_t
 *
ªt
;

1985 
	`gë_obje˘s
(&
li°
, &
cou¡
, 
livögs_fûãr
, 0);

1987 i‡(
cou¡
 > 
max_¨øy_size
)

1988 
cou¡
 = 
max_¨øy_size
;

1989 
ªt
 = 
	`Æloˇã_em±y_¨øy
(
cou¡
);

1990 
cou¡
--) {

1991 
ªt
->
ôem
[
cou¡
].
ty≥
 = 
T_OBJECT
;

1992 
ªt
->
ôem
[
cou¡
].
u
.
ob
 = 
li°
[count];

1993 
	`add_ªf
(
li°
[
cou¡
], "livings");

1996 
	`p›_°ack
();

1997  
ªt
;

1998 
	}
}

2001 #ifde‡
F_OBJECTS


2002 
f_obje˘s
 
PROT
(())

2004 
	gcou¡
, 
	gi
;

2005 *
	gfunc
;

2006 
obje˘_t
 **
	gli°
;

2007 
¨øy_t
 *
	gªt
;

2008 
fu≈å_t
 *
	gf
 = 0;

2010 
	gnum_¨g
 = 
°_num_¨g
;

2012 i‡(!
	gnum_¨g
Ë
	gfunc
 = 0;

2013 i‡(
	g•
->
	gty≥
 =
T_FUNCTION
Ë
f
 = 
•
->
u
.
Â
;

2014 
	gfunc
 = 
•
->
u
.
°rög
;

2016 
gë_obje˘s
(&
li°
, &
cou¡
, 0, 0);

2017 i‡(
	gf
 || 
	gfunc
) {

2023 
	gi
 = 0; i < 
	gcou¡
; i++) {

2024 
svÆue_t
 *
	gv
;

2026 
push_obje˘
(
li°
[
i
]);

2027 i‡(
	gf
Ë
	gv
 = 
ˇŒ_fun˘i⁄_poöãr
(
f
, 1);

2028 
	gv
 = 
≠∂y
(
func
, 
cuºít_obje˘
, 1, 
ORIGIN_EFUN
);

2029 i‡(!
	gv
 || (
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
)) {

2030 
p›_n_ñems
(
num_¨g
 + 1);

2031 
push_ª„d_¨øy
(&
the_nuŒ_¨øy
);

2034 i‡(
	gv
->
	gty≥
 =
T_NUMBER
 && !
v
->
u
.
numbî
)

2035 
li°
[
i
] = 0;

2038 
	gi
 = 0; i < 
	gcou¡
; i++) {

2039 i‡(!
	gli°
[
i
] || (li°[i]->
	gÊags
 & 
	gO_DESTRUCTED
))

2040 
	gli°
[
i
--] = 
li°
[--
cou¡
];

2044 i‡(
	gcou¡
 > 
	gmax_¨øy_size
)

2045 
	gcou¡
 = 
max_¨øy_size
;

2046 
	gªt
 = 
Æloˇã_em±y_¨øy
(
cou¡
);

2047 
	gi
 = 0; i < 
	gcou¡
; i++) {

2048 
	gªt
->
	gôem
[
i
].
	gty≥
 = 
T_OBJECT
;

2049 
	gªt
->
	gôem
[
i
].
	gu
.
	gob
 = 
li°
[i];

2050 
add_ªf
(
li°
[
i
], "f_objects");

2053 
p›_n_ñems
(
num_¨g
 + 1);

2054 
push_ª„d_¨øy
(
ªt
);

2058 #ifde‡
F_REG_ASSOC


2070 
¨øy_t
 *
ªg_assoc
 
	$P4
(*, 
°r
, 
¨øy_t
 *, 
∑t
,áºay_à*, 
tok
, 
svÆue_t
 *, 
def
) {

2071 
i
, 
size
;

2072 *
tmp
;

2073 
¨øy_t
 *
ªt
;

2075 
ªgexp_u£r
 = 
EFUN_REGEXP
;

2076 i‡((
size
 = 
∑t
->sizeË!
tok
->size)

2077 
	`îr‹
("PatternándÅokenárray sizes must be identical.\n");

2079 
i
 = 0; i < 
size
; i++) {

2080 i‡(!(
∑t
->
ôem
[
i
].
ty≥
 =
T_STRING
))

2081 
	`îr‹
("Non-string found inÖatternárray.\n");

2084 
ªt
 = 
	`öt_Æloˇã_em±y_¨øy
(2);

2086 i‡(
size
) {

2087 
ªgexp
 **
rgµ
;

2088 
	sªg_m©ch
 {

2089 
tok_i
;

2090 *
begö
, *
íd
;

2091 
ªg_m©ch
 *
√xt
;

2092 } *
rmp
 = (
ªg_m©ch
 *Ë0, *
rmph
 = (reg_match *) 0;

2093 
num_m©ch
 = 0, 
Àngth
;

2094 
svÆue_t
 *
sv1
, *
sv2
, *
sv
;

2095 
ödex
;

2096 
ªgexp
 *
tm¥eg
;

2097 *
œ°°¨t
, *
cuº°¨t
;

2099 
rgµ
 = 
	`CALLOCATE
(
size
, 
ªgexp
 *, 
TAG_TEMPORARY
, "reg_assoc :Ñgpp");

2100 
i
 = 0; i < 
size
; i++) {

2101 i‡(!(
rgµ
[
i
] = 
	`ªgcomp
((*)
∑t
->
ôem
[i].
u
.
°rög
, 0))) {

2102 
i
--)

2103 
	`FREE
((*)
rgµ
[
i
]);

2104 
	`FREE
((*Ë
rgµ
);

2105 
	`‰ì_em±y_¨øy
(
ªt
);

2106 
	`îr‹
(
ªgexp_îr‹
);

2110 
tmp
 = 
°r
;

2111 *
tmp
) {

2117 
œ°°¨t
 = 0;

2118 
ödex
 = -1;

2120 
i
 = 0; i < 
size
; i++) {

2121 i‡(
	`ªgexec
(
tm¥eg
 = 
rgµ
[
i
], 
tmp
)) {

2122 
cuº°¨t
 = 
tm¥eg
->
°¨ç
[0];

2123 i‡(
tmp
 =
cuº°¨t
) {

2124 
ödex
 = 
i
;

2127 i‡(!
œ°°¨t
 || 
cuº°¨t
 <Üaststart) {

2128 
œ°°¨t
 = 
cuº°¨t
;

2129 
ödex
 = 
i
;

2134 i‡(
ödex
 >= 0) {

2135 
num_m©ch
++;

2136 i‡(
rmp
) {

2137 
rmp
->
√xt
 = 
	`ALLOCATE
(
ªg_m©ch
,

2138 
TAG_TEMPORARY
, "reg_assoc :Ñmp->next");

2139 
rmp
 =Ñmp->
√xt
;

2141 
rmph
 = 
rmp
 =

2142 
	`ALLOCATE
(
ªg_m©ch
, 
TAG_TEMPORARY
, "reg_assoc :Ñmp");

2143 
tm¥eg
 = 
rgµ
[
ödex
];

2144 
rmp
->
begö
 = 
tm¥eg
->
°¨ç
[0];

2145 
rmp
->
íd
 = 
tmp
 = 
tm¥eg
->
ídp
[0];

2146 
rmp
->
tok_i
 = 
ödex
;

2147 
rmp
->
√xt
 = (
ªg_m©ch
 *) 0;

2153 i‡(
rmp
->
begö
 =
tmp
 && (!*++tmp)) ;

2156 
sv
 = 
ªt
->
ôem
;

2157 
sv
->
ty≥
 = 
T_ARRAY
;

2158 
sv1
 = (
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(2*
num_m©ch
 + 1))->
ôem
;

2160 
sv
++;

2161 
sv
->
ty≥
 = 
T_ARRAY
;

2162 
sv2
 = (
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(2*
num_m©ch
 + 1))->
ôem
;

2164 
rmp
 = 
rmph
;

2166 
tmp
 = 
°r
;

2168 
num_m©ch
--) {

2169 *
svtmp
;

2171 
Àngth
 = 
rmp
->
begö
 - 
tmp
;

2172 
sv1
->
ty≥
 = 
T_STRING
;

2173 
sv1
->
subty≥
 = 
STRING_MALLOC
;

2174 
svtmp
 = 
sv1
->
u
.
°rög
 = 
	`√w_°rög
(
Àngth
, "reg_assoc : sv1");

2175 
	`°∫˝y
(
svtmp
, 
tmp
, 
Àngth
);

2176 
svtmp
[
Àngth
] = 0;

2177 
sv1
++;

2178 
	`assign_svÆue_no_‰ì
(
sv2
++, 
def
);

2179 
tmp
 +
Àngth
;

2180 
Àngth
 = 
rmp
->
íd
 -Ñmp->
begö
;

2181 
sv1
->
ty≥
 = 
T_STRING
;

2182 
sv1
->
subty≥
 = 
STRING_MALLOC
;

2183 
svtmp
 = 
sv1
->
u
.
°rög
 = 
	`√w_°rög
(
Àngth
, "reg_assoc : sv1");

2184 
	`°∫˝y
(
svtmp
, 
tmp
, 
Àngth
);

2185 
svtmp
[
Àngth
] = 0;

2186 
sv1
++;

2187 
	`assign_svÆue_no_‰ì
(
sv2
++, &
tok
->
ôem
[
rmp
->
tok_i
]);

2188 
tmp
 +
Àngth
;

2189 
rmp
 =Ñmp->
√xt
;

2191 
sv1
->
ty≥
 = 
T_STRING
;

2192 
sv1
->
subty≥
 = 
STRING_MALLOC
;

2193 
sv1
->
u
.
°rög
 = 
	`°rög_c›y
(
tmp
, "reg_assoc");

2194 
	`assign_svÆue_no_‰ì
(
sv2
, 
def
);

2195 
i
=0; i<
size
; i++)

2196 
	`FREE
((*)
rgµ
[
i
]);

2197 
	`FREE
((*Ë
rgµ
);

2199 (
rmp
 = 
rmph
)) {

2200 
rmph
 = 
rmp
->
√xt
;

2201 
	`FREE
((*Ë
rmp
);

2203  
ªt
;

2206 
svÆue_t
 *
ãmp
;

2207 
svÆue_t
 *
sv
;

2209 (
sv
 = 
ªt
->
ôem
)->
ty≥
 = 
T_ARRAY
;

2210 
ãmp
 = (
sv
->
u
.
¨r
 = 
	`öt_Æloˇã_em±y_¨øy
(1))->
ôem
;

2211 
ãmp
->
subty≥
 = 
STRING_MALLOC
;

2212 
ãmp
->
ty≥
 = 
T_STRING
;

2213 
ãmp
->
u
.
°rög
 = 
	`°rög_c›y
(
°r
, "reg_assoc");

2214 
sv
 = &
ªt
->
ôem
[1];

2215 
sv
->
ty≥
 = 
T_ARRAY
;

2216 
	`assign_svÆue_no_‰ì
((
sv
->
u
.
¨r
 = 
	`Æloˇã_em±y_¨øy
(1))->
ôem
, 
def
);

2217  
ªt
;

2219 
	}
}

	@array.h

1 #i‚de‡
ARRAY_H


2 
	#ARRAY_H


	)

7 
	s¨øy_s
 {

8 
	mªf
;

9 #ifde‡
DEBUG


10 
	mexåa_ªf
;

12 
	msize
;

13 #ifde‡
PACKAGE_MUDLIB_STATS


14 
°©group_t
 
	m°©s
;

16 
svÆue_t
 
	môem
[1];

17 } 
	t¨øy_t
;

19 
¨øy_t
 
the_nuŒ_¨øy
;

24 #ifde‡
ARRAY_STATS


25 
num_¨øys
;

26 
tŸÆ_¨øy_size
;

29 
ßmevÆ
 
PROT
((
svÆue_t
 *, svalue_t *));

30 
¨øy_t
 *
Æloˇã_¨øy2
 
PROT
((, 
svÆue_t
 *));

31 
¨øy_t
 *
Æloˇã_¨øy
 
PROT
(());

32 
¨øy_t
 *
Æloˇã_em±y_¨øy
 
PROT
(());

33 
‰ì_¨øy
 
PROT
((
¨øy_t
 *));

34 
‰ì_em±y_¨øy
 
PROT
((
¨øy_t
 *));

35 
¨øy_t
 *
add_¨øy
 
PROT
((array_t *,árray_t *));

36 
im∂ode_¨øy
 
PROT
((
fu≈å_t
 *, 
¨øy_t
 *, 
svÆue_t
 *, ));

37 
¨øy_t
 *
subåa˘_¨øy
 
PROT
((array_t *,árray_t *));

38 
¨øy_t
 *
¶i˚_¨øy
 
PROT
((array_t *, , ));

39 
¨øy_t
 *
ex∂ode_°rög
 
PROT
((*, , *, ));

40 *
im∂ode_°rög
 
PROT
((
¨øy_t
 *, *, ));

41 
¨øy_t
 *
u£rs
 
PROT
(());

42 
¨øy_t
 *
comm™ds
 
PROT
((
obje˘_t
 *));

43 
fûãr_¨øy
 
PROT
((
svÆue_t
 *, ));

44 
fûãr_°rög
 
PROT
((
svÆue_t
 *, ));

45 
¨øy_t
 *
dìp_öhîô_li°
 
PROT
((
obje˘_t
 *));

46 
¨øy_t
 *
öhîô_li°
 
PROT
((
obje˘_t
 *));

47 
¨øy_t
 *
chûdªn
 
PROT
((*));

48 
¨øy_t
 *
livögs
 
PROT
(());

49 
¨øy_t
 *
obje˘s
 
PROT
((
fu≈å_t
 *));

50 
¨øy_t
 *
Æl_övít‹y
 
PROT
((
obje˘_t
 *, ));

51 
¨øy_t
 *
dìp_övít‹y
 
PROT
((
obje˘_t
 *, ));

52 
¨øy_t
 *
fûãr
 
PROT
(◊ºay_à*, 
fu≈å_t
 *, 
svÆue_t
 *));

53 
¨øy_t
 *
buûtö_s‹t_¨øy
 
PROT
((array_t *, ));

54 
¨øy_t
 *
Â_s‹t_¨øy
 
PROT
(◊ºay_à*, 
fu≈å_t
 *));

55 
¨øy_t
 *
s‹t_¨øy
 
PROT
(◊ºay_à*, *, 
obje˘_t
 *));

56 
¨øy_t
 *
make_unique
 
PROT
(◊ºay_à*, *, 
fu≈å_t
 *, 
svÆue_t
 *));

57 
m≠_°rög
 
PROT
((
svÆue_t
 *
¨g
, 
num_¨g
));

58 
m≠_¨øy
 
PROT
((
svÆue_t
 *
¨g
, 
num_¨g
));

59 
¨øy_t
 *
öãr£˘_¨øy
 
PROT
((array_t *,árray_t *));

60 
m©ch_sögÀ_ªgexp
 
PROT
((*, *));

61 
¨øy_t
 *
m©ch_ªgexp
 
PROT
((array_t *, *, ));

62 
¨øy_t
 *
ªg_assoc
 
PROT
((*,áºay_à*,áºay_à*, 
svÆue_t
 *));

63 
dóŒoc_¨øy
 
PROT
((
¨øy_t
 *));

64 
¨øy_t
 *
uni⁄_¨øy
 
PROT
((array_t *,árray_t *));

66 
	#ALLOC_ARRAY
(
√Àm
) \

67 (
¨øy_t
 *)
	`DXALLOC
( (array_t) + \

68 (
svÆue_t
Ë* (
√Àm
 - 1), 
TAG_ARRAY
, "ALLOC_ARRAY")

	)

69 
	#RESIZE_ARRAY
(
vec
, 
√Àm
) \

70 (
¨øy_t
 *)
	`DREALLOC
(
vec
,  (array_t) + \

71 (
svÆue_t
Ë* (
√Àm
 - 1), 
TAG_ARRAY
, "RESIZE_ARRAY")

	)

	@avltree.c

38 
	~"°d.h
"

39 
	~"av…ªe.h
"

44 
•rout
 
PROT
((
åì
 **, *, *, (*) (), (*) ()));

45 
dñëe
 
PROT
((
åì
 **, (*) (), *, (*) (), *, *));

46 
dñ
 
PROT
((
åì
 **, *,Åree **, (*) (), *));

47 
bÆ™˚L
 
PROT
((
åì
 **, *));

48 
bÆ™˚R
 
PROT
((
åì
 **, *));

51 
åì_öô
 
	$P1
(
åì
 **, 
µr_åì
)

53 *
µr_åì
 = 
NULL
;

55 
	}
}

58 *
	$åì_§ch
(
µr_åì
, 
pfi_com∑ª
, 
pc_u£r
)

59 
åì
 *
µr_åì
;

60 (*
pfi_com∑ª
Ë
	`PROT
((*, *));

61 *
pc_u£r
;

63 
i_comp
;

65 
µr_åì
) {

66 
i_comp
 = (*
pfi_com∑ª
Ë(
pc_u£r
, 
µr_åì
->
åì_p
);

67 i‡(
i_comp
 > 0) {

68 
µr_åì
 =Ö¥_åì->
åì_r
;

71 i‡(
i_comp
 < 0) {

72 
µr_åì
 =Ö¥_åì->
åì_l
;

78  
µr_åì
->
åì_p
;

84  
NULL
;

85 
	}
}

88 
	$åì_add
(
µr_åì
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_dñëe
)

89 
åì
 **
µr_åì
;

90 (*
pfi_com∑ª
) ();

91 *
pc_u£r
;

92 (*
pfi_dñëe
) ();

94 
i_bÆ™˚
 = 0;

96 
	`•rout
(
µr_åì
, 
pc_u£r
, &
i_bÆ™˚
, 
pfi_com∑ª
, 
pfi_dñëe
);

98 
	}
}

101 
	$•rout
(
µr
, 
pc_d©a
, 
pi_bÆ™˚
, 
pfi_com∑ª
, 
pfi_dñëe
)

102 
åì
 **
µr
;

103 *
pc_d©a
;

104 *
pi_bÆ™˚
;

105 (*
pfi_com∑ª
Ë
	`PROT
((*, *));

106 (*
pfi_dñëe
Ë
	`PROT
((*));

108 
åì
 *
p1
, *
p2
;

109 
cmp
;

115 i‡(!*
µr
) {

116 *
µr
 = 
	`ALLOCATE
(
åì
, 
TAG_UID
, "sprout");

117 (*
µr
)->
åì_l
 = 
NULL
;

118 (*
µr
)->
åì_r
 = 
NULL
;

119 (*
µr
)->
åì_b
 = 0;

120 (*
µr
)->
åì_p
 = 
pc_d©a
;

121 *
pi_bÆ™˚
 = 1;

127 
cmp
 = (*
pfi_com∑ª
Ë(
pc_d©a
, (*
µr
)->
åì_p
);

132 i‡(
cmp
 < 0) {

133 
	`•rout
(&(*
µr
)->
åì_l
, 
pc_d©a
, 
pi_bÆ™˚
,

134 
pfi_com∑ª
, 
pfi_dñëe
);

135 i‡(*
pi_bÆ™˚
) {

136 (*
µr
)->
åì_b
) {

138 (*
µr
)->
åì_b
 = 0;

139 *
pi_bÆ™˚
 = 0;

142 (*
µr
)->
åì_b
 = -1;

146 
p1
 = (*
µr
)->
åì_l
;

147 i‡(
p1
->
åì_b
 == -1) {

148 (*
µr
)->
åì_l
 = 
p1
->
åì_r
;

149 
p1
->
åì_r
 = *
µr
;

150 (*
µr
)->
åì_b
 = 0;

151 *
µr
 = 
p1
;

153 
p2
 = 
p1
->
åì_r
;

154 
p1
->
åì_r
 = 
p2
->
åì_l
;

155 
p2
->
åì_l
 = 
p1
;

157 (*
µr
)->
åì_l
 = 
p2
->
åì_r
;

158 
p2
->
åì_r
 = *
µr
;

160 i‡(
p2
->
åì_b
 == -1)

161 (*
µr
)->
åì_b
 = 1;

163 (*
µr
)->
åì_b
 = 0;

165 i‡(
p2
->
åì_b
 == 1)

166 
p1
->
åì_b
 = -1;

168 
p1
->
åì_b
 = 0;

169 *
µr
 = 
p2
;

171 (*
µr
)->
åì_b
 = 0;

172 *
pi_bÆ™˚
 = 0;

180 i‡(
cmp
 > 0) {

181 
	`•rout
(&(*
µr
)->
åì_r
, 
pc_d©a
, 
pi_bÆ™˚
,

182 
pfi_com∑ª
, 
pfi_dñëe
);

183 i‡(*
pi_bÆ™˚
) {

184 (*
µr
)->
åì_b
) {

186 (*
µr
)->
åì_b
 = 0;

187 *
pi_bÆ™˚
 = 0;

190 (*
µr
)->
åì_b
 = 1;

193 
p1
 = (*
µr
)->
åì_r
;

194 i‡(
p1
->
åì_b
 == 1) {

195 (*
µr
)->
åì_r
 = 
p1
->
åì_l
;

196 
p1
->
åì_l
 = *
µr
;

197 (*
µr
)->
åì_b
 = 0;

198 *
µr
 = 
p1
;

200 
p2
 = 
p1
->
åì_l
;

201 
p1
->
åì_l
 = 
p2
->
åì_r
;

202 
p2
->
åì_r
 = 
p1
;

204 (*
µr
)->
åì_r
 = 
p2
->
åì_l
;

205 
p2
->
åì_l
 = *
µr
;

207 i‡(
p2
->
åì_b
 == 1)

208 (*
µr
)->
åì_b
 = -1;

210 (*
µr
)->
åì_b
 = 0;

212 i‡(
p2
->
åì_b
 == -1)

213 
p1
->
åì_b
 = 1;

215 
p1
->
åì_b
 = 0;

217 *
µr
 = 
p2
;

219 (*
µr
)->
åì_b
 = 0;

220 *
pi_bÆ™˚
 = 0;

228 *
pi_bÆ™˚
 = 0;

229 i‡(
pfi_dñëe
)

230 (*
pfi_dñëe
Ë((*
µr
)->
åì_p
);

231 (*
µr
)->
åì_p
 = 
pc_d©a
;

233 
	}
}

236 
	$åì_dñëe
(
µr_p
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
)

237 
åì
 **
µr_p
;

238 (*
pfi_com∑ª
) ();

239 *
pc_u£r
;

240 (*
pfi_u¨
) ();

242 
i_bÆ™˚
 = 0, 
i_u¨_ˇŒed
 = 0;

244  
	`dñëe
(
µr_p
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
,

245 &
i_bÆ™˚
, &
i_u¨_ˇŒed
);

246 
	}
}

249 
	$dñëe
(
µr_p
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
,

250 
pi_bÆ™˚
, 
pi_u¨_ˇŒed
)

251 
åì
 **
µr_p
;

252 (*
pfi_com∑ª
Ë
	`PROT
((*, *));

253 *
pc_u£r
;

254 (*
pfi_u¨
Ë
	`PROT
((*));

255 *
pi_bÆ™˚
;

256 *
pi_u¨_ˇŒed
;

258 
åì
 *
¥_q
;

259 
i_comp
, 
i_ªt
;

261 i‡(*
µr_p
 =
NULL
) {

264 
i_comp
 = (*
pfi_com∑ª
Ë((*
µr_p
)->
åì_p
, 
pc_u£r
);

265 i‡(
i_comp
 > 0) {

266 
i_ªt
 = 
	`dñëe
(&(*
µr_p
)->
åì_l
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
,

267 
pi_bÆ™˚
, 
pi_u¨_ˇŒed
);

268 i‡(*
pi_bÆ™˚
)

269 
	`bÆ™˚L
(
µr_p
, 
pi_bÆ™˚
);

270 } i‡(
i_comp
 < 0) {

271 
i_ªt
 = 
	`dñëe
(&(*
µr_p
)->
åì_r
, 
pfi_com∑ª
, 
pc_u£r
, 
pfi_u¨
,

272 
pi_bÆ™˚
, 
pi_u¨_ˇŒed
);

273 i‡(*
pi_bÆ™˚
)

274 
	`bÆ™˚R
(
µr_p
, 
pi_bÆ™˚
);

276 
¥_q
 = *
µr_p
;

277 i‡(
¥_q
->
åì_r
 =
NULL
) {

278 *
µr_p
 = 
¥_q
->
åì_l
;

279 *
pi_bÆ™˚
 = 1;

280 } i‡(
¥_q
->
åì_l
 =
NULL
) {

281 *
µr_p
 = 
¥_q
->
åì_r
;

282 *
pi_bÆ™˚
 = 1;

284 
	`dñ
(&
¥_q
->
åì_l
, 
pi_bÆ™˚
, &¥_q, 
pfi_u¨
,

285 
pi_u¨_ˇŒed
);

286 i‡(*
pi_bÆ™˚
)

287 
	`bÆ™˚L
(
µr_p
, 
pi_bÆ™˚
);

289 
	`FREE
(
¥_q
);

290 i‡(!*
pi_u¨_ˇŒed
 && 
pfi_u¨
)

291 (*
pfi_u¨
Ë(
¥_q
->
åì_p
);

292 
i_ªt
 = 1;

294  
i_ªt
;

295 
	}
}

298 
	$dñ
(
µr_r
, 
pi_bÆ™˚
, 
µr_q
, 
pfi_u¨
, 
pi_u¨_ˇŒed
)

299 
åì
 **
µr_r
;

300 *
pi_bÆ™˚
;

301 
åì
 **
µr_q
;

302 (*
pfi_u¨
Ë
	`PROT
((*));

303 *
pi_u¨_ˇŒed
;

305 i‡((*
µr_r
)->
åì_r
 !
NULL
) {

306 
	`dñ
(&(*
µr_r
)->
åì_r
, 
pi_bÆ™˚
, 
µr_q
, 
pfi_u¨
,

307 
pi_u¨_ˇŒed
);

308 i‡(*
pi_bÆ™˚
)

309 
	`bÆ™˚R
(
µr_r
, 
pi_bÆ™˚
);

311 i‡(
pfi_u¨
)

312 (*
pfi_u¨
Ë((*
µr_q
)->
åì_p
);

313 *
pi_u¨_ˇŒed
 = 1;

314 (*
µr_q
)->
åì_p
 = (*
µr_r
)->tree_p;

315 *
µr_q
 = *
µr_r
;

316 *
µr_r
 = (*µr_r)->
åì_l
;

317 *
pi_bÆ™˚
 = 1;

321 
	}
}

324 
bÆ™˚L
 
	$P2
(
åì
 **, 
µr_p
, *, 
pi_bÆ™˚
)

326 
åì
 *
p1
, *
p2
;

327 
b1
, 
b2
;

329 (*
µr_p
)->
åì_b
) {

331 (*
µr_p
)->
åì_b
 = 0;

334 (*
µr_p
)->
åì_b
 = 1;

335 *
pi_bÆ™˚
 = 0;

338 
p1
 = (*
µr_p
)->
åì_r
;

339 
b1
 = 
p1
->
åì_b
;

340 i‡(
b1
 >= 0) {

341 (*
µr_p
)->
åì_r
 = 
p1
->
åì_l
;

342 
p1
->
åì_l
 = *
µr_p
;

343 i‡(
b1
 == 0) {

344 (*
µr_p
)->
åì_b
 = 1;

345 
p1
->
åì_b
 = -1;

346 *
pi_bÆ™˚
 = 0;

348 (*
µr_p
)->
åì_b
 = 0;

349 
p1
->
åì_b
 = 0;

351 *
µr_p
 = 
p1
;

353 
p2
 = 
p1
->
åì_l
;

354 
b2
 = 
p2
->
åì_b
;

355 
p1
->
åì_l
 = 
p2
->
åì_r
;

356 
p2
->
åì_r
 = 
p1
;

357 (*
µr_p
)->
åì_r
 = 
p2
->
åì_l
;

358 
p2
->
åì_l
 = *
µr_p
;

359 i‡(
b2
 == 1)

360 (*
µr_p
)->
åì_b
 = -1;

362 (*
µr_p
)->
åì_b
 = 0;

363 i‡(
b2
 == -1)

364 
p1
->
åì_b
 = 1;

366 
p1
->
åì_b
 = 0;

367 *
µr_p
 = 
p2
;

368 
p2
->
åì_b
 = 0;

372 
	}
}

375 
bÆ™˚R
 
	$P2
(
åì
 **, 
µr_p
, *, 
pi_bÆ™˚
)

377 
åì
 *
p1
, *
p2
;

378 
b1
, 
b2
;

380 (*
µr_p
)->
åì_b
) {

382 (*
µr_p
)->
åì_b
 = 0;

385 (*
µr_p
)->
åì_b
 = -1;

386 *
pi_bÆ™˚
 = 0;

389 
p1
 = (*
µr_p
)->
åì_l
;

390 
b1
 = 
p1
->
åì_b
;

391 i‡(
b1
 <= 0) {

392 (*
µr_p
)->
åì_l
 = 
p1
->
åì_r
;

393 
p1
->
åì_r
 = *
µr_p
;

394 i‡(
b1
 == 0) {

395 (*
µr_p
)->
åì_b
 = -1;

396 
p1
->
åì_b
 = 1;

397 *
pi_bÆ™˚
 = 0;

399 (*
µr_p
)->
åì_b
 = 0;

400 
p1
->
åì_b
 = 0;

402 *
µr_p
 = 
p1
;

404 
p2
 = 
p1
->
åì_r
;

405 
b2
 = 
p2
->
åì_b
;

406 
p1
->
åì_r
 = 
p2
->
åì_l
;

407 
p2
->
åì_l
 = 
p1
;

408 (*
µr_p
)->
åì_l
 = 
p2
->
åì_r
;

409 
p2
->
åì_r
 = *
µr_p
;

410 i‡(
b2
 == -1)

411 (*
µr_p
)->
åì_b
 = 1;

413 (*
µr_p
)->
åì_b
 = 0;

414 i‡(
b2
 == 1)

415 
p1
->
åì_b
 = -1;

417 
p1
->
åì_b
 = 0;

418 *
µr_p
 = 
p2
;

419 
p2
->
åì_b
 = 0;

423 
	}
}

426 
	$åì_åav
(
µr_åì
, 
pfi_u¨
)

427 
åì
 **
µr_åì
;

428 (*
pfi_u¨
Ë
	`PROT
((*));

430 i‡(!*
µr_åì
)

433 i‡(!
	`åì_åav
(&(**
µr_åì
).
åì_l
, 
pfi_u¨
))

435 i‡(!(*
pfi_u¨
Ë((**
µr_åì
).
åì_p
))

437 i‡(!
	`åì_åav
(&(**
µr_åì
).
åì_r
, 
pfi_u¨
))

440 
	}
}

443 
	$åì_mung
(
µr_åì
, 
pfi_u¨
)

444 
åì
 **
µr_åì
;

445 (*
pfi_u¨
Ë
	`PROT
((*));

447 i‡(*
µr_åì
) {

448 
	`åì_mung
(&(**
µr_åì
).
åì_l
, 
pfi_u¨
);

449 
	`åì_mung
(&(**
µr_åì
).
åì_r
, 
pfi_u¨
);

450 i‡(
pfi_u¨
)

451 (*
pfi_u¨
Ë((**
µr_åì
).
åì_p
);

452 
	`FREE
(*
µr_åì
);

453 *
µr_åì
 = 
NULL
;

456 
	}
}

	@avltree.h

7 #i‚de‡
_AVLTREE_H_


8 
	#_AVLTREE_H_


	)

10 
	såì_s
 {

11 
åì_s
 *
	måì_l
, *
	måì_r
;

12 *
	måì_p
;

13 
	måì_b
;

14 } 
	tåì
;

16 
åì_öô
 
PROT
((
åì
 **));

17 *
åì_§ch
 
PROT
((
åì
 *, (*) (), *));

18 
åì_add
 
PROT
((
åì
 **, (*) (), *, (*) ()));

19 
åì_dñëe
 
PROT
((
åì
 **, (*) (), *, (*) ()));

20 
åì_åav
 
PROT
((
åì
 **, (*) ()));

21 
åì_mung
 
PROT
((
åì
 **, (*) ()));

	@backend.c

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"backíd.h
"

5 
	~"comm.h
"

6 
	~"ª∂a˚_¥ogøm.h
"

7 
	~"sockë_efuns.h
"

8 
	~"sw≠.h
"

9 
	~"ˇŒ_out.h
"

10 
	~"p‹t.h
"

11 
	~"löt.h
"

12 
	~"ma°î.h
"

14 #ifde‡
WIN32


15 
	~<¥o˚ss.h
>

16 
CDECL
 
Æ¨m_lo›
 
PROT
((*));

19 
îr‹_c⁄ãxt_t
 *
	gcuºít_îr‹_c⁄ãxt
 = 0;

24 
	gcuºít_time
;

26 
	ghóπ_bót_Êag
 = 0;

28 
obje˘_t
 *
	gcuºít_hóπ_bót
;

29 
look_f‹_obje˘s_to_sw≠
 
PROT
(());

30 
ˇŒ_hóπ_bót
 
PROT
(());

33 
ªp‹t_hﬁes
 
PROT
(());

45 
	$˛ór_°©e
()

47 
cuºít_obje˘
 = 0;

48 
	`£t_comm™d_givî
(0);

49 
cuºít_öãø˘ive
 = 0;

50 
¥evious_ob
 = 0;

51 
cuºít_¥og
 = 0;

52 
ˇŒî_ty≥
 = 0;

53 
	`ª£t_machöe
(0);

54 
	}
}

57 
	$ªp‹t_hﬁes
() {

58 i‡(
cuºít_obje˘
 && cuºít_obje˘->
«me
)

59 
	`debug_mesßge
("cuºít_obje˘ i†/%s\n", 
cuºít_obje˘
->
«me
);

60 i‡(
comm™d_givî
 && comm™d_givî->
«me
)

61 
	`debug_mesßge
("comm™d_givî i†/%s\n", 
comm™d_givî
->
«me
);

62 i‡(
cuºít_öãø˘ive
 && cuºít_öãø˘ive->
«me
)

63 
	`debug_mesßge
("cuºít_öãø˘ivêi†/%s\n", 
cuºít_öãø˘ive
->
«me
);

64 i‡(
¥evious_ob
 &&Öªvious_ob->
«me
)

65 
	`debug_mesßge
("¥evious_ob i†/%s\n", 
¥evious_ob
->
«me
);

66 i‡(
cuºít_¥og
 && cuºít_¥og->
«me
)

67 
	`debug_mesßge
("cuºít_¥og i†/%s\n", 
cuºít_¥og
->
«me
);

68 i‡(
ˇŒî_ty≥
)

69 
	`debug_mesßge
("ˇŒî_ty≥ i†%s\n", 
ˇŒî_ty≥
);

70 
	}
}

73 
log⁄
 
	$P1
(
obje˘_t
 *, 
ob
)

75 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) {

80 
	`≠∂y
(
APPLY_LOGON
, 
ob
, 0, 
ORIGIN_DRIVER
);

82 
	}
}

87 
	gevÆ_co°
;

89 
	$backíd
()

91 
timevÆ
 
timeout
;

92 
i
, 
nb
;

93 vﬁ©ûê
fú°_ˇŒ
 = 1;

94 
thîe_is_a_p‹t
 = 0;

95 
îr‹_c⁄ãxt_t
 
ec⁄
;

97 
	`debug_mesßge
("Initializations complete.\n\n");

98 
i
 = 0; i < 5; i++) {

99 i‡(
exã∫Æ_p‹t
[
i
].
p‹t
) {

100 
	`debug_mesßge
("Accepting connections onÖort %d.\n",

101 
exã∫Æ_p‹t
[
i
].
p‹t
);

102 
thîe_is_a_p‹t
 = 1;

106 i‡(!
thîe_is_a_p‹t
)

107 
	`debug_mesßge
("NoÉxternalÖorts specified.\n");

109 
	`öô_u£r_c⁄n
();

110 #ifde‡
SIGHUP


111 
	`sig«l
(
SIGHUP
, 
°¨tshutdownMudOS
);

113 
	`˛ór_°©e
();

114 
	`ßve_c⁄ãxt
(&
ec⁄
);

115 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
))

116 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

117 i‡(!
t_Êag
 && 
fú°_ˇŒ
) {

118 
fú°_ˇŒ
 = 0;

119 
	`ˇŒ_hóπ_bót
();

124 
cuºít_öãø˘ive
 = 0;

125 
evÆ_co°
 = 
max_co°
;

127 i‡(
obj_li°_ª∂a˚
 || 
obj_li°_de°ru˘
)

128 
	`ªmove_de°ru˘ed_obje˘s
();

133 i‡(
MudOS_is_beög_shut_down
)

134 
	`shutdownMudOS
(0);

135 i‡(
¶ow_shut_down_to_do
) {

136 
tmp
 = 
¶ow_shut_down_to_do
;

138 
¶ow_shut_down_to_do
 = 0;

139 
	`¶ow_shut_down
(
tmp
);

144 
	`make_£À˘masks
();

145 i‡(
hóπ_bót_Êag
) {

147 
timeout
.
tv_£c
 = 0;

149 
timeout
.
tv_u£c
 = 0;

157 #ifde‡
WIN32


158 
timeout
.
tv_£c
 = 
HEARTBEAT_INTERVAL
/1000000;

159 
timeout
.
tv_u£c
 = 
HEARTBEAT_INTERVAL
%1000000;

161 
timeout
.
tv_£c
 = 60;

162 
timeout
.
tv_u£c
 = 0;

165 #i‚de‡
hpux


166 
nb
 = 
	`£À˘
(
FD_SETSIZE
, &
ªadmask
, &
wrôemask
, (
fd_£t
 *Ë0, &
timeout
);

168 
nb
 = 
	`£À˘
(
FD_SETSIZE
, (*Ë&
ªadmask
, (*Ë&
wrôemask
,

169 (*Ë0, &
timeout
);

174 i‡(
nb
 > 0) {

175 
	`¥o˚ss_io
();

180 
i
 = 0; 
	`¥o˚ss_u£r_comm™d
(Ë&& i < 
max_u£rs
; i++)

186 i‡(
hóπ_bót_Êag
)

187 
	`ˇŒ_hóπ_bót
();

189 
	}
}

209 
	$look_f‹_obje˘s_to_sw≠
()

211 
√xt_time
;

212 #i‚de‡
NO_IP_DEMON


213 
no_ù_dem⁄
;

214 
√xt_£rvî_time
;

216 
obje˘_t
 *
ob
;

217 
VOLATILE
 
obje˘_t
 *
√xt_ob
;

218 
îr‹_c⁄ãxt_t
 
ec⁄
;

220 #i‚de‡
NO_IP_DEMON


221 i‡(
cuºít_time
 >
√xt_£rvî_time
) {

227 i‡(!
no_ù_dem⁄
 && 
√xt_£rvî_time
)

228 
	`öô_addr_£rvî
(
ADDR_SERVER_IP
, 
ADDR_SERVER_PORT
);

229 
√xt_£rvî_time
 = 
cuºít_time
 + 15 * 60;

233 i‡(
cuºít_time
 < 
√xt_time
)

235 
√xt_time
 = 
cuºít_time
 + 15 * 60;

242 
√xt_ob
 = 
obj_li°
;

243 
	`ßve_c⁄ãxt
(&
ec⁄
);

244 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
))

245 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

247 (
ob
 = (
obje˘_t
 *)
√xt_ob
)) {

248 
ªady_f‹_sw≠
 = 0;

249 
ªady_f‹_˛ón_up
 = 0;

251 
evÆ_co°
 = 
max_co°
;

253 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

254 
ob
 = 
obj_li°
;

255 
√xt_ob
 = 
ob
->
√xt_Æl
;

260 i‡(
cuºít_time
 - 
ob
->
time_of_ªf
 > 
time_to_sw≠
)

261 
ªady_f‹_sw≠
 = 1;

262 i‡(
cuºít_time
 - 
ob
->
time_of_ªf
 > 
time_to_˛ón_up
)

263 
ªady_f‹_˛ón_up
 = 1;

264 #i‡!
	`deföed
(
NO_RESETS
Ë&& !deföed(
LAZY_RESETS
)

268 i‡((
ob
->
Êags
 & 
O_WILL_RESET
Ë&& (ob->
√xt_ª£t
 < 
cuºít_time
)

269 && !(
ob
->
Êags
 & 
O_RESET_STATE
)) {

270 
	`debug
(
d_Êag
, ("RESET /%s\n", 
ob
->
«me
));

271 
	`ª£t_obje˘
(
ob
);

272 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

276 i‡(
time_to_˛ón_up
 > 0) {

287 i‡(
ªady_f‹_˛ón_up
 && (
ob
->
Êags
 & 
O_WILL_CLEAN_UP
)) {

288 
ßve_ª£t_°©e
 = 
ob
->
Êags
 & 
O_RESET_STATE
;

289 
svÆue_t
 *
svp
;

291 
	`debug
(
d_Êag
, ("˛ó¿u∞/%s\n", 
ob
->
«me
));

310 
	`push_numbî
(
ob
->
Êags
 & (
O_CLONE
 | 
O_SWAPPED
Ë? 0 : ob->
¥og
->
ªf
);

311 
svp
 = 
	`≠∂y
(
APPLY_CLEAN_UP
, 
ob
, 1, 
ORIGIN_DRIVER
);

312 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

314 i‡(!
svp
 || (svp->
ty≥
 =
T_NUMBER
 && svp->
u
.
numbî
 == 0))

315 
ob
->
Êags
 &~
O_WILL_CLEAN_UP
;

316 
ob
->
Êags
 |
ßve_ª£t_°©e
;

319 i‡(
time_to_sw≠
 > 0) {

327 i‡(
ob
->
¥og
 && ob->¥og->
löe_öfo
)

328 
	`sw≠_löe_numbîs
(
ob
->
¥og
);

329 i‡(
ob
->
Êags
 & 
O_SWAPPED
 || !
ªady_f‹_sw≠
)

331 i‡(
ob
->
Êags
 & 
O_HEART_BEAT
)

334 
	`debug
(
d_Êag
, ("sw≠ /%s\n", 
ob
->
«me
));

335 
	`sw≠
(
ob
);

338 
	`p›_c⁄ãxt
(&
ec⁄
);

339 
	}
}

355 
obje˘_t
 *
	mob
;

356 
	mhóπ_bót_ticks
;

357 
	mtime_to_hóπ_bót
;

358 } 
	thóπ_bót_t
;

360 
hóπ_bót_t
 *
	ghóπ_bóts
 = 0;

361 
	gmax_hóπ_bóts
 = 0;

362 
	ghóπ_bót_ödex
 = 0;

363 
	gnum_hb_objs
 = 0;

364 
	gnum_hb_to_do
 = 0;

366 
	gnum_hb_ˇŒs
 = 0;

367 
	g≥rc_hb_¥obes
 = 100.0;

369 #ifde‡
WIN32


370 
CDECL
 
Æ¨m_lo›
 
	$P1
(*, 
ign‹e
)

373 
	`SÀï
(
HEARTBEAT_INTERVAL
 / 1000);

374 
hóπ_bót_Êag
 = 1;

376 
	}
}

379 
	$ˇŒ_hóπ_bót
()

381 
obje˘_t
 *
ob
;

382 
hóπ_bót_t
 *
cuº_hb
;

383 
îr‹_c⁄ãxt_t
 
ec⁄
;

385 #ifde‡
WIN32


386 
Wö32Thªad
 = -1;

389 
hóπ_bót_Êag
 = 0;

390 #ifde‡
SIGALRM


391 
	`sig«l
(
SIGALRM
, 
sigÆrm_h™dÀr
);

394 #ifde‡
HAS_UALARM


395 
	`uÆ¨m
(
HEARTBEAT_INTERVAL
, 0);

397 #ifde‡
WIN32


398 i‡(
Wö32Thªad
 =-1ËWö32Thªad = 
	`_begöthªad
(

401 ((
__cde˛
 *)(*))

402 
Æ¨m_lo›
, 256, 0);

404 
	`Æ¨m
(
SYSV_HEARTBEAT_INTERVAL
);

408 
cuºít_öãø˘ive
 = 0;

410 i‡((
num_hb_to_do
 = 
num_hb_objs
)) {

411 
num_hb_ˇŒs
++;

412 
hóπ_bót_ödex
 = 0;

413 
	`ßve_c⁄ãxt
(&
ec⁄
);

414 !
hóπ_bót_Êag
) {

415 
ob
 = (
cuº_hb
 = &
hóπ_bóts
[
hóπ_bót_ödex
])->ob;

416 
	`DEBUG_CHECK
(!(
ob
->
Êags
 & 
O_HEART_BEAT
),

418 
	`DEBUG_CHECK
(
ob
->
Êags
 & 
O_SWAPPED
,

421 
cuº_hb
->
hóπ_bót_ticks
--;

423 i‡(
ob
->
¥og
->
hóπ_bót
 != 0) {

424 i‡(
cuº_hb
->
hóπ_bót_ticks
 < 1) {

425 
obje˘_t
 *
√w_comm™d_givî
;

426 
cuº_hb
->
hóπ_bót_ticks
 = cuº_hb->
time_to_hóπ_bót
;

427 
cuºít_hóπ_bót
 = 
ob
;

428 
√w_comm™d_givî
 = 
ob
;

429 #i‚de‡
NO_SHADOWS


430 
√w_comm™d_givî
->
shadowög
)

431 
√w_comm™d_givî
 =Çew_comm™d_givî->
shadowög
;

433 #i‚de‡
NO_ADD_ACTION


434 i‡(!(
√w_comm™d_givî
->
Êags
 & 
O_ENABLE_COMMANDS
))

435 
√w_comm™d_givî
 = 0;

437 #ifde‡
PACKAGE_MUDLIB_STATS


438 
	`add_hóπ_bóts
(&
ob
->
°©s
, 1);

440 
evÆ_co°
 = 
max_co°
;

442 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

443 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

445 
	`ßve_comm™d_givî
(
√w_comm™d_givî
);

446 
	`ˇŒ_dúe˘
(
ob
, ob->
¥og
->
hóπ_bót
 - 1,

447 
ORIGIN_DRIVER
, 0);

448 
	`p›_°ack
();

449 
	`ª°‹e_comm™d_givî
();

452 
cuºít_obje˘
 = 0;

455 i‡(++
hóπ_bót_ödex
 =
num_hb_to_do
)

458 
	`p›_c⁄ãxt
(&
ec⁄
);

459 i‡(
hóπ_bót_ödex
 < 
num_hb_to_do
)

460 
≥rc_hb_¥obes
 = 100 * (Ë
hóπ_bót_ödex
 / 
num_hb_to_do
;

462 
≥rc_hb_¥obes
 = 100.0;

463 
hóπ_bót_ödex
 = 
num_hb_to_do
 = 0;

465 
cuºít_¥og
 = 0;

466 
cuºít_hóπ_bót
 = 0;

467 
	`look_f‹_obje˘s_to_sw≠
();

468 
	`ˇŒ_out
();

469 #ifde‡
PACKAGE_MUDLIB_STATS


470 
	`mudlib_°©s_deˇy
();

472 
	}
}

475 
quîy_hóπ_bót
 
	$P1
(
obje˘_t
 *, 
ob
)

477 
ödex
;

479 i‡(!(
ob
->
Êags
 & 
O_HEART_BEAT
))  0;

480 
ödex
 = 
num_hb_objs
;

481 
ödex
--) {

482 i‡(
hóπ_bóts
[
ödex
].
ob
 == ob)

483  
hóπ_bóts
[
ödex
].
time_to_hóπ_bót
;

486 
	}
}

493 
£t_hóπ_bót
 
	$P2
(
obje˘_t
 *, 
ob
, , 
to
)

495 
ödex
;

497 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)  0;

499 i‡(!
to
) {

500 
num
;

502 
ödex
 = 
num_hb_objs
;

503 
ödex
--) {

504 i‡(
hóπ_bóts
[
ödex
].
ob
 == ob) ;

506 i‡(
ödex
 < 0)  0;

508 i‡(
num_hb_to_do
) {

509 i‡(
ödex
 <
hóπ_bót_ödex
)

510 
hóπ_bót_ödex
--;

511 i‡(
ödex
 < 
num_hb_to_do
)

512 
num_hb_to_do
--;

515 i‡((
num
 = (
num_hb_objs
 - (
ödex
 + 1))))

516 
	`memmove
(
hóπ_bóts
 + 
ödex
, hóπ_bót†+ (ödex + 1), 
num
 * (
hóπ_bót_t
));

518 
num_hb_objs
--;

519 
ob
->
Êags
 &~
O_HEART_BEAT
;

523 i‡(
ob
->
Êags
 & 
O_HEART_BEAT
) {

524 i‡(
to
 < 0)  0;

526 
ödex
 = 
num_hb_objs
;

527 
ödex
--) {

528 i‡(
hóπ_bóts
[
ödex
].
ob
 == ob) {

529 
hóπ_bóts
[
ödex
].
time_to_hóπ_bót
 = hóπ_bóts[ödex].
hóπ_bót_ticks
 = 
to
;

533 
	`DEBUG_CHECK
(
ödex
 < 0, "Couldn't findÉnabled object in heart_beatÜist!\n");

535 
hóπ_bót_t
 *
hb
;

537 i‡(!
max_hóπ_bóts
)

538 
hóπ_bóts
 = 
	`CALLOCATE
(
max_hóπ_bóts
 = 
HEART_BEAT_CHUNK
,

539 
hóπ_bót_t
, 
TAG_HEART_BEAT
,

541 i‡(
num_hb_objs
 =
max_hóπ_bóts
) {

542 
max_hóπ_bóts
 +
HEART_BEAT_CHUNK
;

543 
hóπ_bóts
 = 
	`RESIZE
(hóπ_bóts, 
max_hóπ_bóts
,

544 
hóπ_bót_t
, 
TAG_HEART_BEAT
,

548 
hb
 = &
hóπ_bóts
[
num_hb_objs
++];

549 
hb
->
ob
 = ob;

550 i‡(
to
 < 0)Åo = 1;

551 
hb
->
time_to_hóπ_bót
 = 
to
;

552 
hb
->
hóπ_bót_ticks
 = 
to
;

553 
ob
->
Êags
 |
O_HEART_BEAT
;

557 
	}
}

559 
hóπ_bót_°©us
 
	$P2
(
outbuf„r_t
 *, 
ob
, , 
vîbo£
)

561 
buf
[20];

563 i‡(
vîbo£
 == 1) {

564 
	`outbuf_add
(
ob
, "Heart beat information:\n");

565 
	`outbuf_add
(
ob
, "-----------------------\n");

566 
	`outbuf_addv
(
ob
, "Number of objects with heart beat: %d, starts: %d\n",

567 
num_hb_objs
, 
num_hb_ˇŒs
);

571 
	`•rötf
(
buf
, "%.2f", 
≥rc_hb_¥obes
);

572 
	`outbuf_addv
(
ob
, "Pî˚¡agêo‡HB cÆl†com∂ëedÜa°Åime: %s\n", 
buf
);

575 
	}
}

584 
¥ñﬂd_obje˘s
 
	$P1
(, 
eÊag
)

586 
VOLATILE
 
¨øy_t
 *
¥efûes
;

587 
svÆue_t
 *
ªt
;

588 
VOLATILE
 
ix
;

589 
îr‹_c⁄ãxt_t
 
ec⁄
;

591 
	`ßve_c⁄ãxt
(&
ec⁄
);

592 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

593 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

594 
	`p›_c⁄ãxt
(&
ec⁄
);

597 
	`push_numbî
(
eÊag
);

598 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_EPILOG
, 1);

599 
	`p›_c⁄ãxt
(&
ec⁄
);

600 i‡((
ªt
 =0Ë|| (ªà=(
svÆue_t
 *)-1Ë|| (ªt->
ty≥
 !
T_ARRAY
))

603 
¥efûes
 = 
ªt
->
u
.
¨r
;

604 i‡((
¥efûes
 =0Ë|| (¥efûes->
size
 < 1))

607 
	`debug_mesßge
("\nLoadingÖreloaded files ...\n");

608 
¥efûes
->
ªf
++;

609 
ix
 = 0;

611 
	`ßve_c⁄ãxt
(&
ec⁄
);

612 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

613 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

614 
ix
++;

616  ; 
ix
 < 
¥efûes
->
size
; ix++) {

617 i‡(
¥efûes
->
ôem
[
ix
].
ty≥
 !
T_STRING
)

620 
evÆ_co°
 = 
max_co°
;

622 
	`push_svÆue
(((
¨øy_t
 *)
¥efûes
)->
ôem
 + 
ix
);

623 (Ë
	`≠∂y_ma°î_ob
(
APPLY_PRELOAD
, 1);

625 
	`‰ì_¨øy
((
¨øy_t
 *)
¥efûes
);

626 
	`p›_c⁄ãxt
(&
ec⁄
);

627 
	}
}

632 
INLINE
 
	$ªmove_de°ru˘ed_obje˘s
()

634 
obje˘_t
 *
ob
, *
√xt
;

636 i‡(
obj_li°_ª∂a˚
)

637 
	`ª∂a˚_¥ogøms
();

638 
ob
 = 
obj_li°_de°ru˘
; ob; ob = 
√xt
) {

639 
√xt
 = 
ob
->
√xt_Æl
;

640 
	`de°ru˘2
(
ob
);

642 
obj_li°_de°ru˘
 = 0;

643 
	}
}

645 
	glﬂd_av
 = 0.0;

647 
	$upd©e_lﬂd_av
()

649 
œ°_time
;

650 
n
;

651 
c
;

652 
acc
 = 0;

654 
acc
++;

655 i‡(
cuºít_time
 =
œ°_time
)

657 
n
 = 
cuºít_time
 - 
œ°_time
;

658 i‡(
n
 < 
NUM_CONSTS
)

659 
c
 = 
c⁄°s
[
n
];

661 
c
 = 
	`exp
(-
n
 / 900.0);

662 
lﬂd_av
 = 
c
 *Üﬂd_av + 
acc
 * (1 - cË/ 
n
;

663 
œ°_time
 = 
cuºít_time
;

664 
acc
 = 0;

665 
	}
}

667 
	gcompûe_av
 = 0.0;

670 
upd©e_compûe_av
 
	$P1
(, 
löes
)

672 
œ°_time
;

673 
n
;

674 
c
;

675 
acc
 = 0;

677 
acc
 +
löes
;

678 i‡(
cuºít_time
 =
œ°_time
)

680 
n
 = 
cuºít_time
 - 
œ°_time
;

681 i‡(
n
 < 
NUM_CONSTS
)

682 
c
 = 
c⁄°s
[
n
];

684 
c
 = 
	`exp
(-
n
 / 900.0);

685 
compûe_av
 = 
c
 * compûe_av + 
acc
 * (1 - cË/ 
n
;

686 
œ°_time
 = 
cuºít_time
;

687 
acc
 = 0;

688 
	}
}

690 *
	$quîy_lﬂd_av
()

692 
buff
[100];

694 
	`•rötf
(
buff
, "%.2‡cmds/s, %.2‡com∞löes/s", 
lﬂd_av
, 
compûe_av
);

695  (
buff
);

696 
	}
}

698 #ifde‡
F_HEART_BEATS


699 
¨øy_t
 *
	$gë_hóπ_bóts
() {

700 
nob
 = 0, 
n
 = 
num_hb_objs
;

701 
hóπ_bót_t
 *
hb
 = 
hóπ_bóts
;

702 
obje˘_t
 **
obèb
;

703 
¨øy_t
 *
¨r
;

704 #ifde‡
F_SET_HIDE


705 
≠∂y_vÆid_hide
 = 1, 
di•œy_hiddí
 = 0;

708 
obèb
 = 
	`CALLOCATE
(
n
, 
obje˘_t
 *, 
TAG_TEMPORARY
, "heart_beats");

709 
n
--) {

710 #ifde‡
F_SET_HIDE


711 i‡(
hb
->
ob
->
Êags
 & 
O_HIDDEN
) {

712 i‡(
≠∂y_vÆid_hide
) {

713 
≠∂y_vÆid_hide
 = 0;

714 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

716 i‡(!
di•œy_hiddí
)

720 
obèb
[
nob
++] = (
hb
++)->
ob
;

723 
¨r
 = 
	`Æloˇã_em±y_¨øy
(
nob
);

724 
nob
--) {

725 
¨r
->
ôem
[
nob
].
ty≥
 = 
T_OBJECT
;

726 
¨r
->
ôem
[
nob
].
u
.
ob
 = 
obèb
[nob];

727 
	`add_ªf
(
¨r
->
ôem
[
nob
].
u
.
ob
, "get_heart_beats");

730 
	`FREE
(
obèb
);

732  
¨r
;

733 
	}
}

	@backend.h

1 #i‚de‡
BACKEND_H


2 
	#BACKEND_H


	)

4 
	~"öãΩªt.h
"

5 
	~"obje˘.h
"

7 
	#NULL_ERROR_CONTEXT
 0

	)

8 
	#NORMAL_ERROR_CONTEXT
 1

	)

9 
	#CATCH_ERROR_CONTEXT
 2

	)

10 
	#SAFE_APPLY_ERROR_CONTEXT
 4

	)

15 
cuºít_time
;

16 
hóπ_bót_Êag
;

17 
obje˘_t
 *
cuºít_hóπ_bót
;

18 
evÆ_co°
;

19 
îr‹_c⁄ãxt_t
 *
cuºít_îr‹_c⁄ãxt
;

21 
backíd
 
PROT
(());

22 
˛ór_°©e
 
PROT
(());

23 
log⁄
 
PROT
((
obje˘_t
 *));

24 
∑r£_comm™d
 
PROT
((*, 
obje˘_t
 *));

25 
£t_hóπ_bót
 
PROT
((
obje˘_t
 *, ));

26 
quîy_hóπ_bót
 
PROT
((
obje˘_t
 *));

27 
hóπ_bót_°©us
 
PROT
((
outbuf„r_t
 *, ));

28 
¥ñﬂd_obje˘s
 
PROT
(());

29 
INLINE
 
ªmove_de°ru˘ed_obje˘s
 
PROT
(());

30 
upd©e_lﬂd_av
 
PROT
(());

31 
upd©e_compûe_av
 
PROT
(());

32 *
quîy_lﬂd_av
 
PROT
(());

33 
¨øy_t
 *
gë_hóπ_bóts
 
PROT
(());

	@binaries.c

10 
	#SUPPRESS_COMPILER_INLINES


	)

11 
	~"°d.h
"

12 
	~"Õc_ö˛.h
"

13 
	~"fûe_ö˛.h
"

14 
	~"bö¨õs.h
"

15 
	~"Àx.h
"

16 
	~"backíd.h
"

17 
	~"sw≠.h
"

18 
	~"compûe_fûe.h
"

19 
	~"hash.h
"

20 
	~"ma°î.h
"

23 #ifde‡
WIN32


24 
	~<dúe˘.h
>

27 #ifde‡
BINARIES


29 *
	gmagic_id
 = "MUDB";

30 
time_t
 
	gdrivî_id
;

31 
time_t
 
	gc⁄fig_id
;

33 
	gdrivî_«me
[512];

35 
∑tch_out
 
PROT
((
¥ogøm_t
 *, *, ));

36 
∑tch_ö
 
PROT
((
¥ogøm_t
 *, *, ));

37 
°r_ˇ£_cmp
 
PROT
((*, *));

38 
check_times
 
PROT
((
time_t
, *));

39 
do_°©
 
PROT
((*, 
°©
 *, *));

46 
do_°©
 
	$P3
(*, 
‚ame
, 
°©
 *, 
°
, *, 
∑th«me
)

48 
i
;

49 
buf
[256];

51 i‡((
i
 = 
	`°©
(
‚ame
, 
°
)) != -1) {

52 i‡(
∑th«me
)

53 
	`°r˝y
(
∑th«me
, 
‚ame
);

54  
i
;

57 i‡(!
∑th«me
) {

58 #ifde‡
LATTICE


59 i‡(
	`°rchr
(
CONFIG_FILE_DIR
, ':'))

60 
	`•rötf
(
buf
, "%s%s", 
CONFIG_FILE_DIR
, 
‚ame
);

63 
	`•rötf
(
buf
, "%s/%s", 
CONFIG_FILE_DIR
, 
‚ame
);

64 i‡((
i
 = 
	`°©
(
buf
, 
°
)) != -1)

65  
i
;

68 #ifde‡
LATTICE


69 i‡(
	`°rchr
(
BIN_DIR
, ':'))

70 
	`•rötf
(
buf
, "%s%s", 
BIN_DIR
, 
‚ame
);

73 
	`•rötf
(
buf
, "%s/%s", 
BIN_DIR
, 
‚ame
);

75 i‡((
i
 = 
	`°©
(
buf
, 
°
)) != -1) {

76 i‡(
∑th«me
)

77 
	`°r˝y
(
∑th«me
, 
buf
);

78  
i
;

81 
	}
}

83 
ßve_bö¨y
 
	$P3
(
¥ogøm_t
 *, 
¥og
, 
mem_block_t
 *, 
ö˛udes
, mem_block_à*, 
∑tches
)

85 
fûe_«me_buf
[200];

86 *
fûe_«me
 = 
fûe_«me_buf
;

87 
FILE
 *
f
;

88 
i
, 
tmp
;

89 
Àn
;

90 
¥ogøm_t
 *
p
;

91 
°©
 
°
;

93 
svÆue_t
 *
ªt
;

94 *
nm
;

96 
nm
 = 
	`add_¶ash
(
¥og
->
«me
);

97 
	`push_mÆlo˚d_°rög
(
nm
);

98 
ªt
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_SAVE_BINARY
, 1);

99 i‡(!
	`MASTER_APPROVED
(
ªt
))

101 i‡(
¥og
->
tŸÆ_size
 > (Ë
USHRT_MAX
 ||

102 
ö˛udes
->
cuºít_size
 > (Ë
USHRT_MAX
)

106 
	`°r˝y
(
fûe_«me
, 
SAVE_BINARIES
);

107 i‡(
fûe_«me
[0] == '/')

108 
fûe_«me
++;

109 i‡(
	`°©
(
fûe_«me
, &
°
) == -1)

111 
	`°rˇt
(
fûe_«me
, "/");

112 
	`°rˇt
(
fûe_«me
, 
¥og
->
«me
);

113 
Àn
 = 
	`°æí
(
fûe_«me
);

114 #ifde‡
LPC_TO_C


115 i‡(
compûe_to_c
)

116 
fûe_«me
[
Àn
 - 1] = 'B';

119 
fûe_«me
[
Àn
 - 1] = 'b';

121 i‡(!(
f
 = 
	`¸dú_f›í
(
fûe_«me
)))

124 i‡(
comp_Êag
) {

125 
	`debug_mesßge
(" saving binary ... ");

126 #ifde‡
LATTICE


127 
	`fÊush
(
°dîr
);

134 i‡(
	`fwrôe
(
magic_id
, 
	`°æí
(magic_id), 1, 
f
) != 1 ||

135 
	`fwrôe
((*Ë&
drivî_id
,  drivî_id, 1, 
f
) != 1 ||

136 
	`fwrôe
((*Ë&
c⁄fig_id
,  c⁄fig_id, 1, 
f
) != 1) {

137 
	`debug_mesßge
("I/OÉrror in save_binary.\n");

138 
	`f˛o£
(
f
);

139 
	`u∆ök
(
fûe_«me
);

145 
Àn
 = 
ö˛udes
->
cuºít_size
;

146 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

147 
	`fwrôe
(
ö˛udes
->
block
, in˛udes->
cuºít_size
, 1, 
f
);

152 
p
 = (
¥ogøm_t
 *Ë
	`DXALLOC
(
¥og
->
tŸÆ_size
, 
TAG_TEMPORARY
, "save_binary");

154 
	`loˇã_out
(
¥og
);

155 
	`mem˝y
(
p
, 
¥og
,Örog->
tŸÆ_size
);

156 
	`loˇã_ö
(
¥og
);

157 i‡(
∑tches
->
cuºít_size
) {

158 
	`loˇã_ö
(
p
);

159 
	`∑tch_out
(
p
, (*Ë
∑tches
->
block
,

160 
∑tches
->
cuºít_size
 / ());

161 
	`loˇã_out
(
p
);

170 
Àn
 = 
	`SHARED_STRLEN
(
p
->
«me
);

171 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

172 
	`fwrôe
(
p
->
«me
, (), 
Àn
, 
f
);

175 
	`fwrôe
((*Ë&
p
->
tŸÆ_size
, Ö->tŸÆ_size, 1, 
f
);

176 
	`fwrôe
((*Ë
p
,Ö->
tŸÆ_size
, 1, 
f
);

177 
	`FREE
(
p
);

178 
p
 = 
¥og
;

181 
i
 = 0; i < (Ë
p
->
num_öhîôed
; i++) {

182 
Àn
 = 
	`SHARED_STRLEN
(
p
->
öhîô
[
i
].
¥og
->
«me
);

183 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

184 
	`fwrôe
(
p
->
öhîô
[
i
].
¥og
->
«me
, (), 
Àn
, 
f
);

188 
i
 = 0; i < (Ë
p
->
num_°rögs
; i++) {

189 
tmp
 = 
	`SHARED_STRLEN
(
p
->
°rögs
[
i
]);

190 i‡(
tmp
 > (Ë
USHRT_MAX
) {

191 
	`f˛o£
(
f
);

192 
	`u∆ök
(
fûe_«me
);

193 
	`îr‹
("StringÅooÜong for save_binary.\n");

196 
Àn
 = 
tmp
;

197 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

198 
	`fwrôe
(
p
->
°rögs
[
i
], (), 
Àn
, 
f
);

202 
i
 = 0; i < (Ë
p
->
num_v¨übÀs_deföed
; i++) {

203 
Àn
 = 
	`SHARED_STRLEN
(
p
->
v¨übÀ_èbÀ
[
i
]);

204 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

205 
	`fwrôe
(
p
->
v¨übÀ_èbÀ
[
i
], (), 
Àn
, 
f
);

209 
i
 = 0; i < (Ë
p
->
num_fun˘i⁄s_deföed
; i++) {

210 
Àn
 = 
	`SHARED_STRLEN
(
p
->
fun˘i⁄_èbÀ
[
i
].
«me
);

211 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

212 
	`fwrôe
(
p
->
fun˘i⁄_èbÀ
[
i
].
«me
, (), 
Àn
, 
f
);

216 i‡(
p
->
löe_öfo
)

217 
Àn
 = 
p
->
fûe_öfo
[0];

219 
Àn
 = 0;

220 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

221 
	`fwrôe
((*Ë
p
->
fûe_öfo
, 
Àn
, 1, 
f
);

227 
Àn
 = 
∑tches
->
cuºít_size
;

228 
	`fwrôe
((*Ë&
Àn
, Üí, 1, 
f
);

229 
	`fwrôe
(
∑tches
->
block
,Ö©ches->
cuºít_size
, 1, 
f
);

231 
	`f˛o£
(
f
);

232 
	}
}

234 
	#ALLOC_BUF
(
size
) \

235 i‡((
size
Ë> 
buf_size
Ë{ 
	`FREE
(
buf
); bu‡
	`DXALLOC
(buf_sizêsize, 
TAG_TEMPORARY
, "ALLOC_BUF"); }

	)

238 #ifde‡
LPC_TO_C


239 
	#OUT_OF_DATE
 (
Õc_obj
 ? 
	`lﬂd_bö¨y
(
«me
, 0Ë: 0)

	)

241 
	#OUT_OF_DATE
 0

	)

244 #ifde‡
LPC_TO_C


245 
¥ogøm_t
 *
öt_lﬂd_bö¨y
 
	$P2
(*, 
«me
, 
Õc_obje˘_t
 *, 
Õc_obj
)

247 
¥ogøm_t
 *
öt_lﬂd_bö¨y
 
	$P1
(*, 
«me
)

250 
fûe_«me_buf
[400];

251 *
buf
, *
öame
, *
fûe_«me
 = 
fûe_«me_buf
, *
fûe_«me_two
 = &file_name_buf[200];

252 
FILE
 *
f
;

253 
i
, 
buf_size
, 
ûí
;

254 
time_t
 
mtime
;

255 
Àn
;

256 
¥ogøm_t
 *
p
, *
¥og
;

257 
obje˘_t
 *
ob
;

258 
°©
 
°
;

261 
num_∑r£_îr‹
 = 0;

263 
	`•rötf
(
fûe_«me
, "%s/%s", 
SAVE_BINARIES
, 
«me
);

264 i‡(
fûe_«me
[0] == '/')

265 
fûe_«me
++;

266 
Àn
 = 
	`°æí
(
fûe_«me
);

267 #ifde‡
LPC_TO_C


268 
fûe_«me
[
Àn
 - 1] = (
Õc_obj
 ? 'B' : 'b');

270 
fûe_«me
[
Àn
 - 1] = 'b';

273 i‡(
	`°©
(
fûe_«me
, &
°
) != -1)

274 
mtime
 = 
°
.
°_mtime
;

276  
OUT_OF_DATE
;

278 i‡(!(
f
 = 
	`f›í
(
fûe_«me
, 
FOPEN_READ
)))

279  
OUT_OF_DATE
;

281 i‡(
comp_Êag
) {

282 
	`debug_mesßge
("Üﬂdög bö¨y %†... ", 
«me
);

283 #ifde‡
LATTICE


284 
	`fÊush
(
°dîr
);

288 i‡(
	`check_times
(
mtime
, 
«me
) <= 0) {

289 i‡(
comp_Êag
)

290 
	`debug_mesßge
("out of date (source fileÇewer).\n");

291 
	`f˛o£
(
f
);

292  
OUT_OF_DATE
;

294 
buf
 = 
	`DXALLOC
(
buf_size
 = 
SMALL_STRING_SIZE
, 
TAG_TEMPORARY
, "ALLOC_BUF");

300 i‡(
	`‰ód
(
buf
, 
	`°æí
(
magic_id
), 1, 
f
) != 1 ||

301 
	`°∫cmp
(
buf
, 
magic_id
, 
	`°æí
(magic_id)) != 0) {

302 i‡(
comp_Êag
)

303 
	`debug_mesßge
("out of date. (bad magicÇumber)\n");

304 
	`f˛o£
(
f
);

305 
	`FREE
(
buf
);

306  
OUT_OF_DATE
;

308 i‡((
	`‰ód
((*Ë&
i
,  i, 1, 
f
Ë!1 || 
drivî_id
 != i)

309 #ifde‡
LPC_TO_C


310 && !
Õc_obj


313 i‡(
comp_Êag
)

314 
	`debug_mesßge
("out of date. (driver changed)\n");

315 
	`f˛o£
(
f
);

316 
	`FREE
(
buf
);

317  
OUT_OF_DATE
;

319 i‡(
	`‰ód
((*Ë&
i
,  i, 1, 
f
Ë!1 || 
c⁄fig_id
 != i) {

320 i‡(
comp_Êag
)

321 
	`debug_mesßge
("out of date. (config file changed)\n");

322 
	`f˛o£
(
f
);

323 
	`FREE
(
buf
);

324  
OUT_OF_DATE
;

326 i‡(
	`check_times
(
mtime
, 
SIMUL_EFUN
) <= 0) {

327 i‡(
comp_Êag
)

328 
	`debug_mesßge
("out of date (simul_efunÇewer).\n");

329 
	`f˛o£
(
f
);

330 
	`FREE
(
buf
);

331  
OUT_OF_DATE
;

336 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

337 
	`ALLOC_BUF
(
Àn
);

338 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

339 
öame
 = 
buf
; i«mê< bu‡+ 
Àn
; i«mê+
	`°æí
(iname) + 1) {

340 i‡(
	`check_times
(
mtime
, 
öame
) <= 0) {

341 i‡(
comp_Êag
)

342 
	`debug_mesßge
("out of date (include fileÇewer).\n");

343 
	`f˛o£
(
f
);

344 
	`FREE
(
buf
);

345  
OUT_OF_DATE
;

350 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

351 
	`ALLOC_BUF
(
Àn
 + 1);

352 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

353 
buf
[
Àn
] = '\0';

354 i‡(
	`°rcmp
(
«me
, 
buf
) != 0) {

355 i‡(
comp_Êag
)

356 
	`debug_mesßge
("binaryÇame inconsistent with file.\n");

357 
	`f˛o£
(
f
);

358 
	`FREE
(
buf
);

359  
OUT_OF_DATE
;

364 
	`‰ód
((*Ë&
ûí
,  iÀn, 1, 
f
);

365 
p
 = (
¥ogøm_t
 *Ë
	`DXALLOC
(
ûí
, 
TAG_PROGRAM
, "load_binary");

366 
	`‰ód
((*Ë
p
, 
ûí
, 1, 
f
);

367 
	`loˇã_ö
(
p
);

368 
p
->
«me
 = 
	`make_sh¨ed_°rög
(name);

371 
i
 = 0; i < (Ë
p
->
num_öhîôed
; i++) {

372 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

373 
	`ALLOC_BUF
(
Àn
 + 1);

374 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

375 
buf
[
Àn
] = '\0';

381 
	`•rötf
(
fûe_«me_two
, "%s/%s", 
SAVE_BINARIES
, 
buf
);

382 i‡(
fûe_«me_two
[0] == '/')

383 
fûe_«me_two
++;

384 
Àn
 = 
	`°æí
(
fûe_«me_two
);

385 
fûe_«me_two
[
Àn
 - 1] = 'b';

386 i‡(
	`check_times
(
mtime
, 
buf
) <= 0 ||

387 
	`check_times
(
mtime
, 
fûe_«me_two
) == 0) {

389 i‡(
comp_Êag
)

390 
	`debug_mesßge
("out of date (inherited sourceÇewer).\n");

391 
	`f˛o£
(
f
);

392 
	`‰ì_°rög
(
p
->
«me
);

393 
	`FREE
(
p
);

394 
	`FREE
(
buf
);

395  
OUT_OF_DATE
;

398 
ob
 = 
	`föd_obje˘2
(
buf
);

399 i‡(!
ob
) {

400 i‡(
comp_Êag
)

401 
	`debug_mesßge
("missing inheritedÖrog.\n");

402 
	`f˛o£
(
f
);

403 
	`‰ì_°rög
(
p
->
«me
);

404 
	`FREE
(
p
);

405 
öhîô_fûe
 = 
buf
;

408 
p
->
öhîô
[
i
].
¥og
 = 
ob
->prog;

412 
i
 = 0; i < (Ë
p
->
num_°rögs
; i++) {

413 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

414 
	`ALLOC_BUF
(
Àn
 + 1);

415 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

416 
buf
[
Àn
] = '\0';

417 
p
->
°rögs
[
i
] = 
	`make_sh¨ed_°rög
(
buf
);

421 
i
 = 0; i < (Ë
p
->
num_v¨übÀs_deföed
; i++) {

422 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

423 
	`ALLOC_BUF
(
Àn
 + 1);

424 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

425 
buf
[
Àn
] = '\0';

426 
p
->
v¨übÀ_èbÀ
[
i
] = 
	`make_sh¨ed_°rög
(
buf
);

430 
i
 = 0; i < (Ë
p
->
num_fun˘i⁄s_deföed
; i++) {

431 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

432 
	`ALLOC_BUF
(
Àn
 + 1);

433 
	`‰ód
(
buf
, (), 
Àn
, 
f
);

434 
buf
[
Àn
] = '\0';

435 
p
->
fun˘i⁄_èbÀ
[
i
].
«me
 = 
	`make_sh¨ed_°rög
(
buf
);

439 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

440 
p
->
fûe_öfo
 = (*Ë
	`DXALLOC
(
Àn
, 
TAG_LINENUMBERS
, "load binary");

441 
	`‰ód
((*Ë
p
->
fûe_öfo
, 
Àn
, 1, 
f
);

442 
p
->
löe_öfo
 = (*)&p->
fûe_öfo
[p->file_info[1]];

445 
	`‰ód
((*Ë&
Àn
, Üí, 1, 
f
);

446 
	`ALLOC_BUF
(
Àn
);

447 
	`‰ód
(
buf
, 
Àn
, 1, 
f
);

449 
	`∑tch_ö
(
p
, (*Ë
buf
, 
Àn
 / ());

451 
	`f˛o£
(
f
);

452 
	`FREE
(
buf
);

457 
¥og
 = 
p
;

459 
tŸÆ_¥og_block_size
 +
¥og
->
tŸÆ_size
;

460 
tŸÆ_num_¥og_blocks
 += 1;

462 
	`sw≠_löe_numbîs
(
¥og
);

463 
	`ª„ªn˚_¥og
(
¥og
, "load_binary");

464 
i
 = 0; (Ëò< 
¥og
->
num_öhîôed
; i++) {

465 
	`ª„ªn˚_¥og
(
¥og
->
öhîô
[
i
].prog, "inheritance");

468 #ifde‡
LPC_TO_C


469 i‡(
¥og
->
¥ogøm_size
 == 0) {

470 i‡(
Õc_obj
) {

471 i‡(
comp_Êag
)

472 
	`debug_mesßge
("linking jumpÅable ...\n");

473 
	`lök_jump_èbÀ
(
¥og
, (**)
Õc_obj
->
jump_èbÀ
);

475 i‡(
¥og
)

476 
	`‰ì_¥og
(
¥og
, 1);

477  
OUT_OF_DATE
;

482 i‡(
comp_Êag
)

483 
	`debug_mesßge
("done.\n");

484  
¥og
;

485 
	}
}

487 
öô_bö¨õs
 
	$P2
(, 
¨gc
, **, 
¨gv
)

489 
°©
 
°
;

490 
¨g_id
, 
i
;

492 i‡(
	`do_°©
(
¨gv
[0], &
°
, 
drivî_«me
) != -1) {

493 
drivî_id
 = 
°
.
°_mtime
;

495 
drivî_id
 = 
cuºít_time
;

496 
	`debug_mesßge
("C™'àföd \"%s\", ign‹ög old bö¨õs.\n", 
¨gv
[0]);

497 
	`debug_mesßge
("Try invokingÅhe driver usingÅhe fullÖathname.\n");

500 
¨g_id
 = 0;

501 
i
 = 1; i < 
¨gc
; i++) {

502 i‡(
¨gv
[
i
][0] != '-') {

503 i‡(
c⁄fig_id
)

505 i‡(
	`do_°©
(
¨gv
[
i
], &
°
, 0) != -1)

506 
c⁄fig_id
 = 
°
.
°_mtime
;

508 
c⁄fig_id
 = 
cuºít_time
;

509 } i‡(
¨gv
[
i
][1] == 'D' ||árgv[i][1] == 'm') {

510 
¨g_id
 = (¨g_id << 1Ë^ 
	`whash°r
(
¨gv
[
i
] + 2, 32);

514 
c⁄fig_id
 ^(
¨g_id
 << (() * 8));

515 
	}
}

521 
check_times
 
	$P2
(
time_t
, 
mtime
, *, 
nm
)

523 
°©
 
°
;

525 #ifde‡
LATTICE


526 i‡(*
nm
 == '/')

527 
nm
++;

529 i‡(
	`°©
(
nm
, &
°
) == -1)

531 i‡(
°
.
°_mtime
 > 
mtime
) {

535 
	}
}

544 
∑tch_out
 
	$P3
(
¥ogøm_t
 *, 
¥og
, *, 
∑tches
, , 
Àn
)

546 
i
;

547 *
p
;

549 
p
 = 
¥og
->
¥ogøm
;

550 
Àn
 > 0) {

551 
i
 = 
∑tches
[--
Àn
];

552 i‡(
p
[
i
] =
F_SWITCH
 &&Ö[i + 1] >> 4 != 0xf) {

553 
off£t
, 
bªak_addr
;

554 *
s
;

557 
	`COPY_SHORT
(&
off£t
, 
p
 + 
i
 + 2);

558 
	`COPY_SHORT
(&
bªak_addr
, 
p
 + 
i
 + 4);

560 
off£t
 < 
bªak_addr
) {

561 
	`COPY_PTR
(&
s
, 
p
 + 
i
 + 1 + 
off£t
);

566 i‡(
s
 == 0)

567 
s
 = (*)(
POINTER_INT
)-1;

569 
s
 = (*)(
POINTER_INT
)
	`°‹e_¥og_°rög
(s);

570 
	`COPY_PTR
(
p
 + 
i
 + 1 + 
off£t
, &
s
);

571 
off£t
 +
SWITCH_CASE_SIZE
;

575 
	}
}

577 
°r_ˇ£_cmp
 
	$P2
(*, 
a
, *, 
b
)

579 *
s1
, *
s2
;

581 
	`COPY_PTR
(&
s1
, 
a
);

582 
	`COPY_PTR
(&
s2
, 
b
);

584  
s1
 - 
s2
;

585 
	}
}

587 
∑tch_ö
 
	$P3
(
¥ogøm_t
 *, 
¥og
, *, 
∑tches
, , 
Àn
)

589 
i
;

590 *
p
;

592 
p
 = 
¥og
->
¥ogøm
;

593 
Àn
 > 0) {

594 
i
 = 
∑tches
[--
Àn
];

595 i‡(
p
[
i
] =
F_SWITCH
 &&Ö[i + 1] >> 4 != 0xf) {

596 
off£t
, 
°¨t
, 
bªak_addr
;

597 *
s
;

600 
	`COPY_SHORT
(&
off£t
, 
p
 + 
i
 + 2);

601 
	`COPY_SHORT
(&
bªak_addr
, 
p
 + 
i
 + 4);

603 
°¨t
 = 
off£t
;

604 
off£t
 < 
bªak_addr
) {

605 
	`COPY_PTR
(&
s
, 
p
 + 
off£t
 + 
i
 + 1);

609 i‡(
s
 == (*)-1)

610 
s
 = 0;

612 
s
 = 
¥og
->
°rögs
[(
POINTER_INT
)s];

613 
	`COPY_PTR
(
p
 + 
off£t
 + 
i
 + 1, &
s
);

614 
off£t
 +
SWITCH_CASE_SIZE
;

617 
	`quickS‹t
(&
p
[
°¨t
 + 
i
 + 1],

618 (
bªak_addr
 - 
°¨t
Ë/ 
SWITCH_CASE_SIZE
,

619 
SWITCH_CASE_SIZE
, 
°r_ˇ£_cmp
);

622 
	}
}

629 
FILE
 *
¸dú_f›í
 
	$P1
(*, 
fûe_«me
)

631 *
p
;

632 
°©
 
°
;

633 
FILE
 *
ªt
;

639 i‡((
ªt
 = 
	`f›í
(
fûe_«me
, "wb")Ë!
NULL
) {

640  
ªt
;

642 
p
 = 
fûe_«me
;

644 *
p
 && (∞(*Ë
	`°rchr
(p, '/'))) {

645 *
p
 = '\0';

646 i‡(
	`°©
(
fûe_«me
, &
°
) == -1) {

648 i‡(
	`OS_mkdú
(
fûe_«me
, 0770) == -1) {

649 *
p
 = '/';

650  (
FILE
 *) 0;

653 *
p
 = '/';

654 
p
++;

657  
	`f›í
(
fûe_«me
, "wb");

658 
	}
}

	@binaries.h

1 #i‚de‡
BINARIES_H


2 
	#BINARIES_H


	)

5 
	~"obje˘.h
"

7 
	~"compûî.h
"

9 
drivî_«me
[];

11 
FILE
 *
¸dú_f›í
 
PROT
((*));

12 
öô_bö¨õs
 
PROT
((, **));

13 #ifde‡
LPC_TO_C


14 
	#lﬂd_bö¨y
(
x
, 
y
Ë
	`öt_lﬂd_bö¨y
(x, y)

	)

15 
¥ogøm_t
 *
öt_lﬂd_bö¨y
 
PROT
((*, 
Õc_obje˘_t
 *));

17 
	#lﬂd_bö¨y
(
x
, 
y
Ë
	`öt_lﬂd_bö¨y
(x)

	)

18 
¥ogøm_t
 *
öt_lﬂd_bö¨y
 
PROT
((*));

20 
ßve_bö¨y
 
PROT
((
¥ogøm_t
 *, 
mem_block_t
 *, mem_block_t *));

	@bsdmalloc.c

34 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

35 
	gsccsid
[] = "@(#)malloc.c 5.11 (Berkeley) 2/23/91";

49 
	#IN_MALLOC_WRAPPER


	)

50 
	#NO_OPCODES


	)

51 
	~"°d.h
"

52 
	~"maö.h
"

54 #unde‡
NULL


55 
	#NULL
 0

	)

57 #ifde‡
_SEQUENT_


58 
	tu_ch¨
;

59 
	tu_sh‹t
;

60 
	tu_öt
;

74 
	uovîhód
 {

75 
ovîhód
 *
	mov_√xt
;

77 
u_ch¨
 
	movu_magic
;

78 
u_ch¨
 
	movu_ödex
;

79 #ifde‡
RCHECK


80 
u_sh‹t
 
	movu_rmagic
;

81 
u_öt
 
	movu_size
;

83 } 
	movu
;

84 
	#ov_magic
 
ovu
.
ovu_magic


	)

85 
	#ov_ödex
 
ovu
.
ovu_ödex


	)

86 
	#ov_rmagic
 
ovu
.
ovu_rmagic


	)

87 
	#ov_size
 
ovu
.
ovu_size


	)

90 
	#MAGIC
 0xe‡

	)

91 
	#RMAGIC
 0x5555

	)

93 #ifde‡
RCHECK


94 
	#RSLOP
  (
u_sh‹t
)

	)

96 
	#RSLOP
 0

	)

104 
	#NBUCKETS
 30

	)

105 
ovîhód
 *
	g√xtf
[
NBUCKETS
];

107 
	g∑gesz
;

108 
	g∑gebuckë
;

110 
m‹ec‹e
 
PROT
(());

111 
födbuckë
 
PROT
((
ovîhód
 *, ));

113 #ifde‡
DO_MSTATS


118 
u_öt
 
	gnmÆloc
[
NBUCKETS
];

122 #i‡
deföed
(
DEBUG
Ë|| deföed(
RCHECK
)

123 #ifde‡
__STDC__


124 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
(#p)

	)

126 
	#ASSERT
(
p
Ëi‡(!’)Ë
	`bŸch
("?")

	)

128 
bŸch
 
	$P1
(*, 
s
)

130 
	`debug_mesßge
("\r\«s£πi⁄ bŸched: %s\r\n", 
s
);

131 (Ë
	`fÊush
(
°dîr
);

132 
	`ab‹t
();

134 
	}
}

136 
	#ASSERT
(
p
)

	)

139 #ifde‡
mÆloc


141 #unde‡
mÆloc


143 *
bsdmÆloc_mÆloc
 
	$P1
(
size_t
, 
nbyãs
)

145 
ovîhód
 *
›
;

146 
buckë
, 
n
;

147 
amt
;

153 i‡(
∑gesz
 == 0) {

154 #ifde‡
MEMPAGESIZE


155 
∑gesz
 = 
n
 = 
MEMPAGESIZE
;

157 
∑gesz
 = 
n
 = 
	`gë∑gesize
();

159 
›
 = (
ovîhód
 *Ë
	`sbrk
(0);

160 
n
 =Ç - (*
›
) - (() op & (n - 1));

161 i‡(
n
 < 0)

162 
n
 +
∑gesz
;

163 i‡(
n
) {

164 i‡((*)
	`sbrk
(
n
) == (*) -1)

165  (
NULL
);

167 
buckë
 = 0;

168 
amt
 = 8;

169 
∑gesz
 > 
amt
) {

170 
amt
 <<= 1;

171 
buckë
++;

173 
∑gebuckë
 = 
buckë
;

180 i‡(
nbyãs
 <(
n
 = 
∑gesz
 - (*
›
Ë- 
RSLOP
)) {

181 #i‚de‡
RCHECK


182 
amt
 = 8;

183 
buckë
 = 0;

185 
amt
 = 16;

186 
buckë
 = 1;

188 
n
 = -((Ë(*
›
Ë+ 
RSLOP
);

190 
amt
 = 
∑gesz
;

191 
buckë
 = 
∑gebuckë
;

193 
nbyãs
 > 
amt
 + 
n
) {

194 
amt
 <<= 1;

195 i‡(
amt
 == 0)

196  (
NULL
);

197 
buckë
++;

203 i‡((
›
 = 
√xtf
[
buckë
]Ë=
NULL
) {

204 
	`m‹ec‹e
(
buckë
);

205 i‡((
›
 = 
√xtf
[
buckë
]Ë=
NULL
)

206  (
NULL
);

209 
√xtf
[
buckë
] = 
›
->
ov_√xt
;

210 
›
->
ov_magic
 = 
MAGIC
;

211 
›
->
ov_ödex
 = 
buckë
;

212 #ifde‡
DO_MSTATS


213 
nmÆloc
[
buckë
]++;

215 #ifde‡
RCHECK


219 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) & ~(RSLOP - 1);

220 
›
->
ov_rmagic
 = 
RMAGIC
;

221 *(
u_sh‹t
 *Ë((
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

223  ((*Ë(
›
 + 1));

224 
	}
}

230 
m‹ec‹e
 
	$P1
(, 
buckë
)

232 
ovîhód
 *
›
;

233 
sz
;

234 
amt
;

235 
nblks
;

241 
sz
 = 1 << (
buckë
 + 3);

242 #ifde‡
DEBUG


243 
	`ASSERT
(
sz
 > 0);

245 i‡(
sz
 <= 0)

248 i‡(
sz
 < 
∑gesz
) {

249 
amt
 = 
∑gesz
;

250 
nblks
 = 
amt
 / 
sz
;

252 
amt
 = 
sz
 + 
∑gesz
;

253 
nblks
 = 1;

255 
›
 = (
ovîhód
 *Ë
	`sbrk
(
amt
);

257 i‡((Ë
›
 == -1)

262 
√xtf
[
buckë
] = 
›
;

263 --
nblks
 > 0) {

264 
›
->
ov_√xt
 = (
ovîhód
 *Ë((
ˇddr_t
Ë› + 
sz
);

265 
›
 = (
ovîhód
 *Ë((
ˇddr_t
Ë› + 
sz
);

267 
	}
}

269 
INLINE
 

270 
bsdmÆloc_‰ì
 
	$P1
(*, 
˝
)

272 
size
;

273 
ovîhód
 *
›
;

275 i‡(
˝
 =
NULL
)

277 
›
 = (
ovîhód
 *Ë((
ˇddr_t
Ë
˝
 - (overhead));

278 #ifde‡
DEBUG


279 
	`ASSERT
(
›
->
ov_magic
 =
MAGIC
);

281 i‡(
›
->
ov_magic
 !
MAGIC
)

284 #ifde‡
RCHECK


285 
	`ASSERT
(
›
->
ov_rmagic
 =
RMAGIC
);

286 
	`ASSERT
(*(
u_sh‹t
 *Ë((
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë=
RMAGIC
);

288 
size
 = 
›
->
ov_ödex
;

289 
	`ASSERT
(
size
 < 
NBUCKETS
);

290 
›
->
ov_√xt
 = 
√xtf
[
size
];

291 
√xtf
[
size
] = 
›
;

292 #ifde‡
DO_MSTATS


293 
nmÆloc
[
size
]--;

295 
	}
}

308 
	gªÆloc_§chÀn
 = 4;

310 *
bsdmÆloc_ªÆloc
 
	$P2
(*, 
˝
, 
size_t
, 
nbyãs
)

312 
u_öt
 
⁄b
;

313 
i
;

314 
ovîhód
 *
›
;

315 *
ªs
;

316 
was_Ælo˚d
 = 0;

318 i‡(
˝
 =
NULL
)

319  (
	`bsdmÆloc_mÆloc
(
nbyãs
));

320 
›
 = (
ovîhód
 *Ë((
ˇddr_t
Ë
˝
 - (overhead));

321 i‡(
›
->
ov_magic
 =
MAGIC
) {

322 
was_Ælo˚d
++;

323 
i
 = 
›
->
ov_ödex
;

337 i‡((
i
 = 
	`födbuckë
(
›
, 1)) < 0 &&

338 (
i
 = 
	`födbuckë
(
›
, 
ªÆloc_§chÀn
)) < 0)

339 
i
 = 
NBUCKETS
;

341 
⁄b
 = 1 << (
i
 + 3);

342 i‡(
⁄b
 < 
∑gesz
)

343 
⁄b
 -(*
›
Ë+ 
RSLOP
;

345 
⁄b
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

347 i‡(
was_Ælo˚d
) {

348 i‡(
i
) {

349 
i
 = 1 << (i + 2);

350 i‡(
i
 < 
∑gesz
)

351 
i
 -(*
›
Ë+ 
RSLOP
;

353 
i
 +
∑gesz
 - (*
›
Ë- 
RSLOP
;

355 i‡(
nbyãs
 <
⁄b
 &&Çbyã†> 
i
) {

356 #ifde‡
RCHECK


357 
›
->
ov_size
 = (
nbyãs
 + 
RSLOP
 - 1) & ~(RSLOP - 1);

358 *(
u_sh‹t
 *Ë((
ˇddr_t
Ë(
›
 + 1Ë+ op->
ov_size
Ë
RMAGIC
;

360  (
˝
);

362 
	`bsdmÆloc_‰ì
(
˝
);

364 i‡((
ªs
 = 
	`bsdmÆloc_mÆloc
(
nbyãs
)Ë=
NULL
)

365  (
NULL
);

366 i‡(
˝
 !
ªs
)

367 
	`mem˝y
(
ªs
, 
˝
, (
nbyãs
 < 
⁄b
) ?Çbytes : onb);

368  (
ªs
);

369 
	}
}

377 
födbuckë
 
	$P2
(
ovîhód
 *, 
‰ìp
, , 
§chÀn
)

379 
ovîhód
 *
p
;

380 
i
, 
j
;

382 
i
 = 0; i < 
NBUCKETS
; i++) {

383 
j
 = 0;

384 
p
 = 
√xtf
[
i
];Ö && 
j
 !
§chÀn
;Ö =Ö->
ov_√xt
) {

385 i‡(
p
 =
‰ìp
)

386  (
i
);

387 
j
++;

391 
	}
}

393 #ifde‡
DO_MSTATS


402 
show_m°©s
 
	$P2
(
outbuf„r_t
 *, 
ob
, *, 
s
)

404 
i
, 
j
;

405 
ovîhód
 *
p
;

406 
tŸ‰ì
 = 0, 
tŸu£d
 = 0;

408 
	`outbuf_addv
(
ob
, "Mem‹yáŒoˇti⁄ sèti°ic†%s\n‰ì:\t", 
s
);

409 
i
 = 0; i < 
NBUCKETS
; i++) {

410 
j
 = 0, 
p
 = 
√xtf
[
i
];Ö;Ö =Ö->
ov_√xt
, j++);

411 
	`outbuf_addv
(
ob
, " %d", 
j
);

412 
tŸ‰ì
 +
j
 * (1 << (
i
 + 3));

414 
	`outbuf_add
(
ob
, "\nused:\t");

415 
i
 = 0; i < 
NBUCKETS
; i++) {

416 
	`outbuf_addv
(
ob
, " %d", 
nmÆloc
[
i
]);

417 
tŸu£d
 +
nmÆloc
[
i
] * (1 << (i + 3));

419 
	`outbuf_addv
(
ob
, "\n\tTotal in use: %d,Åotal free: %d\n",

420 
tŸu£d
, 
tŸ‰ì
);

421 
	}
}

425 #ifde‡
ˇŒoc


427 #unde‡
ˇŒoc


429 
INLINE
 *
bsdmÆloc_ˇŒoc
 
	$P2
(
size_t
, 
num
, size_t, 
size
)

431 *
p
;

433 
size
 *
num
;

434 i‡((
p
 = 
	`bsdmÆloc_mÆloc
(
size
)))

435 
	`mem£t
(
p
, 0, 
size
);

436  (
p
);

437 
	}
}

	@bsdmalloc.h

1 #i‚de‡
BSDMALLOC_H


2 
	#BSDMALLOC_H


	)

4 #ifde‡
BSDMALLOC


5 *
bsdmÆloc_mÆloc
 
PROT
((
size_t
));

6 *
bsdmÆloc_ˇŒoc
 
PROT
((
size_t
, size_t));

7 *
bsdmÆloc_ªÆloc
 
PROT
((*, 
size_t
));

8 
bsdmÆloc_‰ì
 
PROT
((*));

9 #ifde‡
DO_MSTATS


10 
show_m°©s
 
PROT
((
outbuf„r_t
 *, *));

	@buffer.c

3 
	~"°d.h
"

5 #i‚de‡
NO_BUFFER_TYPE


6 
	~"¸˘ab.h
"

7 
	~"Õc_ö˛.h
"

8 
	~"°øŒoc.h
"

10 
buf„r_t
 
	gnuŒ_buf
 =

17 
INLINE
 
buf„r_t
 *

18 
	$nuŒ_buf„r
()

20 
nuŒ_buf
.
ªf
++;

21  &
nuŒ_buf
;

22 
	}
}

24 
INLINE
 

25 
‰ì_buf„r
 
	$P1
(
buf„r_t
 *, 
b
)

27 
b
->
ªf
--;

29 i‡((
b
->
ªf
 > 0Ë|| (b =&
nuŒ_buf
)) {

32 
	`FREE
((*Ë
b
);

33 
	}
}

35 
buf„r_t
 *

36 
Æloˇã_buf„r
 
	$P1
(, 
size
)

38 
buf„r_t
 *
buf
;

40 #i‚de‡
NO_BUFFER_TYPE


41 i‡((
size
 < 0Ë|| (sizê> 
max_buf„r_size
)) {

42 
	`îr‹
("Illegal buffer size.\n");

44 i‡(
size
 == 0) {

45  
	`nuŒ_buf„r
();

48 
buf
 = (
buf„r_t
 *Ë
	`DCALLOC
((buf„r_tË+ 
size
 - 1, 1,

49 
TAG_BUFFER
, "allocate_buffer");

50 
buf
->
size
 = size;

51 
buf
->
ªf
 = 1;

52  
buf
;

54  
NULL
;

56 
	}
}

58 
wrôe_buf„r
 
	$P4
(
buf„r_t
 *, 
buf
, , 
°¨t
, *, 
°r
, , 
theLígth
)

60 
size
;

62 
size
 = 
buf
->size;

63 i‡(
°¨t
 < 0) {

64 
°¨t
 = 
size
 + start;

65 i‡(
°¨t
 < 0) {

73 i‡((
°¨t
 + 
theLígth
Ë> 
size
) {

76 
	`mem˝y
(
buf
->
ôem
 + 
°¨t
, 
°r
, 
theLígth
);

78 
	}
}

81 
ªad_buf„r
 
	$P4
(
buf„r_t
 *, 
b
, , 
°¨t
, , 
Àn
, *, 
æí
)

83 *
°r
;

84 
size
;

86 i‡(
Àn
 < 0)

89 
size
 = 
b
->size;

90 i‡(
°¨t
 < 0) {

91 
°¨t
 = 
size
 + start;

92 i‡(
°¨t
 < 0) {

96 i‡(
Àn
 == 0) {

97 
Àn
 = 
size
;

99 i‡(
°¨t
 >
size
) {

102 i‡((
°¨t
 + 
Àn
Ë> 
size
) {

103 
Àn
 = (
size
 - 
°¨t
);

105 
°r
 = (*)
b
->
ôem
 + 
°¨t
, 
size
 = 0; *°∏&& sizê< 
Àn
; str++, size++)

107 
°r
 = 
	`√w_°rög
(
size
, "read_buffer: str");

108 
	`mem˝y
(
°r
, 
b
->
ôem
 + 
°¨t
, 
size
);

109 
°r
[*
æí
 = 
size
] = '\0';

111  
°r
;

112 
	}
}

	@buffer.h

6 #i‚de‡
_BUFFER_H_


7 
	#_BUFFER_H_


	)

9 #i‚de‡
NO_BUFFER_TYPE


10 
	sbuf„r_s
 {

12 
	mªf
;

13 
	msize
;

14 #ifde‡
DEBUG


15 
	mexåa_ªf
;

17 
	môem
[1];

18 } 
	tbuf„r_t
;

23 
buf„r_t
 
nuŒ_buf
;

25 
INLINE
 
buf„r_t
 *
nuŒ_buf„r
 
PROT
(());

26 
INLINE
 
‰ì_buf„r
 
PROT
((
buf„r_t
 *));

27 
buf„r_t
 *
Æloˇã_buf„r
 
PROT
(());

28 
wrôe_buf„r
 
PROT
((
buf„r_t
 *, , *, ));

29 *
ªad_buf„r
 
PROT
((
buf„r_t
 *, , , *));

	@call_out.c

1 
	~"°d.h
"

2 
	~"ˇŒ_out.h
"

3 
	~"backíd.h
"

4 
	~"comm.h
"

5 
	~"p‹t.h
"

6 
	~"e›î©‹s.h
"

8 
	#DBG
(
x
Ë
	`debug
(
ˇŒ_out
, x)

	)

18 
	#CHUNK_SIZE
 20

	)

20 
	s≥ndög_ˇŒ_s
 {

21 
	mdñè
;

22 
°rög_‹_func
 
	mfun˘i⁄
;

23 
obje˘_t
 *
	mob
;

24 
¨øy_t
 *
	mvs
;

25 
≥ndög_ˇŒ_s
 *
	m√xt
;

26 #ifde‡
THIS_PLAYER_IN_CALL_OUT


27 
obje˘_t
 *
	mcomm™d_givî
;

29 #ifde‡
CALLOUT_HANDLES


30 
	mh™dÀ
;

32 } 
	t≥ndög_ˇŒ_t
;

34 
≥ndög_ˇŒ_t
 *
	gˇŒ_li°
[
CALLOUT_CYCLE_SIZE
];

35 
≥ndög_ˇŒ_t
 *
	gˇŒ_li°_‰ì
;

36 
	gnum_ˇŒ
;

37 #ifde‡
CALLOUT_HANDLES


38 
	gunique
 = 0;

41 
‰ì_ˇŒ
 
PROT
((
≥ndög_ˇŒ_t
 *));

42 
‰ì_ˇŒed_ˇŒ
 
PROT
((
≥ndög_ˇŒ_t
 *));

43 
ªmove_Æl_ˇŒ_out
 
PROT
((
obje˘_t
 *));

48 
‰ì_ˇŒed_ˇŒ
 
	$P1
(
≥ndög_ˇŒ_t
 *, 
c›
)

50 
c›
->
√xt
 = 
ˇŒ_li°_‰ì
;

51 i‡(
c›
->
ob
) {

52 
	`‰ì_°rög
(
c›
->
fun˘i⁄
.
s
);

53 
	`‰ì_obje˘
(
c›
->
ob
, "free_call");

55 
	`‰ì_fu≈
(
c›
->
fun˘i⁄
.
f
);

57 
c›
->
fun˘i⁄
.
s
 = 0;

58 #ifde‡
THIS_PLAYER_IN_CALL_OUT


59 i‡(
c›
->
comm™d_givî
)

60 
	`‰ì_obje˘
(
c›
->
comm™d_givî
, "free_call");

62 
c›
->
ob
 = 0;

63 
ˇŒ_li°_‰ì
 = 
c›
;

64 
	}
}

66 
INLINE_STATIC
 
‰ì_ˇŒ
 
	$P1
(
≥ndög_ˇŒ_t
 *, 
c›
)

68 i‡(
c›
->
vs
)

69 
	`‰ì_¨øy
(
c›
->
vs
);

70 
	`‰ì_ˇŒed_ˇŒ
(
c›
);

71 
	}
}

76 #ifde‡
CALLOUT_HANDLES


81 
√w_ˇŒ_out
 
	$P5
(
obje˘_t
 *, 
ob
, 
svÆue_t
 *, 
fun
, , 
dñay
,

82 , 
num_¨gs
, 
svÆue_t
 *, 
¨g
)

84 
≥ndög_ˇŒ_t
 *
c›
, **
c›p
;

85 
tm
;

87 i‡(
dñay
 < 0)

88 
dñay
 = 0;

90 
	`DBG
(("√w_ˇŒ_out: /%†dñay %i", 
ob
->
«me
, 
dñay
));

92 i‡(!
ˇŒ_li°_‰ì
) {

93 
i
;

95 
ˇŒ_li°_‰ì
 = 
	`CALLOCATE
(
CHUNK_SIZE
, 
≥ndög_ˇŒ_t
,

96 
TAG_CALL_OUT
, "new_call_out: call_list_free");

97 
i
 = 0; i < 
CHUNK_SIZE
 - 1; i++)

98 
ˇŒ_li°_‰ì
[
i
].
√xt
 = &call_list_free[i + 1];

99 
ˇŒ_li°_‰ì
[
CHUNK_SIZE
 - 1].
√xt
 = 0;

100 
num_ˇŒ
 +
CHUNK_SIZE
;

102 
c›
 = 
ˇŒ_li°_‰ì
;

103 
ˇŒ_li°_‰ì
 = cÆl_li°_‰ì->
√xt
;

105 i‡(
fun
->
ty≥
 =
T_STRING
) {

106 
	`DBG
((" fun˘i⁄: %s", 
fun
->
u
.
°rög
));

107 
c›
->
fun˘i⁄
.
s
 = 
	`make_sh¨ed_°rög
(
fun
->
u
.
°rög
);

108 
c›
->
ob
 = ob;

109 
	`add_ªf
(
ob
, "call_out");

111 
	`DBG
((" function: <function>"));

112 
c›
->
fun˘i⁄
.
f
 = 
fun
->
u
.
Â
;

113 
fun
->
u
.
Â
->
hdr
.
ªf
++;

114 
c›
->
ob
 = 0;

116 #ifde‡
THIS_PLAYER_IN_CALL_OUT


117 
c›
->
comm™d_givî
 = command_giver;

118 i‡(
comm™d_givî
)

119 
	`add_ªf
(
comm™d_givî
, "new_call_out");

121 i‡(
num_¨gs
 > 0) {

122 
c›
->
vs
 = 
	`Æloˇã_em±y_¨øy
(
num_¨gs
);

123 
	`mem˝y
(
c›
->
vs
->
ôem
, 
¨g
, (
svÆue_t
Ë* 
num_¨gs
);

125 
c›
->
vs
 = 0;

128 
tm
 = (
dñay
 + 
cuºít_time
Ë& (
CALLOUT_CYCLE_SIZE
 - 1);

130 
dñay
 = dñay / 
CALLOUT_CYCLE_SIZE
;

132 
	`DBG
(("CurrentÅime: %i Executesát: %i Slot: %i Delay: %i",

133 
cuºít_time
, cuºít_timê+ 
dñay
, 
tm
, delay));

135 
c›p
 = &
ˇŒ_li°
[
tm
]; *c›p; c›∞&(*c›p)->
√xt
) {

136 i‡((*
c›p
)->
dñè
 > 
dñay
) {

137 (*
c›p
)->
dñè
 -
dñay
;

138 
c›
->
dñè
 = 
dñay
;

139 
c›
->
√xt
 = *
c›p
;

140 *
c›p
 = 
c›
;

141 #ifde‡
CALLOUT_HANDLES


142 
tm
 +
CALLOUT_CYCLE_SIZE
 * ++
unique
;

143 
c›
->
h™dÀ
 = 
tm
;

144  
tm
;

149 
dñay
 -(*
c›p
)->
dñè
;

151 *
c›p
 = 
c›
;

152 
c›
->
dñè
 = 
dñay
;

153 
c›
->
√xt
 = 0;

154 #ifde‡
CALLOUT_HANDLES


155 
tm
 +
CALLOUT_CYCLE_SIZE
 * ++
unique
;

156 
c›
->
h™dÀ
 = 
tm
;

157  
tm
;

159 
	}
}

166 
	$ˇŒ_out
()

168 
exåa
, 
ªÆ_time
;

169 
≥ndög_ˇŒ_t
 *
c›
 = 0;

170 
îr‹_c⁄ãxt_t
 
ec⁄
;

171 
VOLATILE
 
tm
;

173 
cuºít_öãø˘ive
 = 0;

176 i‡(
c›
) {

177 
	`‰ì_ˇŒed_ˇŒ
(
c›
);

178 
c›
 = 0;

181 
ªÆ_time
 = 
	`gë_cuºít_time
();

182 
	`DBG
(("Calling call_outs: current_time: %iÑeal_time: %i difference: %i",

183 
cuºít_time
, 
ªÆ_time
,Ñeal_time - current_time));

188 
	`ßve_c⁄ãxt
(&
ec⁄
);

190 
tm
 = 
cuºít_time
 & (
CALLOUT_CYCLE_SIZE
 - 1);

191 
	`DBG
((" slŸ %i", 
tm
));

192 
ˇŒ_li°
[
tm
] && cÆl_li°[tm]->
dñè
 == 0) {

193 
obje˘_t
 *
ob
, *
√w_comm™d_givî
;

198 
c›
 = 
ˇŒ_li°
[
tm
];

199 
ˇŒ_li°
[
tm
] = cÆl_li°[tm]->
√xt
;

200 
ob
 = (
c›
->ob ? c›->ob : c›->
fun˘i⁄
.
f
->
hdr
.
ow√r
);

202 
	`DBG
((" /%s", (
ob
 ? ob->
«me
 : "(null)")));

204 i‡(!
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
)) {

205 
	`DBG
((" (destructed)"));

206 
	`‰ì_ˇŒ
(
c›
);

207 
c›
 = 0;

209 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

210 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

211 i‡(
max_evÆ_îr‹
) {

212 
	`debug_mesßge
("MaximumÉvaluation costÑeached whileÅryingÅoÖrocess call_outs\n");

213 
	`p›_c⁄ãxt
(&
ec⁄
);

217 
obje˘_t
 *
ob
;

219 
ob
 = 
c›
->ob;

220 #i‚de‡
NO_SHADOWS


221 i‡(
ob
)

222 
ob
->
shadowög
)

223 
ob
 = ob->
shadowög
;

225 
√w_comm™d_givî
 = 0;

226 #ifde‡
THIS_PLAYER_IN_CALL_OUT


227 i‡(
c›
->
comm™d_givî
 &&

228 !(
c›
->
comm™d_givî
->
Êags
 & 
O_DESTRUCTED
)) {

229 
√w_comm™d_givî
 = 
c›
->
comm™d_givî
;

230 } i‡(
ob
 && (ob->
Êags
 & 
O_LISTENER
)) {

231 
√w_comm™d_givî
 = 
ob
;

233 i‡(
√w_comm™d_givî
)

234 
	`DBG
((" comm™d_givî: /%s", 
√w_comm™d_givî
->
«me
));

236 
	`ßve_comm™d_givî
(
√w_comm™d_givî
);

239 i‡(
c›
->
vs
) {

240 
¨øy_t
 *
vec
 = 
c›
->
vs
;

241 
svÆue_t
 *
svp
 = 
vec
->
ôem
 + vec->
size
;

243 
svp
-- > 
vec
->
ôem
) {

244 i‡(
svp
->
ty≥
 =
T_OBJECT
 &&

245 (
svp
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

246 
	`‰ì_obje˘
(
svp
->
u
.
ob
, "call_out");

247 *
svp
 = 
c⁄°0u
;

251 
exåa
 = 
c›
->
vs
->
size
;

252 
	`å™s„r_push_some_svÆues
(
c›
->
vs
->
ôem
, 
exåa
);

253 
	`‰ì_em±y_¨øy
(
c›
->
vs
);

255 
exåa
 = 0;

257 i‡(
c›
->
ob
) {

258 i‡(
c›
->
fun˘i⁄
.
s
[0] =
APPLY___INIT_SPECIAL_CHAR
)

259 
	`îr‹
("Illegal functionÇame\n");

261 (Ë
	`≠∂y
(
c›
->
fun˘i⁄
.
s
, c›->
ob
, 
exåa
,

262 
ORIGIN_INTERNAL
);

264 (Ë
	`ˇŒ_fun˘i⁄_poöãr
(
c›
->
fun˘i⁄
.
f
, 
exåa
);

267 
	`ª°‹e_comm™d_givî
();

269 
	`‰ì_ˇŒed_ˇŒ
(
c›
);

270 
c›
 = 0;

274 i‡(
cuºít_time
 < 
ªÆ_time
) {

276 i‡(
ˇŒ_li°
[
tm
])

277 
ˇŒ_li°
[
tm
]->
dñè
--;

278 
cuºít_time
++;

279 
	`DBG
((" cuºít_timê%i", 
cuºít_time
));

285 
	`DBG
(("Done."));

286 
	`p›_c⁄ãxt
(&
ec⁄
);

287 
	}
}

289 
time_À·
 
	$P2
(, 
¶Ÿ
, , 
dñay
) {

290 
cuºít_¶Ÿ
 = 
cuºít_time
 & (
CALLOUT_CYCLE_SIZE
 - 1);

291 i‡(
¶Ÿ
 >
cuºít_¶Ÿ
) {

292  (
¶Ÿ
 - 
cuºít_¶Ÿ
Ë+ 
dñay
 * 
CALLOUT_CYCLE_SIZE
;

294  (
¶Ÿ
 - 
cuºít_¶Ÿ
Ë+ (
dñay
 + 1Ë* 
CALLOUT_CYCLE_SIZE
;

296 
	}
}

303 
ªmove_ˇŒ_out
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
fun
)

305 
≥ndög_ˇŒ_t
 **
c›p
, *
c›
;

306 
dñay
;

307 
i
;

309 i‡(!
ob
)  -1;

311 
	`DBG
(("ªmove_ˇŒ_out: /%†\"%s\"", 
ob
->
«me
, 
fun
));

313 
i
 = 0; i < 
CALLOUT_CYCLE_SIZE
; i++) {

314 
dñay
 = 0;

315 
c›p
 = &
ˇŒ_li°
[
i
]; *c›p; c›∞&(*c›p)->
√xt
) {

316 
	`DBG
((" SlŸ: %i\n", 
i
));

317 
dñay
 +(*
c›p
)->
dñè
;

318 i‡((*
c›p
)->
ob
 =ob && 
	`°rcmp
((*c›p)->
fun˘i⁄
.
s
, 
fun
) == 0) {

319 
c›
 = *
c›p
;

320 i‡(
c›
->
√xt
)

321 
c›
->
√xt
->
dñè
 += cop->delta;

322 *
c›p
 = 
c›
->
√xt
;

323 
	`‰ì_ˇŒ
(
c›
);

324 
	`DBG
((" found."));

325  
	`time_À·
(
i
, 
dñay
);

329 
	`DBG
(("Çot found."));

331 
	}
}

333 #ifde‡
CALLOUT_HANDLES


334 
ªmove_ˇŒ_out_by_h™dÀ
 
	$P1
(, 
h™dÀ
)

336 
≥ndög_ˇŒ_t
 **
c›p
, *
c›
;

337 
dñay
 = 0;

339 
	`DBG
(("remove_call_out_by_handle: handle: %i slot: %i",

340 
h™dÀ
, h™dÀ & (
CALLOUT_CYCLE_SIZE
 - 1)));

342 
c›p
 = &
ˇŒ_li°
[
h™dÀ
 & (
CALLOUT_CYCLE_SIZE
 - 1)]; *c›p; c›∞&(*c›p)->
√xt
) {

343 
dñay
 +(*
c›p
)->
dñè
;

344 i‡((*
c›p
)->
h™dÀ
 == handle) {

345 
c›
 = *
c›p
;

346 i‡(
c›
->
√xt
)

347 
c›
->
√xt
->
dñè
 += cop->delta;

348 *
c›p
 = 
c›
->
√xt
;

349 
	`‰ì_ˇŒ
(
c›
);

350  
	`time_À·
(
h™dÀ
 & (
CALLOUT_CYCLE_SIZE
 - 1), 
dñay
);

354 
	}
}

356 
föd_ˇŒ_out_by_h™dÀ
 
	$P1
(, 
h™dÀ
)

358 
≥ndög_ˇŒ_t
 *
c›
;

359 
dñay
 = 0;

361 
	`DBG
(("find_call_out_by_handle: handle: %i slot: %i",

362 
h™dÀ
, h™dÀ & (
CALLOUT_CYCLE_SIZE
 - 1)));

364 
c›
 = 
ˇŒ_li°
[
h™dÀ
 & (
CALLOUT_CYCLE_SIZE
 - 1)]; c›; c› = c›->
√xt
) {

365 
dñay
 +
c›
->
dñè
;

366 i‡(
c›
->
h™dÀ
 == handle)

367  
	`time_À·
(
h™dÀ
 & (
CALLOUT_CYCLE_SIZE
 - 1), 
dñay
);

370 
	}
}

373 
föd_ˇŒ_out
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
fun
)

375 
≥ndög_ˇŒ_t
 *
c›
;

376 
dñay
;

377 
i
;

379 i‡(!
ob
)  -1;

381 
	`DBG
(("föd_ˇŒ_out: /%†\"%s\"", 
ob
->
«me
, 
fun
));

383 
i
 = 0; i < 
CALLOUT_CYCLE_SIZE
; i++) {

384 
dñay
 = 0;

385 
	`DBG
((" SlŸ: %i", 
i
));

386 
c›
 = 
ˇŒ_li°
[
i
]; c›; c› = c›->
√xt
) {

387 
dñay
 +
c›
->
dñè
;

388 i‡(
c›
->
ob
 =ob && 
	`°rcmp
(c›->
fun˘i⁄
.
s
, 
fun
) == 0)

389  
	`time_À·
(
i
, 
dñay
);

393 
	}
}

395 
¥öt_ˇŒ_out_ußge
 
	$P2
(
outbuf„r_t
 *, 
ob
, , 
vîbo£
)

397 
i
, 
j
;

398 
≥ndög_ˇŒ_t
 *
c›
;

400 
i
 = 0, 
j
 = 0; j < 
CALLOUT_CYCLE_SIZE
; j++)

401 
c›
 = 
ˇŒ_li°
[
j
]; c›; c› = c›->
√xt
)

402 
i
++;

404 i‡(
vîbo£
 == 1) {

405 
	`outbuf_add
(
ob
, "Call out information:\n");

406 
	`outbuf_add
(
ob
, "---------------------\n");

407 
	`outbuf_addv
(
ob
, "Number ofállocated call outs: %8d, %8d bytes\n",

408 
num_ˇŒ
,Çum_ˇŒ * (
≥ndög_ˇŒ_t
));

409 
	`outbuf_addv
(
ob
, "CuºíàÀngth: %d\n", 
i
);

411 i‡(
vîbo£
 != -1)

412 
	`outbuf_addv
(
ob
, "ˇŒ out:\t\t\t%8d %8d (cuºíàÀngth %d)\n", 
num_ˇŒ
,

413 
num_ˇŒ
 * (
≥ndög_ˇŒ_t
), 
i
);

415  (Ë(
num_ˇŒ
 * (
≥ndög_ˇŒ_t
));

416 
	}
}

418 #ifde‡
DEBUGMALLOC_EXTENSIONS


419 
	$m¨k_ˇŒ_outs
()

421 
≥ndög_ˇŒ_t
 *
c›
;

422 
i
;

424 
i
 = 0; i < 
CALLOUT_CYCLE_SIZE
; i++) {

425 
c›
 = 
ˇŒ_li°
[
i
]; c›; c› = c›->
√xt
) {

426 i‡(
c›
->
vs
)

427 
c›
->
vs
->
exåa_ªf
++;

428 i‡(
c›
->
ob
) {

429 
c›
->
ob
->
exåa_ªf
++;

430 
	`EXTRA_REF
(
	`BLOCK
(
c›
->
fun˘i⁄
.
s
))++;

432 
c›
->
fun˘i⁄
.
f
->
hdr
.
exåa_ªf
++;

434 #ifde‡
THIS_PLAYER_IN_CALL_OUT


435 i‡(
c›
->
comm™d_givî
)

436 
c›
->
comm™d_givî
->
exåa_ªf
++;

440 
	}
}

450 
¨øy_t
 *
	$gë_Æl_ˇŒ_outs
()

452 
i
, 
j
, 
dñay
, 
tm
;

453 
≥ndög_ˇŒ_t
 *
c›
;

454 
¨øy_t
 *
v
;

456 
i
 = 0, 
j
 = 0; j < 
CALLOUT_CYCLE_SIZE
; j++)

457 
c›
 = 
ˇŒ_li°
[
j
]; c›; c› = c›->
√xt
) {

458 
obje˘_t
 *
ob
 = (
c›
->ob ? c›->ob : c›->
fun˘i⁄
.
f
->
hdr
.
ow√r
);

459 i‡(
ob
 && !(ob->
Êags
 & 
O_DESTRUCTED
))

460 
i
++;

463 
v
 = 
	`Æloˇã_em±y_¨øy
(
i
);

464 
tm
 = 
cuºít_time
 & (
CALLOUT_CYCLE_SIZE
-1);

466 
i
 = 0, 
j
 = 0; j < 
CALLOUT_CYCLE_SIZE
; j++) {

467 
dñay
 = 0;

468 
c›
 = 
ˇŒ_li°
[
j
]; c›; c› = c›->
√xt
) {

469 
¨øy_t
 *
vv
;

470 
obje˘_t
 *
ob
;

472 
dñay
 +
c›
->
dñè
;

473 
ob
 = (
c›
->ob ? c›->ob : c›->
fun˘i⁄
.
f
->
hdr
.
ow√r
);

474 i‡(!
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
))

476 
vv
 = 
	`Æloˇã_em±y_¨øy
(3);

477 i‡(
c›
->
ob
) {

478 
vv
->
ôem
[0].
ty≥
 = 
T_OBJECT
;

479 
vv
->
ôem
[0].
u
.
ob
 = 
c›
->ob;

480 
	`add_ªf
(
c›
->
ob
, "get_all_call_outs");

481 
vv
->
ôem
[1].
ty≥
 = 
T_STRING
;

482 
vv
->
ôem
[1].
subty≥
 = 
STRING_SHARED
;

483 
vv
->
ôem
[1].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
c›
->
fun˘i⁄
.
s
);

485 
vv
->
ôem
[0].
ty≥
 = 
T_OBJECT
;

486 
vv
->
ôem
[0].
u
.
ob
 = 
c›
->
fun˘i⁄
.
f
->
hdr
.
ow√r
;

487 
	`add_ªf
(
c›
->
fun˘i⁄
.
f
->
hdr
.
ow√r
, "get_all_call_outs");

488 
vv
->
ôem
[1].
ty≥
 = 
T_STRING
;

489 
vv
->
ôem
[1].
subty≥
 = 
STRING_SHARED
;

490 
vv
->
ôem
[1].
u
.
°rög
 = 
	`make_sh¨ed_°rög
("<function>");

492 
vv
->
ôem
[2].
ty≥
 = 
T_NUMBER
;

493 
vv
->
ôem
[2].
u
.
numbî
 = 
	`time_À·
(
j
, 
dñay
);

495 
v
->
ôem
[
i
].
ty≥
 = 
T_ARRAY
;

496 
v
->
ôem
[
i
++].
u
.
¨r
 = 
vv
;

499  
v
;

500 
	}
}

503 
ªmove_Æl_ˇŒ_out
 
	$P1
(
obje˘_t
 *, 
obj
)

505 
≥ndög_ˇŒ_t
 **
c›p
, *
c›
;

506 
i
;

508 
i
 = 0; i < 
CALLOUT_CYCLE_SIZE
; i++) {

509 
c›p
 = &
ˇŒ_li°
[
i
];

510 *
c›p
) {

511 i‡–((*
c›p
)->
ob
 &&

512 (((*
c›p
)->
ob
 =
obj
Ë|| ((*c›p)->ob->
Êags
 & 
O_DESTRUCTED
))) ||

513 (!(*
c›p
)->
ob
 &&

514 ((*
c›p
)->
fun˘i⁄
.
f
->
hdr
.
ow√r
 =
obj
 ||

515 !(*
c›p
)->
fun˘i⁄
.
f
->
hdr
.
ow√r
 ||

516 (*
c›p
)->
fun˘i⁄
.
f
->
hdr
.
ow√r
->
Êags
 & 
O_DESTRUCTED
)) )

518 
c›
 = *
c›p
;

519 i‡(
c›
->
√xt
)

520 
c›
->
√xt
->
dñè
 += cop->delta;

521 *
c›p
 = 
c›
->
√xt
;

522 
	`‰ì_ˇŒ
(
c›
);

524 
c›p
 = &(*c›p)->
√xt
;

527 
	}
}

529 
	$ª˛aim_ˇŒ_outs
() {

530 
≥ndög_ˇŒ_t
 *
c›
;

531 
i
;

533 
	`ªmove_Æl_ˇŒ_out
(0);

535 #ifde‡
THIS_PLAYER_IN_CALL_OUT


536 
i
 = 0; i < 
CALLOUT_CYCLE_SIZE
; i++) {

537 
c›
 = 
ˇŒ_li°
[
i
];

538 
c›
) {

539 i‡(
c›
->
comm™d_givî
 && (c›->comm™d_givî->
Êags
 & 
O_DESTRUCTED
)) {

540 
	`‰ì_obje˘
(
c›
->
comm™d_givî
, "reclaim_call_outs");

541 
c›
->
comm™d_givî
 = 0;

543 
c›
 = c›->
√xt
;

547 
	}
}

	@call_out.h

1 #i‚de‡
CALL_OUT_H


2 
	#CALL_OUT_H


	)

4 
	~"Õc_ö˛.h
"

9 
ˇŒ_out
 
PROT
(());

10 
ª˛aim_ˇŒ_outs
 
PROT
(());

11 #ifde‡
CALLOUT_HANDLES


12 
föd_ˇŒ_out_by_h™dÀ
 
PROT
(());

13 
ªmove_ˇŒ_out_by_h™dÀ
 
PROT
(());

14 
√w_ˇŒ_out
 
PROT
((
obje˘_t
 *, 
svÆue_t
 *, , , svalue_t *));

16 
√w_ˇŒ_out
 
PROT
((
obje˘_t
 *, 
svÆue_t
 *, , , svalue_t *));

18 
ªmove_ˇŒ_out
 
PROT
((
obje˘_t
 *, *));

19 
ªmove_Æl_ˇŒ_out
 
PROT
((
obje˘_t
 *));

20 
föd_ˇŒ_out
 
PROT
((
obje˘_t
 *, *));

21 
¨øy_t
 *
gë_Æl_ˇŒ_outs
 
PROT
(());

22 
¥öt_ˇŒ_out_ußge
 
PROT
((
outbuf„r_t
 *, ));

23 
m¨k_ˇŒ_outs
 
PROT
(());

24 
ª˛aim_ˇŒ_outs
 
PROT
(());

	@cc.h

2 
	#COMPILER
 "gcc"

	)

3 
	#OPTIMIZE
 "-O2 -f°ªngth-ªdu˚"

	)

4 
	#CFLAGS
 "-D__USE_FIXED_PROTOTYPES__ -rdy«mi¯-O2 -f°ªngth-ªdu˚"

	)

5 
	#OBJDIR
 "obj"

	)

	@ccode.c

4 
	~"°d.h
"

6 #ifde‡
LPC_TO_C


7 
	~"Õc_ö˛.h
"

8 
	~"ccode.h
"

9 
	~"compûî.h
"

10 
	~"gíî©e.h
"

12 
	#f_out
 
compû©i⁄_ouçut_fûe


	)

14 
	gcuºít_num_vÆues
;

15 
	gswôch_ty≥
, 
	g°rög_swôches
, 
	gønge_swôches
;

16 
	gˇtch_numbî
, 
	gnum_fun˘i⁄Æs
;

17 
	gˇ£_numbî
, 
	gˇ£_èbÀ_size
;

19 
	gf‹óch_dïth
 = 0;

21 *
	gf‹w¨d_bønch_±r
;

22 
	gf‹w¨d_bønch_°ack
[100];

24 
	gœbñ
;

25 
	gnŸªached
;

26 
	gcuºít_block
;

28 
∑r£_node_t
 *
	gbønch_li°
[2];

30 
c_gíî©e_f‹w¨d_bønch
 
PROT
(());

31 
c_upd©e_f‹w¨d_bønch_löks
 
PROT
((, 
∑r£_node_t
 *));

32 
c_bønch_backw¨ds
 
PROT
((, ));

33 
c_upd©e_f‹w¨d_bønch
 
PROT
(());

34 
c_upd©e_bønch_li°
 
PROT
((
∑r£_node_t
 *));

35 
c_gíî©e_lo›
 
PROT
((, 
∑r£_node_t
 *,Öarse_node_t *,

36 
∑r£_node_t
 *));

37 
c_gíî©e_ñ£
 
PROT
(());

39 
	#CURRENT_BLOCK_SIZE
 (
¥og_code
 - 
mem_block
[
cuºít_block
].
block
)

	)

40 
	#UPDATE_BLOCK_SIZE
 
mem_block
[
cuºít_block
].
cuºít_size
 = 
CURRENT_BLOCK_SIZE


	)

42 
	#swôch_to_block
(
x
) { \

43 
UPDATE_BLOCK_SIZE
; \

44 
¥og_code
 = 
mem_block
[
x
].
block
 + mem_block[x].
cuºít_size
; \

45 
¥og_code_max
 = 
mem_block
[
x
].
block
 + mem_block[x].
max_size
; \

46 
cuºít_block
 = 
x
; \

47 }

	)

49 
	sswôch_èbÀ_s
 {

50 
swôch_èbÀ_s
 *
	m√xt
;

51 
	mköd
;

52 
	mnum_ˇ£s
;

53 
	md©a
[1];

54 } 
	tswôch_èbÀ_t
;

56 
swôch_èbÀ_t
 *
	gswôch_èbÀs
;

58 *
add_swôch_èbÀ
 
	$P2
(, 
köd
, , 
num_ˇ£s
) {

59 
swôch_èbÀ_t
 *
°
;

60 
swôch_èbÀ_t
 **
°p
;

62 
°
 = (
swôch_èbÀ_t
 *)
	`DXALLOC
((swôch_èbÀ_tË+ (2*
num_ˇ£s
 - 1Ë* (), 
TAG_COMPILER
, "switch_table");

63 
°
->
√xt
 = 0;

64 
°
->
köd
 = kind;

65 
°
->
num_ˇ£s
 =Çum_cases;

67 
°p
 = &
swôch_èbÀs
;

68 *
°p
)

69 
°p
 = &((*°p)->
√xt
);

70 *
°p
 = 
°
;

72  &
°
->
d©a
[0];

73 
	}
}

75 
upd_jump
 
	$P2
(, 
addr
, , 
œbñ
) {

76 *
p
;

78 i‡(!
addr
) ;

79 
p
 = 
mem_block
[
cuºít_block
].
block
 + 
addr
 + 10;

81 *
p
++ = 
œbñ
/100 + '0';

82 *
p
++ = (
œbñ
/10) % 10 + '0';

83 *
p
++ = 
œbñ
 % 10 + '0';

84 
	}
}

86 
add_œbñ
 
PROT
(()) {

87 i‡(
	g¥og_code
 + 12 > 
	g¥og_code_max
) {

88 
mem_block_t
 *
	gmbp
 = &
mem_block
[
cuºít_block
];

90 
	gUPDATE_BLOCK_SIZE
;

91 
ªÆloc_mem_block
(
mbp
);

93 
	g¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

94 
	g¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

97 
	gnŸªached
 = 0;

99 
•rötf
(
¥og_code
, "œbñ%03i:;\n", 
œbñ
);

100 
	g¥og_code
 += 11;

101  
	gœbñ
++;

104 
ös_°rög
 
	$P1
(*, 
s
) {

105 
l
 = 
	`°æí
(
s
);

107 i‡(
nŸªached
) ;

108 i‡(
¥og_code
 + 
l
 + 1 > 
¥og_code_max
) {

109 
mem_block_t
 *
mbp
 = &
mem_block
[
cuºít_block
];

111 
UPDATE_BLOCK_SIZE
;

112 
	`ªÆloc_mem_block
(
mbp
);

114 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

115 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

118 
	`°r˝y
(
¥og_code
, 
s
);

119 
¥og_code
 +
l
;

120 
	}
}

122 
ös_v°rög
 
	$P1V
(*, 
f‹m©
)

124 
va_li°
 
¨gs
;

125 
buf
[1024];

126 
	`V_DCL
(*
f‹m©
);

128 
	`V_START
(
¨gs
, 
f‹m©
);

129 
	`V_VAR
(*, 
f‹m©
, 
¨gs
);

130 
	`v•rötf
(
buf
, 
f‹m©
, 
¨gs
);

131 
	`va_íd
(
¨gs
);

133 
	`ös_°rög
(
buf
);

134 
	}
}

136 
ös_jump
 
PROT
(()) {

137 
	gªt
 = 
CURRENT_BLOCK_SIZE
;

139 i‡(
	gnŸªached
)  0;

140 
ös_°rög
("gotoÜabel???;\n");

141 
	gnŸªached
 = 1;

142  
	gªt
;

146 
gíî©e_ex¥_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

147 
∑r£_node_t
 *
≤
;

148 
n
, 
Êag
;

150 i‡(!
ex¥
) ;

151 
≤
 = 
ex¥
;

152 
Êag
 = 
n
 = 0;

154 i‡(
≤
->
ty≥
 & 1Ë
Êag
 = 1;

155 
	`c_gíî©e_node
(
≤
->
v
.
ex¥
);

156 } (
≤
 =Ön->
r
.
ex¥
));

158 i‡(
Êag
) {

159 
≤
 = 
ex¥
;

161 
n
--;

162 i‡(
≤
->
ty≥
 & 1)

163 
	`ös_v°rög
("c_ex∑nd_v¨¨gs(%i);\n", 
n
);

164 } (
≤
 =Ön->
r
.
ex¥
));

166 
	}
}

169 
gíî©e_lvÆue_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

170 (
ex¥
 =Éx¥->
r
.expr)) {

171 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

172 
	`ös_°rög
("c_void_assign();\n");

174 
	}
}

177 
f_quŸed_°rög
 
	$P2
(
FILE
 *, 
f
, *, 
s
) {

179 *
s
) {

182 
	`Âuts
("\\n", 
f
);

183 
s
++;

186 
	`Âuts
("\\t", 
f
);

187 
s
++;

190 
	`Âuts
("\\r", 
f
);

191 
s
++;

194 
	`Âuts
("\\b", 
f
);

195 
s
++;

198 
	`Âuts
("\\\"", 
f
);

199 
s
++;

202 
	`Âuts
("\\\\", 
f
);

203 
s
++;

206 
	`Âutc
(*
s
++, 
f
);

209 
	}
}

212 
c_gíî©e_node
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

213 i‡(!
ex¥
) ;

215 
ex¥
->
köd
) {

216 
NODE_FUNCTION
:

218 
num
;

220 
num
 = 
	`FUNCTION_TEMP
(
ex¥
->
v
.
numbî
)->
u
.
ödex
;

221 
	`FUNC
(
num
)->
addªss
 = 
	`gíî©e_fun˘i⁄
(FUNC(num),

222 
ex¥
->
r
.ex¥,Éx¥->
l
.
numbî
);

225 
NODE_TERNARY_OP
:

226 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

227 
ex¥
 =Éx¥->
r
.expr;

228 
NODE_BINARY_OP
:

229 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

231 
NODE_UNARY_OP
:

232 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

234 
NODE_OPCODE
:

235 
	`ös_°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
);

237 
NODE_TERNARY_OP_1
:

238 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

239 
ex¥
 =Éx¥->
r
.expr;

241 
NODE_BINARY_OP_1
:

242 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

243 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

244 
	`ös_v°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
,Éx¥->
ty≥
);

246 
NODE_UNARY_OP_1
:

247 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

249 
NODE_OPCODE_1
:

250 
	`ös_v°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
,Éx¥->
l
.number);

252 
NODE_OPCODE_2
:

253 
	`ös_v°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
,Éx¥->
l
.numbî,Éx¥->
r
.number);

255 
NODE_RETURN
:

257 
n
 = 
f‹óch_dïth
;

258 
n
--)

259 
	`ös_°rög
("c_exit_foreach();\n");

260 i‡(
ex¥
->
r
.expr) {

261 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

262 
	`ös_°rög
(
ö°rs
[
F_RETURN
].
routöe
);

263 } 
	`ös_°rög
(
ö°rs
[
F_RETURN_ZERO
].
routöe
);

264 
nŸªached
 = 1;

267 
NODE_STRING
:

268 
	`ös_v°rög
("C_STRING(%i);\n", 
ex¥
->
v
.
numbî
);

270 
NODE_REAL
:

271 
	`ös_v°rög
("push_ªÆ(%f);\n", 
ex¥
->
v
.
ªÆ
);

273 
NODE_NUMBER
:

274 
	`ös_v°rög
("push_numbî(%i);\n", 
ex¥
->
v
.
numbî
);

276 
NODE_LAND_LOR
:

277 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

278 
	`c_gíî©e_f‹w¨d_bønch
(
ex¥
->
v
.
numbî
);

279 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

280 i‡(
ex¥
->
l
.ex¥->
köd
 =
NODE_BRANCH_LINK
) {

281 
	`c_upd©e_f‹w¨d_bønch_löks
(
ex¥
->
v
.
numbî
,ex¥->
l
.expr);

283 
	`c_upd©e_f‹w¨d_bønch
();

285 
NODE_BRANCH_LINK
:

286 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

287 
	`ös_°rög
("BRANCH_LINK(?, ");

288 
ex¥
->
v
.
numbî
 = 
	`ös_jump
();

289 
¥og_code
 -= 2;

290 
nŸªached
 = 0;

291 
	`ös_°rög
(");\n");

292 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

294 
NODE_CALL_2
:

295 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

296 
	`ös_v°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
,Éx¥->
l
.number >> 16,

297 
ex¥
->
l
.
numbî
 & 0xffff,

298 (
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0));

300 
NODE_CALL_1
:

301 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

302 i‡(
ex¥
->
v
.
numbî
 =
F_CALL_FUNCTION_BY_ADDRESS
){

303 
ex¥
->
l
.
numbî
 = 
comp_def_ödex_m≠
[expr->l.number];

305 
	`ös_v°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
,Éx¥->
l
.number,

306 (
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0));

308 
NODE_CALL
:

309 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

310 
	`ös_v°rög
(
ö°rs
[
ex¥
->
v
.
numbî
].
routöe
,Éx¥->
l
.number);

312 
NODE_TWO_VALUES
:

313 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

314 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

316 
NODE_CONTROL_JUMP
:

318 
köd
 = 
ex¥
->
v
.
numbî
;

320 i‡(
köd
 =
CJ_BREAK_SWITCH
) {

321 
	`ös_°rög
("break;\n");

324 
ex¥
->
v
.ex¥ = 
bønch_li°
[
köd
];

325 
ex¥
->
l
.
numbî
 = 
	`ös_jump
();

326 
bønch_li°
[
köd
] = 
ex¥
;

329 
NODE_PARAMETER
:

330 
	`ös_v°rög
("C_LOCAL(%i);\n", 
ex¥
->
v
.
numbî
 + 
cuºít_num_vÆues
);

332 
NODE_PARAMETER_LVALUE
:

333 
	`ös_v°rög
("C_LVALUE(fp + %i);\n",

334 
ex¥
->
v
.
numbî
 + 
cuºít_num_vÆues
);

336 
NODE_IF
:

337 i‡(
	`IS_NODE
(
ex¥
->
v
.ex¥, 
NODE_UNARY_OP
, 
F_NOT
)) {

338 
	`c_gíî©e_node
(
ex¥
->
v
.ex¥->
r
.expr);

339 
	`c_gíî©e_f‹w¨d_bønch
(
F_BRANCH_WHEN_NON_ZERO
);

341 
	`c_gíî©e_node
(
ex¥
->
v
.expr);

342 
	`c_gíî©e_f‹w¨d_bønch
(
F_BRANCH_WHEN_ZERO
);

344 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

345 i‡(
ex¥
->
r
.expr) {

346 
	`c_gíî©e_ñ£
();

347 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

349 
	`c_upd©e_f‹w¨d_bønch
();

351 
NODE_LOOP
:

352 
	`c_gíî©e_lo›
(
ex¥
->
ty≥
,Éx¥->
v
.ex¥,Éx¥->
l
.ex¥,Éx¥->
r
.expr);

354 
NODE_FOREACH
:

356 
tmp
 = 0;

358 
	`c_gíî©e_node
(
ex¥
->
v
.expr);

359 i‡(
ex¥
->
l
.ex¥->
v
.
numbî
 =
F_GLOBAL_LVALUE
Ë
tmp
 |= 1;

360 i‡(
ex¥
->
r
.expr) {

361 
tmp
 |= 4;

362 i‡(
ex¥
->
r
.ex¥->
v
.
numbî
 =
F_GLOBAL_LVALUE
Ë
tmp
 |= 2;

363 
	`ös_v°rög
("c_f‹óch(%i, %i, %i);\n", 
tmp
, 
ex¥
->
l
.ex¥->l.
numbî
,Éx¥->
r
.expr->l.number);

365 
	`ös_v°rög
("c_f‹óch(%i, 0, %i);\n", 
tmp
, 
ex¥
->
l
.ex¥->l.
numbî
);

368 
NODE_CASE_NUMBER
:

369 
ˇ£_èbÀ_size
++;

370 
nŸªached
 = 0;

371 i‡(
swôch_ty≥
 =
NODE_SWITCH_RANGES
) {

372 
	`ös_v°rög
("ˇ£ %i:;\n", 
ˇ£_numbî
);

373 i‡(
ex¥
->
v
.expr) {

374 
∑r£_node_t
 *
Ÿhî
 = 
ex¥
->
v
.expr;

375 
ˇ£_èbÀ_size
++;

376 
ex¥
->
v
.
numbî
 = -1;

377 
Ÿhî
->
l
.
ex¥
 =Éxpr->l.expr;

378 
Ÿhî
->
v
.
numbî
 = 
ˇ£_numbî
++;

379 
ex¥
->
l
.ex¥ = 
Ÿhî
;

381 
ex¥
->
v
.
numbî
 = 
ˇ£_numbî
++;

383 } 
	`ös_v°rög
("ˇ£ %i:;\n", 
ex¥
->
r
.
numbî
);

385 
NODE_CASE_STRING
:

386 
nŸªached
 = 0;

387 
ˇ£_èbÀ_size
++;

388 
ex¥
->
v
.
numbî
 = 
ˇ£_numbî
;

389 
	`ös_v°rög
("ˇ£ %i:;\n", 
ˇ£_numbî
++);

391 
NODE_DEFAULT
:

392 
nŸªached
 = 0;

393 
	`ös_°rög
("default:;\n");

395 
NODE_SWITCH_STRINGS
:

396 
NODE_SWITCH_NUMBERS
:

397 
NODE_SWITCH_RANGES
:

398 
NODE_SWITCH_DIRECT
:

400 
posôi⁄
;

401 
∑r£_node_t
 *
≤
;

402 
ßve_swôch_ty≥
 = 
swôch_ty≥
;

403 
ßve_ˇ£_numbî
 = 
ˇ£_numbî
;

404 
ßve_ˇ£_èbÀ_size
 = 
ˇ£_èbÀ_size
;

405 *
p
, *
°abÀ
;

407 
swôch_ty≥
 = 
ex¥
->
köd
;

408 
ˇ£_numbî
 = 0;

409 
ˇ£_èbÀ_size
 = 0;

410 
posôi⁄
 = 0;

412 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

414 
swôch_ty≥
) {

415 
NODE_SWITCH_STRINGS
:

416 
	`ös_v°rög
("Õc_öàc_°rög_swôch_lookup(•, såög_swôch_èbÀ_%s_%02i, ", 
compû©i⁄_idít
, 
°rög_swôches
++);

417 
posôi⁄
 = 
¥og_code
 - 
mem_block
[
cuºít_block
].
block
;

418 
	`ös_°rög
("xxx);\nfree_string_svalue(sp--);\n");

420 
NODE_SWITCH_DIRECT
:

421 
NODE_SWITCH_NUMBERS
:

422 
	`ös_°rög
("lpc_int = (sp--)->u.number;\n");

424 
NODE_SWITCH_RANGES
:

425 
	`ös_v°rög
("Õc_öàc_ønge_swôch_lookup((•--)->u.numbî,Ñ™ge_swôch_èbÀ_%s_%02i, ", 
compû©i⁄_idít
, 
ønge_swôches
++);

426 
posôi⁄
 = 
¥og_code
 - 
mem_block
[
cuºít_block
].
block
;

427 
	`ös_°rög
("xxx);\n");

430 
	`ös_°rög
("switch (lpc_int) {\n");

431 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

432 
nŸªached
 = 0;

433 
	`ös_°rög
("}\n");

435 i‡(
swôch_ty≥
 =
NODE_SWITCH_STRINGS
 || swôch_ty≥ =
NODE_SWITCH_RANGES
) {

436 
°abÀ
 = 
p
 = 
	`add_swôch_èbÀ
(
swôch_ty≥
, 
ˇ£_èbÀ_size
);

437 
≤
 = 
ex¥
->
v
.expr;

438 
≤
) {

439 i‡(
≤
->
köd
 !
NODE_DEFAULT
) {

440 *
p
++ = 
≤
->
r
.
numbî
;

441 *
p
++ = 
≤
->
v
.
numbî
;

443 
≤
 =Ön->
l
.
ex¥
;

445 
	`DEBUG_CHECK
(
p
 - 
°abÀ
 !
ˇ£_èbÀ_size
 * 2,

449 i‡(
posôi⁄
) {

450 
	`•rötf
(
mem_block
[
cuºít_block
].
block
 + 
posôi⁄
,

451 "%3i", 
ˇ£_èbÀ_size
);

453 
mem_block
[
cuºít_block
].
block
[
posôi⁄
 + 3] = ')';

456 
swôch_ty≥
 = 
ßve_swôch_ty≥
;

457 
ˇ£_numbî
 = 
ßve_ˇ£_numbî
;

458 
ˇ£_èbÀ_size
 = 
ßve_ˇ£_èbÀ_size
;

461 
NODE_CATCH
:

463 
	`ös_v°rög
("{Érror_context_tÉcon%02i;\nc_prepare_catch(&econ%02i);\nif (SETJMP(econ%02i.context)) {\nc_caught_error(&econ%02i);\n}Élse {\n",

464 
ˇtch_numbî
, catch_number, catch_number, catch_number);

465 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

466 
	`ös_v°rög
("c_íd_ˇtch(&ec⁄%02i);\n}\n}\n", 
ˇtch_numbî
++);

469 
NODE_TIME_EXPRESSION
:

471 
	`ös_°rög
("{ int start_sec,start_usec,end_sec,end_usec;\nget_usec_clock(&start_sec,&start_usec);\n");

472 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

473 
	`ös_°rög
("get_usec_clock(&end_sec,&end_usec);\nend_usec=(end_sec - start_sec) * 1000000 +Énd_usec - start_usec;\npush_number(end_usec);\n}\n");

476 
NODE_LVALUE_EFUN
:

477 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

478 
	`gíî©e_lvÆue_li°
(
ex¥
->
r
.expr);

480 
NODE_FUNCTION_CONSTRUCTOR
:

481 i‡(
ex¥
->
r
.expr) {

482 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

483 
	`ös_v°rög
("C_AGGREGATE(%i);\n", 
ex¥
->
r
.ex¥->
köd
);

485 
	`ös_°rög
("push_number(0);\n");

487 
ex¥
->
v
.
numbî
 & 0xff) {

488 
FP_SIMUL
:

489 
	`ös_v°rög
("c_function_constructor(%i, %i);\n",

490 
ex¥
->
v
.
numbî
 & 0xff,Éxpr->v.number >> 8);

492 
FP_LOCAL
:

493 
	`ös_v°rög
("c_function_constructor(%i, %i);\n",

494 
ex¥
->
v
.
numbî
 & 0xff, 
comp_def_ödex_m≠
[expr->v.number >> 8]);

496 
FP_EFUN
:

497 
	`ös_v°rög
("c_function_constructor(%i, %i);\n",

498 
ex¥
->
v
.
numbî
 & 0xff, 
¥edefs
[ex¥->v.numbî >> 8].
tokí
);

500 
FP_FUNCTIONAL
:

501 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

503 
ßve_cuºít_num_vÆues
 = 
cuºít_num_vÆues
;

504 
ßve_cuºít_block
 = 
cuºít_block
;

506 
	`ös_v°rög
("c_functional(%i, %i, (POINTER_INT)LPCFUNCTIONAL_%03i);\n",

507 
ex¥
->
v
.
numbî
 & 0xff,Éx¥->v.numbî >> 8, 
num_fun˘i⁄Æs
);

508 
cuºít_num_vÆues
 = 
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0;

509 
	`swôch_to_block
(
A_FUNCTIONALS
);

510 
	`ös_v°rög
("°©i¯void LPCFUNCTIONAL_%03òPROT((void)Ë{\n", 
num_fun˘i⁄Æs
++);

511 
	`c_gíî©e_node
(
ex¥
->
l
.expr);

512 
	`ös_v°rög
("c_return();\n}\n\n");

513 
	`swôch_to_block
(
ßve_cuºít_block
);

514 
cuºít_num_vÆues
 = 
ßve_cuºít_num_vÆues
;

519 
NODE_ANON_FUNC
:

521 
ßve_fd
 = 
f‹óch_dïth
;

522 
ßve_cuºít_block
 = 
cuºít_block
;

523 
ßve_nŸªached
 = 
nŸªached
;

525 
f‹óch_dïth
 = 0;

526 
	`ös_v°rög
("c_anonymous(%i, %i, (POINTER_INT)LPCFUNCTIONAL_%03i);\n",

527 
ex¥
->
v
.
numbî
,Éx¥->
l
.numbî, 
num_fun˘i⁄Æs
);

528 
	`swôch_to_block
(
A_FUNCTIONALS
);

529 
	`ös_v°rög
("void LPCFUNCTIONAL_%03òPROT((void)Ë{\n", 
num_fun˘i⁄Æs
++);

530 
	`c_gíî©e_node
(
ex¥
->
r
.expr);

531 
nŸªached
 = 0;

532 
	`ös_°rög
("\n}\n\n");

533 
	`swôch_to_block
(
ßve_cuºít_block
);

534 
f‹óch_dïth
 = 
ßve_fd
;

535 
nŸªached
 = 
ßve_nŸªached
;

538 
NODE_EFUN
:

540 
∑r£_node_t
 *
node
 = 
ex¥
->
r
.expr;

541 
num_¨g
 = 
ex¥
->
l
.
numbî
;

542 
novÆue_u£d
 = 
ex¥
->
v
.
numbî
 & 
NOVALUE_USED_FLAG
;

543 
f
 = 
ex¥
->
v
.
numbî
 & ~
NOVALUE_USED_FLAG
;

544 
idx
 = 1;

546 
	`gíî©e_ex¥_li°
(
node
);

547 
node
) {

548 i‡(
idx
 == 5) ;

549 
	`ös_v°rög
("CHECK_TYPES(sp - %i, %i, %i, %i);\n",

550 
num_¨g
 - 
idx
, 
ö°rs
[
f
].
ty≥
[idx - 1],

551 
idx
, 
f
);

552 
idx
++;

553 
node
 =Çode->
r
.
ex¥
;

555 i‡(
ö°rs
[
f
].
max_¨g
 == -1) {

556 
	`ös_v°rög
("°_num_¨g = %ò+Çum_v¨¨gs;\¬um_v¨¨g†0;\n", 
num_¨g
);

558 
	`ös_v°rög
("°_num_¨g = %i;\n", 
num_¨g
);

560 
	`ös_v°rög
("f_%s();\n", 
ö°rs
[
f
].
«me
);

561 i‡(
novÆue_u£d
) {

563 
	`ös_°rög
("push_number(0);\n");

568 
	`Áèl
("Unknow¿nodê%òö c_gíî©e_node.\n", 
ex¥
->
köd
);

570 
	}
}

572 
c_gíî©e_lo›
 
	$P4
(, 
ã°_fú°
, 
∑r£_node_t
 *, 
block
,

573 
∑r£_node_t
 *, 
öc
,Ö¨£_node_à*, 
ã°
) {

574 
∑r£_node_t
 *
ßve_bªaks
 = 
bønch_li°
[
CJ_BREAK
];

575 
∑r£_node_t
 *
ßve_c⁄töues
 = 
bønch_li°
[
CJ_CONTINUE
];

576 
f‹evî
 = 
	`node_Æways_åue
(
ã°
);

577 
pos
;

579 i‡(
ã°_fú°
 =2Ë
f‹óch_dïth
++;

580 
bønch_li°
[
CJ_BREAK
] = bønch_li°[
CJ_CONTINUE
] = 0;

581 i‡(!
f‹evî
 && 
ã°_fú°
)

582 
	`c_gíî©e_f‹w¨d_bønch
(
F_BRANCH
);

583 
pos
 = 
	`add_œbñ
();

584 
	`c_gíî©e_node
(
block
);

585 
	`c_upd©e_bønch_li°
(
bønch_li°
[
CJ_CONTINUE
]);

586 i‡(
öc
Ë
	`c_gíî©e_node
(inc);

587 i‡(!
f‹evî
 && 
ã°_fú°
)

588 
	`c_upd©e_f‹w¨d_bønch
();

589 i‡(
ã°
 && (ã°->
v
.
numbî
 =
F_LOOP_COND_LOCAL
 ||

590 
ã°
->
v
.
numbî
 =
F_LOOP_COND_NUMBER
)) {

591 
	`c_gíî©e_node
(
ã°
);

592 
	`ös_v°rög
("gŸÿœbñ%03i;\n", 
pos
);

594 i‡(
ã°_fú°
 == 2)

595 
	`ös_v°rög
("i‡(c_√xt_f‹óch())\ngŸÿœbñ%03i;\n", 
pos
);

597 
	`c_bønch_backw¨ds
(
	`gíî©e_c⁄dôi⁄Æ_bønch
(
ã°
), 
pos
);

599 
	`c_upd©e_bønch_li°
(
bønch_li°
[
CJ_BREAK
]);

600 
bønch_li°
[
CJ_BREAK
] = 
ßve_bªaks
;

601 
bønch_li°
[
CJ_CONTINUE
] = 
ßve_c⁄töues
;

602 i‡(
ã°_fú°
 =2Ë
f‹óch_dïth
--;

603 
	}
}

606 
c_gíî©e_öhîôed_öô_ˇŒ
 
	$P2
(, 
ödex
, , 
f
) {

607 
	`ös_v°rög
("c_ˇŒ_öhîôed(%i, %i, 0);\≈›_°ack();\n", 
ödex
, ()
f
);

608 
	}
}

610 
c_°¨t_fun˘i⁄
 
	$P1
(*, 
‚ame
) {

611 
nŸªached
 = 0;

612 i‡(
‚ame
[0] =
APPLY___INIT_SPECIAL_CHAR
)

613 
	`ös_v°rög
("static void LPC_%s__LPCinit() {\n",

614 
compû©i⁄_idít
);

616 
	`ös_v°rög
("°©i¯void LPC_%s__%s(Ë{\n", 
compû©i⁄_idít
, 
‚ame
);

617 
	}
}

619 
	$c_íd_fun˘i⁄
() {

620 
nŸªached
 = 0;

621 
	`ös_°rög
("}\n\n");

622 
	}
}

624 
	$c_gíî©e___INIT
() {

625 
	}
}

627 
c_gíî©e_f‹w¨d_bønch
 
	$P1
(, 
b
) {

628 
b
) {

629 
F_LAND
:

630 
	`ös_°rög
("C_LAND(");

632 
F_LOR
:

633 
	`ös_°rög
("C_LOR(");

635 
F_BRANCH_WHEN_NON_ZERO
:

636 
	`ös_°rög
("C_BRANCH_WHEN_NON_ZERO(");

638 
F_BRANCH_WHEN_ZERO
:

639 
	`ös_°rög
("C_BRANCH_WHEN_ZERO(");

641 
F_BRANCH
:

642 *
f‹w¨d_bønch_±r
++ = 
	`ös_jump
();

647 
	`Áèl
("Unknow¿›codê%òö gíî©e_f‹w¨d_bønch\n", ()
b
);

649 *
f‹w¨d_bønch_±r
++ = 
	`ös_jump
();

650 
¥og_code
 -= 2;

651 
nŸªached
 = 0;

652 
	`ös_°rög
(");\n");

653 
	}
}

656 
	$c_upd©e_f‹w¨d_bønch
() {

657 
i
 = *--
f‹w¨d_bønch_±r
;

659 
	`upd_jump
(
i
, 
œbñ
);

660 
	`add_œbñ
();

661 
	}
}

663 
c_upd©e_f‹w¨d_bønch_löks
 
	$P2
(, 
köd
, 
∑r£_node_t
 *, 
lök_°¨t
) {

664 
i
 = *--
f‹w¨d_bønch_±r
;

665 
our_œbñ
;

666 *
p
;

668 
	`upd_jump
(
i
, 
our_œbñ
 = 
	`add_œbñ
());

670 
i
 = 
lök_°¨t
->
v
.
numbî
;

671 
p
 = 
mem_block
[
cuºít_block
].
block
 + 
i
 - 3;

672 i‡(
köd
 =
F_LOR
)

673 *
p
 = '!';

675 *
p
 = ' ';

677 
	`upd_jump
(
i
, 
our_œbñ
);

678 
lök_°¨t
 =Üök_°¨t->
l
.
ex¥
;

679 } 
lök_°¨t
->
köd
 =
NODE_BRANCH_LINK
);

680 
	}
}

683 
c_bønch_backw¨ds
 
	$P2
(, 
b
, , 
addr
) {

684 
b
) {

685 
F_BBRANCH_WHEN_ZERO
:

686 
	`ös_v°rög
("C_BRANCH_WHEN_ZERO(gŸÿœbñ%03i);\n", 
addr
);

688 
F_BBRANCH_WHEN_NON_ZERO
:

689 
	`ös_v°rög
("C_BRANCH_WHEN_NON_ZERO(gŸÿœbñ%03i);\n", 
addr
);

691 
F_BBRANCH
:

692 
	`ös_v°rög
("gŸÿœbñ%03i;\n", 
addr
);

693 
nŸªached
 = 1;

695 
F_BBRANCH_LT
:

696 
	`ös_v°rög
("C_BBRANCH_LT(gŸÿœbñ%03i);\n", 
addr
);

698 
F_WHILE_DEC
:

699 
	`ös_v°rög
("gŸÿœbñ%03i;\n", 
addr
);

701 
	}
}

704 
c_upd©e_bønch_li°
 
	$P1
(
∑r£_node_t
 *, 
bl
) {

705 i‡(
bl
) {

707 
	`upd_jump
(
bl
->
l
.
numbî
, 
œbñ
);

708 } (
bl
 = bl->
v
.
ex¥
));

709 
	`add_œbñ
();

711 
	}
}

714 
	$c_gíî©e_ñ£
() {

715 
tmp
 = 
	`ös_jump
();

717 
	`upd_jump
(
f‹w¨d_bønch_±r
[-1], 
œbñ
);

718 
	`add_œbñ
();

719 
f‹w¨d_bønch_±r
[-1] = 
tmp
;

720 
	}
}

723 
	$c_öôülize_∑r£r
() {

724 
bønch_li°
[
CJ_BREAK
] = 0;

725 
bønch_li°
[
CJ_CONTINUE
] = 0;

726 
f‹w¨d_bønch_±r
 = &
f‹w¨d_bønch_°ack
[0];

727 
f‹óch_dïth
 = 0;

729 
cuºít_block
 = 
A_PROGRAM
;

730 
¥og_code
 = 
mem_block
[
A_PROGRAM
].
block
;

731 
¥og_code_max
 = 
mem_block
[
A_PROGRAM
].
block
 + mem_block[A_PROGRAM].
max_size
;

733 
num_fun˘i⁄Æs
 = 
ˇtch_numbî
 = 
°rög_swôches
 = 
ønge_swôches
 = 0;

734 
swôch_èbÀs
 = 0;

735 
œbñ
 = 0;

736 
nŸªached
 = 0;

737 
	}
}

740 
	$c_unöôülize_∑r£r
() {

741 
	}
}

744 *
	g¥Ÿe˘_Æloˇãd_°rög
 = 0;

747 
¥Ÿe˘
 
	$P1
(*, 
°r
) {

748 
buf
[1024];

749 *
p
;

750 
size
 = 0;

752 i‡(
¥Ÿe˘_Æloˇãd_°rög
)

753 
	`FREE
(
¥Ÿe˘_Æloˇãd_°rög
);

755 
p
 = 
°r
;

756 *
p
) {

757 i‡(*
p
 ='"' || *∞='\\'Ë
size
 += 2;

758 
size
++;

759 
p
++;

762 i‡(
size
 < 1024) {

763 
p
 = 
buf
;

764 *
°r
) {

765 i‡(*
°r
 ='"' || *°∏='\\'Ë*
p
++ = '\\';

766 *
p
++ = *
°r
++;

768 *
p
 = 0;

769  
buf
;

771 
p
 = 
¥Ÿe˘_Æloˇãd_°rög
 = 
	`DXALLOC
(
size
 + 1, 
TAG_STRING
, "protect");

772 *
°r
) {

773 i‡(*
°r
 ='"' || *°∏='\\'Ë*
p
++ = '\\';

774 *
p
++ = *
°r
++;

776 *
p
++ = 0;

777  
¥Ÿe˘_Æloˇãd_°rög
;

779 
	}
}

783 
c_gíî©e_föÆ_¥ogøm
 
	$P1
(, 
x
) {

784 
swôch_èbÀ_t
 *
°
, *
√xt
;

785 
i
;

786 
ödex
 = 0;

787 
num_func
;

789 i‡(!
x
) {

790 i‡(
°rög_swôches
) {

791 
°
 = 
swôch_èbÀs
;

792 
°
) {

793 i‡(
°
->
köd
 =
NODE_SWITCH_STRINGS
) {

794 
	`Ârötf
(
f_out
, "°©i¯°rög_swôch_íåy_à°rög_swôch_èbÀ_%s_%02i[] = {\n", 
compû©i⁄_idít
, 
ödex
++);

795 
i
 = 0; i < 
°
->
num_ˇ£s
; i++) {

796 
	`Ârötf
(
f_out
, "{\"");

797 
	`f_quŸed_°rög
(
f_out
, 
	`PROG_STRING
(
°
->
d©a
[
i
*2]));

798 
	`Ârötf
(
f_out
, "\", %ò},\n", 
°
->
d©a
[
i
*2+1]);

800 
	`Ârötf
(
f_out
, "{ 0, 0 }\n};\n\n");

802 
°
 = st->
√xt
;

804 
	`Ârötf
(
f_out
, "static string_switch_entry_t *string_switch_tables[] = {\n");

805 
i
 = 0; i < 
ödex
; i++)

806 
	`Ârötf
(
f_out
, "°rög_swôch_èbÀ_%s_%02i,\n", 
compû©i⁄_idít
, 
i
);

807 
	`Ârötf
(
f_out
, "0\n};\n\n");

811 i‡(
ønge_swôches
) {

812 
ödex
 = 0;

813 
°
 = 
swôch_èbÀs
;

814 
°
) {

815 i‡(
°
->
köd
 =
NODE_SWITCH_RANGES
) {

816 
	`Ârötf
(
f_out
, "°©i¯ønge_swôch_íåy_àønge_swôch_èbÀ_%s_%02i[] = {\n", 
compû©i⁄_idít
, 
ödex
++);

817 
i
 = 0; i < 
°
->
num_ˇ£s
; i++) {

818 
	`Ârötf
(
f_out
, "{ %i, %i },\n",

819 
°
->
d©a
[
i
*2], st->data[i*2+1]);

821 
	`Ârötf
(
f_out
, "{ 0, -2 }\n};\n\n");

823 
°
 = st->
√xt
;

825 
	`Ârötf
(
f_out
, "°©i¯ønge_swôch_íåy_à*ønge_swôch_èbÀs_%s[] = {\n", 
compû©i⁄_idít
);

826 
i
 = 0; i < 
ödex
; i++)

827 
	`Ârötf
(
f_out
, "ønge_swôch_èbÀ_%s_%02i,\n", 
compû©i⁄_idít
, 
i
);

828 
	`Ârötf
(
f_out
, "};\n\n");

831 
°
 = 
swôch_èbÀs
;

832 
°
) {

833 
√xt
 = 
°
->next;

834 
	`FREE
((*)
°
);

835 
°
 = 
√xt
;

838 
	`fwrôe
(
mem_block
[
A_FUNCTIONALS
].
block
,

839 
mem_block
[
A_FUNCTIONALS
].
cuºít_size
, 1, 
f_out
);

841 
UPDATE_PROGRAM_SIZE
;

843 
	`fwrôe
(
mem_block
[
A_PROGRAM
].
block
,

844 
mem_block
[
A_PROGRAM
].
cuºít_size
, 1, 
f_out
);

846 
cuºít_block
 = 
A_PROGRAM
;

847 
¥og_code
 = 
mem_block
[
A_PROGRAM
].
block
;

849 
	`Ârötf
(
f_out
, "\n\nstatic void (*functions[])() = {\n");

851 
num_func
 = 
mem_block
[
A_FUNCTIONS
].
cuºít_size
/(
fun˘i⁄_t
);

853 
num_func
 &&

854 
	`FUNC
(
func_ödex_m≠
[
num_func
 - 1])->
addªss
 =
USHRT_MAX
)

855 
num_func
--;

857 
i
 = 0; i < 
num_func
; i++){

858 *
func_«me
 = 
	`FUNC
(
func_ödex_m≠
[
i
])->
«me
;

859 i‡(!
	`FUNC
(
func_ödex_m≠
[
i
])->
addªss
)

861 i‡(
func_«me
[0] =
APPLY___INIT_SPECIAL_CHAR
)

862 
	`Ârötf
(
f_out
, "LPC_%s__LPCöô,\n", 
compû©i⁄_idít
);

864 
	`Ârötf
(
f_out
, "LPC_%s__%s,\n", 
compû©i⁄_idít
,

865 
	`FUNC
(
func_ödex_m≠
[
i
])->
«me
);

867 
	`Ârötf
(
f_out
, "0\n};\n");

869 
buf
[1024];

870 
l
;

872 
	`°r˝y
(
buf
, 
cuºít_fûe
);

873 
l
 = 
	`°æí
(
cuºít_fûe
);

874 i‡(
buf
[
l
-1] == 'c' && buf[l-2] == '.')

875 
buf
[
l
-2] = 0;

876 
	`Ârötf
(
f_out
, "\ninterface_t LPCINFO_%s = {\n \"%s\",\n",

877 
compû©i⁄_idít
, 
buf
);

879 
	`Ârötf
(
f_out
, " functions,\n");

880 i‡(
°rög_swôches
)

881 
	`Ârötf
(
f_out
, " string_switch_tables\n};\n");

883 
	`Ârötf
(
f_out
, " 0\n};\n");

885 
	}
}

887 
c_™Æyze
 
	$P1
(
∑r£_node_t
 *, 
node
) {

889 
	}
}

	@ccode.h

1 #i‚de‡
CCODE_H


2 
	#CCODE_H


	)

5 
	~"åìs.h
"

7 
	~"¥ogøm.h
"

9 
c_°¨t_fun˘i⁄
 
PROT
((*));

10 
c_íd_fun˘i⁄
 
PROT
(());

12 
c_gíî©e_öhîôed_ˇŒ
 
PROT
((, ));

13 
c_gíî©e_föÆ_¥ogøm
 
PROT
(());

14 
c_gíî©e___INIT
 
PROT
(());

15 
c_öôülize_∑r£r
 
PROT
(());

16 
c_unöôülize_∑r£r
 
PROT
(());

17 
c_gíî©e_node
 
PROT
((
∑r£_node_t
 *));

18 
c_™Æyze
 
PROT
((
∑r£_node_t
 *));

19 
c_gíî©e_öhîôed_öô_ˇŒ
 
PROT
((, ));

	@cfuns.c

1 
	~"°d.h
"

3 #ifde‡
LPC_TO_C


4 
	~"cfuns.h
"

5 
	~"backíd.h
"

6 
	~"Õc_to_c.h
"

7 
	~"e›î©‹s.h
"

8 
	~"∑r£.h
"

9 
	~"qs‹t.h
"

11 
IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
);

14 
	gÕc_öt
;

15 
svÆue_t
 *
	gÕc_svp
;

16 
¨øy_t
 *
	gÕc_¨r
;

17 
m≠pög_t
 *
	gÕc_m≠
;

19 
svÆue_t
 *
	glvÆ
;

21 
c_√w_˛ass
 
	$P2
(, 
which
, , 
has_vÆues
) {

22 
¨øy_t
 *
˛
;

24 
˛
 = 
	`Æloˇã_˛ass
(&
cuºít_¥og
->
˛as£s
[
which
], 
has_vÆues
);

25 
	`push_ª„d_˛ass
(
˛
);

26 
	}
}

28 
c_membî
 
	$P1
(, 
idx
) {

29 
¨øy_t
 *
¨r
;

31 i‡(
•
->
ty≥
 !
T_CLASS
)

32 
	`îr‹
("TriedÅoÅakeá member of somethingÅhat isn'tá class.\n");

33 
¨r
 = 
•
->
u
.arr;

34 i‡(
idx
 >
¨r
->
size
Ë
	`îr‹
("Class hasÇo corresponding member.\n");

35 
	`assign_svÆue_no_‰ì
(
•
, &
¨r
->
ôem
[
idx
]);

36 
	`‰ì_˛ass
(
¨r
);

37 
	}
}

39 
c_membî_lvÆue
 
	$P1
(, 
idx
) {

40 
¨øy_t
 *
¨r
;

42 i‡(
•
->
ty≥
 !
T_CLASS
)

43 
	`îr‹
("TriedÅoÅakeá member of somethingÅhat isn'tá class.\n");

44 
¨r
 = 
•
->
u
.arr;

45 i‡(
idx
 >
¨r
->
size
Ë
	`îr‹
("Class hasÇo corresponding member.\n");

46 
•
->
ty≥
 = 
T_LVALUE
;

47 
•
->
u
.
lvÆue
 = 
¨r
->
ôem
 + 
idx
;

48 
	`‰ì_˛ass
(
¨r
);

49 
	}
}

51 
	$c_ªtu∫
() {

52 
svÆue_t
 
sv
;

54 
sv
 = *
•
--;

55 
	`p›_n_ñems
(
c•
->
num_loˇl_v¨übÀs
);

56 
•
++;

57 
	`DEBUG_CHECK
(
•
 !
Â
, "Bad stackát c_return\n");

58 *
•
 =
sv
;

59 
	`p›_c⁄åﬁ_°ack
();

60 
	}
}

62 
	$c_ªtu∫_zîo
() {

63 
	`p›_n_ñems
(
c•
->
num_loˇl_v¨übÀs
);

64 
•
++;

65 
	`DEBUG_CHECK
(
•
 !
Â
, "Bad stackát c_return\n");

66 *
•
 = 
c⁄°0
;

67 
	`p›_c⁄åﬁ_°ack
();

68 
	}
}

70 
c_f‹óch
 
	$P3
(, 
Êags
, , 
idx1
, , 
idx2
) {

71 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
++);

73 i‡(
Êags
 & 
FOREACH_MAPPING
) {

74 
	`CHECK_TYPES
(
•
, 
T_MAPPING
, 2, 
F_FOREACH
);

76 
	`push_ª„d_¨øy
(
	`m≠pög_ödi˚s
(
•
->
u
.
m≠
));

78 
STACK_INC
;

79 
•
->
ty≥
 = 
T_NUMBER
;

80 
•
->
u
.
lvÆue
 = (•-1)->u.
¨r
->
ôem
;

81 
•
->
subty≥
 = (•-1)->
u
.
¨r
->
size
;

83 
STACK_INC
;

84 
•
->
ty≥
 = 
T_LVALUE
;

85 i‡(
Êags
 & 
FOREACH_LEFT_GLOBAL
) {

86 
•
->
u
.
lvÆue
 = &
cuºít_obje˘
->
v¨übÀs
[
idx1
 + 
v¨übÀ_ödex_off£t
];

88 
•
->
u
.
lvÆue
 = 
Â
 + 
idx1
;

91 i‡(
•
->
ty≥
 =
T_STRING
) {

92 
STACK_INC
;

93 
•
->
ty≥
 = 
T_NUMBER
;

94 
•
->
u
.
lvÆue_byã
 = (*)((•-1)->u.
°rög
);

95 
•
->
subty≥
 = 
	`SVALUE_STRLEN
(sp - 1);

97 
	`CHECK_TYPES
(
•
, 
T_ARRAY
, 2, 
F_FOREACH
);

99 
STACK_INC
;

100 
•
->
ty≥
 = 
T_NUMBER
;

101 
•
->
u
.
lvÆue
 = (•-1)->u.
¨r
->
ôem
;

102 
•
->
subty≥
 = (•-1)->
u
.
¨r
->
size
;

105 i‡(
Êags
 & 
FOREACH_RIGHT_GLOBAL
) {

106 
STACK_INC
;

107 
•
->
ty≥
 = 
T_LVALUE
;

108 
•
->
u
.
lvÆue
 = &
cuºít_obje˘
->
v¨übÀs
[
idx2
 + 
v¨übÀ_ödex_off£t
];

109 } i‡(
Êags
 & 
FOREACH_REF
) {

110 
ªf_t
 *
ªf
 = 
	`make_ªf
();

111 
svÆue_t
 *
loc
 = 
Â
 + 
idx2
;

114 
ªf
->
lvÆue
 = 0;

115 
ªf
->
sv
.
ty≥
 = 
T_NUMBER
;

116 
STACK_INC
;

117 
•
->
ty≥
 = 
T_REF
;

118 
•
->
u
.
ªf
 =Ñef;

119 
	`DEBUG_CHECK
(
loc
->
ty≥
 !
T_NUMBER
 &&Üoc->ty≥ !
T_REF
, "SomehowáÑeference in foreachácquiredá value before coming into scope");

120 
loc
->
ty≥
 = 
T_REF
;

121 
loc
->
u
.
ªf
 =Ñef;

122 
ªf
->ref++;

124 
STACK_INC
;

125 
•
->
ty≥
 = 
T_LVALUE
;

126 
•
->
u
.
lvÆue
 = 
Â
 + 
idx2
;

128 
	}
}

130 
c_ex∑nd_v¨¨gs
 
	$P1
(, 
whîe
) {

131 
svÆue_t
 *
s
, *
t
;

132 
¨øy_t
 *
¨r
;

133 
n
;

135 
s
 = 
•
 - 
whîe
;

137 i‡(
s
->
ty≥
 !
T_ARRAY
)

138 
	`îr‹
("Item beingÉxpanded with ... isÇotánárray\n");

140 
¨r
 = 
s
->
u
.arr;

141 
n
 = 
¨r
->
size
;

142 
num_v¨¨gs
 +
n
 - 1;

143 i‡(!
n
) {

144 
t
 = 
s
;

145 
t
 < 
•
) {

146 *
t
 = *(t + 1);

147 
t
++;

149 
•
--;

150 } i‡(
n
 == 1) {

151 
	`assign_svÆue_no_‰ì
(
s
, &
¨r
->
ôem
[0]);

153 
t
 = 
•
;

154 
	`CHECK_STACK_OVERFLOW
(
n
 - 1);

155 
•
 +
n
 - 1;

156 
t
 > 
s
) {

157 *(
t
 + 
n
 - 1) = *t;

158 
t
--;

160 
t
 = 
s
 + 
n
 - 1;

161 i‡(
¨r
->
ªf
 == 1) {

162 
	`mem˝y
(
s
, 
¨r
->
ôem
, 
n
 * (
svÆue_t
));

163 
	`‰ì_em±y_¨øy
(
¨r
);

166 
n
--)

167 
	`assign_svÆue_no_‰ì
(
t
--, &
¨r
->
ôem
[
n
]);

170 
	`‰ì_¨øy
(
¨r
);

171 
	}
}

173 
c_exô_f‹óch
 
PROT
(()) {

174 
IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
--);

175 i‡(
	g•
->
	gty≥
 =
T_REF
) {

176 i‡(!(--
•
->
u
.
ªf
->ªfË&& sp->u.ªf->
lvÆue
 == 0)

177 
FREE
(
•
->
u
.
ªf
);

179 i‡((
	g•
-1)->
	gty≥
 =
T_LVALUE
) {

181 
•
 -= 3;

182 
‰ì_¨øy
((
•
--)->
u
.
¨r
);

183 
‰ì_m≠pög
((
•
--)->
u
.
m≠
);

186 
	g•
 -= 2;

187 i‡(
	g•
->
	gty≥
 =
T_STRING
)

188 
‰ì_°rög_svÆue
(
•
--);

190 
‰ì_¨øy
((
•
--)->
u
.
¨r
);

194 
c_√xt_f‹óch
 
PROT
(()) {

195 i‡((
	g•
-1)->
	gty≥
 =
T_LVALUE
) {

197 i‡((
•
-2)->
subty≥
--) {

198 
svÆue_t
 *
key
 = (
•
-2)->
u
.
lvÆue
++;

199 
svÆue_t
 *
	gvÆue
 = 
föd_ö_m≠pög
((
•
-4)->
u
.
m≠
, 
key
);

201 
assign_svÆue
((
•
-1)->
u
.
lvÆue
, 
key
);

202 i‡(
	g•
->
	gty≥
 =
T_REF
) {

203 i‡(
vÆue
 =&
c⁄°0u
)

204 
•
->
u
.
ªf
->
lvÆue
 = 0;

206 
	g•
->
	gu
.
	gªf
->
	glvÆue
 = 
vÆue
;

208 
assign_svÆue
(
•
->
u
.
lvÆue
, 
vÆue
);

213 i‡((
	g•
-1)->
	gsubty≥
--) {

214 i‡((
	g•
-2)->
	gty≥
 =
T_STRING
) {

215 i‡(
•
->
ty≥
 =
T_REF
) {

216 
•
->
u
.
ªf
->
lvÆue
 = &
globÆ_lvÆue_byã
;

217 
	gglobÆ_lvÆue_byã
.
	gu
.
	glvÆue_byã
 = (*)((
•
-1)->
u
.
lvÆue_byã
++);

219 
‰ì_svÆue
(
•
->
u
.
lvÆue
, "string foreach");

220 
	g•
->
	gu
.
	glvÆue
->
	gty≥
 = 
T_NUMBER
;

221 
	g•
->
	gu
.
	glvÆue
->
	gsubty≥
 = 0;

222 
	g•
->
	gu
.
	glvÆue
->u.
	gnumbî
 = *((
•
-1)->
u
.
lvÆue_byã
)++;

225 i‡(
	g•
->
	gty≥
 =
T_REF
)

226 
•
->
u
.
ªf
->
lvÆue
 = (sp-1)->u.lvalue++;

228 
assign_svÆue
(
•
->
u
.
lvÆue
, (sp-1)->u.lvalue++);

233 
c_exô_f‹óch
();

237 
c_ˇŒ_öhîôed
 
	$P3
(, 
öh
, , 
func
, , 
num_¨g
) {

238 
öhîô_t
 *
ù
 = 
cuºít_¥og
->
öhîô
 + 
öh
;

239 
¥ogøm_t
 *
ãmp_¥og
 = 
ù
->
¥og
;

240 
fun˘i⁄_t
 *
fu≈
;

242 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

244 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

245 
cuºít_¥og
 = 
ãmp_¥og
;

247 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
 + 
num_v¨¨gs
;

248 
num_v¨¨gs
 = 0;

250 
fun˘i⁄_ödex_off£t
 +
ù
->function_index_offset;

251 
v¨übÀ_ödex_off£t
 +
ù
->variable_index_offset;

253 
fu≈
 = 
	`£tup_öhîôed_‰ame
(
func
);

254 
c•
->
pc
 =Öc;

256 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

257 
	}
}

259 
c_ˇŒ
 
	$P2
(, 
func
, , 
num_¨g
) {

260 
fun˘i⁄_t
 *
fu≈
;

262 
func
 +
fun˘i⁄_ödex_off£t
;

269 
	`DEBUG_CHECK
(
func
 >
cuºít_obje˘
->
¥og
->
œ°_öhîôed
 +

270 
cuºít_obje˘
->
¥og
->
num_fun˘i⁄s_deföed
,

273 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
func
] & 
FUNC_UNDEFINED
)

274 
	`îr‹
("Undeföed fun˘i⁄: %s\n", 
	`fun˘i⁄_«me
(
cuºít_obje˘
->
¥og
, 
func
));

276 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

278 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

280 
cuºít_¥og
 = 
cuºít_obje˘
->
¥og
;

285 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
 + 
num_v¨¨gs
;

286 
num_v¨¨gs
 = 0;

287 
fu≈
 = 
	`£tup_√w_‰ame
(
func
);

288 
c•
->
pc
 =Öc;

289 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

290 
	}
}

292 
c_efun_ªtu∫
 
	$P1
(, 
¨gs
) {

293 
svÆue_t
 
sv
;

295 
sv
 = *
•
--;

296 
	`p›_n_ñems
(
¨gs
);

297 *++
•
 = 
sv
;

298 
	}
}

300 
	$c_void_assign
() {

301 #ifde‡
DEBUG


302 i‡(
•
->
ty≥
 !
T_LVALUE
Ë
	`Áèl
("BadárgumentÅo F_VOID_ASSIGN\n");

304 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

305 i‡(
•
->
ty≥
 !
T_INVALID
) {

306 
lvÆ
->
ty≥
) {

307 
T_LVALUE_BYTE
:

309 i‡(
•
->
ty≥
 !
T_NUMBER
) {

310 
	`îr‹
("IllegalÑhsÅo charÜvalue\n");

312 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = (
•
--)->u.
numbî
 & 0xff;

317 
T_LVALUE_RANGE
:

319 
	`c›y_lvÆue_ønge
(
•
--);

325 
	`‰ì_svÆue
(
lvÆ
, "F_VOID_ASSIGN : 3");

326 *
lvÆ
 = *
•
--;

329 } 
•
--;

330 
	}
}

332 
	$c_po°_dec
() {

333 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

335 
lvÆ
 = 
•
->
u
.
lvÆue
;

336 
lvÆ
->
ty≥
) {

337 
T_NUMBER
:

338 
•
->
ty≥
 = 
T_NUMBER
;

339 
•
->
u
.
numbî
 = 
lvÆ
->u.number--;

341 
T_REAL
:

342 
•
->
ty≥
 = 
T_REAL
;

343 
•
->
u
.
ªÆ
 = 
lvÆ
->u.real--;

345 
T_LVALUE_BYTE
:

346 
•
->
ty≥
 = 
T_NUMBER
;

347 
•
->
u
.
numbî
 = (*
globÆ_lvÆue_byã
.u.
lvÆue_byã
)--;

350 
	`îr‹
("-- ofÇon-numericárgument\n");

352 
	}
}

354 
	$c_po°_öc
() {

355 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

357 
lvÆ
 = 
•
->
u
.
lvÆue
;

358 
lvÆ
->
ty≥
) {

359 
T_NUMBER
:

360 
•
->
ty≥
 = 
T_NUMBER
;

361 
•
->
u
.
numbî
 = 
lvÆ
->u.number++;

363 
T_REAL
:

364 
•
->
ty≥
 = 
T_REAL
;

365 
•
->
u
.
ªÆ
 = 
lvÆ
->u.real++;

367 
T_LVALUE_BYTE
:

368 
•
->
ty≥
 = 
T_NUMBER
;

369 
•
->
u
.
numbî
 = (*
globÆ_lvÆue_byã
.u.
lvÆue_byã
)++;

372 
	`îr‹
("++ ofÇon-numericárgument\n");

374 
	}
}

376 
	$c_¥e_dec
() {

377 
svÆue_t
 *
lvÆ
;

379 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

381 
lvÆ
 = 
•
->
u
.
lvÆue
;

382 
lvÆ
->
ty≥
) {

383 
T_NUMBER
:

384 
•
->
ty≥
 = 
T_NUMBER
;

385 
•
->
u
.
numbî
 = --(
lvÆ
->u.number);

387 
T_REAL
:

388 
•
->
ty≥
 = 
T_REAL
;

389 
•
->
u
.
ªÆ
 = --(
lvÆ
->u.real);

391 
T_LVALUE_BYTE
:

392 
•
->
ty≥
 = 
T_NUMBER
;

393 
•
->
u
.
numbî
 = --(*
globÆ_lvÆue_byã
.u.
lvÆue_byã
);

396 
	`îr‹
("-- ofÇon-numericárgument\n");

398 
	}
}

400 
	$c_¥e_öc
() {

401 
svÆue_t
 *
lvÆ
;

403 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

405 
lvÆ
 = 
•
->
u
.
lvÆue
;

406 
lvÆ
->
ty≥
) {

407 
T_NUMBER
:

408 
•
->
ty≥
 = 
T_NUMBER
;

409 
•
->
u
.
numbî
 = ++
lvÆ
->u.number;

411 
T_REAL
:

412 
•
->
ty≥
 = 
T_REAL
;

413 
•
->
u
.
ªÆ
 = ++
lvÆ
->u.
numbî
;

415 
T_LVALUE_BYTE
:

416 
•
->
ty≥
 = 
T_NUMBER
;

417 
•
->
u
.
numbî
 = ++*
globÆ_lvÆue_byã
.u.
lvÆue_byã
;

420 
	`îr‹
("++ ofÇon-numericárgument\n");

422 
	}
}

424 
	$c_assign
() {

425 #ifde‡
DEBUG


426 i‡(
•
->
ty≥
 !
T_LVALUE
Ë
	`Áèl
("BadárgumentÅo F_ASSIGN\n");

428 
•
->
u
.
lvÆue
->
ty≥
) {

429 
T_LVALUE_BYTE
:

430 i‡((
•
 - 1)->
ty≥
 !
T_NUMBER
) {

431 
	`îr‹
("IllegalÑhsÅo charÜvalue\n");

433 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = ((
•
 - 1)->u.
numbî
 & 0xff);

437 
	`assign_svÆue
(
•
->
u
.
lvÆue
, sp - 1);

439 
T_LVALUE_RANGE
:

440 
	`assign_lvÆue_ønge
(
•
 - 1);

443 
•
--;

445 
	}
}

447 
c_void_assign_loˇl
 
	$P1
(
svÆue_t
 *, 
v¨
) {

448 i‡(
•
->
ty≥
 =
T_INVALID
) {

449 
•
--;

452 
	`‰ì_svÆue
(
v¨
, "c_void_assign_local");

453 *
v¨
 = *
•
--;

454 
	}
}

456 
	$c_ödex
() {

457 
i
;

459 
•
->
ty≥
) {

460 
T_MAPPING
:

462 
svÆue_t
 *
v
;

463 
m≠pög_t
 *
m
;

465 
v
 = 
	`föd_ö_m≠pög
(
m
 = 
•
->
u
.
m≠
, sp - 1);

466 
	`assign_svÆue
(--
•
, 
v
);

468 
	`‰ì_m≠pög
(
m
);

471 #i‚de‡
NO_BUFFER_TYPE


472 
T_BUFFER
:

474 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

475 
	`îr‹
("Indexingá buffer withán illegalÅype.\n");

477 
i
 = (
•
 - 1)->
u
.
numbî
;

478 i‡((
i
 > 
•
->
u
.
buf
->
size
) || (i < 0))

479 
	`îr‹
("Buffer index out of bounds.\n");

480 
i
 = 
•
->
u
.
buf
->
ôem
[i];

481 
	`‰ì_buf„r
(
•
->
u
.
buf
);

482 (--
•
)->
u
.
numbî
 = 
i
;

486 
T_STRING
:

488 i‡((
•
-1)->
ty≥
 !
T_NUMBER
) {

489 
	`îr‹
("Indexingá string withán illegalÅype.\n");

491 
i
 = (
•
 - 1)->
u
.
numbî
;

492 i‡((
i
 > 
	`SVALUE_STRLEN
(
•
)) || (i < 0))

493 
	`îr‹
("String index out of bounds.\n");

494 
i
 = (Ë
•
->
u
.
°rög
[i];

495 
	`‰ì_°rög_svÆue
(
•
);

496 (--
•
)->
u
.
numbî
 = 
i
;

499 
T_ARRAY
:

501 
¨øy_t
 *
¨r
;

503 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

504 
	`îr‹
("Indexingánárray withán illegalÅype\n");

505 
i
 = (
•
 - 1)->
u
.
numbî
;

506 i‡(
i
<0Ë
	`îr‹
("Negative indexÖassedÅoárray.\n");

507 
¨r
 = 
•
->
u
.arr;

508 i‡(
i
 >
¨r
->
size
Ë
	`îr‹
("Array index out of bounds.\n");

509 
	`assign_svÆue_no_‰ì
(--
•
, &
¨r
->
ôem
[
i
]);

510 
	`‰ì_¨øy
(
¨r
);

514 
	`îr‹
("Indexing on illegalÅype.\n");

522 i‡(
•
->
ty≥
 =
T_OBJECT
 && (•->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

523 
	`‰ì_obje˘
(
•
->
u
.
ob
, "F_INDEX");

524 *
•
 = 
c⁄°0u
;

526 
	}
}

528 
	$c_rödex
() {

529 
i
;

531 
•
->
ty≥
) {

532 #i‚de‡
NO_BUFFER_TYPE


533 
T_BUFFER
:

535 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

536 
	`îr‹
("Indexingá buffer withán illegalÅype.\n");

538 
i
 = 
•
->
u
.
buf
->
size
 - (• - 1)->u.
numbî
;

539 i‡((
i
 > 
•
->
u
.
buf
->
size
) || (i < 0))

540 
	`îr‹
("Buffer index out of bounds.\n");

542 
i
 = 
•
->
u
.
buf
->
ôem
[i];

543 
	`‰ì_buf„r
(
•
->
u
.
buf
);

544 (--
•
)->
u
.
numbî
 = 
i
;

548 
T_STRING
:

550 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

551 i‡((
•
-1)->
ty≥
 !
T_NUMBER
) {

552 
	`îr‹
("Indexingá string withán illegalÅype.\n");

554 
i
 = 
Àn
 - (
•
 - 1)->
u
.
numbî
;

555 i‡((
i
 > 
Àn
) || (i < 0))

556 
	`îr‹
("String index out of bounds.\n");

557 
i
 = (Ë
•
->
u
.
°rög
[i];

558 
	`‰ì_°rög_svÆue
(
•
);

559 (--
•
)->
u
.
numbî
 = 
i
;

562 
T_ARRAY
:

564 
¨øy_t
 *
vec
 = 
•
->
u
.
¨r
;

566 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

567 
	`îr‹
("Indexingánárray withán illegalÅype\n");

568 
i
 = 
vec
->
size
 - (
•
 - 1)->
u
.
numbî
;

569 i‡(
i
 < 0 || i >
vec
->
size
Ë
	`îr‹
("Array index out of bounds.\n");

570 
	`assign_svÆue_no_‰ì
(--
•
, &
vec
->
ôem
[
i
]);

571 
	`‰ì_¨øy
(
vec
);

575 
	`îr‹
("Indexing fromÅheÑight on illegalÅype.\n");

583 i‡(
•
->
ty≥
 =
T_OBJECT
 && (•->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

584 
	`‰ì_obje˘
(
•
->
u
.
ob
, "F_RINDEX");

585 *
•
 = 
c⁄°0u
;

587 
	}
}

590 
c_fun˘i⁄Æ
 
	$P3
(, 
köd
, , 
num_¨g
, 
POINTER_INT
, 
func
) {

591 
fu≈å_t
 *
Â
;

593 
Â
 = (
fu≈å_t
 *)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
fun˘i⁄Æ_t
),

594 
TAG_FUNP
, "c_functional");

595 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

596 
	`add_ªf
–
cuºít_obje˘
, "c_functional" );

597 
Â
->
hdr
.
ty≥
 = 
köd
;

599 
cuºít_¥og
->
func_ªf
++;

601 
Â
->
f
.
fun˘i⁄Æ
.
¥og
 = 
cuºít_¥og
;

602 
Â
->
f
.
fun˘i⁄Æ
.
off£t
 = 
func
;

603 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 =Çum_arg;

604 
Â
->
f
.
fun˘i⁄Æ
.
num_loˇl
 = 0;

605 
Â
->
f
.
fun˘i⁄Æ
.
fio
 = 
fun˘i⁄_ödex_off£t
;

606 
Â
->
f
.
fun˘i⁄Æ
.
vio
 = 
v¨übÀ_ödex_off£t
;

608 i‡(
•
->
ty≥
 =
T_ARRAY
) {

609 
Â
->
hdr
.
¨gs
 = 
•
->
u
.
¨r
;

610 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 +
•
->
u
.
¨r
->
size
;

612 
Â
->
hdr
.
¨gs
 = 0;

614 
Â
->
hdr
.
ªf
 = 1;

616 
•
->
ty≥
 = 
T_FUNCTION
;

617 
•
->
u
.
Â
 = fp;

618 
	}
}

621 
c_™⁄ymous
 
	$P3
(, 
num_¨g
, , 
num_loˇl
, 
POINTER_INT
, 
func
) {

622 
fu≈å_t
 *
Â
;

624 
Â
 = (
fu≈å_t
 *)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
fun˘i⁄Æ_t
),

625 
TAG_FUNP
, "c_functional");

626 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

627 
	`add_ªf
–
cuºít_obje˘
, "c_functional" );

628 i‡(
num_¨g
 & 0x10000)

629 
Â
->
hdr
.
ty≥
 = 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
;

631 
Â
->
hdr
.
ty≥
 = 
FP_FUNCTIONAL
;

633 
cuºít_¥og
->
func_ªf
++;

635 
Â
->
f
.
fun˘i⁄Æ
.
¥og
 = 
cuºít_¥og
;

636 
Â
->
f
.
fun˘i⁄Æ
.
off£t
 = 
func
;

637 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 =Çum_arg & 0xff;

638 
Â
->
f
.
fun˘i⁄Æ
.
num_loˇl
 =Çum_local;

639 
Â
->
f
.
fun˘i⁄Æ
.
fio
 = 
fun˘i⁄_ödex_off£t
;

640 
Â
->
f
.
fun˘i⁄Æ
.
vio
 = 
v¨übÀ_ödex_off£t
;

642 
Â
->
hdr
.
¨gs
 = 0;

644 
Â
->
hdr
.
ªf
 = 1;

646 
STACK_INC
;

647 
•
->
ty≥
 = 
T_FUNCTION
;

648 
•
->
u
.
Â
 = fp;

649 
	}
}

652 
c_fun˘i⁄_c⁄°ru˘‹
 
	$P2
(, 
köd
, , 
¨g
)

654 
fu≈å_t
 *
Â
;

656 
köd
) {

657 
FP_EFUN
:

658 
Â
 = 
	`make_efun_fu≈
(
¨g
, 
•
);

659 
	`p›_°ack
();

661 
FP_LOCAL
:

662 
Â
 = 
	`make_lfun_fu≈
(
¨g
, 
•
);

663 
	`p›_°ack
();

665 
FP_SIMUL
:

666 
Â
 = 
	`make_simul_fu≈
(
¨g
, 
•
);

667 
	`p›_°ack
();

669 
FP_FUNCTIONAL
:

670 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

671 
FP_ANONYMOUS
:

672 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
:

673 
	`Áèl
("Wrong constructor called for LPC->C functional.\n");

675 
	`Áèl
("TriedÅo make unknownÅype of functionÖointer.\n");

677 
	`push_ª„d_fu≈
(
Â
);

678 
	}
}

680 
	$c_nŸ
() {

681 i‡(
•
->
ty≥
 =
T_NUMBER
)

682 
•
->
u
.
numbî
 = !sp->u.number;

684 
	`assign_svÆue
(
•
, &
c⁄°0
);

685 
	}
}

687 
	$c_mod
() {

688 
	`CHECK_TYPES
(
•
 - 1, 
T_NUMBER
, 1, 
F_MOD
);

689 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_MOD
);

690 i‡((
•
--)->
u
.
numbî
 == 0)

691 
	`îr‹
("Modulus by zero.\n");

692 
•
->
u
.
numbî
 %= (sp+1)->u.number;

693 
	}
}

695 
c_add_eq
 
	$P1
(, 
is_void
) {

696 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

698 
lvÆ
 = 
•
->
u
.
lvÆue
;

699 
•
--;

700 
lvÆ
->
ty≥
) {

701 
T_STRING
:

702 i‡(
•
->
ty≥
 =
T_STRING
) {

703 
	`SVALUE_STRING_JOIN
(
lvÆ
, 
•
, "f_add_eq: 1");

704 } i‡(
•
->
ty≥
 =
T_NUMBER
) {

705 
buff
[20];

707 
	`•rötf
(
buff
, "%d", 
•
->
u
.
numbî
);

708 
	`EXTEND_SVALUE_STRING
(
lvÆ
, 
buff
, "f_add_eq: 2");

709 } i‡(
•
->
ty≥
 =
T_REAL
) {

710 
buff
[40];

712 
	`•rötf
(
buff
, "%f", 
•
->
u
.
ªÆ
);

713 
	`EXTEND_SVALUE_STRING
(
lvÆ
, 
buff
, "f_add_eq: 2");

715 
	`bad_¨gumít
(
•
, 
T_STRING
 | 
T_NUMBER
 | 
T_REAL
, 2,

716 (
is_void
 ? 
F_VOID_ADD_EQ
 : 
F_ADD_EQ
));

719 
T_NUMBER
:

720 i‡(
•
->
ty≥
 =
T_NUMBER
) {

721 
lvÆ
->
u
.
numbî
 +
•
->u.number;

723 } i‡(
•
->
ty≥
 =
T_REAL
) {

724 
lvÆ
->
u
.
numbî
 +
•
->u.
ªÆ
;

727 
	`îr‹
("Left hand side of += isáÇumber (or zero);Ñight side isÇotáÇumber.\n");

730 
T_REAL
:

731 i‡(
•
->
ty≥
 =
T_NUMBER
) {

732 
lvÆ
->
u
.
ªÆ
 +
•
->u.
numbî
;

735 i‡(
•
->
ty≥
 =
T_REAL
) {

736 
lvÆ
->
u
.
ªÆ
 +
•
->u.real;

739 
	`îr‹
("Left hand side of += isáÇumber (or zero);Ñight side isÇotáÇumber.\n");

742 #i‚de‡
NO_BUFFER_TYPE


743 
T_BUFFER
:

744 i‡(
•
->
ty≥
 !
T_BUFFER
) {

745 
	`bad_¨gumít
(
•
, 
T_BUFFER
, 2, (
is_void
 ? 
F_VOID_ADD_EQ
 : 
F_ADD_EQ
));

747 
buf„r_t
 *
b
;

749 
b
 = 
	`Æloˇã_buf„r
(
lvÆ
->
u
.
buf
->
size
 + 
•
->u.buf->size);

750 
	`mem˝y
(
b
->
ôem
, 
lvÆ
->
u
.
buf
->ôem,ÜvÆ->u.buf->
size
);

751 
	`mem˝y
(
b
->
ôem
 + 
lvÆ
->
u
.
buf
->
size
, 
•
->u.buf->item,

752 
•
->
u
.
buf
->
size
);

753 
	`‰ì_buf„r
(
•
->
u
.
buf
);

754 
	`‰ì_buf„r
(
lvÆ
->
u
.
buf
);

755 
lvÆ
->
u
.
buf
 = 
b
;

759 
T_ARRAY
:

760 i‡(
•
->
ty≥
 !
T_ARRAY
)

761 
	`bad_¨gumít
(
•
, 
T_ARRAY
, 2, (
is_void
 ? 
F_VOID_ADD_EQ
 : 
F_ADD_EQ
));

764 
lvÆ
->
u
.
¨r
 = 
	`add_¨øy
÷vÆ->u.¨r, 
•
->u.arr);

767 
T_MAPPING
:

768 i‡(
•
->
ty≥
 !
T_MAPPING
)

769 
	`bad_¨gumít
(
•
, 
T_MAPPING
, 2, (
is_void
 ? 
F_VOID_ADD_EQ
 : 
F_ADD_EQ
));

771 
	`abs‹b_m≠pög
(
lvÆ
->
u
.
m≠
, 
•
->u.map);

772 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

776 
T_LVALUE_BYTE
:

777 i‡(
•
->
ty≥
 !
T_NUMBER
)

778 
	`îr‹
("BadÑightÅypeÅo += of charÜvalue.\n");

779 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 +
•
->u.
numbî
;

782 
	`bad_¨g
(1, (
is_void
 ? 
F_VOID_ADD_EQ
 : 
F_ADD_EQ
));

785 i‡(!
is_void
) {

786 
	`assign_svÆue_no_‰ì
(
•
, 
lvÆ
);

792 
•
--;

794 
	}
}

796 
	$c_divide
() {

797 (
•
-1)->
ty≥
|sp->type) {

798 
T_NUMBER
:

800 i‡(!(
•
--)->
u
.
numbî
Ë
	`îr‹
("Division by zero\n");

801 
•
->
u
.
numbî
 /= (sp+1)->u.number;

805 
T_REAL
:

807 i‡((
•
--)->
u
.
ªÆ
 =0.0Ë
	`îr‹
("Division by zero\n");

808 
•
->
u
.
ªÆ
 /= (sp+1)->u.real;

812 
T_NUMBER
|
T_REAL
:

814 i‡((
•
--)->
ty≥
 =
T_NUMBER
) {

815 i‡(!((
•
+1)->
u
.
numbî
)Ë
	`îr‹
("Division by zero\n");

816 
•
->
u
.
ªÆ
 /(•+1)->u.
numbî
;

818 i‡((
•
+1)->
u
.
ªÆ
 =0.0Ë
	`îr‹
("Division by 0.0\n");

819 
•
->
ty≥
 = 
T_REAL
;

820 
•
->
u
.
ªÆ
 = sp->u.
numbî
 / (sp+1)->u.real;

827 i‡(!((
•
-1)->
ty≥
 & (
T_NUMBER
|
T_REAL
)))

828 
	`bad_¨gumít
(
•
-1,
T_NUMBER
|
T_REAL
,1, 
F_DIVIDE
);

829 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
)))

830 
	`bad_¨gumít
(
•
, 
T_NUMBER
|
T_REAL
,2, 
F_DIVIDE
);

833 
	}
}

835 
	$c_mu…ùly
() {

836 (
•
-1)->
ty≥
|sp->type) {

837 
T_NUMBER
:

839 
•
--;

840 
•
->
u
.
numbî
 *= (sp+1)->u.number;

844 
T_REAL
:

846 
•
--;

847 
•
->
u
.
ªÆ
 *= (sp+1)->u.real;

851 
T_NUMBER
|
T_REAL
:

853 i‡((--
•
)->
ty≥
 =
T_NUMBER
) {

854 
•
->
ty≥
 = 
T_REAL
;

855 
•
->
u
.
ªÆ
 = sp->u.
numbî
 * (sp+1)->u.real;

857 
•
->
u
.
ªÆ
 *(•+1)->u.
numbî
;

861 
T_MAPPING
:

863 
m≠pög_t
 *
m
;

864 
m
 = 
	`compo£_m≠pög
((
•
-1)->
u
.
m≠
, sp->u.map, 1);

865 
	`p›_2_ñems
();

866 
	`push_ª„d_m≠pög
(
m
);

872 i‡(!((
•
-1)->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_MAPPING
)))

873 
	`bad_¨gumít
(
•
-1, 
T_NUMBER
|
T_REAL
|
T_MAPPING
,1, 
F_MULTIPLY
);

874 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_MAPPING
)))

875 
	`bad_¨gumít
(
•
, 
T_NUMBER
|
T_REAL
|
T_MAPPING
,2, 
F_MULTIPLY
);

876 
	`îr‹
("ArgsÅo *áreÇot compatible.\n");

880 
	}
}

882 
	$c_öc
() {

883 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

885 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

886 
lvÆ
->
ty≥
) {

887 
T_NUMBER
:

888 
lvÆ
->
u
.
numbî
++;

890 
T_REAL
:

891 
lvÆ
->
u
.
ªÆ
++;

893 
T_LVALUE_BYTE
:

894 ++*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
;

897 
	`îr‹
("++ ofÇon-numericárgument\n");

899 
	}
}

901 
	$c_dec
() {

902 
svÆue_t
 *
lvÆ
;

904 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

906 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

907 
lvÆ
->
ty≥
) {

908 
T_NUMBER
:

909 
lvÆ
->
u
.
numbî
--;

911 
T_REAL
:

912 
lvÆ
->
u
.
ªÆ
--;

914 
T_LVALUE_BYTE
:

915 --(*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
);

918 
	`îr‹
("-- ofÇon-numericárgument\n");

920 
	}
}

922 
	$c_À
() {

923 
i
 = 
•
->
ty≥
;

925 (--
•
)->
ty≥
|
i
) {

926 
T_NUMBER
:

927 
•
->
u
.
numbî
 = sp->u.number <= (sp+1)->u.number;

930 
T_REAL
:

931 
•
->
u
.
numbî
 = sp->u.
ªÆ
 <= (sp+1)->u.real;

932 
•
->
ty≥
 = 
T_NUMBER
;

935 
T_NUMBER
|
T_REAL
:

936 i‡(
i
 =
T_NUMBER
) {

937 
•
->
ty≥
 = 
T_NUMBER
;

938 
•
->
u
.
numbî
 = sp->u.
ªÆ
 <= (sp+1)->u.number;

939 } 
•
->
u
.
numbî
 = sp->u.numbî <(•+1)->u.
ªÆ
;

942 
T_STRING
:

943 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp+1)->u.string) <= 0;

944 
	`‰ì_°rög_svÆue
(
•
+1);

945 
	`‰ì_°rög_svÆue
(
•
);

946 
•
->
ty≥
 = 
T_NUMBER
;

947 
•
->
u
.
numbî
 = 
i
;

952 (
•
++)->
ty≥
) {

953 
T_NUMBER
:

954 
T_REAL
:

955 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_LE
);

957 
T_STRING
:

958 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_LE
);

961 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_LE
);

965 
	}
}

967 
	$c_…
() {

968 
i
 = 
•
->
ty≥
;

969 
i
 | (--
•
)->
ty≥
) {

970 
T_NUMBER
:

971 
•
->
u
.
numbî
 = sp->u.number < (sp+1)->u.number;

973 
T_REAL
:

974 
•
->
u
.
numbî
 = sp->u.
ªÆ
 < (sp+1)->u.real;

975 
•
->
ty≥
 = 
T_NUMBER
;

977 
T_NUMBER
|
T_REAL
:

978 i‡(
i
 =
T_NUMBER
) {

979 
•
->
ty≥
 = 
T_NUMBER
;

980 
•
->
u
.
numbî
 = sp->u.
ªÆ
 < (sp+1)->u.number;

981 } 
•
->
u
.
numbî
 = sp->u.numbî < (•+1)->u.
ªÆ
;

983 
T_STRING
:

984 
i
 = (
	`°rcmp
((
•
 - 1)->
u
.
°rög
, sp->u.string) < 0);

985 
	`‰ì_°rög_svÆue
(
•
+1);

986 
	`‰ì_°rög_svÆue
(
•
);

987 
•
->
ty≥
 = 
T_NUMBER
;

988 
•
->
u
.
numbî
 = 
i
;

991 (
•
++)->
ty≥
) {

992 
T_NUMBER
:

993 
T_REAL
:

994 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_LT
);

995 
T_STRING
:

996 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_LT
);

998 
	`bad_¨gumít
(
•
-1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_LT
);

1001 
	}
}

1003 
	$c_gt
() {

1004 
i
 = 
•
->
ty≥
;

1005 (--
•
)->
ty≥
 | 
i
) {

1006 
T_NUMBER
:

1007 
•
->
u
.
numbî
 = sp->u.number > (sp+1)->u.number;

1009 
T_REAL
:

1010 
•
->
u
.
numbî
 = sp->u.
ªÆ
 > (sp+1)->u.real;

1011 
•
->
ty≥
 = 
T_NUMBER
;

1013 
T_NUMBER
 | 
T_REAL
:

1014 i‡(
i
 =
T_NUMBER
) {

1015 
•
->
ty≥
 = 
T_NUMBER
;

1016 
•
->
u
.
numbî
 = sp->u.
ªÆ
 > (sp+1)->u.number;

1017 } 
•
->
u
.
numbî
 = sp->u.numbî > (•+1)->u.
ªÆ
;

1019 
T_STRING
:

1020 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp+1)->u.string) > 0;

1021 
	`‰ì_°rög_svÆue
(
•
+1);

1022 
	`‰ì_°rög_svÆue
(
•
);

1023 
•
->
ty≥
 = 
T_NUMBER
;

1024 
•
->
u
.
numbî
 = 
i
;

1028 (
•
++)->
ty≥
) {

1029 
T_NUMBER
:

1030 
T_REAL
:

1031 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_GT
);

1032 
T_STRING
:

1033 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_GT
);

1035 
	`bad_¨gumít
(
•
-1, 
T_NUMBER
 | 
T_REAL
 | 
T_STRING
, 1, 
F_GT
);

1039 
	}
}

1041 
	$c_ge
() {

1042 
i
 = 
•
->
ty≥
;

1043 (--
•
)->
ty≥
 | 
i
) {

1044 
T_NUMBER
:

1045 
•
->
u
.
numbî
 = sp->u.number >= (sp+1)->u.number;

1047 
T_REAL
:

1048 
•
->
u
.
numbî
 = sp->u.
ªÆ
 >= (sp+1)->u.real;

1049 
•
->
ty≥
 = 
T_NUMBER
;

1051 
T_NUMBER
 | 
T_REAL
:

1052 i‡(
i
 =
T_NUMBER
) {

1053 
•
->
ty≥
 = 
T_NUMBER
;

1054 
•
->
u
.
numbî
 = sp->u.
ªÆ
 >= (sp+1)->u.number;

1055 } 
•
->
u
.
numbî
 = sp->u.numbî >(•+1)->u.
ªÆ
;

1057 
T_STRING
:

1058 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp+1)->u.string) >= 0;

1059 
	`‰ì_°rög_svÆue
(
•
 + 1);

1060 
	`‰ì_°rög_svÆue
(
•
);

1061 
•
->
ty≥
 = 
T_NUMBER
;

1062 
•
->
u
.
numbî
 = 
i
;

1066 (
•
++)->
ty≥
) {

1067 
T_NUMBER
:

1068 
T_REAL
:

1069 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_GE
);

1070 
T_STRING
:

1071 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_GE
);

1073 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_GE
);

1077 
	}
}

1079 
	$c_subåa˘
() {

1080 
i
 = (
•
--)->
ty≥
;

1081 
i
 | 
•
->
ty≥
) {

1082 
T_NUMBER
:

1083 
•
->
u
.
numbî
 -= (sp+1)->u.number;

1086 
T_REAL
:

1087 
•
->
u
.
ªÆ
 -= (sp+1)->u.real;

1090 
T_NUMBER
 | 
T_REAL
:

1091 i‡(
•
->
ty≥
 =
T_REAL
Ë•->
u
.
ªÆ
 -(•+1)->u.
numbî
;

1093 
•
->
ty≥
 = 
T_REAL
;

1094 
•
->
u
.
ªÆ
 = sp->u.
numbî
 - (sp+1)->u.real;

1098 
T_ARRAY
:

1104 
•
->
u
.
¨r
 = 
	`subåa˘_¨øy
(sp->u.arr, (sp+1)->u.arr);

1109 i‡(!((
•
++)->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_ARRAY
)))

1110 
	`îr‹
("BadÜeftÅypeÅo -.\n");

1111 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_ARRAY
)))

1112 
	`îr‹
("BadÑightÅypeÅo -.\n");

1113 
	`îr‹
("ArgumentsÅo - doÇot have compatibleÅypes.\n");

1115 
	}
}

1117 
	$c_√g©e
() {

1118 i‡(
•
->
ty≥
 =
T_NUMBER
)

1119 
•
->
u
.
numbî
 = -sp->u.number;

1120 i‡(
•
->
ty≥
 =
T_REAL
)

1121 
•
->
u
.
ªÆ
 = -sp->u.real;

1123 
	`îr‹
("BadárgumentÅo unary minus\n");

1124 
	}
}

1126 
	$c_com∂
() {

1127 i‡(
•
->
ty≥
 !
T_NUMBER
)

1128 
	`îr‹
("BadárgumentÅo ~\n");

1129 
•
->
u
.
numbî
 = ~sp->u.number;

1130 
	}
}

1132 
	$c_add
() {

1133 
•
->
ty≥
) {

1134 #i‚de‡
NO_BUFFER_TYPE


1135 
T_BUFFER
:

1137 i‡(!((
•
-1)->
ty≥
 =
T_BUFFER
)) {

1138 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s.\n",

1139 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

1141 
buf„r_t
 *
b
;

1143 
b
 = 
	`Æloˇã_buf„r
(
•
->
u
.
buf
->
size
 + (sp - 1)->u.buf->size);

1144 
	`mem˝y
(
b
->
ôem
, (
•
 - 1)->
u
.
buf
->ôem, (• - 1)->u.buf->
size
);

1145 
	`mem˝y
(
b
->
ôem
 + (
•
 - 1)->
u
.
buf
->
size
, sp->u.buf->item,

1146 
•
->
u
.
buf
->
size
);

1147 
	`‰ì_buf„r
((
•
--)->
u
.
buf
);

1148 
	`‰ì_buf„r
(
•
->
u
.
buf
);

1149 
•
->
u
.
buf
 = 
b
;

1154 
T_NUMBER
:

1156 (--
•
)->
ty≥
) {

1157 
T_NUMBER
:

1158 
•
->
u
.
numbî
 += (sp+1)->u.number;

1160 
T_REAL
:

1161 
•
->
u
.
ªÆ
 +(•+1)->u.
numbî
;

1163 
T_STRING
:

1165 
buff
[20];

1167 
	`•rötf
(
buff
, "%d", (
•
+1)->
u
.
numbî
);

1168 
	`EXTEND_SVALUE_STRING
(
•
, 
buff
, "f_add: 2");

1172 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s.\n",

1173 
	`ty≥_«me
(
•
->
ty≥
),Åype_name((sp+1)->type));

1177 
T_REAL
:

1179 (--
•
)->
ty≥
) {

1180 
T_NUMBER
:

1181 
•
->
ty≥
 = 
T_REAL
;

1182 
•
->
u
.
ªÆ
 = sp->u.
numbî
 + (sp+1)->u.real;

1184 
T_REAL
:

1185 
•
->
u
.
ªÆ
 += (sp+1)->u.real;

1187 
T_STRING
:

1189 
buff
[40];

1191 
	`•rötf
(
buff
, "%f", (
•
+1)->
u
.
ªÆ
);

1192 
	`EXTEND_SVALUE_STRING
(
•
, 
buff
, "f_add: 2");

1196 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

1197 
	`ty≥_«me
(
•
->
ty≥
),Åype_name((sp+1)->type));

1201 
T_ARRAY
:

1203 i‡(!((
•
-1)->
ty≥
 =
T_ARRAY
)) {

1204 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

1205 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

1208 (
•
-1)->
u
.
¨r
 = 
	`add_¨øy
((sp - 1)->u.arr, sp->u.arr);

1209 
•
--;

1213 
T_MAPPING
:

1215 i‡((
•
-1)->
ty≥
 =
T_MAPPING
) {

1216 
m≠pög_t
 *
m≠
;

1218 
m≠
 = 
	`add_m≠pög
((
•
 - 1)->
u
.map, sp->u.map);

1219 
	`‰ì_m≠pög
((
•
--)->
u
.
m≠
);

1220 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

1221 
•
->
u
.
m≠
 = map;

1224 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

1225 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

1227 
T_STRING
:

1229 (
•
-1)->
ty≥
) {

1230 
T_NUMBER
:

1232 
buff
[20];

1234 
	`•rötf
(
buff
, "%d", (
•
-1)->
u
.
numbî
);

1235 
	`SVALUE_STRING_ADD_LEFT
(
buff
, "f_add: 3");

1238 
T_REAL
:

1240 
buff
[40];

1242 
	`•rötf
(
buff
, "%f", (
•
 - 1)->
u
.
ªÆ
);

1243 
	`SVALUE_STRING_ADD_LEFT
(
buff
, "f_add: 3");

1246 
T_STRING
:

1248 
	`SVALUE_STRING_JOIN
(
•
-1, sp, "f_add: 1");

1249 
•
--;

1253 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

1254 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

1260 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s.\n",

1261 
	`ty≥_«me
((
•
-1)->
ty≥
),Åype_name(sp->type));

1263 
	}
}

1265 
c_lo›_c⁄d_com∑ª
 
	$P2
(
svÆue_t
 *, 
s1
, svÆue_à*, 
s2
) {

1266 
s1
->
ty≥
 | 
s2
->type) {

1267 
T_NUMBER
:

1268  
s1
->
u
.
numbî
 < 
s2
->u.number;

1269 
T_REAL
:

1270  
s1
->
u
.
ªÆ
 < 
s2
->u.real;

1271 
T_STRING
:

1272  (
	`°rcmp
(
s1
->
u
.
°rög
, 
s2
->u.string) < 0);

1273 
T_NUMBER
|
T_REAL
:

1274 i‡(
s1
->
ty≥
 =
T_NUMBER
Ë s1->
u
.
numbî
 < 
s2
->u.
ªÆ
;

1275  
s1
->
u
.
ªÆ
 < 
s2
->u.
numbî
;

1277 i‡(
s1
->
ty≥
 =
T_OBJECT
 && (s1->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1278 
	`‰ì_obje˘
(
s1
->
u
.
ob
, "do_loop_cond:1");

1279 *
s1
 = 
c⁄°0u
;

1281 i‡(
s2
->
ty≥
 =
T_OBJECT
 && (s2->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1282 
	`‰ì_obje˘
(
s2
->
u
.
ob
, "do_loop_cond:2");

1283 *
s2
 = 
c⁄°0u
;

1285 i‡(
s1
->
ty≥
 =
T_NUMBER
 && 
s2
->type == T_NUMBER)

1288 
s1
->
ty≥
) {

1289 
T_NUMBER
:

1290 
T_REAL
:

1291 
	`îr‹
("2ndárgumentÅo < isÇotÇumeric whenÅhe 1st is.\n");

1292 
T_STRING
:

1293 
	`îr‹
("2ndárgumentÅo < isÇot string whenÅhe 1st is.\n");

1295 
	`îr‹
("Bad 1stárgumentÅo <.\n");

1299 
	}
}

1301 
c_ssˇnf
 
	$P1
(, 
num_¨g
) {

1302 
svÆue_t
 *
Â
;

1303 
i
;

1310 
Â
 = 
•
;

1311 
	`CHECK_STACK_OVERFLOW
(
num_¨g
 + 1);

1312 
•
 +
num_¨g
 + 1;

1313 *
•
 = *(
Â
--);

1314 *(
•
 - 1Ë*(
Â
);

1316 
Â
->
ty≥
 = 
T_NUMBER
;

1322 
i
 = 1; i <
num_¨g
; i++)

1323 
Â
[
i
].
ty≥
 = 
T_INVALID
;

1328 
i
 = 
	`öãr_ssˇnf
(
•
 - 2, s∞- 1, sp, 
num_¨g
);

1333 
	`p›_2_ñems
();

1338 
Â
->
ty≥
 = 
T_NUMBER
;

1339 
Â
->
u
.
numbî
 = 
i
;

1340 
	}
}

1342 
c_∑r£_comm™d
 
	$P1
(, 
num_¨g
) {

1343 
svÆue_t
 *
¨g
;

1344 
svÆue_t
 *
Â
;

1345 
i
;

1350 
¨g
 = 
•
 - 2;

1351 
	`CHECK_TYPES
(&
¨g
[0], 
T_STRING
, 1, 
F_PARSE_COMMAND
);

1352 
	`CHECK_TYPES
(&
¨g
[1], 
T_OBJECT
 | 
T_ARRAY
, 2, 
F_PARSE_COMMAND
);

1353 
	`CHECK_TYPES
(&
¨g
[2], 
T_STRING
, 3, 
F_PARSE_COMMAND
);

1359 
Â
 = 
•
;

1360 
	`CHECK_STACK_OVERFLOW
(
num_¨g
 + 1);

1361 
•
 +
num_¨g
 + 1;

1362 
¨g
 = 
•
;

1363 *(
¨g
--Ë*(
Â
--);

1364 *(
¨g
--Ë*(
Â
--);

1366 *(
¨g
Ë*(
Â
);

1367 
Â
->
ty≥
 = 
T_NUMBER
;

1372 
i
 = 1; i <
num_¨g
; i++)

1373 
Â
[
i
].
ty≥
 = 
T_INVALID
;

1378 
i
 = 
	`∑r£
(
¨g
[0].
u
.
°rög
, &¨g[1],árg[2].u.°rög, &
Â
[1], 
num_¨g
);

1383 
	`p›_3_ñems
();

1388 
Â
->
u
.
numbî
 = 
i
;

1389 
	}
}

1391 
c_¥ï¨e_ˇtch
 
	$P1
(
îr‹_c⁄ãxt_t
 *, 
ec⁄
) {

1392 i‡(!
	`ßve_c⁄ãxt
(
ec⁄
))

1393 
	`îr‹
("Can't catchÅoo deepÑecursionÉrror.\n");

1394 
	`push_c⁄åﬁ_°ack
(
FRAME_CATCH
);

1395 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
TRACE_CODE
)

1396 
c•
->
num_loˇl_v¨übÀs
 = (csp - 1)->num_local_variables;

1398 
	`assign_svÆue
(&
ˇtch_vÆue
, &
c⁄°1
);

1399 
	}
}

1401 
c_ˇught_îr‹
 
	$P1
(
îr‹_c⁄ãxt_t
 *, 
ec⁄
) {

1402 
	`ª°‹e_c⁄ãxt
(
ec⁄
);

1403 
STACK_INC
;

1404 *
•
 = 
ˇtch_vÆue
;

1405 
ˇtch_vÆue
 = 
c⁄°1
;

1408 
	`p›_c⁄ãxt
(
ec⁄
);

1409 i‡(
max_evÆ_îr‹
)

1410 
	`îr‹
("Can't catchÉval costÅoo bigÉrror.\n");

1411 i‡(
too_dìp_îr‹
)

1412 
	`îr‹
("Can't catchÅoo deepÑecursionÉrror.\n");

1413 
	}
}

1415 
c_íd_ˇtch
 
	$P1
(
îr‹_c⁄ãxt_t
 *, 
ec⁄
) {

1416 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "F_END_CATCH");

1417 
ˇtch_vÆue
 = 
c⁄°0
;

1419 
	`p›_c⁄åﬁ_°ack
();

1420 
	`push_numbî
(0);

1421 
	`p›_c⁄ãxt
(
ec⁄
);

1422 
	}
}

1424 
com∑ª_swôch_íåõs
 
	$P2
(
°rög_swôch_íåy_t
 *, 
p1
,

1425 
°rög_swôch_íåy_t
 *, 
p2
) {

1426  ((
POINTER_INT
)
p1
->
°rög
 - (POINTER_INT)
p2
->string);

1427 
	}
}

1429 #ifde‡
DEBUGMALLOC_EXTENSIONS


1430 
	sm¶_s
 {

1431 
m¶_s
 *
	m√xt
;

1432 
°rög_swôch_íåy_t
 **
	mèbÀs
;

1433 } 
	tm¶_t
;

1435 
m¶_t
 *
	gg_m¶_èbÀs
 = 0;

1437 
add_swôch_li°
 
	$P1
(
°rög_swôch_íåy_t
 **, 
èbÀs
) {

1438 
m¶_t
 *
√w
;

1440 
√w
 = 
	`ALLOCATE
(
m¶_t
, 
TAG_DEBUGMALLOC
, "add_switch_list");

1441 
√w
->
√xt
 = 
g_m¶_èbÀs
;

1442 
√w
->
èbÀs
 =Åables;

1443 
	}
}

1445 
m¨k_swôch_li°s
 
PROT
(()) {

1446 
°rög_swôch_íåy_t
 *
	gp
, **
	gèbÀs
;

1447 
m¶_t
 *
	gm¶
 = 
g_m¶_èbÀs
;

1449 
	gm¶
) {

1450 
	gèbÀs
 = 
m¶
->
èbÀs
;

1451 
	gm¶
 = 
m¶
->
√xt
;

1452 *
	gèbÀs
) {

1453 
	gp
 = *
èbÀs
++;

1454 
	gp
->
	g°rög
) {

1455 
EXTRA_REF
(
BLOCK
(
p
->
°rög
))++;

1456 
	gp
++;

1463 
fix_swôches
 
	$P1
(
°rög_swôch_íåy_t
 **, 
èbÀs
) {

1464 
°rög_swôch_íåy_t
 *
p
;

1466 #ifde‡
DEBUGMALLOC_EXTENSIONS


1467 
	`add_swôch_li°
(
èbÀs
);

1469 *
èbÀs
) {

1470 
p
 = *
èbÀs
;

1471 
p
->
°rög
) {

1472 
p
->
°rög
 = 
	`make_sh¨ed_°rög
(p->string);

1473 
p
++;

1475 
	`quickS‹t
((*)(*
èbÀs
), 
p
 - *tables ,

1476 (
°rög_swôch_íåy_t
), 
com∑ª_swôch_íåõs
);

1477 
èbÀs
++;

1479 
	}
}

1481 
c_°rög_swôch_lookup
 
	$P3
(
svÆue_t
 *, 
°r
, 
°rög_swôch_íåy_t
 *, 
èbÀ
,

1482 , 
èbÀ_size
) {

1483 *
the_°rög
;

1485 i‡(
°r
->
subty≥
 =
STRING_SHARED
)

1486 
the_°rög
 = 
°r
->
u
.
°rög
;

1488 i‡(!(
the_°rög
 = 
	`föd°rög
(
°r
->
u
.
°rög
)))

1493 
èbÀ
->
°rög
) {

1494 i‡(
the_°rög
 =
èbÀ
->
°rög
ËÅabÀ->
ödex
;

1495 
èbÀ
++;

1498 
	}
}

1500 
c_evÆu©e
 
	$P1
(, 
num
) {

1501 
svÆue_t
 *
v
;

1502 
svÆue_t
 *
¨g
 = 
•
 - 
num
 + 1;

1504 i‡(
¨g
->
ty≥
 !
T_FUNCTION
) {

1505 
	`p›_n_ñems
(
num
-1);

1508 i‡(
cuºít_obje˘
->
Êags
 & 
O_DESTRUCTED
) {

1509 
	`p›_n_ñems
(
num
);

1510 
	`push_undeföed
();

1513 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
¨g
->
u
.
Â
, 
num
 - 1);

1514 
	`‰ì_fu≈
(
¨g
->
u
.
Â
);

1515 
	`assign_svÆue_no_‰ì
(
•
, 
v
);

1516 
	}
}

1518 
c_ønge_swôch_lookup
 
	$P3
(, 
num
, 
ønge_swôch_íåy_t
 *, 
èbÀ
,

1519 , 
èbÀ_size
) {

1522 
èbÀ
->
ödex2
 != -2) {

1523 i‡(
èbÀ
->
ödex2
 == -1) {

1524 i‡(
èbÀ
->
ödex1
 <
num
 &&Çum <= (table+1)->index1)

1525  (
èbÀ
+1)->
ödex2
;

1526 
èbÀ
 += 2;

1528 i‡(
èbÀ
->
ödex1
 =
num
ËÅabÀ->
ödex2
;

1529 
èbÀ
++;

1533 
	}
}

1535 
c_make_ªf
 
	$P1
(, 
›
) {

1536 
ªf_t
 *
ªf
;

1542 
ªf
->
lvÆue
 = 
•
->
u
.lvalue;

1543 i‡(
›
 !
F_GLOBAL_LVALUE
 && o∞!
F_LOCAL_LVALUE
) {

1544 
ªf
->
sv
.
ty≥
 = 
lv_ow√r_ty≥
;

1545 
ªf
->
sv
.
subty≥
 = 
STRING_MALLOC
;

1546 i‡(
lv_ow√r_ty≥
 =
T_STRING
) {

1547 
ªf
->
sv
.
u
.
°rög
 = (*)
lv_ow√r
;

1548 
	`INC_COUNTED_REF
(
lv_ow√r
);

1549 
	`ADD_STRING
(
	`MSTR_SIZE
(
lv_ow√r
));

1550 
	`NDBG
(
	`BLOCK
(
lv_ow√r
));

1552 
ªf
->
sv
.
u
.
ª„d
 = 
lv_ow√r
;

1553 
lv_ow√r
->
ªf
++;

1554 i‡(
lv_ow√r_ty≥
 =
T_MAPPING
)

1555 ((
m≠pög_t
 *)
lv_ow√r
)->
cou¡
 |
MAP_LOCKED
;

1558 
ªf
->
sv
.
ty≥
 = 
T_NUMBER
;

1560 
•
->
ty≥
 = 
T_REF
;

1561 
•
->
u
.
ªf
 =Ñef;

1562 
	}
}

1564 
c_kûl_ªfs
 
	$P1
(, 
num
) {

1565 
num
--)

1566 
	`kûl_ªf
(
globÆ_ªf_li°
);

1567 
	}
}

	@cfuns.h

1 #i‚de‡
CFUNS_H


2 
	#CFUNS_H


	)

4 
	~"Õc_ö˛.h
"

6 #ifde‡
LPC_TO_C


8 
	mödex1
, 
	mödex2
;

9 } 
	tønge_swôch_íåy_t
;

11 
	s°rög_swôch_íåy_s
 {

12 *
	m°rög
;

13 
	mödex
;

14 } 
	t°rög_swôch_íåy_t
;

16 
m¨k_swôch_li°s
 
PROT
(());

18 
Õc_öt
;

19 
svÆue_t
 *
Õc_svp
;

20 
¨øy_t
 *
Õc_¨r
;

21 
m≠pög_t
 *
Õc_m≠
;

23 
c_ªtu∫
 
PROT
(());

24 
c_ªtu∫_zîo
 
PROT
(());

25 
c_ˇŒ_öhîôed
 
PROT
((, , ));

26 
c_ˇŒ
 
PROT
((, ));

27 
c_efun_ªtu∫
 
PROT
(());

28 
c_void_assign
 
PROT
(());

29 
c_po°_dec
 
PROT
(());

30 
c_po°_öc
 
PROT
(());

31 
c_¥e_dec
 
PROT
(());

32 
c_¥e_öc
 
PROT
(());

33 
c_assign
 
PROT
(());

34 
c_void_assign_loˇl
 
PROT
((
svÆue_t
 *));

35 
c_ödex
 
PROT
(());

36 
c_rödex
 
PROT
(());

37 
c_fun˘i⁄_c⁄°ru˘‹
 
PROT
((, ));

38 
c_nŸ
 
PROT
(());

39 
c_mod
 
PROT
(());

40 
c_add_eq
 
PROT
(());

41 
c_divide
 
PROT
(());

42 
c_mu…ùly
 
PROT
(());

43 
c_öc
 
PROT
(());

44 
c_dec
 
PROT
(());

45 
c_À
 
PROT
(());

46 
c_…
 
PROT
(());

47 
c_gt
 
PROT
(());

48 
c_ge
 
PROT
(());

49 
c_subåa˘
 
PROT
(());

50 
c_evÆu©e
 
PROT
(());

51 
c_√g©e
 
PROT
(());

52 
c_com∂
 
PROT
(());

53 
c_add
 
PROT
(());

54 
c_lo›_c⁄d_com∑ª
 
PROT
((
svÆue_t
 *, svalue_t *));

55 
c_ssˇnf
 
PROT
(());

56 
c_∑r£_comm™d
 
PROT
(());

57 
c_¥ï¨e_ˇtch
 
PROT
((
îr‹_c⁄ãxt_t
 *));

58 
c_ˇught_îr‹
 
PROT
((
îr‹_c⁄ãxt_t
 *));

59 
c_íd_ˇtch
 
PROT
((
îr‹_c⁄ãxt_t
 *));

60 
c_fun˘i⁄Æ
 
PROT
((, , 
POINTER_INT
));

61 
fix_swôches
 
PROT
((
°rög_swôch_íåy_t
 **));

62 
c_°rög_swôch_lookup
 
PROT
((
svÆue_t
 *, 
°rög_swôch_íåy_t
 *, ));

63 
c_ønge_swôch_lookup
 
PROT
((, 
ønge_swôch_íåy_t
 *, ));

64 
c_f‹óch
 
PROT
((, , ));

65 
c_√xt_f‹óch
 
PROT
(());

66 
c_exô_f‹óch
 
PROT
(());

67 
c_™⁄ymous
 
PROT
((, , 
POINTER_INT
));

68 
c_ex∑nd_v¨¨gs
 
PROT
(());

69 
c_√w_˛ass
 
PROT
((, ));

70 
c_membî_lvÆue
 
PROT
(());

71 
c_membî
 
PROT
(());

	@class.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

4 
dóŒoc_˛ass
 
	$P1
(
¨øy_t
 *, 
p
) {

5 
i
;

7 
i
 = 
p
->
size
; i--;)

8 
	`‰ì_svÆue
(&
p
->
ôem
[
i
], "dealloc_class");

9 
	`FREE
((*Ë
p
);

10 
	}
}

12 
‰ì_˛ass
 
	$P1
(
¨øy_t
 *, 
p
)

14 i‡(--(
p
->
ªf
) > 0)

17 
	`dóŒoc_˛ass
(
p
);

18 
	}
}

20 
¨øy_t
 *
Æloˇã_˛ass
 
	$P2
(
˛ass_def_t
 *, 
˛d
, , 
has_vÆues
) {

21 
¨øy_t
 *
p
;

22 
n
 = 
˛d
->
size
;

24 
p
 = (
¨øy_t
 *)
	`DXALLOC
(◊ºay_tË+ (
svÆue_t
Ë* (
n
 - 1), 
TAG_CLASS
, "allocate_class");

25 
p
->
ªf
 = 1;

26 
p
->
size
 = 
n
;

27 i‡(
has_vÆues
) {

28 
n
--)

29 
p
->
ôem
[
n
] = *
•
--;

31 
n
--)

32 
p
->
ôem
[
n
] = 
c⁄°0
;

34  
p
;

35 
	}
}

37 
¨øy_t
 *
Æloˇã_˛ass_by_size
 
	$P1
(, 
size
) {

38 
¨øy_t
 *
p
;

40 
p
 = (
¨øy_t
 *)
	`DXALLOC
(◊ºay_tË+ (
svÆue_t
Ë* (
size
 - 1), 
TAG_CLASS
, "allocate_class");

41 
p
->
ªf
 = 1;

42 
p
->
size
 = size;

44 
size
--)

45 
p
->
ôem
[
size
] = 
c⁄°0
;

47  
p
;

48 
	}
}

50 
¨øy_t
 *
Æloˇã_em±y_˛ass_by_size
 
	$P1
(, 
size
) {

51 
¨øy_t
 *
p
;

53 
p
 = (
¨øy_t
 *)
	`DXALLOC
(◊ºay_tË+ (
svÆue_t
Ë* (
size
 - 1), 
TAG_CLASS
, "allocate_class");

54 
p
->
ªf
 = 1;

55 
p
->
size
 = size;

57  
p
;

58 
	}
}

	@class.h

1 #i‚de‡
CLASS_H


2 
	#CLASS_H


	)

7 
dóŒoc_˛ass
 
PROT
((
¨øy_t
 *));

8 
‰ì_˛ass
 
PROT
((
¨øy_t
 *));

9 
¨øy_t
 *
Æloˇã_˛ass
 
PROT
((
˛ass_def_t
 *, ));

10 
¨øy_t
 *
Æloˇã_˛ass_by_size
 
PROT
(());

11 
¨øy_t
 *
Æloˇã_em±y_˛ass_by_size
 
PROT
(());

	@comm.c

5 
	~"°d.h
"

6 
	~"comm.h
"

7 
	~"maö.h
"

8 
	~"sockë_efuns.h
"

9 
	~"backíd.h
"

10 
	~"sockë_˘æ.h
"

11 
	~"debug.h
"

12 
	~"ed.h
"

13 
	~"fûe.h
"

14 
	~"ma°î.h
"

15 
	~"add_a˘i⁄.h
"

17 
	gã ë_bªak_ª•⁄£
[] = { 28, 
IAC
, 
WILL
, 
TELOPT_TM
 };

18 
	gã ë_ù_ª•⁄£
[] = { 127, 
IAC
, 
WILL
, 
TELOPT_TM
 };

19 
	gã ë_ab‹t_ª•⁄£
[] = { 
IAC
, 
DM
 };

20 
	gã ë_do_tm_ª•⁄£
[] = { 
IAC
, 
WILL
, 
TELOPT_TM
 };

21 
	gã ë_do_«ws
[] = { 
IAC
, 
DO
, 
TELOPT_NAWS
 };

22 
	gã ë_do_ây≥
[] = { 
IAC
, 
DO
, 
TELOPT_TTYPE
 };

23 
	gã ë_ãrm_quîy
[] = { 
IAC
, 
SB
, 
TELOPT_TTYPE
, 
TELQUAL_SEND
, IAC, 
SE
 };

24 
	gã ë_no_echo
[] = { 
IAC
, 
WONT
, 
TELOPT_ECHO
 };

25 
	gã ë_no_sögÀ
[] = { 
IAC
, 
WONT
, 
TELOPT_SGA
 };

26 
	gã ë_yes_echo
[] = { 
IAC
, 
WILL
, 
TELOPT_ECHO
 };

27 
	gã ë_yes_sögÀ
[] = { 
IAC
, 
WILL
, 
TELOPT_SGA
 };

28 
	gã ë_ga
[] = { 
IAC
, 
GA
 };

29 
	gã ë_ayt_ª•⁄£
[] = { '\n', '[', '-', 'Y', 'e', 's', '-', ']', ' ', '\n' };

30 
	gã ë_löe_mode
[] = { 
IAC
, 
DO
, 
TELOPT_LINEMODE
 };

31 
	gã ë_lm_mode
[] = { 
IAC
, 
SB
, 
TELOPT_LINEMODE
, 
LM_MODE
, 
MODE_EDIT
 | 
MODE_TRAPSIG
, IAC, 
SE
 };

32 
	gã ë_ch¨_mode
[] = { 
IAC
, 
DONT
, 
TELOPT_LINEMODE
 };

34 
	g¶c_deÁu…_Êags
[] = { 
SLC_NOSUPPORT
, 
SLC_CANTCHANGE
, SLC_CANTCHANGE, SLC_CANTCHANGE, SLC_CANTCHANGE, SLC_NOSUPPORT,

35 
SLC_NOSUPPORT
, SLC_NOSUPPORT, 
SLC_CANTCHANGE
, SLC_CANTCHANGE, SLC_NOSUPPORT, SLC_NOSUPPORT,

36 
SLC_NOSUPPORT
, SLC_NOSUPPORT, SLC_NOSUPPORT, SLC_NOSUPPORT, SLC_NOSUPPORT, SLC_NOSUPPORT };

37 
	g¶c_deÁu…_ch¨s
[] = { 0x00, 
BREAK
, 
IP
, 
AO
, 
AYT
, 0x00, 0x00, 0x00, 
SUSP
, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

38 #ifde‡
DEBUG


39 *
	g¶c_«mes
[] = { 
SLC_NAMELIST
 };

45 #ifde‡
SIGNAL_FUNC_TAKES_INT


46 
sigpùe_h™dÀr
 
PROT
(());

48 
sigpùe_h™dÀr
 
PROT
(());

51 
h«me_h™dÀr
 
PROT
(());

52 
gë_u£r_d©a
 
PROT
((
öãø˘ive_t
 *));

53 *
gë_u£r_comm™d
 
PROT
(());

54 *
fú°_cmd_ö_buf
 
PROT
((
öãø˘ive_t
 *));

55 
cmd_ö_buf
 
PROT
((
öãø˘ive_t
 *));

56 
ˇŒ_fun˘i⁄_öãø˘ive
 
PROT
((
öãø˘ive_t
 *, *));

57 
¥öt_¥om±
 
PROT
((
öãø˘ive_t
 *));

58 
quîy_addr_«me
 
PROT
((
obje˘_t
 *));

59 
gŸ_addr_numbî
 
PROT
((*, *));

60 
add_ù_íåy
 
PROT
((, *));

61 
√w_u£r_h™dÀr
 
PROT
(());

63 #ifde‡
NO_SNOOP


64 
	#h™dÀ_¢o›
(
°r
, 
Àn
, 
who
)

	)

66 
	#h™dÀ_¢o›
(
°r
, 
Àn
, 
who
Ëi‡((who)->
¢o›ed_by
Ë
	`ª˚ive_¢o›
(°r,Üí, who->¢o›ed_by)

	)

68 
ª˚ive_¢o›
 
PROT
((*, , 
obje˘_t
 * 
ob
));

75 
fd_£t
 
	gªadmask
, 
	gwrôemask
;

76 
	gnum_u£r
;

77 #ifde‡
F_SET_HIDE


78 
	gnum_hiddí_u£rs
 = 0;

84 
	gadd_mesßge_ˇŒs
 = 0;

85 #ifde‡
F_NETWORK_STATS


86 
	göë_out_∑ckës
 = 0;

87 
	göë_out_vﬁume
 = 0;

88 
	göë_ö_∑ckës
 = 0;

89 
	göë_ö_vﬁume
 = 0;

90 #ifde‡
PACKAGE_SOCKETS


91 
	göë_sockë_ö_∑ckës
 = 0;

92 
	göë_sockë_ö_vﬁume
 = 0;

93 
	göë_sockë_out_∑ckës
 = 0;

94 
	göë_sockë_out_vﬁume
 = 0;

97 
	göë_∑ckës
 = 0;

98 
	göë_vﬁume
 = 0;

99 
öãø˘ive_t
 **
	gÆl_u£rs
 = 0;

100 
	gmax_u£rs
 = 0;

105 
	gaddr_£rvî_fd
 = -1;

108 
£t_löemode
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

110 i‡(
ù
->
iÊags
 & 
USING_LINEMODE
) {

111 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_löe_mode
, (telnet_line_mode));

112 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_lm_mode
, (telnet_lm_mode));

114 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_no_sögÀ
, (telnet_no_single));

116 
	}
}

119 
£t_ch¨mode
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

121 i‡(
ù
->
iÊags
 & 
USING_LINEMODE
) {

122 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_ch¨_mode
, (telnet_char_mode));

124 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_yes_sögÀ
, (telnet_yes_single));

126 
	}
}

128 #i‚de‡
NO_SNOOP


130 
ª˚ive_¢o›
 
	$P3
(*, 
buf
, , 
Àn
, 
obje˘_t
 *, 
¢o›î
)

133 #ifde‡
RECEIVE_SNOOP


134 *
°r
;

136 
°r
 = 
	`√w_°rög
(
Àn
, "receive_snoop");

137 
	`mem˝y
(
°r
, 
buf
, 
Àn
);

138 
°r
[
Àn
] = 0;

139 
	`push_mÆlo˚d_°rög
(
°r
);

140 
	`≠∂y
(
APPLY_RECEIVE_SNOOP
, 
¢o›î
, 1, 
ORIGIN_DRIVER
);

143 
	`add_mesßge
(
¢o›î
, "%", 1);

144 
	`add_mesßge
(
¢o›î
, 
buf
, 
Àn
);

146 
	}
}

152 
	$öô_u£r_c⁄n
()

154 
sockaddr_ö
 
sö
;

155 
sö_Àn
;

156 
›tvÆ
;

157 
i
;

158 
have_fd6
;

159 
fd6_which
;

162 
›tvÆ
 = 1;

163 
have_fd6
 = (
	`£tsock›t
(6, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
›tvÆ
, (optval)) == 0);

165 
i
=0; i < 5; i++) {

166 #ifde‡
F_NETWORK_STATS


167 
exã∫Æ_p‹t
[
i
].
ö_∑ckës
 = 0;

168 
exã∫Æ_p‹t
[
i
].
ö_vﬁume
 = 0;

169 
exã∫Æ_p‹t
[
i
].
out_∑ckës
 = 0;

170 
exã∫Æ_p‹t
[
i
].
out_vﬁume
 = 0;

172 i‡(!
exã∫Æ_p‹t
[
i
].
p‹t
) {

173 i‡(!
have_fd6
) ;

174 
fd6_which
 = 
i
;

175 
have_fd6
 = 0;

176 i‡(
FD6_KIND
 =
PORT_UNDEFINED
 || 
FD6_PORT
 < 1) {

177 
	`debug_mesßge
("SocketÖassedÅo fd 6 ignored (support is disabled).\n");

181 
	`debug_mesßge
("Ac˚±ög c⁄√˘i⁄†⁄ fd 6 (p‹à%d).\n", 
FD6_PORT
);

182 
exã∫Æ_p‹t
[
i
].
köd
 = 
FD6_KIND
;

183 
exã∫Æ_p‹t
[
i
].
p‹t
 = 
FD6_PORT
;

184 
exã∫Æ_p‹t
[
i
].
fd
 = 6;

189 i‡((
exã∫Æ_p‹t
[
i
].
fd
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0)) == -1) {

190 
	`debug_≥º‹
("init_user_conn: socket", 0);

191 
	`exô
(1);

197 
›tvÆ
 = 1;

198 i‡(
	`£tsock›t
(
exã∫Æ_p‹t
[
i
].
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

199 (*Ë&
›tvÆ
, (optval)) == -1) {

200 
	`sockë_≥º‹
("init_user_conn: setsockopt", 0);

201 
	`exô
(2);

207 
sö
.
sö_Ámûy
 = 
AF_INET
;

209 i‡(
MUD_IP
[0]Ë
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(MUD_IP);

210 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

212 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
exã∫Æ_p‹t
[
i
].
p‹t
);

216 i‡(
	`böd
(
exã∫Æ_p‹t
[
i
].
fd
, (
sockaddr
 *Ë& 
sö
,

217 (
sö
)) == -1) {

218 
	`sockë_≥º‹
("init_user_conn: bind", 0);

219 
	`exô
(3);

225 
sö_Àn
 = (
sö
);

226 i‡(
	`gësock«me
(
exã∫Æ_p‹t
[
i
].
fd
, (
sockaddr
 *Ë& 
sö
,

227 &
sö_Àn
) == -1) {

228 
	`sockë_≥º‹
("init_user_conn: getsockname", 0);

229 i‡(
i
 !
fd6_which
) {

230 
	`exô
(4);

236 i‡(
	`£t_sockë_n⁄blockög
(
exã∫Æ_p‹t
[
i
].
fd
, 1) == -1) {

237 
	`sockë_≥º‹
("init_user_conn: set_socket_nonblocking 1", 0);

238 i‡(
i
 !
fd6_which
) {

239 
	`exô
(8);

245 i‡(
	`li°í
(
exã∫Æ_p‹t
[
i
].
fd
, 128) == -1) {

246 
	`sockë_≥º‹
("init_user_conn:Üisten", 0);

247 i‡(
i
 !
fd6_which
) {

248 
	`exô
(10);

252 i‡(
have_fd6
) {

253 
	`debug_mesßge
("No moreÖortsávailable; fd #6 ignored.\n");

258 #i‡!
	`deföed
(
LATTICE
Ë&& deföed(
SIGPIPE
)

259 i‡(
	`sig«l
(
SIGPIPE
, 
sigpùe_h™dÀr
Ë=
SIGNAL_ERROR
) {

260 
	`debug_≥º‹
("init_user_conn: signal SIGPIPE",0);

261 
	`exô
(5);

264 
	}
}

269 
	$ùc_ªmove
()

271 
i
;

273 
i
 = 0; i < 5; i++) {

274 i‡(!
exã∫Æ_p‹t
[
i
].
p‹t
) ;

275 i‡(
	`OS_sockë_˛o£
(
exã∫Æ_p‹t
[
i
].
fd
) == -1) {

276 
	`sockë_≥º‹
("ipc_remove: close", 0);

280 
	`debug_mesßge
("closedÉxternalÖorts\n");

281 
	}
}

283 
öô_addr_£rvî
 
	$P2
(*, 
ho°«me
, , 
addr_£rvî_p‹t
)

285 
sockaddr_ö
 
£rvî
;

286 
ho°ít
 *
hp
;

287 
£rvî_fd
;

288 
›tvÆ
;

289 
addr
;

291 i‡(
addr_£rvî_fd
 >= 0)

294 i‡(!
ho°«me
) ;

299 i‡(
ho°«me
[0] >= '0' && hostname[0] <= '9' &&

300 (
addr
 = 
	`öë_addr
(
ho°«me
)) != -1) {

301 
hp
 = 
	`gëho°byaddr
((*)&
addr
, ◊ddr), 
AF_INET
);

303 
hp
 = 
	`gëho°by«me
(
ho°«me
);

305 i‡(
hp
 =
NULL
) {

306 
	`sockë_≥º‹
("init_addr_server: gethostbyname", 0);

313 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

314 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
addr_£rvî_p‹t
);

315 
£rvî
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ho°«me
);

316 
	`mem˝y
((*Ë&
£rvî
.
sö_addr
, (*Ë
hp
->
h_addr
, hp->
h_Àngth
);

320 
£rvî_fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

321 i‡(
£rvî_fd
 =
INVALID_SOCKET
) {

322 
	`sockë_≥º‹
("init_addr_server: socket", 0);

328 
›tvÆ
 = 1;

329 i‡(
	`£tsock›t
(
£rvî_fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›tvÆ
,

330 (
›tvÆ
)) == -1) {

331 
	`sockë_≥º‹
("init_addr_server: setsockopt", 0);

337 i‡(
	`c⁄√˘
(
£rvî_fd
, (
sockaddr
 *Ë& 
£rvî
, (server)) == -1) {

338 i‡(
sockë_î∫o
 =
ECONNREFUSED
)

339 
	`debug_mesßge
("ConnectionÅoáddress server (%s %d)Ñefused.\n",

340 
ho°«me
, 
addr_£rvî_p‹t
);

342 
	`sockë_≥º‹
("init_addr_server: connect", 0);

343 
	`OS_sockë_˛o£
(
£rvî_fd
);

346 
addr_£rvî_fd
 = 
£rvî_fd
;

347 
	`debug_mesßge
("C⁄√˘edÅÿaddªs†£rvî o¿%†p‹à%d\n", 
ho°«me
,

348 
addr_£rvî_p‹t
);

352 i‡(
	`£t_sockë_n⁄blockög
(
£rvî_fd
, 1) == -1) {

353 
	`sockë_≥º‹
("init_addr_server: set_socket_nonblocking 1", 0);

356 
	}
}

369 #i‡!
deföed
(
INTERACTIVE_CATCH_TELL
Ë&& !deföed(
NO_SHADOWS
)

370 
	#SHADOW_CATCH_MESSAGE


	)

373 #ifde‡
SHADOW_CATCH_MESSAGE


374 
shadow_ˇtch_mesßge
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
°r
)

376 i‡(!
ob
->
shadowed
)

378 
ob
->
shadowed
 !0 && ob->shadowed !
cuºít_obje˘
)

379 
ob
 = ob->
shadowed
;

380 
ob
->
shadowög
) {

381 
	`c›y_™d_push_°rög
(
°r
);

382 i‡(
	`≠∂y
(
APPLY_CATCH_TELL
, 
ob
, 1, 
ORIGIN_DRIVER
))

386 
ob
 = ob->
shadowög
;

389 
	}
}

396 
add_mesßge
 
	$P3
(
obje˘_t
 *, 
who
, *, 
d©a
, , 
Àn
)

398 
öãø˘ive_t
 *
ù
;

399 *
˝
;

400 *
íd
;

406 i‡(!
who
 || (who->
Êags
 & 
O_DESTRUCTED
Ë|| !who->
öãø˘ive
 ||

407 (
who
->
öãø˘ive
->
iÊags
 & (
NET_DEAD
 | 
CLOSING
))) {

408 #ifde‡
NONINTERACTIVE_STDERR_WRITE


409 
	`putc
(']', 
°dîr
);

410 
	`fwrôe
(
d©a
, 
Àn
, 1, 
°dîr
);

412 #ifde‡
LATTICE


413 
	`fÊush
(
°dîr
);

417 
ù
 = 
who
->
öãø˘ive
;

418 #ifde‡
SHADOW_CATCH_MESSAGE


422 i‡(
	`shadow_ˇtch_mesßge
(
who
, 
d©a
)) {

423 #ifde‡
SNOOP_SHADOWED


424 
	`h™dÀ_¢o›
(
d©a
, 
Àn
, 
ù
);

433 
íd
 = 
d©a
 + 
Àn
;

434 
˝
 = 
d©a
; c∞< 
íd
; cp++) {

435 i‡(
ù
->
mesßge_Àngth
 =
MESSAGE_BUF_SIZE
) {

436 i‡(!
	`Êush_mesßge
(
ù
)) {

437 
	`debug
(
c⁄√˘i⁄s
, ("Broken connection duringádd_message."));

440 i‡(
ù
->
mesßge_Àngth
 =
MESSAGE_BUF_SIZE
)

443 i‡(*
˝
 == '\n'

444 #i‚de‡
NO_BUFFER_TYPE


445 && 
ù
->
c⁄√˘i⁄_ty≥
 !
PORT_BINARY


448 i‡(
ù
->
mesßge_Àngth
 =(
MESSAGE_BUF_SIZE
 - 1)) {

449 i‡(!
	`Êush_mesßge
(
ù
)) {

450 
	`debug
(
c⁄√˘i⁄s
, ("Broken connection duringádd_message."));

453 i‡(
ù
->
mesßge_Àngth
 =(
MESSAGE_BUF_SIZE
 - 1))

456 
ù
->
mesßge_buf
[ù->
mesßge_¥odu˚r
] = '\r';

457 
ù
->
mesßge_¥odu˚r
 = (ip->message_producer + 1)

458 % 
MESSAGE_BUF_SIZE
;

459 
ù
->
mesßge_Àngth
++;

461 
ù
->
mesßge_buf
[ù->
mesßge_¥odu˚r
] = *
˝
;

462 
ù
->
mesßge_¥odu˚r
 = (ù->mesßge_¥odu˚∏+ 1Ë% 
MESSAGE_BUF_SIZE
;

463 
ù
->
mesßge_Àngth
++;

466 
	`h™dÀ_¢o›
(
d©a
, 
Àn
, 
ù
);

468 #ifde‡
FLUSH_OUTPUT_IMMEDIATELY


469 
	`Êush_mesßge
(
ù
);

472 
add_mesßge_ˇŒs
++;

473 
	}
}

476 
add_vmesßge
 
	$P2V
(
obje˘_t
 *, 
who
, *, 
f‹m©
)

478 
Àn
;

479 
öãø˘ive_t
 *
ù
;

480 *
˝
, 
√w_°rög_d©a
[
LARGEST_PRINTABLE_STRING
 + 1];

481 
va_li°
 
¨gs
;

482 
	`V_DCL
(*
f‹m©
);

483 
	`V_DCL
(
obje˘_t
 *
who
);

485 
	`V_START
(
¨gs
, 
f‹m©
);

486 
	`V_VAR
(
obje˘_t
 *, 
who
, 
¨gs
);

487 
	`V_VAR
(*, 
f‹m©
, 
¨gs
);

492 i‡(!
who
 || (who->
Êags
 & 
O_DESTRUCTED
Ë|| !who->
öãø˘ive
 ||

493 (
who
->
öãø˘ive
->
iÊags
 & (
NET_DEAD
 | 
CLOSING
))) {

494 #ifde‡
NONINTERACTIVE_STDERR_WRITE


495 
	`putc
(']', 
°dîr
);

496 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

498 
	`va_íd
(
¨gs
);

499 #ifde‡
LATTICE


500 
	`fÊush
(
°dîr
);

504 
ù
 = 
who
->
öãø˘ive
;

505 
√w_°rög_d©a
[0] = '\0';

512 
	`v•rötf
(
√w_°rög_d©a
, 
f‹m©
, 
¨gs
);

513 
	`va_íd
(
¨gs
);

514 
Àn
 = 
	`°æí
(
√w_°rög_d©a
);

515 #ifde‡
SHADOW_CATCH_MESSAGE


519 i‡(
	`shadow_ˇtch_mesßge
(
who
, 
√w_°rög_d©a
)) {

520 #ifde‡
SNOOP_SHADOWED


521 
	`h™dÀ_¢o›
(
√w_°rög_d©a
, 
Àn
, 
ù
);

530 
˝
 = 
√w_°rög_d©a
; *cp != '\0'; cp++) {

531 i‡(
ù
->
mesßge_Àngth
 =
MESSAGE_BUF_SIZE
) {

532 i‡(!
	`Êush_mesßge
(
ù
)) {

533 
	`debug
(
c⁄√˘i⁄s
, ("Broken connection duringádd_message."));

536 i‡(
ù
->
mesßge_Àngth
 =
MESSAGE_BUF_SIZE
)

539 i‡(*
˝
 == '\n') {

540 i‡(
ù
->
mesßge_Àngth
 =(
MESSAGE_BUF_SIZE
 - 1)) {

541 i‡(!
	`Êush_mesßge
(
ù
)) {

542 
	`debug
(
c⁄√˘i⁄s
, ("Broken connection duringádd_message.\n"));

545 i‡(
ù
->
mesßge_Àngth
 =(
MESSAGE_BUF_SIZE
 - 1))

548 
ù
->
mesßge_buf
[ù->
mesßge_¥odu˚r
] = '\r';

549 
ù
->
mesßge_¥odu˚r
 = (ip->message_producer + 1)

550 % 
MESSAGE_BUF_SIZE
;

551 
ù
->
mesßge_Àngth
++;

553 
ù
->
mesßge_buf
[ù->
mesßge_¥odu˚r
] = *
˝
;

554 
ù
->
mesßge_¥odu˚r
 = (ù->mesßge_¥odu˚∏+ 1Ë% 
MESSAGE_BUF_SIZE
;

555 
ù
->
mesßge_Àngth
++;

557 i‡(
ù
->
mesßge_Àngth
 != 0) {

558 i‡(!
	`Êush_mesßge
(
ù
)) {

559 
	`debug
(
c⁄√˘i⁄s
, ("Broken connection duringádd_message.\n"));

564 
	`h™dÀ_¢o›
(
√w_°rög_d©a
, 
Àn
, 
ù
);

566 #ifde‡
FLUSH_OUTPUT_IMMEDIATELY


567 
	`Êush_mesßge
(
ù
);

570 
add_mesßge_ˇŒs
++;

571 
	}
}

573 
add_bö¨y_mesßge
 
	$P3
(
obje˘_t
 *, 
who
, *, 
d©a
, , 
Àn
)

575 
öãø˘ive_t
 *
ù
;

576 *
˝
, *
íd
;

581 i‡(!
who
 || (who->
Êags
 & 
O_DESTRUCTED
Ë|| !who->
öãø˘ive
 ||

582 (
who
->
öãø˘ive
->
iÊags
 & (
NET_DEAD
 | 
CLOSING
))) {

585 
ù
 = 
who
->
öãø˘ive
;

590 
íd
 = 
d©a
 + 
Àn
;

591 
˝
 = 
d©a
; c∞< 
íd
; cp++) {

592 i‡(
ù
->
mesßge_Àngth
 =
MESSAGE_BUF_SIZE
) {

593 i‡(!
	`Êush_mesßge
(
ù
)) {

594 
	`debug
(
c⁄√˘i⁄s
, ("Broken connection duringádd_message."));

597 i‡(
ù
->
mesßge_Àngth
 =
MESSAGE_BUF_SIZE
)

600 
ù
->
mesßge_buf
[ù->
mesßge_¥odu˚r
] = *
˝
;

601 
ù
->
mesßge_¥odu˚r
 = (ù->mesßge_¥odu˚∏+ 1Ë% 
MESSAGE_BUF_SIZE
;

602 
ù
->
mesßge_Àngth
++;

605 
	`Êush_mesßge
(
ù
);

606 
add_mesßge_ˇŒs
++;

607 
	}
}

612 
Êush_mesßge
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

614 
Àngth
, 
num_byãs
;

619 i‡(!
ù
 || (ù->
iÊags
 & (
NET_DEAD
 | 
CLOSING
))) {

620 
	`debug
(
c⁄√˘i⁄s
, ("flush_message: invalidÅarget!\n"));

626 
ù
->
mesßge_Àngth
 != 0) {

627 i‡(
ù
->
mesßge_c⁄sumî
 < ip->
mesßge_¥odu˚r
) {

628 
Àngth
 = 
ù
->
mesßge_¥odu˚r
 - ip->
mesßge_c⁄sumî
;

630 
Àngth
 = 
MESSAGE_BUF_SIZE
 - 
ù
->
mesßge_c⁄sumî
;

635 
num_byãs
 = 
	`£nd
(
ù
->
fd
, ip->
mesßge_buf
 + ip->
mesßge_c⁄sumî
,

636 
Àngth
, 
ù
->
out_of_b™d
);

637 i‡(!
num_byãs
) {

638 
ù
->
iÊags
 |
NET_DEAD
;

641 i‡(
num_byãs
 == -1) {

642 #ifde‡
EWOULDBLOCK


643 i‡(
sockë_î∫o
 =
EWOULDBLOCK
) {

644 
	`debug
(
c⁄√˘i⁄s
, ("flush_message: write: Operation would block\n"));

650 } i‡(
sockë_î∫o
 =
EINTR
) {

651 
	`debug
(
c⁄√˘i⁄s
, ("flush_message: write: Interrupted system call"));

654 
	`sockë_≥º‹
("flush_message: write", 0);

655 
ù
->
iÊags
 |
NET_DEAD
;

659 
ù
->
mesßge_c⁄sumî
 = (ù->mesßge_c⁄sumî + 
num_byãs
) %

660 
MESSAGE_BUF_SIZE
;

661 
ù
->
mesßge_Àngth
 -
num_byãs
;

662 
ù
->
out_of_b™d
 = 0;

663 
öë_∑ckës
++;

664 
öë_vﬁume
 +
num_byãs
;

665 #ifde‡
F_NETWORK_STATS


666 
öë_out_∑ckës
++;

667 
öë_out_vﬁume
 +
num_byãs
;

668 
exã∫Æ_p‹t
[
ù
->exã∫Æ_p‹t].
out_∑ckës
++;

669 
exã∫Æ_p‹t
[
ù
->exã∫Æ_p‹t].
out_vﬁume
 +
num_byãs
;

673 
	}
}

675 
c›y_ch¨s
 
	$P3
(
öãø˘ive_t
 *, 
ù
, *, 
‰om
, , 
num_byãs
)

677 
i
, 
°¨t
, 
x
;

678 
d⁄t_ª•⁄£
[3] = { 
IAC
, 
DONT
, 0 };

679 
w⁄t_ª•⁄£
[3] = { 
IAC
, 
WONT
, 0 };

681 
°¨t
 = 
ù
->
ãxt_íd
;

682 
i
 = 0; i < 
num_byãs
; i++) {

683 
ù
->
°©e
) {

684 
TS_DATA
:

685 ()
‰om
[
i
]) {

686 
IAC
:

687 
ù
->
°©e
 = 
TS_IAC
;

690 #i‡
	`deföed
(
NO_ANSI
Ë&& deföed(
STRIP_BEFORE_PROCESS_INPUT
)

692 
ù
->
ãxt
[ù->
ãxt_íd
++] = 0x20;

698 i‡(
ù
->
iÊags
 & 
SINGLE_CHAR
)

699 
ù
->
ãxt
[ù->
ãxt_íd
++] = 
‰om
[
i
];

701 i‡(
ù
->
ãxt_íd
 > 0)

702 
ù
->
ãxt_íd
--;

707 
ù
->
ãxt
[ù->
ãxt_íd
++] = 
‰om
[
i
];

712 
TS_IAC
:

713 ()
‰om
[
i
]) {

714 
IAC
:

715 
ù
->
°©e
 = 
TS_DATA
;

716 
ù
->
ãxt
[ù->
ãxt_íd
++] = 
‰om
[
i
];

719 
WILL
:

720 
ù
->
°©e
 = 
TS_WILL
;

723 
WONT
:

724 
ù
->
°©e
 = 
TS_WONT
;

727 
DO
:

728 
ù
->
°©e
 = 
TS_DO
;

731 
DONT
:

732 
ù
->
°©e
 = 
TS_DONT
;

735 
SB
:

736 
ù
->
°©e
 = 
TS_SB
;

737 
ù
->
sb_pos
 = 0;

740 
BREAK
:

741 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_bªak_ª•⁄£
, (telnet_break_response));

744 
IP
:

745 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_ù_ª•⁄£
, (telnet_ip_response));

748 
AYT
:

749 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_ayt_ª•⁄£
, (telnet_ayt_response));

752 
AO
:

753 
	`Êush_mesßge
(
ù
);

754 
ù
->
out_of_b™d
 = 
MSG_OOB
;

755 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_ab‹t_ª•⁄£
, (telnet_abort_response));

759 
ù
->
°©e
 = 
TS_DATA
;

764 
TS_WILL
:

765 
ù
->
iÊags
 |
USING_TELNET
;

766 ()
‰om
[
i
]) {

767 
TELOPT_TTYPE
:

768 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_ãrm_quîy
, (telnet_term_query));

771 
TELOPT_LINEMODE
:

773 
ù
->
iÊags
 |
USING_LINEMODE
;

774 
	`£t_löemode
(
ù
);

777 
TELOPT_ECHO
:

778 
TELOPT_NAWS
:

783 
d⁄t_ª•⁄£
[2] = 
‰om
[
i
];

784 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
d⁄t_ª•⁄£
, (dont_response));

787 
ù
->
°©e
 = 
TS_DATA
;

790 
TS_WONT
:

791 
ù
->
iÊags
 |
USING_TELNET
;

792 ()
‰om
[
i
]) {

793 
TELOPT_LINEMODE
:

797 i‡(!(
ù
->
iÊags
 & 
SINGLE_CHAR
))

798 
ù
->
iÊags
 &~
USING_LINEMODE
;

801 
ù
->
°©e
 = 
TS_DATA
;

804 
TS_DO
:

805 ()
‰om
[
i
]) {

806 
TELOPT_TM
:

807 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_do_tm_ª•⁄£
, (telnet_do_tm_response));

810 
TELOPT_SGA
:

811 i‡(
ù
->
iÊags
 & 
USING_LINEMODE
) {

812 
ù
->
iÊags
 |
SUPPRESS_GA
;

813 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_yes_sögÀ
, (telnet_yes_single));

815 i‡(
ù
->
iÊags
 & 
SINGLE_CHAR
)

816 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_yes_sögÀ
, (telnet_yes_single));

818 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_no_sögÀ
, (telnet_no_single));

822 
TELOPT_ECHO
:

827 
w⁄t_ª•⁄£
[2] = 
‰om
[
i
];

828 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
w⁄t_ª•⁄£
, (wont_response));

831 
ù
->
°©e
 = 
TS_DATA
;

834 
TS_DONT
:

835 ()
‰om
[
i
]) {

836 
TELOPT_SGA
:

837 i‡(
ù
->
iÊags
 & 
USING_LINEMODE
) {

838 
ù
->
iÊags
 &~
SUPPRESS_GA
;

839 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
ã ë_no_sögÀ
, (telnet_no_single));

843 
ù
->
°©e
 = 
TS_DATA
;

846 
TS_SB
:

847 i‡(()
‰om
[
i
] =
IAC
) {

848 
ù
->
°©e
 = 
TS_SB_IAC
;

851 i‡(
ù
->
sb_pos
 < 
SB_SIZE
 - 1)

852 
ù
->
sb_buf
[ù->
sb_pos
++] = 
‰om
[
i
];

855 
TS_SB_IAC
:

856 ()
‰om
[
i
]) {

857 
IAC
:

858 i‡(
ù
->
sb_pos
 < 
SB_SIZE
 - 1) {

859 
ù
->
sb_buf
[ù->
sb_pos
++] = 
‰om
[
i
];

860 
ù
->
°©e
 = 
TS_SB
;

864 
SE
:

865 
ù
->
°©e
 = 
TS_DATA
;

866 
ù
->
sb_buf
[ù->
sb_pos
] = 0;

867 
ù
->
sb_buf
[0]) {

868 
TELOPT_LINEMODE
:

869 ()
ù
->
sb_buf
[1]) {

870 
LM_MODE
:

872 i‡(!(
ù
->
sb_buf
[2] & 
MODE_ACK
)) {

873 
sb_ack
[] = { 
IAC
, 
SB
, 
TELOPT_LINEMODE
, 
LM_MODE
, 
MODE_EDIT
 | 
MODE_TRAPSIG
 | 
MODE_ACK
, IAC, 
SE
 };

876 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
sb_ack
, (sb_ack));

880 
LM_SLC
:

882 
¶c_Àngth
 = 4;

883 
¶c_ª•⁄£
[
SB_SIZE
 + 6] = { 
IAC
, 
SB
, 
TELOPT_LINEMODE
, 
LM_SLC
 };

885 
x
 = 2; x < 
ù
->
sb_pos
; x += 3) {

887 i‡(
ù
->
sb_buf
[
x
 + 1] & 
SLC_ACK
)

892 i‡(!
ù
->
sb_buf
[
x
] && !ip->sb_buf[x + 2]) {

893 i‡(
ù
->
sb_buf
[
x
 + 1] =
SLC_DEFAULT
 || ip->sb_buf[x + 1] =
SLC_VARIABLE
) {

894 
n
;

896 
n
 = 0;Ç < 
NSLC
;Ç++) {

897 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
n
 + 1;

898 i‡(
ù
->
sb_buf
[
x
 + 1] =
SLC_DEFAULT
) {

899 
ù
->
¶c
[
n
][0] = 
¶c_deÁu…_Êags
[n];

900 
ù
->
¶c
[
n
][1] = 
¶c_deÁu…_ch¨s
[n];

901 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_DEFAULT
;

903 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
¶c
[
n
][0];

905 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
¶c
[
n
][1];

911 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
sb_buf
[
x
]--;

915 i‡(
ù
->
sb_buf
[
x
] >
NSLC
 || 
¶c_deÁu…_Êags
[()ù->sb_buf[x]] =
SLC_NOSUPPORT
) {

916 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_NOSUPPORT
;

917 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
sb_buf
[
x
 + 2];

918 i‡(()
ù
->
sb_buf
[
x
 + 2] =
IAC
)

919 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
IAC
;

923 (
ù
->
sb_buf
[
x
 + 1] & 
SLC_LEVELBITS
)) {

924 
SLC_NOSUPPORT
:

925 i‡(
¶c_deÁu…_Êags
[()
ù
->
sb_buf
[
x
]] =
SLC_CANTCHANGE
) {

926 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_CANTCHANGE
;

927 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
¶c
[()ù->
sb_buf
[
x
]][1];

930 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_ACK
 | 
SLC_NOSUPPORT
;

931 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
sb_buf
[
x
 + 2];

932 
ù
->
¶c
[()ù->
sb_buf
[
x
]][0] = 
SLC_NOSUPPORT
;

933 
ù
->
¶c
[()ù->
sb_buf
[
x
]][1] = 0;

936 
SLC_VARIABLE
:

937 i‡(
¶c_deÁu…_Êags
[()
ù
->
sb_buf
[
x
]] =
SLC_CANTCHANGE
) {

938 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_CANTCHANGE
;

939 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
¶c
[()ù->
sb_buf
[
x
]][1];

942 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_ACK
 | 
SLC_VARIABLE
;

943 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
sb_buf
[
x
 + 2];

944 
ù
->
¶c
[()ù->
sb_buf
[
x
]][0] = ip->sb_buf[x + 1];

945 
ù
->
¶c
[()ù->
sb_buf
[
x
]][1] = ip->sb_buf[x + 2];

948 
SLC_CANTCHANGE
:

949 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_ACK
 | 
SLC_CANTCHANGE
;

950 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
sb_buf
[
x
 + 2];

951 
ù
->
¶c
[()ù->
sb_buf
[
x
]][0] = ip->sb_buf[x + 1];

952 
ù
->
¶c
[()ù->
sb_buf
[
x
]][1] = ip->sb_buf[x + 2];

955 
SLC_DEFAULT
:

956 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
¶c_deÁu…_Êags
[()
ù
->
sb_buf
[
x
]];

957 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
¶c_deÁu…_Êags
[()
ù
->
sb_buf
[
x
]];

958 
ù
->
¶c
[()ù->
sb_buf
[
x
]][0] = 
¶c_deÁu…_Êags
[()ip->sb_buf[x]];

959 
ù
->
¶c
[()ù->
sb_buf
[
x
]][1] = 
¶c_deÁu…_ch¨s
[()ip->sb_buf[x]];

963 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SLC_NOSUPPORT
;

964 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
ù
->
sb_buf
[
x
 + 2];

965 i‡(()
¶c_ª•⁄£
[
¶c_Àngth
 - 1] =
IAC
)

966 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
IAC
;

971 i‡(
¶c_Àngth
 > 4) {

973 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
IAC
;

974 
¶c_ª•⁄£
[
¶c_Àngth
++] = 
SE
;

975 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
¶c_ª•⁄£
, 
¶c_Àngth
);

980 
DO
:

982 
sb_w⁄t
[] = { 
IAC
, 
SB
, 
TELOPT_LINEMODE
, 
WONT
, 0, IAC, 
SE
 };

985 
sb_w⁄t
[4] = 
ù
->
sb_buf
[2];

986 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
sb_w⁄t
, (sb_wont));

990 
WILL
:

992 
sb_d⁄t
[] = { 
IAC
, 
SB
, 
TELOPT_LINEMODE
, 
DONT
, 0, IAC, 
SE
 };

995 
sb_d⁄t
[4] = 
ù
->
sb_buf
[2];

996 
	`add_bö¨y_mesßge
(
ù
->
ob
, 
sb_d⁄t
, (sb_dont));

1002 
TELOPT_NAWS
:

1003 i‡(
ù
->
sb_pos
 >= 5) {

1004 
	`push_numbî
((()
ù
->
sb_buf
[1] << 8) | ()ip->sb_buf[2]);

1005 
	`push_numbî
((()
ù
->
sb_buf
[3] << 8) | ()ip->sb_buf[4]);

1006 
	`≠∂y
(
APPLY_WINDOW_SIZE
, 
ù
->
ob
, 2, 
ORIGIN_DRIVER
);

1010 
TELOPT_TTYPE
:

1011 i‡(!
ù
->
sb_buf
[1]) {

1012 
	`c›y_™d_push_°rög
(
ù
->
sb_buf
 + 2);

1013 
	`≠∂y
(
APPLY_TERMINAL_TYPE
, 
ù
->
ob
, 1, 
ORIGIN_DRIVER
);

1018 
x
 = 0; x < 
ù
->
sb_pos
; x++)

1019 
ù
->
sb_buf
[
x
] = (ip->sb_buf[x] ? ip->sb_buf[x] : 'I');

1020 
	`c›y_™d_push_°rög
(
ù
->
sb_buf
);

1021 
	`≠∂y
(
APPLY_TELNET_SUBOPTION
, 
ù
->
ob
, 1, 
ORIGIN_DRIVER
);

1035 
ù
->
°©e
 = 
TS_SB
;

1042 i‡(
ù
->
ãxt_íd
 > 
°¨t
) {

1045 i‡(!(
ù
->
iÊags
 & 
NOECHO
))

1046 
	`h™dÀ_¢o›
(
ù
->
ãxt
 + 
°¨t
, ip->
ãxt_íd
 - start, ip);

1048 
	}
}

1054 
gë_u£r_d©a
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

1056 
num_byãs
, 
ãxt_•a˚
;

1057 
buf
[
MAX_TEXT
];

1060 
ù
->
c⁄√˘i⁄_ty≥
)

1062 
PORT_TELNET
:

1063 
ãxt_•a˚
 = 
MAX_TEXT
 - 
ù
->
ãxt_íd
;

1066 i‡(
ãxt_•a˚
 < 
MAX_TEXT
 / 16) {

1067 i‡(
ù
->
ãxt_°¨t
 > 0) {

1068 
	`memmove
(
ù
->
ãxt
, ip->ãxà+ ip->
ãxt_°¨t
, ip->
ãxt_íd
 - ip->text_start);

1069 
ãxt_•a˚
 +
ù
->
ãxt_°¨t
;

1070 
ù
->
ãxt_íd
 -ù->
ãxt_°¨t
;

1071 
ù
->
ãxt_°¨t
 = 0;

1074 i‡(
ãxt_•a˚
 < 
MAX_TEXT
 / 16) {

1076 
ù
->
iÊags
 |
SKIP_COMMAND
;

1077 
ù
->
ãxt_°¨t
 = ip->
ãxt_íd
 = 0;

1078 
ãxt_•a˚
 = 
MAX_TEXT
;

1083 
PORT_MUD
:

1084 i‡(
ù
->
ãxt_íd
 < 4)

1085 
ãxt_•a˚
 = 4 - 
ù
->
ãxt_íd
;

1087 
ãxt_•a˚
 = *(*)
ù
->
ãxt
 - ip->
ãxt_íd
 + 4;

1091 
ãxt_•a˚
 = (
buf
);

1096 
	`debug
(
c⁄√˘i⁄s
, ("gë_u£r_d©a:Ñód o¿fd %d\n", 
ù
->
fd
));

1097 
num_byãs
 = 
	`OS_sockë_ªad
(
ù
->
fd
, 
buf
, 
ãxt_•a˚
);

1099 i‡(!
num_byãs
) {

1100 i‡(
ù
->
iÊags
 & 
CLOSING
)

1101 
	`debug_mesßge
("get_user_data:ÅriedÅoÑead from closing fd.\n");

1102 
ù
->
iÊags
 |
NET_DEAD
;

1103 
	`ªmove_öãø˘ive
(
ù
->
ob
, 0);

1107 i‡(
num_byãs
 == -1) {

1108 #ifde‡
EWOULDBLOCK


1109 i‡(
sockë_î∫o
 =
EWOULDBLOCK
) {

1110 
	`debug
(
c⁄√˘i⁄s
, ("gë_u£r_d©a:Ñód o¿fd %d: O≥øti⁄ would block.\n", 
ù
->
fd
));

1114 
	`debug_mesßge
("gë_u£r_d©a:Ñód o¿fd %d\n", 
ù
->
fd
);

1115 
	`sockë_≥º‹
("get_user_data:Ñead", 0);

1116 
ù
->
iÊags
 |
NET_DEAD
;

1117 
	`ªmove_öãø˘ive
(
ù
->
ob
, 0);

1121 #ifde‡
F_NETWORK_STATS


1122 
öë_ö_∑ckës
++;

1123 
öë_ö_vﬁume
 +
num_byãs
;

1124 
exã∫Æ_p‹t
[
ù
->exã∫Æ_p‹t].
ö_∑ckës
++;

1125 
exã∫Æ_p‹t
[
ù
->exã∫Æ_p‹t].
ö_vﬁume
 +
num_byãs
;

1129 
ù
->
c⁄√˘i⁄_ty≥
)

1131 
PORT_TELNET
:

1132 
	`c›y_ch¨s
(
ù
, 
buf
, 
num_byãs
);

1133 i‡(
	`cmd_ö_buf
(
ù
))

1134 
ù
->
iÊags
 |
CMD_IN_BUF
;

1137 
PORT_MUD
:

1138 
	`mem˝y
(
ù
->
ãxt
 + ip->
ãxt_íd
, 
buf
, 
num_byãs
);

1139 
ù
->
ãxt_íd
 +
num_byãs
;

1141 i‡(
num_byãs
 =
ãxt_•a˚
) {

1142 i‡(
ù
->
ãxt_íd
 == 4) {

1143 *(*)
ù
->
ãxt
 = 
	`¡ohl
(*(*)ip->text);

1144 i‡(*(*)
ù
->
ãxt
 > 
MAX_TEXT
 - 5)

1145 
	`ªmove_öãø˘ive
(
ù
->
ob
, 0);

1147 
svÆue_t
 
vÆue
;

1149 
ù
->
ãxt
[ù->
ãxt_íd
] = 0;

1150 i‡(
	`ª°‹e_svÆue
(
ù
->
ãxt
 + 4, &
vÆue
) == 0) {

1151 
STACK_INC
;

1152 *
•
 = 
vÆue
;

1154 
	`push_undeföed
();

1156 
ù
->
ãxt_íd
 = 0;

1157 
	`≠∂y
(
APPLY_PROCESS_INPUT
, 
ù
->
ob
, 1, 
ORIGIN_DRIVER
);

1162 
PORT_ASCII
:

1164 *
∆
, *
p
;

1166 
	`mem˝y
(
ù
->
ãxt
 + ip->
ãxt_íd
, 
buf
, 
num_byãs
);

1167 
ù
->
ãxt_íd
 +
num_byãs
;

1169 
p
 = 
ù
->
ãxt
 + ip->
ãxt_°¨t
;

1170 (
∆
 = 
	`memchr
(
p
, '\n', 
ù
->
ãxt_íd
 - ip->
ãxt_°¨t
))) {

1171 
ù
->
ãxt_°¨t
 = (
∆
 + 1Ë- ip->
ãxt
;

1173 *
∆
 = 0;

1174 i‡(*(
∆
 - 1) == '\r')

1175 *--
∆
 = 0;

1177 i‡(!(
ù
->
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1178 *
°r
;

1180 
°r
 = 
	`√w_°rög
(
∆
 - 
p
, "PORT_ASCII");

1181 
	`mem˝y
(
°r
, 
p
, 
∆
 -Ö + 1);

1182 
	`push_mÆlo˚d_°rög
(
°r
);

1183 
	`≠∂y
(
APPLY_PROCESS_INPUT
, 
ù
->
ob
, 1, 
ORIGIN_DRIVER
);

1186 i‡(
ù
->
ãxt_°¨t
 =ù->
ãxt_íd
) {

1187 
ù
->
ãxt_°¨t
 = ip->
ãxt_íd
 = 0;

1191 
p
 = 
∆
 + 1;

1196 #i‚de‡
NO_BUFFER_TYPE


1197 
PORT_BINARY
:

1199 
buf„r_t
 *
buf„r
;

1201 
buf„r
 = 
	`Æloˇã_buf„r
(
num_byãs
);

1202 
	`mem˝y
(
buf„r
->
ôem
, 
buf
, 
num_byãs
);

1204 
	`push_ª„d_buf„r
(
buf„r
);

1205 
	`≠∂y
(
APPLY_PROCESS_INPUT
, 
ù
->
ob
, 1, 
ORIGIN_DRIVER
);

1210 
	}
}

1212 
˛ón_buf
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

1215 
ù
->
ãxt_°¨t
 < ip->
ãxt_íd
 && !*(ù->
ãxt
 + ip->text_start))

1216 
ù
->
ãxt_°¨t
++;

1219 i‡(
ù
->
ãxt_°¨t
 >ù->
ãxt_íd
) {

1220 
ù
->
ãxt_°¨t
 = ip->
ãxt_íd
 = 0;

1225 i‡(
ù
->
iÊags
 & 
SKIP_COMMAND
) {

1226 *
p
;

1228 
p
 = 
ù
->
ãxt
 + ip->
ãxt_°¨t
;Ö < ip->ãxà+ ip->
ãxt_íd
;Ö++) {

1229 i‡(*
p
 == '\r' || *p == '\n') {

1230 
ù
->
ãxt_°¨t
 +
p
 - (ù->
ãxt
 + ip->text_start) + 1;

1231 
ù
->
iÊags
 &~
SKIP_COMMAND
;

1232  
	`˛ón_buf
(
ù
);

1237  (
ù
->
ãxt_íd
 > ip->
ãxt_°¨t
);

1238 
	}
}

1240 
cmd_ö_buf
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

1242 *
p
;

1245 i‡(!
	`˛ón_buf
(
ù
))

1249 i‡(
ù
->
iÊags
 & 
SINGLE_CHAR
)

1253 
p
 = 
ù
->
ãxt
 + ip->
ãxt_°¨t
;Ö < ip->ãxà+ ip->
ãxt_íd
;Ö++) {

1254 i‡(*
p
 == '\r' || *p == '\n')

1260 
	}
}

1262 *
fú°_cmd_ö_buf
 
	$P1
(
öãø˘ive_t
 *, 
ù
)

1264 *
p
;

1265 #ifde‡
GET_CHAR_IS_BUFFERED


1266 
tmp
[2];

1270 i‡(!
	`˛ón_buf
(
ù
))

1273 
p
 = 
ù
->
ãxt
 + ip->
ãxt_°¨t
;

1276 i‡(
ù
->
iÊags
 & 
SINGLE_CHAR
) {

1277 i‡(*
p
 == 8 || *p == 127)

1278 *
p
 = 0;

1279 #i‚de‡
GET_CHAR_IS_BUFFERED


1280 
ù
->
ãxt_°¨t
++;

1281 i‡(!
	`˛ón_buf
(
ù
))

1282 
ù
->
iÊags
 &~
CMD_IN_BUF
;

1283  
p
;

1285 
tmp
[0] = *
p
;

1286 
ù
->
ãxt
[ù->
ãxt_°¨t
++] = 0;

1287 i‡(!
	`˛ón_buf
(
ù
))

1288 
ù
->
iÊags
 &~
CMD_IN_BUF
;

1289  
tmp
;

1294 
ù
->
ãxt
[ù->
ãxt_°¨t
] != '\n' && ip->text[ip->text_start] != '\r')

1295 
ù
->
ãxt_°¨t
++;

1298 i‡(
ù
->
ãxt_°¨t
 + 1 < ip->
ãxt_íd
 &&

1299 ((
ù
->
ãxt
[ù->
ãxt_°¨t
] == '\r' && ip->text[ip->text_start + 1] == '\n') ||

1300 (
ù
->
ãxt
[ù->
ãxt_°¨t
] == '\n' && ip->text[ip->text_start + 1] == '\r'))) {

1301 
ù
->
ãxt
[ù->
ãxt_°¨t
++] = 0;

1304 
ù
->
ãxt
[ù->
ãxt_°¨t
++] = 0;

1305 i‡(!
	`cmd_ö_buf
(
ù
))

1306 
ù
->
iÊags
 &~
CMD_IN_BUF
;

1308  
p
;

1309 
	}
}

1313 #ifde‡
SIGNAL_FUNC_TAKES_INT


1314 
sigpùe_h™dÀr
 
	$P1
(, 
sig
)

1316 
	$sigpùe_h™dÀr
()

1319 
	`debug
(
c⁄√˘i⁄s
, ("SIGPIPEÑeceived."));

1320 
	`sig«l
(
SIGPIPE
, 
sigpùe_h™dÀr
);

1321 
	}
}

1326 #ifde‡
SIGNAL_FUNC_TAKES_INT


1327 
sigÆrm_h™dÀr
 
	$P1
(, 
sig
)

1329 
	$sigÆrm_h™dÀr
()

1332 
hóπ_bót_Êag
 = 1;

1333 
	}
}

1335 
INLINE
 
	$make_£À˘masks
()

1337 
i
;

1342 
	`FD_ZERO
(&
ªadmask
);

1343 
	`FD_ZERO
(&
wrôemask
);

1347 
i
 = 0; i < 5; i++) {

1348 i‡(!
exã∫Æ_p‹t
[
i
].
p‹t
) ;

1349 
	`FD_SET
(
exã∫Æ_p‹t
[
i
].
fd
, &
ªadmask
);

1354 
i
 = 0; i < 
max_u£rs
; i++) {

1355 i‡(!
Æl_u£rs
[
i
] || (Æl_u£rs[i]->
iÊags
 & (
CLOSING
 | 
CMD_IN_BUF
)))

1361 
	`FD_SET
(
Æl_u£rs
[
i
]->
fd
, &
ªadmask
);

1362 i‡(
Æl_u£rs
[
i
]->
mesßge_Àngth
 != 0)

1363 
	`FD_SET
(
Æl_u£rs
[
i
]->
fd
, &
wrôemask
);

1368 i‡(
addr_£rvî_fd
 >= 0) {

1369 
	`FD_SET
(
addr_£rvî_fd
, &
ªadmask
);

1371 #i‡
	`deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

1375 
i
 = 0; i < 
max_Õc_socks
; i++) {

1376 i‡(
Õc_socks
[
i
].
°©e
 !
STATE_CLOSED
) {

1377 i‡(
Õc_socks
[
i
].
°©e
 !
STATE_FLUSHING
 &&

1378 (
Õc_socks
[
i
].
Êags
 & 
S_WACCEPT
) == 0)

1379 
	`FD_SET
(
Õc_socks
[
i
].
fd
, &
ªadmask
);

1380 i‡(
Õc_socks
[
i
].
Êags
 & 
S_BLOCKED
)

1381 
	`FD_SET
(
Õc_socks
[
i
].
fd
, &
wrôemask
);

1385 
	}
}

1390 
INLINE
 
	$¥o˚ss_io
()

1392 
i
;

1397 
i
 = 0; i < 5; i++) {

1398 i‡(!
exã∫Æ_p‹t
[
i
].
p‹t
) ;

1399 i‡(
	`FD_ISSET
(
exã∫Æ_p‹t
[
i
].
fd
, &
ªadmask
)) {

1400 
	`debug
(
c⁄√˘i⁄s
, ("process_io: NEW_USER\n"));

1401 
	`√w_u£r_h™dÀr
(
i
);

1407 
i
 = 0; i < 
max_u£rs
; i++) {

1408 i‡(!
Æl_u£rs
[
i
] || (Æl_u£rs[i]->
iÊags
 & (
CLOSING
 | 
CMD_IN_BUF
)))

1410 i‡(
Æl_u£rs
[
i
]->
iÊags
 & 
NET_DEAD
) {

1411 
	`ªmove_öãø˘ive
(
Æl_u£rs
[
i
]->
ob
, 0);

1414 i‡(
	`FD_ISSET
(
Æl_u£rs
[
i
]->
fd
, &
ªadmask
)) {

1415 
	`debug
(
c⁄√˘i⁄s
, ("¥o˚ss_io: USER %d\n", 
i
));

1416 
	`gë_u£r_d©a
(
Æl_u£rs
[
i
]);

1417 i‡(!
Æl_u£rs
[
i
])

1420 i‡(
	`FD_ISSET
(
Æl_u£rs
[
i
]->
fd
, &
wrôemask
))

1421 
	`Êush_mesßge
(
Æl_u£rs
[
i
]);

1423 #i‡
	`deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

1427 
i
 = 0; i < 
max_Õc_socks
; i++) {

1428 i‡(
Õc_socks
[
i
].
°©e
 !
STATE_CLOSED
)

1429 i‡(
	`FD_ISSET
(
Õc_socks
[
i
].
fd
, &
ªadmask
))

1430 
	`sockë_ªad_£À˘_h™dÀr
(
i
);

1431 i‡(
Õc_socks
[
i
].
°©e
 !
STATE_CLOSED
)

1432 i‡(
	`FD_ISSET
(
Õc_socks
[
i
].
fd
, &
wrôemask
))

1433 
	`sockë_wrôe_£À˘_h™dÀr
(
i
);

1439 i‡(
addr_£rvî_fd
 >= 0) {

1440 i‡(
	`FD_ISSET
(
addr_£rvî_fd
, &
ªadmask
)) {

1441 
	`debug
(
c⁄√˘i⁄s
, ("process_io: IP_DAEMON\n"));

1442 
	`h«me_h™dÀr
();

1445 
	}
}

1453 
√w_u£r_h™dÀr
 
	$P1
(, 
which
)

1455 
√w_sockë_fd
;

1456 
sockaddr_ö
 
addr
;

1457 
Àngth
;

1458 
i
, 
x
;

1459 
obje˘_t
 *
ma°î
, *
ob
;

1460 
svÆue_t
 *
ªt
;

1462 
Àngth
 = (
addr
);

1463 
	`debug
(
c⁄√˘i⁄s
, ("√w_u£r_h™dÀr:ác˚± o¿fd %d\n", 
exã∫Æ_p‹t
[
which
].
fd
));

1464 
√w_sockë_fd
 = 
	`ac˚±
(
exã∫Æ_p‹t
[
which
].
fd
,

1465 (
sockaddr
 *Ë& 
addr
, (*Ë&
Àngth
);

1466 i‡(
√w_sockë_fd
 < 0) {

1467 #ifde‡
EWOULDBLOCK


1468 i‡(
sockë_î∫o
 =
EWOULDBLOCK
) {

1469 
	`debug
(
c⁄√˘i⁄s
, ("new_user_handler:áccept: Operation would block\n"));

1474 
	`sockë_≥º‹
("new_user_handler:áccept", 0);

1485 i‡(
	`£t_sockë_n⁄blockög
(
√w_sockë_fd
, 1) == -1) {

1486 
	`sockë_≥º‹
("new_user_handler: set_socket_nonblocking 1", 0);

1487 
	`OS_sockë_˛o£
(
√w_sockë_fd
);

1492 
i
 = 0; i < 
max_u£rs
; i++)

1493 i‡(!
Æl_u£rs
[
i
]) ;

1495 i‡(
i
 =
max_u£rs
) {

1496 i‡(
Æl_u£rs
) {

1497 
Æl_u£rs
 = 
	`RESIZE
◊Œ_u£rs, 
max_u£rs
 + 10, 
öãø˘ive_t
 *,

1498 
TAG_USERS
, "new_user_handler");

1500 
Æl_u£rs
 = 
	`CALLOCATE
(10, 
öãø˘ive_t
 *,

1501 
TAG_USERS
, "new_user_handler");

1503 
max_u£rs
 < 
i
 + 10)

1504 
Æl_u£rs
[
max_u£rs
++] = 0;

1507 
	`£t_comm™d_givî
(
ma°î_ob
);

1508 
ma°î_ob
->
öãø˘ive
 =

1509 (
öãø˘ive_t
 *)

1510 
	`DXALLOC
((
öãø˘ive_t
), 
TAG_INTERACTIVE
,

1512 #i‚de‡
NO_ADD_ACTION


1513 
ma°î_ob
->
öãø˘ive
->
deÁu…_îr_mesßge
.
s
 = 0;

1515 
ma°î_ob
->
öãø˘ive
->
c⁄√˘i⁄_ty≥
 = 
exã∫Æ_p‹t
[
which
].
köd
;

1516 
ma°î_ob
->
Êags
 |
O_ONCE_INTERACTIVE
;

1520 
ma°î_ob
->
öãø˘ive
->
ob
 = master_ob;

1521 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

1522 
ma°î_ob
->
öãø˘ive
->
öput_to
 = 0;

1524 
ma°î_ob
->
öãø˘ive
->
iÊags
 = 0;

1525 
ma°î_ob
->
öãø˘ive
->
ãxt
[0] = '\0';

1526 
ma°î_ob
->
öãø˘ive
->
ãxt_íd
 = 0;

1527 
ma°î_ob
->
öãø˘ive
->
ãxt_°¨t
 = 0;

1528 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

1529 
ma°î_ob
->
öãø˘ive
->
ˇºyovî
 = 
NULL
;

1530 
ma°î_ob
->
öãø˘ive
->
num_ˇºy
 = 0;

1532 #i‚de‡
NO_SNOOP


1533 
ma°î_ob
->
öãø˘ive
->
¢o›ed_by
 = 0;

1535 
ma°î_ob
->
öãø˘ive
->
œ°_time
 = 
cuºít_time
;

1536 #ifde‡
TRACE


1537 
ma°î_ob
->
öãø˘ive
->
åa˚_Àvñ
 = 0;

1538 
ma°î_ob
->
öãø˘ive
->
åa˚_¥efix
 = 0;

1540 #ifde‡
OLD_ED


1541 
ma°î_ob
->
öãø˘ive
->
ed_buf„r
 = 0;

1543 
ma°î_ob
->
öãø˘ive
->
mesßge_¥odu˚r
 = 0;

1544 
ma°î_ob
->
öãø˘ive
->
mesßge_c⁄sumî
 = 0;

1545 
ma°î_ob
->
öãø˘ive
->
mesßge_Àngth
 = 0;

1546 
ma°î_ob
->
öãø˘ive
->
°©e
 = 
TS_DATA
;

1547 
ma°î_ob
->
öãø˘ive
->
out_of_b™d
 = 0;

1548 
x
 = 0; x < 
NSLC
; x++) {

1549 
ma°î_ob
->
öãø˘ive
->
¶c
[
x
][0] = 
¶c_deÁu…_Êags
[x];

1550 
ma°î_ob
->
öãø˘ive
->
¶c
[
x
][1] = 
¶c_deÁu…_ch¨s
[x];

1552 
Æl_u£rs
[
i
] = 
ma°î_ob
->
öãø˘ive
;

1553 
Æl_u£rs
[
i
]->
fd
 = 
√w_sockë_fd
;

1554 #ifde‡
F_QUERY_IP_PORT


1555 
Æl_u£rs
[
i
]->
loˇl_p‹t
 = 
exã∫Æ_p‹t
[
which
].
p‹t
;

1557 #ifde‡
F_NETWORK_STATS


1558 
Æl_u£rs
[
i
]->
exã∫Æ_p‹t
 = 
which
;

1560 
	`£t_¥om±
("> ");

1562 
	`mem˝y
((*Ë&
Æl_u£rs
[
i
]->
addr
, (*Ë&addr, 
Àngth
);

1563 
	`debug
(
c⁄√˘i⁄s
, ("New c⁄√˘i⁄ from %s.\n", 
	`öë_¡ﬂ
(
addr
.
sö_addr
)));

1564 
num_u£r
++;

1571 
ma°î
 = 
ma°î_ob
;

1572 
	`add_ªf
(
ma°î_ob
, "new_user");

1573 
	`push_numbî
(
exã∫Æ_p‹t
[
which
].
p‹t
);

1574 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_CONNECT
, 1);

1577 
	`£t_comm™d_givî
(0);

1578 i‡(
ªt
 =0 ||Ñë =(
svÆue_t
 *)-1 ||Ñë->
ty≥
 !
T_OBJECT


1579 || !
ma°î_ob
->
öãø˘ive
) {

1580 i‡(
ma°î_ob
->
öãø˘ive
)

1581 
	`ªmove_öãø˘ive
(
ma°î_ob
, 0);

1583 
	`‰ì_obje˘
(
ma°î
, "new_user");

1584 
	`debug_mesßge
("C⁄√˘i⁄ from %†ab‹ãd.\n", 
	`öë_¡ﬂ
(
addr
.
sö_addr
));

1591 
	`‰ì_obje˘
(
ma°î
, "new_user");

1592 
ob
 = 
ªt
->
u
.ob;

1593 #ifde‡
F_SET_HIDE


1594 i‡(
ob
->
Êags
 & 
O_HIDDEN
)

1595 
num_hiddí_u£rs
++;

1597 
ob
->
öãø˘ive
 = 
ma°î_ob
->interactive;

1598 
ob
->
öãø˘ive
->ob = ob;

1599 
ob
->
Êags
 |
O_ONCE_INTERACTIVE
;

1604 
ob
->
öãø˘ive
->
iÊags
 |(
HAS_WRITE_PROMPT
 | 
HAS_PROCESS_INPUT
);

1606 
ma°î_ob
->
Êags
 &~
O_ONCE_INTERACTIVE
;

1607 
ma°î_ob
->
öãø˘ive
 = 0;

1608 
	`add_ªf
(
ob
, "new_user");

1609 
	`£t_comm™d_givî
(
ob
);

1610 i‡(
addr_£rvî_fd
 >= 0) {

1611 
	`quîy_addr_«me
(
ob
);

1614 i‡(
exã∫Æ_p‹t
[
which
].
köd
 =
PORT_TELNET
) {

1616 
	`add_bö¨y_mesßge
(
ob
, 
ã ë_do_ây≥
, (telnet_do_ttype));

1618 
	`add_bö¨y_mesßge
(
ob
, 
ã ë_do_«ws
, (telnet_do_naws));

1621 
	`log⁄
(
ob
);

1622 
	`debug
(
c⁄√˘i⁄s
, ("new_user_handler:Énd\n"));

1623 
	`£t_comm™d_givî
(0);

1624 
	}
}

1631 *
	$gë_u£r_comm™d
()

1633 
NextCmdGivî
 = 0;

1635 
i
;

1636 
öãø˘ive_t
 *
ù
;

1637 *
u£r_comm™d
 = 0;

1640 
i
 = 0; i < 
max_u£rs
; i++) {

1641 
ù
 = 
Æl_u£rs
[
NextCmdGivî
++];

1642 
NextCmdGivî
 %
max_u£rs
;

1644 i‡(!
ù
 || !ù->
ob
 || ip->ob->
Êags
 & 
O_DESTRUCTED
)

1648 i‡(
ù
->
mesßge_Àngth
) {

1649 
obje˘_t
 *
ob
 = 
ù
->ob;

1650 
	`Êush_mesßge
(
ù
);

1651 i‡(!
	`IP_VALID
(
ù
, 
ob
))

1656 i‡(
ù
->
iÊags
 & 
CMD_IN_BUF
) {

1657 
NextCmdGivî
++;

1658 
NextCmdGivî
 %
max_u£rs
;

1659 
u£r_comm™d
 = 
	`fú°_cmd_ö_buf
(
ù
);

1665 i‡(!
u£r_comm™d
)

1669 
	`debug
(
c⁄√˘i⁄s
, ("gë_u£r_comm™d: u£r_comm™d = (%s)\n", 
u£r_comm™d
));

1670 
	`ßve_comm™d_givî
(
ù
->
ob
);

1672 #i‚de‡
GET_CHAR_IS_BUFFERED


1673 i‡(
ù
->
iÊags
 & 
NOECHO
) {

1675 i‡((
ù
->
iÊags
 & 
NOECHO
Ë&& !(ù->iÊag†& 
SINGLE_CHAR
)) {

1678 
	`add_bö¨y_mesßge
(
comm™d_givî
, 
ã ë_no_echo
, (telnet_no_echo));

1679 
ù
->
iÊags
 &~
NOECHO
;

1682 
ù
->
œ°_time
 = 
cuºít_time
;

1683  
u£r_comm™d
;

1684 
	}
}

1686 
esˇ≥_comm™d
 
	$P2
(
öãø˘ive_t
 *, 
ù
, *, 
u£r_comm™d
)

1688 i‡(
u£r_comm™d
[0] != '!')

1690 #ifde‡
OLD_ED


1691 i‡(
ù
->
ed_buf„r
)

1694 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

1695 i‡(
ù
->
öput_to
 && !(ù->
iÊags
 & 
NOESC
))

1699 
	}
}

1701 
¥o˚ss_öput
 
	$P2
(
öãø˘ive_t
 *, 
ù
, *, 
u£r_comm™d
)

1703 
svÆue_t
 *
ªt
;

1705 i‡(!(
ù
->
iÊags
 & 
HAS_PROCESS_INPUT
)) {

1706 
	`∑r£_comm™d
(
u£r_comm™d
, 
comm™d_givî
);

1715 
	`c›y_™d_push_°rög
(
u£r_comm™d
);

1716 
ªt
 = 
	`≠∂y
(
APPLY_PROCESS_INPUT
, 
comm™d_givî
, 1, 
ORIGIN_DRIVER
);

1717 i‡(!
	`IP_VALID
(
ù
, 
comm™d_givî
))

1719 i‡(!
ªt
) {

1720 
ù
->
iÊags
 &~
HAS_PROCESS_INPUT
;

1721 
	`∑r£_comm™d
(
u£r_comm™d
, 
comm™d_givî
);

1725 #i‚de‡
NO_ADD_ACTION


1726 i‡(
ªt
->
ty≥
 =
T_STRING
) {

1727 
buf
[
MAX_TEXT
];

1729 
	`°∫˝y
(
buf
, 
ªt
->
u
.
°rög
, 
MAX_TEXT
 - 1);

1730 
	`∑r£_comm™d
(
buf
, 
comm™d_givî
);

1732 i‡(
ªt
->
ty≥
 !
T_NUMBER
 || !ªt->
u
.
numbî
)

1733 
	`∑r£_comm™d
(
u£r_comm™d
, 
comm™d_givî
);

1736 
	}
}

1744 
	$¥o˚ss_u£r_comm™d
()

1746 *
u£r_comm™d
;

1747 
öãø˘ive_t
 *
ù
;

1753 i‡(!(
u£r_comm™d
 = 
	`gë_u£r_comm™d
()))

1756 
ù
 = 
comm™d_givî
->
öãø˘ive
;

1757 
cuºít_öãø˘ive
 = 
comm™d_givî
;

1758 
	`˛ór_nŸify
(
ù
->
ob
);

1759 
	`upd©e_lﬂd_av
();

1760 
	`debug
(
c⁄√˘i⁄s
, ("¥o˚ss_u£r_comm™d: comm™d_givî = /%s\n", 
comm™d_givî
->
«me
));

1762 i‡(
	`esˇ≥_comm™d
(
ù
, 
u£r_comm™d
)) {

1763 i‡(
ù
->
iÊags
 & 
SINGLE_CHAR
) {

1765 
ù
->
iÊags
 |
WAS_SINGLE_CHAR
;

1766 
ù
->
iÊags
 &~
SINGLE_CHAR
;

1767 #ifde‡
GET_CHAR_IS_BUFFERED


1768 
ù
->
ãxt_°¨t
 = ip->
ãxt_íd
 = *ù->
ãxt
 = 0;

1770 
	`£t_löemode
(
ù
);

1772 i‡(
ù
->
iÊags
 & 
WAS_SINGLE_CHAR
) {

1774 
ù
->
iÊags
 &~
WAS_SINGLE_CHAR
;

1775 
ù
->
iÊags
 |
SINGLE_CHAR
;

1776 
	`£t_ch¨mode
(
ù
);

1777 i‡(!
	`IP_VALID
(
ù
, 
comm™d_givî
)) {

1778 
exô
;

1782 
	`¥o˚ss_öput
(
ù
, 
u£r_comm™d
 + 1);

1785 
exô
;

1788 #ifde‡
OLD_ED


1789 i‡(
ù
->
ed_buf„r
) {

1790 
	`ed_cmd
(
u£r_comm™d
);

1791 
exô
;

1795 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

1796 i‡(
	`ˇŒ_fun˘i⁄_öãø˘ive
(
ù
, 
u£r_comm™d
)) {

1797 
exô
;

1801 
	`¥o˚ss_öput
(
ù
, 
u£r_comm™d
);

1803 
exô
:

1807 i‡(
	`IP_VALID
(
ù
, 
comm™d_givî
))

1808 
	`¥öt_¥om±
(
ù
);

1810 
cuºít_öãø˘ive
 = 0;

1811 
	`ª°‹e_comm™d_givî
();

1813 
	}
}

1815 
	#HNAME_BUF_SIZE
 200

	)

1821 
	$h«me_h™dÀr
()

1823 
h«me_buf
[
HNAME_BUF_SIZE
];

1824 
h«me_buf_pos
;

1825 
num_byãs
;

1827 
num_byãs
 = 
HNAME_BUF_SIZE
 - 
h«me_buf_pos
 - 1;

1828 
num_byãs
 = 
	`OS_sockë_ªad
(
addr_£rvî_fd
, 
h«me_buf
 + 
h«me_buf_pos
,Çum_bytes);

1829 i‡(
num_byãs
 <= 0) {

1830 i‡(
num_byãs
 == -1) {

1831 #ifde‡
EWOULDBLOCK


1832 i‡(
sockë_î∫o
 =
EWOULDBLOCK
) {

1833 
	`debug
(
c⁄√˘i⁄s
, ("hname_handler:Ñead on fd %d: Operation would block.\n",

1834 
addr_£rvî_fd
));

1838 
	`debug_mesßge
("h«me_h™dÀr:Ñód o¿fd %d\n", 
addr_£rvî_fd
);

1839 
	`sockë_≥º‹
("hname_handler:Ñead", 0);

1841 
	`debug_mesßge
("hname_handler: closingáddress server connection.\n");

1843 
	`OS_sockë_˛o£
(
addr_£rvî_fd
);

1844 
addr_£rvî_fd
 = -1;

1848 
h«me_buf_pos
 +
num_byãs
;

1849 
h«me_buf
[
h«me_buf_pos
] = 0;

1850 
	`debug
(
c⁄√˘i⁄s
, ("h«me_h™dÀr:áddªs†£rvîÑïlõs: %s", 
h«me_buf
));

1852 
h«me_buf_pos
) {

1853 *
∆
, *
µ
;

1856 i‡(!(
∆
 = 
	`°rchr
(
h«me_buf
, '\n')))

1858 *
∆
++ = 0;

1860 i‡((
µ
 = 
	`°rchr
(
h«me_buf
, ' ')) != 0) {

1861 *
µ
++ = 0;

1862 
	`gŸ_addr_numbî
(
µ
, 
h«me_buf
);

1864 i‡(
	`isdigô
(
h«me_buf
[0])) {

1865 
œddr
;

1867 i‡((
œddr
 = 
	`öë_addr
(
h«me_buf
)Ë!
INADDR_NONE
) {

1868 i‡(
	`°rcmp
(
µ
, "0") != 0)

1869 
	`add_ù_íåy
(
œddr
, 
µ
);

1874 
h«me_buf_pos
 -(
∆
 - 
h«me_buf
);

1875 i‡(
h«me_buf_pos
)

1876 
	`memmove
(
h«me_buf
, 
∆
, 
h«me_buf_pos
 + 1);

1878 
	}
}

1883 
ªmove_öãø˘ive
 
	$P2
(
obje˘_t
 *, 
ob
, , 
de°ed
)

1885 
idx
;

1892 
öãø˘ive_t
 *
ù
 = 
ob
->
öãø˘ive
;

1894 i‡(!
ù
) ;

1896 i‡(
ù
->
iÊags
 & 
CLOSING
) {

1897 i‡(!
de°ed
)

1898 
	`debug_mesßge
("Double callÅoÑemove_interactive()\n");

1902 
	`debug
(
c⁄√˘i⁄s
, ("Closing connection from %s.\n",

1903 
	`öë_¡ﬂ
(
ù
->
addr
.
sö_addr
)));

1905 
	`Êush_mesßge
(
ù
);

1906 
ù
->
iÊags
 |
CLOSING
;

1908 #ifde‡
OLD_ED


1909 i‡(
ù
->
ed_buf„r
) {

1910 
	`ßve_ed_buf„r
(
ob
);

1913 i‡(
ob
->
Êags
 & 
O_IN_EDIT
) {

1914 
	`obje˘_ßve_ed_buf„r
(
ob
);

1915 
ob
->
Êags
 &~
O_IN_EDIT
;

1919 i‡(!
de°ed
) {

1923 
	`ßve_comm™d_givî
(
ob
);

1924 
	`ß„_≠∂y
(
APPLY_NET_DEAD
, 
ob
, 0, 
ORIGIN_DRIVER
);

1925 
	`ª°‹e_comm™d_givî
();

1928 #i‚de‡
NO_SNOOP


1929 i‡(
ù
->
¢o›ed_by
) {

1930 
ù
->
¢o›ed_by
->
Êags
 &~
O_SNOOP
;

1931 
ù
->
¢o›ed_by
 = 0;

1935 
	`debug
(
c⁄√˘i⁄s
, ("ªmove_öãø˘ive: closög fd %d\n", 
ù
->
fd
));

1936 i‡(
	`OS_sockë_˛o£
(
ù
->
fd
) == -1) {

1937 
	`sockë_≥º‹
("remove_interactive: close", 0);

1939 #ifde‡
F_SET_HIDE


1940 i‡(
ob
->
Êags
 & 
O_HIDDEN
)

1941 
num_hiddí_u£rs
--;

1943 
num_u£r
--;

1944 
	`˛ór_nŸify
(
ù
->
ob
);

1945 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

1946 i‡(
ù
->
öput_to
) {

1947 
	`‰ì_obje˘
(
ù
->
öput_to
->
ob
, "remove_interactive");

1948 
	`‰ì_£¡í˚
(
ù
->
öput_to
);

1949 i‡(
ù
->
num_ˇºy
 > 0)

1950 
	`‰ì_some_svÆues
(
ù
->
ˇºyovî
, ip->
num_ˇºy
);

1951 
ù
->
ˇºyovî
 = 
NULL
;

1952 
ù
->
num_ˇºy
 = 0;

1953 
ù
->
öput_to
 = 0;

1956 
idx
 = 0; idx < 
max_u£rs
; idx++)

1957 i‡(
Æl_u£rs
[
idx
] =
ù
) ;

1958 
	`DEBUG_CHECK
(
idx
 =
max_u£rs
, "remove_interactive: couldÇot findándÑemove user!\n");

1959 
	`FREE
(
ù
);

1960 
ob
->
öãø˘ive
 = 0;

1961 
Æl_u£rs
[
idx
] = 0;

1962 
	`‰ì_obje˘
(
ob
, "remove_interactive");

1964 
	}
}

1966 #i‡
deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

1967 
ˇŒ_fun˘i⁄_öãø˘ive
 
	$P2
(
öãø˘ive_t
 *, 
i
, *, 
°r
)

1969 
obje˘_t
 *
ob
;

1970 
fu≈å_t
 *
fu≈
;

1971 *
fun˘i⁄
;

1972 
svÆue_t
 *
¨gs
;

1973 
£¡í˚_t
 *
£¡
;

1974 
num_¨g
;

1975 #ifde‡
GET_CHAR_IS_BUFFERED


1976 
was_sögÀ
 = 0;

1977 
was_n€cho
 = 0;

1980 
i
->
iÊags
 &~
NOESC
;

1981 i‡(!(
£¡
 = 
i
->
öput_to
))

1988 i‡(
£¡
->
ob
->
Êags
 & 
O_DESTRUCTED
) {

1990 
	`‰ì_obje˘
(
£¡
->
ob
, "call_function_interactive");

1991 
	`‰ì_£¡í˚
(
£¡
);

1992 
i
->
öput_to
 = 0;

1993 i‡(
i
->
num_ˇºy
)

1994 
	`‰ì_some_svÆues
(
i
->
ˇºyovî
, i->
num_ˇºy
);

1995 
i
->
ˇºyovî
 = 
NULL
;

1996 
i
->
num_ˇºy
 = 0;

2003 
	`‰ì_obje˘
(
£¡
->
ob
, "call_function_interactive");

2005 
STACK_INC
;

2006 i‡(
£¡
->
Êags
 & 
V_FUNCTION
) {

2007 
fun˘i⁄
 = 0;

2008 
•
->
ty≥
 = 
T_FUNCTION
;

2009 
•
->
u
.
Â
 = 
fu≈
 = 
£¡
->
fun˘i⁄
.
f
;

2010 
fu≈
->
hdr
.
ªf
++;

2012 
•
->
ty≥
 = 
T_STRING
;

2013 
•
->
subty≥
 = 
STRING_SHARED
;

2014 
•
->
u
.
°rög
 = 
fun˘i⁄
 = 
£¡
->fun˘i⁄.
s
;

2015 
	`ªf_°rög
(
fun˘i⁄
);

2017 
ob
 = 
£¡
->ob;

2018 
	`‰ì_£¡í˚
(
£¡
);

2024 
num_¨g
 = 
i
->
num_ˇºy
;

2025 i‡(
num_¨g
) {

2026 
¨gs
 = 
i
->
ˇºyovî
;

2027 
i
->
num_ˇºy
 = 0;

2028 
i
->
ˇºyovî
 = 
NULL
;

2030 
¨gs
 = 
NULL
;

2032 
i
->
öput_to
 = 0;

2033 i‡(
i
->
iÊags
 & 
SINGLE_CHAR
) {

2037 
i
->
iÊags
 &~
SINGLE_CHAR
;

2038 #i‚de‡
GET_CHAR_IS_BUFFERED


2039 
	`£t_löemode
(
i
);

2041 
was_sögÀ
 = 1;

2042 i‡(
i
->
iÊags
 & 
NOECHO
) {

2043 
was_n€cho
 = 1;

2044 
i
->
iÊags
 &~
NOECHO
;

2049 
	`c›y_™d_push_°rög
(
°r
);

2055 i‡(
¨gs
) {

2056 
	`å™s„r_push_some_svÆues
(
¨gs
, 
num_¨g
);

2057 
	`FREE
(
¨gs
);

2060 i‡(
fun˘i⁄
) {

2061 i‡(
fun˘i⁄
[0] =
APPLY___INIT_SPECIAL_CHAR
)

2062 
	`îr‹
("Illegal functionÇame.\n");

2063 (Ë
	`≠∂y
(
fun˘i⁄
, 
ob
, 
num_¨g
 + 1, 
ORIGIN_INTERNAL
);

2065 
	`ˇŒ_fun˘i⁄_poöãr
(
fu≈
, 
num_¨g
 + 1);

2067 
	`p›_°ack
();

2069 #ifde‡
GET_CHAR_IS_BUFFERED


2070 i‡(
	`IP_VALID
(
i
, 
ob
)) {

2071 i‡(
was_sögÀ
 && !(
i
->
iÊags
 & 
SINGLE_CHAR
)) {

2072 
i
->
ãxt_°¨t
 = i->
ãxt_íd
 = 0;

2073 
i
->
ãxt
[0] = '\0';

2074 
i
->
iÊags
 &~
CMD_IN_BUF
;

2075 
	`£t_löemode
(
i
);

2077 i‡(
was_n€cho
 && !(
i
->
iÊags
 & 
NOECHO
))

2078 
	`add_bö¨y_mesßge
(
i
->
ob
, 
ã ë_no_echo
, (telnet_no_echo));

2083 
	}
}

2085 
£t_ˇŒ
 
	$P3
(
obje˘_t
 *, 
ob
, 
£¡í˚_t
 *, 
£¡
, , 
Êags
)

2087 i‡(
ob
 =0 || 
£¡
 == 0)

2089 i‡(
ob
->
öãø˘ive
 =0 || ob->öãø˘ive->
öput_to
)

2091 
ob
->
öãø˘ive
->
öput_to
 = 
£¡
;

2092 
ob
->
öãø˘ive
->
iÊags
 |(
Êags
 & (
I_NOECHO
 | 
I_NOESC
 | 
I_SINGLE_CHAR
));

2093 i‡(
Êags
 & 
I_NOECHO
)

2094 
	`add_bö¨y_mesßge
(
ob
, 
ã ë_yes_echo
, (telnet_yes_echo));

2095 i‡(
Êags
 & 
I_SINGLE_CHAR
)

2096 
	`£t_ch¨mode
(
ob
->
öãø˘ive
);

2098 
	}
}

2101 
£t_¥om±
 
	$P1
(*, 
°r
)

2103 i‡(
comm™d_givî
 && comm™d_givî->
öãø˘ive
) {

2104 
comm™d_givî
->
öãø˘ive
->
¥om±
 = 
°r
;

2106 
	}
}

2111 
¥öt_¥om±
 
	$P1
(
öãø˘ive_t
*, 
ù
)

2113 
obje˘_t
 *
ob
 = 
ù
->ob;

2115 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

2116 i‡(
ù
->
öput_to
 == 0) {

2119 i‡(!(
ù
->
iÊags
 & 
HAS_WRITE_PROMPT
))

2120 
	`ãŒ_obje˘
(
ù
->
ob
, ip->
¥om±
, 
	`°æí
(ip->prompt));

2121 #ifde‡
OLD_ED


2122 i‡(
ù
->
ed_buf„r
)

2123 
	`ãŒ_obje˘
(
ù
->
ob
, ip->
¥om±
, 
	`°æí
(ip->prompt));

2125 i‡(!
	`≠∂y
(
APPLY_WRITE_PROMPT
, 
ù
->
ob
, 0, 
ORIGIN_DRIVER
)) {

2126 i‡(!
	`IP_VALID
(
ù
, 
ob
)) ;

2127 
ù
->
iÊags
 &~
HAS_WRITE_PROMPT
;

2128 
	`ãŒ_obje˘
(
ù
->
ob
, ip->
¥om±
, 
	`°æí
(ip->prompt));

2130 #i‡
	`deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

2133 i‡(!
	`IP_VALID
(
ù
, 
ob
)) ;

2139 i‡((
ù
->
iÊags
 & 
USING_TELNET
Ë&& !(ù->iÊag†& 
SUPPRESS_GA
))

2140 
	`add_bö¨y_mesßge
(
comm™d_givî
, 
ã ë_ga
, (telnet_ga));

2141 i‡(!
	`IP_VALID
(
ù
, 
ob
)) ;

2142 
	}
}

2155 #i‚de‡
NO_SNOOP


2156 
√w_£t_¢o›
 
	$P2
(
obje˘_t
 *, 
by
, obje˘_à*, 
vi˘im
)

2158 
öãø˘ive_t
 *
ù
;

2159 
obje˘_t
 *
tmp
;

2161 i‡(
by
->
Êags
 & 
O_DESTRUCTED
)

2163 i‡(
vi˘im
 && (vi˘im->
Êags
 & 
O_DESTRUCTED
))

2166 i‡(
vi˘im
) {

2167 i‡(!
vi˘im
->
öãø˘ive
)

2168 
	`îr‹
("Secondárgument of snoop() isÇot interactive!\n");

2169 
ù
 = 
vi˘im
->
öãø˘ive
;

2174 i‡(
by
->
Êags
 & 
O_SNOOP
) {

2175 
i
;

2177 
i
 = 0; i < 
max_u£rs
; i++) {

2178 i‡(
Æl_u£rs
[
i
] &&áŒ_u£rs[i]->
¢o›ed_by
 =
by
)

2179 
Æl_u£rs
[
i
]->
¢o›ed_by
 = 0;

2181 
by
->
Êags
 &~
O_SNOOP
;

2189 
tmp
 = 
by
;

2190 
tmp
) {

2191 i‡(
tmp
 =
vi˘im
)

2195 
tmp
 = (tmp->
öãø˘ive
 ?Åmp->öãø˘ive->
¢o›ed_by
 : 0);

2201 i‡(
by
->
Êags
 & 
O_SNOOP
) {

2202 
i
;

2204 
i
 = 0; i < 
max_u£rs
; i++) {

2205 i‡(
Æl_u£rs
[
i
] &&áŒ_u£rs[i]->
¢o›ed_by
 =
by
)

2206 
Æl_u£rs
[
i
]->
¢o›ed_by
 = 0;

2209 i‡(
ù
->
¢o›ed_by
)

2210 
ù
->
¢o›ed_by
->
Êags
 &~
O_SNOOP
;

2211 
by
->
Êags
 |
O_SNOOP
;

2212 
ù
->
¢o›ed_by
 = 
by
;

2215 
	}
}

2218 
quîy_addr_«me
 
	$P1
(
obje˘_t
 *, 
ob
)

2220 
buf
[100];

2221 *
dbuf
 = &
buf
[() + () + ()];

2222 
msgÀn
;

2223 
msgty≥
;

2225 
	`•rötf
(
dbuf
, "%s", 
	`quîy_ù_numbî
(
ob
));

2226 
msgÀn
 = (Ë+ 
	`°æí
(
dbuf
) +1;

2228 
msgty≥
 = 
DATALEN
;

2229 
	`mem˝y
(
buf
, (*Ë&
msgty≥
, (msgtype));

2230 
	`mem˝y
(&
buf
[()], (*Ë&
msgÀn
, (msglen));

2232 
msgty≥
 = 
NAMEBYIP
;

2233 
	`mem˝y
(&
buf
[(Ë+ ()], (*Ë&
msgty≥
, (msgtype));

2234 
	`debug
(
c⁄√˘i⁄s
, ("quîy_addr_«me: síàaddªs†£rvî %s\n", 
dbuf
));

2236 i‡(
	`OS_sockë_wrôe
(
addr_£rvî_fd
, 
buf
, 
msgÀn
 + () + ()) == -1) {

2237 
sockë_î∫o
) {

2238 
EBADF
:

2239 
	`debug_mesßge
("Address server has closed connection.\n");

2240 
addr_£rvî_fd
 = -1;

2243 
	`sockë_≥º‹
("query_addr_name: write", 0);

2247 
	}
}

2249 
	#IPSIZE
 200

	)

2251 *
	m«me
;

2252 
svÆue_t
 
	mˇŒ_back
;

2253 
obje˘_t
 *
	mob_to_ˇŒ
;

2254 } 
	tùnumbîíåy_t
;

2256 
ùnumbîíåy_t
 
	gùnumbîèbÀ
[
IPSIZE
];

2261 
quîy_addr_numbî
 
	$P2
(*, 
«me
, 
svÆue_t
 *, 
ˇŒ_back
)

2263 
buf
[100];

2264 *
dbuf
 = &
buf
[() + () + ()];

2265 
msgÀn
;

2266 
msgty≥
;

2268 i‡((
addr_£rvî_fd
 < 0Ë|| (
	`°æí
(
«me
) >=

2269 100 - ((
msgty≥
Ë+ (
msgÀn
) + ()))) {

2270 
	`sh¨e_™d_push_°rög
(
«me
);

2271 
	`push_undeföed
();

2272 i‡(
ˇŒ_back
->
ty≥
 =
T_STRING
)

2273 
	`≠∂y
(
ˇŒ_back
->
u
.
°rög
, 
cuºít_obje˘
, 2, 
ORIGIN_INTERNAL
);

2275 
	`ˇŒ_fun˘i⁄_poöãr
(
ˇŒ_back
->
u
.
Â
, 2);

2278 
	`°r˝y
(
dbuf
, 
«me
);

2279 
msgÀn
 = (Ë+ 
	`°æí
(
«me
) +1;

2281 
msgty≥
 = 
DATALEN
;

2282 
	`mem˝y
(
buf
, (*Ë&
msgty≥
, (msgtype));

2283 
	`mem˝y
(&
buf
[()], (*Ë&
msgÀn
, (msglen));

2285 
msgty≥
 = (
«me
[0] >'0' &&Çame[0] <'9'Ë? 
NAMEBYIP
 : 
IPBYNAME
;

2286 
	`mem˝y
(&
buf
[(Ë+ ()], (*Ë&
msgty≥
, (msgtype));

2288 
	`debug
(
c⁄√˘i⁄s
, ("quîy_addr_numbî: síàaddªs†£rvî %s\n", 
dbuf
));

2290 i‡(
	`OS_sockë_wrôe
(
addr_£rvî_fd
, 
buf
, 
msgÀn
 + () + ()) == -1) {

2291 
sockë_î∫o
) {

2292 
EBADF
:

2293 
	`debug_mesßge
("Address server has closed connection.\n");

2294 
addr_£rvî_fd
 = -1;

2297 
	`sockë_≥º‹
("query_addr_name: write", 0);

2300 
	`sh¨e_™d_push_°rög
(
«me
);

2301 
	`push_undeföed
();

2302 i‡(
ˇŒ_back
->
ty≥
 =
T_STRING
)

2303 
	`≠∂y
(
ˇŒ_back
->
u
.
°rög
, 
cuºít_obje˘
, 2, 
ORIGIN_INTERNAL
);

2305 
	`ˇŒ_fun˘i⁄_poöãr
(
ˇŒ_back
->
u
.
Â
, 2);

2308 
i
;

2312 
i
 = 0; i < 
IPSIZE
 && 
ùnumbîèbÀ
[i].
«me
; i++)

2314 i‡(
i
 =
IPSIZE
) {

2316 
	`sh¨e_™d_push_°rög
(
«me
);

2317 
	`push_undeföed
();

2318 i‡(
ˇŒ_back
->
ty≥
 =
T_STRING
)

2319 
	`≠∂y
(
ˇŒ_back
->
u
.
°rög
, 
cuºít_obje˘
, 2, 
ORIGIN_INTERNAL
);

2321 
	`ˇŒ_fun˘i⁄_poöãr
(
ˇŒ_back
->
u
.
Â
, 2);

2325 
ùnumbîèbÀ
[
i
].
«me
 = 
	`make_sh¨ed_°rög
(name);

2326 
	`assign_svÆue_no_‰ì
(&
ùnumbîèbÀ
[
i
].
ˇŒ_back
, call_back);

2327 
ùnumbîèbÀ
[
i
].
ob_to_ˇŒ
 = 
cuºít_obje˘
;

2328 
	`add_ªf
(
cuºít_obje˘
, "query_addr_number: ");

2329  
i
 + 1;

2331 
	}
}

2333 
gŸ_addr_numbî
 
	$P2
(*, 
numbî
, *, 
«me
)

2335 
i
;

2336 *
theName
, *
theNumbî
;

2339 
i
 = 0; i < 
IPSIZE
; i++)

2340 i‡(
ùnumbîèbÀ
[
i
].
«me


2341 && 
ùnumbîèbÀ
[
i
].
ob_to_ˇŒ
->
Êags
 & 
O_DESTRUCTED
) {

2342 
	`‰ì_svÆue
(&
ùnumbîèbÀ
[
i
].
ˇŒ_back
, "got_addr_number");

2343 
	`‰ì_°rög
(
ùnumbîèbÀ
[
i
].
«me
);

2344 
	`‰ì_obje˘
(
ùnumbîèbÀ
[
i
].
ob_to_ˇŒ
, "got_addr_number: ");

2345 
ùnumbîèbÀ
[
i
].
«me
 = 
NULL
;

2347 
i
 = 0; i < 
IPSIZE
; i++) {

2348 i‡(
ùnumbîèbÀ
[
i
].
«me
 && 
	`°rcmp
(name, ipnumbertable[i].name)== 0) {

2350 
theName
 = 
ùnumbîèbÀ
[
i
].
«me
;

2351 
theNumbî
 = 
numbî
;

2353 i‡(
	`uisdigô
(
theName
[0])) {

2354 *
tmp
;

2356 
tmp
 = 
theName
;

2357 
theName
 = 
theNumbî
;

2358 
theNumbî
 = 
tmp
;

2360 i‡(
	`°rcmp
(
theName
, "0")) {

2361 
	`sh¨e_™d_push_°rög
(
theName
);

2363 
	`push_undeföed
();

2365 i‡(
	`°rcmp
(
theNumbî
, "0")) {

2366 
	`sh¨e_™d_push_°rög
(
theNumbî
);

2368 
	`push_undeföed
();

2370 
	`push_numbî
(
i
 + 1);

2371 i‡(
ùnumbîèbÀ
[
i
].
ˇŒ_back
.
ty≥
 =
T_STRING
)

2372 
	`ß„_≠∂y
(
ùnumbîèbÀ
[
i
].
ˇŒ_back
.
u
.
°rög
,

2373 
ùnumbîèbÀ
[
i
].
ob_to_ˇŒ
,

2374 3, 
ORIGIN_INTERNAL
);

2376 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
ùnumbîèbÀ
[
i
].
ˇŒ_back
.
u
.
Â
, 3);

2377 
	`‰ì_svÆue
(&
ùnumbîèbÀ
[
i
].
ˇŒ_back
, "got_addr_number");

2378 
	`‰ì_°rög
(
ùnumbîèbÀ
[
i
].
«me
);

2379 
	`‰ì_obje˘
(
ùnumbîèbÀ
[
i
].
ob_to_ˇŒ
, "got_addr_number: ");

2380 
ùnumbîèbÀ
[
i
].
«me
 = 
NULL
;

2383 
	}
}

2385 #unde‡
IPSIZE


2386 
	#IPSIZE
 200

	)

2388 
	maddr
;

2389 *
	m«me
;

2390 } 
	tùíåy_t
;

2392 
ùíåy_t
 
	gùèbÀ
[
IPSIZE
];

2393 
	gùcur
;

2395 #ifde‡
DEBUGMALLOC_EXTENSIONS


2396 
	$m¨k_ùèbÀ
() {

2397 
i
;

2399 
i
=0; i < 
IPSIZE
; i++)

2400 i‡(
ùèbÀ
[
i
].
«me
)

2401 
	`EXTRA_REF
(
	`BLOCK
(
ùèbÀ
[
i
].
«me
))++;

2402 
	}
}

2405 *
quîy_ù_«me
 
	$P1
(
obje˘_t
 *, 
ob
)

2407 
i
;

2409 i‡(
ob
 == 0)

2410 
ob
 = 
comm™d_givî
;

2411 i‡(!
ob
 || ob->
öãø˘ive
 == 0)

2412  
NULL
;

2413 
i
 = 0; i < 
IPSIZE
; i++) {

2414 i‡(
ùèbÀ
[
i
].
addr
 =
ob
->
öãø˘ive
->addr.
sö_addr
.
s_addr
 &&

2415 
ùèbÀ
[
i
].
«me
)

2416  (
ùèbÀ
[
i
].
«me
);

2418  (
	`öë_¡ﬂ
(
ob
->
öãø˘ive
->
addr
.
sö_addr
));

2419 
	}
}

2421 
add_ù_íåy
 
	$P2
(, 
addr
, *, 
«me
)

2423 
i
;

2425 
i
 = 0; i < 
IPSIZE
; i++) {

2426 i‡(
ùèbÀ
[
i
].
addr
 ==áddr)

2429 
ùèbÀ
[
ùcur
].
addr
 =áddr;

2430 i‡(
ùèbÀ
[
ùcur
].
«me
)

2431 
	`‰ì_°rög
(
ùèbÀ
[
ùcur
].
«me
);

2432 
ùèbÀ
[
ùcur
].
«me
 = 
	`make_sh¨ed_°rög
(name);

2433 
ùcur
 = (ùcu∏+ 1Ë% 
IPSIZE
;

2434 
	}
}

2436 *
quîy_ù_numbî
 
	$P1
(
obje˘_t
 *, 
ob
)

2438 i‡(
ob
 == 0)

2439 
ob
 = 
comm™d_givî
;

2440 i‡(!
ob
 || ob->
öãø˘ive
 == 0)

2442  (
	`öë_¡ﬂ
(
ob
->
öãø˘ive
->
addr
.
sö_addr
));

2443 
	}
}

2445 #i‚de‡
INET_NTOA_OK


2450 *
öë_¡ﬂ
 
	$P1
(
ö_addr
, 
ad
)

2452 
u_l⁄g
 
s_ad
;

2453 
a
, 
b
, 
c
, 
d
;

2454 
addr
[20];

2456 
s_ad
 = 
ad
.
s_addr
;

2457 
d
 = 
s_ad
 % 256;

2458 
s_ad
 /= 256;

2459 
c
 = 
s_ad
 % 256;

2460 
s_ad
 /= 256;

2461 
b
 = 
s_ad
 % 256;

2462 
a
 = 
s_ad
 / 256;

2463 
	`•rötf
(
addr
, "%d.%d.%d.%d", 
a
, 
b
, 
c
, 
d
);

2464  (
addr
);

2465 
	}
}

2468 *
	$quîy_ho°_«me
()

2470 
«me
[40];

2472 
	`gëho°«me
(
«me
, (name));

2473 
«me
[(name) - 1] = '\0';

2474  (
«me
);

2475 
	}
}

2477 #i‚de‡
NO_SNOOP


2478 
obje˘_t
 *
quîy_¢o›
 
	$P1
(
obje˘_t
 *, 
ob
)

2480 i‡(!
ob
->
öãø˘ive
)

2482  
ob
->
öãø˘ive
->
¢o›ed_by
;

2483 
	}
}

2485 
obje˘_t
 *
quîy_¢o›ög
 
	$P1
(
obje˘_t
 *, 
ob
)

2487 
i
;

2489 i‡(!(
ob
->
Êags
 & 
O_SNOOP
))  0;

2490 
i
 = 0; i < 
max_u£rs
; i++) {

2491 i‡(
Æl_u£rs
[
i
] &&áŒ_u£rs[i]->
¢o›ed_by
 =
ob
)

2492  
Æl_u£rs
[
i
]->
ob
;

2494 
	`Áèl
("couldn't find snoopÅarget.\n");

2496 
	}
}

2499 
quîy_idÀ
 
	$P1
(
obje˘_t
 *, 
ob
)

2501 i‡(!
ob
->
öãø˘ive
)

2502 
	`îr‹
("query_idle() ofÇon-interactive object.\n");

2503  (
cuºít_time
 - 
ob
->
öãø˘ive
->
œ°_time
);

2504 
	}
}

2506 #ifde‡
F_EXEC


2507 
ª∂a˚_öãø˘ive
 
	$P2
(
obje˘_t
 *, 
ob
, obje˘_à*, 
ob‰om
)

2509 i‡(
ob
->
öãø˘ive
) {

2510 
	`îr‹
("Badárgument 1ÅoÉxec()\n");

2512 i‡(!
ob‰om
->
öãø˘ive
) {

2513 
	`îr‹
("Badárgument 2ÅoÉxec()\n");

2515 #ifde‡
F_SET_HIDE


2516 i‡((
ob
->
Êags
 & 
O_HIDDEN
Ë!(
ob‰om
->flags & O_HIDDEN)) {

2517 i‡(
ob
->
Êags
 & 
O_HIDDEN
) {

2518 
num_hiddí_u£rs
++;

2520 
num_hiddí_u£rs
--;

2524 
ob
->
öãø˘ive
 = 
ob‰om
->interactive;

2529 
ob
->
öãø˘ive
->
iÊags
 |(
HAS_WRITE_PROMPT
 | 
HAS_PROCESS_INPUT
);

2530 
ob‰om
->
öãø˘ive
 = 0;

2531 
ob
->
öãø˘ive
->ob = ob;

2532 
ob
->
Êags
 |
O_ONCE_INTERACTIVE
;

2533 
ob‰om
->
Êags
 &~
O_ONCE_INTERACTIVE
;

2534 
	`add_ªf
(
ob
, "exec");

2535 
	`‰ì_obje˘
(
ob‰om
, "exec");

2536 i‡(
ob‰om
 =
comm™d_givî
) {

2537 
	`£t_comm™d_givî
(
ob
);

2540 
	}
}

2543 
outbuf_zîo
 
	$P1
(
outbuf„r_t
 *, 
outbuf
) {

2544 
outbuf
->
ªÆ_size
 = 0;

2545 
outbuf
->
buf„r
 = 0;

2546 
	}
}

2548 
outbuf_exãnd
 
	$P2
(
outbuf„r_t
 *, 
outbuf
, , 
l
)

2550 
limô
;

2552 
	`DEBUG_CHECK
(
l
 < 0, "NegativeÜengthÖassedÅo outbuf_extend.\n");

2553 
l
 = (»> 
USHRT_MAX
 ? USHRT_MAX :Ü);

2555 i‡(
outbuf
->
buf„r
) {

2556 
limô
 = 
	`MSTR_SIZE
(
outbuf
->
buf„r
);

2557 i‡(
outbuf
->
ªÆ_size
 + 
l
 > 
limô
) {

2558 i‡(
outbuf
->
ªÆ_size
 =
USHRT_MAX
)  0;

2561 
limô
 = (
outbuf
->
ªÆ_size
 + 
l
) * 2;

2562 i‡(
limô
 > 
USHRT_MAX
) {

2563 
limô
 = 
USHRT_MAX
;

2564 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
USHRT_MAX
);

2565  
USHRT_MAX
 - 
outbuf
->
ªÆ_size
;

2567 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, 
limô
);

2570 
outbuf
->
buf„r
 = 
	`√w_°rög
(
l
, "outbuf_extend");

2571 
outbuf
->
ªÆ_size
 = 0;

2573  
l
;

2574 
	}
}

2576 
outbuf_add
 
	$P2
(
outbuf„r_t
 *, 
outbuf
, *, 
°r
)

2578 
l
, 
limô
;

2580 i‡(!
outbuf
) ;

2581 
l
 = 
	`°æí
(
°r
);

2582 i‡((
limô
 = 
	`outbuf_exãnd
(
outbuf
, 
l
)) > 0) {

2583 
	`°∫˝y
(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
, 
°r
, 
limô
);

2584 
outbuf
->
ªÆ_size
 +(
l
 > 
limô
 ?Üimit :Ü);

2585 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
) = 0;

2587 
	}
}

2589 
outbuf_addch¨
 
	$P2
(
outbuf„r_t
 *, 
outbuf
, , 
c
)

2591 i‡(
outbuf
 && (
	`outbuf_exãnd
(outbuf, 1)) > 0) {

2592 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
++Ë
c
;

2593 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
) = 0;

2595 
	}
}

2597 
outbuf_addv
 
	$P2V
(
outbuf„r_t
 *, 
outbuf
, *, 
f‹m©
)

2599 
buf
[
LARGEST_PRINTABLE_STRING
 + 1];

2600 
va_li°
 
¨gs
;

2601 
	`V_DCL
(*
f‹m©
);

2602 
	`V_DCL
(
outbuf„r_t
 *
outbuf
);

2604 
	`V_START
(
¨gs
, 
f‹m©
);

2605 
	`V_VAR
(
outbuf„r_t
 *, 
outbuf
, 
¨gs
);

2606 
	`V_VAR
(*, 
f‹m©
, 
¨gs
);

2608 
	`v•rötf
(
buf
, 
f‹m©
, 
¨gs
);

2609 
	`va_íd
(
¨gs
);

2611 i‡(!
outbuf
) ;

2613 
	`outbuf_add
(
outbuf
, 
buf
);

2614 
	}
}

2616 
outbuf_fix
 
	$P1
(
outbuf„r_t
 *, 
outbuf
) {

2617 i‡(
outbuf
 && outbuf->
buf„r
)

2618 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, outbuf->
ªÆ_size
);

2619 
	}
}

2621 
outbuf_push
 
	$P1
(
outbuf„r_t
 *, 
outbuf
) {

2622 
STACK_INC
;

2623 
•
->
ty≥
 = 
T_STRING
;

2624 i‡(
outbuf
 && outbuf->
buf„r
) {

2625 
outbuf
->
buf„r
 = 
	`exãnd_°rög
(outbuf->buf„r, outbuf->
ªÆ_size
);

2627 
•
->
subty≥
 = 
STRING_MALLOC
;

2628 
•
->
u
.
°rög
 = 
outbuf
->
buf„r
;

2630 
•
->
subty≥
 = 
STRING_CONSTANT
;

2631 
•
->
u
.
°rög
 = "";

2633 
	}
}

	@comm.h

6 #i‚de‡
COMM_H


7 
	#COMM_H


	)

9 
	~"Õc_ö˛.h
"

10 
	~"√tw‹k_ö˛.h
"

12 
	#MAX_TEXT
 2048

	)

13 
	#MAX_SOCKET_PACKET_SIZE
 1024

	)

14 
	#DESIRED_SOCKET_PACKET_SIZE
 800

	)

15 
	#MESSAGE_BUF_SIZE
 
MESSAGE_BUFFER_SIZE


	)

16 
	#OUT_BUF_SIZE
 2048

	)

17 
	#DFAULT_PROTO
 0

	)

18 
	#I_NOECHO
 0x1

	)

19 
	#I_NOESC
 0x2

	)

20 
	#I_SINGLE_CHAR
 0x4

	)

21 
	#I_WAS_SINGLE_CHAR
 0x8

	)

22 
	#SB_SIZE
 (
NSLC
 * 3 + 3)

	)

24 
	emsgty≥s
 {

25 
	mNAMEBYIP
 = 0, 
	mIPBYNAME
, 
	mDATALEN


28 
	#TS_DATA
 0

	)

29 
	#TS_IAC
 1

	)

30 
	#TS_WILL
 2

	)

31 
	#TS_WONT
 3

	)

32 
	#TS_DO
 4

	)

33 
	#TS_DONT
 5

	)

34 
	#TS_SB
 6

	)

35 
	#TS_SB_IAC
 7

	)

38 
	#NOECHO
 
I_NOECHO


	)

39 
	#NOESC
 
I_NOESC


	)

40 
	#SINGLE_CHAR
 
I_SINGLE_CHAR


	)

41 
	#WAS_SINGLE_CHAR
 
I_WAS_SINGLE_CHAR


	)

42 
	#HAS_PROCESS_INPUT
 0x0010

	)

43 
	#HAS_WRITE_PROMPT
 0x0020

	)

44 
	#CLOSING
 0x0040

	)

45 
	#CMD_IN_BUF
 0x0080

	)

46 
	#NET_DEAD
 0x0100

	)

47 
	#NOTIFY_FAIL_FUNC
 0x0200

	)

48 
	#USING_TELNET
 0x0400

	)

50 
	#SKIP_COMMAND
 0x0800

	)

51 
	#SUPPRESS_GA
 0x1000

	)

52 
	#USING_LINEMODE
 0x2000

	)

54 
	söãø˘ive_s
 {

55 
obje˘_t
 *
	mob
;

56 #i‡
deföed
(
F_INPUT_TO
Ë|| deföed(
F_GET_CHAR
)

57 
£¡í˚_t
 *
	möput_to
;

58 
svÆue_t
 *
	mˇºyovî
;

59 
	mnum_ˇºy
;

61 
	mc⁄√˘i⁄_ty≥
;

62 
	mfd
;

63 
sockaddr_ö
 
	maddr
;

64 #ifde‡
F_QUERY_IP_PORT


65 
	mloˇl_p‹t
;

67 #ifde‡
F_NETWORK_STATS


68 
	mexã∫Æ_p‹t
;

70 *
	m¥om±
;

71 
	mãxt
[
MAX_TEXT
];

72 
	mãxt_íd
;

73 
	mãxt_°¨t
;

74 
	mœ°_time
;

75 #i‚de‡
NO_SNOOP


76 
obje˘_t
 *
	m¢o›ed_by
;

78 #i‚de‡
NO_ADD_ACTION


80 
°rög_‹_func
 
	mdeÁu…_îr_mesßge
;

82 #ifde‡
TRACE


83 
	måa˚_Àvñ
;

84 *
	måa˚_¥efix
;

86 #ifde‡
OLD_ED


87 
ed_buf„r_s
 *
	med_buf„r
;

89 
	mmesßge_¥odu˚r
;

90 
	mmesßge_c⁄sumî
;

91 
	mmesßge_Àngth
;

92 
	mmesßge_buf
[
MESSAGE_BUF_SIZE
];

93 
	miÊags
;

94 
	mout_of_b™d
;

95 
	m°©e
;

96 
	msb_pos
;

97 
	msb_buf
[
SB_SIZE
];

98 
	m¶c
[
NSLC
][2];

99 } 
	töãø˘ive_t
;

126 
	#IP_VALID
(
ù
, 
ob
Ë(ob && ob->
öãø˘ive
 =ù)

	)

127 
	#VALIDATE_IP
(
ù
, 
ob
Ëi‡(!
	`IP_VALID
(ù, ob)Ë
Áûuª


	)

132 
fd_£t
 
ªadmask
;

133 
fd_£t
 
wrôemask
;

134 
öë_∑ckës
;

135 
öë_vﬁume
;

136 #ifde‡
F_NETWORK_STATS


137 
öë_out_∑ckës
;

138 
öë_out_vﬁume
;

139 
öë_ö_∑ckës
;

140 
öë_ö_vﬁume
;

141 #ifde‡
PACKAGE_SOCKETS


142 
öë_sockë_ö_∑ckës
;

143 
öë_sockë_ö_vﬁume
;

144 
öë_sockë_out_∑ckës
;

145 
öë_sockë_out_vﬁume
;

148 
num_u£r
;

149 #ifde‡
F_SET_HIDE


150 
num_hiddí_u£rs
;

152 
add_mesßge_ˇŒs
;

154 
öãø˘ive_t
 **
Æl_u£rs
;

155 
max_u£rs
;

157 
CDECL
 
add_vmesßge
 
PROT2V
(
obje˘_t
 *, *);

158 
add_mesßge
 
PROT
((
obje˘_t
 *, *, ));

159 
add_bö¨y_mesßge
 
PROT
((
obje˘_t
 *, *, ));

161 #ifde‡
SIGNAL_FUNC_TAKES_INT


162 
sigÆrm_h™dÀr
 
PROT
(());

164 
sigÆrm_h™dÀr
 
PROT
(());

166 
upd©e_ªf_cou¡s_f‹_u£rs
 
PROT
(());

167 
INLINE
 
make_£À˘masks
 
PROT
(());

168 
öô_u£r_c⁄n
 
PROT
(());

169 
öô_addr_£rvî
 
PROT
((*, ));

170 
ùc_ªmove
 
PROT
(());

171 
£t_¥om±
 
PROT
((*));

172 
INLINE
 
¥o˚ss_io
 
PROT
(());

173 
¥o˚ss_u£r_comm™d
 
PROT
(());

174 
ª∂a˚_öãø˘ive
 
PROT
((
obje˘_t
 *, object_t *));

175 
£t_ˇŒ
 
PROT
((
obje˘_t
 *, 
£¡í˚_t
 *, ));

176 
ªmove_öãø˘ive
 
PROT
((
obje˘_t
 *, ));

177 
Êush_mesßge
 
PROT
((
öãø˘ive_t
 *));

178 
quîy_addr_numbî
 
PROT
((*, 
svÆue_t
 *));

179 *
quîy_ù_«me
 
PROT
((
obje˘_t
 *));

180 *
quîy_ù_numbî
 
PROT
((
obje˘_t
 *));

181 *
quîy_ho°_«me
 
PROT
(());

182 
quîy_idÀ
 
PROT
((
obje˘_t
 *));

183 #i‚de‡
NO_SNOOP


184 
√w_£t_¢o›
 
PROT
((
obje˘_t
 *, object_t *));

185 
obje˘_t
 *
quîy_¢o›
 
PROT
((object_t *));

186 
obje˘_t
 *
quîy_¢o›ög
 
PROT
((object_t *));

189 #ifde‡
DEBUGMALLOC_EXTENSIONS


190 
m¨k_ùèbÀ
 
PROT
(());

	@compat/parser_error.c

1 
°rög
 
	$∑r£r_îr‹_mesßge
(
köd
, 
obje˘
 
ob
, 
mixed
 
¨g
, 
Êag
) {

2 
°rög
 
ªt
;

3 i‡(
ob
)

4 
ªt
 = 
ob
->() + ": ";

6 
ªt
 = "";

8 
köd
) {

10 i‡(
Êag
)

11  
ªt
 + "Thîêi†nÿsuch " + 
¨g
 + " here.\n";

13  
ªt
 + "Thîêi†nÿ" + 
¨g
 + " here.\n";

16 i‡(
Êag
)

17  
ªt
 + "N⁄êo‡thê" + 
	`∂uølize
(
¨g
) + "áreálive.\n";

19  
ªt
 + "Thê" + 
¨g
 + " isn'tálive.\n";

22 i‡(
Êag
)

23  
ªt
 + "You can'tÑeachÅhem.\n";

25  
ªt
 + "You can'tÑeach it.\n";

29 
¨øy
 
descs
 = 
	`unique_¨øy
(
¨g
, (: 
$1
->
	`the_sh‹t
() :));

30 
°rög
 
°r
;

32 i‡((
descs
) == 1)

33  
ªt
 + "Which " + 
descs
[0][0]->() + " do you mean?\n";

34 
°r
 = 
ªt
 + "Do you mean ";

35 
i
 = 0; i < (
descs
); i++) {

36 i‡((
descs
[
i
]) > 1)

37 
°r
 += "one of ";

38 
°r
 +
descs
[
i
][0]->
	`the_sh‹t
();

39 i‡(
i
 =(
descs
) - 1)

40 
°r
 += " or ";

42 
°r
 += ", ";

44  
°r
 + "?\n";

48 i‡(
¨g
 > 1)

49  
ªt
 + "Thîê¨ê⁄ly " + 
¨g
 + " ofÅhem.\n";

51  
ªt
 + "There is only one ofÅhem.\n";

54  
ªt
 + 
¨g
;

56  
ªt
 + "Thîêi†nÿ" + 
¨g
 + " here.\n";

58  
ªt
 + "You can't use moreÅhan one objectátáÅime withÅhat verb.\n";

60 
	}
}

	@compat/simuls/apply.c

4 
mixed
 
	$≠∂y
(
mixed
 
f
, mixed *
¨r
...) {

5 i‡((
¨r
Ë&& 
	`¨øyp
(arr[<1]))

6 
¨r
 =árr[0..<2] +árr[<1];

8  
	`evÆu©e
(
f
, 
¨r
...);

9 
	}
}

	@compat/simuls/break_string.c

1 
	$bªak_°rög
(
°rög
 
°r
, 
width
, 
mixed
 
ödít
) {

2 
ödÀn
;

4 i‡(!
	`°rögp
(
°r
))  0;

5 i‡(
	`öç
(
ödít
)) {

6 i‡(
idít
 < 0Ë
ödít
 = 0;

7 
ödÀn
 = 
ödít
;

8 
ödít
 = 
	`•rötf
("%-*' 's", 
ödÀn
, "");

9 } i‡(
	`°rögp
(
ödít
)) {

10 
ödÀn
 = 
	`°æí
(
idít
);

11 }  
°r
;

13 i‡(
width
 < 
ödÀn
 + 1) width = indlen + 1;

14 
°r
 = 
	`•rötf
("%*-=s", 
width
 - 
ödÀn
, str);

15 i‡(!
ödÀn
Ë 
°r
;

17 i‡(
°r
[<1] == '\n')

18  
ödít
 + 
	`ª∂a˚_°rög
(
°r
[0..<2], "\n", "\n" + indent) + "\n";

20  
ödít
 + 
	`ª∂a˚_°rög
(
°r
, "\n", "\n" + indent);

21 
	}
}

	@compat/simuls/dump_socket_status.c

1 
°rög
 
	$dump_sockë_°©us
() {

2 
°rög
 
ªt
 = @
END


3 
Fd
 
Sèã
 
Mode
 
Loˇl
 
Addªss
 
RemŸe
 Address

5 
END
;

7 
	`f‹óch
 (
¨øy
 
ôem
 
ö
 
	`sockë_°©us
()) {

8 
ªt
 +
	`•rötf
("%2d %|9† %|8† %-21† %-21s\n", 
ôem
[0], item[1], item[2], item[3], item[4]);

11  
ªt
;

12 
	}
}

	@compat/simuls/parse_command.c

1 
¥iv©e
 
mixed
 *
	gªt
;

2 
¥iv©e
 
mixed
 
	gvÆue
;

4 
¥iv©e
 

5 
	$lﬂd_Õc_öfo
(
ix
, 
obje˘
 
ob
)

7 
mixed
 *
tmp
, *
sög
;

8 
vÆue
 
ªt
;

9 
û
, 
make_∂uøl
 = 0;

10 
°rög
 
°r
;

12 i‡(!
ob
)

15 i‡(
∂uid_li°
 &&

16 (
∂uid_li°
Ë> 
ix
 &&

17 
∂uid_li°
[
ix
] == 0) {

18 
ªt
 = 
ob
->
	`∑r£_comm™d_∂uøl_id_li°
();

19 i‡(
	`¨øyp
(
ªt
))

20 
∂uid_li°
[
ix
] = 
ªt
;

22 
make_∂uøl
 = 1;

23 
∂uid_li°
[
ix
] = 1;

26 i‡(
id_li°
 &&

27 (
id_li°
Ë> 
ix
 &&

28 
id_li°
[
ix
] == 0 &&

29 
ob
) {

30 
ªt
 = 
ob
->
	`∑r£_comm™d_id_li°
();

31 i‡(
	`¨øyp
(
ªt
)) {

32 
id_li°
[
ix
] = 
ªt
;

33 i‡(
make_∂uøl
)

34 
∂uid_li°
[
ix
] = 
	`m≠
(
ªt
, (: 
	`°rögp
(
$1
Ë? 
	`∂uølize
($1) : 0 :));

36 
id_li°
[
ix
] = 1;

39 i‡(
adjid_li°
 &&

40 (
adjid_li°
Ë> 
ix
 &&

41 
adjid_li°
[
ix
] == 0 &&

42 
ob
) {

43 
ªt
 = 
ob
->
	`∑r£_comm™d_adje˘iv_id_li°
();

44 i‡(
	`¨øyp
(
ªt
))

45 
adjid_li°
[
ix
] = 
ªt
;

47 
adjid_li°
[
ix
] = 1;

49 
	}
}

51 
mixed
 *
	$∑r£_comm™d
(
°rög
 
cmd
, 
mixed
 
ob¨r
, såög 
∑âîn
) {

52 
mixed
 *
ßved_ªt
 = 
ªt
, *
¸ë
;

54 
ªt
 = ({ });

57 i‡(
cmd
 ="" || 
∑âîn
 = "")  ({ });

59 i‡(!
	`°rögp
(
cmd
)Ë
	`îr‹
("Badárgument 1ÅoÖarse_command().\n");

60 i‡(!
	`°rögp
(
∑âîn
)Ë
	`îr‹
("Badárgument 3ÅoÖarse_command().\n");

63 
∑r£_w¨r
 = 
	`ex∂ode
(
cmd
, " ");

66 
∑r£_∑èº
 = 
	`ex∂ode
(
∑âîn
, " ");

68 #i‚de‡
__NO_ENVIRONMENT__


69 i‡(
	`obje˘p
(
ob¨r
))

70 
ob¨r
 = ({ ob¨∏}Ë+ 
	`dìp_övít‹y
(obarr);

72 i‡(!
	`¨øyp
(
ob¨r
)Ë
	`îr‹
("Badárgument 2ÅoÖarse_command().\n");

74 
id_li°
 = 
	`Æloˇã
((
ob¨r
));

75 
∂uid_li°
 = 
	`Æloˇã
((
ob¨r
));

76 
adjid_li°
 = 
	`Æloˇã
((
ob¨r
));

78 
id_li°_d
 = 
	`ma°î
()->
	`∑r£_comm™d_id_li°
();

79 
∂uid_li°_d
 = 
	`ma°î
()->
	`∑r£_comm™d_∂uøl_id_li°
();

80 
adjid_li°_d
 = 
	`ma°î
()->
	`∑r£_comm™d_adje˘iv_id_li°
();

81 
¥ïos_li°
 = 
	`ma°î
()->
	`∑r£_comm™d_¥ïos_li°
();

83 
Ælw‹d
 = 
	`ma°î
()->
	`∑r£_comm™d_Æl_w‹d
();

88 
six
 = 0, 
cix
 = 0, 
pix
 = 0;Öix < (
∑r£_∑èº
);Öix++) {

89 
vÆue
 = 0;

90 
Áû
 = 0;

92 i‡(
∑r£_∑èº
[
pix
] == "%s") {

97 i‡(
pix
 =(
∑r£_∑èº
 - 1)) {

98 
	`°‹e_w‹ds_¶i˚
(
six
++, 
∑r£_w¨r
, 
cix
, (parse_warr) - 1);

99 
cix
 = (
∑r£_w¨r
);

106 
ocix
 = 
fw‹d
 = 
cix
;

107 
Âix
 = ++
pix
;

115 
Áû
 = 
	`sub_∑r£
(
ob¨r
, 
∑r£_∑èº
, 
ªf
 
pix
,

116 
∑r£_w¨r
, 
ªf
 
cix
);

117 i‡(
Áû
) {

118 
cix
 = ++
ocix
;

119 
pix
 = 
Âix
;

121 } 
Áû
 && (
cix
 < (
∑r£_w¨r
)));

128 i‡(!
Áû
) {

129 i‡(
vÆue
) {

130 
	`°‹e_vÆue
(
six
 + 1, 
vÆue
);

131 
	`°‹e_w‹ds_¶i˚
(
six
, 
∑r£_w¨r
, 
fw‹d
, 
ocix
 - 1);

132 
six
 += 2;

134 
	`°‹e_w‹ds_¶i˚
(
six
++, 
∑r£_w¨r
, 
fw‹d
, 
ocix
 - 1);

136 
vÆue
 = 0;

144 i‡(
∑r£_∑èº
[
pix
] != "/") {

145 
Áû
 = 
	`sub_∑r£
(
ob¨r
, 
∑r£_∑èº
, 
ªf
 
pix
,

146 
∑r£_w¨r
, 
ªf
 
cix
,Ñe‡
Áû
);

147 i‡(!
Áû
 && 
vÆue
)

148 
	`°‹e_vÆue
(
six
++, 
vÆue
);

153 i‡(
Áû
)

160 i‡(
Áû
 || 
cix
 < (
∑r£_w¨r
))

163 
¸ë
 = 
ªt
;

164 
ªt
 = 
ßved_ªt
;

165  
¸ë
;

166 
	}
}

168 
¥iv©e
 

169 
	$°‹e_vÆue
(
pos
, 
mixed
 
wh©
) {

170 i‡((
ªt
Ë<
pos
)

171 
ªt
 +
	`Æloˇã
‘ë + 1 - 
pos
);

173 
ªt
[
pos
] = 
wh©
;

174 
	}
}

177 
	$°‹e_w‹ds_¶i˚
(
pos
, 
mixed
 *
w¨r
, 
‰om
, 
to
) {

178 
mixed
 *
¶i˚
 = 
w¨r
[
‰om
..
to
];

180 
	`°‹e_vÆue
(
pos
, 
	`im∂ode
(
¶i˚
, " "));

181 
	}
}

183 
¥iv©e
 

184 
	$sub_∑r£
(
mixed
 *
ob¨r
, mixed *
∑èº
, 
ªf
 
pix_ö
,

185 
mixed
 *
w¨r
, 
ªf
 
cix_ö
)

187 
cix
, 
pix
;

188 
Áû
;

193 i‡(*
cix_ö
 =(
w¨r
))

196 
cix
 = *
cix_ö
;

197 
pix
 = *
pix_ö
;

199 
Áû
 = 
	`⁄e_∑r£
(
ob¨r
, 
∑èº
[
pix
], 
w¨r
, 
ªf
 
cix
);

201 
Áû
) {

202 
pix
++;

203 
cix
 = *
cix_ö
;

208 
pix
 < (
∑èº
) &&Öatarr[pix] == "/") {

209 
pix
++;

210 
Áû
 = 0;

213 i‡(!
Áû
 && 
pix
 < (
∑èº
)) {

214 
Áû
 = 
	`⁄e_∑r£
(
ob¨r
, 
∑èº
[
pix
], 
w¨r
, 
ªf
 
cix
);

216 *
pix_ö
 = 
pix
 - 1;

224 i‡(
pix
 + 1 < (
∑èº
) &&Öatarr[pix+1] == "/") {

225 
pix
 + 1 < (
∑èº
) &&Öatarr[pix+1] == "/") {

226 
pix
 += 2;

228 i‡(
pix
 >(
∑èº
))

229 
pix
 = (
∑èº
->
size
);

231 *
cix_ö
 = 
cix
;

232 *
pix_ö
 = 
pix
;

234  
Áû
;

235 
	}
}

237 
¥iv©e
 

238 
	$⁄e_∑r£
(
mixed
 *
ob¨r
, 
°rög
 
∑t
, mixed *
w¨r
, 
ªf
 
cix_ö
)

240 
ch
, 
Áû
;

241 
°rög
 
°r1
, 
°r2
;

246 i‡(*
cix_ö
 >(
w¨r
))

249 
ch
 = 
∑t
[0];

250 i‡(
ch
 == '%')

251 
ch
 = 
∑t
[1];

253 
ch
) {

256 
Áû
 = 
	`ôem_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
);

259 #i‚de‡
__NO_ADD_ACTION__


262 
Áû
 = 
	`livög_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
);

268 
vÆue
 = 0;

269 
Áû
 = 0;

274 
vÆue
 = 
w¨r
[*
cix_ö
];

275 (*
cix_ö
)++;

276 
Áû
 = 0;

281 
Áû
 = 
	`sögÀ_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
);

286 
Áû
 = 
	`¥ïos_∑r£
(
w¨r
, 
cix_ö
);

291 
Áû
 = 
	`numbî_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
);

295 
°r1
 = 
∑t
[1..<2];

296 
°r2
 = 
w¨r
[*
cix_ö
];

297 i‡(
∑t
[<1] ='\'' && 
°r1
 =
°r2
) {

298 
Áû
 = 0;

299 (*
cix_ö
)++;

301 
Áû
 = 1;

305 
°r1
 = 
∑t
[1..<2];

306 
°r2
 = 
w¨r
[*
cix_ö
];

307 i‡(
°r1
 =
°r2
)

308 (*
cix_ö
)++;

309 
Áû
 = 0;

313 
Áû
 = 0;

316  
Áû
;

317 
	}
}

319 
°rög
 *
	g‹d1
 = ({"", "first", "second", "third", "fourth", "fifth",

325 
°rög
 *
	g‹d10
 = ({"", "", "twenty", "thirty", "forty", "fifty", "sixty",

328 
°rög
 *
	gs‹d10
 = ({"", "", "twentieth", "thirtieth", "fortieth",

332 
°rög
 *
	gnum1
 = ({"", "one", "two", "three", "four", "five", "six",

337 
°rög
 *
	gnum10
 = ({"", "", "twenty", "thirty", "forty", "fifty", "sixty",

340 
¥iv©e
 

341 
	$numbî_∑r£
(
mixed
 *
ob¨r
, mixed *
w¨r
, 
ªf
 
cix_ö
) {

342 
cix
, 
ãn
, 
⁄es
, 
num
;

343 
°rög
 
buf
;

345 
cix
 = *
cix_ö
;

347 i‡(
	`ssˇnf
(
w¨r
[
cix
], "%d", 
num
)) {

348 i‡(
num
 >= 0) {

349 (*
cix_ö
)++;

350 
vÆue
 = 
num
;

355 i‡(
w¨r
[
cix
] =
Ælw‹d
) {

356 (*
cix_ö
)++;

357 
vÆue
 = 0;

361 
ãn
 = 0;Åen < 10;Åen++)

362 
⁄es
 = 0; ones < 10; ones++) {

363 
buf
 = 
num10
[
ãn
] + (ã¿> 1 ? 
num1
[
⁄es
] :Çum1[ten * 10 + ones]);

364 i‡(
buf
 =
w¨r
[
cix
]) {

365 (*
cix_ö
)++;

366 
vÆue
 = 
ãn
 * 10 + 
⁄es
;

372 
ãn
 = 0;Åen < 10;Åen++)

373 
⁄es
 = 0; ones < 10; ones++) {

374 
buf
 = (
⁄es
 ? 
‹d10
[
ãn
] : 
s‹d10
[ãn]Ë+ (ã¿> 1 ? 
‹d1
[ones] : ord1[ten*10 + ones]);

375 i‡(
buf
 =
w¨r
[
cix
]) {

376 (*
cix_ö
)++;

377 
vÆue
 = -(
ãn
 * 10 + 
⁄es
);

383 
	}
}

385 
¥iv©e
 

386 
	$ôem_∑r£
(
mixed
 *
ob¨r
, mixed *
w¨r
, 
ªf
 
cix_ö
) {

387 
mixed
 *
tmp
, *
ªt
;

388 
cix
, 
tix
, 
obix
, 
∂ur_Êag
, 
max_cix
, 
m©ch_Æl
;

390 
tmp
 = 
	`Æloˇã
((
ob¨r
) + 1);

392 i‡(!
	`numbî_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
)) {

393 
tmp
[0] = 
vÆue
;

394 
m©ch_Æl
 = (
vÆue
 == 0);

395 
∂ur_Êag
 = (
m©ch_Æl
 || 
vÆue
 > 1);

396 
have_numbî
 = 1;

397 
vÆue
 = 0;

399 
∂ur_Êag
 = 0;

400 
m©ch_Æl
 = 0;

403 
max_cix
 = *
cix_ö
, 
tix
 = 1, 
obix
 = 0; obix < (
ob¨r
); obix++) {

404 
cix
 = *
cix_ö
;

405 i‡(!
	`obje˘p
(
ob¨r
[
obix
]))

407 i‡(
cix
 =(
w¨r
Ë&& 
m©ch_Æl
) {

408 
tmp
[
tix
++] = 
ob¨r
[
obix
];

411 
	`lﬂd_Õc_öfo
(
obix
, 
ob¨r
[obix]);

413 i‡(
	`m©ch_obje˘
(
obix
, 
w¨r
, 
ªf
 
cix
,Ñe‡
∂ur_Êag
)) {

414 
tmp
[
tix
++] = 
ob¨r
[
obix
];

415 
max_cix
 = (max_cix < 
cix
) ? cix : max_cix;

419 i‡(
tix
 < 2) {

420 i‡(
have_numbî
)

421 (*
cix_ö
)--;

424 i‡(*
cix_ö
 < (
w¨r
))

425 *
cix_ö
 = 
max_cix
 + 1;

426 i‡(!
have_numbî
)

427 
tmp
[0] = !
∂ur_Êag
;

429 
vÆue
 = 
tmp
[0..
tix
-1];

432 
	}
}

434 #i‚de‡
__NO_ADD_ACTION__


435 
¥iv©e
 

436 
	$livög_∑r£
(
mixed
 *
ob¨r
, 
¨øy
 
w¨r
, 
ªf
 
cix_ö
, ª‡
Áû
)

438 
mixed
 *
live
;

439 
obje˘
 
ob
;

440 
obix
, 
tix
;

442 
live
 = 
	`Æloˇã
((
ob¨r
));

443 
tix
 = 0;

445 
obix
 = 0; obix < (
ob¨r
); obix++)

446 i‡(
	`livög
(
ob¨r
[
obix
]))

447 
live
[
tix
++] = 
ob¨r
[
obix
];

449 i‡(
tix
 && !
	`ôem_∑r£
(
live
, 
w¨r
, 
cix_ö
))

452 
ob
 = 
	`föd_∂ayî
(
w¨r
[*
cix_ö
]);

453 i‡(!
ob
)

454 
ob
 = 
	`föd_livög
(
w¨r
[*
cix_ö
]);

456 i‡(
ob
) {

457 
vÆue
 = 
ob
;

458 (*
cix_ö
)++;

462 
	}
}

465 
¥iv©e
 

466 
	$sögÀ_∑r£
(
mixed
 *
ob¨r
, mixed *
w¨r
, 
ªf
 
cix_ö
)

468 
cix
, 
obix
, 
∂ur_Êag
;

470 
obix
 = 0; obix < (
ob¨r
); obix++) {

471 
cix
 = *
cix_ö
;

472 i‡(
	`obje˘p
(
ob¨r
[
obix
]))

473 
	`lﬂd_Õc_öfo
(
obix
, 
ob¨r
[obix]);

474 
∂ur_Êag
 = 0;

475 i‡(
	`m©ch_obje˘
(
obix
, 
w¨r
, 
ªf
 
cix
,Ñe‡
∂ur_Êag
)) {

476 *
cix_ö
 = 
cix
 + 1;

477 
vÆue
 = 
ob¨r
[
obix
];

482 
	}
}

484 
¥iv©e
 

485 
	$¥ïos_∑r£
(
mixed
 *
w¨r
, 
ªf
 
cix_ö
, mixed 
¥ïos
) {

486 
mixed
 *
èº
;

487 
°rög
 
tmp
;

488 
pix
, 
tix
;

490 i‡(!
¥ïos
 || !
	`¨øyp
(prepos))

491 
¥ïos
 = 
¥ïos_li°
;

493 
pix
 = 0;Öix < (
¥ïos
);Öix++) {

494 i‡(!
	`°rögp
(
¥ïos
[
pix
]))

497 
tmp
 = 
¥ïos
[
pix
];

498 i‡(
	`membî_¨øy
(' ', 
tmp
) == -1) {

499 i‡(
tmp
 =
w¨r
[*
cix_ö
]) {

500 (*
cix_ö
)++;

504 
èº
 = 
	`ex∂ode
(
tmp
, " ");

505 i‡(*
cix_ö
 + (
èº
Ë<(
w¨r
)) {

506 
tix
 = 0;Åix < (
èº
);Åix++) {

507 i‡(*
cix_ö
 + 
tix
 >(
w¨r
) ||

508 
w¨r
[*
cix_ö
 + 
tix
] !
èº
[tix])

511 i‡(
tix
 =(
èº
)) {

512 (*
cix_ö
Ë+(
èº
);

519 i‡(
pix
 =(
¥ïos
)) {

520 
vÆue
 = 0;

523 
vÆue
 = 
¥ïos
[
pix
];

526 
	}
}

528 
¥iv©e
 

529 
	$m©ch_obje˘
(
obix
, 
mixed
 *
w¨r
, 
ªf
 
cix_ö
, ª‡
∂ur
) {

530 
mixed
 *
ids
;

531 
û
, 
pos
, 
˝lur
, 
ﬁd_cix
;

532 
°rög
 
°r
;

534 
˝lur
 = (*
∂ur
 * 2); cplur < 4; cplur++) {

535 
˝lur
) {

537 i‡(!
id_li°_d
)

539 
ids
 = 
id_li°_d
;

543 i‡(!
d_li°
 ||

544 (
id_li°
Ë<
obix
 ||

545 !
	`¨øyp
(
id_li°
[
obix
]))

547 
ids
 = 
id_li°
[
obix
];

551 i‡(!
∂uid_li°_d
)

553 
ids
 = 
∂uid_li°_d
;

557 i‡(!
∂uid_li°
 ||

558 (
g∂uid_li°
Ë<
obix
 ||

559 !
	`¨øyp
(
g∂uid_li°
[
obix
]))

561 
ids
 = 
∂uid_li°
[
obix
];

565 
ids
 = 0;

568 
û
 = 0; i»< (
ids
); il++) {

569 i‡(
	`°rögp
(
ids
[
û
])) {

570 
°r
 = 
ids
[
û
];

571 
ﬁd_cix
 = *
cix_ö
;

572 i‡((
pos
 = 
	`föd_°rög
(
°r
, 
w¨r
, 
cix_ö
)) >= 0) {

573 i‡(
pos
 =
ﬁd_cix
) {

574 i‡(
˝lur
 > 1)

575 *
∂ur
 = 1;

577 } i‡(
	`check_adje˘iv
(
obix
, 
w¨r
, 
ﬁd_cix
, 
pos
 - 1)) {

578 i‡(
˝lur
 > 1)

579 *
∂ur
 = 1;

583 *
cix_ö
 = 
ﬁd_cix
;

588 
	}
}

591 
	$föd_°rög
(
°rög
 
°r
, 
mixed
 *
w¨r
, 
ªf
 
cix_ö
)

593 
Âos
;

594 
°rög
 
p1
;

595 
mixed
 *
•lô
;

597 ; *
cix_ö
 < 
w¨r
->
size
; (*cix_in)++) {

598 
p1
 = 
w¨r
[*
cix_ö
];

600 i‡(
p1
 =
°r
)

601  *
cix_ö
;

603 i‡(
	`membî_¨øy
(' ', 
°r
) == -1)

609 i‡(*
cix_ö
 =(
w¨r
->
size
) - 1)

612 
•lô
 = 
	`ex∂ode
(
°r
, " ");

619 i‡((
•lô
Ë> (
w¨r
Ë- *
cix_ö
)

622 
Âos
 = *
cix_ö
;

623 ; (*
cix_ö
 - 
Âos
Ë< (
•lô
); (*cix_in)++) {

624 i‡(
•lô
[*
cix_ö
 - 
Âos
] =
w¨r
[*cix_in])

627 i‡((*
cix_ö
 - 
Âos
Ë=(
•lô
))

628  
Âos
;

630 *
cix_ö
 = 
Âos
;

633 
	}
}

635 
¥iv©e
 

636 
	$check_adje˘iv
(
obix
, 
mixed
 *
w¨r
, 
‰om
, 
to
)

638 
û
, 
back
, 
Áû
;

639 
°rög
 
ad°r
;

640 
mixed
 *
ids
;

642 i‡(
	`¨øyp
(
adjid_li°
[
obix
]))

643 
ids
 = 
adjid_li°
[
obix
];

645 
ids
 = 0;

647 
Áû
 = 0, 
û
 = 
‰om
; i»<
to
; il++) {

648 i‡((
	`membî_¨øy
(
w¨r
[
û
], 
ids
) < 0) &&

649 (
	`membî_¨øy
(
w¨r
[
û
], 
adjid_li°_d
) < 0))

650 
Áû
 = 1;

656 i‡(!
Áû
)

659 i‡(
‰om
 =
to
)

674 
û
 = 
‰om
; i»<
to
;) {

675 
back
 = 
to
; back >
û
; back--) {

679 
ad°r
 = "";

680 
sum
 = 
û
; sum <
back
; sum++) {

682 i‡(
sum
 > 
û
)

683 
ad°r
 += " ";

684 
ad°r
 +
w¨r
[
sum
];

686 i‡((
	`membî_¨øy
(
ad°r
, 
ids
) < 0) &&

687 (
	`membî_¨øy
(
ad°r
, 
adjid_li°_d
) < 0))

690 
û
 = 
back
 + 1;

691 
back
 = 
to
;

695 i‡(
back
 < 
to
)

699 
	}
}

	@compat/simuls/process_string.c

1 
mixed
 
	$¥o˚ss_vÆue
(
°rög
 
func
) {

2 
tmp
;

3 
°rög
 
¨g
;

4 
obje˘
 
obj
;

5 
mixed
 
ªt
;

7 i‡(!
func
 || !
	`°rögp
(func))

10 i‡((
tmp
 = 
	`membî_¨øy
('|', 
func
)) != -1) {

11 
¨g
 = 
func
[
tmp
+1..];

12 
func
 = func[0..
tmp
-1];

14 i‡((
tmp
 = 
	`membî_¨øy
(':', 
func
)) != -1) {

15 
obj
 = 
	`föd_obje˘
(
func
[
tmp
+1..]);

16 
func
 = func[0..
tmp
-1];

18 
obj
 = 
	`¥evious_obje˘
();

20 i‡(!
obj
)

23  
	`ˇŒ_Ÿhî
(
obj
, 
func
, 
	`ex∂ode
(
¨g
, "|")...);

24 
	}
}

26 
°rög
 
	$¥o˚ss_°rög
(
°rög
 
°r
) {

27 
¥_°¨t
;

28 
°rög
 
¨øy
 
∑πs
 = 
	`ex∂ode
(
°r
, "@@");

30 
¥_°¨t
 = !(
°r
[0..1]=="@@");

32 
û
 = 
¥_°¨t
; i»< (
∑πs
); il += 2) {

33 
°rög
 
tmp
 = 
	`¥o˚ss_vÆue
(
∑πs
[
û
]);

34 i‡(
	`°rögp
(
tmp
))

35 
∑πs
[
û
] = 
tmp
;

38  
	`im∂ode
(
∑πs
, "");

39 
	}
}

	@compat/simuls/tail.c

1 #ifde‡
COMPAT_TAIL


3 
	$èû
(
°rög
 
‚ame
) {

4 
°rög
 
°r
;

5 
off£t
 = 
	`fûe_size
(
‚ame
);

7 i‡(
off£t
 < 0)

10 
off£t
 -= 54 * 20;

11 i‡(
off£t
 < 0) offset = 0;

12 
°r
 = 
	`ªad_byãs
(
‚ame
, 
off£t
, 1080);

13 i‡(!
°r
)  0;

14 i‡(
off£t
Ë
°r
 = så[
	`°r§ch
(str, "\n")+1..];

15 
	`wrôe
(
°r
);

18 
	}
}

25 
v¨¨gs
 
°rög
 
	$èû
(
°rög
 
‚ame
, 
∆öes
) {

26 
chunk
 = 
∆öes
 * 80;

27 
off£t
 = 
	`fûe_size
(
‚ame
);

28 
num_∆
, 
p
, 
skù
;

29 
°rög
 
°r
 = "";

31 
off£t
 > 0 && 
num_∆
 <
∆öes
) {

32 
num_∆
 = 0;

33 
off£t
 -
chunk
;

34 i‡(
off£t
 < 0) {

35 
chunk
 +
off£t
;

36 
off£t
 = 0;

38 
°r
 = 
	`ªad_byãs
(
‚ame
, 
off£t
, 
chunk
) + str;

39 
p
 = -1;

40 
p
 < (
°r
)-1 &&Ö = 
	`membî_¨øy
('\n', str,Ö+1))

41 
num_∆
++;

43 
skù
 = 
num_∆
 - 
∆öes
;

44 
p
 = -1;

45 
skù
--)

46 
p
 = 
	`membî_¨øy
('\n', 
°r
,Ö+1);

47  
°r
[
p
..];

48 
	}
}

	@compile_file.c

1 
	~"°d.h
"

2 #i‡
deföed
(
LPC_TO_C
Ë&& deföed(
BINARIES
)

3 
	#SUPRESS_COMPILER_INLINES


	)

4 
	~"compûe_fûe.h
"

5 
	~"fûe_ö˛.h
"

6 
	~"öãrÁ˚.h
"

7 
	~"compûî.h
"

8 
	~"md.h
"

9 
	~"ŸabÀ.h
"

10 
	~"cfuns.h
"

11 
	~"fûe.h
"

12 
	~"backíd.h
"

13 
	~"bö¨õs.h
"

14 
	~"cc.h
"

15 
	~"ma°î.h
"

18 
lök_jump_èbÀ
 
	$P2
(
¥ogøm_t
 *, 
¥og
, **, 
jump_èbÀ
)

20 
num
 = 
¥og
->
num_fun˘i⁄s_deföed
;

21 
fun˘i⁄_t
 *
funcs
 = 
¥og
->
fun˘i⁄_èbÀ
;

22 
i
;

23 
j
;

25 
i
 = 0, 
j
 = 0; i < 
num
; i++) {

26 i‡(
jump_èbÀ
[
j
])

27 
funcs
[
i
].
addªss
 = (Ë
jump_èbÀ
[
j
];

29 
funcs
[
i
].
addªss
 = 0;

30 
j
++;

32 
	}
}

35 
	$öô_Õc_to_c
()

37 
öãrÁ˚_t
 **
p
 = 
öãrÁ˚
;

38 
Õc_obje˘_t
 *
ob
;

40 *
p
) {

41 
ob
 = 
	`ALLOCATE
(
Õc_obje˘_t
, 
TAG_LPC_OBJECT
, "init_lpc_to_c");

42 
ob
->
«me
 = 
	`Æloc_c°rög
((*
p
)->
‚ame
, "init_lpc_to_c");

43 
	`SET_TAG
(
ob
->
«me
, 
TAG_OBJ_NAME
);

44 
	`íãr_obje˘_hash_©_íd
((
obje˘_t
 *)
ob
);

45 
ob
->
Êags
 = 
O_COMPILED_PROGRAM
;

46 
ob
->
jump_èbÀ
 = (*
p
)->jump_table;

47 i‡((
ob
->
°rög_swôch_èbÀs
 = (*
p
)->string_switch_tables))

48 
	`fix_swôches
(
ob
->
°rög_swôch_èbÀs
);

49 
p
++;

51 
	}
}

54 #ifde‡
F_GENERATE_SOURCE


55 
gíî©e_idítifõr
 
	$P2
(*, 
buf
, *, 
«me
)

57 *
«me
) {

58 i‡((*
«me
 >= 'a' && *name <= 'z') || (*name >= 'A' && *name <= 'Z'))

59 *
buf
++ = *
«me
++;

61 *
buf
++ = '_';

62 
«me
++;

65 *
buf
 = 0;

66 
	}
}

68 #ifde‡
RUNTIME_LOADING


70 
¸óã_comm™d
 
	$P7
(*, 
buf
, *, 
f‹m©
,

71 *, 
compûî
, *, 
cÊags
,

72 *, 
§c
, *, 
fûe
, *, 
îr‹s
) {

73 *
p
 = 
f‹m©
, *
q
 = 
buf
;

75 *
p
) {

77 *
q
 = 0;

80 *++
p
) {

82 
	`°r˝y
(
q
, 
compûî
);

83 
q
 +
	`°æí
(q);

86 
	`°r˝y
(
q
, 
cÊags
);

87 
q
 +
	`°æí
(q);

90 
	`°r˝y
(
q
, 
§c
);

91 
q
 +
	`°æí
(q);

94 
	`°r˝y
(
q
, 
fûe
);

95 
q
 +
	`°æí
(q);

98 
	`°r˝y
(
q
, 
îr‹s
);

99 
q
 +
	`°æí
(q);

102 
	`Ârötf
(
°dîr
, "Bad character in command format.\n");

105 
p
++;

108 *
q
++ = *
p
++;

112 
	}
}

114 
compûe_™d_lök
 
	$P2
(*, 
fûe
, *, 
idít
) {

115 *
p
, 
comm™d
[1024];

116 
tmp
[1024];

117 *
h™dÀ
;

118 
Õc_obje˘_t
 *
ob
;

119 
öãrÁ˚_t
 *
öãrÁ˚
;

121 i‡((
p
 = 
	`°ºchr
(
fûe
, '.')))

122 *
p
 = 0;

125 
	`¸óã_comm™d
(
comm™d
,

126 #i‡
	`deföed
(
sgi
)

128 #ñi‡
	`deföed
(
__NëBSD__
)

130 #ñi‡
	`deföed
(
__Æpha
)

136 
COMPILER
, 
CFLAGS
, "Õc2c", 
fûe
, "lpc2c/errors");

138 i‡(
	`sy°em
(
comm™d
))

139 
	`îr‹
("Compilation of generated C code failed.\n");

141 
	`•rötf
(
tmp
, "%s.so", 
fûe
);

142 
h™dÀ
 = 
	`dl›í
(
tmp
, 
RTLD_LAZY
);

143 i‡(!
h™dÀ
) {

144 
	`•rötf
(
tmp
, "dl›í(ËÁûed: %s\n", 
	`dÀº‹
());

145 
	`îr‹
(
tmp
);

148 
	`•rötf
(
tmp
, "LPCINFO_%s", 
idít
);

149 
öãrÁ˚
 = 
	`dlsym
(
h™dÀ
, 
tmp
);

151 i‡(!
öãrÁ˚
) {

152 
	`•rötf
(
tmp
, "_LPCINFO_%s", 
idít
);

153 
öãrÁ˚
 = 
	`dlsym
(
h™dÀ
, 
tmp
);

156 i‡(!
öãrÁ˚
) {

157 
	`•rötf
(
tmp
, "dlsym(ËÁûed: %s\n", 
	`dÀº‹
());

158 
	`îr‹
(
tmp
);

161 
	`ªmove_¥ecompûed_hashes
(
öãrÁ˚
->
‚ame
);

163 
ob
 = 
	`ALLOCATE
(
Õc_obje˘_t
, 
TAG_LPC_OBJECT
, "compile_and_link");

164 
ob
->
«me
 = 
	`Æloc_c°rög
(
öãrÁ˚
->
‚ame
, "compile_and_link");

165 
	`SET_TAG
(
ob
->
«me
, 
TAG_OBJ_NAME
);

166 
	`íãr_obje˘_hash_©_íd
((
obje˘_t
 *)
ob
);

167 
ob
->
Êags
 = 
O_COMPILED_PROGRAM
;

168 
ob
->
jump_èbÀ
 = 
öãrÁ˚
->jump_table;

169 i‡((
ob
->
°rög_swôch_èbÀs
 = 
öãrÁ˚
->string_switch_tables))

170 
	`fix_swôches
(
ob
->
°rög_swôch_èbÀs
);

171 
	}
}

174 *
	gª°_of_makefûe
 = "interface.c\n\
\n\
%%ifdef GNU\n\
=$(addprefix $(OBJDIR)/,$(subst .c,.o,$(SRC)))\n\
\n\
$(OBJDIR)/%%.o: %%.c $(OBJDIR)\n\
\t$(CC) -I$(OBJDIR) -I.. $(CFLAGS) -o $@ -c $<\n\
%%else\n\
.c.o:\n\
\t$(CC) $(CFLAGS) -I.. -c $*.c\n\
%%endif\n\
\n\
: $(OBJ)\n\
\tarÑlcu mudlib.a $(OBJ)\n\
\n\
:\n\
\t-rm -f *.o\n\
\t-rm -f mudlib.a\n\
\n";

194 
gíî©e_sour˚
 
	$P2
(
svÆue_t
 *, 
¨g1
, *, 
out_‚ame
)

196 
FILE
 *
makefûe
;

198 
°©
 
c_°
;

199 
ªÆ_«me
[200];

200 
«me
[200];

201 
out_«me
[200];

202 
idít
[205];

203 
d⁄e
;

204 *
ouç
;

205 *
°rög_√eds_‰ì
;

206 
ödex
;

207 #ifde‡
RUNTIME_LOADING


208 
¨øy_t
 
tmp_¨r
;

210 
¨øy_t
 *
¨r
;

211 
¥ogøm_t
 *
¥og
;

212 
f
;

213 
sögÀ
;

214 
îr‹_c⁄ãxt_t
 
ec⁄
;

215 
svÆue_t
 *
mªt
;

217 
mªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_COMPILE_TO_C
, 0);

218 i‡(!
	`MASTER_APPROVED
(
mªt
))

219 
	`îr‹
("PermissionÅo use generate_source() denied by master::valid_compile_to_c()\n");

221 
compû©i⁄_ouçut_fûe
 = 0;

222 
°rög_√eds_‰ì
 = 0;

224 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
))

225 
	`îr‹
("Too deepÑecursion.");

226 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

227 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

228 
	`p›_c⁄ãxt
(&
ec⁄
);

229 i‡(
compû©i⁄_ouçut_fûe
)

230 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

231 i‡(
°rög_√eds_‰ì
)

232 
	`FREE
(
°rög_√eds_‰ì
);

236 i‡(
¨g1
->
ty≥
 !
T_ARRAY
) {

237 #ifde‡
RUNTIME_LOADING


238 
tmp_¨r
.
size
 = 1;

239 
tmp_¨r
.
ôem
[0] = *
¨g1
;

240 
¨r
 = &
tmp_¨r
;

242 
sögÀ
 = 1;

243 
out_‚ame
 = 
out_«me
;

244 
	`°r˝y
(
out_«me
, 
SAVE_BINARIES
);

245 
	`°rˇt
(
out_‚ame
, "/");

247 
	`îr‹
("RUNTIME_LOADINGÇotÉnabled\n");

250 
¨r
 = 
¨g1
->
u
.arr;

252 
sögÀ
 = 0;

253 i‡(!
out_‚ame
) {

254 
out_‚ame
 = 
out_«me
;

255 
	`°r˝y
(
out_«me
, 
SAVE_BINARIES
);

256 
	`°rˇt
(
out_‚ame
, "/mudlib/");

259 
ouç
 = 
out_‚ame
 + 
	`°æí
(out_fname);

260 *
out_‚ame
 == '/')

261 
out_‚ame
++;

263 
ödex
 = 0; index < 
¨r
->
size
; index++) {

264 *
ouç
 = 0;

266 i‡(
¨r
->
ôem
[
ödex
].
ty≥
 !
T_STRING
)

267 
	`îr‹
("BadÅype for filename in generate_source()\n");

269 i‡(!
	`°rù_«me
(
¨r
->
ôem
[
ödex
].
u
.
°rög
, 
«me
, Çame))

270 
	`îr‹
("Filenames with consecutive /'s inÅhemáren'tállowed.\n");

275 (Ë
	`°r˝y
(
ªÆ_«me
, 
«me
);

276 (Ë
	`°rˇt
(
ªÆ_«me
, ".c");

277 i‡(
	`°©
(
ªÆ_«me
, &
c_°
) == -1)

278 
	`îr‹
("CouldÇŸ föd '%s'Åÿcompûe.\n", 
ªÆ_«me
);

280 i‡(!
	`ÀgÆ_∑th
(
ªÆ_«me
)) {

281 
	`debug_mesßge
("IŒegÆÖ©h«me: %s\n", 
ªÆ_«me
);

282 
	`îr‹
("IllegalÖathÇame.\n");

285 
	`gíî©e_idítifõr
(
idít
, 
«me
);

286 
	`°rˇt
(
out_‚ame
, 
idít
);

287 
	`°rˇt
(
out_‚ame
, ".c");

289 
compû©i⁄_ouçut_fûe
 = 
	`¸dú_f›í
(
out_‚ame
);

290 i‡(
compû©i⁄_ouçut_fûe
 == 0) {

291 
	`debug_≥º‹
("gíî©e_sour˚: f›í", 
out_‚ame
);

292 
	`îr‹
("CouldÇŸ o≥¿ouçuàfûê'/%s'.\n", 
out_‚ame
);

294 
	`Ârötf
(
compû©i⁄_ouçut_fûe
, "#include \"std.h\"\n#include \"interface.h\"\n#include \"lpc_to_c.h\"\n\n");

296 
d⁄e
 = 0;

297 !
d⁄e
) {

298 i‡(
comp_Êag
)

299 
	`debug_mesßge
(" compûög /%†...", 
ªÆ_«me
);

300 
f
 = 
	`›í
(
ªÆ_«me
, 
O_RDONLY
);

301 i‡(
f
 == -1) {

302 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

303 
compû©i⁄_ouçut_fûe
 = 0;

304 
	`debug_≥º‹
("gíî©e_sour˚", 
ªÆ_«me
);

305 
	`îr‹
("CouldÇŸÑódÅhêfûê'/%s'.\n", 
ªÆ_«me
);

307 
	`gíî©e_idítifõr
(
idít
, 
«me
);

308 
compû©i⁄_idít
 = 
idít
;

309 
compûe_to_c
 = 1;

310 
¥og
 = 
	`compûe_fûe
(
f
, 
ªÆ_«me
);

311 
compûe_to_c
 = 0;

312 i‡(
comp_Êag
)

313 
	`debug_mesßge
(" done\n");

314 
	`upd©e_compûe_av
(
tŸÆ_löes
);

315 
	`˛o£
(
f
);

316 
tŸÆ_löes
 = 0;

318 i‡(
öhîô_fûe
 =0 && (
num_∑r£_îr‹
 > 0 || !
¥og
)) {

319 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

320 
compû©i⁄_ouçut_fûe
 = 0;

321 i‡(
¥og
)

322 
	`‰ì_¥og
(
¥og
, 1);

323 
	`p›_c⁄ãxt
(&
ec⁄
);

327 i‡(
öhîô_fûe
) {

328 
°rög_√eds_‰ì
 = 
öhîô_fûe
;

330 i‡(
¥og
) {

331 
	`‰ì_¥og
(
¥og
, 1);

332 
¥og
 = 0;

334 i‡(
	`°rcmp
(
öhîô_fûe
, 
«me
) == 0) {

335 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

336 
compû©i⁄_ouçut_fûe
 = 0;

337 
	`FREE
(
öhîô_fûe
);

338 
°rög_√eds_‰ì
 = 
öhîô_fûe
 = 0;

339 
	`îr‹
("IllegalÅo inherit self.\n");

341 
öhîô_fûe
 = 0;

342 i‡(!
	`lﬂd_obje˘
(
°rög_√eds_‰ì
, 0))

343 
	`îr‹
("AttemptedÅo inheritáÇon-existent file.");

345 
	`FREE
(
°rög_√eds_‰ì
);

346 
°rög_√eds_‰ì
 = 0;

348 
d⁄e
 = 1;

350 i‡(
¥og
) {

351 
	`‰ì_¥og
(
¥og
, 1);

352 
¥og
 = 0;

354 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

355 
compû©i⁄_ouçut_fûe
 = 0;

357 i‡(!
sögÀ
) {

358 *
ouç
 = 0;

359 
	`°rˇt
(
out_‚ame
, "interface.c");

360 
compû©i⁄_ouçut_fûe
 = 
	`¸dú_f›í
(
out_‚ame
);

361 i‡(
compû©i⁄_ouçut_fûe
 == 0) {

362 
	`debug_≥º‹
("gíî©e_sour˚: f›í", 
out_‚ame
);

363 
	`îr‹
("CouldÇŸ o≥¿ouçuàfûê'/%s'.\n", 
out_‚ame
);

365 *
ouç
 = 0;

366 
	`°rˇt
(
out_‚ame
, "Makefile.master");

367 
makefûe
 = 
	`¸dú_f›í
(
out_‚ame
);

368 i‡(
makefûe
 == 0) {

369 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

370 
compû©i⁄_ouçut_fûe
 = 0;

371 
	`debug_≥º‹
("gíî©e_sour˚: f˛o£", 
out_‚ame
);

372 
	`îr‹
("CouldÇŸ o≥¿ouçuàfûê'/%s'.\n", 
out_‚ame
);

375 
	`Ârötf
(
compû©i⁄_ouçut_fûe
, "#include \"std.h\"\n#include \"interface.h\"\n#include \"lpc_to_c.h\"\n\n");

376 
	`Ârötf
(
makefûe
, "OBJ=");

377 
ödex
 = 0; index < 
¨r
->
size
; index++) {

378 
	`°rù_«me
(
¨r
->
ôem
[
ödex
].
u
.
°rög
, 
«me
, Çame);

379 
	`gíî©e_idítifõr
(
idít
, 
«me
);

380 
	`Ârötf
(
compû©i⁄_ouçut_fûe
, "exã∫ i¡îÁ˚_àLPCINFO_%s;\n", 
idít
);

382 
	`Ârötf
(
compû©i⁄_ouçut_fûe
, "\n\ninterface_t *interface[] = {\n");

383 
	`Ârötf
(
makefûe
, "interface.o");

384 
ödex
 = 0; index < 
¨r
->
size
; index++) {

385 
	`°rù_«me
(
¨r
->
ôem
[
ödex
].
u
.
°rög
, 
«me
, Çame);

386 
	`gíî©e_idítifõr
(
idít
, 
«me
);

387 
	`Ârötf
(
compû©i⁄_ouçut_fûe
, " &LPCINFO_%s,\n", 
idít
);

388 
	`Ârötf
(
makefûe
, " %s.o", 
idít
);

390 
	`Ârötf
(
makefûe
, "\nSRC=");

391 
ödex
 = 0; index < 
¨r
->
size
; index++) {

392 
	`°rù_«me
(
¨r
->
ôem
[
ödex
].
u
.
°rög
, 
«me
, Çame);

393 
	`gíî©e_idítifõr
(
idít
, 
«me
);

394 
	`Ârötf
(
makefûe
, "%s.¯", 
idít
);

396 
	`Ârötf
(
compû©i⁄_ouçut_fûe
, " 0\n};\n");

397 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

398 
compû©i⁄_ouçut_fûe
 = 0;

399 
	`Ârötf
(
makefûe
, 
ª°_of_makefûe
);

400 
	`f˛o£
(
makefûe
);

402 *
ouç
 = 0;

403 
	`°rˇt
(
out_‚ame
, "Makefile.pre");

404 
makefûe
 = 
	`¸dú_f›í
(
out_‚ame
);

405 i‡(
makefûe
 == 0) {

406 
	`debug_≥º‹
("gíî©e_sour˚: f˛o£", 
out_‚ame
);

407 
	`îr‹
("CouldÇŸ o≥¿ouçuàfûê'/%s'.\n", 
out_‚ame
);

409 
	`Ârötf
(
makefûe
, "%%define NORMAL\n\n%%include \"mudlib/Makefile.master\"\n\n");

410 
	`f˛o£
(
makefûe
);

412 *
ouç
 = 0;

413 
	`°rˇt
(
out_‚ame
, "GNUmakefile.pre");

414 
makefûe
 = 
	`¸dú_f›í
(
out_‚ame
);

415 i‡(
makefûe
 == 0) {

416 
	`debug_≥º‹
("gíî©e_sour˚: f˛o£", 
out_‚ame
);

417 
	`îr‹
("CouldÇŸ o≥¿ouçuàfûê'/%s'.\n", 
out_‚ame
);

419 
	`Ârötf
(
makefûe
, "%%define GNU\n\n%%include \"mudlib/Makefile.master\"\n\n");

420 
	`f˛o£
(
makefûe
);

422 #ifde‡
RUNTIME_LOADING


423 
	`compûe_™d_lök
(
out_‚ame
, 
idít
);

426 
	`p›_c⁄ãxt
(&
ec⁄
);

428 
	}
}

	@compile_file.h

1 #i‚de‡
COMPILE_FILE_H


2 
	#COMPILE_FILE_H


	)

4 
	~"Õc_ö˛.h
"

6 
öô_Õc_to_c
 
PROT
(());

7 
gíî©e_sour˚
 
PROT
((
svÆue_t
 *, *));

8 
lök_jump_èbÀ
 
PROT
((
¥ogøm_t
 *, **));

	@compiler.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"compûî.h
"

4 
	~"gíî©e.h
"

5 
	~"sw≠.h
"

6 
	~"s¸©ch∑d.h
"

7 
	~"qs‹t.h
"

8 
	~"fûe.h
"

9 
	~"bö¨õs.h
"

11 
	~"icode.h
"

12 
	~"Àx.h
"

13 
	~"simul_efun.h
"

15 
˛ón_∑r£r
 
PROT
(());

16 
¥ﬁog
 
PROT
((, *));

17 
¥ogøm_t
 *
ïûog
 
PROT
(());

18 
show_ovîlﬂd_w¨nögs
 
PROT
(());

20 
	#CT
(
x
Ë(1 << (x))

	)

21 
	#CT_SIMPLE
(
x
Ë(
	`CT
(
TYPE_ANY
Ë| CT(x))

	)

23 
	gcom∑tibÀ
[11] = {

26  
CT_SIMPLE
(
TYPE_NOVALUE
Ë| 
CT
(
TYPE_VOID
Ë| CT(
TYPE_NUMBER
),

27  
CT_SIMPLE
(
TYPE_VOID
Ë| 
CT
(
TYPE_NUMBER
),

28  
CT_SIMPLE
(
TYPE_NUMBER
Ë| 
CT
(
TYPE_REAL
),

29  
CT_SIMPLE
(
TYPE_STRING
),

30  
CT_SIMPLE
(
TYPE_OBJECT
),

31  
CT_SIMPLE
(
TYPE_MAPPING
),

32  
CT_SIMPLE
(
TYPE_FUNCTION
),

33  
CT_SIMPLE
(
TYPE_REAL
Ë| 
CT
(
TYPE_NUMBER
),

34  
CT_SIMPLE
(
TYPE_BUFFER
),

37 
	gis_ty≥
[11] = {

40  
CT_SIMPLE
(
TYPE_NOVALUE
Ë| 
CT
(
TYPE_VOID
),

41  
CT_SIMPLE
(
TYPE_VOID
Ë| 
CT
(
TYPE_NOVALUE
),

42  
CT_SIMPLE
(
TYPE_NUMBER
),

43  
CT_SIMPLE
(
TYPE_STRING
),

44  
CT_SIMPLE
(
TYPE_OBJECT
),

45  
CT_SIMPLE
(
TYPE_MAPPING
),

46  
CT_SIMPLE
(
TYPE_FUNCTION
),

47  
CT_SIMPLE
(
TYPE_REAL
),

48  
CT_SIMPLE
(
TYPE_BUFFER
),

51 
mem_block_t
 
	gmem_block
[
NUMAREAS
];

53 
∑r£_node_t
 *
	gcomp_åìs
[
NUMTREES
];

54 
	gcomp_œ°_öhîôed
;

55 
	gcuºít_åì
;

57 
fun˘i⁄_c⁄ãxt_t
 
	gfun˘i⁄_c⁄ãxt
;

59 
	gexa˘_ty≥s
, 
	gglobÆ_modifõrs
;

61 
	gcuºít_ty≥
;

62 
	gv¨_deföed
;

64 *
	gcomp_def_ödex_m≠
, *
	gfunc_ödex_m≠
;

65 *
	g¥og_Êags
, *
	gcomp_s‹ãd_funcs
;

67 *
	g¥og_code
;

68 *
	g¥og_code_max
;

70 
¥ogøm_t
 
	gNULL_¥ogøm
;

72 
¥ogøm_t
 *
	g¥og
;

74 
	g°rög_idx
[0x100];

75 
	g°rög_ègs
[0x20];

76 
	g‰ìd_°rög
;

79 *
	gty≥_of_loˇls
, *
	gty≥_of_loˇls_±r
;

80 
loˇl_öfo_t
 *
	gloˇls
, *
	gloˇls_±r
;

82 
	gloˇls_size
 = 0;

83 
	gty≥_of_loˇls_size
 = 0;

84 
	gcuºít_numbî_of_loˇls
 = 0;

85 
	gmax_num_loˇls
 = 0;

88 *
gë_two_ty≥s
 
	$P4
(*, 
whîe
, *, 
íd
, , 
ty≥1
, , 
ty≥2
)

90 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "( ");

91 
whîe
 = 
	`gë_ty≥_«me
(whîe, 
íd
, 
ty≥1
);

92 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "vs ");

93 
whîe
 = 
	`gë_ty≥_«me
(whîe, 
íd
, 
ty≥2
);

94 
whîe
 = 
	`°Ωut
(whîe, 
íd
, ")");

96  
whîe
;

97 
	}
}

99 
	$öô_loˇls
()

101 
ty≥_of_loˇls
 = 
	`CALLOCATE
(
CFG_MAX_LOCAL_VARIABLES
,,

102 
TAG_LOCALS
, "init_locals:1");

103 
loˇls
 = 
	`CALLOCATE
(
CFG_MAX_LOCAL_VARIABLES
, 
loˇl_öfo_t
,

104 
TAG_LOCALS
, "init_locals:2");

105 
ty≥_of_loˇls_±r
 = 
ty≥_of_loˇls
;

106 
loˇls_±r
 = 
loˇls
;

107 
loˇls_size
 = 
ty≥_of_loˇls_size
 = 
CFG_MAX_LOCAL_VARIABLES
;

108 
cuºít_numbî_of_loˇls
 = 
max_num_loˇls
 = 0;

109 
	}
}

111 
‰ì_Æl_loˇl_«mes
 
	$P1
(, 
Êag
)

113 
i
;

115 
i
=0; i < 
cuºít_numbî_of_loˇls
; i++) {

116 i‡(
Êag
 && (
ty≥_of_loˇls_±r
[
loˇls_±r
[
i
].
ru¡ime_ödex
] & 
LOCAL_MOD_UNUSED
)) {

117 
buf
[256];

118 *
íd
 = 
	`EndOf
(
buf
);

119 *
p
;

121 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnusedÜocal variable '");

122 
p
 = 
	`°Ωut
’, 
íd
, 
loˇls_±r
[
i
].
ihe
->
«me
);

123 
p
 = 
	`°Ωut
’, 
íd
, "'");

124 
	`yyw¨n
(
buf
);

126 
loˇls_±r
[
i
].
ihe
->
£m_vÆue
--;

127 
loˇls_±r
[
i
].
ihe
->
dn
.
loˇl_num
 = -1;

129 
cuºít_numbî_of_loˇls
 = 0;

130 
max_num_loˇls
 = 0;

131 
	}
}

133 
	$dó˘iv©e_cuºít_loˇls
() {

134 
i
;

136 
i
 = 0; i < 
cuºít_numbî_of_loˇls
; i++)

137 
loˇls_±r
[
i
].
ihe
->
dn
.
loˇl_num
 = -1;

138 
	}
}

140 
	$ªa˘iv©e_cuºít_loˇls
() {

141 
i
;

143 
i
 = 0; i < 
cuºít_numbî_of_loˇls
; i++) {

144 
loˇls_±r
[
i
].
ihe
->
dn
.
loˇl_num
 =Üoˇls_±r[i].
ru¡ime_ödex
;

145 
loˇls_±r
[
i
].
ihe
->
£m_vÆue
++;

147 
	}
}

149 
	$˛ón_up_loˇls
()

151 
off£t
;

153 
off£t
 = 
loˇls_±r
 + 
cuºít_numbî_of_loˇls
 - 
loˇls
;

154 
off£t
--) {

155 
loˇls
[
off£t
].
ihe
->
£m_vÆue
--;

156 
loˇls
[
off£t
].
ihe
->
dn
.
loˇl_num
 = -1;

158 
cuºít_numbî_of_loˇls
 = 0;

159 
max_num_loˇls
 = 0;

160 
loˇls_±r
 = 
loˇls
;

161 
ty≥_of_loˇls_±r
 = 
ty≥_of_loˇls
;

162 
	}
}

164 
p›_n_loˇls
 
	$P1
(, 
num
) {

165 
lcur_°¨t
;

166 
…y≥_°¨t
, 
i1
;

168 
	`DEBUG_CHECK
(
num
 < 0, "pop_n_locals called withÇum < 0");

169 i‡(
num
 == 0)

172 
lcur_°¨t
 = 
cuºít_numbî_of_loˇls
 -
num
;

173 
…y≥_°¨t
 = 
loˇls_±r
[
lcur_°¨t
].
ru¡ime_ödex
;

175 
i1
 = 
num
;

176 
i1
--) {

177 i‡(
ty≥_of_loˇls_±r
[
…y≥_°¨t
] & 
LOCAL_MOD_UNUSED
) {

178 
buf
[256];

179 *
íd
 = 
	`EndOf
(
buf
);

180 *
p
;

182 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnusedÜocal variable '");

183 
p
 = 
	`°Ωut
’, 
íd
, 
loˇls_±r
[
lcur_°¨t
].
ihe
->
«me
);

184 
p
 = 
	`°Ωut
’, 
íd
, "'");

185 
	`yyw¨n
(
buf
);

187 
loˇls_±r
[
lcur_°¨t
].
ihe
->
£m_vÆue
--;

188 
loˇls_±r
[
lcur_°¨t
].
ihe
->
dn
.
loˇl_num
 = -1;

189 ++
lcur_°¨t
;

190 ++
…y≥_°¨t
;

192 
	}
}

194 
add_loˇl_«me
 
	$P2
(*, 
°r
, , 
ty≥
)

196 i‡(
max_num_loˇls
 =
CFG_MAX_LOCAL_VARIABLES
) {

197 
	`yyîr‹
("Too manyÜocal variables");

200 
idít_hash_ñem_t
 *
ihe
;

202 
ihe
 = 
	`föd_‹_add_idít
(
°r
,
FOA_NEEDS_MALLOC
);

203 
ty≥_of_loˇls_±r
[
max_num_loˇls
] = 
ty≥
;

204 
loˇls_±r
[
cuºít_numbî_of_loˇls
].
ihe
 = ihe;

205 
loˇls_±r
[
cuºít_numbî_of_loˇls
++].
ru¡ime_ödex
 = 
max_num_loˇls
;

206 i‡(
ihe
->
dn
.
loˇl_num
 == -1)

207 
ihe
->
£m_vÆue
++;

208  
ihe
->
dn
.
loˇl_num
 = 
max_num_loˇls
++;

210 
	}
}

212 
	$ªÆloˇã_loˇls
() {

213 
off£t
;

214 
off£t
 = 
ty≥_of_loˇls_±r
 - 
ty≥_of_loˇls
;

215 
ty≥_of_loˇls
 = 
	`RESIZE
—y≥_of_loˇls, 
ty≥_of_loˇls_size
 +
CFG_MAX_LOCAL_VARIABLES
,

216 , 
TAG_LOCALS
, "reallocate_locals:1");

217 
ty≥_of_loˇls_±r
 = 
ty≥_of_loˇls
 + 
off£t
;

218 
off£t
 = 
loˇls_±r
 - 
loˇls
;

219 
loˇls
 = 
	`RESIZE
÷oˇls, 
loˇls_size
,

220 
loˇl_öfo_t
, 
TAG_LOCALS
, "reallocate_locals:2");

221 
loˇls_±r
 = 
loˇls
 + 
off£t
;

222 
	}
}

225 
fix_˛ass_ty≥
 
	$P2
(*, 
t
, 
¥ogøm_t
 *, 
‰om
) {

226 
idít_hash_ñem_t
 *
ihe
;

227 
num
;

229 i‡((*
t
Ë& 
TYPE_MOD_CLASS
) {

230 
ihe
 = 
	`lookup_idít
(
‰om
->
°rögs
[‰om->
˛as£s
[(*
t
Ë& 
CLASS_NUM_MASK
].
«me
]);

231 i‡(
ihe
 && ((
num
 = ihe->
dn
.
˛ass_num
) != -1)) {

232 (*
t
Ë(*à& ~
CLASS_NUM_MASK
Ë| 
num
;

234 
	`Áèl
("C™nŸ föd cœs†%†(%s,%d).\n",
‰om
->
°rögs
[‰om->
˛as£s
[(*
t
Ë& 
CLASS_NUM_MASK
].
«me
], 
cuºít_fûe
, 
cuºít_löe
);

237 
	}
}

245 
c›y_v¨übÀs
 
	$P2
(
¥ogøm_t
 *, 
‰om
, , 
ty≥
) {

246 
i
;

248 
i
 = 0; i < 
‰om
->
num_öhîôed
; i++) {

249 
t
 = 
	`DECL_MODIFY
(
ty≥
, 
‰om
->
öhîô
[
i
].
ty≥_mod
);

252 i‡(
‰om
->
öhîô
[
i
].
ty≥_mod
 & 
DECL_PRIVATE
)

253 
t
 = (à& ~
DECL_PRIVATE
Ë| 
DECL_HIDDEN
;

255 
t
 &~
FUNC_VARARGS
;

257 
	`c›y_v¨übÀs
(
‰om
->
öhîô
[
i
].
¥og
, 
t
);

259 
i
 = 0; i < 
‰om
->
num_v¨übÀs_deföed
; i++) {

260 
t
 = 
	`DECL_MODIFY
(
‰om
->
v¨übÀ_ty≥s
[
i
], 
ty≥
);

263 i‡(
‰om
->
v¨übÀ_ty≥s
[
i
] & 
DECL_PRIVATE
)

264 
t
 = (à& ~
DECL_PRIVATE
Ë| 
DECL_HIDDEN
;

266 
t
 &~
FUNC_VARARGS
;

269 
	`fix_˛ass_ty≥
(&
t
, 
‰om
);

271 
	`deföe_v¨übÀ
(
‰om
->
v¨übÀ_èbÀ
[
i
], 
t
);

273 
	}
}

275 
	$add_√w_fun˘i⁄_íåy
() {

276 
ödex
 = 
mem_block
[
A_FUNCTION_DEFS
].
cuºít_size
 / (
compûî_ãmp_t
);

277 
	`Æloˇã_ö_mem_block
(
A_FUNCTION_DEFS
, (
compûî_ãmp_t
));

279  
ödex
;

280 
	}
}

298 
c›y_√w_fun˘i⁄
 
	$P5
(
¥ogøm_t
 *, 
¥og
, , 
ödex
,

299 
¥ogøm_t
 *, 
deÂrog
, , 
defödex
,

300 , 
ty≥mod
) {

301 
idít_hash_ñem_t
 *
ihe
;

303 
whîe
 = 
	`add_√w_fun˘i⁄_íåy
();

304 
f
 = 
¥og
->
fun˘i⁄_Êags
[
ödex
];

306 i‡(
f
 & 
FUNC_ALIAS
) {

307 
f
 = 
FUNC_ALIAS
 | 
¥og
->
fun˘i⁄_Êags
[f & ~FUNC_ALIAS];

311 i‡(
f
 & 
DECL_PRIVATE
)

312 
f
 = (‡& ~
DECL_PRIVATE
Ë| 
DECL_HIDDEN
;

314 
f
 = 
	`DECL_MODIFY
(
ty≥mod
, fË| 
FUNC_INHERITED
;

315 
f
 &~
DECL_NOSAVE
;

317 
	`FUNCTION_FLAGS
(
whîe
Ë
f
;

319 
	`FUNCTION_TEMP
(
whîe
)->
¥og
 = 
deÂrog
;

320 
	`FUNCTION_TEMP
(
whîe
)->
u
.
func
 = 
deÂrog
->
fun˘i⁄_èbÀ
 + 
defödex
;

321 
	`FUNCTION_TEMP
(
whîe
)->
off£t
 = 
NUM_INHERITS
 - 1;

322 
	`FUNCTION_TEMP
(
whîe
)->
fun˘i⁄_ödex_off£t
 = 
ödex
;

323 
	`FUNCTION_NEXT
(
whîe
) = 0;

326 
ihe
 = 
	`föd_‹_add_idít
(
deÂrog
->
fun˘i⁄_èbÀ
[
defödex
].
«me
,

327 
FOA_GLOBAL_SCOPE
);

328 
ihe
->
£m_vÆue
++;

329 
ihe
->
dn
.
fun˘i⁄_num
 = 
whîe
;

330 
	}
}

332 
föd_˛ass_membî
 
	$P3
(, 
which
, *, 
«me
, *, 
ty≥
) {

333 
i
;

334 
˛ass_def_t
 *
cd
;

335 
˛ass_membî_íåy_t
 *
cme
;

337 
	`DEBUG_CHECK
(!
	`föd°rög
(
«me
), "name in find_class_member must beá shared string.\n");

339 
cd
 = ((
˛ass_def_t
 *)
mem_block
[
A_CLASS_DEF
].
block
Ë+ 
which
;

340 
cme
 = ((
˛ass_membî_íåy_t
 *)
mem_block
[
A_CLASS_MEMBER
].
block
Ë+ 
cd
->
ödex
;

341 
i
 = 0; i < 
cd
->
size
; i++) {

342 i‡(
	`PROG_STRING
(
cme
[
i
].
«me
) ==Çame)

345 i‡(
i
 =
cd
->
size
) {

346 i‡(
ty≥
Ë*ty≥ = 
TYPE_ANY
;

349 i‡(
ty≥
Ë*ty≥ = 
cme
[
i
].type;

350  
i
;

352 
	}
}

354 
lookup_™y_˛ass_membî
 
	$P2
(*, 
«me
, *, 
ty≥
) {

355 
nc
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

356 
i
, 
ªt
 = -1, 
ƒë
;

357 *
s
 = 
	`föd°rög
(
«me
);

359 i‡(
s
) {

360 
i
 = 0; i < 
nc
; i++) {

361 
ƒë
 = 
	`föd_˛ass_membî
(
i
, 
s
, 
ty≥
);

362 i‡(
ƒë
 == -1) ;

363 i‡(
ªt
 !-1 && 
ƒë
 !=Ñet) {

364 
buf
[256];

365 *
íd
 = 
	`EndOf
(
buf
);

366 *
p
;

368 
p
 = 
	`°Ωut
(
buf
, 
íd
, "MoreÅhan one class in scope has member '");

369 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

370 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'; useá castÅo disambiguate");

371 
	`yyîr‹
(
buf
);

373 
ªt
 = 
ƒë
;

377 i‡(
ªt
 == -1) {

378 
buf
[256];

379 *
íd
 = 
	`EndOf
(
buf
);

380 *
p
;

382 
p
 = 
	`°Ωut
(
buf
, 
íd
, "No class in scope hasÇo member '");

383 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

384 
p
 = 
	`°Ωut
’, 
íd
, "'");

385 
	`yyîr‹
(
buf
);

388  
ªt
;

389 
	}
}

391 
lookup_˛ass_membî
 
	$P3
(, 
which
, *, 
«me
, *, 
ty≥
) {

392 *
s
 = 
	`föd°rög
(
«me
);

393 
ªt
;

395 i‡(
s
)

396 
ªt
 = 
	`föd_˛ass_membî
(
which
, 
s
, 
ty≥
);

398 
ªt
 = -1;

400 i‡(
ªt
 == -1) {

401 
˛ass_def_t
 *
cd
 = ((˛ass_def_à*)
mem_block
[
A_CLASS_DEF
].
block
Ë+ 
which
;

402 
buf
[256];

403 *
íd
 = 
	`EndOf
(
buf
);

404 *
p
;

406 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Class '");

407 
p
 = 
	`°Ωut
’, 
íd
, 
	`PROG_STRING
(
cd
->
«me
));

408 
p
 = 
	`°Ωut
’, 
íd
, "' hasÇo member '");

409 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

410 
p
 = 
	`°Ωut
’, 
íd
, "'");

412 
	`yyîr‹
(
buf
);

414  
ªt
;

415 
	}
}

417 
∑r£_node_t
 *
ª‹dî_˛ass_vÆues
 
	$P2
(, 
which
, 
∑r£_node_t
 *, 
node
) {

418 
˛ass_def_t
 *
cd
;

419 
∑r£_node_t
 **
tmp
;

420 
i
;

422 
cd
 = ((
˛ass_def_t
 *)
mem_block
[
A_CLASS_DEF
].
block
Ë+ 
which
;

423 
tmp
 = 
	`CALLOCATE
(
cd
->
size
, 
∑r£_node_t
 *, 
TAG_COMPILER
,

426 
i
 = 0; i < 
cd
->
size
; i++)

427 
tmp
[
i
] = 0;

429 
node
) {

430 
i
 = 
	`lookup_˛ass_membî
(
which
, (*)
node
->
l
.
ex¥
, 0);

431 i‡(
i
 != -1) {

432 i‡(
tmp
[
i
]) {

433 
buf
[256];

434 *
íd
 = 
	`EndOf
(
buf
);

435 *
p
;

437 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Redefinition of member '");

438 
p
 = 
	`°Ωut
’, 
íd
, (*Ë
node
->
l
.
ex¥
);

439 
p
 = 
	`°Ωut
’, 
íd
, "' in instantiation of class '");

440 
p
 = 
	`°Ωut
’, 
íd
, 
	`PROG_STRING
(
cd
->
«me
));

441 
p
 = 
	`°Ωut
’, 
íd
, "'");

442 
	`yyîr‹
(
buf
);

444 
tmp
[
i
] = 
node
->
v
.
ex¥
;

447 
	`s¸©ch_‰ì
((*Ë
node
->
l
.
ex¥
);

449 
node
 =Çode->
r
.
ex¥
;

451 
i
 = 
cd
->
size
;

452 
node
 = 0;

453 
i
--) {

454 
∑r£_node_t
 *
√wnode
;

455 i‡(
tmp
[
i
]) {

456 
	`CREATE_STATEMENTS
(
√wnode
, 
tmp
[
i
], 
node
);

458 
	`CREATE_STATEMENTS
(
√wnode
, 0, 
node
);

459 
	`CREATE_NUMBER
(
√wnode
->
l
.
ex¥
, 0);

461 
node
 = 
√wnode
;

464 
	`FREE
(
tmp
);

465  
node
;

466 
	}
}

468 
check_˛ass
 
	$P4
(*, 
«me
, 
¥ogøm_t
 *, 
¥og
, , 
idx
, , 
nidx
) {

469 
˛ass_def_t
 *
sd1
, *
sd2
;

470 
˛ass_membî_íåy_t
 *
sme1
, *
sme2
;

471 
i
, 
n
;

473 
sd1
 = &
¥og
->
˛as£s
[
idx
];

474 
sd2
 = 
	`CLASS
(
nidx
);

476 
n
 = 
sd1
->
size
;

477 i‡(
sd1
->
size
 !
sd2
->size) {

478 
buf
[256];

479 *
íd
 = 
	`EndOf
(
buf
);

480 *
p
;

482 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Definitions of class '");

483 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

484 
p
 = 
	`°Ωut
’, 
íd
, "' differ in size.");

485 
	`yyîr‹
(
buf
);

489 
sme1
 = &
¥og
->
˛ass_membîs
[
sd1
->
ödex
];

490 
sme2
 = (
˛ass_membî_íåy_t
 *)
mem_block
[
A_CLASS_MEMBER
].
block
 + 
sd2
->
ödex
;

492 
i
 = 0; i < 
n
; i++) {

493 
√wty≥
;

495 
√wty≥
 = 
sme2
[
i
].
ty≥
;

498 
	`fix_˛ass_ty≥
(&
√wty≥
, 
¥og
);

500 i‡(
sme1
[
i
].
ty≥
 !
√wty≥
 ||

501 
¥og
->
°rögs
[
sme1
[
i
].
«me
] !
	`PROG_STRING
(
sme2
[i].name)) {

502 
buf
[512];

503 *
íd
 = 
	`EndOf
(
buf
);

504 *
p
;

506 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Definitions of class '");

507 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

508 
p
 = 
	`°Ωut
’, 
íd
, "' disagree.");

509 
	`yyîr‹
(
buf
);

513 
	}
}

515 
c›y_°ru˘uªs
 
	$P1
(
¥ogøm_t
 *, 
¥og
) {

516 
˛ass_def_t
 *
sd
;

517 
˛ass_membî_íåy_t
 *
sme
;

518 
idít_hash_ñem_t
 *
ihe
;

519 *
°r
;

520 
sm_off
 = 
mem_block
[
A_CLASS_MEMBER
].
cuºít_size
 / (
˛ass_membî_íåy_t
);

521 
sd_off
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

522 
i
, 
j
, 
off£t
;

524 i‡(
¥og
->
num_˛as£s
 + 
sd_off
 > 
CLASS_NUM_MASK
) {

525 
buf
[512];

526 *
íd
 = 
	`EndOf
(
buf
);

527 *
p
;

529 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Too many classes, max is ");

530 
p
 = 
	`°Ωut_öt
’, 
íd
, 
CLASS_NUM_MASK
 - 1);

531 
p
 = 
	`°Ωut
’, 
íd
, ".\n");

532 
	`yyîr‹
(
buf
);

536 
i
 = 0; i < 
¥og
->
num_˛as£s
; i++) {

537 
°r
 = 
¥og
->
°rögs
[¥og->
˛as£s
[
i
].
«me
];

538 
ihe
 = 
	`föd_‹_add_idít
(
°r
, 
FOA_GLOBAL_SCOPE
);

539 i‡(
ihe
->
dn
.
˛ass_num
 == -1) {

540 
ihe
->
dn
.
˛ass_num
 = 
sd_off
++;

541 
ihe
->
£m_vÆue
++;

543 
	`check_˛ass
(
°r
, 
¥og
, 
i
, 
ihe
->
dn
.
˛ass_num
);

546 
sd
 = (
˛ass_def_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_DEF
, (class_def_t));

547 
sd
->
«me
 = 
	`°‹e_¥og_°rög
(
°r
);

548 
sd
->
size
 = 
¥og
->
˛as£s
[
i
].size;

549 
sd
->
ödex
 = 
sm_off
;

550 
sm_off
 +
sd
->
size
;

551 
sme
 = (
˛ass_membî_íåy_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_MEMBER
, (˛ass_membî_íåy_tË* 
sd
->
size
);

552 
off£t
 = 
¥og
->
˛as£s
[
i
].
ödex
;

553 
j
 = 0; j < 
sd
->
size
; j++) {

554 
ﬁdty≥
 = 
¥og
->
˛ass_membîs
[
off£t
 + 
j
].
ty≥
;

556 
	`fix_˛ass_ty≥
(&
ﬁdty≥
, 
¥og
);

557 
sme
[
j
].
ty≥
 = 
ﬁdty≥
;

558 
sme
[
j
].
«me
 = 
	`°‹e_¥og_°rög
(
¥og
->
°rögs
[¥og->
˛ass_membîs
[
off£t
 + j].name]);

561 
	}
}

563 
	sovlw¨n_s
 {

564 
ovlw¨n_s
 *
	m√xt
;

565 *
	mfunc
;

566 *
	mw¨n
;

567 } 
	tovlw¨n_t
;

569 
ovlw¨n_t
 *
	govîlﬂd_w¨nögs
 = 0;

571 
ªmove_ovîlﬂd_w¨nögs
 
	$P1
(*, 
func
) {

572 
ovlw¨n_t
 **
p
;

573 
ovlw¨n_t
 *
tmp
;

575 
p
 = &
ovîlﬂd_w¨nögs
;

576 *
p
) {

577 i‡(!
func
 || (*
p
)->func == func) {

578 
	`FREE
((*
p
)->
w¨n
);

579 
tmp
 = *
p
;

580 *
p
 = (*p)->
√xt
;

581 
	`FREE
(
tmp
);

583 
p
 = &(*p)->
√xt
;

585 
	}
}

587 
	$show_ovîlﬂd_w¨nögs
() {

588 
ovlw¨n_t
 *
p
, *
√xt
;

589 
p
 = 
ovîlﬂd_w¨nögs
;

590 
p
) {

591 
	`yyw¨n
(
p
->
w¨n
);

592 
	`FREE
(
p
->
w¨n
);

593 
√xt
 = 
p
->next;

594 
	`FREE
(
p
);

595 
p
 = 
√xt
;

597 
ovîlﬂd_w¨nögs
 = 0;

598 
	}
}

616 
ovîlﬂd_fun˘i⁄
 
	$P6
(
¥ogøm_t
 *, 
¥og
, , 
ödex
,

617 
¥ogøm_t
 *, 
deÂrog
, , 
defödex
,

618 , 
ﬁdödex
, , 
ty≥mod
) {

619 
f
;

620 
ﬁdÊags
 = 
	`FUNCTION_FLAGS
(
ﬁdödex
);

621 
fun˘i⁄_t
 *
deföôi⁄
 = &
deÂrog
->
fun˘i⁄_èbÀ
[
defödex
];

622 
√wÊags
 = 
¥og
->
fun˘i⁄_Êags
[
ödex
];

623 
ª∂a˚
;

624 
compûî_ãmp_t
 *
√wdef
;

626 i‡(
√wÊags
 & 
FUNC_ALIAS
)

627 
√wÊags
 = 
FUNC_ALIAS
 | 
¥og
->
fun˘i⁄_Êags
[newflags & ~FUNC_ALIAS];

630 i‡((
ﬁdÊags
 & 
DECL_NOMASK
) &&

631 !((
ﬁdÊags
|
√wÊags
Ë& (
FUNC_NO_CODE
))) {

632 
buf
[256];

633 *
íd
 = 
	`EndOf
(
buf
);

634 *
p
;

636 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine 'nomask' function \"");

637 
p
 = 
	`°Ωut
’, 
íd
, 
deföôi⁄
->
«me
);

638 
p
 = 
	`°Ωut
’, 
íd
, "\"");

639 
	`yyîr‹
(
buf
);

652 i‡((
¥agmas
 & 
PRAGMA_WARNINGS
) &&

653 !((
ﬁdÊags
|
√wÊags
Ë& (
FUNC_NO_CODE
|
DECL_PRIVATE
|
DECL_HIDDEN
))

654 && (
ﬁdÊags
 & 
FUNC_INHERITED
)

662 i‡(!(
ﬁdÊags
 & (
DECL_PRIVATE
|
DECL_HIDDEN
)Ë&& !(
√wÊags
 & (DECL_PRIVATE|DECL_HIDDEN))) {

663 
buf
[1024];

664 *
íd
 = 
	`EndOf
(
buf
);

665 *
p
;

666 
ovlw¨n_t
 *
ow
;

667 
compûî_ãmp_t
 *
func_íåy
 = 
	`FUNCTION_TEMP
(
ﬁdödex
);

668 
¥ogøm_t
 *
¥og2
 = 
	`INHERIT
(
func_íåy
->
off£t
)->
¥og
;

669 
¥ogøm_t
 *
deÂrog2
;

671 
deÂrog2
 = 
func_íåy
->
¥og
;

672 
p
 = 
	`°Ωut
(
buf
, 
íd
, 
deföôi⁄
->
«me
);

673 
p
 = 
	`°Ωut
’, 
íd
, "() inherited from both /");

674 
p
 = 
	`°Ωut
’, 
íd
, 
deÂrog
->
«me
);

675 i‡(
¥og
 !
deÂrog
) {

676 
p
 = 
	`°Ωut
’, 
íd
, " (via /");

677 
p
 = 
	`°Ωut
’, 
íd
, 
¥og
->
«me
);

678 
p
 = 
	`°Ωut
’, 
íd
, ")");

680 
p
 = 
	`°Ωut
’, 
íd
, "ánd /");

681 
p
 = 
	`°Ωut
’, 
íd
, 
deÂrog2
->
«me
);

682 i‡(
¥og2
 !
deÂrog2
) {

683 
p
 = 
	`°Ωut
’, 
íd
, " (via /");

684 
p
 = 
	`°Ωut
’, 
íd
, 
¥og2
->
«me
);

685 
p
 = 
	`°Ωut
’, 
íd
, ")");

687 
p
 = 
	`°Ωut
’, 
íd
, "; usingÅhe definition in /");

688 
p
 = 
	`°Ωut
’, 
íd
, 
¥og
->
«me
);

689 
p
 = 
	`°Ωut
’, 
íd
, ".");

691 
ow
 = 
	`ALLOCATE
(
ovlw¨n_t
, 
TAG_COMPILER
, "overload warning");

692 
ow
->
√xt
 = 
ovîlﬂd_w¨nögs
;

693 
ow
->
func
 = 
deföôi⁄
->
«me
;

694 
ow
->
w¨n
 = 
	`Æloc_c°rög
(
buf
, "overload warning");

695 
ovîlﬂd_w¨nögs
 = 
ow
;

706 
√wdef
 = 
	`ALLOCATE
(
compûî_ãmp_t
, 
TAG_COMPILER
, "overload_function");

709 i‡(
ﬁdÊags
 & 
FUNC_ALIAS
Ë
ª∂a˚
 = 1;

710 i‡(
√wÊags
 & 
FUNC_ALIAS
Ë
ª∂a˚
 = 0;

711 i‡(!(
√wÊags
 & (
FUNC_PROTOTYPE
|
FUNC_UNDEFINED
))) {

712 i‡(
ﬁdÊags
 & (
FUNC_PROTOTYPE
|
FUNC_INHERITED
|
FUNC_UNDEFINED
))

713 
ª∂a˚
 = 1;

714 
ª∂a˚
 = 0;

716 i‡((
ﬁdÊags
 & (
FUNC_PROTOTYPE
|
FUNC_UNDEFINED
)) &&

717 (
ﬁdÊags
 & 
FUNC_INHERITED
))

718 
ª∂a˚
 = 1;

719 
ª∂a˚
 = 0;

722 i‡(
ª∂a˚
) {

724 i‡(!(
ﬁdÊags
 & 
FUNC_INHERITED
)) {

726 
	`FUNC
(
	`FUNCTION_TEMP
(
ﬁdödex
)->
u
.
ödex
)->
addªss
 = 
ADDRESS_MAX
;

728 *
√wdef
 = *
	`FUNCTION_TEMP
(
ﬁdödex
);

729 
	`FUNCTION_TEMP
(
ﬁdödex
)->
√xt
 = 
√wdef
;

730 
√wdef
 = 
	`FUNCTION_TEMP
(
ﬁdödex
);

732 
compûî_ãmp_t
 *
ﬁd√xt
 = 
	`FUNCTION_TEMP
(
ﬁdödex
)->
√xt
;

733 
√wdef
->
√xt
 = 
ﬁd√xt
;

734 
	`FUNCTION_TEMP
(
ﬁdödex
)->
√xt
 = 
√wdef
;

737 
√wdef
->
off£t
 = 
NUM_INHERITS
 - 1;

738 
√wdef
->
fun˘i⁄_ödex_off£t
 = 
ödex
;

739 
√wdef
->
¥og
 = 
deÂrog
;

740 
√wdef
->
u
.
func
 = 
deÂrog
->
fun˘i⁄_èbÀ
 + 
defödex
;

742 
f
 = (
√wÊags
 & 
FUNC_MASK
Ë| 
FUNC_INHERITED
;

745 i‡(
f
 & 
DECL_PRIVATE
Ë‡(‡& ~DECL_PRIVATEË| 
DECL_HIDDEN
;

747 
f
 = 
	`DECL_MODIFY
(
ty≥mod
, f);

748 
f
 &~
DECL_NOSAVE
;

750 
√wdef
->
Êags
 = 
f
;

751 
	}
}

765 
c›y_fun˘i⁄s
 
	$P2
(
¥ogøm_t
 *, 
‰om
, , 
ty≥mod
)

767 
i
, 
öôülizî
 = -1, 
num_fun˘i⁄s
;

768 
idít_hash_ñem_t
 *
ihe
;

769 
num
;

771 
num_fun˘i⁄s
 = 
‰om
->
num_fun˘i⁄s_deföed
 + from->
œ°_öhîôed
;

773 i‡(
‰om
->
num_fun˘i⁄s_deföed
 &&

774 (
‰om
->
fun˘i⁄_èbÀ
[‰om->
num_fun˘i⁄s_deföed
 - 1].
«me
[0] =
APPLY___INIT_SPECIAL_CHAR
))

775 
öôülizî
 = --
num_fun˘i⁄s
;

777 
i
 = 0; i < 
num_fun˘i⁄s
; i++) {

778 
¥ogøm_t
 *
¥og
 = 
‰om
;

779 
ödex
 = 
i
;

780 
fun˘i⁄_t
 *
fu≈
;

781 
low
, 
mid
, 
high
;

784 i‡(
¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_ALIAS
) {

785 
ödex
 = 
¥og
->
fun˘i⁄_Êags
[ödex] & ~
FUNC_ALIAS
;

788 
¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_INHERITED
) {

789 
low
 = 0;

790 
high
 = 
¥og
->
num_öhîôed
 -1;

792 
high
 > 
low
) {

793 
mid
 = (
low
 + 
high
 + 1) >> 1;

794 i‡(
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ödex
)

795 
high
 = 
mid
 -1;

796 
low
 = 
mid
;

798 
ödex
 -
¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
;

799 
¥og
 =Örog->
öhîô
[
low
].prog;

802 
ödex
 -
¥og
->
œ°_öhîôed
;

804 
fu≈
 = 
¥og
->
fun˘i⁄_èbÀ
 + 
ödex
;

807 
ihe
 = 
	`lookup_idít
(
fu≈
->
«me
);

808 i‡(
ihe
 && ((
num
 = ihe->
dn
.
fun˘i⁄_num
)!=-1)) {

810 
	`ovîlﬂd_fun˘i⁄
(
‰om
, 
i
, 
¥og
,
ödex
, 
num
, 
ty≥mod
);

812 
	`c›y_√w_fun˘i⁄
(
‰om
, 
i
, 
¥og
, 
ödex
, 
ty≥mod
);

815  
öôülizî
;

816 
	}
}

818 
ty≥_îr‹
 
	$P2
(*, 
°r
, , 
ty≥
)

820 
buff
[256];

821 *
íd
 = 
	`EndOf
(
buff
);

822 *
p
;

824 
p
 = 
	`°Ωut
(
buff
, 
íd
, 
°r
);

825 
p
 = 
	`°Ωut
’, 
íd
, ": \"");

826 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
ty≥
);

827 
p
 = 
	`°Ωut
’, 
íd
, "\"");

828 
	`yyîr‹
(
buff
);

829 
	}
}

836 
com∑tibÀ_ty≥s
 
	$P2
(, 
t1
, , 
t2
)

838 #ifde‡
OLD_TYPE_BEHAVIOR


842 
t1
 &~
DECL_MODS
;

843 
t2
 &~
DECL_MODS
;

844 i‡(
t1
 =
TYPE_ANY
 || 
t2
 == TYPE_ANY)  1;

845 i‡((
t1
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t2
 & TYPE_MOD_ARRAY)))

847 i‡((
t2
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t1
 & TYPE_MOD_ARRAY)))

849 i‡(
t1
 & 
TYPE_MOD_CLASS
)

850  
t1
 =
t2
;

851 i‡(
t1
 & 
TYPE_MOD_ARRAY
) {

852 i‡(!(
t2
 & 
TYPE_MOD_ARRAY
))  0;

853  
t1
 =(
TYPE_MOD_ARRAY
 | 
TYPE_ANY
) ||

854 
t2
 =(
TYPE_MOD_ARRAY
 | 
TYPE_ANY
Ë|| (
t1
 ==Å2);

855 } i‡(
t2
 & 
TYPE_MOD_ARRAY
)

857  
com∑tibÀ
[
t1
] & (1 << 
t2
);

859 
	}
}

862 
com∑tibÀ_ty≥s2
 
	$P2
(, 
t1
, , 
t2
)

864 #ifde‡
OLD_TYPE_BEHAVIOR


868 
t1
 &~
DECL_MODS
;

869 
t2
 &~
DECL_MODS
;

870 i‡(
t1
 =
TYPE_ANY
 || 
t2
 == TYPE_ANY)  1;

871 i‡((
t1
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t2
 & TYPE_MOD_ARRAY)))

873 i‡((
t2
 =(
TYPE_ANY
 | 
TYPE_MOD_ARRAY
Ë&& (
t1
 & TYPE_MOD_ARRAY)))

875 i‡(
t1
 & 
TYPE_MOD_CLASS
)

876  
t1
 =
t2
;

877 i‡(
t1
 & 
TYPE_MOD_ARRAY
) {

878 i‡(!(
t2
 & 
TYPE_MOD_ARRAY
))  0;

879  
t1
 =(
TYPE_MOD_ARRAY
 | 
TYPE_ANY
) ||

880 
t2
 =(
TYPE_MOD_ARRAY
 | 
TYPE_ANY
Ë|| (
t1
 ==Å2);

881 } i‡(
t2
 & 
TYPE_MOD_ARRAY
)

883 i‡(
com∑tibÀ
[
t1
] & (1 << 
t2
))

885  
com∑tibÀ
[
t2
] & (1 << 
t1
);

887 
	}
}

899 
föd_m©chög_fun˘i⁄
 
	$P3
(
¥ogøm_t
 *, 
¥og
, *, 
«me
,

900 
∑r£_node_t
 *, 
node
) {

901 
high
 = 
¥og
->
num_fun˘i⁄s_deföed
 - 1;

902 
low
 = 0;

903 
i
, 
ªs
;

906 
high
 >
low
) {

907 
mid
 = (
high
 + 
low
)/2;

908 *
p
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
«me
;

910 i‡(
«me
 < 
p
)

911 
high
 = 
mid
-1;

912 i‡(
«me
 > 
p
)

913 
low
 = 
mid
+1;

915 
ri
;

916 
Êags
;

917 
ty≥
;

922 
ri
 = 
¥og
->
œ°_öhîôed
 + 
mid
;

924 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
ri
];

926 i‡(
Êags
 & (
FUNC_UNDEFINED
 | 
FUNC_PROTOTYPE
))  0;

927 i‡(
Êags
 & 
DECL_PRIVATE
)  -1;

929 
node
->
köd
 = 
NODE_CALL_2
;

930 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

931 
node
->
l
.
numbî
 = 
ri
;

932 
ty≥
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].type;

933 
	`fix_˛ass_ty≥
(&
ty≥
, 
¥og
);

934 
node
->
ty≥
 =Åype;

940 
i
 = 
¥og
->
num_öhîôed
;

941 
i
--) {

942 i‡((
ªs
 = 
	`föd_m©chög_fun˘i⁄
(
¥og
->
öhîô
[
i
].¥og, 
«me
, 
node
))) {

943 i‡((
ªs
 =-1Ë|| (
¥og
->
öhîô
[
i
].
ty≥_mod
 & 
DECL_PRIVATE
))

946 
node
->
l
.
numbî
 +
¥og
->
öhîô
[
i
].
fun˘i⁄_ödex_off£t
;

951 
	}
}

953 
¨ønge_ˇŒ_öhîôed
 
	$P2
(*, 
«me
, 
∑r£_node_t
 *, 
node
)

955 
öhîô_t
 *
ù
;

956 
num_öhîôs
, 
su≥r_Àngth
;

957 *
su≥r_«me
, *
p
, *
ªÆ_«me
 = 
«me
;

958 *
sh¨ed_°rög
;

959 
ªt
;

961 i‡(
ªÆ_«me
[0] == ':') {

962 
su≥r_«me
 = 0;

963 
ªÆ_«me
 += 2;

964 
su≥r_Àngth
 = 0;

965 } i‡((
p
 = 
	`°rchr
(
ªÆ_«me
, ':'))) {

966 
su≥r_«me
 = 
«me
;

967 
ªÆ_«me
 = 
p
+2;

968 
su≥r_Àngth
 = 
ªÆ_«me
 - 
su≥r_«me
 - 2;

971 
num_öhîôs
 = 
NUM_INHERITS
;

973 i‡((
sh¨ed_°rög
 = 
	`föd°rög
(
ªÆ_«me
))) {

974 
ù
 = (
öhîô_t
 *Ë
mem_block
[
A_INHERITS
].
block
;

975 ; 
num_öhîôs
 > 0; 
ù
++,Çum_inherits--) {

976 
tmp
;

978 i‡(
su≥r_«me
) {

979 
l
 = 
	`SHARED_STRLEN
(
ù
->
¥og
->
«me
);

981 i‡(
l
 - 2 < 
su≥r_Àngth
)

983 i‡(
	`°∫cmp
(
su≥r_«me
, 
ù
->
¥og
->
«me
 + 
l
 - 2 -
su≥r_Àngth
,

984 
su≥r_Àngth
) != 0 ||

985 !((
l
 - 2 =
su≥r_Àngth
) ||

986 ((
ù
->
¥og
->
«me
 + 
l
 - 3 - 
su≥r_Àngth
)[0] == '/')))

990 i‡((
tmp
 = 
	`föd_m©chög_fun˘i⁄
(
ù
->
¥og
, 
sh¨ed_°rög
, 
node
))) {

991 i‡(
tmp
 =-1 || (
ù
->
ty≥_mod
 & 
DECL_PRIVATE
)) {

992 
	`yyîr‹
("Called function isÖrivate.");

994 
övÆid
;

997 
ªt
 = 
node
->
l
.
numbî
 + 
ù
->
fun˘i⁄_ödex_off£t
;

998 
node
->
l
.
numbî
 |((
ù
 - (
öhîô_t
 *Ë
mem_block
[
A_INHERITS
].
block
) << 16);

999  
ªt
;

1004 
buff
[256];

1005 *
íd
 = 
	`EndOf
(
buff
);

1006 *
p
;

1008 
p
 = 
	`°Ωut
(
buff
, 
íd
, "No such inherited function ");

1009 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1010 
	`yyîr‹
(
buff
);

1013 
övÆid
:

1014 
node
->
köd
 = 
NODE_CALL_2
;

1015 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

1016 
node
->
l
.
numbî
 = 0;

1017 
node
->
ty≥
 = 
TYPE_ANY
;

1020 
	}
}

1031 
deföe_√w_fun˘i⁄
 
	$P5
(*, 
«me
, , 
num_¨g
, , 
num_loˇl
,

1032 , 
Êags
, , 
ty≥
)

1034 
ﬁdödex
, 
num
, 
√wödex
;

1035 
¨gumít_°¨t_ödex
;

1036 
idít_hash_ñem_t
 *
ihe
;

1037 
fun˘i⁄_t
 *
fu≈
 = 0;

1038 
compûî_ãmp_t
 *
√wfunc
;

1040 
ﬁdödex
 = (
ihe
 = 
	`lookup_idít
(
«me
)Ë? ihe->
dn
.
fun˘i⁄_num
 : -1;

1041 i‡(
ﬁdödex
 >= 0) {

1042 
funÊags
 = 
	`FUNCTION_FLAGS
(
ﬁdödex
);

1044 
fu≈
 = 
	`FUNCTION_DEF
(
ﬁdödex
);

1056 i‡(
funÊags
 & 
FUNC_ALIAS
) {

1057 
	`Áèl
("Inconsistentáliasing of functions!\n");

1060 i‡(!(
funÊags
 & (
FUNC_INHERITED
|
FUNC_PROTOTYPE
|
FUNC_UNDEFINED
))

1061 && !(
Êags
 & 
FUNC_PROTOTYPE
)) {

1062 
buff
[256];

1063 *
íd
 = 
	`EndOf
(
buff
);

1064 *
p
;

1066 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Redeclaration of function ");

1067 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1068 
p
 = 
	`°Ωut
’, 
íd
, ".");

1069 
	`yyîr‹
(
buff
);

1083 i‡((
funÊags
 & 
DECL_NOMASK
) &&

1084 !((
Êags
|
funÊags
Ë& (
FUNC_UNDEFINED
|
FUNC_PROTOTYPE
))) {

1085 
buf
[256];

1086 *
íd
 = 
	`EndOf
(
buf
);

1087 *
p
;

1089 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine 'nomask' function \"");

1090 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1091 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1092 
	`yyîr‹
(
buf
);

1097 i‡(
exa˘_ty≥s
 && ((
Êags
|
funÊags
Ë& 
FUNC_PROTOTYPE
)) {

1098 
fu¡y≥
, 
i
;

1100 
fu¡y≥
 = 
fu≈
->
ty≥
;

1101 i‡(
	`FUNCTION_TEMP
(
ﬁdödex
)->
¥og
) {

1102 
	`fix_˛ass_ty≥
(&
fu¡y≥
, 
	`FUNCTION_TEMP
(
ﬁdödex
)->
¥og
);

1105 i‡(
fu¡y≥
 !
TYPE_UNKNOWN
) {

1106 i‡(
fu≈
->
num_¨g
 !=Çum_arg

1107 && !((
Êags
|
funÊags
Ë& 
FUNC_VARARGS
))

1108 
	`yyw¨n
("Number ofárguments disagrees withÖrevious definition.");

1109 i‡(!(
funÊags
 & 
FUNC_STRICT_TYPES
))

1110 
	`yyw¨n
("Called functionÇot compiled withÅypeÅesting.");

1113 i‡(!
	`com∑tibÀ_ty≥s
(
ty≥
, 
fu¡y≥
)) {

1114 
buff
[512];

1115 *
íd
 = 
	`EndOf
(
buff
);

1116 *
p
;

1118 i‡(
	`FUNCTION_TEMP
(
ﬁdödex
)->
¥og
) {

1119 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Function inherited from '/");

1120 
p
 = 
	`°Ωut
’, 
íd
, 
	`FUNCTION_TEMP
(
ﬁdödex
)->
¥og
->
«me
);

1121 
p
 = 
	`°Ωut
’, 
íd
, "' doesÇot match ");

1123 i‡(
funÊags
 & 
FUNC_PROTOTYPE
)

1124 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Previous functionÖrototype ");

1125 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Previous function declaration ");

1126 
p
 = 
	`°Ωut
’, 
íd
, "doesÇot match ");

1128 
p
 = 
	`°Ωut
’, 
íd
, "current function inÑeturnÅype ");

1129 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
fu¡y≥
, 
ty≥
);

1131 
	`yyw¨n
(
buff
);

1134 
i
 = 0; i < 
num_¨g
; i++) {

1145 i‡((
Êags
 & 
FUNC_PROTOTYPE
) &&

1146 !(
funÊags
 & (
FUNC_PROTOTYPE
|
FUNC_UNDEFINED
)))

1149 i‡(
¥agmas
 & 
PRAGMA_WARNINGS
)

1150 
	`ªmove_ovîlﬂd_w¨nögs
(
fu≈
->
«me
);

1157 i‡(
	`FUNCTION_PROG
(
ﬁdödex
) == 0) {

1158 
num
 = 
	`FUNCTION_TEMP
(
ﬁdödex
)->
u
.
ödex
;

1159 
fu≈
 = 
	`FUNC
(
num
);

1161 
fu≈
 = 0;

1163 i‡(!
fu≈
) {

1164 
num
 = 
mem_block
[
A_FUNCTIONS
].
cuºít_size
 / (
fun˘i⁄_t
);

1165 
fu≈
 = (
fun˘i⁄_t
 *)
	`Æloˇã_ö_mem_block
(
A_FUNCTIONS
, (function_t));

1166 
fu≈
->
«me
 = 
	`make_sh¨ed_°rög
(name);

1167 
¨gumít_°¨t_ödex
 = 
INDEX_START_NONE
;

1168 
	`add_to_mem_block
(
A_ARGUMENT_INDEX
, (*Ë&
¨gumít_°¨t_ödex
,

1169  
¨gumít_°¨t_ödex
);

1173 i‡(
ﬁdödex
 < 0) {

1174 
√wödex
 = 
	`add_√w_fun˘i⁄_íåy
();

1175 
ihe
 = 
	`föd_‹_add_idít
(
fu≈
->
«me
, 
FOA_GLOBAL_SCOPE
);

1176 
ihe
->
£m_vÆue
++;

1177 
ihe
->
dn
.
fun˘i⁄_num
 = 
√wödex
;

1178 
√wfunc
 = 
	`FUNCTION_TEMP
(
√wödex
);

1179 
√wfunc
->
√xt
 = (
compûî_ãmp_t
 *Ë
NULL
;

1181 
√wfunc
 = 
	`ALLOCATE
(
compûî_ãmp_t
, 
TAG_TEMPORARY
, "define_new_function");

1182 *
√wfunc
 = *
	`FUNCTION_TEMP
(
ﬁdödex
);

1185 
	`FUNCTION_TEMP
(
ﬁdödex
)->
√xt
 = 
√wfunc
;

1186 
√wfunc
 = 
	`FUNCTION_TEMP
(
ﬁdödex
);

1188 
√wödex
 = 
ﬁdödex
;

1191 
√wfunc
->
¥og
 = 0;

1192 
√wfunc
->
u
.
ödex
 = 
num
;

1194 i‡(
exa˘_ty≥s
)

1195 
Êags
 |
FUNC_STRICT_TYPES
;

1196 
	`DEBUG_CHECK
(!(
Êags
 & 
DECL_ACCESS
), "NoáccessÜevel for function!\n");

1197 
√wfunc
->
Êags
 = flags;

1201 
fu≈
->
num_loˇl
 =Çum_local;

1202 
fu≈
->
num_¨g
 =Çum_arg;

1203 
fu≈
->
ty≥
 =Åype;

1204 
fu≈
->
addªss
 = 0;

1205 #ifde‡
PROFILE_FUNCTIONS


1206 
fu≈
->
ˇŒs
 = 0L;

1207 
fu≈
->
£lf
 = 0L;

1208 
fu≈
->
chûdªn
 = 0L;

1211 i‡(
exa˘_ty≥s
 && 
num_¨g
) {

1212 
i
;

1214 i‡(!(
Êags
 & 
FUNC_PROTOTYPE
)) {

1215 
i
 = 0; i < 
cuºít_numbî_of_loˇls
; i++) {

1216 i‡(
ty≥_of_loˇls_±r
[
loˇls_±r
[
i
].
ru¡ime_ödex
] & 
LOCAL_MOD_UNUSED
) {

1217 
buf
[256];

1218 *
íd
 = 
	`EndOf
(
buf
);

1219 *
p
;

1221 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnusedÜocal variable '");

1222 
p
 = 
	`°Ωut
’, 
íd
, 
loˇls_±r
[
i
].
ihe
->
«me
);

1223 
p
 = 
	`°Ωut
’, 
íd
, "'");

1224 
	`yyw¨n
(
buf
);

1225 
ty≥_of_loˇls_±r
[
loˇls_±r
[
i
].
ru¡ime_ödex
] &~
LOCAL_MOD_UNUSED
;

1229 *((*)
mem_block
[
A_ARGUMENT_INDEX
].
block
 + 
num
) =

1230 
mem_block
[
A_ARGUMENT_TYPES
].
cuºít_size
 / ();

1231 
	`add_to_mem_block
(
A_ARGUMENT_TYPES
, (*)
ty≥_of_loˇls_±r
,

1232 
num_¨g
 * (*
ty≥_of_loˇls_±r
));

1233 #i‚de‡
SUPPRESS_ARGUMENT_WARNINGS


1234 i‡(
Êags
 & 
FUNC_PROTOTYPE
) {

1235 
i
;

1237 
i
 = 0; i < 
num_¨g
; i++) {

1238 i‡(*
loˇls_±r
[
i
].
ihe
->
«me
)

1239 
ty≥_of_loˇls_±r
[
i
] |
LOCAL_MOD_UNUSED
;

1244  
√wödex
;

1245 
	}
}

1247 
deföe_v¨übÀ
 
	$P2
(*, 
«me
, , 
ty≥
)

1249 
v¨übÀ_t
 *
dummy
;

1250 
n
;

1251 
idít_hash_ñem_t
 *
ihe
;

1253 
n
 = (
mem_block
[
A_VAR_TEMP
].
cuºít_size
 / (
v¨übÀ_t
));

1255 
ihe
 = 
	`föd_‹_add_idít
(
«me
, 
FOA_GLOBAL_SCOPE
);

1256 i‡(
ihe
->
dn
.
globÆ_num
 == -1) {

1257 
ihe
->
£m_vÆue
++;

1258 
ihe
->
dn
.
globÆ_num
 = 
n
;

1260 i‡(
n
 >= 256) {

1261 
	`yyîr‹
("Too many global variables");

1264 
buf
[256];

1265 *
íd
 = 
	`EndOf
(
buf
);

1266 *
p
;

1268 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Redeclaration of global variable '");

1269 
p
 = 
	`°Ωut
’, 
íd
, 
ihe
->
«me
);

1270 
p
 = 
	`°Ωut
’, 
íd
, "'.");

1271 
	`yyw¨n
(
buf
);

1273 i‡(
	`VAR_TEMP
(
ihe
->
dn
.
globÆ_num
)->
ty≥
 & 
DECL_NOMASK
) {

1274 
buf
[256];

1275 *
íd
 = 
	`EndOf
(
buf
);

1276 *
p
;

1278 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine 'nomask' variable \"");

1279 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

1280 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1281 
	`yyîr‹
(
buf
);

1286 i‡(!(
	`VAR_TEMP
(
ihe
->
dn
.
globÆ_num
)->
ty≥
 & 
DECL_NOSAVE
))

1287 
ty≥
 |
DECL_NOSAVE
;

1292 i‡(!(
ty≥
 & 
DECL_HIDDEN
))

1293 
ihe
->
dn
.
globÆ_num
 = 
n
;

1296 
dummy
 = (
v¨übÀ_t
 *)
	`Æloˇã_ö_mem_block
(
A_VAR_TEMP
, (variable_t));

1297 
dummy
->
«me
 =Çame;

1298 
dummy
->
ty≥
 =Åype;

1300  
n
;

1301 
	}
}

1303 
deföe_√w_v¨übÀ
 
	$P2
(*, 
«me
, , 
ty≥
) {

1304 
n
;

1305 *
ç
;

1306 **
≈
;

1308 
v¨_deföed
 = 1;

1309 
«me
 = 
	`make_sh¨ed_°rög
(name);

1310 
n
 = 
	`deföe_v¨übÀ
(
«me
, 
ty≥
);

1311 
≈
 = (**)
	`Æloˇã_ö_mem_block
(
A_VAR_NAME
, (*));

1312 *
≈
 = 
«me
;

1313 
ç
 = (*)
	`Æloˇã_ö_mem_block
(
A_VAR_TYPE
, ());

1314 *
ç
 = 
ty≥
;

1316  
n
;

1317 
	}
}

1319 
∑r£_node_t
 *
check_ªfs
 
	$P3
(, 
num
, 
∑r£_node_t
 *, 
ñi°
,Ö¨£_node_à*, 
≤
) {

1320 
tmp
 = 
num
;

1322 
ñi°
 =Éli°->
r
.
ex¥
;

1324 
ñi°
) {

1325 i‡(
	`IS_NODE
(
ñi°
->
v
.
ex¥
, 
NODE_UNARY_OP_1
, 
F_MAKE_REF
))

1326 
tmp
--;

1327 
ñi°
 =Éli°->
r
.
ex¥
;

1329 
	`DEBUG_CHECK
(
tmp
 < 0, "Oops, found moreÑefsÅhan isÖossible!\n");

1330 i‡(
tmp
) {

1335 
	`yyîr‹
("Illegal use ofÑef");

1337 i‡(
num
) {

1338 
∑r£_node_t
 *
ªt
;

1340 
	`CREATE_UNARY_OP_1
(
ªt
, 
F_KILL_REFS
, 
≤
->
ty≥
,Ön, 
num
);

1341  
ªt
;

1343  
≤
;

1344 
	}
}

1347 
de˛_fix
 
	$P1
(, 
x
) {

1348 
ª°
 = 
x
 & ~
DECL_ACCESS
;

1350 #i‚de‡
SENSIBLE_MODIFIERS


1351 i‡(
x
 & 
DECL_VISIBLE
)

1352  
ª°
 | 
DECL_VISIBLE
;

1354 i‡(
x
 & 
DECL_PRIVATE
)

1355  
ª°
 | 
DECL_PRIVATE
;

1358  
ª°
 | 
DECL_PROTECTED
;

1359 
	}
}

1361 *
	gcompûî_ty≥_«mes
[] = {"unknown", "mixed", "void", "void",

1367 *
gë_ty≥_modifõrs
 
	$P3
(*, 
whîe
, *, 
íd
, , 
ty≥
)

1369 #ifde‡
SENSIBLE_MODIFIERS


1370 i‡(
ty≥
 & 
DECL_HIDDEN
)

1371 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "hidden ");

1372 i‡(
ty≥
 & 
DECL_PRIVATE
)

1373 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "private ");

1374 i‡(
ty≥
 & 
DECL_PROTECTED
)

1375 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "protected ");

1376 i‡(
ty≥
 & 
DECL_NOSAVE
)

1377 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "nosave ");

1379 i‡(
ty≥
 & 
DECL_HIDDEN
)

1380 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "hidden ");

1381 i‡(
ty≥
 & 
DECL_VISIBLE
)

1382 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "public ");

1383 i‡(
ty≥
 & 
DECL_PRIVATE
)

1384 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "private ");

1385 i‡(
ty≥
 & 
DECL_PROTECTED
)

1386 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "static ");

1389 i‡(
ty≥
 & 
DECL_NOMASK
)

1390 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "nomask ");

1391 i‡(
ty≥
 & 
FUNC_VARARGS
)

1392 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "varargs ");

1394  
whîe
;

1395 
	}
}

1397 *
gë_ty≥_«me
 
	$P3
(*, 
whîe
, *, 
íd
, , 
ty≥
)

1399 
poöãr
 = 0;

1401 
whîe
 = 
	`gë_ty≥_modifõrs
(whîe, 
íd
, 
ty≥
);

1402 
ty≥
 &~
DECL_MODS
;

1403 i‡(
ty≥
 & 
TYPE_MOD_ARRAY
) {

1404 
poöãr
 = 1;

1405 
ty≥
 &~
TYPE_MOD_ARRAY
;

1407 i‡(
ty≥
 & 
TYPE_MOD_CLASS
) {

1408 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "class ");

1410 i‡(
cuºít_fûe
)

1411 
whîe
 = 
	`°Ωut
(whîe, 
íd
, 
	`PROG_STRING
(
	`CLASS
(
ty≥
 & ~
TYPE_MOD_CLASS
)->
«me
));

1413 
	`DEBUG_CHECK
(
ty≥
 > 
compûî_ty≥_«mes
 /  compiler_type_names[0], "BadÅype\n");

1414 
whîe
 = 
	`°Ωut
(whîe, 
íd
, 
compûî_ty≥_«mes
[
ty≥
]);

1416 
whîe
 = 
	`°Ωut
(whîe, 
íd
, " ");

1417 #ifde‡
ARRAY_RESERVED_WORD


1418 i‡(
poöãr
) {

1420 i‡(
ty≥
 =
TYPE_ANY
) {

1421 
whîe
 -
	`°æí
(
compûî_ty≥_«mes
[
ty≥
]) + 1;

1423 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "array ");

1426 i‡(
poöãr
)

1427 
whîe
 = 
	`°Ωut
(whîe, 
íd
, "* ");

1429  
whîe
;

1430 
	}
}

1432 
	#STRING_HASH
(
v¨
,
°r
) \

1433 
v¨
 = ()
°r
 ^ ()str >> 16; \

1434 
v¨
 = (v¨ ^ v¨ >> 8Ë& 0xff;

	)

1436 
°‹e_¥og_°rög
 
	$P1
(*, 
°r
)

1438 
i
, 
√xt
, *
√xt_èb
, *
idxp
;

1439 **
p
;

1440 
hash
, 
mask
, *
ègp
;

1442 
°r
 = 
	`make_sh¨ed_°rög
(str);

1443 
	`STRING_HASH
(
hash
, 
°r
);

1444 
idxp
 = &
°rög_idx
[
hash
];

1447 
mask
 = 1 << (
hash
 & 7);

1448 
ègp
 = &
°rög_ègs
[
hash
 >> 3];

1450 
p
 = (**)&
	`PROG_STRING
(0);

1451 
√xt_èb
 = (*Ë
mem_block
[
A_STRING_NEXT
].
block
;

1453 i‡(*
ègp
 & 
mask
) {

1455 
i
 = *
idxp
; i >0; i = 
√xt_èb
[i]) {

1456 i‡(
p
[
i
] =
°r
) {

1457 
	`‰ì_°rög
(
°r
);

1459 ((*Ë
mem_block
[
A_STRING_REFS
].
block
)[
i
]++;

1460  
i
;

1463 
√xt
 = *
idxp
;

1465 *
ègp
 |
mask
;

1466 
√xt
 = -1;

1473 i‡(
‰ìd_°rög
 >= 0) {

1475 
t›
;

1477 
i
 = 
‰ìd_°rög
;

1479 
t›
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 /  
°r
;

1480 
‰ìd_°rög
++; fªed_°rög < 
t›
; freed_string++) {

1481 i‡(
p
[
‰ìd_°rög
] == 0)

1484 i‡(
‰ìd_°rög
 >
t›
)

1485 
‰ìd_°rög
 = -1;

1488 
	`Æloˇã_ö_mem_block
(
A_STRINGS
,  
°r
);

1489 
	`Æloˇã_ö_mem_block
(
A_STRING_NEXT
, ());

1490 
	`Æloˇã_ö_mem_block
(
A_STRING_REFS
, ());

1492 
i
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 /  
°r
 - 1;

1494 
	`PROG_STRING
(
i
Ë
°r
;

1495 ((*Ë
mem_block
[
A_STRING_NEXT
].
block
)[
i
] = 
√xt
;

1496 ((*Ë
mem_block
[
A_STRING_REFS
].
block
)[
i
] = 1;

1497 *
idxp
 = 
i
;

1498  
i
;

1499 
	}
}

1501 
‰ì_¥og_°rög
 
	$P1
(, 
num
)

1503 
i
, 
¥v
, *
√xt_èb
, 
t›
, *
idxp
;

1504 **
p
, *
°r
;

1505 
hash
, 
mask
;

1507 
t›
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 / (*) - 1;

1508 i‡(
num
 < 0 ||Çum > 
t›
) {

1509 
	`yyîr‹
("free_prog_string: index out ofÑange.\n");

1512 i‡(--((*Ë
mem_block
[
A_STRING_REFS
].
block
)[
num
] >= 1)

1515 
p
 = (**Ë
mem_block
[
A_STRINGS
].
block
;

1516 
√xt_èb
 = (*Ë
mem_block
[
A_STRING_NEXT
].
block
;

1518 
°r
 = 
p
[
num
];

1519 
	`STRING_HASH
(
hash
, 
°r
);

1520 
idxp
 = &
°rög_idx
[
hash
];

1522 
¥v
 = -1, 
i
 = *
idxp
; i !
num
;Örv = i, i = 
√xt_èb
[i]) {

1523 i‡(
i
 == -1) {

1524 
	`yyîr‹
("free_prog_string: stringÇot inÖrogÅable.\n");

1529 i‡(
¥v
 == -1) {

1530 *
idxp
 = 
√xt_èb
[
i
];

1531 i‡(*
idxp
 == -1) {

1533 
mask
 = 1 << (
hash
 & 7);

1534 
°rög_ègs
[
hash
 >> 3] &~
mask
;

1537 
√xt_èb
[
¥v
] =Çext_èb[
i
];

1540 
	`‰ì_°rög
(
°r
);

1541 
p
[
i
] = 0;

1542 i‡(
i
 !
t›
) {

1543 i‡(
i
 < 
‰ìd_°rög
 || freed_string == -1)

1544 
‰ìd_°rög
 = 
i
;

1547 
mem_block
[
A_STRINGS
].
cuºít_size
 - 
°r
;

1548 
mem_block
[
A_STRING_REFS
].
cuºít_size
 -= ();

1549 
mem_block
[
A_STRING_NEXT
].
cuºít_size
 -= ();

1551 
	}
}

1553 
vÆid©e_fun˘i⁄_ˇŒ
 
	$P2
(, 
f
, 
∑r£_node_t
 *, 
¨gs
)

1555 
fun˘i⁄_t
 *
fu≈
 = 
	`FUNCTION_DEF
(
f
);

1556 
funÊags
 = 
	`FUNCTION_FLAGS
(
f
);

1557 
num_¨g
 = ( 
¨gs
 ?árgs->
köd
 : 0 );

1558 
num_v¨
 = 0;

1559 
∑r£_node_t
 *
≤
 = 
¨gs
;

1560 *
¨g_ty≥s
 = 0;

1561 
¥ogøm_t
 *
¥og
;

1563 
≤
) {

1564 i‡(
≤
->
ty≥
 & 1Ë
num_v¨
++;

1565 
≤
 =Ön->
r
.
ex¥
;

1569 i‡(
funÊags
 & 
DECL_HIDDEN
) {

1570 
buf
[256];

1571 *
íd
 = 
	`EndOf
(
buf
);

1572 *
p
;

1574 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo call inheritedÖrivate function '");

1575 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1576 
p
 = 
	`°Ωut
’, 
íd
, "'");

1577 
	`yyîr‹
(
buf
);

1583 i‡(
exa˘_ty≥s
) {

1584 i‡((
funÊags
 & 
FUNC_UNDEFINED
)) {

1585 
buf
[256];

1586 *
íd
 = 
	`EndOf
(
buf
);

1587 *
p
;

1589 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Function ");

1590 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1591 
p
 = 
	`°Ωut
’, 
íd
, " undefined");

1592 
	`yyîr‹
(
buf
);

1597 i‡(!(
funÊags
 & 
FUNC_VARARGS
) &&

1598 (
funÊags
 & 
FUNC_STRICT_TYPES
)) {

1599 
buff
[256];

1600 *
íd
 = 
	`EndOf
(
buff
);

1601 *
p
;

1603 i‡(
num_v¨
) {

1604 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÖassá variableÇumber ofárgumentsÅoÇon-varargs function ");

1605 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1606 
p
 = 
	`°Ωut
’, 
íd
, "\n");

1607 
	`yyîr‹
(
buff
);

1608 } i‡(
fu≈
->
num_¨g
 !=Çum_arg) {

1609 
p
 = 
	`°Ωut
(
buff
, 
íd
, "WrongÇumber ofárgumentsÅo ");

1610 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1611 
p
 = 
	`°Ωut
’, 
íd
, "\n Expected: ");

1612 
p
 = 
	`°Ωut_öt
’, 
íd
, 
fu≈
->
num_¨g
);

1613 
p
 = 
	`°Ωut
’, 
íd
, " Got: ");

1614 
p
 = 
	`°Ωut_öt
’, 
íd
, 
num_¨g
);

1615 
	`yyîr‹
(
buff
);

1621 i‡((
¥og
 = 
	`FUNCTION_PROG
(
f
))) {

1622 
which
 = (
	`FUNCTION_TEMP
(
f
)->
u
.
func
 - 
¥og
->
fun˘i⁄_èbÀ
);

1623 i‡(
¥og
->
ty≥_°¨t
) {

1624 
°¨t
 = 
¥og
->
ty≥_°¨t
[
which
];

1625 i‡(
°¨t
 !
INDEX_START_NONE
)

1626 
¨g_ty≥s
 = 
¥og
->
¨gumít_ty≥s
 + 
°¨t
;

1629 
which
 = 
	`FUNCTION_TEMP
(
f
)->
u
.
ödex
;

1630 
°¨t
 = *((*)
mem_block
[
A_ARGUMENT_INDEX
].
block
 + 
which
);

1631 i‡(
°¨t
 !
INDEX_START_NONE
)

1632 
¨g_ty≥s
 = (*)
mem_block
[
A_ARGUMENT_TYPES
].
block
 + 
°¨t
;

1635 i‡(
¨g_ty≥s
) {

1636 
¨g
, 
i
, 
tmp
;

1637 
∑r£_node_t
 *
íode
 = 
¨gs
;

1638 
‚¨g
 = 
fu≈
->
num_¨g
;

1640 i‡(
funÊags
 & 
FUNC_TRUE_VARARGS
)

1641 
‚¨g
--;

1643 
i
 = 0; (Ëò< 
‚¨g
 && i < 
num_¨g
; i++) {

1644 i‡(
íode
->
ty≥
 & 1) ;

1645 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

1647 
¨g
 = 
¨g_ty≥s
[
i
];

1648 i‡(
¥og
)

1649 
	`fix_˛ass_ty≥
(&
¨g
, 
¥og
);

1651 i‡(!
	`com∑tibÀ_ty≥s
(
tmp
, 
¨g
)) {

1652 
buff
[256];

1653 *
íd
 = 
	`EndOf
(
buff
);

1654 *
p
;

1656 
p
 = 
	`°Ωut
(
buff
, 
íd
, "BadÅype forárgument ");

1657 
p
 = 
	`°Ωut_öt
’, 
íd
, 
i
+1);

1658 
p
 = 
	`°Ωut
’, 
íd
, " of ");

1659 
p
 = 
	`°Ωut
’, 
íd
, 
fu≈
->
«me
);

1660 
p
 = 
	`°Ωut
’, 
íd
, " ");

1661 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
¨g_ty≥s
[
i
], 
tmp
);

1662 
	`yyîr‹
(
buff
);

1664 
íode
 =Énode->
r
.
ex¥
;

1668  
fu≈
->
ty≥
;

1669 
	}
}

1671 
∑r£_node_t
 *

1672 
¥omŸe_to_Êﬂt
 
	$P1
(
∑r£_node_t
 *, 
node
) {

1673 
∑r£_node_t
 *
ex¥
;

1674 i‡(
node
->
köd
 =
NODE_NUMBER
) {

1675 
node
->
köd
 = 
NODE_REAL
;

1676 
node
->
v
.
ªÆ
 =Çode->v.
numbî
;

1677  
node
;

1679 
ex¥
 = 
	`√w_node
();

1680 
ex¥
->
köd
 = 
NODE_EFUN
;

1681 
ex¥
->
v
.
numbî
 = 
¥edefs
[
to_Êﬂt_efun
].
tokí
;

1682 
ex¥
->
ty≥
 = 
TYPE_REAL
;

1683 
ex¥
->
l
.
numbî
 = 1;

1684 
ex¥
->
r
.ex¥ = 
	`√w_node_no_löe
();

1685 
ex¥
->
r
.ex¥->
köd
 = 1;

1686 
ex¥
->
r
.ex¥->
l
.expr =Éxpr->r.expr;

1687 
ex¥
->
r
.ex¥->
ty≥
 = 0;

1688 
ex¥
->
r
.ex¥->
v
.ex¥ = 
node
;

1689 
ex¥
->
r
.expr->r.expr = 0;

1690  
ex¥
;

1691 
	}
}

1693 
∑r£_node_t
 *

1694 
¥omŸe_to_öt
 
	$P1
(
∑r£_node_t
 *, 
node
) {

1695 
∑r£_node_t
 *
ex¥
;

1696 i‡(
node
->
köd
 =
NODE_REAL
) {

1697 
node
->
köd
 = 
NODE_NUMBER
;

1698 
node
->
v
.
numbî
 =Çode->v.
ªÆ
;

1699  
node
;

1701 
ex¥
 = 
	`√w_node
();

1702 
ex¥
->
köd
 = 
NODE_EFUN
;

1703 
ex¥
->
v
.
numbî
 = 
¥edefs
[
to_öt_efun
].
tokí
;

1704 
ex¥
->
ty≥
 = 
TYPE_NUMBER
;

1705 
ex¥
->
l
.
numbî
 = 1;

1706 
ex¥
->
r
.ex¥ = 
	`√w_node_no_löe
();

1707 
ex¥
->
r
.ex¥->
köd
 = 1;

1708 
ex¥
->
r
.ex¥->
l
.expr =Éxpr->r.expr;

1709 
ex¥
->
r
.ex¥->
ty≥
 = 0;

1710 
ex¥
->
r
.ex¥->
v
.ex¥ = 
node
;

1711 
ex¥
->
r
.expr->r.expr = 0;

1712  
ex¥
;

1713 
	}
}

1715 
∑r£_node_t
 *
do_¥omŸi⁄s
 
	$P2
(
∑r£_node_t
 *, 
node
, , 
ty≥
) {

1716 i‡(
ty≥
 =
TYPE_REAL
) {

1717 i‡(
node
->
ty≥
 =
TYPE_NUMBER
 ||Çode->
köd
 =
NODE_NUMBER
)

1718  
	`¥omŸe_to_Êﬂt
(
node
);

1720 i‡(
ty≥
 =
TYPE_NUMBER
 && 
node
->ty≥ =
TYPE_REAL
)

1721  
	`¥omŸe_to_öt
(
node
);

1722  
node
;

1723 
	}
}

1727 
∑r£_node_t
 *

1728 
throw_away_ˇŒ
 
	$P1
(
∑r£_node_t
 *, 
≤
) {

1729 
∑r£_node_t
 *
íode
;

1730 
∑r£_node_t
 *
ªt
 = 0;

1731 
∑r£_node_t
 *
¨g
;

1733 
íode
 = 
≤
->
r
.
ex¥
;

1734 
íode
) {

1735 
¨g
 = 
	`ö£π_p›_vÆue
(
íode
->
v
.
ex¥
);

1736 i‡(
¨g
) {

1738 i‡(
ªt
) {

1739 
∑r£_node_t
 *
tmp
;

1740 
	`CREATE_STATEMENTS
(
tmp
, 
ªt
, 
¨g
);

1741 
ªt
 = 
tmp
;

1743 
ªt
 = 
¨g
;

1746 
íode
 =Énode->
r
.
ex¥
;

1748  
ªt
;

1749 
	}
}

1751 
∑r£_node_t
 *

1752 
throw_away_m≠pög
 
	$P1
(
∑r£_node_t
 *, 
≤
) {

1753 
∑r£_node_t
 *
íode
;

1754 
∑r£_node_t
 *
ªt
 = 0;

1755 
∑r£_node_t
 *
¨g
;

1757 
íode
 = 
≤
->
r
.
ex¥
;

1758 
íode
) {

1759 
¨g
 = 
	`ö£π_p›_vÆue
(
íode
->
v
.
ex¥
->
l
.expr);

1760 i‡(
¨g
) {

1762 i‡(
ªt
) {

1763 
∑r£_node_t
 *
tmp
;

1764 
	`CREATE_STATEMENTS
(
tmp
, 
ªt
, 
¨g
);

1765 
ªt
 = 
tmp
;

1767 
ªt
 = 
¨g
;

1770 
¨g
 = 
	`ö£π_p›_vÆue
(
íode
->
v
.
ex¥
->
r
.expr);

1771 i‡(
¨g
) {

1773 i‡(
ªt
) {

1774 
∑r£_node_t
 *
tmp
;

1775 
	`CREATE_STATEMENTS
(
tmp
, 
ªt
, 
¨g
);

1776 
ªt
 = 
tmp
;

1778 
ªt
 = 
¨g
;

1781 
íode
 =Énode->
r
.
ex¥
;

1783  
ªt
;

1784 
	}
}

1786 
∑r£_node_t
 *

1787 
vÆid©e_efun_ˇŒ
 
	$P2
(, 
f
, 
∑r£_node_t
 *, 
¨gs
) {

1788 
num
 = 
¨gs
->
v
.
numbî
;

1789 
mö_¨g
, 
max_¨g
, 
def
, *
¨gp
;

1790 
num_v¨
 = 0;

1791 
∑r£_node_t
 *
≤
 = 
¨gs
->
r
.
ex¥
;

1793 
≤
) {

1794 i‡(
≤
->
ty≥
 & 1Ë
num_v¨
++;

1795 
≤
 =Ön->
r
.
ex¥
;

1798 i‡(
f
 != -1) {

1800 
¥edefs
[
f
].
tokí
) {

1801 #ifde‡
F_SIZEOF


1802 
F_SIZEOF
:

1806 i‡(!
≤
 && 
num
 == 1 &&

1807 
	`IS_NODE
(
¨gs
->
r
.
ex¥
->
v
.ex¥, 
NODE_CALL
, 
F_AGGREGATE
)) {

1808 
∑r£_node_t
 *
ª∂
, *
ªt
, *
node
;

1810 
	`CREATE_NUMBER
(
node
, 
¨gs
->
r
.
ex¥
->
v
.ex¥->
l
.
numbî
);

1811 
ªt
 = 
	`throw_away_ˇŒ
(
¨gs
->
r
.
ex¥
->
v
.expr);

1812 i‡(
ªt
) {

1813 
	`CREATE_TWO_VALUES
(
ª∂
, 
TYPE_NUMBER
, 
ªt
, 
node
);

1814  
ª∂
;

1816  
node
;

1821 
mö_¨g
 = 
¥edefs
[
f
].
mö_¨gs
;

1822 
max_¨g
 = 
¥edefs
[
f
].
max_¨gs
;

1824 
def
 = 
¥edefs
[
f
].
DeÁu…
;

1825 i‡(!
num_v¨
 && 
def
 !
DEFAULT_NONE
 && 
num
 =
mö_¨g
 -1) {

1826 
∑r£_node_t
 *
tmp
;

1827 
tmp
 = 
	`√w_node_no_löe
();

1828 
tmp
->
r
.
ex¥
 = 0;

1829 
tmp
->
ty≥
 = 0;

1830 
¨gs
->
l
.
ex¥
->
r
.ex¥ = 
tmp
;

1831 i‡(
def
 =
DEFAULT_THIS_OBJECT
) {

1832 
tmp
->
v
.
ex¥
 = 
	`√w_node_no_löe
();

1833 
tmp
->
v
.
ex¥
->
köd
 = 
NODE_EFUN
;

1834 
tmp
->
v
.
ex¥
->v.
numbî
 = 
¥edefs
[
this_efun
].
tokí
;

1835 
tmp
->
v
.
ex¥
->
l
.
numbî
 = 0;

1836 
tmp
->
v
.
ex¥
->
ty≥
 = 
TYPE_ANY
;

1837 
tmp
->
v
.
ex¥
->
r
.expr = 0;

1839 
	`CREATE_NUMBER
(
tmp
->
v
.
ex¥
, 
def
);

1841 
¨gs
->
v
.
numbî
++;

1842 
num
++;

1843 } i‡(
num_v¨
 && 
max_¨g
 != -1) {

1844 
buff
[256];

1845 *
íd
 = 
	`EndOf
(
buff
);

1846 *
p
;

1848 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÖass variableÇumber ofárgumentsÅoÇon-varargsÉfun ");

1849 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1850 
	`yyîr‹
(
buff
);

1851 
	`CREATE_ERROR
(
¨gs
);

1852  
¨gs
;

1853 } i‡((
num
 - 
num_v¨
Ë< 
mö_¨g
) {

1854 
buff
[256];

1855 *
íd
 = 
	`EndOf
(
buff
);

1856 *
p
;

1858 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Too fewárgumentsÅo ");

1859 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1860 
	`CREATE_ERROR
(
¨gs
);

1861 
	`yyîr‹
(
buff
);

1862  
¨gs
;

1863 } i‡(
num
 > 
max_¨g
 && max_arg != -1) {

1864 
buff
[256];

1865 *
íd
 = 
	`EndOf
(
buff
);

1866 *
p
;

1868 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Too manyárgumentsÅo ");

1869 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1870 
	`yyîr‹
(
buff
);

1871 
	`CREATE_ERROR
(
¨gs
);

1872  
¨gs
;

1874 i‡(
max_¨g
 !-1 && 
exa˘_ty≥s
) {

1878 
i
, 
¨gn
, 
tmp
;

1879 
buff
[256];

1880 *
íd
 = 
	`EndOf
(
buff
);

1881 *
p
;

1882 
∑r£_node_t
 *
íode
 = 
¨gs
;

1883 
¨gp
 = &
efun_¨g_ty≥s
[
¥edefs
[
f
].
¨g_ödex
];

1885 
¨gn
 = 0;árg¿< 
num
;árgn++) {

1886 
íode
 =Énode->
r
.
ex¥
;

1887 i‡(
íode
->
ty≥
 & 1) ;

1889 i‡(!
íode
->
v
.
ex¥
) ;

1890 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

1891 
i
=0; !
	`com∑tibÀ_ty≥s
(
tmp
, 
¨gp
[i]) &&árgp[i] != 0; i++)

1894 i‡(
¨gp
[
i
] == 0) {

1895 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Badárgument ");

1896 
p
 = 
	`°Ωut_öt
’, 
íd
, 
¨gn
 + 1);

1897 
p
 = 
	`°Ωut
’, 
íd
, "ÅoÉfun ");

1898 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

1899 
p
 = 
	`°Ωut
’, 
íd
, "()");

1900 
	`yyîr‹
(
buff
);

1903 i‡(
tmp
 =
TYPE_NUMBER
 && 
¨gp
[
i
] =
TYPE_REAL
) {

1904 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_NUMBER
; i++)

1906 i‡(!
¨gp
[
i
])

1907 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_Êﬂt
(enode->v.expr);

1909 i‡(
tmp
 =
TYPE_REAL
 && 
¨gp
[
i
] =
TYPE_NUMBER
) {

1910 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_REAL
; i++)

1912 i‡(!
¨gp
[
i
])

1913 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_öt
(enode->v.expr);

1916 
¨gp
[
i
] != 0)

1917 
i
++;

1918 
¨gp
 +
i
 + 1;

1921 
¨gs
->
l
.
numbî
 = 
num
;

1922 
¨gs
->
v
.
numbî
 = 
¥edefs
[
f
].
tokí
;

1923 
¨gs
->
ty≥
 = 
¥edefs
[
f
].
ªt_ty≥
;

1924 i‡(
¨gs
->
ty≥
 =
TYPE_NOVALUE
) {

1925 
¨gs
->
v
.
numbî
 +
NOVALUE_USED_FLAG
;

1926 
¨gs
->
ty≥
 = 
TYPE_VOID
;

1928 
¨gs
->
köd
 = 
NODE_EFUN
;

1930 
	`CREATE_ERROR
(
¨gs
);

1932  
¨gs
;

1933 
	}
}

1935 
yyîr‹
 
	$P1
(*, 
°r
)

1937 
num_∑r£_îr‹
;

1939 
fun˘i⁄_c⁄ãxt
.
num_∑ømëîs
 = -1;

1940 i‡(
num_∑r£_îr‹
 > 5) {

1941 
Àx_Áèl
 = 1;

1944 
	`sm¨t_log
(
cuºít_fûe
, 
cuºít_löe
, 
°r
, 0);

1945 #ifde‡
PACKAGE_MUDLIB_STATS


1946 
	`add_îr‹s_f‹_fûe
 (
cuºít_fûe
, 1);

1948 
num_∑r£_îr‹
++;

1949 
	}
}

1951 
yyw¨n
 
	$P1
(*, 
°r
) {

1952 i‡(!(
¥agmas
 & 
PRAGMA_WARNINGS
)) ;

1954 
	`sm¨t_log
(
cuºít_fûe
, 
cuºít_löe
, 
°r
, 1);

1955 
	}
}

1960 
¥ogøm_t
 *

1961 
compûe_fûe
 
	$P2
(, 
f
, *, 
«me
) {

1962 
yy∑r£
 
	`PROT
(());

1963 
gu¨d
 = 0;

1964 
¥ogøm_t
 *
¥og
;

1970 i‡(
gu¨d
) {

1971 
	`îr‹
("Object cannot beÜoaded during compilation.\n");

1973 
gu¨d
 = 1;

1975 
	`¥ﬁog
(
f
, 
«me
);

1976 
	`yy∑r£
();

1977 
¥og
 = 
	`ïûog
();

1979 
gu¨d
 = 0;

1980  
¥og
;

1981 
	}
}

1983 
	$gë_id_numbî
() {

1984 
cuºít_id_numbî
 = 1;

1985  
cuºít_id_numbî
++;

1986 
	}
}

1988 
INLINE_STATIC
 
c›y_ö
 
	$P2
(, 
which
, **, 
°¨t
) {

1989 *
block
;

1990 
size
;

1992 
size
 = 
mem_block
[
which
].
cuºít_size
;

1993 i‡(!
size
) ;

1995 
block
 = 
mem_block
[
which
].block;

1996 
	`mem˝y
(*
°¨t
, 
block
, 
size
);

1998 *
°¨t
 +
	`Æign
(
size
);

1999 
	}
}

2001 
com∑ª_funcs
 
	$P2
(*, 
x
, *, 
y
) {

2002 *
n1
 = 
	`FUNC
(*
x
)->
«me
;

2003 *
n2
 = 
	`FUNC
(*
y
)->
«me
;

2004 
•1
, 
•2
;

2009 i‡(
n1
[0] == '#')

2010 
•1
 = 1;

2011 i‡(
	`FUNC
(*
x
)->
addªss
 =
ADDRESS_MAX
)

2012 
•1
 = 2;

2014 
•1
 = 0;

2016 i‡(
n2
[0] == '#')

2017 
•2
 = 1;

2018 i‡(
	`FUNC
(*
y
)->
addªss
 =
ADDRESS_MAX
)

2019 
•2
 = 2;

2021 
•2
 = 0;

2023 i‡(
•1
 < 
•2
)

2025 i‡(
•1
 > 
•2
)

2028 i‡(
n1
 < 
n2
)

2030 i‡(
n1
 > 
n2
)

2034 
	}
}

2036 
	$h™dÀ_fun˘i⁄s
() {

2037 
num_func
, 
tŸÆ_func
;

2038 
i
;

2039 
compûî_ãmp_t
 *
cur_def
;

2040 
√w_ödex
, 
num_def
;

2041 
föÆ_ödex
;

2042 
öhîô_t
 *
öhîôp
;

2046 
num_func
 = 
tŸÆ_func
 = 
mem_block
[
A_FUNCTIONS
].
cuºít_size
 /  (
fun˘i⁄_t
);

2047 i‡(
num_func
) {

2048 
func_ödex_m≠
 = 
	`CALLOCATE
(
num_func
, ,

2049 
TAG_TEMPORARY
, "handle_functions");

2050 
comp_s‹ãd_funcs
 = 
	`CALLOCATE
(
num_func
, ,

2051 
TAG_TEMPORARY
, "handle_functions");

2053 
i
 = 
num_func
;

2054 
i
--Ë
func_ödex_m≠
[i] = i;

2056 
	`quickS‹t
(
func_ödex_m≠
, 
num_func
, (),

2057 
com∑ª_funcs
);

2059 
i
 = 
num_func
;

2060 
i
--)

2061 
comp_s‹ãd_funcs
[
func_ödex_m≠
[
i
]] = i;

2063 
num_func
 &&

2064 
	`FUNC
(
func_ödex_m≠
[
num_func
-1])->
addªss
 =
ADDRESS_MAX
)

2065 
num_func
--;

2068 i‡(
NUM_INHERITS
) {

2069 
¥ogøm_t
 *
öhîôed_¥og
;

2071 
öhîôp
 = 
	`INHERIT
(
NUM_INHERITS
 - 1);

2073 
öhîôed_¥og
 = 
öhîôp
->
¥og
;

2075 
comp_œ°_öhîôed
 = 
öhîôp
->
fun˘i⁄_ödex_off£t


2076 + 
öhîôed_¥og
->
œ°_öhîôed
 +

2077 
öhîôed_¥og
->
num_fun˘i⁄s_deföed
;

2079 i‡(
öhîôed_¥og
->
num_fun˘i⁄s_deföed
 &&

2080 
öhîôed_¥og
->
fun˘i⁄_èbÀ
[öhîôed_¥og->
num_fun˘i⁄s_deföed
 -1].
«me
[0] ='#'Ë
comp_œ°_öhîôed
--;

2081 } 
comp_œ°_öhîôed
 = 0;

2086 
num_def
 = 
mem_block
[
A_FUNCTION_DEFS
].
cuºít_size
/(
compûî_ãmp_t
);

2087 i‡(
num_def
) {

2088 
comp_def_ödex_m≠
 = 
	`CALLOCATE
(
num_def
, ,

2089 
TAG_TEMPORARY
, "handle functions");

2090 
¥og_Êags
 = 
	`CALLOCATE
(
comp_œ°_öhîôed
 + 
tŸÆ_func
, ,

2091 
TAG_TEMPORARY
, "handle_functions");

2093 
i
 = 0; i < 
num_def
; i++) {

2094 
cur_def
 = 
	`FUNCTION_TEMP
(
i
);

2096 i‡(
cur_def
->
Êags
 & 
FUNC_INHERITED
) {

2097 
föÆ_ödex
 = 
	`INHERIT
(
cur_def
->
off£t
)->
fun˘i⁄_ödex_off£t


2098 + 
cur_def
->
fun˘i⁄_ödex_off£t
;

2100 
föÆ_ödex
 = 
comp_œ°_öhîôed
 +

2101 
comp_s‹ãd_funcs
[
cur_def
->
u
.
ödex
];

2103 i‡(
cur_def
->
Êags
 & 
FUNC_ALIAS
) {

2104 
	`Áèl
("Aliasing difficulties!\n");

2105 
	`exô
(1);

2108 
comp_def_ödex_m≠
[
i
] = 
föÆ_ödex
;

2109 
¥og_Êags
[
föÆ_ödex
] = 
cur_def
->
Êags
;

2111 (
cur_def
 = cur_def->
√xt
)) {

2112 i‡(
cur_def
->
Êags
 & 
FUNC_INHERITED
) {

2113 
√w_ödex
 = 
	`INHERIT
(
cur_def
->
off£t
)->
fun˘i⁄_ödex_off£t


2114 + 
cur_def
->
fun˘i⁄_ödex_off£t
;

2116 
√w_ödex
 = 
comp_œ°_öhîôed
 +

2117 
comp_s‹ãd_funcs
[
cur_def
->
u
.
ödex
];

2123 i‡(
√w_ödex
 !
föÆ_ödex
) {

2124 
¥og_Êags
[
√w_ödex
] = 
FUNC_ALIAS
 | 
föÆ_ödex
;

2130 i‡(
tŸÆ_func
)

2131 
	`FREE
((*Ë
comp_s‹ãd_funcs
);

2132 
	}
}

2137 
¥ogøm_t
 *
ïûog
 
PROT
(()) {

2138 
	gsize
, 
	gi
, 
	g sz
, 
	g off
;

2139 *
	gp
;

2140 
	gnum_func
;

2141 
idít_hash_ñem_t
 *
	gihe
;

2142 
¥ogøm_t
 *
	g¥og
;

2143 
compûî_ãmp_t
 *
	gfundeÂ
, *
	g√xtdeÂ
;

2145 i‡(
	gnum_∑r£_îr‹
 > 0 || 
	göhîô_fûe
) {

2148 i‡(
	g¥agmas
 & 
	gPRAGMA_WARNINGS
)

2149 
ªmove_ovîlﬂd_w¨nögs
(0);

2150 
˛ón_∑r£r
();

2151 
íd_√w_fûe
();

2152 
‰ì_°rög
(
cuºít_fûe
);

2153 
	gcuºít_fûe
 = 0;

2157 i‡(
	g¥agmas
 & 
	gPRAGMA_WARNINGS
)

2158 
show_ovîlﬂd_w¨nögs
();

2164 
	gUPDATE_PROGRAM_SIZE
;

2166 i‡(
	gcomp_åìs
[
TREE_INIT
]) {

2167 
∑r£_node_t
 *
	g≤
, *
	g√wnode
;

2168 
	gfun
;

2170 
CREATE_RETURN
(
≤
, 0);

2171 
	g√wnode
 = 
comp_åìs
[
TREE_INIT
];

2172 
CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
], 0,

2173 
√wnode
, 
≤
);

2174 
	gfun
 = 
deföe_√w_fun˘i⁄
(
APPLY___INIT
, 0, 0,

2175 
DECL_HIDDEN
 | 
FUNC_STRICT_TYPES
, 
TYPE_VOID
);

2176 
	g≤
 = 
√w_node_no_löe
();

2177 
	g≤
->
	gköd
 = 
NODE_FUNCTION
;

2178 
	g≤
->
	gv
.
	gnumbî
 = 
fun
;

2179 
	g≤
->
	gl
.
	gnumbî
 = 0;

2180 
	g≤
->
	gr
.
	gex¥
 = 
comp_åìs
[
TREE_INIT
];

2181 
	gcomp_åìs
[
TREE_INIT
] = 
≤
;

2186 
h™dÀ_fun˘i⁄s
();

2190 
	gcuºít_åì
 = 
TREE_MAIN
;

2191 
gíî©e
(
comp_åìs
[
TREE_MAIN
]);

2193 
	gcuºít_åì
 = 
TREE_INIT
;

2194 
gíî©e
(
comp_åìs
[
TREE_INIT
]);

2196 
	gcuºít_åì
 = 
TREE_MAIN
;

2198 
gíî©e_föÆ_¥ogøm
(0);

2199 
	gUPDATE_PROGRAM_SIZE
;

2201 i‡(
	gmem_block
[0].
	gcuºít_size
 > 
	gADDRESS_MAX
) {

2202 
yyîr‹
("ProgramÅooÜarge");

2203 
˛ón_∑r£r
();

2204 
íd_√w_fûe
();

2205 
‰ì_°rög
(
cuºít_fûe
);

2206 
	gcuºít_fûe
 = 0;

2210 
gíî©e_föÆ_¥ogøm
(1);

2212 
‰ì_åì
();

2214 
	gsize
 = 
Æign
( (
¥ogøm_t
));

2217 i‡(!(
	g¥agmas
 & 
	gPRAGMA_SAVE_TYPES
))

2218 
	gmem_block
[
A_ARGUMENT_TYPES
].
	gcuºít_size
 = 0;

2219 i‡(!(
	gmem_block
[
A_ARGUMENT_TYPES
].
	gcuºít_size
))

2220 
	gmem_block
[
A_ARGUMENT_INDEX
].
	gcuºít_size
 = 0;

2222 
	gi
=0; i<
	gNUMPAREAS
; i++)

2223 i‡(
	gi
 !
A_LINENUMBERS
 && 
i
 !
A_FILE_INFO
 &&

2224 
i
 !
A_FUNCTION_DEFS
 && i !
A_FUNCTIONS
 &&

2225 
i
 !
A_ARGUMENT_INDEX
)

2226 
size
 +
Æign
(
mem_block
[
i
].
cuºít_size
);

2228 
	gnum_func
 = 
mem_block
[
A_FUNCTIONS
].
cuºít_size
/(
fun˘i⁄_t
);

2230 
	gnum_func
 &&

2231 
FUNC
(
func_ödex_m≠
[
num_func
 - 1])->
	gaddªss
 =
ADDRESS_MAX
)

2232 
num_func
--;

2234 
	gsize
 +
Æign
((
num_func
 * (
fun˘i⁄_t
)));

2237 
	gsize
 +
Æign
(((
comp_œ°_öhîôed
 + 
num_func
) * ()));

2240 i‡(
	gmem_block
[
A_ARGUMENT_INDEX
].
	gcuºít_size
)

2241 
	gsize
 +
Æign
(
num_func
 * ());

2243 
	gp
 = (*)
DXALLOC
(
size
, 
TAG_PROGRAM
, "epilog: 1");

2244 
	g¥og
 = (
¥ogøm_t
 *)
p
;

2245 *
	g¥og
 = 
NULL_¥ogøm
;

2246 
	g¥og
->
	gtŸÆ_size
 = 
size
;

2247 
	g¥og
->
	gªf
 = 0;

2248 
	g¥og
->
	gfunc_ªf
 = 0;

2249 
	gihe
 = 
lookup_idít
("heart_beat");

2250 i‡(
	gihe
 && ihe->
	gdn
.
	gfun˘i⁄_num
 != -1) {

2251 
¥og
->
hóπ_bót
 = 
comp_def_ödex_m≠
[
ihe
->
dn
.
fun˘i⁄_num
] + 1;

2252 i‡(
	g¥og_Êags
 &&Örog_Êags[
¥og
->
hóπ_bót
-1] &

2253 (
	gFUNC_PROTOTYPE
|
	gFUNC_UNDEFINED
))

2254 
	g¥og
->
	ghóπ_bót
 = 0;

2256 
	g¥og
->
	ghóπ_bót
 = 0;

2257 
	g¥og
->
	g«me
 = 
cuºít_fûe
;

2259 
	gcuºít_fûe
 = 0;

2261 
	gtŸÆ_num_¥og_blocks
++;

2262 
	gtŸÆ_¥og_block_size
 +
size
;

2264 
	g¥og
->
	glöe_sw≠_ödex
 = -1;

2269 
	g off
 = 2 + (
mem_block
[
A_FILE_INFO
].
cuºít_size
 / ());

2270 
	g sz
 = 
 off
 * (Ë+ 
mem_block
[
A_LINENUMBERS
].
cuºít_size
;

2272 
	g¥og
->
	gfûe_öfo
 = (*Ë
DXALLOC
(
 sz
, 
TAG_LINENUMBERS


2275 
	g¥og
->
	gfûe_öfo
[0] = ()
 sz
;

2276 
	g¥og
->
	gfûe_öfo
[1] = ()
 off
;

2278 
mem˝y
(((*)&
¥og
->
fûe_öfo
[2]),

2279 
mem_block
[
A_FILE_INFO
].
block
,

2280 
mem_block
[
A_FILE_INFO
].
cuºít_size
);

2282 
	g¥og
->
	glöe_öfo
 = (*)(&
¥og
->
fûe_öfo
[
 off
]);

2283 
mem˝y
(((*)&
¥og
->
fûe_öfo
[
 off
]),

2284 
mem_block
[
A_LINENUMBERS
].
block
,

2285 
mem_block
[
A_LINENUMBERS
].
cuºít_size
);

2287 
	gp
 +
Æign
((
¥ogøm_t
));

2288 
	g¥og
->
	g¥ogøm
 = 
p
;

2289 
	g¥og
->
	g¥ogøm_size
 = 
mem_block
[
A_PROGRAM
].
cuºít_size
;

2290 
c›y_ö
(
A_PROGRAM
, &
p
);

2294 
	g¥og
->
	gœ°_öhîôed
 = 
comp_œ°_öhîôed
;

2295 
	g¥og
->
	gnum_fun˘i⁄s_deföed
 = 
num_func
;

2297 
	g¥og
->
	gfun˘i⁄_èbÀ
 = (
fun˘i⁄_t
 *)
p
;

2298 
	gi
 = 0; i < 
	gnum_func
; i++)

2299 
	g¥og
->
	gfun˘i⁄_èbÀ
[
i
] = *
FUNC
(
func_ödex_m≠
[i]);

2301 
	gp
 +
Æign
((
fun˘i⁄_t
Ë* 
num_func
);

2304 
	g¥og
->
	gfun˘i⁄_Êags
 = (*)
p
;

2305 i‡(
	g¥og_Êags
) {

2306 
mem˝y
(
p
,
¥og_Êags
,

2307 (
comp_œ°_öhîôed
 + 
num_func
) * ());

2308 
FREE
((*)
¥og_Êags
);

2310 
	gp
 +
Æign
((Ë* (
comp_œ°_öhîôed
 + 
num_func
));

2312 i‡(
	gmem_block
[
A_ARGUMENT_INDEX
].
	gcuºít_size
) {

2313 *
	gde°
;

2315 
	g¥og
->
	g¨gumít_ty≥s
 = (*)
p
;

2316 
c›y_ö
(
A_ARGUMENT_TYPES
, &
p
);

2318 
	gde°
 = 
¥og
->
ty≥_°¨t
 = (*)
p
;

2319 
	gi
 = 
num_func
;

2320 
	gi
--)

2321 
	gde°
[
i
] = *((*Ë
mem_block
[
A_ARGUMENT_INDEX
].
block


2322 + 
func_ödex_m≠
[
i
]);

2323 
	gp
 +
Æign
(
num_func
 * ());

2325 
	g¥og
->
	g¨gumít_ty≥s
 = 0;

2326 
	g¥og
->
	gty≥_°¨t
 = 0;

2329 
	g¥og
->
	g˛as£s
 = (
˛ass_def_t
 *)
p
;

2330 
	g¥og
->
	gnum_˛as£s
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 /

2331  (
˛ass_def_t
);

2332 
c›y_ö
(
A_CLASS_DEF
, &
p
);

2334 
	g¥og
->
	g˛ass_membîs
 = (
˛ass_membî_íåy_t
 *)
p
;

2335 
c›y_ö
(
A_CLASS_MEMBER
, &
p
);

2337 
	g¥og
->
	g°rögs
 = (**)
p
;

2338 
	g¥og
->
	gnum_°rögs
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 /

2340 
c›y_ö
(
A_STRINGS
, &
p
);

2342 
	g¥og
->
	gnum_v¨übÀs_deföed
 = 
mem_block
[
A_VAR_NAME
].
cuºít_size
 /

2344 
	g¥og
->
	gnum_v¨übÀs_tŸÆ
 = 
mem_block
[
A_VAR_TEMP
].
cuºít_size
 /

2345  (
v¨übÀ_t
);

2347 
	g¥og
->
	gv¨übÀ_èbÀ
 = (**)
p
;

2348 
c›y_ö
(
A_VAR_NAME
, &
p
);

2349 
	g¥og
->
	gv¨übÀ_ty≥s
 = (*)
p
;

2350 
c›y_ö
(
A_VAR_TYPE
, &
p
);

2352 
	g¥og
->
	gnum_öhîôed
 = 
mem_block
[
A_INHERITS
].
cuºít_size
 /

2353  (
öhîô_t
);

2354 i‡(
	g¥og
->
	gnum_öhîôed
) {

2355 
	g¥og
->
	göhîô
 = (
öhîô_t
 *)
p
;

2356 
c›y_ö
(
A_INHERITS
, &
p
);

2358 
	g¥og
->
	göhîô
 = 0;

2360 #ifde‡
DEBUG


2361 i‡(
	gp
 - (*)
	g¥og
 !
size
) {

2362 
Ârötf
(
°dîr
, "Progøm sizêmisˇlcuœãd f‹ /%s.\n", 
¥og
->
«me
);

2363 
Ârötf
(
°dîr
, "is: %i,Éx≥˘ed: %i\n", 
p
-(*)
¥og
, (Ë
size
);

2366 #ifde‡
BINARIES


2367 i‡((
	g¥agmas
 & 
	gPRAGMA_SAVE_BINARY
)

2368 #ifde‡
LPC_TO_C


2369 || 
	gcompûe_to_c


2372 
ßve_bö¨y
(
¥og
, &
mem_block
[
A_INCLUDES
], &mem_block[
A_PATCH
]);

2376 
sw≠_löe_numbîs
(
¥og
);

2378 
	gi
 = 0; i < 
	gmem_block
[
A_FUNCTION_DEFS
].
	gcuºít_size
 / (*
	gfundeÂ
); i++) {

2379 
	gfundeÂ
 = 
FUNCTION_TEMP
(
i
)->
√xt
;

2380 
	gfundeÂ
) {

2381 
	g√xtdeÂ
 = 
fundeÂ
->
√xt
;

2382 
FREE
((*Ë
fundeÂ
);

2383 
	gfundeÂ
 = 
√xtdeÂ
;

2387 
	gi
=0; i<
	gNUMAREAS
; i++)

2388 
FREE
((*)
mem_block
[
i
].
block
);

2389 i‡(
	gcomp_def_ödex_m≠
Ë
FREE
((*Ë
comp_def_ödex_m≠
);

2390 i‡(
	gfunc_ödex_m≠
Ë
FREE
((*Ë
func_ödex_m≠
);

2397 
ª„ªn˚_¥og
 (
¥og
, "epilog");

2398 
	gi
 = 0; ()ò< 
	g¥og
->
	gnum_öhîôed
; i++) {

2399 
ª„ªn˚_¥og
 (
¥og
->
öhîô
[
i
].prog, "inheritance");

2401 
ªÀa£_åì
();

2402 
unöôülize_∑r£r
();

2403 
s¸©ch_de°roy
();

2404 
˛ón_up_loˇls
();

2405 
‰ì_unu£d_idítifõrs
();

2406 
íd_√w_fûe
();

2408  
	g¥og
;

2414 
¥ﬁog
 
	$P2
(, 
f
, *, 
«me
) {

2415 
i
;

2417 
fun˘i⁄_c⁄ãxt
.
num_∑ømëîs
 = -1;

2418 
num_∑r£_îr‹
 = 0;

2419 
globÆ_modifõrs
 = 0;

2420 
v¨_deföed
 = 0;

2425 
i
=0; i < 
NUMAREAS
; i++) {

2426 
mem_block
[
i
].
block
 = 
	`DXALLOC
(
START_BLOCK_SIZE
, 
TAG_COMPILER
, "prolog: 2");

2427 
mem_block
[
i
].
cuºít_size
 = 0;

2428 
mem_block
[
i
].
max_size
 = 
START_BLOCK_SIZE
;

2430 
i
 = 0; i < 
NUMTREES
; i++) {

2431 
comp_åìs
[
i
] = 0;

2433 
¥og_Êags
 = 0;

2434 
func_ödex_m≠
 = 0;

2435 
comp_def_ödex_m≠
 = 0;

2437 
	`mem£t
(
°rög_ègs
, 0, (string_tags));

2438 
‰ìd_°rög
 = -1;

2439 
	`öôülize_∑r£r
();

2441 
cuºít_fûe
 = 
	`make_sh¨ed_°rög
(
«me
);

2442 
cuºít_fûe_id
 = 
	`add_¥ogøm_fûe
(
«me
, 1);

2448 i‡(
simul_efun_ob
 && *simul_efun_ob->
«me
)

2449 
	`c›y_°ru˘uªs
(
simul_efun_ob
->
¥og
);

2451 
	`°¨t_√w_fûe
(
f
);

2452 
	}
}

2457 
	$˛ón_∑r£r
() {

2458 
i
, 
n
;

2459 
fun˘i⁄_t
 *
fu≈
;

2460 
compûî_ãmp_t
 *
fundeÂ
, *
√xtdeÂ
;

2465 
i
 = 0; i < 
mem_block
[
A_FUNCTIONS
].
cuºít_size
 / (
fun˘i⁄_t
); i++) {

2466 
fu≈
 = 
	`FUNC
(
i
);

2467 i‡(
fu≈
->
«me
Ë
	`‰ì_°rög
(funp->name);

2470 
i
 = 0; i < 
mem_block
[
A_FUNCTION_DEFS
].
cuºít_size
 /

2471 (
compûî_ãmp_t
); 
i
++) {

2472 
fundeÂ
 = 
	`FUNCTION_TEMP
(
i
)->
√xt
;

2473 
fundeÂ
) {

2474 
√xtdeÂ
 = 
fundeÂ
->
√xt
;

2475 
	`FREE
((*Ë
fundeÂ
);

2476 
fundeÂ
 = 
√xtdeÂ
;

2480 
n
 = 
mem_block
[
A_STRINGS
].
cuºít_size
 / (*);

2481 
i
 = 0; i < 
n
; i++) {

2482 
	`‰ì_°rög
(*((**)
mem_block
[
A_STRINGS
].
block
 + 
i
));

2484 
n
 = 
mem_block
[
A_VAR_NAME
].
cuºít_size
 / (*);

2485 
i
 = 0; i < 
n
; i++) {

2486 
	`‰ì_°rög
(*((**)
mem_block
[
A_VAR_NAME
].
block
 + 
i
));

2489 
¥og
 = 0;

2490 
i
=0; i<
NUMAREAS
; i++)

2491 
	`FREE
(
mem_block
[
i
].
block
);

2492 i‡(
comp_def_ödex_m≠
Ë
	`FREE
((*) comp_def_index_map);

2493 i‡(
func_ödex_m≠
Ë
	`FREE
((*) func_index_map);

2494 i‡(
¥og_Êags
Ë
	`FREE
((*)Örog_flags);

2497 
	`ªÀa£_åì
();

2498 
	`unöôülize_∑r£r
();

2499 
	`˛ón_up_loˇls
();

2500 
	`s¸©ch_de°roy
();

2501 
	`‰ì_unu£d_idítifõrs
();

2502 
	}
}

2505 
the_fûe_«me
 
	$P1
(*, 
«me
)

2507 *
tmp
;

2508 
Àn
;

2510 
Àn
 = 
	`°æí
(
«me
);

2511 i‡(
Àn
 < 3) {

2512  
	`°rög_c›y
(
«me
, "the_file_name");

2514 
tmp
 = 
	`√w_°rög
(
Àn
 - 1, "the_file_name");

2515 i‡(!
tmp
) {

2516  
	`°rög_c›y
(
«me
, "the_file_name");

2518 
tmp
[0] = '/';

2519 
	`°∫˝y
(
tmp
 + 1, 
«me
, 
Àn
 - 2);

2520 
tmp
[
Àn
 - 1] = '\0';

2521  
tmp
;

2522 
	}
}

2524 
ˇ£_com∑ª
 
	$P2
(
∑r£_node_t
 **, 
c1
,Ö¨£_node_à**, 
c2
) {

2525 i‡((*
c1
)->
köd
 =
NODE_DEFAULT
)

2527 i‡((*
c2
)->
köd
 =
NODE_DEFAULT
)

2530 i‡((*
c1
)->
r
.
numbî
 > (*
c2
)->r.number)  1;

2531 i‡((*
c1
)->
r
.
numbî
 < (*
c2
)->r.number)  -1;

2533 
	}
}

2535 
°rög_ˇ£_com∑ª
 
	$P2
(
∑r£_node_t
 **, 
c1
,Ö¨£_node_à**, 
c2
) {

2536 
i1
, 
i2
;

2537 *
p1
, *
p2
;

2539 i‡((*
c1
)->
köd
 =
NODE_DEFAULT
)

2541 i‡((*
c2
)->
köd
 =
NODE_DEFAULT
)

2544 
i1
 = (*
c1
)->
r
.
numbî
;

2545 
i2
 = (*
c2
)->
r
.
numbî
;

2546 
p1
 = (
i1
 ? 
	`PROG_STRING
(i1) : 0);

2547 
p2
 = (
i2
 ? 
	`PROG_STRING
(i2) : 0);

2549  (
p1
 - 
p2
);

2550 
	}
}

2552 
¥ï¨e_ˇ£s
 
	$P2
(
∑r£_node_t
 *, 
≤
, , 
°¨t
) {

2553 
∑r£_node_t
 **
˚_°¨t
, **
˚_íd
, **
˚
;

2554 
íd
, 
œ°_key
, 
this_key
;

2555 
dúe˘
 = 1;

2557 
˚_°¨t
 = (
∑r£_node_t
 **)&
mem_block
[
A_CASES
].
block
[
°¨t
];

2558 
íd
 = 
mem_block
[
A_CASES
].
cuºít_size
;

2559 
˚_íd
 = (
∑r£_node_t
 **)&
mem_block
[
A_CASES
].
block
[
íd
];

2561 i‡(
˚_°¨t
 =
˚_íd
) {

2563 
≤
->
v
.
ex¥
 = 0;

2564 
mem_block
[
A_CASES
].
cuºít_size
 = 
°¨t
;

2568 i‡(
≤
->
köd
 =
NODE_SWITCH_STRINGS
)

2569 
	`quickS‹t
((*)
˚_°¨t
, 
˚_íd
 - ce_°¨t, (
∑r£_node_t
 *),

2570 
°rög_ˇ£_com∑ª
);

2572 
	`quickS‹t
((*)
˚_°¨t
, 
˚_íd
 - ce_°¨t, (
∑r£_node_t
 *),

2573 
ˇ£_com∑ª
);

2575 
˚
 = 
˚_°¨t
;

2576 i‡((*
˚
)->
köd
 =
NODE_DEFAULT
) {

2577 i‡(
˚
 + 1 =
˚_íd
) {

2579 
≤
->
v
.
ex¥
 = *
˚
;

2580 (*
˚
)->
l
.
ex¥
 = 0;

2581 
mem_block
[
A_CASES
].
cuºít_size
 = 
°¨t
;

2584 
˚
++;

2585 (*(
˚
-1))->
l
.
ex¥
 = *ce;

2587 i‡((*
˚
)->
v
.
ex¥
) {

2588 
œ°_key
 = (*
˚
)->
v
.
ex¥
->
r
.
numbî
;

2589 
dúe˘
 = 0;

2591 
œ°_key
 = (*
˚
)->
r
.
numbî
;

2592 
˚
++;

2593 
˚
 < 
˚_íd
) {

2594 
this_key
 = (*
˚
)->
r
.
numbî
;

2595 i‡(
≤
->
köd
 =
NODE_SWITCH_RANGES
 && 
this_key
 <
œ°_key
) {

2596 
buf
[1024];

2597 *
íd
 = 
	`EndOf
(
buf
);

2598 *
p
;

2599 *
f1
, *
f2
;

2600 
fi1
, 
fi2
;

2601 
l1
, 
l2
;

2604 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

2605 
cuºít_löe_ßved
 = 
cuºít_löe
;

2607 
	`å™¶©e_absﬁuã_löe
((*
˚
)->
löe
,

2608 (*)
mem_block
[
A_FILE_INFO
].
block
,

2609 &
fi1
, &
l1
);

2610 
	`å™¶©e_absﬁuã_löe
((*(
˚
-1))->
löe
,

2611 (*)
mem_block
[
A_FILE_INFO
].
block
,

2612 &
fi2
, &
l2
);

2613 
f1
 = 
	`PROG_STRING
(
fi1
 - 1);

2614 
f2
 = 
	`PROG_STRING
(
fi2
 - 1);

2616 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Overlapping cases: ");

2617 i‡(
f1
) {

2618 
p
 = 
	`°Ωut
’, 
íd
, 
f1
);

2619 
p
 = 
	`°Ωut
’, 
íd
, ":");

2621 
p
 = 
	`°Ωut
’, 
íd
, "line ");

2622 
p
 = 
	`°Ωut_öt
’, 
íd
, 
l1
);

2623 
p
 = 
	`°Ωut
’, 
íd
, "ánd ");

2624 i‡(
f2
) {

2625 
p
 = 
	`°Ωut
’, 
íd
, 
f2
);

2626 
p
 = 
	`°Ωut
’, 
íd
, ":");

2628 
p
 = 
	`°Ωut
’, 
íd
, "line ");

2629 
p
 = 
	`°Ωut_öt
’, 
íd
, 
l2
);

2630 
p
 = 
	`°Ωut
’, 
íd
, ".");

2631 
	`yyîr‹
(
buf
);

2633 (*(
˚
-1))->
l
.
ex¥
 = *ce;

2634 i‡((*
˚
)->
v
.
ex¥
) {

2635 
œ°_key
 = (*
˚
)->
v
.
ex¥
->
r
.
numbî
;

2636 
dúe˘
 = 0;

2638 i‡(
œ°_key
 + 1 !
this_key
Ë
dúe˘
 = 0;

2639 
œ°_key
 = 
this_key
;

2641 
˚
++;

2643 (*(
˚_íd
-1))->
l
.
ex¥
 = 0;

2644 i‡(
dúe˘
 && 
≤
->
köd
 =
NODE_SWITCH_NUMBERS
)

2645 
≤
->
köd
 = 
NODE_SWITCH_DIRECT
;

2646 
≤
->
v
.
ex¥
 = *(
˚_°¨t
);

2647 
mem_block
[
A_CASES
].
cuºít_size
 = 
°¨t
;

2648 
	}
}

2651 
ßve_fûe_öfo
 
	$P2
(, 
fûe_id
, , 
löes
) {

2652 
fi
[2];

2654 
fi
[0] = 
löes
;

2655 
fi
[1] = 
fûe_id
;

2656 
	`add_to_mem_block
(
A_FILE_INFO
, (*)&
fi
[0], (fi));

2657 
	}
}

2660 
add_¥ogøm_fûe
 
	$P2
(*, 
«me
, , 
t›
) {

2661 i‡(!
t›
)

2662 
	`add_to_mem_block
(
A_INCLUDES
, 
«me
, 
	`°æí
(name)+1);

2663  
	`°‹e_¥og_°rög
(
«me
) + 1;

2664 
	}
}

	@compiler.h

1 #i‚de‡
COMPILER_H


2 
	#COMPILER_H


	)

4 
	~"åìs.h
"

5 
	~"Àx.h
"

6 
	~"¥ogøm.h
"

8 
	#_YACC_


	)

10 
	#YYMAXDEPTH
 600

	)

19 *
	mblock
;

20 
	mcuºít_size
;

21 
	mmax_size
;

22 } 
	tmem_block_t
;

24 
	#START_BLOCK_SIZE
 4096

	)

29 
	#A_PROGRAM
 0

	)

30 
	#A_FUNCTIONS
 1

	)

31 
	#A_STRINGS
 2

	)

32 
	#A_VAR_NAME
 3

	)

33 
	#A_VAR_TYPE
 4

	)

34 
	#A_LINENUMBERS
 5

	)

35 
	#A_FILE_INFO
 6

	)

36 
	#A_INHERITS
 7

	)

37 
	#A_CLASS_DEF
 8

	)

38 
	#A_CLASS_MEMBER
 9

	)

39 
	#A_ARGUMENT_TYPES
 10

	)

40 
	#A_ARGUMENT_INDEX
 11

	)

41 
	#NUMPAREAS
 12

	)

42 
	#A_CASES
 13

	)

43 
	#A_STRING_NEXT
 14

	)

44 
	#A_STRING_REFS
 15

	)

45 
	#A_INCLUDES
 16

	)

46 
	#A_PATCH
 17

	)

47 
	#A_FUNCTIONALS
 18

	)

48 
	#A_FUNCTION_DEFS
 19

	)

49 
	#A_VAR_TEMP
 20

	)

50 
	#NUMAREAS
 22

	)

52 
	#TREE_MAIN
 0

	)

53 
	#TREE_INIT
 1

	)

54 
	#NUMTREES
 2

	)

56 
	#CURRENT_PROGRAM_SIZE
 (
¥og_code
 - 
mem_block
[
A_PROGRAM
].
block
)

	)

57 
	#UPDATE_PROGRAM_SIZE
 
mem_block
[
A_PROGRAM
].
cuºít_size
 = 
CURRENT_PROGRAM_SIZE


	)

65 
	#TYPE_UNKNOWN
 0

	)

66 
	#TYPE_ANY
 1

	)

67 
	#TYPE_NOVALUE
 2

	)

68 
	#TYPE_VOID
 3

	)

69 
	#TYPE_NUMBER
 4

	)

70 
	#TYPE_STRING
 5

	)

71 
	#TYPE_OBJECT
 6

	)

72 
	#TYPE_MAPPING
 7

	)

73 
	#TYPE_FUNCTION
 8

	)

74 
	#TYPE_REAL
 9

	)

75 
	#TYPE_BUFFER
 10

	)

76 
	#TYPE_MASK
 0xf

	)

79 
	mru¡ime_ödex
;

80 
idít_hash_ñem_t
 *
	mihe
;

81 } 
	tloˇl_öfo_t
;

83 
mem_block_t
 
mem_block
[
NUMAREAS
];

84 *
compûî_ty≥_«mes
[];

86 
	#LOOP_CONTEXT
 0x1

	)

87 
	#SWITCH_CONTEXT
 0x2

	)

88 
	#SWITCH_STRINGS
 0x4

	)

89 
	#SWITCH_NUMBERS
 0x8

	)

90 
	#SWITCH_DEFAULT
 0x10

	)

91 
	#SWITCH_RANGES
 0x20

	)

92 
	#LOOP_FOREACH
 0x40

	)

93 
	#SPECIAL_CONTEXT
 0x80

	)

94 
	#ARG_LIST
 0x100

	)

96 
	sfun˘i⁄_c⁄ãxt_s
 {

97 
∑r£_node_t
 *
	mvÆues_li°
;

98 
	mbödabÀ
;

99 
	mnum_∑ømëîs
;

100 
	mnum_loˇls
;

101 
fun˘i⁄_c⁄ãxt_s
 *
	m∑ª¡
;

102 } 
	tfun˘i⁄_c⁄ãxt_t
;

104 
fun˘i⁄_c⁄ãxt_t
 *
cuºít_fun˘i⁄_c⁄ãxt
;

105 
v¨_deföed
;

106 
∑r£_node_t
 *
comp_åìs
[
NUMTREES
];

107 *
comp_def_ödex_m≠
;

108 *
func_ödex_m≠
;

110 
	scompûî_ãmp_t
 {

111 
	mÊags
;

112 
	moff£t
;

113 
	mfun˘i⁄_ödex_off£t
;

114 
¥ogøm_s
 *
	m¥og
;

116 
fun˘i⁄_t
 *
	mfunc
;

117 
	mödex
;

118 } 
	mu
;

119 
compûî_ãmp_t
 *
	m√xt
;

120 } 
	tcompûî_ãmp_t
;

126 
	#IS_CLASS
(
t
Ë(— & (
TYPE_MOD_ARRAY
 | 
TYPE_MOD_CLASS
)Ë=TYPE_MOD_CLASS)

	)

127 
	#CLASS_IDX
(
t
Ë— & ~(
DECL_MODS
 | 
TYPE_MOD_CLASS
))

	)

129 
	#COMP_TYPE
(
e
, 
t
Ë(!” & (
TYPE_MOD_ARRAY
 | 
TYPE_MOD_CLASS
)) \

130 && (
com∑tibÀ
[()(
e
 & ~
DECL_MODS
)] & (1 << (
t
))))

	)

131 
	#IS_TYPE
(
e
, 
t
Ë(!” & (
TYPE_MOD_ARRAY
 | 
TYPE_MOD_CLASS
)) \

132 && (
is_ty≥
[()(
e
 & ~
DECL_MODS
)] & (1 << (
t
))))

	)

134 
	#FUNCTION_TEMP
(
n
Ë((
compûî_ãmp_t
 *)
mem_block
[
A_FUNCTION_DEFS
].
block
 + (n))

	)

135 
	#FUNCTION_NEXT
(
n
Ë(
	`FUNCTION_TEMP
“)->
√xt
)

	)

137 
	#FUNC
(
n
Ë((
fun˘i⁄_t
 *)
mem_block
[
A_FUNCTIONS
].
block
 + (n))

	)

139 
	#FUNCTION_PROG
(
n
Ë(
	`FUNCTION_TEMP
“)->
¥og
)

	)

140 
	#FUNCTION_ALIAS
(
n
Ë(
	`FUNCTION_TEMP
“)->
Æüs_f‹
)

	)

142 
	#FUNCTION_DEF
(
n
Ë(
	`FUNCTION_PROG
“Ë? 
	`FUNCTION_TEMP
“)->
u
.
func
 : 
	`FUNC
(FUNCTION_TEMP“)->u.
ödex
))

	)

144 
	#FUNCTION_FLAGS
(
n
Ë(
	`FUNCTION_TEMP
“)->
Êags
)

	)

146 
	#NUM_INHERITS
 (
mem_block
[
A_INHERITS
].
cuºít_size
 / (
öhîô_t
))

	)

148 
	#INHERIT
(
n
Ë((
öhîô_t
 *)
mem_block
[
A_INHERITS
].
block
 + (n))

	)

149 
	#VAR_TEMP
(
n
Ë((
v¨übÀ_t
 *)
mem_block
[
A_VAR_TEMP
].
block
 + (n))

	)

150 
	#SIMUL
(
n
Ë(
simuls
[n].
func
)

	)

151 
	#PROG_STRING
(
n
Ë(((**)
mem_block
[
A_STRINGS
].
block
)[n])

	)

152 
	#CLASS
(
n
Ë((
˛ass_def_t
 *)
mem_block
[
A_CLASS_DEF
].
block
 + (n))

	)

154 #i‡!
deföed
(
__Æpha
Ë&& !deföed(
¸ay
)

155 
	#Æign
(
x
Ë(((xË+ 3Ë& ~3)

	)

157 
	#Æign
(
x
Ë(((xË+ 7Ë& ~7)

	)

160 
	#SOME_NUMERIC_CASE_LABELS
 0x40000

	)

161 
	#NO_STRING_CASE_LABELS
 0x80000

	)

163 
	#ARG_IS_PROTO
 1

	)

164 
	#ARG_IS_VARARGS
 2

	)

166 
	#NOVALUE_USED_FLAG
 1024

	)

168 
vÆid©e_fun˘i⁄_ˇŒ
 
PROT
((, 
∑r£_node_t
 *));

169 
∑r£_node_t
 *
vÆid©e_efun_ˇŒ
 
PROT
((,Öarse_node_t *));

170 
mem_block_t
 
mem_block
[];

171 
exa˘_ty≥s
, 
globÆ_modifõrs
;

172 
cuºít_ty≥
;

173 *
¥og_code
;

174 *
¥og_code_max
;

175 
¥ogøm_t
 
NULL_¥ogøm
;

176 
°rög_ègs
[0x20];

177 
‰ìd_°rög
;

178 
loˇl_öfo_t
 *
loˇls
, *
loˇls_±r
;

179 *
ty≥_of_loˇls
, *
ty≥_of_loˇls_±r
;

180 
cuºít_numbî_of_loˇls
;

181 
max_num_loˇls
;

182 
cuºít_åì
;

184 
ty≥_of_loˇls_size
;

185 
loˇls_size
;

186 
cuºít_numbî_of_loˇls
;

187 
max_num_loˇls
;

188 
com∑tibÀ
[11];

189 
is_ty≥
[11];

190 
comp_œ°_öhîôed
;

192 *
gë_ty≥_modifõrs
 
PROT
((*, *, ));

193 *
gë_two_ty≥s
 
PROT
((*, *, , ));

194 *
gë_ty≥_«me
 
PROT
((*, *, ));

195 
öô_loˇls
 
PROT
(());

197 
ßve_fûe_öfo
 
PROT
((, ));

198 
add_¥ogøm_fûe
 
PROT
((*, ));

199 
yyîr‹
 
PROT
((*));

200 
yyw¨n
 
PROT
((*));

201 
swôch_to_block
 
PROT
(());

202 *
the_fûe_«me
 
PROT
((*));

203 
‰ì_Æl_loˇl_«mes
 
PROT
(());

204 
p›_n_loˇls
 
PROT
(());

205 
ªa˘iv©e_cuºít_loˇls
 
PROT
(());

206 
˛ón_up_loˇls
 
PROT
(());

207 
dó˘iv©e_cuºít_loˇls
 
PROT
(());

208 
add_loˇl_«me
 
PROT
((*, ));

209 
ªÆloˇã_loˇls
 
PROT
(());

210 
öôülize_loˇls
 
PROT
(());

211 
gë_id_numbî
 
PROT
(());

212 
¥ogøm_t
 *
compûe_fûe
 
PROT
((, *));

213 
ª£t_fun˘i⁄_blocks
 
PROT
(());

214 
c›y_v¨übÀs
 
PROT
((
¥ogøm_t
 *, ));

215 
c›y_°ru˘uªs
 
PROT
((
¥ogøm_t
 *));

216 
c›y_fun˘i⁄s
 
PROT
((
¥ogøm_t
 *, ));

217 
ty≥_îr‹
 
PROT
((*, ));

218 
com∑tibÀ_ty≥s
 
PROT
((, ));

219 
com∑tibÀ_ty≥s2
 
PROT
((, ));

220 
¨ønge_ˇŒ_öhîôed
 
PROT
((*, 
∑r£_node_t
 *));

221 
add_¨g_ty≥
 
PROT
(());

222 
deföe_√w_fun˘i⁄
 
PROT
((*, , , , ));

223 
deföe_v¨übÀ
 
PROT
((*, ));

224 
deföe_√w_v¨übÀ
 
PROT
((*, ));

225 
°‹e_¥og_°rög
 
PROT
((*));

226 
‰ì_¥og_°rög
 
PROT
(());

227 #ifde‡
DEBUG


228 
dump_fun˘i⁄_èbÀ
 
PROT
(());

230 
¥ï¨e_ˇ£s
 
PROT
((
∑r£_node_t
 *, ));

231 
push_func_block
 
PROT
(());

232 
p›_func_block
 
PROT
(());

233 
de˛_fix
 
PROT
(());

234 
∑r£_node_t
 *
check_ªfs
 
PROT
((,Öarse_node_t *,Öarse_node_t *));

236 
lookup_™y_˛ass_membî
 
PROT
((*, *));

237 
lookup_˛ass_membî
 
PROT
((, *, *));

238 
∑r£_node_t
 *
ª‹dî_˛ass_vÆues
 
PROT
((,Öarse_node_t *));

240 
∑r£_node_t
 *
¥omŸe_to_Êﬂt
 
PROT
((parse_node_t *));

241 
∑r£_node_t
 *
¥omŸe_to_öt
 
PROT
((parse_node_t *));

242 
∑r£_node_t
 *
do_¥omŸi⁄s
 
PROT
((parse_node_t *, ));

243 
∑r£_node_t
 *
throw_away_ˇŒ
 
PROT
((parse_node_t *));

244 
∑r£_node_t
 *
throw_away_m≠pög
 
PROT
((parse_node_t *));

246 
	#ªÆloc_mem_block
(
m
) do { \

247 
mem_block_t
 *
M
 = 
m
; \

248 
M
->
max_size
 <<= 1; \

249 
M
->
block
 = 
	`DREALLOC
(M->block, M->
max_size
, 
TAG_COMPILER
, "realloc_mem_block"); \

250 } 0)

	)

252 
	#add_to_mem_block
(
n
, 
d©a
, 
size
) do { \

253 
mem_block_t
 *
mbp
 = &
mem_block
[
n
]; \

254 
Size
 = 
size
; \

256 i‡(
mbp
->
cuºít_size
 + 
Size
 > mbp->
max_size
) { \

258 
mbp
->
max_size
 <<= 1; \

259 } 
mbp
->
cuºít_size
 + 
Size
 > mbp->
max_size
); \

261 
mbp
->
block
 = 
	`DREALLOC
(mbp->block, mbp->
max_size
, 
TAG_COMPILER
, "insert_in_mem_block"); \

263 
	`mem˝y
(
mbp
->
block
 + mbp->
cuºít_size
, 
d©a
, 
Size
); \

264 
mbp
->
cuºít_size
 +
Size
; \

265 } 0)

	)

267 #i‚de‡
SUPPRESS_COMPILER_INLINES


268 
INLINE_STATIC


269 *
Æloˇã_ö_mem_block
 
	$P2
(, 
n
, , 
size
)

271 
mem_block_t
 *
mbp
 = &
mem_block
[
n
];

272 *
ªt
;

274 i‡(
mbp
->
cuºít_size
 + 
size
 > mbp->
max_size
) {

276 
mbp
->
max_size
 <<= 1;

277 } 
mbp
->
cuºít_size
 + 
size
 > mbp->
max_size
);

279 
mbp
->
block
 = 
	`DREALLOC
(mbp->block, mbp->
max_size
, 
TAG_COMPILER
, "insert_in_mem_block");

281 
ªt
 = 
mbp
->
block
 + mbp->
cuºít_size
;

282 
mbp
->
cuºít_size
 +
size
;

283  
ªt
;

284 
	}
}

	@comptest.c

1 
	$maö
(Ë{ 
	}
}

	@comptest.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

68 #i‚de‡
YY_NULLPTR


69 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

70 
	#YY_NULLPTR
 
nuŒ±r


	)

72 
	#YY_NULLPTR
 0

	)

77 #ifde‡
YYERROR_VERBOSE


78 #unde‡
YYERROR_VERBOSE


79 
	#YYERROR_VERBOSE
 1

	)

81 
	#YYERROR_VERBOSE
 0

	)

86 #i‚de‡
YYDEBUG


87 
	#YYDEBUG
 0

	)

89 #i‡
YYDEBUG


90 
yydebug
;

94 #i‚de‡
YYTOKENTYPE


95 
	#YYTOKENTYPE


	)

96 
	eyytokíty≥


98 
	mFOO
 = 258

103 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


104 
	tYYSTYPE
;

105 
	#YYSTYPE_IS_TRIVIAL
 1

	)

106 
	#YYSTYPE_IS_DECLARED
 1

	)

110 
YYSTYPE
 
yylvÆ
;

112 
yy∑r£
 ();

124 #ifde‡
YYTYPE_UINT8


125 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

127 
	tyyty≥_uöt8
;

130 #ifde‡
YYTYPE_INT8


131 
YYTYPE_INT8
 
	tyyty≥_öt8
;

133 sig√d 
	tyyty≥_öt8
;

136 #ifde‡
YYTYPE_UINT16


137 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

139 
	tyyty≥_uöt16
;

142 #ifde‡
YYTYPE_INT16


143 
YYTYPE_INT16
 
	tyyty≥_öt16
;

145 
	tyyty≥_öt16
;

148 #i‚de‡
YYSIZE_T


149 #ifde‡
__SIZE_TYPE__


150 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

151 #ñi‡
deföed
 
size_t


152 
	#YYSIZE_T
 
size_t


	)

153 #ñi‡! 
deföed
 
YYSIZE_T


154 
	~<°ddef.h
>

155 
	#YYSIZE_T
 
size_t


	)

157 
	#YYSIZE_T
 

	)

161 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

163 #i‚de‡
YY_


164 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

165 #i‡
ENABLE_NLS


166 
	~<liböé.h
>

167 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

170 #i‚de‡
YY_


171 
	#YY_
(
Msgid
Ë
	)
Msgid

175 #i‚de‡
YY_ATTRIBUTE


176 #i‡(
deföed
 
__GNUC__
 \

177 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

178 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

179 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

181 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

185 #i‚de‡
YY_ATTRIBUTE_PURE


186 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

189 #i‚de‡
YY_ATTRIBUTE_UNUSED


190 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

193 #i‡!
deföed
 
_N‹ëu∫
 \

194 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

195 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

196 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

198 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

203 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


204 
	#YYUSE
(
E
Ë((Ë(E))

	)

206 
	#YYUSE
(
E
Ë

	)

209 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


211 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

212 
	`_Pøgma
 ("GCC diagnosticÖush") \

213 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

214 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

215 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

216 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

218 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

220 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


221 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

222 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

224 #i‚de‡
YY_INITIAL_VALUE


225 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

229 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


233 #ifde‡
YYSTACK_USE_ALLOCA


234 #i‡
YYSTACK_USE_ALLOCA


235 #ifde‡
__GNUC__


236 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

237 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


238 
	~<Æloˇ.h
>

239 #ñi‡
deföed
 
_AIX


240 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

241 #ñi‡
deföed
 
_MSC_VER


242 
	~<mÆloc.h
>

243 
	#Æloˇ
 
_Æloˇ


	)

245 
	#YYSTACK_ALLOC
 
Æloˇ


	)

246 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


247 
	~<°dlib.h
>

249 #i‚de‡
EXIT_SUCCESS


250 
	#EXIT_SUCCESS
 0

	)

257 #ifde‡
YYSTACK_ALLOC


259 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

260 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


265 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

268 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

269 
	#YYSTACK_FREE
 
YYFREE


	)

270 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


271 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

273 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

274 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

275 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

276 
	~<°dlib.h
>

277 #i‚de‡
EXIT_SUCCESS


278 
	#EXIT_SUCCESS
 0

	)

281 #i‚de‡
YYMALLOC


282 
	#YYMALLOC
 
mÆloc


	)

283 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


284 *
mÆloc
 (
YYSIZE_T
);

287 #i‚de‡
YYFREE


288 
	#YYFREE
 
‰ì


	)

289 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


290 
‰ì
 (*);

297 #i‡(! 
deföed
 
yyovîÊow
 \

298 && (! 
deföed
 
	g__˝lu•lus
 \

299 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

302 
	uyyÆloc


304 
yyty≥_öt16
 
	myyss_Æloc
;

305 
YYSTYPE
 
	myyvs_Æloc
;

309 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

313 
	#YYSTACK_BYTES
(
N
) \

314 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

315 + 
YYSTACK_GAP_MAXIMUM
)

	)

317 
	#YYCOPY_NEEDED
 1

	)

324 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

327 
YYSIZE_T
 
yy√wbyãs
; \

328 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

329 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

330 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

331 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

333 0)

	)

337 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

340 #i‚de‡
YYCOPY


341 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

342 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

343 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

345 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

348 
YYSIZE_T
 
yyi
; \

349 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

350 (
D°
)[
yyi
] = (
Src
)[yyi]; \

352 0)

	)

358 
	#YYFINAL
 3

	)

360 
	#YYLAST
 1

	)

363 
	#YYNTOKENS
 4

	)

365 
	#YYNNTS
 2

	)

367 
	#YYNRULES
 2

	)

369 
	#YYNSTATES
 4

	)

373 
	#YYUNDEFTOK
 2

	)

374 
	#YYMAXUTOK
 258

	)

376 
	#YYTRANSLATE
(
YYX
) \

377 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

381 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

411 #i‡
YYDEBUG


413 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

419 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

422 c⁄° *c⁄° 
	gyyäame
[] =

424 "$íd", "îr‹", "$undeföed", "FOO", "$ac˚±", "Æl", 
YY_NULLPTR


428 #ifde‡
YYPRINT


431 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

437 
	#YYPACT_NINF
 -4

	)

439 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

440 (!!((
Yy°©e
Ë=(-4)))

	)

442 
	#YYTABLE_NINF
 -1

	)

444 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

445 0

	)

449 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

457 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

463 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

469 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

477 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

482 c⁄° 
yyty≥_uöt8
 
	gyycheck
[] =

489 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

495 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

501 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

507 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

508 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

509 
	#YYEMPTY
 (-2)

	)

510 
	#YYEOF
 0

	)

512 
	#YYACCEPT
 
yyac˚±œb


	)

513 
	#YYABORT
 
yyab‹éab


	)

514 
	#YYERROR
 
yyîr‹œb


	)

517 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

519 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

521 i‡(
yych¨
 =
YYEMPTY
) \

523 
yych¨
 = (
Tokí
); \

524 
yylvÆ
 = (
VÆue
); \

525 
	`YYPOPSTACK
 (
yyÀn
); \

526 
yy°©e
 = *
yys•
; \

527 
yybackup
; \

531 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

532 
YYERROR
; \

534 0)

	)

537 
	#YYTERROR
 1

	)

538 
	#YYERRCODE
 256

	)

543 #i‡
YYDEBUG


545 #i‚de‡
YYFPRINTF


546 
	~<°dio.h
>

547 
	#YYFPRINTF
 
Ârötf


	)

550 
	#YYDPRINTF
(
Args
) \

552 i‡(
yydebug
) \

553 
YYFPRINTF
 
Args
; \

554 } 0)

	)

557 #i‚de‡
YY_LOCATION_PRINT


558 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

562 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

564 i‡(
yydebug
) \

566 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

567 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

568 
Ty≥
, 
VÆue
); \

569 
	`YYFPRINTF
 (
°dîr
, "\n"); \

571 } 0)

	)

579 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

581 
FILE
 *
yyo
 = 
yyouçut
;

582 
	`YYUSE
 (
yyo
);

583 i‡(!
yyvÆuï
)

585 #ifde‡
YYPRINT


586 i‡(
yyty≥
 < 
YYNTOKENS
)

587 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

589 
	`YYUSE
 (
yyty≥
);

590 
	}
}

598 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

600 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

601 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

603 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

604 
	`YYFPRINTF
 (
yyouçut
, ")");

605 
	}
}

613 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

615 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

616 ; 
yybŸtom
 <
yyt›
; yybottom++)

618 
yybŸ
 = *
yybŸtom
;

619 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

621 
	`YYFPRINTF
 (
°dîr
, "\n");

622 
	}
}

624 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

626 i‡(
yydebug
) \

627 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

628 } 0)

	)

636 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

638 
yy o
 = 
yyæöe
[
yyruÀ
];

639 
yyƒhs
 = 
yyr2
[
yyruÀ
];

640 
yyi
;

641 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

642 
yyruÀ
 - 1, 
yy o
);

644 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

646 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

647 
	`yy_symbﬁ_¥öt
 (
°dîr
,

648 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

649 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

651 
	`YYFPRINTF
 (
°dîr
, "\n");

653 
	}
}

655 
	#YY_REDUCE_PRINT
(
RuÀ
) \

657 i‡(
yydebug
) \

658 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

659 } 0)

	)

663 
	gyydebug
;

665 
	#YYDPRINTF
(
Args
)

	)

666 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

667 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

668 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

673 #i‚de‡
YYINITDEPTH


674 
	#YYINITDEPTH
 200

	)

684 #i‚de‡
YYMAXDEPTH


685 
	#YYMAXDEPTH
 10000

	)

689 #i‡
YYERROR_VERBOSE


691 #i‚de‡
yy°æí


692 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


693 
	#yy°æí
 
°æí


	)

696 
YYSIZE_T


697 
	$yy°æí
 (c⁄° *
yy°r
)

699 
YYSIZE_T
 
yyÀn
;

700 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

702  
yyÀn
;

703 
	}
}

707 #i‚de‡
yy°p˝y


708 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


709 
	#yy°p˝y
 
°p˝y


	)

714 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

716 *
yyd
 = 
yyde°
;

717 c⁄° *
yys
 = 
yy§c
;

719 (*
yyd
++ = *
yys
++) != '\0')

722  
yyd
 - 1;

723 
	}
}

727 #i‚de‡
yyäamîr


735 
YYSIZE_T


736 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

738 i‡(*
yy°r
 == '"')

740 
YYSIZE_T
 
yyn
 = 0;

741 c⁄° *
yyp
 = 
yy°r
;

744 *++
yyp
)

748 
do_nŸ_°rù_quŸes
;

751 i‡(*++
yyp
 != '\\')

752 
do_nŸ_°rù_quŸes
;

755 i‡(
yyªs
)

756 
yyªs
[
yyn
] = *
yyp
;

757 
yyn
++;

761 i‡(
yyªs
)

762 
yyªs
[
yyn
] = '\0';

763  
yyn
;

765 
do_nŸ_°rù_quŸes
: ;

768 i‡(! 
yyªs
)

769  
	`yy°æí
 (
yy°r
);

771  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

772 
	}
}

784 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

785 
yyty≥_öt16
 *
yys•
, 
yytokí
)

787 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

788 
YYSIZE_T
 
yysize
 = 
yysize0
;

789 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

791 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

793 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

796 
yycou¡
 = 0;

821 i‡(
yytokí
 !
YYEMPTY
)

823 
yyn
 = 
yy∑˘
[*
yys•
];

824 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

825 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

830 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

832 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

833 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

834 
yyx
;

836 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

837 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


838 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

840 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

842 
yycou¡
 = 1;

843 
yysize
 = 
yysize0
;

846 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

848 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

849 i‡(! (
yysize
 <
yysize1


850 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

852 
yysize
 = 
yysize1
;

858 
yycou¡
)

860 
	#YYCASE_
(
N
, 
S
) \

861 
N
: \

862 
yyf‹m©
 = 
S
; \

863 

	)

864 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

865 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

866 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

867 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

868 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

869 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

870 #unde‡
YYCASE_


874 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

875 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

877 
yysize
 = 
yysize1
;

880 i‡(*
yymsg_Æloc
 < 
yysize
)

882 *
yymsg_Æloc
 = 2 * 
yysize
;

883 i‡(! (
yysize
 <*
yymsg_Æloc


884 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

885 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

893 *
yyp
 = *
yymsg
;

894 
yyi
 = 0;

895 (*
yyp
 = *
yyf‹m©
) != '\0')

896 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

898 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

899 
yyf‹m©
 += 2;

903 
yyp
++;

904 
yyf‹m©
++;

908 
	}
}

916 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

918 
	`YYUSE
 (
yyvÆuï
);

919 i‡(!
yymsg
)

920 
yymsg
 = "Deleting";

921 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

923 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


924 
	`YYUSE
 (
yyty≥
);

925 
YY_IGNORE_MAYBE_UNINITIALIZED_END


926 
	}
}

932 
	gyych¨
;

935 
YYSTYPE
 
	gyylvÆ
;

937 
	gyy√ºs
;

945 
	$yy∑r£
 ()

947 
yy°©e
;

949 
yyîr°©us
;

959 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

960 
yyty≥_öt16
 *
yyss
;

961 
yyty≥_öt16
 *
yys•
;

964 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

965 
YYSTYPE
 *
yyvs
;

966 
YYSTYPE
 *
yyv•
;

968 
YYSIZE_T
 
yy°acksize
;

970 
yyn
;

971 
yyªsu…
;

973 
yytokí
 = 0;

976 
YYSTYPE
 
yyvÆ
;

978 #i‡
YYERROR_VERBOSE


980 
yymsgbuf
[128];

981 *
yymsg
 = 
yymsgbuf
;

982 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

985 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

989 
yyÀn
 = 0;

991 
yys•
 = 
yyss
 = 
yysß
;

992 
yyv•
 = 
yyvs
 = 
yyvß
;

993 
yy°acksize
 = 
YYINITDEPTH
;

995 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

997 
yy°©e
 = 0;

998 
yyîr°©us
 = 0;

999 
yy√ºs
 = 0;

1000 
yych¨
 = 
YYEMPTY
;

1001 
yy£t°©e
;

1006 
yy√w°©e
:

1009 
yys•
++;

1011 
yy£t°©e
:

1012 *
yys•
 = 
yy°©e
;

1014 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1017 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1019 #ifde‡
yyovîÊow


1024 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1025 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1031 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1032 &
yyss1
, 
yysize
 *  (*
yys•
),

1033 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1034 &
yy°acksize
);

1036 
yyss
 = 
yyss1
;

1037 
yyvs
 = 
yyvs1
;

1040 #i‚de‡
YYSTACK_RELOCATE


1041 
yyexhau°edœb
;

1044 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1045 
yyexhau°edœb
;

1046 
yy°acksize
 *= 2;

1047 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1048 
yy°acksize
 = 
YYMAXDEPTH
;

1051 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1052 
yyÆloc
 *
yy±r
 =

1053 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1054 i‡(! 
yy±r
)

1055 
yyexhau°edœb
;

1056 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1057 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1058 #unde‡
YYSTACK_RELOCATE


1059 i‡(
yyss1
 !
yysß
)

1060 
	`YYSTACK_FREE
 (
yyss1
);

1065 
yys•
 = 
yyss
 + 
yysize
 - 1;

1066 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1068 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1069 (Ë
yy°acksize
));

1071 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1072 
YYABORT
;

1075 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1077 i‡(
yy°©e
 =
YYFINAL
)

1078 
YYACCEPT
;

1080 
yybackup
;

1085 
yybackup
:

1091 
yyn
 = 
yy∑˘
[
yy°©e
];

1092 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1093 
yydeÁu…
;

1098 i‡(
yych¨
 =
YYEMPTY
)

1100 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1101 
yych¨
 = 
	`yyÀx
 ();

1104 i‡(
yych¨
 <
YYEOF
)

1106 
yych¨
 = 
yytokí
 = 
YYEOF
;

1107 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1111 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1112 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1117 
yyn
 +
yytokí
;

1118 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1119 
yydeÁu…
;

1120 
yyn
 = 
yyèbÀ
[yyn];

1121 i‡(
yyn
 <= 0)

1123 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1124 
yyîæab
;

1125 
yyn
 = -yyn;

1126 
yyªdu˚
;

1131 i‡(
yyîr°©us
)

1132 
yyîr°©us
--;

1135 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1138 
yych¨
 = 
YYEMPTY
;

1140 
yy°©e
 = 
yyn
;

1141 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1142 *++
yyv•
 = 
yylvÆ
;

1143 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1145 
yy√w°©e
;

1151 
yydeÁu…
:

1152 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1153 i‡(
yyn
 == 0)

1154 
yyîæab
;

1155 
yyªdu˚
;

1161 
yyªdu˚
:

1163 
yyÀn
 = 
yyr2
[
yyn
];

1173 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1176 
	`YY_REDUCE_PRINT
 (
yyn
);

1177 
yyn
)

1194 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1196 
	`YYPOPSTACK
 (
yyÀn
);

1197 
yyÀn
 = 0;

1198 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1200 *++
yyv•
 = 
yyvÆ
;

1206 
yyn
 = 
yyr1
[yyn];

1208 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1209 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1210 
yy°©e
 = 
yyèbÀ
[yystate];

1212 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1214 
yy√w°©e
;

1220 
yyîæab
:

1223 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1226 i‡(!
yyîr°©us
)

1228 ++
yy√ºs
;

1229 #i‡! 
YYERROR_VERBOSE


1230 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1232 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1233 
yys•
, 
yytokí
)

	)

1235 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1236 
yysy¡ax_îr‹_°©us
;

1237 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1238 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1239 
yymsgp
 = 
yymsg
;

1240 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1242 i‡(
yymsg
 !
yymsgbuf
)

1243 
	`YYSTACK_FREE
 (
yymsg
);

1244 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1245 i‡(!
yymsg
)

1247 
yymsg
 = 
yymsgbuf
;

1248 
yymsg_Æloc
 =  
yymsgbuf
;

1249 
yysy¡ax_îr‹_°©us
 = 2;

1253 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1254 
yymsgp
 = 
yymsg
;

1257 
	`yyîr‹
 (
yymsgp
);

1258 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1259 
yyexhau°edœb
;

1261 #unde‡
YYSYNTAX_ERROR


1267 i‡(
yyîr°©us
 == 3)

1272 i‡(
yych¨
 <
YYEOF
)

1275 i‡(
yych¨
 =
YYEOF
)

1276 
YYABORT
;

1280 
	`yyde°ru˘
 ("Error: discarding",

1281 
yytokí
, &
yylvÆ
);

1282 
yych¨
 = 
YYEMPTY
;

1288 
yyîæab1
;

1294 
yyîr‹œb
:

1300 
yyîr‹œb
;

1304 
	`YYPOPSTACK
 (
yyÀn
);

1305 
yyÀn
 = 0;

1306 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1307 
yy°©e
 = *
yys•
;

1308 
yyîæab1
;

1314 
yyîæab1
:

1315 
yyîr°©us
 = 3;

1319 
yyn
 = 
yy∑˘
[
yy°©e
];

1320 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1322 
yyn
 +
YYTERROR
;

1323 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1325 
yyn
 = 
yyèbÀ
[yyn];

1326 i‡(0 < 
yyn
)

1332 i‡(
yys•
 =
yyss
)

1333 
YYABORT
;

1336 
	`yyde°ru˘
 ("Error:Öopping",

1337 
yy°os
[
yy°©e
], 
yyv•
);

1338 
	`YYPOPSTACK
 (1);

1339 
yy°©e
 = *
yys•
;

1340 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1343 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1344 *++
yyv•
 = 
yylvÆ
;

1345 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1349 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1351 
yy°©e
 = 
yyn
;

1352 
yy√w°©e
;

1358 
yyac˚±œb
:

1359 
yyªsu…
 = 0;

1360 
yyªtu∫
;

1365 
yyab‹éab
:

1366 
yyªsu…
 = 1;

1367 
yyªtu∫
;

1369 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1373 
yyexhau°edœb
:

1374 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1375 
yyªsu…
 = 2;

1379 
yyªtu∫
:

1380 i‡(
yych¨
 !
YYEMPTY
)

1384 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1385 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1386 
yytokí
, &
yylvÆ
);

1390 
	`YYPOPSTACK
 (
yyÀn
);

1391 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1392 
yys•
 !
yyss
)

1394 
	`yyde°ru˘
 ("Cleanup:Öopping",

1395 
yy°os
[*
yys•
], 
yyv•
);

1396 
	`YYPOPSTACK
 (1);

1398 #i‚de‡
yyovîÊow


1399 i‡(
yyss
 !
yysß
)

1400 
	`YYSTACK_FREE
 (
yyss
);

1402 #i‡
YYERROR_VERBOSE


1403 i‡(
yymsg
 !
yymsgbuf
)

1404 
	`YYSTACK_FREE
 (
yymsg
);

1406  
yyªsu…
;

1407 
	}
}

	@comptest.y

1 %
tokí
 
FOO


2 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

3 
Æl
: 
FOO


	@config.h

6 #i‚de‡
_CONFIG_H_


7 
	#_CONFIG_H_


	)

9 
	~"ö˛ude/ru¡ime_c⁄fig.h
"

16 
	#CONFIG_STR
(
x
Ë
c⁄fig_°r
[(xË- 
BASE_CONFIG_STR
]

	)

17 
	#CONFIG_INT
(
x
Ë
c⁄fig_öt
[(xË- 
BASE_CONFIG_INT
]

	)

19 
	#MUD_NAME
 
	`CONFIG_STR
(
__MUD_NAME__
)

	)

20 
	#ADDR_SERVER_IP
 
	`CONFIG_STR
(
__ADDR_SERVER_IP__
)

	)

21 
	#MUD_LIB
 
	`CONFIG_STR
(
__MUD_LIB_DIR__
)

	)

22 
	#BIN_DIR
 
	`CONFIG_STR
(
__BIN_DIR__
)

	)

23 
	#LOG_DIR
 
	`CONFIG_STR
(
__LOG_DIR__
)

	)

24 
	#INCLUDE_DIRS
 
	`CONFIG_STR
(
__INCLUDE_DIRS__
)

	)

25 
	#SAVE_BINARIES
 
	`CONFIG_STR
(
__SAVE_BINARIES_DIR__
)

	)

26 
	#MASTER_FILE
 
	`CONFIG_STR
(
__MASTER_FILE__
)

	)

27 
	#SIMUL_EFUN
 
	`CONFIG_STR
(
__SIMUL_EFUN_FILE__
)

	)

28 
	#SWAP_FILE
 
	`CONFIG_STR
(
__SWAP_FILE__
)

	)

29 
	#DEBUG_LOG_FILE
 
	`CONFIG_STR
(
__DEBUG_LOG_FILE__
)

	)

30 
	#DEFAULT_ERROR_MESSAGE
 
	`CONFIG_STR
(
__DEFAULT_ERROR_MESSAGE__
)

	)

31 
	#DEFAULT_FAIL_MESSAGE
 
	`CONFIG_STR
(
__DEFAULT_FAIL_MESSAGE__
)

	)

32 
	#GLOBAL_INCLUDE_FILE
 
	`CONFIG_STR
(
__GLOBAL_INCLUDE_FILE__
)

	)

33 
	#MUD_IP
 
	`CONFIG_STR
(
__MUD_IP__
)

	)

39 
	#PORTNO
 
	`CONFIG_INT
(
__MUD_PORT__
)

	)

40 
	#ADDR_SERVER_PORT
 
	`CONFIG_INT
(
__ADDR_SERVER_PORT__
)

	)

41 
	#TIME_TO_CLEAN_UP
 
	`CONFIG_INT
(
__TIME_TO_CLEAN_UP__
)

	)

42 
	#TIME_TO_RESET
 
	`CONFIG_INT
(
__TIME_TO_RESET__
)

	)

43 
	#TIME_TO_SWAP
 
	`CONFIG_INT
(
__TIME_TO_SWAP__
)

	)

44 
	#MAX_COST
 
	`CONFIG_INT
(
__MAX_EVAL_COST__
)

	)

45 
	#MAX_BITS
 
	`CONFIG_INT
(
__MAX_BITFIELD_BITS__
)

	)

46 
	#MAX_ARRAY_SIZE
 
	`CONFIG_INT
(
__MAX_ARRAY_SIZE__
)

	)

47 
	#MAX_BUFFER_SIZE
 
	`CONFIG_INT
(
__MAX_BUFFER_SIZE__
)

	)

48 
	#MAX_MAPPING_SIZE
 
	`CONFIG_INT
(
__MAX_MAPPING_SIZE__
)

	)

49 
	#MAX_STRING_LENGTH
 
	`CONFIG_INT
(
__MAX_STRING_LENGTH__
)

	)

50 
	#READ_FILE_MAX_SIZE
 
	`CONFIG_INT
(
__MAX_READ_FILE_SIZE__
)

	)

51 
	#MAX_BYTE_TRANSFER
 
	`CONFIG_INT
(
__MAX_BYTE_TRANSFER__
)

	)

52 
	#RESERVED_SIZE
 
	`CONFIG_INT
(
__RESERVED_MEM_SIZE__
)

	)

53 
	#HTABLE_SIZE
 
	`CONFIG_INT
(
__SHARED_STRING_HASH_TABLE_SIZE__
)

	)

54 
	#OTABLE_SIZE
 
	`CONFIG_INT
(
__OBJECT_HASH_TABLE_SIZE__
)

	)

55 
	#INHERIT_CHAIN_SIZE
 
	`CONFIG_INT
(
__INHERIT_CHAIN_SIZE__
)

	)

56 
	#FD6_PORT
 
	`CONFIG_INT
(
__FD6_PORT__
)

	)

57 
	#FD6_KIND
 
	`CONFIG_INT
(
__FD6_KIND__
)

	)

59 #ifde‡
USE_POSIX_SIGNALS


60 
	#sigblock
(
m
Ë
	`p‹t_sigblock
(m)

	)

61 
	#sigmask
(
s
Ë
	`p‹t_sigmask
(s)

	)

62 
	#sig«l
(
s
,
f
Ë
	`p‹t_sig«l
(s,f)

	)

63 
	#sig£tmask
(
m
Ë
	`p‹t_sig£tmask
(m)

	)

66 
	#SETJMP
(
x
Ë
	`£tjmp
(x)

	)

67 
	#LONGJMP
(
x
,
y
Ë
	`l⁄gjmp
(x,y)

	)

69 #i‚de‡
HAS_UALARM


70 
	#SYSV_HEARTBEAT_INTERVAL
 ((
HEARTBEAT_INTERVAL
+999999)/1000000)

	)

73 
	#APPLY_CACHE_SIZE
 (1 << 
APPLY_CACHE_BITS
)

	)

75 
	#NUM_CONSTS
 5

	)

77 
	#NULL_MSG
 "0"

	)

79 
c⁄fig_öt
[
NUM_CONFIG_INTS
];

80 *
c⁄fig_°r
[
NUM_CONFIG_STRS
];

	@configure.h

1 
	#INCL_STDLIB_H


	)

2 
	#INCL_UNISTD_H


	)

3 
	#INCL_TIME_H


	)

4 
	#USE_TZSET


	)

5 
	#INCL_SYS_TIMES_H


	)

6 
	#INCL_FCNTL_H


	)

7 
	#INCL_SYS_TIME_H


	)

8 
	#INCL_LIMITS_H


	)

9 
	#INCL_LOCALE_H


	)

10 
	#INCL_NETINET_IN_H


	)

11 
	#INCL_ARPA_INET_H


	)

12 
	#INCL_SYS_TYPES_H


	)

13 
	#INCL_SYS_IOCTL_H


	)

14 
	#INCL_SYS_SOCKET_H


	)

15 
	#INCL_NETDB_H


	)

16 
	#INCL_ARPA_TELNET_H


	)

17 
	#INCL_SYS_SOCKETVAR_H


	)

18 
	#INCL_SYS_STAT_H


	)

19 
	#INCL_DIRENT_H


	)

20 
	#USE_STRUCT_DIRENT


	)

21 
	#INCL_SYS_RESOURCE_H


	)

22 
	#INCL_SYS_WAIT_H


	)

23 
	#INCL_CRYPT_H


	)

24 
	#INCL_SYS_SYSMACROS_H


	)

25 
	#INCL_STDARG_H


	)

26 
	#INCL_DLFCN_H


	)

27 
	#DRAND48


	)

28 
	#USE_BSD_SIGNALS


	)

29 
	#SIGNAL_ERROR
 
SIG_ERR


	)

30 
	#INLINE
 
ölöe


	)

31 
	#CONST
 c⁄°

	)

32 
	#HAS_UALARM


	)

33 
	#HAS_STRERROR


	)

34 
	#HAS_GETCWD


	)

35 
	#RUSAGE


	)

36 
	#TIMES


	)

37 
	#HAS_GETTIMEOFDAY


	)

38 
	#HAS_FCHMOD


	)

39 
	#SIZEOF_INT
 4

	)

40 
	#SIZEOF_PTR
 8

	)

41 
	#SIZEOF_SHORT
 2

	)

42 
	#SIZEOF_FLOAT
 4

	)

43 
	#UINT32
 

	)

44 
	#CONFIGURE_VERSION
 5

	)

	@crc32.c

1 
	~"°d.h
"

2 
	~"¸c32.h
"

3 
	#NEED_CRC_TABLE


	)

4 
	~"¸˘ab.h
"

13 
UINT32


14 
compuã_¸c32
 
	$P2
(*, 
buf
, , 
Àn
)

16 
UINT32
 
¸c
 = 0xFFFFFFFFL;

17 
j
;

19 
j
 = 
Àn
;

20 
j
--) {

22 
¸c
 = 
	`UPDC32
((Ë*
buf
++, crc);

24  
¸c
;

25 
	}
}

	@crc32.h

1 #i‚de‡
CRC32_H


2 
	#CRC32_H


	)

7 
UINT32
 
compuã_¸c32
 
PROT
((*, ));

	@crctab.h

7 
	g¸˘ab
[256] =

56 
	#upd¸c
(
˝
, 
¸c
Ë–
¸˘ab
[((¸¯>> 8Ë& 255)] ^ (¸¯<< 8Ë^ cp)

	)

95 #ifde‡
NEED_CRC_TABLE


96 
	g¸3èb
[] =

165 #ifde‡
NFGM


166 
	$UPDC32
(
b
, 
c
)

167 
c
;

169  (
¸3èb
[((Ë
c
 ^ 
b
) & 0xff] ^ ((c >> 8) & 0x00FFFFFF));

170 
	}
}

173 
	#UPDC32
(
b
, 
c
Ë(
¸3èb
[(()¯^ bË& 0xff] ^ ((¯>> 8Ë& 0x00FFFFFF))

	)

	@crypt.c

44 
	~"°d.h
"

45 
	~"p‹t.h
"

46 
	~"¸y±.h
"

48 #ifde‡
CUSTOM_CRYPT


50 #i‚de‡
mö


51 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

66 #ifde‡
BIGENDIAN


67 
	#MIRROR
(
l
)

	)

69 
	#MIRROR
(
l
Ë–÷Ë–(÷Ë<< 24Ë| ((÷Ë& 0x0000ff00Ë<< 8Ë| ((÷Ë& 0x00ff0000Ë>> 8Ë| (÷Ë>> 24ËË)

	)

74 
	#F
(
X
, 
Y
, 
Z
Ë(((X)&(Y))|((~(X))&(Z)))

	)

75 
	#G
(
X
, 
Y
, 
Z
Ë(((X)&(Z))|((~(Z))&(Y)))

	)

76 
	#H
(
X
, 
Y
, 
Z
Ë((X)^(Y)^(Z))

	)

77 
	#I
(
X
, 
Y
, 
Z
Ë((Y)^((X)|(~(Z))))

	)

80 
	#RLEFT
(
a
, 
n
Ë◊Ë((◊Ë<< (n)Ë| (◊Ë>> (32-“))))

	)

85 
UINT32
 
	gT
[64] = {

100 
	$MD5Dige°
–
CONST
 
byã
 *
buf
,

101 
UINT32
 
buÊí
,

102 
byã
 *
Dige°


106 
	#OA
 0x67452301

	)

107 
	#OB
 0xefcdab89

	)

108 
	#OC
 0x98badc„

	)

109 
	#OD
 0x10325476

	)

111 
UINT32
 
A
 = 
OA
, 
B
 = 
OB
, 
C
 = 
OC
, 
D
 = 
OD
;

112 
UINT32
 
Block
[16];

114 if(
buÊí
 > 
MD5_MAXLEN
)  0;

117 
	`mem£t
(
Block
, 0, (Block));

118 
	`mem˝y
(
Block
, 
buf
, 
buÊí
);

119 { 
i
; ò0; i <
buÊí
/4; i++Ë{ 
	`MIRROR
(
Block
[i]); } }

120 
Block
[
buÊí
>>2] |= 0x00000080 << (8 * (buflen % 4));

121 
Block
[14] = 
buÊí
 << 3;

124 
	#Tr
(
a
, 
b
, 
c
, 
d
, 
k
, 
s
, 
i
, 
x
Ë◊Ë+
	`x
(b,c,dË+ 
Block
[k] + 
T
[(i)-1]; 
	`RLEFT
◊, s); (aË+(b);

	)

127 
	`Tr
(
A
,
B
,
C
,
D
, 0, 7, 1,
F
); Tr(D,A,B,C, 1,12, 2,F); Tr(C,D,A,B, 2,17, 3,F); Tr(B,C,D,A, 3,22, 4,F);

128 
	`Tr
(
A
,
B
,
C
,
D
, 4, 7, 5,
F
); Tr(D,A,B,C, 5,12, 6,F); Tr(C,D,A,B, 6,17, 7,F); Tr(B,C,D,A, 7,22, 8,F);

129 
	`Tr
(
A
,
B
,
C
,
D
, 8, 7, 9,
F
); Tr(D,A,B,C, 9,12,10,F); Tr(C,D,A,B,10,17,11,F); Tr(B,C,D,A,11,22,12,F);

130 
	`Tr
(
A
,
B
,
C
,
D
,12, 7,13,
F
); Tr(D,A,B,C,13,12,14,F); Tr(C,D,A,B,14,17,15,F); Tr(B,C,D,A,15,22,16,F);

133 
	`Tr
(
A
,
B
,
C
,
D
, 1, 5,17,
G
); Tr(D,A,B,C, 6, 9,18,G); Tr(C,D,A,B,11,14,19,G); Tr(B,C,D,A, 0,20,20,G);

134 
	`Tr
(
A
,
B
,
C
,
D
, 5, 5,21,
G
); Tr(D,A,B,C,10, 9,22,G); Tr(C,D,A,B,15,14,23,G); Tr(B,C,D,A, 4,20,24,G);

135 
	`Tr
(
A
,
B
,
C
,
D
, 9, 5,25,
G
); Tr(D,A,B,C,14, 9,26,G); Tr(C,D,A,B, 3,14,27,G); Tr(B,C,D,A, 8,20,28,G);

136 
	`Tr
(
A
,
B
,
C
,
D
,13, 5,29,
G
); Tr(D,A,B,C, 2, 9,30,G); Tr(C,D,A,B, 7,14,31,G); Tr(B,C,D,A,12,20,32,G);

139 
	`Tr
(
A
,
B
,
C
,
D
, 5, 4,33,
H
); Tr(D,A,B,C, 8,11,34,H); Tr(C,D,A,B,11,16,35,H); Tr(B,C,D,A,14,23,36,H);

140 
	`Tr
(
A
,
B
,
C
,
D
, 1, 4,37,
H
); Tr(D,A,B,C, 4,11,38,H); Tr(C,D,A,B, 7,16,39,H); Tr(B,C,D,A,10,23,40,H);

141 
	`Tr
(
A
,
B
,
C
,
D
,13, 4,41,
H
); Tr(D,A,B,C, 0,11,42,H); Tr(C,D,A,B, 3,16,43,H); Tr(B,C,D,A, 6,23,44,H);

142 
	`Tr
(
A
,
B
,
C
,
D
, 9, 4,45,
H
); Tr(D,A,B,C,12,11,46,H); Tr(C,D,A,B,15,16,47,H); Tr(B,C,D,A, 2,23,48,H);

145 
	`Tr
(
A
,
B
,
C
,
D
, 0, 6,49,
I
); Tr(D,A,B,C, 7,10,50,I); Tr(C,D,A,B,14,15,51,I); Tr(B,C,D,A, 5,21,52,I);

146 
	`Tr
(
A
,
B
,
C
,
D
,12, 6,53,
I
); Tr(D,A,B,C, 3,10,54,I); Tr(C,D,A,B,10,15,55,I); Tr(B,C,D,A, 1,21,56,I);

147 
	`Tr
(
A
,
B
,
C
,
D
, 8, 6,57,
I
); Tr(D,A,B,C,15,10,58,I); Tr(C,D,A,B, 6,15,59,I); Tr(B,C,D,A,13,21,60,I);

148 
	`Tr
(
A
,
B
,
C
,
D
, 4, 6,61,
I
); Tr(D,A,B,C,11,10,62,I); Tr(C,D,A,B, 2,15,63,I); Tr(B,C,D,A, 9,21,64,I);

151 
A
 +
OA
; 
B
 +
OB
; 
C
 +
OC
; 
D
 +
OD
;

154 
	`MIRROR
(
A
); 
	`mem˝y
–
Dige°
, &A, (A));

155 
	`MIRROR
(
B
); 
	`mem˝y
(&(
Dige°
[ 4]), &B, (B));

156 
	`MIRROR
(
C
); 
	`mem˝y
(&(
Dige°
[ 8]), &C, (C));

157 
	`MIRROR
(
D
); 
	`mem˝y
(&(
Dige°
[12]), &D, (D));

160 
A
 = 
B
 = 
C
 = 
D
 = 195952365;

164 
	}
}

177 
	$ícode
(
byã
 *
whîe
, 
CONST
 byã *
d©a
, 
öputbyãs
)

179 
i
, 
w
 = 0;

182 
	#ENCODER_OFFSET
 96

	)

184 
i
 = 0; i < 
öputbyãs
; i++) {

185 
whîe
[
i
*2] = 
ENCODER_OFFSET
 + ( 
d©a
[i] & 0x0f);

186 
whîe
[1+(
i
*2)] = 
ENCODER_OFFSET
 + ((
d©a
[i] >> 4) & 0x0f);

187 
w
 += 2;

190  
w
;

191 
	}
}

194 
	$decode
(
byã
 *
whîe
, 
CONST
 byã *
°rög
, 
°rögbyãs
)

196 
i
;

198 
i
 = 0; i < 
°rögbyãs
; i+=2)

199 
whîe
[
i
/2] = (
°rög
[i] & 0x0f) | ((string[i+1] & 0x0f) << 4);

200 
	}
}

205 
	$gëß…
(
byã
 *
to
, 
CONST
 byã *
‰om
)

207 
i
;

212 
	#MAGIC_SALTSEP
 '!'

	)

214 if(
‰om
) {

215 
byã
 
Dige°
[16];

217 if(
	`°æí
((*)
‰om
Ë> 
MD5_SALTLEN
 * 2) {

218 if(
‰om
[2 * 
MD5_SALTLEN
] =
MAGIC_SALTSEP
) {

227 
	`decode
(
to
, 
‰om
, 
MD5_SALTLEN
 * 2);

244 
	`cu°om_¸y±
((*Ë
‰om
, 
MD5_VALID_SALT
, 
Dige°
);

245 
	`mem£t
(
to
, 
	`°æí
((*)
‰om
), 
MD5_SALTLEN
);

246 
i
 = 0; i < (
Dige°
); i++)

247 
to
[
i
 % 
MD5_SALTLEN
] +
Dige°
[i];

253 
i
 = 0; i < 
MD5_SALTLEN
; i++)

254 
to
[
i
] = 
	`øndom_numbî
(256);

257 
	}
}

259 
	$¸unchbuf„r
(
byã
 *
buf
,

260 
SIGNED
 *
Àn
,

261 *
addôi⁄
,

262 
SIGNED
 
addÀn
,

263 
maxÀn


266 
u£d
;

268 
u£d
 = *
Àn
;

270 
addÀn
 > 0) {

271 
byã
 
Dige°
[16];

272 
¸unched
;

275 if(
u£d
 > (
Dige°
)) {

276 
	`MD5Dige°
(
buf
, 
u£d
, 
Dige°
);

277 
	`mem˝y
(
buf
, 
Dige°
, (Digest));

278 
u£d
 = (
Dige°
);

282 
¸unched
 = 
	`mö
((
maxÀn
 - 
u£d
), 
addÀn
);

283 
	`mem˝y
(&(
buf
[
u£d
]), 
addôi⁄
, 
¸unched
);

286 
u£d
 +
¸unched
;

287 
addôi⁄
 +
¸unched
;

288 
addÀn
 -
¸unched
;

291 *
Àn
 = 
u£d
;

294 
	}
}

310 *
	$cu°om_¸y±
(
CONST
 *
key
, CONST *
ß…
, 
byã
 *
øwout
)

312 
byã
 
Dige°
[16];

313 
byã
 
buf„r
[
MD5_MAXLEN
],

314 
abuf„r
[
MD5_MAXLEN
],

315 
theß…
[
MD5_SALTLEN
];

316 
SIGNED
 
u£d
 = 0, 
Àn
, 
i
;

317 
byã


320 
ªt
[(
MD5_SALTLEN
*2Ë+ 1 + ((
Dige°
)*2) + 1];

325 
	`gëß…
(
theß…
, (
byã
 *)
ß…
);

327 
	#ADDBUFFER
(
b
, 
l
Ëif(
u£d
 + (lË> (
buf„r
)) \

328 
	`¸unchbuf„r
(
buf„r
, &
u£d
, (*)(
b
), (
l
), (buffer)); \

329 { 
	`mem˝y
(&(
buf„r
[
u£d
]), (
b
), (
l
)); \

330 
u£d
 +(
l
); }

	)

332 
	`mem£t
(
buf„r
, 0, (buffer));

335 
Àn
 = 
	`°æí
(
key
Ë+ 1; 
	`ADDBUFFER
(key,Üen);

336 
Àn
 = 
	`°æí
(
MD5_MAGIC
Ë+ 1; 
	`ADDBUFFER
(MD5_MAGIC,Üen);

338 
	`ADDBUFFER
(
theß…
, (thesalt));

340 
	`mem˝y
(
abuf„r
, 
buf„r
, (abuffer));

353 
Àn
 = 
	`°æí
(
key
);

354 
i
 = 3000+(11*
Àn
); i > 0; i--) {

355 if(!
	`MD5Dige°
(
abuf„r
, ◊buf„r), 
Dige°
)Ë 
NULL
;

356 
	`mem˝y
(&(
abuf„r
[(
i
 + 
Àn
Ë% (
MD5_MAXLEN
 - (
Dige°
))]), Digest, (Digest));

359 
	`ADDBUFFER
(
Dige°
, (Digest));

362 if(!
	`MD5Dige°
(
buf„r
, (buf„r), 
Dige°
)Ë 
NULL
;

365 
	`mem£t
(
buf„r
, 0, (buffer));

368 
Àn
 = 
	`ícode
(
ªt
, 
theß…
, (thesalt));

369 
ªt
[
Àn
++] = 
MAGIC_SALTSEP
;

370 
Àn
 +
	`ícode
(&(
ªt
[Àn]), 
Dige°
, (Digest));

371 
ªt
[
Àn
] = 0;

374 if(
øwout
)

375 
	`mem˝y
(
øwout
, 
Dige°
, (Digest));

377  (*)
ªt
;

378 
	}
}

	@crypt.h

1 #i‚de‡
CRYPT_H


2 
	#CRYPT_H


	)

8 
	#MD5_SALTLEN
 4

	)

11 
	#MD5_MAGIC
 "xyzz"

	)

16 
	#MD5_MAXLEN
 55

	)

24 
	#MD5_VALID_SALT
 "™hlklck!ggddl`l`lg`bjblodlf˛jd˙hffib`c"

	)

26 
	tbyã
;

28 *
cu°om_¸y±
(
CONST
 *
key
, CONST *
ß…
, 
byã
 *
øwout
);

	@debug.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

4 #ifde‡
DEBUG_MACRO


6 
m≠pög_t
 *
debug_Àvñs
 
PROT
(());

9 *
	m«me
;

10 
	mbô
;

11 } 
	tdebug_t
;

13 
	#E
(
x
Ë{ #x, 
DBG_
##x }

	)

15 
debug_t
 
	gÀvñs
[] = {

16 
E
(
ˇŒ_out
),

17 
E
(
d_Êag
),

18 
E
(
c⁄√˘i⁄s
),

19 
E
(
m≠pög
),

20 
E
(
sockës
),

21 
E
(
comp_func_èb
),

22 
E
(
LPC
),

23 
E
(
LPC_löe
)

26 
	#NELEM
(
x
Ë((x)/(x[0]))

	)

28 
m≠pög_t
 *
	$debug_Àvñs
() {

29 
dl
 = 
debug_Àvñ
;

30 
m≠pög_t
 *
ªt
 = 
	`Æloˇã_m≠pög
(10);

31 
i
;

33 
i
 = 0; i < 
	`NELEM
(
Àvñs
); i++) {

34 
	`add_m≠pög_∑ú
(
ªt
, 
Àvñs
[
i
].
«me
, 
dl
 &Üevñs[i].
bô
);

35 
dl
 &~
Àvñs
[
i
].
bô
;

38 i‡(
dl
)

39 
	`add_m≠pög_∑ú
(
ªt
, "unknown", 
dl
);

41  
ªt
;

42 
	}
}

44 
debug_Àvñ_£t
 
	$P1
(*, 
Àvñ
) {

45 
i
;

47 
i
 = 0; i < 
	`NELEM
(
Àvñs
); i++) {

48 i‡(
	`°rcmp
(
Àvñ
, 
Àvñs
[
i
].
«me
) == 0) {

49 
debug_Àvñ
 |
Àvñs
[
i
].
bô
;

53 
	}
}

55 
debug_Àvñ_˛ór
 
	$P1
(*, 
Àvñ
) {

56 
i
;

58 
i
 = 0; i < 
	`NELEM
(
Àvñs
); i++) {

59 i‡(
	`°rcmp
(
Àvñ
, 
Àvñs
[
i
].
«me
) == 0) {

60 
debug_Àvñ
 &~
Àvñs
[
i
].
bô
;

64 
	}
}

	@debug.h

19 #i‚de‡
_FUNC_SPEC_


20 
debug_Àvñ
;

22 
h™dÀ_debug_Àvñ
 
PROT
((*));

23 
debug_Àvñ_£t
 
PROT
((*));

24 
debug_Àvñ_˛ór
 
PROT
((*));

26 #ifde‡
DEBUG_MACRO


27 
	#debug
(
x
,
y
Ëi‡(
debug_Àvñ
 & 
DBG_
##xË{ 
	`¥ötf
("%s: ", #x); 
¥ötf
 y; 
	`putch¨
('\n'); 
	`fÊush
(
°dout
); }

	)

29 
	#debug
(
x
,
y
)

	)

33 
	#DBG_ˇŒ_out
 1

	)

34 
	#DBG_addr_£rvî
 2

	)

35 
	#DBG_d_Êag
 4

	)

36 
	#DBG_c⁄√˘i⁄s
 8

	)

37 
	#DBG_m≠pög
 16

	)

38 
	#DBG_sockës
 32

	)

39 
	#DBG_comp_func_èb
 64

	)

40 
	#DBG_LPC
 128

	)

41 
	#DBG_LPC_löe
 256

	)

	@debugmalloc.c

6 
	#IN_MALLOC_WRAPPER


	)

7 
	#NO_OPCODES


	)

8 
	~"°d.h
"

9 
	~"debugmÆloc.h
"

10 
	~"my_mÆloc.h
"

11 
	~"md.h
"

13 #unde‡
NOISY_MALLOC


15 #ifde‡
NOISY_MALLOC


16 
	#NOISY
(
x
Ë
	`¥ötf
(x)

	)

17 
	#NOISY1
(
x
,
y
Ë
	`¥ötf
(x,y)

	)

18 
	#NOISY2
(
x
,
y
,
z
Ë
	`¥ötf
(x,y,z)

	)

19 
	#NOISY3
(
w
,
x
,
y
,
z
Ë
	`¥ötf
(w,x,y,z)

	)

21 
	#NOISY
(
x
)

	)

22 
	#NOISY1
(
x
,
y
)

	)

23 
	#NOISY2
(
x
,
y
,
z
)

	)

24 
	#NOISY3
(
w
,
x
,
y
,
z
)

	)

27 
Áèl
 
PROT1V
(*);

29 
	s°©s_s
 {

30 
	m‰ì_ˇŒs
, 
	mÆloc_ˇŒs
, 
	mªÆloc_ˇŒs
;

31 } 
	t°©s_t
;

33 
°©s_t
 
	g°©s
;

35 
	$debugmÆloc_öô
()

37 
°©s
.
‰ì_ˇŒs
 = 0;

38 
°©s
.
Æloc_ˇŒs
 = 0;

39 
°©s
.
ªÆloc_ˇŒs
 = 0;

40 
	`MDöô
();

41 
	}
}

43 
INLINE
 *
debugªÆloc
 
	$P4
(*, 
±r
, , 
size
, , 
èg
, *, 
desc
)

45 *
tmp
;

47 i‡(
size
 <= 0)

48 
	`Áèl
("illegal size in debugrealloc()");

50 
	`NOISY3
("ªÆloc: %ò(%x), %s\n", 
size
, 
±r
, 
desc
);

51 
°©s
.
ªÆloc_ˇŒs
++;

52 
tmp
 = (
md_node_t
 *Ë
±r
 - 1;

53 i‡(
	`MD‰ì
(
tmp
)) {

54 
tmp
 = (*Ë
	`REALLOC
—mp, 
size
 + 
MD_OVERHEAD
);

55 
	`MDmÆloc
(
tmp
, 
size
, 
èg
, 
desc
);

56  (
md_node_t
 *Ë
tmp
 + 1;

59 
	}
}

61 
INLINE
 *
debugmÆloc
 
	$P3
(, 
size
, , 
èg
, *, 
desc
)

63 *
tmp
;

65 i‡(
size
 <= 0)

66 
	`Áèl
("illegal size in debugmalloc()");

67 
°©s
.
Æloc_ˇŒs
++;

68 
tmp
 = (*Ë
	`MALLOC
(
size
 + 
MD_OVERHEAD
);

69 
	`MDmÆloc
(
tmp
, 
size
, 
èg
, 
desc
);

70 
	`NOISY3
("mÆloc: %ò(%x), %s\n", 
size
, (
md_node_t
 *)
tmp
 + 1, 
desc
);

71  (
md_node_t
 *Ë
tmp
 + 1;

72 
	}
}

74 
INLINE
 *
debugˇŒoc
 
	$P4
(, 
nôems
, , 
size
, , 
èg
, *, 
desc
)

76 *
tmp
;

78 i‡(
size
 <= 0)

79 
	`Áèl
("illegal size in debugcalloc()");

81 
°©s
.
Æloc_ˇŒs
++;

82 
tmp
 = (*Ë
	`CALLOC
(
nôems
 * 
size
 + 
MD_OVERHEAD
, 1);

83 
	`MDmÆloc
(
tmp
, 
nôems
 * 
size
, 
èg
, 
desc
);

84 
	`NOISY3
("ˇŒoc: %ò(%x), %s\n", 
nôems
*
size
, (
md_node_t
 *)
tmp
 + 1, 
desc
);

85  (
md_node_t
 *Ë
tmp
 + 1;

86 
	}
}

88 
INLINE
 
debug‰ì
 
	$P1
(*, 
±r
)

90 
md_node_t
 *
tmp
;

92 
	`NOISY1
("‰ì (%x)\n", 
±r
);

93 
°©s
.
‰ì_ˇŒs
++;

94 
tmp
 = (
md_node_t
 *Ë
±r
 - 1;

95 i‡(
	`MD‰ì
(
tmp
)) {

96 
	`mem£t
(
±r
, 'x', 
tmp
->
size
);

97 
	`FREE
(
tmp
);

99 
	}
}

101 
dump_mÆloc_d©a
 
	$P1
(
outbuf„r_t
 *, 
ob
)

103 
√t
;

105 
√t
 = 
°©s
.
Æloc_ˇŒs
 - sèts.
‰ì_ˇŒs
;

106 
	`outbuf_add
(
ob
, "using debug malloc:\n\n");

107 
	`outbuf_addv
(
ob
, "tŸÆ mÆloc'd: %10lu\n", 
tŸÆ_mÆlo˚d
);

108 
	`outbuf_addv
(
ob
, "high w©î m¨k: %10lu\n", 
hiw©î
);

109 
	`outbuf_addv
(
ob
, "overhead: %10lu\n",

110 (
MD_TABLE_SIZE
 * (
md_node_t
 *)Ë+ (
√t
 * 
MD_OVERHEAD
));

111 
	`outbuf_addv
(
ob
, "#Ælo¯ˇŒs: %10lu\n", 
°©s
.
Æloc_ˇŒs
);

112 
	`outbuf_addv
(
ob
, "#‰ì cÆls: %10lu\n", 
°©s
.
‰ì_ˇŒs
);

113 
	`outbuf_addv
(
ob
, "#Ælo¯- #‰ì: %10lu\n", 
√t
);

114 
	`outbuf_addv
(
ob
, "#ªÆlo¯ˇŒs: %10lu\n", 
°©s
.
ªÆloc_ˇŒs
);

115 
	}
}

	@debugmalloc.h

1 #i‚de‡
DEBUGMALLOC_H


2 
	#DEBUGMALLOC_H


	)

3 #ifde‡
DEBUGMALLOC


4 *
debugmÆloc
 
PROT
((, , *));

5 *
debugªÆloc
 
PROT
((*, , , *));

6 *
debugˇŒoc
 
PROT
((, , , *));

7 
debug‰ì
 
PROT
((*));

9 
debugmÆloc_öô
 
PROT
(());

10 
dump_mÆloc_d©a
 
PROT
((
outbuf„r_t
 *));

12 #ifde‡
DEBUGMALLOC_EXTENSIONS


13 
£t_mÆloc_mask
 
PROT
(());

14 *
dump_debugmÆloc
 
PROT
((*, ));

18 #unde‡
DEBUGMALLOC_EXTENSIONS


19 #unde‡
CHECK_MEMORY


	@disassembler.c

5 
	~"°d.h
"

6 
	~"Õc_ö˛.h
"

7 
	~"efuns_ö˛.h
"

8 
	~"simul_efun.h
"

9 
	~"comm.h
"

10 
	~"sw≠.h
"

11 
	~"Àx.h
"

12 
	~"fûe.h
"

13 
	~"¥ogøm.h
"

15 #ifde‡
F_DUMP_PROG


16 
dump_¥og
 
PROT
((
¥ogøm_t
 *, *, ));

17 
dißs£mbÀ
 
PROT
((
FILE
 *, *, , , 
¥ogøm_t
 *));

18 *
dißs£m_°rög
 
PROT
((*));

19 
CDECL
 
sh‹t_com∑ª
 
PROT
((
CONST
 *, CONST *));

20 
dump_löe_numbîs
 
PROT
((
FILE
 *, 
¥ogøm_t
 *));

23 
f_dump_¥og
 
PROT
(())

25 
¥ogøm_t
 *
	g¥og
;

26 *
	gwhîe
;

27 
	gd
;

28 
obje˘_t
 *
	gob
;

29 
	g«rg
 = 
°_num_¨g
;

31 i‡(
	g°_num_¨g
 == 2) {

32 
ob
 = 
•
[-1].
u
.ob;

33 
	gd
 = 
•
->
u
.
numbî
;

34 
	gwhîe
 = 0;

35 } i‡(
	g°_num_¨g
 == 3) {

36 
ob
 = 
•
[-2].
u
.ob;

37 
	gd
 = 
•
[-1].
u
.
numbî
;

38 
	gwhîe
 = (
•
->
ty≥
 =
T_STRING
Ë? sp->
u
.
°rög
 : 0;

40 
	gob
 = 
•
->
u
.
ob
;

41 
	gd
 = 0;

42 
	gwhîe
 = 0;

44 i‡(!(
	g¥og
 = 
ob
->
¥og
)) {

45 
îr‹
("NoÖrogram for object.\n");

47 i‡(!
	gwhîe
) {

48 
	gwhîe
 = "/PROG_DUMP";

50 
dump_¥og
(
¥og
, 
whîe
, 
d
);

52 
p›_n_ñems
(
«rg
);

60 
dump_¥og
 
	$P3
(
¥ogøm_t
 *, 
¥og
, *, 
‚
, , 
Êags
)

62 *
‚ame
;

63 
FILE
 *
f
;

64 
i
, 
j
;

65 
num_funcs_tŸÆ
;

67 
‚ame
 = 
	`check_vÆid_∑th
(
‚
, 
cuºít_obje˘
, "dumpallobj", 1);

69 i‡(!
‚ame
) {

70 
	`îr‹
("InvÆidÖ©h '%s' f‹ wrôög.\n", 
‚
);

73 
f
 = 
	`f›í
(
‚ame
, "w");

74 i‡(!
f
) {

75 
	`îr‹
("U«bÀÅÿ›í '/%s' f‹ wrôög.\n", 
‚ame
);

78 
	`Ârötf
(
f
, "NAME: /%s\n", 
¥og
->
«me
);

79 
	`Ârötf
(
f
, "INHERITS:\n");

80 
	`Ârötf
(
f
, "\tname fio vio\n");

81 
	`Ârötf
(
f
, "\t---------------- --- ---\n");

82 
i
 = 0; i < (Ë
¥og
->
num_öhîôed
; i++)

83 
	`Ârötf
(
f
, "\t%-20s %5d %5d\n",

84 
¥og
->
öhîô
[
i
].¥og->
«me
,

85 ()
¥og
->
öhîô
[
i
].
fun˘i⁄_ödex_off£t
,

86 ()
¥og
->
öhîô
[
i
].
v¨übÀ_ödex_off£t


88 
	`Ârötf
(
f
, "PROGRAM:");

89 
i
 = 0; i < (Ë
¥og
->
¥ogøm_size
; i++) {

90 i‡(
i
 % 16 == 0)

91 
	`Ârötf
(
f
, "\n\t%04x: ", (Ë
i
);

92 
	`Ârötf
(
f
, "%02d ", (Ë
¥og
->
¥ogøm
[
i
]);

94 
	`Âutc
('\n', 
f
);

95 
	`Ârötf
(
f
, "FUNCTIONS:\n");

96 
	`Ârötf
(
f
, "Çame offset flags fio #Üocals #árgs\n");

97 
	`Ârötf
(
f
, " --------------------- ------ ------- --- -------- ------\n");

98 
num_funcs_tŸÆ
 = 
¥og
->
œ°_öhîôed
 +Örog->
num_fun˘i⁄s_deföed
;

100 
i
 = 0; i < 
num_funcs_tŸÆ
; i++) {

101 
sÊags
[8];

102 
Êags
;

103 
ru¡ime_ödex
;

104 
fun˘i⁄_t
 *
func_íåy
 = 
	`föd_func_íåy
(
¥og
, 
i
);

105 
low
, 
high
, 
mid
;

108 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
i
];

109 i‡(
Êags
 & 
FUNC_ALIAS
) {

110 
ru¡ime_ödex
 = 
Êags
 & ~
FUNC_ALIAS
;

111 
sÊags
[4] = 'a';

114 
ru¡ime_ödex
 = 
i
;

115 
sÊags
[4] = '-';

118 
Êags
 = 
¥og
->
fun˘i⁄_Êags
[
ru¡ime_ödex
];

120 
sÊags
[0] = (
Êags
 & 
FUNC_INHERITED
) ? 'i' : '-';

121 
sÊags
[1] = (
Êags
 & 
FUNC_UNDEFINED
) ? 'u' : '-';

122 
sÊags
[2] = (
Êags
 & 
FUNC_STRICT_TYPES
) ? 's' : '-';

123 
sÊags
[3] = (
Êags
 & 
FUNC_PROTOTYPE
) ? 'p' : '-';

124 
sÊags
[5] = (
Êags
 & 
FUNC_TRUE_VARARGS
) ? 'V' : '-';

125 
sÊags
[6] = (
Êags
 & 
FUNC_VARARGS
) ? 'v' : '-';

126 
sÊags
[7] = '\0';

128 i‡(
Êags
 & 
FUNC_INHERITED
) {

129 
low
 = 0;

130 
high
 = 
¥og
->
num_öhîôed
 - 1;

131 
high
 > 
low
) {

132 
mid
 = (
low
 + 
high
 + 1)/2;

133 i‡(
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ru¡ime_ödex
)

134 
high
 = 
mid
 -1;

135 
low
 = 
mid
;

138 
	`Ârötf
(
f
, "%4d: %-20s %5d %7s %5d\n",

139 
i
, 
func_íåy
->
«me
,

140 
low
,

141 
sÊags
,

142 
ru¡ime_ödex
 - 
¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
);

145 
	`Ârötf
(
f
, "%4d: %-20s %5d %7s %7d %5d\n",

146 
i
, 
func_íåy
->
«me
,

147 
ru¡ime_ödex
 - 
¥og
->
œ°_öhîôed


148 ,
sÊags
,

149 (Ë
func_íåy
->
num_¨g
,

150 (Ë
func_íåy
->
num_loˇl
);

153 
	`Ârötf
(
f
, "VARIABLES:\n");

154 
i
 = 0; i < (Ë
¥og
->
num_v¨übÀs_deföed
; i++)

155 
	`Ârötf
(
f
, "%4d: %-12s\n", 
i
,

156 
¥og
->
v¨übÀ_èbÀ
[
i
]);

157 
	`Ârötf
(
f
, "STRINGS:\n");

158 
i
 = 0; i < (Ë
¥og
->
num_°rögs
; i++) {

159 
	`Ârötf
(
f
, "%4d: ", 
i
);

160 
j
 = 0; j < 32; j++) {

161 
c
;

163 i‡(!(
c
 = 
¥og
->
°rögs
[
i
][
j
]))

165 i‡(
c
 == '\n')

166 
	`Ârötf
(
f
, "\\n");

168 
	`Âutc
(
c
, 
f
);

170 
	`Âutc
('\n', 
f
);

173 i‡(
Êags
 & 1) {

174 
	`Ârötf
(
f
, "\n;;; *** Disassembly ***\n");

175 
	`dißs£mbÀ
(
f
, 
¥og
->
¥ogøm
, 0,Örog->
¥ogøm_size
,Örog);

177 i‡(
Êags
 & 2) {

178 
	`Ârötf
(
f
, "\n;;; *** Line Number Info ***\n");

179 
	`dump_löe_numbîs
(
f
, 
¥og
);

181 
	`f˛o£
(
f
);

182 
	}
}

184 *
dißs£m_°rög
 
	$P1
(*, 
°r
)

186 
buf
[30];

187 *
b
;

188 
i
;

190 i‡(!
°r
)

193 
b
 = 
buf
;

194 
i
 = 0; i < 29; i++) {

195 i‡(!
°r
[
i
])

197 i‡(
°r
[
i
] == '\n') {

198 *
b
++ = '\\';

199 *
b
++ = 'n';

201 *
b
++ = 
°r
[
i
];

204 *
b
++ = 0;

205  
buf
;

206 
	}
}

208 
	#NUM_FUNS
 (
¥og
->
num_fun˘i⁄s_deföed
 +Örog->
œ°_öhîôed
)

	)

209 
	#NUM_FUNS_D
 
¥og
->
num_fun˘i⁄s_deföed


	)

210 
	#VARS
 
¥og
->
v¨übÀ_«mes


	)

211 
	#NUM_VARS
 
¥og
->
num_v¨übÀs_tŸÆ


	)

212 
	#STRS
 
¥og
->
°rögs


	)

213 
	#NUM_STRS
 
¥og
->
num_°rögs


	)

214 
	#CLSS
 
¥og
->
˛as£s


	)

216 
CDECL


217 
sh‹t_com∑ª
 
	$P2
(
CONST
 *, 
a
, CONST *, 
b
)

219 
x
 = *(*)
a
;

220 
y
 = *(*)
b
;

222  
x
 - 
y
;

223 
	}
}

225 *
	gpushes
[] = { "string", "number", "global", "local" };

228 
dißs£mbÀ
 
	$P5
(
FILE
 *, 
f
, *, 
code
, , 
°¨t
, , 
íd
, 
¥ogøm_t
 *, 
¥og
)

230 
num_simul_efun
;

232 
i
, 
j
, 
ö°r
, 
ürg
, 
is_efun
, 
ri
;

233 
ßrg
;

234 
off£t
;

235 *
pc
, 
buff
[256];

236 
√xt_func
;

238 *
off£ts
;

240 i‡(
°¨t
 == 0) {

242 
off£ts
 = (*Ë
	`mÆloc
(
NUM_FUNS_D
 * 2 * ());

243 
i
 = 0; i < (Ë
NUM_FUNS_D
; i++) {

244 
ri
 = 
i
 + 
¥og
->
œ°_öhîôed
;

246 i‡(
¥og
->
fun˘i⁄_Êags
[
ri
] & 
FUNC_NO_CODE
) {

247 
off£ts
[
i
 << 1] = 
íd
 + 1;

250 
off£ts
[
i
 << 1] = 
¥og
->
fun˘i⁄_èbÀ
[i].
addªss
;

252 
off£ts
[(
i
 << 1) + 1] = i;

254 #ifde‡
_SEQUENT_


255 
	`qs‹t
((*Ë&
off£ts
[0],

257 
	`qs‹t
((*Ë&
off£ts
[0],

259 
NUM_FUNS_D
, (Ë* 2, 
sh‹t_com∑ª
);

260 
√xt_func
 = 0;

262 
off£ts
 = 0;

263 
√xt_func
 = -1;

266 
pc
 = 
code
 + 
°¨t
;

268 (
pc
 - 
code
Ë< 
íd
) {

269 i‡((
√xt_func
 >0Ë&& ((
pc
 - 
code
Ë>
off£ts
[next_func])) {

270 
	`Ârötf
(
f
, "\n;; Fun˘i⁄ %s\n", 
¥og
->
fun˘i⁄_èbÀ
[
off£ts
[
√xt_func
 + 1]].
«me
);

271 
√xt_func
 += 2;

272 i‡(
√xt_func
 >((Ë
NUM_FUNS_D
 * 2))

273 
√xt_func
 = -1;

276 
	`Ârötf
(
f
, "%04x: ", (Ë(
pc
 - 
code
));

278 
is_efun
 = (
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
)Ë>
BASE
;

280 
pc
++;

281 
buff
[0] = 0;

282 
ßrg
 = 0;

284 
ö°r
) {

285 
F_PUSH
:

286 
	`Ârötf
(
f
, "push ");

287 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

288 
i
--) {

289 
j
 = 
	`EXTRACT_UCHAR
(
pc
++);

290 
	`Ârötf
(
f
, "%†%i", 
pushes
[(
j
 & 
PUSH_WHAT
) >> 6],

291 
j
 & 
PUSH_MASK
);

292 i‡(
i
)

293 
	`Ârötf
(
f
, ", ");

296 
	`Ârötf
(
f
, "\n");

299 
F_BRANCH_NE
:

300 
F_BRANCH_GE
:

301 
F_BRANCH_LE
:

302 
F_BRANCH_EQ
:

303 
F_BRANCH
:

304 
F_BRANCH_WHEN_ZERO
:

305 
F_BRANCH_WHEN_NON_ZERO
:

306 #ifde‡
F_LOR


307 
F_LOR
:

308 
F_LAND
:

310 
	`COPY_SHORT
(&
ßrg
, 
pc
);

311 
off£t
 = (
pc
 - 
code
Ë+ (Ë
ßrg
;

312 
	`•rötf
(
buff
, "%04x (%04x)", (Ë
ßrg
, (Ë
off£t
);

313 
pc
 += 2;

316 
F_NEXT_FOREACH
:

317 
F_BBRANCH_LT
:

318 
	`COPY_SHORT
(&
ßrg
, 
pc
);

319 
off£t
 = (
pc
 - 
code
Ë- (Ë
ßrg
;

320 
	`•rötf
(
buff
, "%04x (%04x)", (Ë
ßrg
, (Ë
off£t
);

321 
pc
 += 2;

324 
F_FOREACH
:

326 
Êags
 = 
	`EXTRACT_UCHAR
(
pc
++);

327 *
À·
 = "loˇl", *
right
 = "local";

329 i‡(
Êags
 & 
FOREACH_LEFT_GLOBAL
)

330 
À·
 = "global";

331 i‡(
Êags
 & 
FOREACH_RIGHT_GLOBAL
)

332 
right
 = "global";

333 i‡(
Êags
 & 
FOREACH_REF
) {

334 i‡(
Êags
 & 
FOREACH_MAPPING
)

335 
right
 = "ref";

337 
À·
 = "ref";

340 i‡(
Êags
 & 
FOREACH_MAPPING
) {

341 
	`•rötf
(
buff
, "(mapping) %s %i, %s %i",

342 
À·
, 
	`EXTRACT_UCHAR
(
pc
++), 
right
, EXTRACT_UCHAR(pc++));

344 
	`•rötf
(
buff
, "◊ºayË%†%i", 
À·
, 
	`EXTRACT_UCHAR
(
pc
++));

349 
F_BBRANCH_WHEN_ZERO
:

350 
F_BBRANCH_WHEN_NON_ZERO
:

351 
F_BBRANCH
:

352 
	`COPY_SHORT
(&
ßrg
, 
pc
);

353 
off£t
 = (
pc
 - 
code
Ë- (Ë
ßrg
;

354 
	`•rötf
(
buff
, "%04x (%04x)", (Ë
ßrg
, (Ë
off£t
);

355 
pc
 += 2;

358 #ifde‡
F_JUMP


359 
F_JUMP
:

361 #ifde‡
F_JUMP_WHEN_ZERO


362 
F_JUMP_WHEN_ZERO
:

363 
F_JUMP_WHEN_NON_ZERO
:

365 
F_CATCH
:

366 
	`COPY_SHORT
(&
ßrg
, 
pc
);

367 
	`•rötf
(
buff
, "%04x", (Ë
ßrg
);

368 
pc
 += 2;

371 
F_AGGREGATE
:

372 
F_AGGREGATE_ASSOC
:

373 
	`COPY_SHORT
(&
ßrg
, 
pc
);

374 
	`•rötf
(
buff
, "%d", ()
ßrg
);

375 
pc
 += 2;

378 
F_MAKE_REF
:

379 
F_KILL_REFS
:

380 
F_MEMBER
:

381 
F_MEMBER_LVALUE
:

382 
	`•rötf
(
buff
, "%d", ()
	`EXTRACT_UCHAR
(
pc
++));

385 
F_EXPAND_VARARGS
:

387 
which
 = 
	`EXTRACT_UCHAR
(
pc
++);

388 i‡(
which
) {

389 
	`•rötf
(
buff
, "%d fromÅ› o‡°ack", 
which
);

391 
	`°r˝y
(
buff
, "top of stack");

396 
F_NEW_EMPTY_CLASS
:

397 
F_NEW_CLASS
:

399 
which
 = 
	`EXTRACT_UCHAR
(
pc
++);

401 
	`°r˝y
(
buff
, 
STRS
[
CLSS
[
which
].
«me
]);

405 
F_CALL_FUNCTION_BY_ADDRESS
:

406 
	`COPY_SHORT
(&
ßrg
, 
pc
);

407 
pc
 += 3;

408 i‡(
ßrg
 < 
NUM_FUNS
)

409 
	`•rötf
(
buff
, "%-12†%5d", 
	`fun˘i⁄_«me
(
¥og
, 
ßrg
),

410 ()
ßrg
);

412 
	`•rötf
(
buff
, "<ouào‡øngê%d>", ()
ßrg
);

415 
F_CALL_INHERITED
:

417 
¥ogøm_t
 *
√w¥og
;

419 
√w¥og
 = (
¥og
->
öhîô
 + 
	`EXTRACT_UCHAR
(
pc
++))->prog;

420 
	`COPY_SHORT
(&
ßrg
, 
pc
);

421 
pc
 += 3;

422 i‡(
ßrg
 < (
√w¥og
->
num_fun˘i⁄s_deföed
 +

423 
√w¥og
->
œ°_öhîôed
))

424 
	`•rötf
(
buff
, "%30s::%-12†%5d", 
√w¥og
->
«me
,

425 
	`fun˘i⁄_«me
(
√w¥og
, 
ßrg
), () sarg);

426 
	`•rötf
(
buff
, "<ouào‡øngêö %30†- %d>", 
√w¥og
->
«me
,

427 (Ë
ßrg
);

430 
F_GLOBAL_LVALUE
:

431 
F_GLOBAL
:

432 i‡((Ë(
ürg
 = 
	`EXTRACT_UCHAR
(
pc
)Ë< 
NUM_VARS
)

433 
	`•rötf
(
buff
, "%s", 
	`v¨übÀ_«me
(
¥og
, 
ürg
));

435 
	`•rötf
(
buff
, "<ouào‡øngê%d>", 
ürg
);

436 
pc
++;

439 
F_LOOP_INCR
:

440 
	`•rötf
(
buff
, "LV%d", 
	`EXTRACT_UCHAR
(
pc
));

441 
pc
++;

443 
F_WHILE_DEC
:

444 
	`COPY_SHORT
(&
ßrg
, 
pc
 + 1);

445 
off£t
 = (
pc
 - 
code
Ë- (Ë
ßrg
;

446 
	`•rötf
(
buff
, "LV%d--, bønch %04x (%04x)", 
	`EXTRACT_UCHAR
(
pc
),

447 (Ë
ßrg
, (Ë
off£t
);

448 
pc
 += 3;

450 
F_TRANSFER_LOCAL
:

451 
F_LOCAL
:

452 
F_LOCAL_LVALUE
:

453 
F_VOID_ASSIGN_LOCAL
:

454 
F_REF
:

455 
F_REF_LVALUE
:

456 
	`•rötf
(
buff
, "LV%d", 
	`EXTRACT_UCHAR
(
pc
));

457 
pc
++;

459 
F_LOOP_COND_NUMBER
:

460 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

461 
	`COPY_INT
(&
ürg
, 
pc
);

462 
pc
 += 4;

463 
	`COPY_SHORT
(&
ßrg
, 
pc
);

464 
off£t
 = (
pc
 - 
code
Ë- (Ë
ßrg
;

465 
pc
 += 2;

466 
	`•rötf
(
buff
, "LV%d < %d bbranch_when_non_zero %04x (%04x)",

467 
i
, 
ürg
, 
ßrg
, 
off£t
);

469 
F_LOOP_COND_LOCAL
:

470 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

471 
ürg
 = *
pc
++;

472 
	`COPY_SHORT
(&
ßrg
, 
pc
);

473 
off£t
 = (
pc
 - 
code
Ë- (Ë
ßrg
;

474 
pc
 += 2;

475 
	`•rötf
(
buff
, "LV%d < LV%d bbranch_when_non_zero %04x (%04x)",

476 
i
, 
ürg
, 
ßrg
, 
off£t
);

478 
F_STRING
:

479 
	`COPY_SHORT
(&
ßrg
, 
pc
);

480 i‡(
ßrg
 < 
NUM_STRS
)

481 
	`•rötf
(
buff
, "\"%s\"", 
	`dißs£m_°rög
(
STRS
[
ßrg
]));

483 
	`•rötf
(
buff
, "<ouào‡øngê%d>", ()
ßrg
);

484 
pc
 += 2;

486 
F_SHORT_STRING
:

487 i‡(
	`EXTRACT_UCHAR
(
pc
Ë< 
NUM_STRS
)

488 
	`•rötf
(
buff
, "\"%s\"", 
	`dißs£m_°rög
(
STRS
[
	`EXTRACT_UCHAR
(
pc
)]));

490 
	`•rötf
(
buff
, "<ouào‡øngê%d>", 
	`EXTRACT_UCHAR
(
pc
));

491 
pc
++;

493 
F_SIMUL_EFUN
:

494 
	`COPY_SHORT
(&
ßrg
, 
pc
);

495 i‡(
ßrg
 >
num_simul_efun
)

496 
	`•rötf
(
buff
, "<övÆid %d> %d\n", 
ßrg
, 
pc
[2]);

498 
	`•rötf
(
buff
, "\"%s\" %d", 
simuls
[
ßrg
].
func
->
«me
, 
pc
[2]);

499 
pc
 += 3;

502 
F_FUNCTION_CONSTRUCTOR
:

503 
	`EXTRACT_UCHAR
(
pc
++)) {

504 
FP_SIMUL
:

505 
	`LOAD_SHORT
(
ßrg
, 
pc
);

506 
	`•rötf
(
buff
, "<simul_efun> \"%s\"", 
simuls
[
ßrg
].
func
->
«me
);

508 
FP_EFUN
:

509 
	`LOAD_SHORT
(
ßrg
, 
pc
);

510 
	`•rötf
(
buff
, "<efun> %s", 
ö°rs
[
ßrg
].
«me
);

512 
FP_LOCAL
:

513 
	`LOAD_SHORT
(
ßrg
, 
pc
);

514 i‡(
ßrg
 < 
NUM_FUNS
)

515 
	`•rötf
(
buff
, "<loˇl_fun> %s", 
	`fun˘i⁄_«me
(
¥og
, 
ßrg
));

517 
	`•rötf
(
buff
, "<loˇl_fun> <ouào‡øngê%d>", ()
ßrg
);

519 
FP_FUNCTIONAL
:

520 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

521 
	`•rötf
(
buff
, "<fun˘i⁄Æ, %dárgs>\nCode:", ()
pc
[0]);

522 
pc
 += 3;

524 
FP_ANONYMOUS
:

525 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
:

526 
	`COPY_SHORT
(&
ßrg
, &
pc
[2]);

527 
	`•rötf
(
buff
, "<anonymous function, %dárgs, %dÜocals,Éndsát %04x>\nCode:",

528 ()
pc
[0], (Ìc[1], (Ë’¯+ 3 + 
ßrg
 - 
code
));

529 
pc
 += 4;

534 
F_NUMBER
:

535 
	`COPY_INT
(&
ürg
, 
pc
);

536 
	`•rötf
(
buff
, "%d", 
ürg
);

537 
pc
 += 4;

540 
F_REAL
:

542 
Árg
;

544 
	`COPY_FLOAT
(&
Árg
, 
pc
);

545 
	`•rötf
(
buff
, "%f", 
Árg
);

546 
pc
 += 4;

550 
F_SSCANF
:

551 
F_PARSE_COMMAND
:

552 
F_BYTE
:

553 
	`•rötf
(
buff
, "%d", 
	`EXTRACT_UCHAR
(
pc
));

554 
pc
++;

557 
F_NBYTE
:

558 
	`•rötf
(
buff
, "-%d", 
	`EXTRACT_UCHAR
(
pc
));

559 
pc
++;

562 
F_SWITCH
:

564 
ây≥
;

565 
°abÀ
, 
ëabÀ
, 
def
;

566 
addr
;

567 *
≠å
;

568 *
∑rg
;

570 
ây≥
 = 
	`EXTRACT_UCHAR
(
pc
);

571 
	`COPY_SHORT
(&
°abÀ
, 
pc
 + 1);

572 
	`COPY_SHORT
(&
ëabÀ
, 
pc
 + 3);

573 
	`COPY_SHORT
(&
def
, 
pc
 + 5);

574 
addr
 = 
pc
 - 
code
;

575 
≠å
 = 
pc
;

577 
	`Ârötf
(
f
, "switch\n");

578 
	`Ârötf
(
f
, "Åype: %02xÅable: %04x-%04x deflt: %04x\n",

579 (Ë
ây≥
, 
addr
 + 
°abÀ
,

580 
addr
 + 
ëabÀ
,ádd∏+ 
def
);

582 
	`dißs£mbÀ
(
f
, 
code
, 
pc
 - codê+ 7, 
addr
 + 
°abÀ
, 
¥og
);

585 
	`Ârötf
(
f
, " switchÅable (for %04x)\n",

586 (Ë(
pc
 - 
code
 - 1));

587 i‡(
ây≥
 == 0xfe)

588 
ây≥
 = 0;

589 i‡(
ây≥
 >> 4 == 0xf)

590 
ây≥
 = 1;

592 
ây≥
 = 2;

594 
pc
 +
°abÀ
;

595 i‡(
ây≥
 == 0) {

596 
i
 = 0;

597 
pc
 < 
≠å
 + 
ëabÀ
 - 4) {

598 
	`COPY_SHORT
(&
ßrg
, 
pc
);

599 
	`Ârötf
(
f
, "\t%2d: %04x\n", 
i
++, 
addr
 + 
ßrg
);

600 
pc
 += 2;

602 
	`COPY_INT
(&
ürg
, 
pc
);

603 
	`Ârötf
(
f
, "\tmövÆ = %d\n", 
ürg
);

604 
pc
 += 4;

606 
pc
 < 
≠å
 + 
ëabÀ
) {

607 
	`COPY_PTR
(&
∑rg
, 
pc
);

608 
	`COPY_SHORT
(&
ßrg
, 
pc
 + 
SIZEOF_PTR
);

609 i‡(
ây≥
 =1 || !
∑rg
) {

610 i‡(
ßrg
 == 1)

611 
	`Ârötf
(
f
, "\t%-4d\t<øngê°¨t>\n", ()
∑rg
);

613 
	`Ârötf
(
f
, "\t%-4d\t%04x\n", ()
∑rg
, 
addr
+
ßrg
);

615 
	`Ârötf
(
f
, "\t\"%s\"\t%04x\n",

616 
	`dißs£m_°rög
(
∑rg
), 
addr
+
ßrg
);

618 
pc
 +2 + 
SIZEOF_PTR
;

623 
F_EFUNV
:

624 
	`•rötf
(
buff
, "%d", 
	`EXTRACT_UCHAR
(
pc
++));

625 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
ONEARG_MAX
;

627 
F_EFUN0
:

628 
F_EFUN1
:

629 
F_EFUN2
:

630 
F_EFUN3
:

631 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
ONEARG_MAX
;

632 i‡(
ö°rs
[
ö°r
].
mö_¨g
 !ö°rs[ö°r].
max_¨g
) {

633 
	`•rötf
(
buff
, "%d", 
ö°r
 - 
F_EFUN0
);

637 
	`Ârötf
(
f
, "*** zero opcode ***\n");

640 
	`Ârötf
(
f
, "%†%s\n", 
	`quîy_ö°r_«me
(
ö°r
), 
buff
);

643 i‡(
off£ts
)

644 
	`‰ì
(
off£ts
);

645 
	}
}

647 
	#INCLUDE_DEPTH
 10

	)

650 
dump_löe_numbîs
 
	$P2
(
FILE
 *, 
f
, 
¥ogøm_t
 *, 
¥og
) {

651 *
fi
;

652 *
li_°¨t
;

653 *
li_íd
;

654 *
li
;

655 
addr
;

656 
sz
;

657 
ADDRESS_TYPE
 
s
;

659 i‡(!
¥og
->
löe_öfo
) {

660 
	`lﬂd_löe_numbîs
(
¥og
);

661 i‡(!
¥og
->
löe_öfo
) {

662 
	`Ârötf
(
f
, "FailedÅoÜoadÜineÇumbers\n");

667 
fi
 = 
¥og
->
fûe_öfo
;

668 
li_íd
 = (*)(((*)
fi
) + fi[0]);

669 
li_°¨t
 = (*)(
fi
 + fi[1]);

671 
fi
 += 2;

672 
	`Ârötf
(
f
, "\nabsoluteÜine -> (file,Üine)Åable:\n");

673 
fi
 < (*)
li_°¨t
) {

674 
	`Ârötf
(
f
, "%òlöe†‰om %ò[%s]\n", ()
fi
[0], ()fi[1],

675 
¥og
->
°rögs
[
fi
[1]-1]);

676 
fi
 += 2;

679 
li
 = 
li_°¨t
;

680 
addr
 = 0;

681 
	`Ârötf
(
f
,"\naddress ->ábsoluteÜineÅable:\n");

682 
li
 < 
li_íd
) {

683 
sz
 = *
li
++;

684 #i‡!
	`deföed
(
USE_32BIT_ADDRESSES
Ë&& !deföed(
LPC_TO_C
)

685 
	`COPY_SHORT
(&
s
, 
li
);

687 
	`COPY_INT
(&
s
, 
li
);

689 
li
 +(
ADDRESS_TYPE
);

690 
	`Ârötf
(
f
, "%4x-%4x: %i\n", 
addr
,ádd∏+ 
sz
 - 1, ()
s
);

691 
addr
 +
sz
;

693 
	}
}

	@dumpstat.c

1 
	~"°d.h
"

2 
	~"dump°©.h
"

3 
	~"comm.h
"

4 
	~"fûe.h
"

10 
sumSizes
 
PROT
((
m≠pög_t
 *, 
m≠pög_node_t
 *, *));

11 
svÆue_size
 
PROT
((
svÆue_t
 *));

13 
sumSizes
 
	$P3
(
m≠pög_t
 *, 
m
, 
m≠pög_node_t
 *, 
ñt
, *, 
ç
)

15 *
t
 = (*)
ç
;

17 *
t
 +(
	`svÆue_size
(&
ñt
->
vÆues
[0]) + svalue_size(&elt->values[1]));

18 *
t
 +(
m≠pög_node_t
);

20 
	}
}

22 
	gdïth
 = 0;

24 
svÆue_size
 
	$P1
(
svÆue_t
 *, 
v
)

26 
i
, 
tŸÆ
;

28 
v
->
ty≥
) {

29 
T_OBJECT
:

30 
T_REAL
:

31 
T_NUMBER
:

33 
T_STRING
:

34  (Ë(
	`°æí
(
v
->
u
.
°rög
) + 1);

35 
T_ARRAY
:

36 
T_CLASS
:

37 i‡(++
dïth
 > 100)

41 
tŸÆ
 = (
¨øy_t
Ë- (
svÆue_t
);

42 
i
 = 0; i < 
v
->
u
.
¨r
->
size
; i++) {

43 
tŸÆ
 +
	`svÆue_size
(&
v
->
u
.
¨r
->
ôem
[
i
]Ë+ (
svÆue_t
);

45 
dïth
--;

46  
tŸÆ
;

47 
T_MAPPING
:

48 i‡(++
dïth
 > 100)

50 
tŸÆ
 = (
m≠pög_t
);

51 
	`m≠Tøvî£
(
v
->
u
.
m≠
, 
sumSizes
, &
tŸÆ
);

52 
dïth
--;

53  
tŸÆ
;

54 
T_FUNCTION
:

56 
svÆue_t
 
tmp
;

57 
tmp
.
ty≥
 = 
T_ARRAY
;

58 
tmp
.
u
.
¨r
 = 
v
->u.
Â
->
hdr
.
¨gs
;

60 i‡(++
dïth
 > 100)

63 i‡(
tmp
.
u
.
¨r
)

64 
tŸÆ
 = ()((
fu≈å_hdr_t
Ë+ 
	`svÆue_size
(&
tmp
));

66 
tŸÆ
 = ()((
fu≈å_hdr_t
));

67 
v
->
u
.
Â
->
hdr
.
ty≥
) {

68 
FP_EFUN
:

69 
tŸÆ
 +(
efun_±r_t
);

71 
FP_LOCAL
 | 
FP_NOT_BINDABLE
:

72 
tŸÆ
 +(
loˇl_±r_t
);

74 
FP_SIMUL
:

75 
tŸÆ
 +(
simul_±r_t
);

77 
FP_FUNCTIONAL
:

78 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

79 
tŸÆ
 +(
fun˘i⁄Æ_t
);

83 
dïth
--;

84  
tŸÆ
;

86 #i‚de‡
NO_BUFFER_TYPE


87 
T_BUFFER
:

89  (Ë((
buf„r_t
Ë+ 
v
->
u
.
buf
->
size
 - 1);

92 
	`Áèl
("IŒegÆÅy≥: %d\n", 
v
->
ty≥
);

96 
	}
}

98 
d©a_size
 
	$P1
(
obje˘_t
 *, 
ob
)

100 
tŸÆ
 = 0, 
i
;

102 i‡(
ob
->
¥og
) {

103 
i
 = 0; i < (Ë
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++) {

104 
dïth
 = 0;

105 
tŸÆ
 +
	`svÆue_size
(&
ob
->
v¨übÀs
[
i
]Ë+ (
svÆue_t
);

108  
tŸÆ
;

109 
	}
}

111 
dump°©
 
	$P1
(*, 
t‚
)

113 
FILE
 *
f
;

114 
obje˘_t
 *
ob
;

115 *
‚
;

116 #ifde‡
F_SET_HIDE


117 
di•œy_hiddí
;

120 
‚
 = 
	`check_vÆid_∑th
(
t‚
, 
cuºít_obje˘
, "dumpallobj", 1);

121 i‡(!
‚
) {

122 
	`îr‹
("InvÆidÖ©h '/%s' f‹ wrôög.\n", 
t‚
);

125 
f
 = 
	`f›í
(
‚
, "w");

126 i‡(!
f
) {

127 
	`îr‹
("U«bÀÅÿ›í '/%s' f‹ wrôög.\n", 
‚
);

131 #ifde‡
F_SET_HIDE


132 
di•œy_hiddí
 = -1;

134 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
) {

135 
tmp
;

137 #ifde‡
F_SET_HIDE


138 i‡(
ob
->
Êags
 & 
O_HIDDEN
) {

139 i‡(
di•œy_hiddí
 == -1)

140 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

141 i‡(!
di•œy_hiddí
)

146 i‡(
ob
->
¥og
 && (ob->¥og->
ªf
 =1 || !(ob->
Êags
 & 
O_CLONE
)))

147 
tmp
 = 
ob
->
¥og
->
tŸÆ_size
;

149 
tmp
 = 0;

150 
	`Ârötf
(
f
, "%-20†%òª‡%2d %†%†(%dË%s\n", 
ob
->
«me
,

151 
tmp
 + 
	`d©a_size
(
ob
Ë+ (
obje˘_t
), ob->
ªf
,

152 
ob
->
Êags
 & 
O_HEART_BEAT
 ? "HB" : " ",

153 #i‚de‡
NO_ENVIRONMENT


154 
ob
->
su≥r
 ? ob->su≥r->
«me
 : "--",

159 (
ob
->
sw≠_num
 >0Ë? ((ob->
Êags
 & 
O_SWAPPED
) ?

162 
	`f˛o£
(
f
);

163 
	}
}

	@dumpstat.h

1 #i‚de‡
DUMPSTAT_H


2 
	#DUMPSTAT_H


	)

4 
	~"Õc_ö˛.h
"

9 
d©a_size
 
PROT
((
obje˘_t
 *));

10 
dump°©
 
PROT
((*));

	@ed.c

49 
	~"°d.h
"

50 
	~"ed.h
"

51 
	~"comm.h
"

52 
	~"fûe.h
"

53 
	~"ma°î.h
"

61 #i‡
deföed
(
F_ED
Ë|| !deföed(
OLD_ED
)

65 
	gvîsi⁄
 = 601;

67 
	gEdEº
 = 0;

69 
≠≥nd
 
PROT
((, ));

70 
m‹e_≠≥nd
 
PROT
((*));

71 
ckglob
 
PROT
(());

72 
deÊt
 
PROT
((, ));

73 
dñ
 
PROT
((, ));

74 
dﬁ°
 
PROT
((, ));

78 
d›∫t
 
PROT
((, ));

79 
¥¡ 
 
PROT
((*, , ));

80 
egës
 
PROT
((*, , 
FILE
 *));

81 
d‹ód
 
PROT
((, *));

82 
dowrôe
 
PROT
((, , *, ));

83 
föd
 
PROT
((
ªgexp
 *, ));

84 *
gë‚
 
PROT
(());

85 
gënum
 
PROT
(());

86 
gë⁄e
 
PROT
(());

87 
gël°
 
PROT
(());

88 
ed_löe_t
 *
gë±r
 
PROT
(());

89 
gërhs
 
PROT
((*));

90 
ös
 
PROT
((*));

91 
joö
 
PROT
((, ));

92 
move
 
PROT
(());

93 
å™s„r
 
PROT
(());

94 
ªgexp
 *
›ç©
 
PROT
(());

95 
£t
 
PROT
(());

96 
£t_ed_buf
 
PROT
(());

97 
sub°
 
PROT
((
ªgexp
 *, *, , ));

98 
docmd
 
PROT
(());

99 
doglob
 
PROT
(());

100 
‰ì_ed_buf„r
 
PROT
((
obje˘_t
 *));

101 
shi·
 
PROT
((*));

102 
ödít
 
PROT
((*));

103 
ödít_code
 
PROT
(());

104 
ªp‹t_°©us
 
PROT
(());

106 #i‚de‡
OLD_ED


107 *
obje˘_ed_ªsu…s
 
PROT
(());

108 
ed_buf„r_t
 *
add_ed_buf„r
 
PROT
((
obje˘_t
 *));

109 
obje˘_‰ì_ed_buf„r
 
PROT
(());

112 
¥öt_hñp
 
PROT
((
¨g
));

113 
¥öt_hñp2
 
PROT
(());

114 
cou¡_bœnks
 
PROT
((
löe
));

115 
_cou¡_bœnks
 
PROT
((*
°r
, 
bœnks
));

117 
ed_buf„r_t
 *
	gcuºít_ed_buf„r
;

118 
obje˘_t
 *
	gcuºít_edô‹
;

119 
outbuf„r_t
 
	gcuºít_ed_ªsu…s
;

121 
	#ED_BUFFER
 (
cuºít_ed_buf„r
)

	)

122 #ifde‡
OLD_ED


123 
	#P_NET_DEAD
 (
comm™d_givî
->
öãø˘ive
->
iÊags
 & 
NET_DEAD
)

	)

125 
	#P_NET_DEAD
 0

	)

127 
	#P_NONASCII
 (
ED_BUFFER
->
n⁄ascii
)

	)

128 
	#P_NULLCHAR
 (
ED_BUFFER
->
nuŒch¨
)

	)

129 
	#P_TRUNCATED
 (
ED_BUFFER
->
åunˇãd
)

	)

130 
	#P_FNAME
 (
ED_BUFFER
->
‚ame
)

	)

131 
	#P_FCHANGED
 (
ED_BUFFER
->
fch™ged
)

	)

132 
	#P_NOFNAME
 (
ED_BUFFER
->
no‚ame
)

	)

133 
	#P_MARK
 (
ED_BUFFER
->
m¨k
)

	)

134 
	#P_OLDPAT
 (
ED_BUFFER
->
ﬁd∑t
)

	)

135 
	#P_LINE0
 (
ED_BUFFER
->
Löe0
)

	)

136 
	#P_CURLN
 (
ED_BUFFER
->
CurLn
)

	)

137 
	#P_CURPTR
 (
ED_BUFFER
->
CurPå
)

	)

138 
	#P_LASTLN
 (
ED_BUFFER
->
La°Ln
)

	)

139 
	#P_LINE1
 (
ED_BUFFER
->
Löe1
)

	)

140 
	#P_LINE2
 (
ED_BUFFER
->
Löe2
)

	)

141 
	#P_NLINES
 (
ED_BUFFER
->
∆öes
)

	)

144 
	#P_SHIFTWIDTH
 (
ED_BUFFER
->
shi·width
)

	)

145 
	#P_FLAGS
 (
ED_BUFFER
->
Êags
)

	)

146 
	#NFLG_MASK
 0x0010

	)

147 
	#P_NFLG
 ( 
P_FLAGS
 & 
NFLG_MASK
 )

	)

148 
	#LFLG_MASK
 0x0020

	)

149 
	#P_LFLG
 ( 
P_FLAGS
 & 
LFLG_MASK
 )

	)

150 
	#PFLG_MASK
 0x0040

	)

151 
	#P_PFLG
 ( 
P_FLAGS
 & 
PFLG_MASK
 )

	)

152 
	#EIGHTBIT_MASK
 0x0080

	)

153 
	#P_EIGHTBIT
 ( 
P_FLAGS
 & 
EIGHTBIT_MASK
 )

	)

154 
	#AUTOINDFLG_MASK
 0x0100

	)

155 
	#P_AUTOINDFLG
 ( 
P_FLAGS
 & 
AUTOINDFLG_MASK
 )

	)

156 
	#EXCOMPAT_MASK
 0x0200

	)

157 
	#P_EXCOMPAT
 ( 
P_FLAGS
 & 
EXCOMPAT_MASK
 )

	)

158 
	#DPRINT_MASK
 0x0400

	)

159 
	#P_DPRINT
 ( 
P_FLAGS
 & 
DPRINT_MASK
 )

	)

160 
	#VERBOSE_MASK
 0x0800

	)

161 
	#P_VERBOSE
 ( 
P_FLAGS
 & 
VERBOSE_MASK
 )

	)

162 
	#SHIFTWIDTH_MASK
 0x000f

	)

163 
	#ALL_FLAGS_MASK
 0x0ff0

	)

164 
	#P_APPENDING
 (
ED_BUFFER
->
≠≥ndög
)

	)

165 
	#P_MORE
 (
ED_BUFFER
->
m‹ög
)

	)

166 
	#P_LEADBLANKS
 (
ED_BUFFER
->
Àadög_bœnks
)

	)

167 
	#P_CUR_AUTOIND
 (
ED_BUFFER
->
cur_autoödít
)

	)

168 
	#P_RESTRICT
 (
ED_BUFFER
->
ª°ri˘ed
)

	)

171 
	gölö
[
ED_MAXLINE
];

172 *
	gö±r
;

174 
	stbl
 {

175 *
	mt_°r
;

176 
	mt_™d_mask
;

177 
	mt_‹_mask
;

178 } *
	gt
, 
	gtbl
[] = {

179 { "numbî", ~
FALSE
, 
NFLG_MASK
 },

180 { "n⁄umbî", ~
NFLG_MASK
, 
FALSE
 },

181 { "li°", ~
FALSE
, 
LFLG_MASK
 },

182 { "nﬁi°", ~
LFLG_MASK
, 
FALSE
 },

183 { "¥öt", ~
FALSE
, 
PFLG_MASK
 },

184 { "n›röt", ~
PFLG_MASK
, 
FALSE
 },

185 { "eightbô", ~
FALSE
, 
EIGHTBIT_MASK
 },

186 { "n€ightbô", ~
EIGHTBIT_MASK
, 
FALSE
 },

187 { "autoödít", ~
FALSE
, 
AUTOINDFLG_MASK
 },

188 { "nﬂutoödít", ~
AUTOINDFLG_MASK
, 
FALSE
 },

189 { "excom∑tibÀ", ~
FALSE
, 
EXCOMPAT_MASK
 },

190 { "n€xcom∑tibÀ", ~
EXCOMPAT_MASK
, 
FALSE
 },

191 { "d¥öt", ~
FALSE
, 
DPRINT_MASK
 },

192 { "nod¥öt", ~
DPRINT_MASK
, 
FALSE
 },

193 { "vîbo£", ~
FALSE
, 
VERBOSE_MASK
 },

194 { "novîbo£", ~
VERBOSE_MASK
, 
FALSE
 },

200 #i‚de‡
max


201 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

204 #i‚de‡
mö


205 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

208 
	#√xén
(
l
Ë(÷)+1 > 
P_LASTLN
 ? 0 : (l)+1)

	)

209 
	#¥ev 
(
l
Ë(÷)-1 < 0 ? 
P_LASTLN
 : (l)-1)

	)

211 
	#gëtxé
(
lö
Ë(÷ö)->
l_buff
)

	)

212 
	#gëtxt
(
num
Ë(
	`gëtxé
–
	`gë±r
“umË))

	)

214 
	#gë√xçå
(
p
Ë(’)->
l_√xt
)

	)

215 
	#gë¥ev±r
(
p
Ë(’)->
l_¥ev
)

	)

217 
	#£tCurLn
–
lö
 ) ( 
P_CURPTR
 = 
	`gë±r
–
P_CURLN
 = (löËË)

	)

218 
	#√xtCurLn
(Ë–
P_CURLN
 = 
	`√xén
(P_CURLN), 
P_CURPTR
 = 
	`gë√xçå
–P_CURPTR ) )

	)

219 
	#¥evCurLn
(Ë–
P_CURLN
 = 
	`¥ev 
(P_CURLN), 
P_CURPTR
 = 
	`gë¥ev±r
–P_CURPTR ) )

	)

221 
	#˛rbuf
(Ë
	`dñ
(1, 
P_LASTLN
)

	)

223 
	#Skù_Whôe_S∑˚
 {*
ö±r
==
SP
 || *ö±r==
HT
Ëö±r++;}

	)

225 
	#ªlök
(
a
, 
x
, 
y
, 
b
Ë{ (x)->
l_¥ev
 = (a); (y)->
l_√xt
 = (b); }

	)

234 
≠≥nd
 
	$P2
(, 
löe
, , 
glob
)

236 i‡(
glob
)

237  
SYNTAX_ERROR
;

238 
	`£tCurLn
(
löe
);

239 
P_APPENDING
 = 1;

240 i‡(
P_NFLG
)

241 
	`ED_OUTPUTV
(
ED_DEST
, "%6d. ", 
P_CURLN
 + 1);

242 i‡(
P_CUR_AUTOIND
)

243 
	`ED_OUTPUTV
(
ED_DEST
, "%*s", 
P_LEADBLANKS
, "");

244 #ifde‡
OLD_ED


245 
	`£t_¥om±
("*\b");

248 
	}
}

250 
m‹e_≠≥nd
 
	$P1
(*, 
°r
)

252 i‡(
°r
[0] == '.' && str[1] == '\0') {

253 
P_APPENDING
 = 0;

254 #ifde‡
OLD_ED


255 
	`£t_¥om±
(":");

259 i‡(
P_NFLG
)

260 
	`ED_OUTPUTV
(
ED_DEST
, "%6d. ", 
P_CURLN
 + 2);

261 i‡(
P_CUR_AUTOIND
) {

262 
i
;

263 
Àss_ödít_Êag
 = 0;

265 *
°r
 == '\004' || *str == '\013') {

266 
°r
++;

267 
P_LEADBLANKS
 -
P_SHIFTWIDTH
;

268 i‡(
P_LEADBLANKS
 < 0)

269 
P_LEADBLANKS
 = 0;

270 
Àss_ödít_Êag
 = 1;

272 
i
 = 0; i < 
P_LEADBLANKS
;)

273 
ölö
[
i
++] = ' ';

274 
	`°∫˝y
(
ölö
 + 
P_LEADBLANKS
, 
°r
, 
ED_MAXLINE
 - P_LEADBLANKS);

275 
ölö
[
ED_MAXLINE
 - 1] = '\0';

276 
	`_cou¡_bœnks
(
ölö
, 0);

277 
	`ED_OUTPUTV
(
ED_DEST
, "%*s", 
P_LEADBLANKS
, "");

278 i‡(!*
°r
 && 
Àss_ödít_Êag
)

280 
°r
 = 
ölö
;

282 i‡(
	`ös
(
°r
) < 0)

283  (
MEM_FAIL
);

285 
	}
}

287 
cou¡_bœnks
 
	$P1
(, 
löe
)

289 
	`_cou¡_bœnks
(
	`gëtxé
(
	`gë±r
(
löe
)), 0);

290 
	}
}

292 
_cou¡_bœnks
 
	$P2
(*, 
°r
, , 
bœnks
)

294 ; *
°r
; str++) {

295 i‡(*
°r
 == ' ')

296 
bœnks
++;

297 i‡(*
°r
 == '\t')

298 
bœnks
 += 8 - blanks % 8;

302 
P_LEADBLANKS
 = 
bœnks
 < 
ED_MAXLINE
 ? blanks : ED_MAXLINE;

303 
	}
}

307 
	$ckglob
()

309 
ªgexp
 *
glb∑t
;

310 
c
, 
dñim
, *
lö
;

311 
num
;

312 
ed_löe_t
 *
±r
;

314 
c
 = *
ö±r
;

316 i‡(
c
 != 'g' && c != 'v')

318 i‡(
	`deÊt
(1, 
P_LASTLN
) < 0)

319  (
BAD_LINE_RANGE
);

321 
dñim
 = *++
ö±r
;

322 i‡(
dñim
 <= ' ')

323  (
ERR
);

325 
glb∑t
 = 
	`›ç©
();

326 i‡(*
ö±r
 =
dñim
)

327 
ö±r
++;

328 
±r
 = 
	`gë±r
(1);

329 
num
 = 1;Çum <
P_LASTLN
;Çum++) {

330 
±r
->
l_°©
 &~
LGLOB
;

331 i‡(
P_LINE1
 <
num
 &&Çum <
P_LINE2
) {

336 i‡(
glb∑t
) {

337 
lö
 = 
	`gëtxé
(
±r
);

338 i‡(
	`ªgexec
(
glb∑t
, 
lö
)) {

339 i‡(
c
 == 'g')

340 
±r
->
l_°©
 |
LGLOB
;

342 i‡(
c
 == 'v')

343 
±r
->
l_°©
 |
LGLOB
;

347 
±r
 = 
	`gë√xçå
(ptr);

350 
	}
}

358 
deÊt
 
	$P2
(, 
def1
, , 
def2
)

360 i‡(
P_NLINES
 == 0) {

361 
P_LINE1
 = 
def1
;

362 
P_LINE2
 = 
def2
;

364  ((
P_LINE1
 > 
P_LINE2
 || P_LINE1 <0Ë? 
ERR
 : 0);

365 
	}
}

378 
dñ
 
	$P2
(, 
‰om
, , 
to
)

380 
ed_löe_t
 *
fú°
, *
œ°
, *
√xt
, *
tmp
;

382 i‡(
P_LASTLN
 == 0)

384 i‡(
‰om
 > 
P_LASTLN
)

385 
‰om
 = 
P_LASTLN
;

386 i‡(
to
 > 
P_LASTLN
)

387 
to
 = 
P_LASTLN
;

388 i‡(
‰om
 < 1)

389 
‰om
 = 1;

390 i‡(
to
 < 1)

391 
to
 = 1;

392 
fú°
 = 
	`gë¥ev±r
(
	`gë±r
(
‰om
));

393 
œ°
 = 
	`gë√xçå
(
	`gë±r
(
to
));

394 
√xt
 = 
fú°
->
l_√xt
;

395 
√xt
 !
œ°
 &&Çexà!&
P_LINE0
) {

396 
tmp
 = 
√xt
->
l_√xt
;

397 
	`FREE
((*Ë
√xt
);

398 
√xt
 = 
tmp
;

400 
	`ªlök
(
fú°
, 
œ°
, first,Üast);

401 
P_LASTLN
 -(
to
 - 
‰om
) + 1;

402 
	`£tCurLn
(
	`¥ev 
(
‰om
));

404 
	}
}

407 
dﬁ°
 
	$P2
(, 
löe1
, , 
löe2
)

409 
ﬁdÊags
 = 
P_FLAGS
, 
p
;

411 
P_FLAGS
 |
LFLG_MASK
;

412 
p
 = 
	`d›∫t
(
löe1
, 
löe2
);

413 
P_FLAGS
 = 
ﬁdÊags
;

414  
p
;

415 
	}
}

462 
d›∫t
 
	$P2
(, 
‰om
, , 
to
)

464 
‰om
 = (from < 1) ? 1 : from;

465 
to
 = (tÿ> 
P_LASTLN
) ? P_LASTLN :Åo;

467 i‡(
to
 != 0) {

468 
	`£tCurLn
(
‰om
);

469 
P_CURLN
 <
to
) {

470 
	`¥¡ 
(
	`gëtxé
(
P_CURPTR
), 
P_LFLG
, (
P_NFLG
 ? 
P_CURLN
 : 0));

471 i‡(
P_NET_DEAD
 || (
P_CURLN
 =
to
))

473 
	`√xtCurLn
();

477 
	}
}

479 
‰ì_ed_buf„r
 
	$P1
(
obje˘_t
 *, 
who
)

481 
	`˛rbuf
();

482 #ifde‡
OLD_ED


483 i‡(
ED_BUFFER
->
wrôe_‚
) {

484 
	`FREE
(
ED_BUFFER
->
wrôe_‚
);

485 
	`‰ì_obje˘
(
ED_BUFFER
->
exô_ob
, "ed EOF");

487 i‡(
ED_BUFFER
->
exô_‚
) {

488 *
exô_‚
 = 
ED_BUFFER
->exit_fn;

489 
obje˘_t
 *
exô_ob
 = 
ED_BUFFER
->exit_ob;

491 i‡(
P_OLDPAT
)

492 
	`FREE
((*Ë
P_OLDPAT
);

493 
	`FREE
((*Ë
ED_BUFFER
);

494 
who
->
öãø˘ive
->
ed_buf„r
 = 0;

495 
	`£t_¥om±
("> ");

498 
	`ß„_≠∂y
(
exô_‚
, 
exô_ob
, 0, 
ORIGIN_INTERNAL
);

499 
	`FREE
(
exô_‚
);

500 
	`‰ì_obje˘
(
exô_ob
, "ed EOF");

505 i‡(
P_OLDPAT
)

506 
	`FREE
((*Ë
P_OLDPAT
);

507 #ifde‡
OLD_ED


508 
	`FREE
((*Ë
ED_BUFFER
);

509 
who
->
öãø˘ive
->
ed_buf„r
 = 0;

510 
	`£t_¥om±
("> ");

512 
	`obje˘_‰ì_ed_buf„r
();

515 
	}
}

517 
	#put˙é
(
X
Ë*
löe
++ = '^'; *löe++ = (XË? ((*
°r
&31)|'@'Ë: '?'

	)

519 
¥¡ 
 
	$P3
(*, 
°r
, , 
vÊg
, , 
Àn
)

521 *
löe
, 
°¨t
[
ED_MAXLINE
 + 2];

523 
löe
 = 
°¨t
;

524 i‡(
Àn
)

525 
	`ED_OUTPUTV
(
ED_DEST
, "%3d ", 
Àn
);

526 *
°r
 && *°∏!
NL
) {

527 i‡((
löe
 - 
°¨t
Ë> 
ED_MAXLINE
) {

528 
	`‰ì_ed_buf„r
(
cuºít_edô‹
);

529 
	`îr‹
("Bad fûêf‹m©. Ed c™'àh™dÀÜöe†l⁄gîÅh™ %d.\n", 
ED_MAXLINE
);

531 i‡(*
°r
 < ' ' || *°∏>
DEL
) {

532 *
°r
) {

535 *
löe
++ = ' ';

536 (
löe
 - 
°¨t
) % 8)

537 *
löe
++ = ' ';

539 
DEL
:

540 
	`put˙é
(0);

543 
	`put˙é
(1);

547 *
löe
++ = *
°r
;

548 
°r
++;

550 #i‚de‡
NO_END_DOLLAR_SIGN


551 i‡(
vÊg
)

552 *
löe
++ = '$';

554 *
löe
 = 
EOS
;

555 
	`ED_OUTPUTV
(
ED_DEST
, "%s\n", 
°¨t
);

556 
	}
}

560 
egës
 
	$P3
(*, 
°r
, , 
size
, 
FILE
 *, 
°ªam
)

562 
c
 = 0, 
cou¡
;

563 *
˝
;

565 
cou¡
 = 0, 
˝
 = 
°r
; 
size
 > count;) {

566 
c
 = 
	`gëc
(
°ªam
);

567 i‡(
c
 =
EOF
) {

568 *
˝
 = 
EOS
;

569 i‡(
cou¡
)

570 
	`ED_OUTPUT
(
ED_DEST
, "[IncompleteÜastÜine]\n");

571  (
cou¡
);

572 } i‡(
c
 =
NL
) {

573 *
˝
 = 
EOS
;

574  (++
cou¡
);

575 } i‡(
c
 == 0)

576 
P_NULLCHAR
++;

578 i‡(
c
 > 127) {

579 i‡(!
P_EIGHTBIT
)

580 
c
 = c & 127;

581 
P_NONASCII
++;

583 *
˝
++ = 
c
;

584 
cou¡
++;

587 
°r
[
cou¡
 - 1] = 
EOS
;

588 i‡(
c
 !
NL
) {

589 
	`ED_OUTPUT
(
ED_DEST
, "truncatingÜine\n");

590 
P_TRUNCATED
++;

591 (
c
 = 
	`gëc
(
°ªam
)Ë!
EOF
)

592 i‡(
c
 =
NL
)

595  (
cou¡
);

596 
	}
}

598 
d‹ód
 
	$P2
(, 
lö
, *, 
‚ame
)

600 
FILE
 *
Â
;

601 
îr
;

602 
byãs
;

603 
löes
;

604 
°r
[
ED_MAXLINE
];

606 
îr
 = 0;

607 
P_NONASCII
 = 
P_NULLCHAR
 = 
P_TRUNCATED
 = 0;

609 i‡(
P_VERBOSE
)

610 
	`ED_OUTPUTV
(
ED_DEST
, "\"%s\" ", 
‚ame
);

611 i‡((
Â
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

612 
	`ED_OUTPUT
(
ED_DEST
, " isn'tÑeadable.\n");

613  
ERR
;

615 
	`£tCurLn
(
lö
);

616 
löes
 = 0, 
byãs
 = 0; (
îr
 = 
	`egës
(
°r
, 
ED_MAXLINE
, 
Â
)) > 0;) {

617 
byãs
 +
îr
;

618 i‡(
	`ös
(
°r
) < 0) {

619 
îr
 = 
MEM_FAIL
;

622 
löes
++;

624 
	`f˛o£
(
Â
);

625 i‡(
îr
 < 0)

626  (
îr
);

627 i‡(
P_VERBOSE
) {

628 
	`ED_OUTPUTV
(
ED_DEST
, "%uÜöe†%u byãs", 
löes
, 
byãs
);

629 i‡(
P_NONASCII
)

630 
	`ED_OUTPUTV
(
ED_DEST
, " [%dÇ⁄-ascii]", 
P_NONASCII
);

631 i‡(
P_NULLCHAR
)

632 
	`ED_OUTPUTV
(
ED_DEST
, " [%dÇul]", 
P_NULLCHAR
);

633 i‡(
P_TRUNCATED
)

634 
	`ED_OUTPUTV
(
ED_DEST
, " [%dÜöe†åunˇãd]", 
P_TRUNCATED
);

635 
	`ED_OUTPUT
(
ED_DEST
, "\n");

637  (
îr
);

638 
	}
}

640 
dowrôe
 
	$P4
(, 
‰om
, , 
to
, *, 
‚ame
, , 
≠Êg
)

642 
FILE
 *
Â
;

643 
lö
, 
îr
;

644 
löes
;

645 
byãs
;

646 *
°r
;

647 
ed_löe_t
 *
Õå
;

649 
îr
 = 0;

650 
löes
 = 
byãs
 = 0;

652 #ifde‡
OLD_ED


653 i‡(
ED_BUFFER
->
wrôe_‚
) {

654 
svÆue_t
 *
ªs
;

656 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
‚ame
));

657 
	`push_numbî
(0);

658 
ªs
 = 
	`ß„_≠∂y
(
ED_BUFFER
->
wrôe_‚
, ED_BUFFER->
exô_ob
, 2, 
ORIGIN_INTERNAL
);

659 i‡(
	`IS_ZERO
(
ªs
))

660  (
ERR
);

664 i‡(!
P_RESTRICT
)

665 
	`ED_OUTPUTV
(
ED_DEST
, "\"/%s\" ", 
‚ame
);

666 i‡((
Â
 = 
	`f›í
(
‚ame
, (
≠Êg
 ? "a" : "w"))Ë=
NULL
) {

667 i‡(!
P_RESTRICT
)

668 
	`ED_OUTPUT
(
ED_DEST
, " can't be opened for writing!\n");

670 
	`ED_OUTPUT
(
ED_DEST
, "Couldn't open file for writing!\n");

671  
ERR
;

673 
Õå
 = 
	`gë±r
(
‰om
);

674 
lö
 = 
‰om
;Üö <
to
;Üin++) {

675 
°r
 = 
Õå
->
l_buff
;

676 
löes
++;

677 
byãs
 +
	`°æí
(
°r
) + 1;

678 i‡(
	`Âuts
(
°r
, 
Â
Ë=
EOF
) {

679 
	`ED_OUTPUT
(
ED_DEST
, "file writeÉrror\n");

680 
îr
++;

683 
	`Âutc
('\n', 
Â
);

684 
Õå
 =Ü±r->
l_√xt
;

687 i‡(!
P_RESTRICT
)

688 
	`ED_OUTPUTV
(
ED_DEST
, "%uÜöe†%lu byãs\n", 
löes
, 
byãs
);

689 
	`f˛o£
(
Â
);

691 #ifde‡
OLD_ED


692 i‡(
ED_BUFFER
->
wrôe_‚
) {

693 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
‚ame
));

694 
	`push_numbî
(1);

695 
	`ß„_≠∂y
(
ED_BUFFER
->
wrôe_‚
, ED_BUFFER->
exô_ob
, 2, 
ORIGIN_INTERNAL
);

699  (
îr
);

700 
	}
}

704 
föd
 
	$P2
(
ªgexp
 *, 
∑t
, , 
dú
)

706 
i
, 
num
;

707 
ed_löe_t
 *
lö
;

709 i‡(!
∑t
)

710  (
ERR
);

711 
dú
 ? 
	`√xtCurLn
(Ë: 
	`¥evCurLn
();

712 
num
 = 
P_CURLN
;

713 
lö
 = 
P_CURPTR
;

714 
i
 = 0; i < 
P_LASTLN
; i++) {

715 i‡(
	`ªgexec
(
∑t
, 
	`gëtxé
(
lö
)))

716  (
num
);

717 i‡(
EdEº
) {

718 
EdEº
 = 0;

721 i‡(
dú
)

722 
num
 = 
	`√xén
“um), 
lö
 = 
	`gë√xçå
(lin);

724 
num
 = 
	`¥ev 
“um), 
lö
 = 
	`gë¥ev±r
(lin);

727 
dú
 ? 
	`¥evCurLn
(Ë: 
	`√xtCurLn
();

728  (
SEARCH_FAILED
);

729 
	}
}

733 *
gë‚
 
	$P1
(, 
wrôeÊg
)

735 
fûe
[
MAXFNAME
];

736 *
˝
;

737 *
fûe2
;

738 
svÆue_t
 *
ªt
;

740 i‡(*
ö±r
 =
NL
) {

741 
P_NOFNAME
 = 
TRUE
;

742 
fûe
[0] = '/';

743 
	`°r˝y
(
fûe
 + 1, 
P_FNAME
);

745 
P_NOFNAME
 = 
FALSE
;

746 
Skù_Whôe_S∑˚
;

748 
˝
 = 
fûe
;

749 *
ö±r
 && *ö±∏!
NL
 && *ö±∏!
SP
 && *ö±∏!
HT
)

750 *
˝
++ = *
ö±r
++;

751 *
˝
 = '\0';

754 i‡(
	`°æí
(
fûe
) == 0) {

755 
	`ED_OUTPUT
(
ED_DEST
, "Bad fileÇame.\n");

759 i‡(
fûe
[0] != '/') {

760 
	`c›y_™d_push_°rög
(
fûe
);

761 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_MAKE_PATH_ABSOLUTE
, 1);

762 i‡((
ªt
 =0Ë|| (ªà=(
svÆue_t
 *)-1Ë||Ñë->
ty≥
 !
T_STRING
)

763  
NULL
;

764 
	`°∫˝y
(
fûe
, 
ªt
->
u
.
°rög
,  file - 1);

765 
fûe
[
MAXFNAME
 - 1] = '\0';

769 
fûe2
 = 
	`check_vÆid_∑th
(
fûe
, 
cuºít_edô‹
, "ed_°¨t", 
wrôeÊg
);

770 i‡(!
fûe2
)

771  (
NULL
);

772 
	`°∫˝y
(
fûe
, 
fûe2
, 
MAXFNAME
 - 1);

773 
fûe
[
MAXFNAME
 - 1] = 0;

775 i‡(*
fûe
 == 0) {

776 
	`ED_OUTPUT
(
ED_DEST
, "no fileÇame\n");

777  (
NULL
);

779  (
fûe
);

780 
	}
}

782 
gënum
 
	$P1
(, 
fú°
)

784 
ªgexp
 *
§ch∑t
;

785 
num
;

786 
c
;

788 
Skù_Whôe_S∑˚
;

790 i‡(*
ö±r
 >= '0' && *inptr <= '9') {

791 
num
 = 0; *
ö±r
 >= '0' && *inptr <= '9'; ++inptr) {

792 
num
 = (num * 10Ë+ (*
ö±r
 - '0');

794  
num
;

796 
c
 = *
ö±r
) {

798 
ö±r
++;

799  (
P_CURLN
);

802 
ö±r
++;

803  (
P_LASTLN
);

807 
§ch∑t
 = 
	`›ç©
();

808 i‡(*
ö±r
 =
c
)

809 
ö±r
++;

810  (
	`föd
(
§ch∑t
, 
c
 == '/' ? 1 : 0));

814  (
fú°
 ? 
P_CURLN
 : 1);

817 
ö±r
++;

818 i‡(*
ö±r
 < 'a' || *inptr > 'z')

819  
MARK_A_TO_Z
;

820  
P_MARK
[*
ö±r
++ - 'a'];

823  (
fú°
 ? 
NO_LINE_RANGE
 : 1);

825 
	}
}

831 
	#FIRST
 1

	)

832 
	#NOTFIRST
 0

	)

834 
	$gë⁄e
()

836 
c
, 
i
, 
num
;

838 i‡((
num
 = 
	`gënum
(
FIRST
)) >= 0) {

840 
Skù_Whôe_S∑˚
;

841 i‡(*
ö±r
 != '+' && *inptr != '-')

844 
c
 = *
ö±r
++;

845 i‡((
i
 = 
	`gënum
(
NOTFIRST
)) < 0)

846  (
i
);

847 i‡(
c
 == '+')

848 
num
 +
i
;

850 
num
 -
i
;

851 i‡(
num
 < 1)Çum = 1;

855  (
num
 > 
P_LASTLN
 ? 
BAD_LINE_NUMBER
 :Çum);

856 
	}
}

859 
	$gël°
()

861 
num
;

863 
P_LINE2
 = 0;

864 
P_NLINES
 = 0; (
num
 = 
	`gë⁄e
()Ë>0 || (num =
BAD_LINE_NUMBER
);) {

866 i‡(
num
 =
BAD_LINE_NUMBER
)

867 
num
 = 
P_LASTLN
;

869 
P_LINE1
 = 
P_LINE2
;

870 
P_LINE2
 = 
num
;

871 
P_NLINES
++;

872 i‡(*
ö±r
 != ',' && *inptr != ';')

874 i‡(*
ö±r
 == ';')

875 
	`£tCurLn
(
num
);

876 
ö±r
++;

878 
P_NLINES
 = 
	`mö
(P_NLINES, 2);

879 i‡(
P_NLINES
 == 0)

880 
P_LINE2
 = 
P_CURLN
;

881 i‡(
P_NLINES
 <= 1)

882 
P_LINE1
 = 
P_LINE2
;

884  ((
num
 < 0Ë?Çum : 
P_NLINES
);

885 
	}
}

890 
ed_löe_t
 *
gë±r
 
	$P1
(, 
num
)

892 
ed_löe_t
 *
±r
;

893 
j
;

895 i‡(2 * 
num
 > 
P_LASTLN
 &&Çum <= P_LASTLN) {

896 
±r
 = 
P_LINE0
.
l_¥ev
;

897 
j
 = 
P_LASTLN
; j > 
num
; j--)

898 
±r
 =Öå->
l_¥ev
;

900 
±r
 = &
P_LINE0
;

901 
j
 = 0; j < 
num
; j++)

902 
±r
 =Öå->
l_√xt
;

904  (
±r
);

905 
	}
}

910 
gërhs
 
	$P1
(*, 
sub
)

912 
dñim
 = *
ö±r
++;

913 *
outmax
 = 
sub
 + 
MAXPAT
;

915 i‡(
dñim
 =
NL
 || *
ö±r
 == NL)

916  (
ERR
);

917 *
ö±r
 !
dñim
 && *ö±∏!
NL
) {

918 i‡(
sub
 > 
outmax
)

919  
ERR
;

920 i‡(*
ö±r
 =
ESCAPE
) {

921 *++
ö±r
) {

923 *
sub
++ = '\r';

924 
ö±r
++;

927 *
sub
++ = '\n';

928 
ö±r
++;

931 *
sub
++ = '\b';

932 
ö±r
++;

935 *
sub
++ = '\t';

936 
ö±r
++;

939 
i
 = 3;

941 *
sub
 = 0;

943 i‡(*++
ö±r
 < '0' || *inptr > '7')

945 *
sub
 = (*sub << 3Ë| (*
ö±r
 - '0');

946 } --
i
 != 0);

947 
sub
++;

960 *
sub
++ = 
ESCAPE
;

962 *
sub
++ = *
ö±r
;

963 i‡(*
ö±r
 !
NL
)

964 
ö±r
++;

967 *
sub
++ = *
ö±r
++;

969 *
sub
 = '\0';

971 
ö±r
++;

972 
Skù_Whôe_S∑˚
;

973 i‡(*
ö±r
 == 'g') {

974 
ö±r
++;

978 
	}
}

982 
ös
 
	$P1
(*, 
°r
)

984 *
˝
;

985 
ed_löe_t
 *
√w
, *
nxt
;

986 
Àn
;

989 
˝
 = 
°r
; *˝ && *˝ !
NL
; cp++);

990 
Àn
 = 
˝
 - 
°r
;

993 i‡((
√w
 = (
ed_löe_t
 *Ë
	`DXALLOC
(”d_löe_tË+ 
Àn
,

994 
TAG_ED
, "ös:Çew")Ë=
NULL
)

995  (
MEM_FAIL
);

997 
√w
->
l_°©
 = 0;

998 
	`°∫˝y
(
√w
->
l_buff
, 
°r
, 
Àn
);

999 
√w
->
l_buff
[
Àn
] = 
EOS
;

1000 
nxt
 = 
	`gë√xçå
(
P_CURPTR
);

1001 
	`ªlök
(
P_CURPTR
, 
√w
,Çew, 
nxt
);

1002 
	`ªlök
(
√w
, 
nxt
, 
P_CURPTR
,Çew);

1003 
P_LASTLN
++;

1004 
P_CURLN
++;

1005 
P_CURPTR
 = 
√w
;

1006 
°r
 = 
˝
 + 1;

1008 *
˝
 !
EOS
);

1010 
	}
}

1015 
joö
 
	$P2
(, 
fú°
, , 
œ°
)

1017 
buf
[
ED_MAXLINE
];

1018 *
˝
 = 
buf
, *
°r
;

1019 
ed_löe_t
 *
lö
;

1020 
num
;

1022 i‡(
fú°
 <0 || fú° > 
œ°
 ||Üa° > 
P_LASTLN
)

1023  
BAD_LINE_RANGE
;

1024 i‡(
fú°
 =
œ°
) {

1025 
	`£tCurLn
(
fú°
);

1028 
lö
 = 
	`gë±r
(
fú°
);

1029 
num
 = 
fú°
;Çum <
œ°
;Çum++) {

1030 
°r
 = 
	`gëtxé
(
lö
);

1031 *
°r
) {

1032 i‡(
˝
 >
buf
 + 
ED_MAXLINE
 - 1) {

1033 
	`ED_OUTPUT
(
ED_DEST
, "lineÅooÜong\n");

1034  
ERR
;

1036 *
˝
++ = *
°r
++;

1038 
lö
 = 
	`gë√xçå
(lin);

1040 *
˝
 = 
EOS
;

1041 
	`dñ
(
fú°
, 
œ°
);

1042 i‡(
	`ös
(
buf
) < 0)

1043  
MEM_FAIL
;

1044 
P_FCHANGED
 = 
TRUE
;

1046 
	}
}

1053 
move
 
	$P1
(, 
num
)

1055 
ønge
;

1056 
ed_löe_t
 *
bef‹e
, *
fú°
, *
œ°
, *
a·î
;

1058 i‡(
P_LINE1
 <
num
 &&Çum <
P_LINE2
)

1059  
BAD_LINE_RANGE
;

1060 
ønge
 = 
P_LINE2
 - 
P_LINE1
 + 1;

1061 
bef‹e
 = 
	`gë±r
(
	`¥ev 
(
P_LINE1
));

1062 
fú°
 = 
	`gë±r
(
P_LINE1
);

1063 
œ°
 = 
	`gë±r
(
P_LINE2
);

1064 
a·î
 = 
	`gë±r
(
	`√xén
(
P_LINE2
));

1066 
	`ªlök
(
bef‹e
, 
a·î
, before,áfter);

1067 
P_LASTLN
 -
ønge
;

1068 i‡(
num
 > 
P_LINE1
)

1069 
num
 -
ønge
;

1071 
bef‹e
 = 
	`gë±r
(
num
);

1072 
a·î
 = 
	`gë±r
(
	`√xén
(
num
));

1073 
	`ªlök
(
bef‹e
, 
fú°
, 
œ°
, 
a·î
);

1074 
	`ªlök
(
œ°
, 
a·î
, 
bef‹e
, 
fú°
);

1075 
P_LASTLN
 +
ønge
;

1076 
	`£tCurLn
(
num
 + 
ønge
);

1078 
	}
}

1081 
å™s„r
 
	$P1
(, 
num
)

1083 
mid
, 
lö
, 
¡øns
;

1085 i‡(
P_LINE1
 <0 || P_LINE1 > 
P_LINE2
)

1086  (
ERR
);

1088 
mid
 = 
num
 < 
P_LINE2
 ?Çum : P_LINE2;

1090 
	`£tCurLn
(
num
);

1091 
¡øns
 = 0;

1093 
lö
 = 
P_LINE1
;Üö <
mid
;Üin++) {

1094 i‡(
	`ös
(
	`gëtxt
(
lö
)) < 0)

1095  
MEM_FAIL
;

1096 
¡øns
++;

1098 
lö
 +
¡øns
;

1099 
P_LINE2
 +
¡øns
;

1101 ; 
lö
 <
P_LINE2
;Üin += 2) {

1102 i‡(
	`ös
(
	`gëtxt
(
lö
)) < 0)

1103  
MEM_FAIL
;

1104 
P_LINE2
++;

1107 
	}
}

1112 
ªgexp
 *
	$›ç©
()

1114 
dñim
, 
°r
[
MAXPAT
], *
˝
;

1116 
dñim
 = *
ö±r
++;

1117 i‡(
dñim
 =
NL
)

1118  
P_OLDPAT
;

1119 
˝
 = 
°r
;

1120 *
ö±r
 !
dñim
 && *ö±∏!
NL
 && *ö±∏!
EOS
 && 
˝
 < 
°r
 + 
MAXPAT
 - 1) {

1121 i‡(*
ö±r
 =
ESCAPE
 && i≈å[1] !
NL
)

1122 *
˝
++ = *
ö±r
++;

1123 *
˝
++ = *
ö±r
++;

1126 *
˝
 = 
EOS
;

1127 i‡(*
°r
 =
EOS
)

1128  (
P_OLDPAT
);

1129 i‡(
P_OLDPAT
)

1130 
	`FREE
((*Ë
P_OLDPAT
);

1131  
P_OLDPAT
 = 
	`ªgcomp
((*)
°r
, 
P_EXCOMPAT
);

1132 
	}
}

1134 
	$£t
()

1136 
w‹d
[16];

1137 
i
;

1138 
tbl
 *
limô
;

1140 i‡(*(++
ö±r
) != 't') {

1141 i‡(*
ö±r
 !
SP
 && *ö±∏!
HT
 && *ö±∏!
NL
)

1142  
SYNTAX_ERROR
;

1144 
ö±r
++;

1146 i‡((*
ö±r
 =
NL
)) {

1147 
	`ED_OUTPUTV
(
ED_DEST
, "ed vîsi⁄ %d.%d\n", 
vîsi⁄
 / 100, version % 100);

1148 
limô
 = 
tbl
 + ((tbl) / (tbl));

1149 
t
 = 
tbl
;Å < 
limô
;Å += 2) {

1150 
	`ED_OUTPUTV
(
ED_DEST
, "%s:%†", 
t
->
t_°r
,

1151 
P_FLAGS
 & 
t
->
t_‹_mask
 ? "on" : "off");

1153 
	`ED_OUTPUTV
(
ED_DEST
, "\nshi·width:%d\n", 
P_SHIFTWIDTH
);

1156 
Skù_Whôe_S∑˚
;

1157 
i
 = 0; *
ö±r
 !
SP
 && *ö±∏!
HT
 && *ö±∏!
NL
;) {

1158 i‡(
i
 = 
w‹d
 - 1) {

1159 
	`ED_OUTPUT
(
ED_DEST
, "TooÜongárgumentÅo 'set'!\n");

1162 
w‹d
[
i
++] = *
ö±r
++;

1164 
w‹d
[
i
] = 
EOS
;

1165 
limô
 = 
tbl
 + ((tbl) / (tbl));

1166 
t
 = 
tbl
;Å < 
limô
;Å++) {

1167 i‡(
	`°rcmp
(
w‹d
, 
t
->
t_°r
) == 0) {

1168 
P_FLAGS
 = (P_FLAGS & 
t
->
t_™d_mask
Ë|Å->
t_‹_mask
;

1172 i‡(!
	`°rcmp
(
w‹d
, "save")) {

1173 
svÆue_t
 *
ªt
;

1175 i‡(
P_RESTRICT
)

1176  (
SET_FAIL
);

1177 
	`push_obje˘
(
cuºít_edô‹
);

1178 
	`push_numbî
(
P_SHIFTWIDTH
 | 
P_FLAGS
);

1179 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_SAVE_ED_SETUP
, 2);

1180 i‡(
	`MASTER_APPROVED
(
ªt
))

1183 i‡(!
	`°rcmp
(
w‹d
, "shiftwidth")) {

1184 
Skù_Whôe_S∑˚
;

1185 i‡(
	`uisdigô
(*
ö±r
)) {

1186 
P_SHIFTWIDTH
 = *
ö±r
 - '0';

1190  
SET_FAIL
;

1191 
	}
}

1193 #i‚de‡
ªlök


1194 
ªlök
 
	$P4
(
LINE
 *, 
a
, LINE *, 
x
, LINE *, 
y
, LINE *, 
b
)

1196 
x
->
l_¥ev
 = 
a
;

1197 
y
->
l_√xt
 = 
b
;

1198 
	}
}

1202 
	$£t_ed_buf
()

1204 
	`ªlök
(&
P_LINE0
, &P_LINE0, &P_LINE0, &P_LINE0);

1205 
P_CURLN
 = 
P_LASTLN
 = 0;

1206 
P_CURPTR
 = &
P_LINE0
;

1207 
	}
}

1212 
sub°
 
	$P4
(
ªgexp
 *, 
∑t
, *, 
sub
, , 
gÊg
, , 
pÊag
)

1214 
nchngd
 = 0;

1215 *
txçå
;

1216 *
√w
, *
ﬁd
, 
buf
[
ED_MAXLINE
];

1217 
•a˚
;

1218 
°ûl_ru¬ög
 = 1;

1219 
ed_löe_t
 *
œ°löe
 = 
	`gë±r
(
P_LINE2
);

1221 i‡(
P_LINE1
 <= 0)

1222  (
SUB_FAIL
);

1223 
nchngd
 = 0;

1225 
	`£tCurLn
(
	`¥ev 
(
P_LINE1
)); 
°ûl_ru¬ög
;) {

1226 
	`√xtCurLn
();

1227 
√w
 = 
buf
;

1228 
•a˚
 = 
ED_MAXLINE
;

1229 i‡(
P_CURPTR
 =
œ°löe
)

1230 
°ûl_ru¬ög
 = 0;

1231 i‡(
	`ªgexec
(
∑t
, 
txçå
 = 
	`gëtxé
(
P_CURPTR
))) {

1234 
diff
 = 
∑t
->
°¨ç
[0] - 
txçå
;

1236 i‡((
•a˚
 -
diff
) < 0)

1237  
SUB_FAIL
;

1238 
	`°∫˝y
(
√w
, 
txçå
, 
diff
);

1239 
√w
 +
diff
;

1241 
ﬁd
 = 
√w
;

1242 
√w
 = 
	`ªgsub
(
∑t
, 
sub
,Çew, 
•a˚
);

1243 i‡(!
√w
 || (
•a˚
 -√w - 
ﬁd
) < 0)

1244  
SUB_FAIL
;

1245 i‡(
txçå
 =
∑t
->
ídp
[0]) {

1247 i‡(!*
txçå
)

1249 i‡(--
•a˚
 < 0)

1250  
SUB_FAIL
;

1251 *
√w
++ = *
txçå
++;

1253 
txçå
 = 
∑t
->
ídp
[0];

1255 
gÊg
 && !
∑t
->
ªg™ch
 && 
	`ªgexec
’©, 
txçå
));

1262 i‡((
•a˚
 -
	`°æí
(
txçå
) + 1) < 0)

1263  
SUB_FAIL
;

1264 
	`°r˝y
(
√w
, 
txçå
);

1265 
	`dñ
(
P_CURLN
, P_CURLN);

1266 i‡(
	`ös
(
buf
) < 0)

1267  
MEM_FAIL
;

1268 
nchngd
++;

1269 i‡(
pÊag
)

1270 
	`d›∫t
(
P_CURLN
, P_CURLN);

1273  ((
nchngd
 =0 && !
gÊg
Ë? 
SUB_FAIL
 :Çchngd);

1274 
	}
}

1281 
	#îr‹
(
s
Ë{ 
	`ED_OUTPUTV
(
ED_DEST
, s, 
löío
); 
îrs
++; ; }

	)

1282 
	#boﬁ
 

	)

1283 
	glöío
, 
	gîrs
;

1284 
	gshi
;

1294 
shi·
 
	$P1
(*, 
ãxt
)

1296 
ödít_ödex
;

1299 
ödít_ödex
 = 0;

1300 *
ãxt
 == ' ' || *text == '\t') {

1301 i‡(*
ãxt
++ == ' ') {

1302 
ödít_ödex
++;

1304 
ödít_ödex
 = (indent_index + 8) & ~7;

1308 i‡(*
ãxt
 != '\0') {

1309 
ödít_ödex
 +
shi
;

1310 i‡(
ödít_ödex
 < 
ED_MAXLINE
) {

1311 
buf„r
[
ED_MAXLINE
];

1312 *
p
;

1314 
p
 = 
buf„r
;

1316 
ödít_ödex
 >= 8) {

1317 *
p
++ = '\t';

1318 
ödít_ödex
 -= 8;

1320 
ödít_ödex
 > 0) {

1321 *
p
++ = ' ';

1322 --
ödít_ödex
;

1324 i‡(
p
 - 
buf„r
 + 
	`°æí
(
ãxt
Ë< 
ED_MAXLINE
) {

1325 
	`°r˝y
(
p
, 
ãxt
);

1326 
	`dñ
(
löío
,Üineno);

1327 
	`ös
(
buf„r
);

1331 
	`îr‹
("Result of shift would beÅooÜong,Üine %d\n");

1333 
	}
}

1335 
	#STACKSZ
 1024

	)

1338 
	#SEMICOLON
 0

	)

1339 
	#LBRACKET
 1

	)

1340 
	#RBRACKET
 2

	)

1341 
	#LOPERATOR
 3

	)

1342 
	#ROPERATOR
 4

	)

1343 
	#LHOOK
 5

	)

1344 
	#LHOOK2
 6

	)

1345 
	#RHOOK
 7

	)

1346 
	#TOKEN
 8

	)

1347 
	#ELSE
 9

	)

1348 
	#IF
 10

	)

1349 
	#FOR
 11

	)

1350 
	#WHILE
 12

	)

1351 
	#XDO
 13

	)

1352 
	#XEOT
 14

	)

1354 *
	g°ack
, *
	g°ackbŸ
;

1355 *
	göd
, *
	gödbŸ
;

1356 
	gquŸe
;

1357 
boﬁ
 
	gö_µc⁄åﬁ
, 
	ga·î_keyw‹d_t
, 
	gö_mblock
;

1358 
	gö_commít
;

1359 
	gœ°_ãrm
[
ED_MAXLINE
+5];

1360 
	gœ°_ãrm_Àn
;

1370 
ödít
 
	$P1
(*, 
buf
)

1372 
f
[] =

1374 
g
[] =

1376 
ãxt
[
ED_MAXLINE
], 
idít
[ED_MAXLINE];

1377 *
p
, *
•
;

1378 *
ù
;

1379 
ödít_ödex
;

1380 
t›
, 
tokí
;

1381 *
°¨t
;

1382 
boﬁ
 
do_ödít
;

1389 
	`°r˝y
(
ãxt
, 
buf
);

1391 
do_ödít
 = 
FALSE
;

1392 
ödít_ödex
 = 0;

1393 
p
 = 
ãxt
;

1396 i‡(
quŸe
 != '\0') {

1397 
shi
 = 0;

1398 } i‡(
ö_µc⁄åﬁ
 || *
p
 == '#') {

1399 *
p
 != '\0') {

1400 i‡(*
p
 == '\\' && *++p == '\0') {

1401 
ö_µc⁄åﬁ
 = 
TRUE
;

1404 
p
++;

1406 
ö_µc⁄åﬁ
 = 
FALSE
;

1408 } i‡(
ö_mblock
) {

1409 i‡(!
	`°∫cmp
(
p
, 
œ°_ãrm
, 
œ°_ãrm_Àn
)) {

1410 
ö_mblock
 = 
FALSE
;

1411 
p
+=
œ°_ãrm_Àn
;

1416 *
p
 == ' ' || *p == '\t') {

1417 i‡(*
p
++ == ' ') {

1418 
ödít_ödex
++;

1420 
ödít_ödex
 = (indent_index + 8) & ~7;

1423 i‡(*
p
 == '\0') {

1424 
	`dñ
(
löío
,Üineno);

1425 
	`ös
(
p
);

1427 } i‡(
ö_commít
) {

1428 
	`shi·
(
ãxt
);

1430 
do_ödít
 = 
TRUE
;

1435 
°¨t
 = 
p
;

1436 *
p
 != '\0') {

1439 
idít
[0] = '\0';

1440 i‡(
ö_commít
) {

1442 *
p
 != '*') {

1443 i‡(*
p
 == '\0') {

1444 i‡(
ö_commít
 == 2) in_comment = 0;

1447 
p
++;

1449 *
p
 == '*') {

1450 
p
++;

1452 i‡(*
p
 == '/') {

1453 
ö_commít
 = 0;

1454 
p
++;

1458 } i‡(
quŸe
 != '\0') {

1461 i‡(*
p
 =
quŸe
) {

1462 
quŸe
 = '\0';

1463 
p
++;

1465 } i‡(*
p
 == '\0') {

1466 
	`îr‹
("Unterminated string inÜine %d\n");

1467 } i‡(*
p
 == '\\' && *++p == '\0') {

1470 
p
++;

1472 
tokí
 = 
TOKEN
;

1475 *
p
++) {

1482 
quŸe
 = 
p
[-1];

1486 
j
 = 0;

1488 i‡(*
p
 == '@')Ö++;

1489 
	`uiß um
(*
p
Ë|| *∞='_'Ë
œ°_ãrm
[
j
++] = *p++;

1490 
œ°_ãrm
[
j
] = '\0';

1491 
œ°_ãrm_Àn
 = 
j
;

1492 
ö_mblock
 = 
TRUE
;

1496 i‡(*
p
 == '*' || *p == '/') {

1497 
ö_commít
 = (*
p
 == '*') ? 1 : 2;

1498 i‡(
do_ödít
) {

1500 
shi
 = *
öd
 - 
ödít_ödex
;

1501 
	`shi·
(
ãxt
);

1502 
do_ödít
 = 
FALSE
;

1504 *
q
;

1505 
ödex2
;

1512 
ödex2
 = *
öd
;

1513 
q
 = 
°¨t
; q < 
p
 - 1;) {

1514 i‡(*
q
++ == '\t') {

1515 
ödít_ödex
 = (indent_index + 8) & ~7;

1516 
ödex2
 = (index2 + 8) & ~7;

1518 
ödít_ödex
++;

1519 
ödex2
++;

1522 
shi
 = 
ödex2
 - 
ödít_ödex
;

1524 
p
++;

1527 
tokí
 = 
TOKEN
;

1531 
tokí
 = 
LBRACKET
;

1535 i‡(
a·î_keyw‹d_t
) {

1541 
tokí
 = 
LOPERATOR
;

1544 i‡(*
p
 == '{' || *p == '[' || (*p == ':' &&Ö[1] != ':')) {

1545 
p
++;

1546 
tokí
 = 
LHOOK2
;

1550 
tokí
 = 
LHOOK
;

1554 i‡(*
p
 == ')') {

1555 
p
++;

1556 
tokí
 = 
RHOOK
;

1559 
tokí
 = 
TOKEN
;

1562 i‡(*
p
 != ')') {

1563 
tokí
 = 
RBRACKET
;

1567 
p
++;

1568 
tokí
 = 
RHOOK
;

1571 i‡(*
p
 == ')' &&

1572 (*
°ack
 =
LHOOK2
 || (*°ack !
XEOT
 &&

1573 (
°ack
[1] =
LHOOK2
 ||

1574 (
°ack
[1] =
ROPERATOR
 && sèck[2] =
LHOOK2
))))) {

1575 
p
++;

1578 
tokí
 = 
RHOOK
;

1582 
tokí
 = 
SEMICOLON
;

1586 i‡(
	`uißÕha
(*--
p
) || *p == '_') {

1587 *
q
;

1590 
q
 = 
idít
;

1592 *
q
++ = *
p
++;

1593 } 
	`uiß um
(*
p
) || *p == '_');

1594 *
q
 = '\0';

1596 i‡(
	`°rcmp
(
idít
, "if") == 0)

1597 
tokí
 = 
IF
;

1598 i‡(
	`°rcmp
(
idít
, "else") == 0)

1599 
tokí
 = 
ELSE
;

1600 i‡(
	`°rcmp
(
idít
, "for") == 0)

1601 
tokí
 = 
FOR
;

1602 i‡(
	`°rcmp
(
idít
, "while") == 0)

1603 
tokí
 = 
WHILE
;

1604 i‡(
	`°rcmp
(
idít
, "do") == 0)

1605 
tokí
 = 
XDO
;

1607 
tokí
 = 
TOKEN
;

1610 
p
++;

1611 
tokí
 = 
TOKEN
;

1618 
•
 = 
°ack
;

1619 
ù
 = 
öd
;

1621 
t›
 = *
•
;

1622 i‡(
t›
 =
LOPERATOR
 && 
tokí
 =
RHOOK
) {

1624 
tokí
 = 
ROPERATOR
;

1626 i‡(
f
[
t›
] <
g
[
tokí
]) {

1627 
i
;

1629 i‡(
•
 =
°ackbŸ
) {

1631 
	`îr‹
("NestingÅoo deep inÜine %d\n");

1634 
i
 = *
ù
;

1636 i‡((
tokí
 =
LBRACKET
 &&

1637 (*
•
 =
ROPERATOR
 || *• =
ELSE
 || *• =
XDO
)) ||

1638 
tokí
 =
RBRACKET
 ||

1639 (
tokí
 =
IF
 && *
•
 =
ELSE
)) {

1641 
i
 -
P_SHIFTWIDTH
;

1642 } i‡(
tokí
 =
RHOOK
 ||Åokí =
ROPERATOR
) {

1643 
i
 -
P_SHIFTWIDTH
 / 2;

1646 i‡(
do_ödít
) {

1647 
shi
 = 
i
 - 
ödít_ödex
;

1648 i‡(
tokí
 =
TOKEN
 && *
•
 =
LBRACKET
 &&

1649 (
	`°rcmp
(
idít
, "case") == 0 ||

1650 
	`°rcmp
(
idít
, "default") == 0)) {

1652 
shi
 -
P_SHIFTWIDTH
;

1654 
	`shi·
(
ãxt
);

1655 
do_ödít
 = 
FALSE
;

1658 
tokí
) {

1659 
LBRACKET
:

1660 
ROPERATOR
:

1661 
ELSE
:

1662 
XDO
:

1665 
i
 +
P_SHIFTWIDTH
;

1668 
LOPERATOR
:

1669 
LHOOK
:

1670 
LHOOK2
:

1673 
i
 +
P_SHIFTWIDTH
 / 2;

1676 
SEMICOLON
:

1679 i‡(*
•
 =
ROPERATOR
 || *• =
ELSE
) {

1680 
i
 -
P_SHIFTWIDTH
;

1686 *--
•
 = 
tokí
;

1687 *--
ù
 = 
i
;

1692 
t›
 = *
•
++;

1693 
ù
++;

1694 } 
f
[(Ë*
•
] >
g
[
t›
]);

1696 
°ack
 = 
•
;

1697 
öd
 = 
ù
;

1698 
a·î_keyw‹d_t
 = (
tokí
 >
IF
);

1700 
	}
}

1702 
	$ödít_code
()

1704 
s
[
STACKSZ
];

1705 
i
[
STACKSZ
];

1706 
œ°
;

1709 
°ackbŸ
 = 
s
;

1710 
ödbŸ
 = 
i
;

1711 
°ack
 = 
°ackbŸ
 + 
STACKSZ
 - 1;

1712 *
°ack
 = 
XEOT
;

1713 
öd
 = 
ödbŸ
 + 
STACKSZ
 - 1;

1714 *
öd
 = 0;

1716 
quŸe
 = '\0';

1717 
ö_µc⁄åﬁ
 = 
FALSE
;

1718 
ö_commít
 = 0;

1719 
ö_mblock
 = 0;

1721 
P_FCHANGED
 = 
TRUE
;

1722 
œ°
 = 
P_LASTLN
;

1723 
îrs
 = 0;

1725 
löío
 = 1;Üöíÿ<
œ°
;Üineno++) {

1726 
	`£tCurLn
(
löío
);

1727 
	`ödít
(
	`gëtxé
(
P_CURPTR
));

1728 i‡(
îrs
 != 0) {

1729  
ERR
;

1734 
	}
}

1736 #unde‡
boﬁ


1737 #unde‡
îr‹


1746 
docmd
 
	$P1
(, 
glob
)

1748 
rhs
[
MAXPAT
];

1749 
ªgexp
 *
sub∑t
;

1750 
c
, 
îr
, 
löe3
;

1751 
≠Êg
, 
pÊag
, 
gÊag
;

1752 
nchng
;

1753 *
Âå
;

1754 
°
;

1756 
pÊag
 = 
FALSE
;

1757 
Skù_Whôe_S∑˚
;

1759 
c
 = *
ö±r
++;

1760 
c
) {

1761 
NL
:

1762 i‡(
P_NLINES
 =0 && (
P_LINE2
 = 
	`√xén
(
P_CURLN
)) == 0)

1763  
END_OF_FILE
;

1764 i‡(
P_NLINES
 == 2) {

1765 i‡(
P_LINE1
 > 
P_LINE2
 || P_LINE1 <= 0)

1766  
BAD_LINE_RANGE
;

1767 i‡((
°
 = 
	`d›∫t
(
P_LINE1
, 
P_LINE2
)))

1768  
°
;

1771 
	`£tCurLn
(
P_LINE2
);

1775 
	`ED_OUTPUTV
(
ED_DEST
, "%d\n", 
P_LINE2
);

1781 
P_CUR_AUTOIND
 = 
c
 ='A' ? !
P_AUTOINDFLG
 : P_AUTOINDFLG;

1782 i‡(*
ö±r
 !
NL
)

1783  
SYNTAX_ERROR
;

1784 i‡(
P_NLINES
 > 1)

1785  
RANGE_ILLEGAL
;

1787 i‡(
P_CUR_AUTOIND
)

1788 
	`cou¡_bœnks
(
P_LINE1
);

1789 i‡((
°
 = 
	`≠≥nd
(
P_LINE1
, 
glob
)) < 0)

1790  
°
;

1791 
P_FCHANGED
 = 
TRUE
;

1795 i‡(*
ö±r
 !
NL
)

1796  
SYNTAX_ERROR
;

1798 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

1799  
BAD_LINE_RANGE
;

1801 
P_CUR_AUTOIND
 = 
P_AUTOINDFLG
;

1802 i‡(
P_AUTOINDFLG
)

1803 
	`cou¡_bœnks
(
P_LINE1
);

1804 i‡((
°
 = 
	`dñ
(
P_LINE1
, 
P_LINE2
)) < 0)

1805  
°
;

1806 i‡((
°
 = 
	`≠≥nd
(
P_CURLN
, 
glob
)) < 0)

1807  
°
;

1808 
P_FCHANGED
 = 
TRUE
;

1812 i‡(*
ö±r
 !
NL
)

1813  
SYNTAX_ERROR
;

1815 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

1816  
BAD_LINE_RANGE
;

1818 i‡((
°
 = 
	`dñ
(
P_LINE1
, 
P_LINE2
)) < 0)

1819  
°
;

1820 i‡(
	`√xén
(
P_CURLN
) != 0)

1821 
	`√xtCurLn
();

1822 i‡(
P_DPRINT
)

1823 
	`d›∫t
(
P_CURLN
, P_CURLN);

1824 
P_FCHANGED
 = 
TRUE
;

1828 i‡(
P_RESTRICT
)

1829  
IS_RESTRICTED
;

1830 i‡(
P_NLINES
 > 0)

1831  
LINE_OR_RANGE_ILL
;

1832 i‡(
P_FCHANGED
)

1833  
CHANGED
;

1836 i‡(
P_RESTRICT
)

1837  
IS_RESTRICTED
;

1838 i‡(
P_NLINES
 > 0)

1839  
LINE_OR_RANGE_ILL
;

1841 i‡(*
ö±r
 !' ' && *ö±∏!
HT
 && *ö±∏!
NL
)

1842  
SYNTAX_ERROR
;

1844 i‡((
Âå
 = 
	`gë‚
(0)Ë=
NULL
)

1845  
FILE_NAME_ERROR
;

1847 
	`˛rbuf
();

1848 (Ë
	`d‹ód
(0, 
Âå
);

1850 
	`°r˝y
(
P_FNAME
, 
Âå
);

1851 
P_FCHANGED
 = 
FALSE
;

1855 i‡(
P_RESTRICT
)

1856  
IS_RESTRICTED
;

1857 i‡(
P_NLINES
 > 0)

1858  
LINE_OR_RANGE_ILL
;

1860 i‡(*
ö±r
 !' ' && *ö±∏!
HT
 && *ö±∏!
NL
)

1861  
SYNTAX_ERROR
;

1863 
Âå
 = 
	`gë‚
(0);

1865 i‡(
P_NOFNAME
)

1866 
	`ED_OUTPUTV
(
ED_DEST
, "/%s\n", 
P_FNAME
);

1868 i‡(
Âå
 =
NULL
)

1869  
FILE_NAME_ERROR
;

1870 
	`°r˝y
(
P_FNAME
, 
Âå
);

1876 i‡(*
ö±r
 !
NL
)

1877  
SYNTAX_ERROR
;

1878 i‡(
P_NLINES
 > 1)

1879  
RANGE_ILLEGAL
;

1881 
P_CUR_AUTOIND
 = 
P_AUTOINDFLG
;

1882 i‡(
P_AUTOINDFLG
)

1883 
	`cou¡_bœnks
(
P_LINE1
);

1884 i‡((
°
 = 
	`≠≥nd
(
	`¥ev 
(
P_LINE1
), 
glob
)) < 0)

1885  
°
;

1886 
P_FCHANGED
 = 
TRUE
;

1890 i‡(*
ö±r
 !
NL
 || 
	`deÊt
(
P_CURLN
, P_CURLN + 1) < 0)

1891  
SYNTAX_ERROR
;

1893 i‡((
°
 = 
	`joö
(
P_LINE1
, 
P_LINE2
)) < 0)

1894  
°
;

1898 
Skù_Whôe_S∑˚
;

1900 i‡(*
ö±r
 < 'a' || *inptr > 'z')

1901  
MARK_A_TO_Z
;

1902 
c
 = *
ö±r
++;

1904 i‡(*
ö±r
 !' ' && *ö±∏!
HT
 && *ö±∏!
NL
)

1905  
SYNTAX_ERROR
;

1907 
P_MARK
[
c
 - 'a'] = 
P_LINE1
;

1911 i‡(*
ö±r
 !
NL
)

1912  
SYNTAX_ERROR
;

1913 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

1914  
BAD_LINE_RANGE
;

1915 i‡((
°
 = 
	`dﬁ°
(
P_LINE1
, 
P_LINE2
)) < 0)

1916  
°
;

1920 i‡((
löe3
 = 
	`gë⁄e
()) < 0)

1921  
löe3
;

1922 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

1923  
BAD_LINE_RANGE
;

1924 i‡((
°
 = 
	`move
(
löe3
)) < 0)

1925  
°
;

1926 
P_FCHANGED
 = 
TRUE
;

1930 i‡(*
ö±r
 !
NL
)

1931  
SYNTAX_ERROR
;

1932 i‡(
P_NFLG
)

1933 
P_FLAGS
 &~
NFLG_MASK
;

1935 
P_FLAGS
 |
NFLG_MASK
;

1936 
	`ED_OUTPUTV
(
ED_DEST
, "number %s,Üist %s\n",

1937 
P_NFLG
 ? "⁄" : "off", 
P_LFLG
 ? "on" : "off");

1941 i‡(
P_NLINES
 > 0)

1942  
LINE_OR_RANGE_ILL
;

1943 i‡(*
ö±r
 !
NL
)

1944  
SYNTAX_ERROR
;

1945 
	`ED_OUTPUT
(
ED_DEST
, "IndentingÉntire code...\n");

1946 i‡(
	`ödít_code
())

1947 
	`ED_OUTPUT
(
ED_DEST
, "Indentation halted.\n");

1949 
	`ED_OUTPUT
(
ED_DEST
, "Indentation complete.\n");

1954 
	`¥öt_hñp
(*(
ö±r
++));

1959 i‡(*
ö±r
 !
NL
)

1960  
SYNTAX_ERROR
;

1961 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

1962  
BAD_LINE_RANGE
;

1963 i‡((
°
 = 
	`d›∫t
(
P_LINE1
, 
P_LINE2
)) < 0)

1964  
°
;

1968 i‡(
P_FCHANGED
)

1969  
CHANGED
;

1972 i‡(*
ö±r
 !
NL
)

1973  
SYNTAX_ERROR
;

1974 i‡(
glob
)

1975  
SYNTAX_ERROR
;

1976 i‡(
P_NLINES
 > 0)

1977  
LINE_OR_RANGE_ILL
;

1978 
	`˛rbuf
();

1979  (
EOF
);

1982 i‡(
P_RESTRICT
)

1983  
IS_RESTRICTED
;

1984 i‡(
P_NLINES
 > 1)

1985  
RANGE_ILLEGAL
;

1987 i‡(
P_NLINES
 == 0)

1988 
P_LINE2
 = 
P_LASTLN
;

1991 i‡(*
ö±r
 !' ' && *ö±∏!
HT
 && *ö±∏!
NL
)

1992  
SYNTAX_ERROR
;

1994 i‡((
Âå
 = 
	`gë‚
(0)Ë=
NULL
)

1995  
FILE_NAME_ERROR
;

1997 i‡((
îr
 = 
	`d‹ód
(
P_LINE2
, 
Âå
)) < 0)

1998  (
îr
);

1999 
P_FCHANGED
 = 
TRUE
;

2003 i‡(*
ö±r
 == 'e')

2004  (
	`£t
());

2005 
Skù_Whôe_S∑˚
;

2006 i‡((
sub∑t
 = 
	`›ç©
()Ë=
NULL
)

2007  
SUB_BAD_PATTERN
;

2008 i‡((
gÊag
 = 
	`gërhs
(
rhs
)) < 0)

2009  
SUB_BAD_REPLACEMENT
;

2010 i‡(*
ö±r
 == 'p')

2011 
pÊag
++;

2012 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

2013  
BAD_LINE_RANGE
;

2014 i‡((
nchng
 = 
	`sub°
(
sub∑t
, 
rhs
, 
gÊag
, 
pÊag
)) < 0)

2015  
nchng
;

2016 i‡(
nchng
)

2017 
P_FCHANGED
 = 
TRUE
;

2018 i‡(
nchng
 =1 && 
P_PFLG
) {

2019 i‡((
°
 = 
	`d›∫t
(
P_CURLN
, P_CURLN)) < 0)

2020  
°
;

2025 i‡((
löe3
 = 
	`gë⁄e
()) < 0)

2026  
BAD_DESTINATION
;

2027 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

2028  
BAD_LINE_RANGE
;

2029 i‡((
°
 = 
	`å™s„r
(
löe3
)) < 0)

2030  
°
;

2031 
P_FCHANGED
 = 
TRUE
;

2036 
≠Êg
 = (
c
 == 'W');

2038 i‡(*
ö±r
 !
NL
 && 
P_RESTRICT
)

2039  
IS_RESTRICTED
;

2040 i‡(*
ö±r
 !' ' && *ö±∏!
HT
 && *ö±∏!
NL
)

2041  
SYNTAX_ERROR
;

2043 i‡((
Âå
 = 
	`gë‚
(1)Ë=
NULL
)

2044  
FILE_NAME_ERROR
;

2046 i‡(
	`deÊt
(1, 
P_LASTLN
) < 0)

2047  
BAD_LINE_RANGE
;

2048 i‡((
°
 = 
	`dowrôe
(
P_LINE1
, 
P_LINE2
, 
Âå
, 
≠Êg
)) < 0)

2049  
°
;

2050 
P_FCHANGED
 = 
FALSE
;

2054 i‡(*
ö±r
 =
NL
 && 
P_NLINES
 =0 && !
glob
) {

2055 i‡((
Âå
 = 
	`gë‚
(1)Ë=
NULL
)

2056  
FILE_NAME_ERROR
;

2057 i‡(
	`dowrôe
(1, 
P_LASTLN
, 
Âå
, 0) >= 0) {

2058 
	`˛rbuf
();

2059  (
EOF
);

2062 i‡(
P_NLINES
)

2063  
LINE_OR_RANGE_ILL
;

2064  
SYNTAX_ERROR
;

2067 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

2068  
BAD_LINE_RANGE
;

2070 *
ö±r
) {

2072 i‡((
°
 = 
	`d›∫t
(
P_LINE1
 - 21, P_LINE1)) < 0)

2073  
°
;

2077 i‡((
°
 = 
	`d›∫t
(
P_LINE1
 - 11, P_LINE1 + 10)) < 0)

2078  
°
;

2083 i‡((
°
 = 
	`d›∫t
(
P_LINE1
, P_LINE1 + 21)) < 0)

2084  
°
;

2090 i‡(
	`deÊt
(
P_CURLN
, P_CURLN) < 0)

2091  
BAD_LINE_RANGE
;

2093 *
ö±r
) {

2095 i‡((
°
 = 
	`d›∫t
(
P_LINE1
 - 41, P_LINE1)) < 0)

2096  
°
;

2100 i‡((
°
 = 
	`d›∫t
(
P_LINE1
 - 21, P_LINE1 + 20)) < 0)

2101  
°
;

2106 i‡((
°
 = 
	`d›∫t
(
P_LINE1
, P_LINE1 + 41)) < 0)

2107  
°
;

2112  (
UNRECOG_COMMAND
);

2116 
	}
}

2119 
	$doglob
()

2121 
lö
, 
°©us
 = 0;

2122 *
cmd
;

2123 
ed_löe_t
 *
±r
;

2125 
cmd
 = 
ö±r
;

2128 
±r
 = 
	`gë±r
(1);

2129 
lö
 = 1;Üö <
P_LASTLN
;Üin++) {

2130 i‡(
±r
->
l_°©
 & 
LGLOB
)

2132 
±r
 = 
	`gë√xçå
(ptr);

2134 i‡(
lö
 > 
P_LASTLN
)

2137 
±r
->
l_°©
 &~
LGLOB
;

2138 
P_CURLN
 = 
lö
;

2139 
P_CURPTR
 = 
±r
;

2140 
ö±r
 = 
cmd
;

2141 i‡((
°©us
 = 
	`gël°
()Ë< 0 && sètu†!
NO_LINE_RANGE
)

2142  (
°©us
);

2143 i‡((
°©us
 = 
	`docmd
(1)) < 0)

2144  (
°©us
);

2146  (
P_CURLN
);

2147 
	}
}

2163 #ifde‡
OLD_ED


2164 
ed_°¨t
 
	$P5
(*, 
fûe_¨g
, *, 
wrôe_‚
, *, 
exô_‚
, , 
ª°ri˘ed
, 
obje˘_t
 *, 
exô_ob
)

2166 
svÆue_t
 *
£tup
;

2168 
ªgexp_u£r
 = 
ED_REGEXP
;

2169 i‡(!
comm™d_givî
)

2170 
	`îr‹
("No current user forÉd().\n");

2171 i‡(!
comm™d_givî
->
öãø˘ive
)

2172 
	`îr‹
("TriedÅo startánÉd session onáÇon-interactive user.\n");

2173 i‡(
comm™d_givî
->
öãø˘ive
->
ed_buf„r
)

2174 
	`îr‹
("TriedÅo startánÉd session, whenálreadyáctive.\n");

2176 
cuºít_ed_buf„r
 = 
comm™d_givî
->
öãø˘ive
->
ed_buf„r
 =

2177 
	`ALLOCATE
(
ed_buf„r_t
, 
TAG_ED
, "ed_start: ED_BUFFER");

2178 
	`mem£t
((*Ë
ED_BUFFER
, '\0', (
ed_buf„r_t
));

2180 
cuºít_edô‹
 = 
comm™d_givî
;

2182 
ED_BUFFER
->
Êags
 |
EIGHTBIT_MASK
;

2183 
ED_BUFFER
->
shi·width
 = 4;

2184 
	`push_obje˘
(
cuºít_edô‹
);

2185 
£tup
 = 
	`≠∂y_ma°î_ob
(
APPLY_RETRIEVE_ED_SETUP
, 1);

2186 i‡(
£tup
 && sëu∞!(
svÆue_t
 *)-1 &&

2187 
£tup
->
ty≥
 =
T_NUMBER
 && sëup->
u
.
numbî
) {

2188 
ED_BUFFER
->
Êags
 = 
£tup
->
u
.
numbî
 & 
ALL_FLAGS_MASK
;

2189 
ED_BUFFER
->
shi·width
 = 
£tup
->
u
.
numbî
 & 
SHIFTWIDTH_MASK
;

2191 
ED_BUFFER
->
CurPå
 = &ED_BUFFER->
Löe0
;

2193 #i‡
	`deföed
(
RESTRICTED_ED
Ë&& !deföed(
NO_WIZARDS
)

2194 i‡(
cuºít_edô‹
->
Êags
 & 
O_IS_WIZARD
) {

2195 
P_RESTRICT
 = 0;

2197 
P_RESTRICT
 = 1;

2200 i‡(
ª°ri˘ed
) {

2201 
P_RESTRICT
 = 1;

2203 i‡(
wrôe_‚
) {

2204 
ED_BUFFER
->
wrôe_‚
 = 
	`Æloc_c°rög
(write_fn, "ed_start");

2205 
exô_ob
->
ªf
++;

2207 
ED_BUFFER
->
wrôe_‚
 = 0;

2209 i‡(
exô_‚
) {

2210 
ED_BUFFER
->
exô_‚
 = 
	`Æloc_c°rög
(exit_fn, "ed_start");

2211 
exô_ob
->
ªf
++;

2213 
ED_BUFFER
->
exô_‚
 = 0;

2215 
ED_BUFFER
->
exô_ob
 =Éxit_ob;

2216 
	`£t_ed_buf
();

2222 i‡(
fûe_¨g


2223 && (
fûe_¨g
 =

2224 
	`check_vÆid_∑th
(
fûe_¨g
, 
cuºít_edô‹
,

2226 && !
	`d‹ód
(0, 
fûe_¨g
)) {

2227 
	`£tCurLn
(1);

2229 i‡(
fûe_¨g
) {

2230 
	`°∫˝y
(
P_FNAME
, 
fûe_¨g
, 
MAXFNAME
 - 1);

2231 
P_FNAME
[
MAXFNAME
 - 1] = 0;

2233 
	`ED_OUTPUT
(
ED_DEST
, "No file.\n");

2235 
	`£t_¥om±
(":");

2237 
	}
}

2240 #ifde‡
OLD_ED


2241 
ed_cmd
 
	$P1
(*, 
°r
)

2243 
°©us
 = 0;

2245 
ªgexp_u£r
 = 
ED_REGEXP
;

2246 
cuºít_ed_buf„r
 = 
comm™d_givî
->
öãø˘ive
->
ed_buf„r
;

2247 
cuºít_edô‹
 = 
comm™d_givî
;

2249 i‡(
P_MORE
) {

2250 
	`¥öt_hñp2
();

2253 i‡(
P_APPENDING
) {

2254 
	`m‹e_≠≥nd
(
°r
);

2258 
	`°∫˝y
(
ölö
, 
°r
, 
ED_MAXLINE
 - 2);

2259 
ölö
[
ED_MAXLINE
 - 2] = 0;

2260 
	`°rˇt
(
ölö
, "\n");

2262 
ö±r
 = 
ölö
;

2263 i‡((
°©us
 = 
	`gël°
()Ë>0 || sètu†=
NO_LINE_RANGE
) {

2264 i‡((
°©us
 = 
	`ckglob
()) != 0) {

2265 i‡(
°©us
 >0 && (°©u†
	`doglob
()) >= 0) {

2266 
	`£tCurLn
(
°©us
);

2270 i‡((
°©us
 = 
	`docmd
(0)) >= 0) {

2271 i‡(
°©us
 == 1)

2272 
	`d›∫t
(
P_CURLN
, P_CURLN);

2277 
	`ªp‹t_°©us
(
°©us
);

2278 
	}
}

2281 
ªp‹t_°©us
 
	$P1
(, 
°©us
) {

2282 
°©us
) {

2283 
EOF
:

2284 
	`ED_OUTPUT
(
ED_DEST
, "Exit fromÉd.\n");

2285 
	`‰ì_ed_buf„r
(
cuºít_edô‹
);

2287 
CHANGED
:

2288 
	`ED_OUTPUT
(
ED_DEST
, "File has been changed.\n");

2290 
SET_FAIL
:

2291 
	`ED_OUTPUT
(
ED_DEST
, "`set' command failed.\n");

2293 
SUB_FAIL
:

2294 
	`ED_OUTPUT
(
ED_DEST
, "string substitution failed.\n");

2296 
MEM_FAIL
:

2297 
	`ED_OUTPUT
(
ED_DEST
, "Out of memory:Åext may have beenÜost.\n");

2299 
UNRECOG_COMMAND
:

2300 
	`ED_OUTPUT
(
ED_DEST
, "Unrecognized command.\n");

2302 
BAD_LINE_RANGE
:

2303 
	`ED_OUTPUT
(
ED_DEST
, "BadÜineÑange.\n");

2305 
BAD_LINE_NUMBER
:

2306 
	`ED_OUTPUT
(
ED_DEST
, "BadÜineÇumber.\n");

2308 
SYNTAX_ERROR
:

2309 
	`ED_OUTPUT
(
ED_DEST
, "Bad command syntax.\n");

2311 
RANGE_ILLEGAL
:

2312 
	`ED_OUTPUT
(
ED_DEST
, "Cannot useÑanges withÅhat command.\n");

2314 
IS_RESTRICTED
:

2315 
	`ED_OUTPUT
(
ED_DEST
, "That command isÑestricted.\n");

2317 
LINE_OR_RANGE_ILL
:

2318 
	`ED_OUTPUT
(
ED_DEST
, "Cannot useÜines orÑanges withÅhat command.\n");

2320 
FILE_NAME_ERROR
:

2321 
	`ED_OUTPUT
(
ED_DEST
, "File command failed.\n");

2323 
MARK_A_TO_Z
:

2324 
	`ED_OUTPUT
(
ED_DEST
, "A mark must be inÅheÑange 'aÅo 'z.\n");

2326 
SUB_BAD_PATTERN
:

2327 
	`ED_OUTPUT
(
ED_DEST
, "BadÖattern in searchándÑeplace.\n");

2329 
SUB_BAD_REPLACEMENT
:

2330 
	`ED_OUTPUT
(
ED_DEST
, "BadÑeplacement in searchándÑeplace.\n");

2332 
BAD_DESTINATION
:

2333 
	`ED_OUTPUT
(
ED_DEST
, "Bad destination for move or copy.\n");

2335 
END_OF_FILE
:

2336 
	`ED_OUTPUT
(
ED_DEST
, "End of file.\n");

2338 
SEARCH_FAILED
:

2339 
	`ED_OUTPUT
(
ED_DEST
, "Search failed.\n");

2342 
	`ED_OUTPUT
(
ED_DEST
, "Failed command.\n");

2344 
	}
}

2346 #ifde‡
OLD_ED


2347 
ßve_ed_buf„r
 
	$P1
(
obje˘_t
 *, 
who
)

2349 
svÆue_t
 *
°mp
;

2350 *
‚ame
;

2352 
ªgexp_u£r
 = 
ED_REGEXP
;

2353 
cuºít_ed_buf„r
 = 
who
->
öãø˘ive
->
ed_buf„r
;

2354 
cuºít_edô‹
 = 
who
;

2356 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
P_FNAME
));

2357 
	`push_obje˘
(
who
);

2359 
°mp
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_GET_ED_BUFFER_SAVE_FILE_NAME
, 2);

2360 i‡(
°mp
 && stm∞!(
svÆue_t
 *)-1) {

2361 i‡(
°mp
->
ty≥
 =
T_STRING
) {

2362 
‚ame
 = 
°mp
->
u
.
°rög
;

2363 i‡(*
‚ame
 == '/')

2364 
‚ame
++;

2365 
	`dowrôe
(1, 
P_LASTLN
, 
‚ame
, 0);

2368 
	`‰ì_ed_buf„r
(
who
);

2369 
	}
}

2372 
¥öt_hñp
 
	$P1
(, 
¨g
)

2374 
¨g
) {

2376 
	`ED_OUTPUT
(
ED_DEST
, " Automatic Indentation (V 1.0)\n");

2377 
	`ED_OUTPUT
(
ED_DEST
, "------------------------------------\n");

2378 
	`ED_OUTPUT
(
ED_DEST
, " by Qixx [Update: 7/10/91]\n");

2379 
	`ED_OUTPUT
(
ED_DEST
, "\nBy usingÅhe command 'I',áÖrogram isÑun which will\n");

2380 
	`ED_OUTPUT
(
ED_DEST
, "automatically indentállÜines in your code. AsÅhis is\n");

2381 
	`ED_OUTPUT
(
ED_DEST
, "being done,ÅheÖrogram willálso search for some basic\n");

2382 
	`ED_OUTPUT
(
ED_DEST
, "errors (which don't show up good during compiling) suchás\n");

2383 
	`ED_OUTPUT
(
ED_DEST
, "Unterminated String, Mismatched Bracketsánd Parentheses,\n");

2384 
	`ED_OUTPUT
(
ED_DEST
, "and indented code isÉasyÅo understandánd debug, since if\n");

2385 
	`ED_OUTPUT
(
ED_DEST
, "your bracketsáre off --Åhe code will LOOK wrong. Please\n");

2386 
	`ED_OUTPUT
(
ED_DEST
, "mail meát gaunt@mcs.anl.gov withányÖieces of code which\n");

2387 
	`ED_OUTPUT
(
ED_DEST
, "don't get indentedÖroperly.\n");

2390 
	`ED_OUTPUT
(
ED_DEST
, "Command:Ç Usage:Ç\n");

2391 
	`ED_OUTPUT
(
ED_DEST
, "This commandÅogglesÅhe internal flag which will causeÜine\n");

2392 
	`ED_OUTPUT
(
ED_DEST
, "numbersÅo beÖrinted wheneveráÜine isÜisted.\n");

2395 
	`ED_OUTPUT
(
ED_DEST
, "Command:á Usage:á\n");

2396 
	`ED_OUTPUT
(
ED_DEST
, "Append causesÅheÉditorÅoÉnter input mode, insertingállÅext\n");

2397 
	`ED_OUTPUT
(
ED_DEST
, "starting AFTERÅhe currentÜine. Useá '.' oná blankÜineÅoÉxit\n");

2398 
	`ED_OUTPUT
(
ED_DEST
, "this mode.\n");

2401 
	`ED_OUTPUT
(
ED_DEST
, "Command: A Usage: A\n\
Åhe 'a' command, but uses inverseáutoindent mode.\n");

2405 
	`ED_OUTPUT
(
ED_DEST
, "Command: i Usage: i\n");

2406 
	`ED_OUTPUT
(
ED_DEST
, "Insert causesÅheÉditorÅoÉnter input mode, insertingállÅext\n");

2407 
	`ED_OUTPUT
(
ED_DEST
, "starting BEFOREÅhe currentÜine. Useá '.' oná blankÜineÅoÉxit\n");

2408 
	`ED_OUTPUT
(
ED_DEST
, "this mode.\n");

2411 
	`ED_OUTPUT
(
ED_DEST
, "Command: c Usage: c\n");

2412 
	`ED_OUTPUT
(
ED_DEST
, "Change command causesÅhe currentÜineÅo be wiped from memory.\n");

2413 
	`ED_OUTPUT
(
ED_DEST
, "TheÉditorÉnters input modeándállÅext is inserted whereÅheÖrevious\n");

2414 
	`ED_OUTPUT
(
ED_DEST
, "lineÉxisted.\n");

2417 
	`ED_OUTPUT
(
ED_DEST
, "Command: d Usage: d or [range]d\n");

2418 
	`ED_OUTPUT
(
ED_DEST
, "DeletesÅhe currentÜine unlessÖreceeded witháÑange ofÜines,\n");

2419 
	`ED_OUTPUT
(
ED_DEST
, "thenÅheÉntireÑange will be deleted.\n");

2421 #i‚de‡
RESTRICTED_ED


2423 
	`ED_OUTPUT
(
ED_DEST
, "Commmand:É Usage:É filename\n");

2424 
	`ED_OUTPUT
(
ED_DEST
, "CausesÅhe current fileÅo be wiped from memory,ándÅheÇew file\n");

2425 
	`ED_OUTPUT
(
ED_DEST
, "to beÜoaded in.\n");

2428 
	`ED_OUTPUT
(
ED_DEST
, "Commmand: E Usage: E filename\n");

2429 
	`ED_OUTPUT
(
ED_DEST
, "CausesÅhe current fileÅo be wiped from memory,ándÅheÇew file\n");

2430 
	`ED_OUTPUT
(
ED_DEST
, "to beÜoaded in. Different from 'e' inÅhe factÅhat it will wipe\n");

2431 
	`ED_OUTPUT
(
ED_DEST
, "the current fileÉven ifÅhereáre unsaved modifications.\n");

2434 
	`ED_OUTPUT
(
ED_DEST
, "Command: f Usage: f or f filename\n");

2435 
	`ED_OUTPUT
(
ED_DEST
, "Display or setÅhe current filename. If filename is givenás \nanárgument,Åhe file (f) command changesÅhe current filenameÅo\nfilename; otherwise, itÖrintsÅhe current filename.\n");

2439 
	`ED_OUTPUT
(
ED_DEST
, "Command: g Usage: g/re/p\n");

2440 
	`ED_OUTPUT
(
ED_DEST
, "Search inállÜines forÉxpression 're',ándÖrint\n");

2441 
	`ED_OUTPUT
(
ED_DEST
, "every match. Command 'l' canálso be given\n");

2442 
	`ED_OUTPUT
(
ED_DEST
, "Unlike in unixÉd, you canálso supplyáÑange ofÜines\n");

2443 
	`ED_OUTPUT
(
ED_DEST
, "to search in\n");

2444 
	`ED_OUTPUT
(
ED_DEST
, "Compare with command 'v'.\n");

2447 
	`ED_OUTPUT
(
ED_DEST
, "Command: h Usage: h or hc (where c isá command)\n");

2448 
	`ED_OUTPUT
(
ED_DEST
, "Help filesádded by Qixx.\n");

2451 
	`ED_OUTPUT
(
ED_DEST
, "Command: j Usage: j or [range]j\n");

2452 
	`ED_OUTPUT
(
ED_DEST
, "Join Lines. RemoveÅhe NEWLINE character from betweenÅheÅwo\naddressedÜines. The defaultsáreÅhe currentÜineándÅheÜine\nfollowing. IfÉxactly oneáddress is given,Åhis command does\nnothing. The joinedÜine isÅheÑesulting currentÜine.\n");

2455 
	`ED_OUTPUT
(
ED_DEST
, "Command: k Usage: kc (where c isá character)\n");

2456 
	`ED_OUTPUT
(
ED_DEST
, "MarkÅheáddressedÜine withÅheÇame c,áÜower-case\nletter. Theáddress-form, 'c,áddressesÅheÜine\nmarked by c. káccepts oneáddress;Åhe default isÅhe\ncurrentÜine. The currentÜine isÜeft unchanged.\n");

2459 
	`ED_OUTPUT
(
ED_DEST
, "Command:Ü Usage:Ü or [range]l\n");

2460 
	`ED_OUTPUT
(
ED_DEST
, "ListÅhe currentÜine oráÑange ofÜines inán unambiguous\nway suchÅhatÇon-printing charactersáreÑepresentedás\nsymbols (specifically New-Lines).\n");

2463 
	`ED_OUTPUT
(
ED_DEST
, "Command: m Usage: mADDRESS or [range]mADDRESS\n");

2464 
	`ED_OUTPUT
(
ED_DEST
, "MoveÅhe currentÜine (orÑange ofÜines if specified)Åoá\nlocation justáfterÅhe specified ADDRESS. Address 0 isÅhe\nbeginning ofÅhe fileándÅhe default destination isÅhe\ncurrentÜine.\n");

2467 
	`ED_OUTPUT
(
ED_DEST
, "Command:Ö Usage:Ö or [range]p\n");

2468 
	`ED_OUTPUT
(
ED_DEST
, "PrintÅhe currentÜine (orÑange ofÜines if specified)ÅoÅhe\nscreen. SeeÅhe command 'n' ifÜineÇumbering is desired.\n");

2471 
	`ED_OUTPUT
(
ED_DEST
, "Command: q Usage: q\n");

2472 
	`ED_OUTPUT
(
ED_DEST
, "QuitÅheÉditor. NoteÅhat you can't quitÅhis way ifÅhere\nareány unsaved changes. See 'w' for writing changesÅo file.\n");

2475 
	`ED_OUTPUT
(
ED_DEST
, "Command: Q Usage: Q\n");

2476 
	`ED_OUTPUT
(
ED_DEST
, "Force Quit. QuitÅheÉditorÉven ifÅhe buffer contains unsaved\nmodifications.\n");

2478 #i‚de‡
RESTRICTED_ED


2480 
	`ED_OUTPUT
(
ED_DEST
, "Command:Ñ Usage:Ñ filename\n");

2481 
	`ED_OUTPUT
(
ED_DEST
, "ReadsÅhe given filename intoÅhe current buffer starting\natÅhe currentÜine.\n");

2485 
	`ED_OUTPUT
(
ED_DEST
, "Command:Å Usage:ÅADDRESS or [range]tADDRESS\n");

2486 
	`ED_OUTPUT
(
ED_DEST
, "Transposeá copy ofÅhe currentÜine (orÑange ofÜines if specified)\ntoáÜocation justáfterÅhe specified ADDRESS. Address 0 isÅhe\nbeginning ofÅhe fileándÅhe default destination\nisÅhe currentÜine.\n");

2489 
	`ED_OUTPUT
(
ED_DEST
, "Command: v Usage: v/re/p\n");

2490 
	`ED_OUTPUT
(
ED_DEST
, "Search inállÜines withoutÉxpression 're',ándÖrint\n");

2491 
	`ED_OUTPUT
(
ED_DEST
, "every match. Other commandsÅhan 'p' canálso be given\n");

2492 
	`ED_OUTPUT
(
ED_DEST
, "Compare with command 'g'.\n");

2495 
	`ED_OUTPUT
(
ED_DEST
, "Command: z Usage: z or z- or z.\n");

2496 
	`ED_OUTPUT
(
ED_DEST
, "Displays 20Üines startingátÅhe currentÜine.\nIfÅhe command is 'z.'Åhen 20Üinesáre displayed being\ncentered onÅhe currentÜine. The command 'z-' displays\nthe 20Üines beforeÅhe currentÜine.\n");

2499 
	`ED_OUTPUT
(
ED_DEST
, "Command: Z Usage: Z or Z- or Z.\n");

2500 
	`ED_OUTPUT
(
ED_DEST
, "Displays 40Üines startingátÅhe currentÜine.\nIfÅhe command is 'Z.'Åhen 40Üinesáre displayed being\ncentered onÅhe currentÜine. The command 'Z-' displays\nthe 40Üines beforeÅhe currentÜine.\n");

2503 
	`ED_OUTPUT
(
ED_DEST
, "Command: x Usage: x\n");

2504 
	`ED_OUTPUT
(
ED_DEST
, "Save file underÅhe currentÇame,ándÅhenÉxit fromÉd.\n");

2507 i‡(*
ö±r
 == 'e' && *(inptr + 1) == 't') {

2508 
	`ED_OUTPUT
(
ED_DEST
, "\
árguments: show current settings.\n\
'set save' willÖreserveÅhe current settings for subsequent invocations ofÉd.\n\
:\n\
\n\
 willÖrintÜineÇumbers beforeÖrinting or insertingáÜines\n\
 willÖrint control characters inÖ(rint)ánd z commandÜike inÜ(ist)\n\
 will show currentÜineáfterá single substitution\n\
\n\
 willÖreserve current indentation whileÉnteringÅext.\n\
 ^D or ^KÅo get back one step backÅoÅheÑight.\n\
 willÉxchangeÅhe meaning of \\(ánd (ás wellás \\)ánd )\n\
 willÖrint outÅhe currentÜineáfter deletingÅext.\n\
\n\
 option can be cleared byÖrepending it with 'no' inÅhe set command,É.g.\n\
'setÇolist'ÅoÅurn offÅheÜist option.\n\
\n\
 shiftwidth <digit> will store <digit> inÅhe shiftwidth variable, which\n\
 how much blanksáreÑemoved fromÅhe current indentation when\n\
 ^D or ^K inÅheáutoindent mode.\n");

2531 
	`ED_OUTPUT
(
ED_DEST
, "Command: / Usage: /pattern\n");

2532 
	`ED_OUTPUT
(
ED_DEST
, "findsÅheÇext occurence of 'pattern'. NoteÅhatÖattern\n\
áÑegularÉxpression, soÅhingsÜike .*][() haveÅo beÖreceded byá \\.\n");

2536 
	`ED_OUTPUT
(
ED_DEST
, "Command: ? Usage: ?pattern\n");

2537 
	`ED_OUTPUT
(
ED_DEST
, "findsÅheÜast occurence of 'pattern' beforeÅhe currentÜine. NoteÅhatÖattern\n\
áÑegularÉxpression, soÅhingsÜike .*][() haveÅo beÖreceded byá \\.\n");

2541 #i‚de‡
RESTRICTED_ED


2544 
	`ED_OUTPUT
(
ED_DEST
, "SorryÇo help yet forÅhis command. TryágainÜater.\n");

2548 
	`ED_OUTPUT
(
ED_DEST
, " Help for Ed (V 2.0)\n");

2549 
	`ED_OUTPUT
(
ED_DEST
, "---------------------------------\n");

2550 
	`ED_OUTPUT
(
ED_DEST
, " by Qixx [Update: 7/10/91]\n");

2551 
	`ED_OUTPUT
(
ED_DEST
, "\n\nCommands\n--------\n");

2552 
	`ED_OUTPUT
(
ED_DEST
, "/\tsearch forward forÖattern\n");

2553 
	`ED_OUTPUT
(
ED_DEST
, "?\tsearch backward foráÖattern\n");

2555 
	`ED_OUTPUT
(
ED_DEST
, "=\tshow currentÜineÇumber\n");

2556 
	`ED_OUTPUT
(
ED_DEST
, "a\tappendÅext startingáfterÅhisÜine\n");

2557 
	`ED_OUTPUT
(
ED_DEST
, "A\tlike 'a' but with inverseáutoindent mode\n");

2558 
	`ED_OUTPUT
(
ED_DEST
, "c\tchange currentÜine, query forÑeplacementÅext\n");

2559 
	`ED_OUTPUT
(
ED_DEST
, "d\tdeleteÜine(s)\n");

2560 #ifde‡
RESTRICTED_ED


2561 i‡(!
P_RESTRICT
) {

2562 
	`ED_OUTPUT
(
ED_DEST
, "e\treplaceÅhis file withánother file\n");

2563 
	`ED_OUTPUT
(
ED_DEST
, "E\tsameás 'e' but works if file has been modified\n");

2564 
	`ED_OUTPUT
(
ED_DEST
, "f\tshow/change current fileÇame\n");

2567 
	`ED_OUTPUT
(
ED_DEST
, "g\tSearchándÉxecute command onány matchingÜine.\n");

2568 
	`ED_OUTPUT
(
ED_DEST
, "h\thelp file (displayÅhis message)\n");

2569 
	`ED_OUTPUT
(
ED_DEST
, "i\tinsertÅext starting beforeÅhisÜine\n");

2570 
	`ED_OUTPUT
(
ED_DEST
, "I\tindentÅheÉntire code (Qixx version 1.0)\n");

2571 
	`ED_OUTPUT
(
ED_DEST
, "\n--ReturnÅo continue--");

2572 
P_MORE
 = 1;

2575 
	}
}

2577 
	$¥öt_hñp2
()

2579 
P_MORE
 = 0;

2580 
	`ED_OUTPUT
(
ED_DEST
, "j\tjoinÜinesÅogether\n");

2581 
	`ED_OUTPUT
(
ED_DEST
, "k\tmarkÅhisÜine withá character -ÜaterÑeferencedás 'a\n");

2582 
	`ED_OUTPUT
(
ED_DEST
, "l\tlistÜine(s) with control characters displayed\n");

2583 
	`ED_OUTPUT
(
ED_DEST
, "m\tmoveÜine(s)Åo specifiedÜine\n");

2584 
	`ED_OUTPUT
(
ED_DEST
, "n\ttoggleÜineÇumbering\n");

2585 
	`ED_OUTPUT
(
ED_DEST
, "O\tsameás 'i'\n");

2586 
	`ED_OUTPUT
(
ED_DEST
, "o\tsameás 'a'\n");

2587 
	`ED_OUTPUT
(
ED_DEST
, "p\tprintÜine(s) inÑange\n");

2588 
	`ED_OUTPUT
(
ED_DEST
, "q\tquitÉditor\n");

2589 
	`ED_OUTPUT
(
ED_DEST
, "Q\tquitÉditorÉven if file modifiedándÇot saved\n");

2590 
	`ED_OUTPUT
(
ED_DEST
, "r\tread file intoÉditorátÉnd of file or behindÅhe givenÜine\n");

2591 
	`ED_OUTPUT
(
ED_DEST
, "s\tsearchándÑeplace\n");

2592 
	`ED_OUTPUT
(
ED_DEST
, "set\tquery, change or save option settings\n");

2593 
	`ED_OUTPUT
(
ED_DEST
, "t\tmove copy ofÜine(s)Åo specifiedÜine\n");

2594 
	`ED_OUTPUT
(
ED_DEST
, "v\tSearchándÉxecute command onányÇon-matchingÜine.\n");

2595 
	`ED_OUTPUT
(
ED_DEST
, "x\tsave fileánd quit\n");

2596 #ifde‡
RESTRICTED_ED


2597 i‡(!
P_RESTRICT
) {

2598 
	`ED_OUTPUT
(
ED_DEST
, "w\twriteÅo current file (or specified file)\n");

2599 
	`ED_OUTPUT
(
ED_DEST
, "W\tlikeÅhe 'w' command butáppends instead\n");

2602 
	`ED_OUTPUT
(
ED_DEST
, "z\tdisplay 20Üines,Öossibleárgsáre . + -\n");

2603 
	`ED_OUTPUT
(
ED_DEST
, "Z\tdisplay 40Üines,Öossibleárgsáre . + -\n");

2604 
	`ED_OUTPUT
(
ED_DEST
, "\nFor further informationÅype 'hc' where c isÅhe command\nthat help is desired for.\n");

2605 
	}
}

2612 #i‚de‡
OLD_ED


2613 *
	$obje˘_ed_ªsu…s
() {

2614 *
ªt
;

2616 
	`outbuf_fix
(&
cuºít_ed_ªsu…s
);

2617 
ªt
 = 
cuºít_ed_ªsu…s
.
buf„r
;

2618 
	`outbuf_zîo
(&
cuºít_ed_ªsu…s
);

2620  
ªt
;

2621 
	}
}

2623 
ed_buf„r_t
 *
	ged_buf„r_li°
;

2625 
ed_buf„r_t
 *
add_ed_buf„r
 
	$P1
(
obje˘_t
 *, 
ob
) {

2626 
ed_buf„r_t
 *
ªt
;

2628 
ªt
 = 
	`ALLOCATE
(
ed_buf„r_t
, 
TAG_ED
, "ed_start: ED_BUFFER");

2629 
	`mem£t
((*)
ªt
, '\0', (
ed_buf„r_t
));

2631 
ob
->
Êags
 |
O_IN_EDIT
;

2633 
ªt
->
ow√r
 = 
ob
;

2634 
ªt
->
√xt_ed_buf
 = 
ed_buf„r_li°
;

2635 
ed_buf„r_li°
 = 
ªt
;

2636 
cuºít_edô‹
 = 
ob
;

2637  
ªt
;

2638 
	}
}

2640 
ed_buf„r_t
 *
föd_ed_buf„r
 
	$P1
(
obje˘_t
 *, 
ob
) {

2641 
ed_buf„r_t
 *
p
;

2643 
p
 = 
ed_buf„r_li°
;Ö &&Ö->
ow√r
 !
ob
;Ö =Ö->
√xt_ed_buf
)

2645  
p
;

2646 
	}
}

2648 
	$obje˘_‰ì_ed_buf„r
() {

2649 
ed_buf„r_t
 **
p
 = &
ed_buf„r_li°
;

2650 
ed_buf„r_t
 *
tmp
;

2652 (*
p
)->
ow√r
 !
cuºít_edô‹
)

2653 
p
 = &((*p)->
√xt_ed_buf
);

2655 
tmp
 = *
p
;

2656 *
p
 = (*p)->
√xt_ed_buf
;

2657 
	`FREE
(
tmp
);

2659 
cuºít_edô‹
->
Êags
 &~
O_IN_EDIT
;

2660 
	}
}

2662 *
obje˘_ed_°¨t
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
‚ame
, , 
ª°ri˘ed
) {

2663 
svÆue_t
 *
£tup
;

2666 
	`outbuf_zîo
(&
cuºít_ed_ªsu…s
);

2668 
ªgexp_u£r
 = 
ED_REGEXP
;

2669 
cuºít_ed_buf„r
 = 
	`add_ed_buf„r
(
ob
);

2671 
ED_BUFFER
->
Êags
 |
EIGHTBIT_MASK
;

2672 
ED_BUFFER
->
shi·width
 = 4;

2674 
	`push_obje˘
(
cuºít_edô‹
);

2675 
£tup
 = 
	`≠∂y_ma°î_ob
(
APPLY_RETRIEVE_ED_SETUP
, 1);

2676 i‡(
£tup
 && sëu∞!(
svÆue_t
 *)-1 && sëup->
ty≥
 =
T_NUMBER
 && sëup->
u
.
numbî
) {

2677 
ED_BUFFER
->
Êags
 = 
£tup
->
u
.
numbî
 & 
ALL_FLAGS_MASK
;

2678 
ED_BUFFER
->
shi·width
 = 
£tup
->
u
.
numbî
 & 
SHIFTWIDTH_MASK
;

2680 
ED_BUFFER
->
CurPå
 = &ED_BUFFER->
Löe0
;

2682 i‡(
ª°ri˘ed
) {

2683 
P_RESTRICT
 = 1;

2685 
	`£t_ed_buf
();

2691 i‡(
‚ame


2692 && (
‚ame
 =

2693 
	`check_vÆid_∑th
(
‚ame
, 
cuºít_edô‹
,

2695 && !
	`d‹ód
(0, 
‚ame
)) {

2696 
	`£tCurLn
(1);

2698 i‡(
‚ame
) {

2699 
	`°∫˝y
(
P_FNAME
, 
‚ame
, 
MAXFNAME
 - 1);

2700 
P_FNAME
[
MAXFNAME
 - 1] = 0;

2702 
	`ED_OUTPUT
(
ED_DEST
, "No file.\n");

2704  
	`obje˘_ed_ªsu…s
();

2705 
	}
}

2707 
obje˘_ßve_ed_buf„r
 
	$P1
(
obje˘_t
 *, 
ob
)

2709 
svÆue_t
 *
°mp
;

2710 *
‚ame
;

2712 
ªgexp_u£r
 = 
ED_REGEXP
;

2713 
cuºít_ed_buf„r
 = 
	`föd_ed_buf„r
(
ob
);

2714 
cuºít_edô‹
 = 
ob
;

2716 
	`c›y_™d_push_°rög
(
P_FNAME
);

2717 
°mp
 = 
	`≠∂y_ma°î_ob
(
APPLY_GET_ED_BUFFER_SAVE_FILE_NAME
, 1);

2718 i‡(
°mp
 && stm∞!(
svÆue_t
 *)-1) {

2719 i‡(
°mp
->
ty≥
 =
T_STRING
) {

2720 
‚ame
 = 
°mp
->
u
.
°rög
;

2721 i‡(*
‚ame
 == '/')

2722 
‚ame
++;

2723 
	`dowrôe
(1, 
P_LASTLN
, 
‚ame
, 0);

2726 
	`‰ì_ed_buf„r
(
cuºít_edô‹
);

2727 
	`outbuf_fix
(&
cuºít_ed_ªsu…s
);

2728 i‡(
cuºít_ed_ªsu…s
.
buf„r
)

2729 
	`FREE_MSTR
(
cuºít_ed_ªsu…s
.
buf„r
);

2730 
	`outbuf_zîo
(&
cuºít_ed_ªsu…s
);

2731 
	}
}

2733 
obje˘_ed_mode
 
	$P1
(
obje˘_t
 *, 
ob
) {

2734 
ªgexp_u£r
 = 
ED_REGEXP
;

2735 
cuºít_ed_buf„r
 = 
	`föd_ed_buf„r
(
ob
);

2736 
cuºít_edô‹
 = 
ob
;

2738 i‡(
P_MORE
)

2740 i‡(
P_APPENDING
)

2741  
P_CURLN
 + 1;

2744 
	}
}

2746 *
obje˘_ed_cmd
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
°r
)

2748 
°©us
 = 0;

2750 
ªgexp_u£r
 = 
ED_REGEXP
;

2751 
cuºít_ed_buf„r
 = 
	`föd_ed_buf„r
(
ob
);

2752 
cuºít_edô‹
 = 
ob
;

2754 i‡(
P_MORE
) {

2755 
	`¥öt_hñp2
();

2756  
	`obje˘_ed_ªsu…s
();

2758 i‡(
P_APPENDING
) {

2759 
	`m‹e_≠≥nd
(
°r
);

2760  
	`obje˘_ed_ªsu…s
();

2763 
	`°∫˝y
(
ölö
, 
°r
, 
ED_MAXLINE
 - 2);

2764 
ölö
[
ED_MAXLINE
 - 2] = 0;

2765 
	`°rˇt
(
ölö
, "\n");

2767 
ö±r
 = 
ölö
;

2768 i‡((
°©us
 = 
	`gël°
()Ë>0 || sètu†=
NO_LINE_RANGE
) {

2769 i‡((
°©us
 = 
	`ckglob
()) != 0) {

2770 i‡(
°©us
 >0 && (°©u†
	`doglob
()) >= 0) {

2771 
	`£tCurLn
(
°©us
);

2772  
	`obje˘_ed_ªsu…s
();

2775 i‡((
°©us
 = 
	`docmd
(0)) >= 0) {

2776 i‡(
°©us
 == 1)

2777 
	`d›∫t
(
P_CURLN
, P_CURLN);

2778  
	`obje˘_ed_ªsu…s
();

2782 
	`ªp‹t_°©us
(
°©us
);

2783  
	`obje˘_ed_ªsu…s
();

2784 
	}
}

	@ed.h

1 #i‚de‡
ED_H


2 
	#ED_H


	)

4 
	~"Õc_ö˛.h
"

6 
	~"ªgexp.h
"

9 #unde‡
NO_END_DOLLAR_SIGN


13 
	#NUL
 0x00

	)

14 
	#EOS
 0x00

	)

15 
	#SOH
 0x01

	)

16 
	#STX
 0x02

	)

17 
	#ETX
 0x03

	)

18 
	#EOT
 0x04

	)

19 
	#ENQ
 0x05

	)

20 
	#ACK
 0x06

	)

21 
	#BEL
 0x07

	)

22 
	#BS
 0x08

	)

23 
	#HT
 0x09

	)

24 
	#LF
 0x0®

	)

25 
	#NL
 '\n'

	)

26 
	#VT
 0x0b

	)

27 
	#FF
 0x0¯

	)

28 
	#CR
 0x0d

	)

29 
	#SO
 0x0ê

	)

30 
	#SI
 0x0‡

	)

31 
	#DLE
 0x10

	)

32 
	#DC1
 0x11

	)

33 
	#DC2
 0x12

	)

34 
	#DC3
 0x13

	)

35 
	#DC4
 0x14

	)

36 
	#NAK
 0x15

	)

37 
	#SYN
 0x16

	)

38 
	#ETB
 0x17

	)

39 
	#CAN
 0x18

	)

40 
	#EM
 0x19

	)

41 
	#SUB
 0x1®

	)

42 
	#ESC
 0x1b

	)

43 
	#FS
 0x1¯

	)

44 
	#GS
 0x1d

	)

45 
	#US
 0x1‡

	)

46 
	#SP
 0x20

	)

47 
	#DEL
 0x7‡

	)

48 
	#ESCAPE
 '\\'

	)

50 #i‚de‡
TRUE


51 
	#TRUE
 1

	)

53 #i‚de‡
FALSE


54 
	#FALSE
 0

	)

56 
	#ERR
 -2

	)

57 
	#FATAL
 (
ERR
-1)

	)

58 
	#CHANGED
 (
ERR
-2)

	)

59 
	#SET_FAIL
 (
ERR
-3)

	)

60 
	#SUB_FAIL
 (
ERR
-4)

	)

61 
	#MEM_FAIL
 (
ERR
-5)

	)

62 
	#UNRECOG_COMMAND
 (
ERR
-6)

	)

64 
	#BAD_LINE_RANGE
 (
ERR
-7)

	)

65 
	#BAD_LINE_NUMBER
 (
ERR
-8)

	)

66 
	#SYNTAX_ERROR
 (
ERR
-9)

	)

67 
	#RANGE_ILLEGAL
 (
ERR
-10)

	)

68 
	#IS_RESTRICTED
 (
ERR
-11)

	)

69 
	#LINE_OR_RANGE_ILL
 (
ERR
-12)

	)

70 
	#FILE_NAME_ERROR
 (
ERR
-13)

	)

71 
	#MARK_A_TO_Z
 (
ERR
-14)

	)

72 
	#SUB_BAD_PATTERN
 (
ERR
-15)

	)

73 
	#SUB_BAD_REPLACEMENT
 (
ERR
-16)

	)

74 
	#BAD_DESTINATION
 (
ERR
-17)

	)

75 
	#END_OF_FILE
 (
ERR
-18)

	)

76 
	#SEARCH_FAILED
 (
ERR
-19)

	)

77 
	#NO_LINE_RANGE
 (
ERR
-20)

	)

79 
	#BUFFER_SIZE
 2048

	)

81 
	#LGLOB
 2

	)

83 
	#ED_MAXLINE
 2048

	)

84 
	#MAXPAT
 256

	)

85 
	#MAXFNAME
 256

	)

87 
	sed_löe_s
 {

88 
	ml_°©
;

89 
ed_löe_s
 *
	ml_¥ev
;

90 
ed_löe_s
 *
	ml_√xt
;

91 
	ml_buff
[1];

92 } 
	ted_löe_t
;

94 
	sed_buf„r_s
 {

95 
	mn⁄ascii
;

96 
	mnuŒch¨
;

97 
	måunˇãd
;

98 
	m‚ame
[
MAXFNAME
];

99 
	mfch™ged
;

100 
	mno‚ame
;

101 
	mm¨k
['z' - 'a' + 1];

102 
ªgexp
 *
	mﬁd∑t
;

104 
ed_löe_t
 
	mLöe0
;

105 
	mCurLn
;

106 
ed_löe_t
 *
	mCurPå
;

107 
	mLa°Ln
;

108 
	mLöe1
, 
	mLöe2
, 
	m∆öes
;

109 
	mÊags
;

110 
	m≠≥ndög
;

111 
	mm‹ög
;

112 #ifde‡
OLD_ED


113 *
	mexô_‚
;

114 *
	mwrôe_‚
;

115 
obje˘_t
 *
	mexô_ob
;

117 
obje˘_t
 *
	mow√r
;

118 
ed_buf„r_s
 *
	m√xt_ed_buf
;

120 
	mshi·width
;

121 
	mÀadög_bœnks
;

122 
	mcur_autoödít
;

123 
	mª°ri˘ed
;

124 } 
	ted_buf„r_t
;

129 
ed_°¨t
 
PROT
((*, *, *, , 
obje˘_t
 *));

130 
ed_cmd
 
PROT
((*));

131 
ßve_ed_buf„r
 
PROT
((
obje˘_t
 *));

133 #ifde‡
OLD_ED


134 
	#ED_OUTPUT
(
x
, 
y
Ë
	`add_mesßge
(x, y, 
	`°æí
(y))

	)

135 
	#ED_OUTPUTV
 
add_vmesßge


	)

136 
	#ED_DEST
 
comm™d_givî


	)

138 
	#ED_OUTPUT
 
outbuf_add


	)

139 
	#ED_OUTPUTV
 
outbuf_addv


	)

140 
	#ED_DEST
 &
cuºít_ed_ªsu…s


	)

143 #i‚de‡
OLD_ED


144 *
obje˘_ed_cmd
 
PROT
((
obje˘_t
 *, *));

145 *
obje˘_ed_°¨t
 
PROT
((
obje˘_t
 *, *, ));

146 
obje˘_ed_mode
 
PROT
((
obje˘_t
 *));

147 
obje˘_ßve_ed_buf„r
 
PROT
((
obje˘_t
 *));

148 
ed_buf„r_t
 *
föd_ed_buf„r
 
PROT
((
obje˘_t
 *));

149 
obje˘_ed_ouçut
 
PROT
((*));

150 
obje˘_ed_ouçutv
 
PROT1V
(*);

152 
outbuf„r_t
 
cuºít_ed_ªsu…s
;

	@edit_source.c

1 
	#CONFIGURE_VERSION
 5

	)

3 
	#EDIT_SOURCE


	)

4 
	#NO_MALLOC


	)

5 
	#NO_SOCKETS


	)

6 
	#NO_OPCODES


	)

7 
	~"°d.h
"

8 
	~"Àx.h
"

9 
	~"¥ïro˚ss.h
"

10 
	~"make_func.h
"

11 
	~"cc.h
"

12 
	~"hash.h
"

14 #ifde‡
WIN32


15 
	~<¥o˚ss.h
>

16 
	~<mÆloc.h
>

19 #i‡
deföed
(
DEBUG
Ë|| deföed(
WIN32
)

20 
	#TO_DEV_NULL
 ""

	)

22 
	#TO_DEV_NULL
 ">/dev/nuŒ 2>&1"

	)

26 #ifde‡
PEDANTIC


27 *
mÆloc
();

28 *
ªÆloc
(*, );

29 
‰ì
(*);

32 *
	gouç
;

33 
	gbuf„ªd
 = 0;

34 
	g√x∑nds
 = 0;

36 
FILE
 *
	gyyö
 = 0, *
	gyyout
 = 0;

38 
	#SYNTAX
 "edô_sour˚ [-¥o˚s†fûe] [-›ti⁄s] [-mÆloc] [-buûd_func_•e¯'comm™d'] [-buûd_efuns] [-c⁄figuª]\n"

	)

44 
	#OPTIONS_INCL
 "›ti⁄s_ö˛.h"

	)

45 
	#PACKAGES
 "∑ckages/∑ckages"

	)

46 
	#OPTIONS_H
 "›ti⁄s.h"

	)

47 
	#LOCAL_OPTIONS
 "loˇl_›ti⁄s"

	)

48 
	#OPTION_DEFINES
 "›ti⁄_defs.c"

	)

49 
	#FUNC_SPEC
 "func_•ec.c"

	)

50 
	#FUNC_SPEC_CPP
 "func_•ec.˝p"

	)

51 
	#EFUN_TABLE
 "efun˘i⁄s.h"

	)

52 
	#OPC_PROF
 "›c.h"

	)

53 
	#OPCODES
 "›codes.h"

	)

54 
	#EFUN_PROTO
 "efun_¥Ÿos.h"

	)

55 
	#EFUN_DEFS
 "efun_defs.c"

	)

57 
	#PRAGMA_NOTE_CASE_START
 1

	)

59 
	gnum_∑ckages
 = 0;

60 *
	g∑ckages
[100];

61 
	gµch¨
;

63 *
	gcuºít_fûe
 = 0;

64 
	gcuºít_löe
;

66 
	ggømm¨_mode
 = 0;

67 
	gö_c_ˇ£
, 
	gcquŸe
, 
	g¥agmas
, 
	gblock_√°
;

69 
	gyyãxt
[
MAXLINE
];

70 
	gdefbuf
[
DEFMAX
];

72 
	söc°©e_t
 {

73 
öc°©e_t
 *
	m√xt
;

74 
FILE
 *
	myyö
;

75 
	mlöe
;

76 *
	mfûe
;

77 } 
	töc°©e
;

79 
öc°©e
 *
	gö˘›
 = 0;

81 
	#CHAR_QUOTE
 1

	)

82 
	#STRING_QUOTE
 2

	)

84 
add_deföe
 
PROT
((*, , *));

86 #ifde‡
WIN32


87 
	~<io.h
>

89 
	$compûe
(*
comm™d
) {

90 
FILE
 *
tf
 = 
	`f›í
("trash_me.bat","wt+");

92 
	`Ârötf
(
tf
,"%s%s\n%s",

94 
comm™d
,

101 
	`f˛o£
(
tf
);

103 i‡(!
	`sy°em
("trash_me.bat >Çul"))  1;

104 i‡(
	`_ac˚ss
("trash_me.err",0) )  1;

106 
	}
}

108 
compûe
 
	$P1
(*, 
°r
) {

109  
	`sy°em
(
°r
);

110 
	}
}

113 #i‡
deföed
(
WIN32
Ë|| deföed(
LATTICE
)

114 
dos_°yÀ_lök
 
	$P2
(*, 
x
, *, 
y
) {

115 
lök_cmd
[100];

116 
	`•rötf
(
lök_cmd
, "c›y %†%s", 
x
, 
y
);

117  
	`sy°em
(
lök_cmd
);

118 
	}
}

121 
yyîr‹
 
	$P1
(*, 
°r
)

123 
	`Ârötf
(
°dîr
, "%s:%d: %s\n", 
cuºít_fûe
, 
cuºít_löe
, 
°r
);

124 
	`exô
(1);

125 
	}
}

127 
mf_Áèl
 
	$P1
(*, 
°r
)

129 
	`yyîr‹
(
°r
);

130 
	}
}

132 
yyw¨n
 
	$P1
(*, 
°r
)

136 
	}
}

138 
yyîr‹p
 
	$P1
(*, 
°r
)

140 
buff
[200];

141 
	`•rötf
(
buff
, 
°r
, 
µch¨
);

142 
	`Ârötf
(
°dîr
, "%s:%d: %s\n", 
cuºít_fûe
, 
cuºít_löe
, 
buff
);

143 
	`exô
(1);

144 
	}
}

146 
add_öput
 
	$P1
(*, 
p
)

148 
l
 = 
	`°æí
(
p
);

150 i‡(
ouç
 - 
l
 < 
defbuf
Ë
	`yyîr‹
("MacroÉxpansion buffer overflow.\n");

151 
	`°∫˝y
(
ouç
 - 
l
, 
p
,Ü);

152 
ouç
 -
l
;

153 
	}
}

155 
	#SKIPW
(
foo
Ë
	`is•a˚
(*foo)Ëfoo++;

	)

157 *
	$skù_commít
(
tmp
, 
Êag
)

158 *
tmp
;

159 
Êag
;

161 
c
;

164 (
c
 = *++
tmp
) != '*') {

165 i‡(
c
 =
EOF
Ë
	`yyîr‹
("End of file iná comment");

166 i‡(
c
 == '\n') {

167 
√x∑nds
 = 0;

168 
cuºít_löe
++;

169 i‡(!
	`fgës
(
yyãxt
, 
MAXLINE
 - 1, 
yyö
)Ë
	`yyîr‹
("End of file iná comment");

170 i‡(
Êag
 && 
yyout
Ë
	`Âuts
(
yyãxt
, yyout);

171 
tmp
 = 
yyãxt
 - 1;

175 i‡((
c
 = *++
tmp
) == '/')

176  
tmp
 + 1;

177 i‡(
c
 == '\n') {

178 
√x∑nds
 = 0;

179 
cuºít_löe
++;

180 i‡(!
	`fgës
(
yyãxt
, 
MAXLINE
 - 1, 
yyö
)Ë
	`yyîr‹
("End of file iná comment");

181 i‡(
Êag
 && 
yyout
Ë
	`Âuts
(
yyãxt
, yyout);

182 
tmp
 = 
yyãxt
 - 1;

184 } 
c
 == '*');

186 
	}
}

188 
	$ªfûl
()

190 *
p
, *
yyp
;

191 
c
;

193 i‡(
	`fgës
(
p
 = 
yyp
 = 
defbuf
 + (
DEFMAX
 >> 1), 
MAXLINE
 - 1, 
yyö
)) {

194 ((
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
EOF
)) {

195 i‡(
c
 == '/') {

196 i‡((
c
 = *
yyp
) == '*') {

197 
yyp
 = 
	`skù_commít
(yyp, 0);

200 i‡(
c
 == '/') ;

202 *
p
++ = 
c
;

205 
	`yyîr‹
("End of macro definition in \\");

206 
√x∑nds
 = 0;

207 
cuºít_löe
++;

208 *
p
 = 0;

210 
	}
}

212 
	$h™dÀ_deföe
()

214 
«mebuf
[
NSIZE
];

215 
¨gs
[
NARGS
][
NSIZE
];

216 
mãxt
[
MLEN
];

217 *
íd
;

218 *
tmp
 = 
ouç
, *
q
;

220 
q
 = 
«mebuf
;

221 
íd
 = 
q
 + 
NSIZE
 - 1;

222 
	`ißlunum
(*
tmp
)) {

223 i‡(
q
 < 
íd
Ë*q++ = *
tmp
++;

224 
	`yyîr‹
("NameÅooÜong.\n");

226 i‡(
q
 =
«mebuf
Ë
	`yyîr‹
("MacroÇame missing.\n");

227 i‡(*
«mebuf
 !'_' && !
	`ißÕha
(*«mebuf)Ë
	`yyîr‹
("Invalid macroÇame.\n");

228 *
q
 = 0;

229 i‡(*
tmp
 == '(') {

230 
¨g
;

231 
öid
;

232 *
ids
 = (*Ë
NULL
;

234 
tmp
++;

235 
	`SKIPW
(
tmp
);

236 i‡(*
tmp
 == ')') {

237 
¨g
 = 0;

239 
¨g
 = 0;árg < 
NARGS
;) {

240 
íd
 = (
q
 = 
¨gs
[
¨g
]Ë+ 
NSIZE
 - 1;

241 
	`ißlunum
(*
tmp
) || (*tmp == '#')) {

242 i‡(
q
 < 
íd
Ë*q++ = *
tmp
++;

243 
	`yyîr‹
("NameÅooÜong.\n");

245 i‡(
q
 =
¨gs
[
¨g
]) {

246 
buff
[200];

247 
	`•rötf
(
buff
, "Missögárgumíà%d i¿#deföê∑ømëîÜi°", 
¨g
 + 1);

248 
	`yyîr‹
(
buff
);

250 
¨g
++;

251 
	`SKIPW
(
tmp
);

252 i‡(*
tmp
 == ')')

254 i‡(*
tmp
++ != ',') {

255 
	`yyîr‹
("Missing ',' in #defineÖarameterÜist");

257 
	`SKIPW
(
tmp
);

259 i‡(
¨g
 =
NARGS
Ë
	`yyîr‹
("Too many macroárguments");

261 
tmp
++;

262 
íd
 = 
mãxt
 + 
MLEN
 - 2;

263 
öid
 = 0, 
q
 = 
mãxt
; *
tmp
;) {

264 i‡(
	`ißlunum
(*
tmp
)) {

265 i‡(!
öid
) {

266 
öid
++;

267 
ids
 = 
tmp
;

270 i‡(
öid
) {

271 
idÀn
 = 
tmp
 - 
ids
;

272 
n
, 
l
;

274 
n
 = 0;Ç < 
¨g
;Ç++) {

275 
l
 = 
	`°æí
(
¨gs
[
n
]);

276 i‡(
l
 =
idÀn
 && 
	`°∫cmp
(
¨gs
[
n
], 
ids
,Ü) == 0) {

277 
q
 -
idÀn
;

278 *
q
++ = 
MARKS
;

279 *
q
++ = 
n
 + 
MARKS
 + 1;

283 
öid
 = 0;

286 i‡((*
q
 = *
tmp
++Ë=
MARKS
) *++q = MARKS;

287 i‡(
q
 < 
íd
) q++;

288 
	`yyîr‹
("MacroÅextÅooÜong");

289 i‡(!*
tmp
 &&Åmp[-2] == '\\') {

290 
q
 -= 2;

291 
	`ªfûl
();

292 
tmp
 = 
defbuf
 + (
DEFMAX
 >> 1);

295 *--
q
 = 0;

296 
	`add_deföe
(
«mebuf
, 
¨g
, 
mãxt
);

297 } i‡(
	`is•a˚
(*
tmp
) || (!*tmp && (*(tmp+1) = '\0', *tmp = ' '))) {

298 
íd
 = 
mãxt
 + 
MLEN
 - 2;

299 
q
 = 
mãxt
; *
tmp
;) {

300 *
q
 = *
tmp
++;

301 i‡(
q
 < 
íd
) q++;

302 
	`yyîr‹
("MacroÅextÅooÜong");

303 i‡(!*
tmp
 &&Åmp[-2] == '\\') {

304 
q
 -= 2;

305 
	`ªfûl
();

306 
tmp
 = 
defbuf
 + (
DEFMAX
 >> 1);

309 *
q
 = 0;

310 
	`add_deföe
(
«mebuf
, -1, 
mãxt
);

312 
	`yyîr‹
("Illegal macro symbol");

315 
	}
}

317 
	#SKPW
 
	`is•a˚
(*
ouç
)Ëouç++

	)

319 
	$cmygëc
() {

320 
c
;

323 i‡((
c
 = *
ouç
++) == '/') {

324 i‡((
c
 = *
ouç
Ë='*'Ëouç = 
	`skù_commít
(outp, 0);

325 i‡(
c
 == '/')  -1;

326  
c
;

327 }  
c
;

329 
	}
}

332 
	$ex∑nd_deföe
()

334 
de‚_t
 *
p
;

335 
expbuf
[
DEFMAX
];

336 *
¨gs
[
NARGS
];

337 
buf
[
DEFMAX
];

338 *
q
, *
e
, *
b
;

340 i‡(
√x∑nds
++ > 
EXPANDMAX
Ë
	`yyîr‹
("Too many macroÉxpansions");

341 i‡(!(
p
 = 
	`lookup_deföe
(
yyãxt
)))  0;

342 i‡(
p
->
«rgs
 == -1) {

343 
	`add_öput
(
p
->
exps
);

345 
c
, 
∑r˙t
 = 0, 
dquŸe
 = 0, 
squŸe
 = 0;

346 
n
;

348 
SKPW
;

349 i‡(*
ouç
++ !'('Ë
	`yyîr‹
("Missing '(' in macro call");

350 
SKPW
;

351 i‡((
c
 = *
ouç
++) == ')')

352 
n
 = 0;

354 
q
 = 
expbuf
;

355 
¨gs
[0] = 
q
;

356 
n
 = 0;Ç < 
NARGS
;) {

357 
c
) {

359 i‡(!
squŸe
)

360 
dquŸe
 ^= 1;

363 i‡(!
dquŸe
)

364 
squŸe
 ^= 1;

367 i‡(!
squŸe
 && !
dquŸe
)

368 
∑r˙t
++;

371 i‡(!
squŸe
 && !
dquŸe
)

372 
∑r˙t
--;

375 i‡(!
squŸe
 && !
dquŸe
) {

376 *
q
++ = 
c
;

377 i‡(*
ouç
++ !'#'Ë
	`yyîr‹
("'#'Éxpected");

381 i‡(
squŸe
 || 
dquŸe
) {

382 *
q
++ = 
c
;

383 
c
 = *
ouç
++;

386 i‡(
squŸe
 || 
dquŸe
Ë
	`yyîr‹
("Newline in string");

389 i‡(
c
 =',' && !
∑r˙t
 && !
dquŸe
 && !
squŸe
) {

390 *
q
++ = 0;

391 
¨gs
[++
n
] = 
q
;

392 } i‡(
∑r˙t
 < 0) {

393 *
q
++ = 0;

394 
n
++;

397 i‡(
c
 =
EOF
Ë
	`yyîr‹
("UnexpectedÉnd of file");

398 i‡(
q
 >
expbuf
 + 
DEFMAX
 - 5) {

399 
	`yyîr‹
("Macroárgument overflow");

401 *
q
++ = 
c
;

404 i‡(!
squŸe
 && !
dquŸe
) {

405 i‡((
c
 = 
	`cmygëc
()Ë< 0Ë
	`yyîr‹
("End of macro in // comment");

407 
c
 = *
ouç
++;

409 i‡(
n
 =
NARGS
) {

410 
	`yyîr‹
("Maximum macroárgument countÉxceeded");

414 i‡(
n
 !
p
->
«rgs
) {

415 
	`yyîr‹
("WrongÇumber of macroárguments");

419 
b
 = 
buf
;

420 
e
 = 
p
->
exps
;

421 *
e
) {

422 i‡(*
e
 == '#' && *(e + 1) == '#')

423 
e
 += 2;

424 i‡(*
e
 =
MARKS
) {

425 i‡(*++
e
 =
MARKS
)

426 *
b
++ = *
e
++;

428 
q
 = 
¨gs
[*
e
++ - 
MARKS
 - 1]; *q;) {

429 *
b
++ = *
q
++;

430 i‡(
b
 >
buf
 + 
DEFMAX
Ë
	`yyîr‹
("MacroÉxpansion overflow");

434 *
b
++ = *
e
++;

435 i‡(
b
 >
buf
 + 
DEFMAX
Ë
	`yyîr‹
("MacroÉxpansion overflow");

438 *
b
++ = 0;

439 
	`add_öput
(
buf
);

442 
	}
}

444 
	$exgëc
()

446 
c
, *
yyp
;

448 
SKPW
;

449 
	`ißÕha
(
c
 = *
ouç
) || c == '_') {

450 
yyp
 = 
yyãxt
;

452 *
yyp
++ = 
c
;

453 } 
	`iß um
(
c
 = *++
ouç
) || (c == '_'));

454 *
yyp
 = '\0';

455 i‡(!
	`°rcmp
(
yyãxt
, "defined")) {

457 
SKPW
;

458 i‡(*
ouç
++ !'('Ë
	`yyîr‹
("Missing (áfter 'defined'");

459 
SKPW
;

460 
yyp
 = 
yyãxt
;

461 i‡(
	`ißÕha
(
c
 = *
ouç
) || c == '_') {

463 *
yyp
++ = 
c
;

464 } 
	`iß um
(
c
 = *++
ouç
) || (c == '_'));

465 *
yyp
 = '\0';

467 
	`yyîr‹
("Incorrect definition macroáfter defined(\n");

468 
SKPW
;

469 i‡(*
ouç
 !')'Ë
	`yyîr‹
("Missing ) in defined");

470 i‡(
	`lookup_deföe
(
yyãxt
))

471 
	`add_öput
("1 ");

473 
	`add_öput
("0 ");

475 i‡(!
	`ex∑nd_deföe
())

476 
	`add_öput
("0 ");

477 
SKPW
;

480  
c
;

481 
	}
}

483 
	$skù_to
(
tokí
, 
©okí
)

484 *
tokí
, *
©okí
;

486 
b
[20], *
p
, *
íd
;

487 
c
;

488 
√°
;

490 
√°
 = 0;;) {

491 i‡(!
	`fgës
(
ouç
 = 
defbuf
 + (
DEFMAX
 >> 1), 
MAXLINE
-1,
yyö
)) {

492 
	`yyîr‹
("UnexpectedÉnd of file while skipping");

494 
cuºít_löe
++;

495 i‡((
c
 = *
ouç
++Ë=
µch¨
) {

496 
	`is•a˚
(*
ouç
)) outp++;

497 
íd
 = 
b
 +  b - 1;

498 
p
 = 
b
; (
c
 = *
ouç
++Ë!'\n' && !
	`is•a˚
(cË&& c !
EOF
;) {

499 i‡(
p
 < 
íd
Ë*p++ = 
c
;

501 *
p
 = 0;

502 i‡(!
	`°rcmp
(
b
, "if") || !strcmp(b, "ifdef") || !strcmp(b, "ifndef")) {

503 
√°
++;

504 } i‡(
√°
 > 0) {

505 i‡(!
	`°rcmp
(
b
, "endif"))

506 
√°
--;

508 i‡(!
	`°rcmp
(
b
, 
tokí
)) {

509 *--
ouç
 = 
c
;

510 
	`add_öput
(
b
);

511 *--
ouç
 = 
µch¨
;

512 
buf„ªd
 = 1;

514 } i‡(
©okí
 && !
	`°rcmp
(
b
,átoken)) {

515 *--
ouç
 = 
c
;

516 
	`add_öput
(
b
);

517 *--
ouç
 = 
µch¨
;

518 
buf„ªd
 = 1;

520 } i‡(!
	`°rcmp
(
b
, "elif")) {

521 *--
ouç
 = 
c
;

522 
	`add_öput
(
b
);

523 *--
ouç
 = 
µch¨
;

524 
buf„ªd
 = 1;

525  !
©okí
;

530 
	}
}

532 
	~"¥ïro˚ss.c
"

534 
maybe_›í_öput_fûe
 
	$P1
(*, 
‚
) {

535 i‡((
yyö
 = 
	`f›í
(
‚
, "r")Ë=
NULL
) {

538 i‡(
cuºít_fûe
Ë
	`‰ì
((*)current_file);

539 
cuºít_fûe
 = (*)
	`mÆloc
(
	`°æí
(
‚
) + 1);

540 
cuºít_löe
 = 0;

541 
	`°r˝y
(
cuºít_fûe
, 
‚
);

543 
	}
}

545 
›í_öput_fûe
 
	$P1
(*, 
‚
) {

546 i‡(!
	`maybe_›í_öput_fûe
(
‚
)) {

547 
	`≥º‹
(
‚
);

548 
	`exô
(-1);

550 
	}
}

552 
›í_ouçut_fûe
 
	$P1
(*, 
‚
) {

553 i‡((
yyout
 = 
	`f›í
(
‚
, "w")Ë=
NULL
) {

554 
	`≥º‹
(
‚
);

555 
	`exô
(-1);

557 
	}
}

559 
	$˛o£_ouçut_fûe
() {

560 
	`f˛o£
(
yyout
);

561 
yyout
 = 0;

562 
	}
}

564 *
¥Ÿe˘
 
	$P1
(*, 
p
) {

565 
buf
[1024];

566 *
buÂ
 = 
buf
;

568 *
p
) {

569 i‡(*
p
=='"' || *∞='\\'Ë*
buÂ
++ = '\\';

570 *
buÂ
++ = *
p
++;

572 *
buÂ
 = 0;

573  
buf
;

574 
	}
}

577 
	$¸óã_›ti⁄_deföes
() {

578 
de‚_t
 *
p
;

579 
cou¡
 = 0;

580 
i
;

582 
	`Ârötf
(
°dîr
, "Wrôög buûd o±i⁄†tÿ%†...\n", 
OPTION_DEFINES
);

583 
	`›í_ouçut_fûe
(
OPTION_DEFINES
);

584 
	`Ârötf
(
yyout
, "{\n");

585 
i
 = 0; i < 
DEFHASH
; i++) {

586 
p
 = 
de‚s
[
i
];Ö;Ö =Ö->
√xt
)

587 i‡(!(
p
->
Êags
 & 
DEF_IS_UNDEFINED
)) {

588 
cou¡
++;

589 
	`Ârötf
(
yyout
, " \"__%s__\", \"%s\",\n",

590 
p
->
«me
, 
	`¥Ÿe˘
’->
exps
));

591 i‡(
	`°∫cmp
(
p
->
«me
, "PACKAGE_", 8)==0) {

592 
Àn
;

593 *
tmp
, *
t
;

595 
Àn
 = 
	`°æí
(
p
->
«me
 + 8);

596 
t
 = 
tmp
 = (*)
	`mÆloc
(
Àn
 + 1);

597 
	`°r˝y
(
tmp
, 
p
->
«me
 + 8);

598 *
t
) {

599 i‡(
	`isuµî
(*
t
))

600 *
t
 = 
	`tﬁowî
(*t);

601 
t
++;

603 i‡(
num_∑ckages
 == 100) {

604 
	`Ârötf
(
°dîr
, "Too manyÖackages.\n");

605 
	`exô
(-1);

607 
∑ckages
[
num_∑ckages
++] = 
tmp
;

611 
	`Ârötf
(
yyout
,"};\n\n#deföêNUM_OPTION_DEFS %d\n\n", 
cou¡
);

612 
	`˛o£_ouçut_fûe
();

613 
	}
}

615 
	$dñåaû
() {

616 *
p
;

618 
p
 = 
ouç
;

619 *
p
 && !
	`is•a˚
(*p) && *p != '\n') {

620 
p
++;

622 *
p
 = 0;

623 
	}
}

626 
h™dÀ_ö˛ude
 
	$P1
(*, 
«me
)

628 *
p
;

629 
buf
[1024];

630 
FILE
 *
f
;

631 
öc°©e
 *
is
;

633 i‡(*
«me
 != '"') {

634 
de‚_t
 *
d
;

636 i‡((
d
 = 
	`lookup_deföe
(
«me
)Ë&& d->
«rgs
 == -1) {

637 *
q
;

639 
q
 = 
d
->
exps
;

640 
	`is•a˚
(*
q
))

641 
q
++;

642 
	`h™dÀ_ö˛ude
(
q
);

644 
	`yyîr‹p
("MissingÜeading \" in %cinclude");

648 
p
 = ++
«me
; *p && *p != '"';Ö++);

649 i‡(!*
p
Ë
	`yyîr‹p
("MissingÅrailing \" in %cinclude");

651 *
p
 = 0;

652 i‡((
f
 = 
	`f›í
(
«me
, "r")Ë!
NULL
) {

653 
is
 = (
öc°©e
 *)

654 
	`mÆloc
((
öc°©e
) );

655 
is
->
yyö
 = yyin;

656 
is
->
löe
 = 
cuºít_löe
;

657 
is
->
fûe
 = 
cuºít_fûe
;

658 
is
->
√xt
 = 
ö˘›
;

659 
ö˘›
 = 
is
;

660 
cuºít_löe
 = 0;

661 
cuºít_fûe
 = (*)
	`mÆloc
(
	`°æí
(
«me
) + 1 );

662 
	`°r˝y
(
cuºít_fûe
, 
«me
);

663 
yyö
 = 
f
;

665 
	`•rötf
(
buf
, "C™nŸ %cö˛udê%s", 
µch¨
, 
«me
);

666 
	`yyîr‹
(
buf
);

668 
	}
}

671 
h™dÀ_¥agma
 
	$P1
(*, 
«me
)

673 i‡(!
	`°rcmp
(
«me
, "auto_note_compiler_case_start"))

674 
¥agmas
 |
PRAGMA_NOTE_CASE_START
;

675 i‡(!
	`°rcmp
(
«me
, "no_auto_note_compiler_case_start"))

676 
¥agmas
 &~
PRAGMA_NOTE_CASE_START
;

677 i‡(!
	`°∫cmp
(
«me
, "ppchar:", 7) && *(name + 8))

678 
µch¨
 = *(
«me
 + 8);

679 
	`yyîr‹p
("Unidentified %cpragma");

680 
	}
}

683 
	$¥ïro˚ss
() {

684 *
yyp
, *
yyp2
;

685 
c
;

686 
c⁄d
;

688 
buf„ªd
 ? (
yyp
 = 
yyp2
 = 
ouç
Ë: 
	`fgës
(yy∞yyp2 = 
defbuf
 + (
DEFMAX
 >> 1), 
MAXLINE
-1, 
yyö
)) {

689 i‡(!
buf„ªd
Ë
cuºít_löe
++;

690 
buf„ªd
 = 0;

691 
	`is•a˚
(*
yyp2
)) yyp2++;

692 i‡((
c
 = *
yyp2
Ë=
µch¨
) {

693 
quŸe
 = 0;

694 
•_buf
 = 0, *
ﬁdouç
;

696 i‡(
c
 ='%' && 
yyp2
[1] == '%')

697 
gømm¨_mode
++;

698 
ouç
 = 0;

699 i‡(
yyp
 !
yyp2
Ë
	`yyîr‹p
("Misplaced '%c'.\n");

700 
	`is•a˚
(*++
yyp2
));

701 
yyp
++;

703 i‡((
c
 = *
yyp2
++Ë='"'Ë
quŸe
 ^= 1;

705 i‡(!
quŸe
 && 
c
 == '/') {

706 i‡(*
yyp2
 == '*') {

707 
yyp2
 = 
	`skù_commít
(yyp2, 0);

710 i‡(*
yyp2
 == '/') ;

712 i‡(!
ouç
 && 
	`is•a˚
(
c
)Ëouç = 
yyp
;

713 i‡(
c
 ='\n' || c =
EOF
) ;

715 *
yyp
++ = 
c
;

718 i‡(
ouç
) {

719 i‡(
yyout
Ë
•_buf
 = *(
ﬁdouç
 = 
ouç
);

720 *
ouç
++ = 0;

721 
	`is•a˚
(*
ouç
)) outp++;

723 
ouç
 = 
yyp
;

724 *
yyp
 = 0;

725 
yyp
 = 
defbuf
 + (
DEFMAX
 >> 1) + 1;

727 i‡(!
	`°rcmp
("deföe", 
yyp
)) {

728 
	`h™dÀ_deföe
();

729 } i‡(!
	`°rcmp
("if", 
yyp
)) {

730 
c⁄d
 = 
	`c⁄d_gë_exp
(0);

731 i‡(*
ouç
 !'\n'Ë
	`yyîr‹p
("ConditionÅoo complex in %cif");

732 
	`h™dÀ_c⁄d
(
c⁄d
);

733 } i‡(!
	`°rcmp
("ifdef", 
yyp
)) {

734 
	`dñåaû
();

735 
	`h™dÀ_c⁄d
(
	`lookup_deföe
(
ouç
) != 0);

736 } i‡(!
	`°rcmp
("i‚def", 
yyp
)) {

737 
	`dñåaû
();

738 
	`h™dÀ_c⁄d
(!
	`lookup_deföe
(
ouç
));

739 } i‡(!
	`°rcmp
("ñif", 
yyp
)) {

740 
	`h™dÀ_ñif
();

741 } i‡(!
	`°rcmp
("ñ£", 
yyp
)) {

742 
	`h™dÀ_ñ£
();

743 } i‡(!
	`°rcmp
("ídif", 
yyp
)) {

744 
	`h™dÀ_ídif
();

745 } i‡(!
	`°rcmp
("undef", 
yyp
)) {

746 
de‚_t
 *
d
;

748 
	`dñåaû
();

749 i‡((
d
 = 
	`lookup_deföôi⁄
(
ouç
))) {

750 
d
->
Êags
 |
DEF_IS_UNDEFINED
;

751 
d
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

753 
	`add_deföe
(
ouç
, -1, " ");

754 
d
 = 
	`lookup_deföôi⁄
(
ouç
);

755 
d
->
Êags
 |
DEF_IS_UNDEFINED
;

756 
d
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

758 } i‡(!
	`°rcmp
("echo", 
yyp
)) {

759 
	`Ârötf
(
°dîr
, "echÿ©Üöê%d o‡%s: %s\n", 
cuºít_löe
, 
cuºít_fûe
, 
ouç
);

760 } i‡(!
	`°rcmp
("ö˛ude", 
yyp
)) {

761 
	`h™dÀ_ö˛ude
(
ouç
);

762 } i‡(!
	`°rcmp
("¥agma", 
yyp
)) {

763 
	`h™dÀ_¥agma
(
ouç
);

764 } i‡(
yyout
) {

765 i‡(!
	`°rcmp
("löe", 
yyp
)) {

766 
	`Ârötf
(
yyout
, "#löê%d \"%s\"\n", 
cuºít_löe
,

767 
cuºít_fûe
);

769 i‡(
•_buf
Ë*
ﬁdouç
 = sp_buf;

770 i‡(
¥agmas
 & 
PRAGMA_NOTE_CASE_START
) {

771 i‡(*
yyp
 ='%'Ë
¥agmas
 &~
PRAGMA_NOTE_CASE_START
;

773 
	`Ârötf
(
yyout
, "%s\n", 
yyp
-1);

776 
buff
[200];

777 
	`•rötf
(
buff
, "Uƒecogni£d %¯dúe˘ivê: %s\n", 
µch¨
, 
yyp
);

778 
	`yyîr‹
(
buff
);

781 i‡(
c
 == '/') {

782 i‡((
c
 = *++
yyp2
) == '*') {

783 i‡(
yyout
Ë
	`Âuts
(
yyp
, yyout);

784 
yyp2
 = 
	`skù_commít
(yyp2, 1);

785 } i‡(
c
 ='/' && !
yyout
) ;

786 i‡(
yyout
) {

787 
	`Ârötf
(
yyout
, "%s", 
yyp
);

790 i‡(
yyout
) {

791 
	`Ârötf
(
yyout
, "%s", 
yyp
);

792 i‡(
¥agmas
 & 
PRAGMA_NOTE_CASE_START
) {

793 
löe_to_¥öt
;

795 
löe_to_¥öt
 = 0;

797 i‡(!
ö_c_ˇ£
) {

798 
	`ißlunum
(*
yyp2
)) yyp2++;

799 
	`is•a˚
(*
yyp2
)) yyp2++;

800 i‡(*
yyp2
 == ':') {

801 
ö_c_ˇ£
 = 1;

802 
yyp2
++;

806 i‡(
ö_c_ˇ£
) {

807 (
c
 = *
yyp2
++)) {

808 
c
) {

811 i‡(!
cquŸe
 && (++
block_√°
 == 1))

812 
löe_to_¥öt
 = 1;

818 i‡(!
cquŸe
) {

819 i‡(--
block_√°
 < 0Ë
	`yyîr‹
("Too many }'s");

825 i‡(!(
cquŸe
 & 
CHAR_QUOTE
)ËcquŸê^
STRING_QUOTE
;

829 i‡(!(
cquŸe
 & 
STRING_QUOTE
)ËcquŸê^
CHAR_QUOTE
;

833 i‡(
cquŸe
 && *
yyp2
) yyp2++;

837 i‡(!
cquŸe
) {

838 i‡((
c
 = *
yyp2
) == '*') {

839 
yyp2
 = 
	`skù_commít
(yyp2, 1);

840 } i‡(
c
 == '/') {

841 *(
yyp2
-1) = '\n';

842 *
yyp2
 = '\0';

848 i‡(!
cquŸe
 && !
block_√°
)

849 
	`yyîr‹
("Case started beforeÉndingÖrevious case with ;");

853 i‡(!
cquŸe
 && !
block_√°
Ë
ö_c_ˇ£
 = 0;

858 i‡(
löe_to_¥öt
)

859 
	`Ârötf
(
yyout
, "#löê%d \"%s\"\n", 
cuºít_löe
 + 1,
cuºít_fûe
);

864 i‡(
i·›
) {

865 
if°©e_t
 *
p
 = 
i·›
;

867 
i·›
) {

868 
p
 = 
i·›
;

869 
i·›
 = 
p
->
√xt
;

870 
	`‰ì
((*)
p
);

872 
	`yyîr‹p
("Missing %cendif");

874 
	`f˛o£
(
yyö
);

875 
	`‰ì
(
cuºít_fûe
);

876 
cuºít_fûe
 = 0;

877 
√x∑nds
 = 0;

878 i‡(
ö˘›
) {

879 
öc°©e
 *
p
 = 
ö˘›
;

881 
cuºít_fûe
 = 
p
->
fûe
;

882 
cuºít_löe
 = 
p
->
löe
;

883 
yyö
 = 
p
->yyin;

884 
ö˘›
 = 
p
->
√xt
;

885 
	`‰ì
((*Ë
p
);

886 
	`¥ïro˚ss
();

887 } 
yyö
 = 0;

888 
	}
}

890 
	$make_efun_èbÀs
()

892 
	#NUM_FILES
 5

	)

893 * 
outfûes
[
NUM_FILES
] = {

894 
EFUN_TABLE
, 
OPC_PROF
, 
OPCODES
, 
EFUN_PROTO
, 
EFUN_DEFS


896 
FILE
 *
fûes
[
NUM_FILES
];

897 
i
;

899 
	`Ârötf
(
°dîr
, "BuildingÉfunÅables ...\n");

900 
i
 = 0; i < 
NUM_FILES
; i++) {

901 
fûes
[
i
] = 
	`f›í
(
outfûes
[i], "w");

902 i‡(!
fûes
[
i
]) {

903 
	`Ârötf
(
°dîr
, "make_func: u«bÀÅÿ›í %s\n", 
outfûes
[
i
]);

904 
	`exô
(-1);

906 
	`Ârötf
(
fûes
[
i
],

908 
	`Ârötf
(
fûes
[
i
],

912 
	`Ârötf
(
fûes
[0],"\n#include \"efun_protos.h\"\n\n");

913 
	`Ârötf
(
fûes
[0],"\ntypedef void (*func_t) PROT((void));\n\n");

914 
	`Ârötf
(
fûes
[0],"func_tÉfun_table[] = {\n");

916 
	`Ârötf
(
fûes
[1],"\ntypedef struct opc_s { char *name; int count; } opc_t;\n\n");

917 
	`Ârötf
(
fûes
[1],"opc_t opc_efun[] = {\n");

919 
	`Ârötf
(
fûes
[2], "\n/* operators */\n\n");

920 
i
 = 0; i < 
›_code
; i++) {

921 
	`Ârötf
(
fûes
[2],"#deföê%-30†%d\n", 
›î_codes
[
i
], i+1);

924 
	`Ârötf
(
fûes
[2],"\n/* 1árgÉfun†*/\n#deföêBASE %d\n\n", 
›_code
+1);

925 
i
 = 0; i < 
efun1_code
; i++) {

926 
	`Ârötf
(
fûes
[0],"\tf_%s,\n", 
efun1_«mes
[
i
]);

927 
	`Ârötf
(
fûes
[1],"{\"%s\", 0},\n", 
efun1_«mes
[
i
]);

928 
	`Ârötf
(
fûes
[2],"#deföê%-30†%d\n", 
efun1_codes
[
i
], i+
›_code
+1);

929 
	`Ârötf
(
fûes
[3],"void f_%†PROT((void));\n", 
efun1_«mes
[
i
]);

932 
	`Ârötf
(
fûes
[2],"\n/*Éfun†*/\n#deföêONEARG_MAX %d\n\n", 
efun1_code
 + 
›_code
+1);

933 
i
 = 0; i < 
efun_code
; i++) {

934 
	`Ârötf
(
fûes
[0],"\tf_%s,\n", 
efun_«mes
[
i
]);

935 
	`Ârötf
(
fûes
[1],"{\"%s\", 0},\n", 
efun_«mes
[
i
]);

936 
	`Ârötf
(
fûes
[2],"#deföê%-30†%d\n", 
efun_codes
[
i
], i+
›_code
+
efun1_code
+1);

937 
	`Ârötf
(
fûes
[3],"void f_%†PROT((void));\n", 
efun_«mes
[
i
]);

939 
	`Ârötf
(
fûes
[0], "};\n");

940 
	`Ârötf
(
fûes
[1], "};\n");

942 i‡(
efun1_code
 + 
›_code
 >= 256) {

943 
	`Ârötf
(
°dîr
, "You have wayÅoo manyÉfuns. ContactÅhe MudOS developers if youÑeallyÇeedÅhis many.\n");

945 i‡(
efun_code
 >= 256) {

946 
	`Ârötf
(
°dîr
, "You have wayÅoo manyÉfuns. ContactÅhe MudOS developers if youÑeallyÇeedÅhis many.\n");

948 
	`Ârötf
(
fûes
[2],"\n/*Éfun†*/\n#deföêNUM_OPCODES %d\n\n", 
efun_code
 + 
efun1_code
 + 
›_code
);

951 
i
 = 0; i < 
num_buff
; i++) {

952 
j
;

953 
j
 = 0; j < 
i
; j++)

954 i‡(
	`°rcmp
(
key
[
i
], key[
j
]) < 0) {

955 *
tmp
;

956 
tmp
 = 
key
[
i
]; key[i] = key[
j
]; key[j] =Åmp;

957 
tmp
 = 
buf
[
i
]; buf[i] = buf[
j
]; buf[j] =Åmp;

962 
	`Ârötf
(
fûes
[4], "{\n");

963 
i
 = 0; i < 
num_buff
; i++)

964 
	`Ârötf
(
fûes
[4], "%s", 
buf
[
i
]);

965 
	`Ârötf
(
fûes
[4], "\n};\nintÉfun_arg_types[] = {\n");

966 
i
=0; i < 
œ°_cuºít_ty≥
; i++) {

967 i‡(
¨g_ty≥s
[
i
] == 0)

968 
	`Ârötf
(
fûes
[4], "0,\n");

970 
	`Ârötf
(
fûes
[4], "%s,", 
	`˘y≥
(
¨g_ty≥s
[
i
]));

972 
	`Ârötf
(
fûes
[4],"};\n");

974 
i
=0; i < 
NUM_FILES
; i++)

975 
	`f˛o£
(
fûes
[
i
]);

976 
	}
}

978 
	$h™dÀ_loˇl_deföes
(
check
) {

979 
de‚_t
 *
p
;

980 
i
;

981 
¥obÀm
 = 0;

983 
i
 = 0; i < 
DEFHASH
; i++)

984 
p
 = 
de‚s
[
i
];Ö;Ö =Ö->
√xt
)

985 
p
->
Êags
 |
DEF_IS_NOT_LOCAL
;

989 i‡((
p
 = 
	`lookup_deföe
("_OPTIONS_H_"))) {

990 
p
->
Êags
 |
DEF_IS_UNDEFINED
;

991 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

993 i‡((
p
 = 
	`lookup_deföe
("DEBUG")))

994 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

996 
µch¨
 = '#';

997 
	`¥ïro˚ss
();

999 i‡((
p
 = 
	`lookup_deföe
("_OPTIONS_H_")))

1000 
p
->
Êags
 |
DEF_IS_UNDEFINED
;

1002 i‡(!
check
)

1005 
i
 = 0; i < 
DEFHASH
; i++)

1006 
p
 = 
de‚s
[
i
];Ö;Ö =Ö->
√xt
)

1007 i‡(
p
->
Êags
 & 
DEF_IS_NOT_LOCAL
) {

1008 
	`Ârötf
(
°dîr
, "No setting for %s in '%s'.\n",

1009 
p
->
«me
, 
LOCAL_OPTIONS
);

1010 
¥obÀm
 = 1;

1013 i‡(
¥obÀm
) {

1014 
	`Ârötf
(
°dîr
, "\
***ThisÜocal_options fileáppearsÅo have been written forán\n\
***earlier version ofÅhe MudOS driver. PleaseÜookupÅheÇew options\n\
***(mentionedábove) inÅhe options.h file, decide how you wouldÜikeÅhem\n\
***set,ándáddÅhose settingsÅoÅheÜocal_options file.\n");

1019 
	`exô
(-1);

1021 
	}
}

1023 
wrôe_›ti⁄s_ö˛
 
	$P1
(, 
loˇl
) {

1024 
	`›í_ouçut_fûe
(
OPTIONS_INCL
);

1025 i‡(
loˇl
) {

1026 
	`Ârötf
(
yyout
, "#ö˛udê\"%s\"\n", 
LOCAL_OPTIONS
);

1028 
	`Ârötf
(
yyout
, "#ö˛udê\"%s\"\n", 
OPTIONS_H
);

1030 
	`˛o£_ouçut_fûe
();

1031 
	}
}

1033 
	$h™dÀ_›ti⁄s
(
fuŒ
) {

1034 
	`›í_öput_fûe
(
OPTIONS_H
);

1035 
µch¨
 = '#';

1036 
	`¥ïro˚ss
();

1038 i‡(!
fuŒ
) {

1040 i‡(
	`maybe_›í_öput_fûe
(
LOCAL_OPTIONS
))

1041 
	`h™dÀ_loˇl_deföes
(0);

1045 i‡(
	`maybe_›í_öput_fûe
(
LOCAL_OPTIONS
)) {

1046 
	`Ârötf
(
°dout
, "Usög '%s' fûê...\n", 
LOCAL_OPTIONS
);

1047 
	`h™dÀ_loˇl_deföes
(1);

1048 
	`wrôe_›ti⁄s_ö˛
(1);

1050 
	`Ârötf
(
°dîr
, "No \"%s\" fileÖresent. If you create one from \"%s\",\nyou can use it when you getáÇew driver,ánd you will be warned ifÅhereáre\nchangesÅoÅheÑeal %s which you should include in yourÜocal file.\n",

1051 
LOCAL_OPTIONS
, 
OPTIONS_H
, OPTIONS_H);

1052 
	`wrôe_›ti⁄s_ö˛
(0);

1055 
	`¸óã_›ti⁄_deföes
();

1056 
	}
}

1058 
h™dÀ_buûd_func_•ec
 
	$P1
(*, 
comm™d
) {

1059 
buf
[1024];

1060 
i
;

1062 
	`Ârötf
(
°dîr
, "Building compiler files ...\n");

1063 
	`•rötf
(
buf
, "%†%†>%s", 
comm™d
, 
FUNC_SPEC
, 
FUNC_SPEC_CPP
);

1064 
	`sy°em
(
buf
);

1065 
i
 = 0; i < 
num_∑ckages
; i++) {

1066 
	`•rötf
(
buf
, "%s -I.Öackages/%s_spec.c >>%s",

1067 
comm™d
, 
∑ckages
[
i
], 
FUNC_SPEC_CPP
);

1068 
	`sy°em
(
buf
);

1071 
	`›í_ouçut_fûe
(
PACKAGES
);

1072 
	`Ârötf
(
yyout
, "SRC=");

1073 
i
=0; i < 
num_∑ckages
; i++)

1074 
	`Ârötf
(
yyout
, "%s.¯", 
∑ckages
[
i
]);

1075 
	`Ârötf
(
yyout
, "\nOBJ=");

1076 
i
=0; i < 
num_∑ckages
; i++)

1077 
	`Ârötf
(
yyout
, "%s.$(OË", 
∑ckages
[
i
]);

1078 
	`Ârötf
(
yyout
, "\n");

1079 
	`˛o£_ouçut_fûe
();

1080 
	}
}

1082 
h™dÀ_¥o˚ss
 
	$P1
(*, 
fûe
) {

1083 
buf
[1024];

1084 
l
;

1086 
	`°r˝y
(
buf
, 
fûe
);

1087 
l
 = 
	`°æí
(
buf
);

1088 i‡(
	`°rcmp
(
buf
 + 
l
 - 4, ".pre")) {

1089 
	`Ârötf
(
°dîr
, "Filename for -process mustÉnd in .pre\n");

1090 
	`exô
(-1);

1092 *(
buf
 + 
l
 - 4) = 0;

1094 
	`Ârötf
(
°dîr
, "Cª©ög '%s' from '%s' ...\n", 
buf
, 
fûe
);

1096 #ifde‡
DEBUG


1098 
	`add_deföe
("DEBUG", -1, " ");

1101 
	`›í_öput_fûe
(
fûe
);

1102 
	`›í_ouçut_fûe
(
buf
);

1103 
µch¨
 = '%';

1104 
	`¥ïro˚ss
();

1105 
	`˛o£_ouçut_fûe
();

1106 
	}
}

1108 
	$h™dÀ_buûd_efuns
() {

1109 
	`yy∑r£
();

1111 
num_buff
 = 
›_code
 = 
efun_code
 = 
efun1_code
 = 0;

1113 
	`›í_öput_fûe
(
FUNC_SPEC_CPP
);

1114 
	`yy∑r£
();

1115 
	`make_efun_èbÀs
();

1116 
	}
}

1118 
	$h™dÀ_≠∂õs
() {

1119 
FILE
 *
f
 = 
	`f›í
("applies", "r");

1120 
FILE
 *
out
 = 
	`f›í
("applies.h", "w");

1121 
FILE
 *
èbÀ
 = 
	`f›í
("applies_table.c", "w");

1122 
buf
[8192];

1123 *
cﬁ⁄
;

1124 *
p
;

1125 
≠∂y_numbî
 = 0;

1127 
	`Ârötf
(
out
, "/*áutogenerated from 'applies' */\n#ifndef APPLIES_H\n#define APPLIES_H\n\nextern char *applies_table[];\n\n/*Åhe folowing must beÅhe first character of __INIT */\n#define APPLY___INIT_SPECIAL_CHAR\t\t'#'\n");

1128 
	`Ârötf
(
èbÀ
, "/*áutogenerated from 'applies' */\n\nchar *applies_table[] = {\n");

1130 
	`fgës
(
buf
, 8192, 
f
)) {

1131 
buf
[
	`°æí
(buf)-1] = 0;

1132 i‡(
buf
[0] == '#') ;

1133 i‡((
cﬁ⁄
 = 
	`°rchr
(
buf
, ':'))) {

1134 *
cﬁ⁄
++ = 0;

1135 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t\"%s\"\n", 
buf
, 
cﬁ⁄
);

1137 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t", 
buf
);

1138 
p
 = 
buf
;

1139 *
p
) {

1140 *
p
 = 
	`tﬁowî
(*p);

1141 
p
++;

1143 
	`Ârötf
(
out
, "\"%s\"\n", 
buf
);

1146 
	`fgës
(
buf
, 8192, 
f
)) {

1147 
buf
[
	`°æí
(buf)-1] = 0;

1148 i‡((
cﬁ⁄
 = 
	`°rchr
(
buf
, ':'))) {

1149 *
cﬁ⁄
++ = 0;

1150 
	`Ârötf
(
èbÀ
, "\t\"%s\",\n", 
cﬁ⁄
);

1151 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t%i\n", 
buf
, 
≠∂y_numbî
++);

1153 
	`Ârötf
(
out
, "#deföêAPPLY_%-30s\t%i\n", 
buf
, 
≠∂y_numbî
++);

1154 
p
 = 
buf
;

1155 *
p
) {

1156 *
p
 = 
	`tﬁowî
(*p);

1157 
p
++;

1159 
	`Ârötf
(
èbÀ
, "\t\"%s\",\n", 
buf
);

1163 
	`Ârötf
(
èbÀ
, "};\n");

1164 
	`Ârötf
(
out
, "\n#deföêNUM_MASTER_APPLIES\t%i\n\n#ídif\n", 
≠∂y_numbî
);

1166 
	`f˛o£
(
out
);

1167 
	`f˛o£
(
èbÀ
);

1168 
	`f˛o£
(
f
);

1169 
	}
}

1171 
	$h™dÀ_mÆloc
() {

1172 #ifde‡
PEDANTIC


1173 
	`u∆ök
(*);

1174 
	`lök
(*, *);

1177 *
the_mÆloc
 = 0, *
the_wøµî
 = 0;

1179 i‡(
	`lookup_deföe
("SYSMALLOC"))

1180 
the_mÆloc
 = "sysmalloc.c";

1181 i‡(
	`lookup_deföe
("SMALLOC"))

1182 
the_mÆloc
 = "smalloc.c";

1183 i‡(
	`lookup_deföe
("BSDMALLOC"))

1184 
the_mÆloc
 = "bsdmalloc.c";

1186 i‡(
	`lookup_deföe
("WRAPPEDMALLOC"))

1187 
the_wøµî
 = "wrappedmalloc.c";

1188 i‡(
	`lookup_deföe
("DEBUGMALLOC"))

1189 
the_wøµî
 = "debugmalloc.c";

1191 i‡(!
the_mÆloc
 && !
the_wøµî
) {

1192 
	`Ârötf
(
°dîr
, "MemoryÖackageánd/or malloc wrapper incorrectly specified in options.h\n");

1193 
	`exô
(-1);

1196 i‡(
	`u∆ök
("mÆloc.c"Ë=-1 && 
î∫o
 !
ENOENT
)

1197 
	`≥º‹
("unlink malloc.c");

1198 i‡(
	`u∆ök
("mÆlocwøµî.c"Ë=-1 && 
î∫o
 !
ENOENT
)

1199 
	`≥º‹
("unlink mallocwrapper.c");

1201 i‡(
the_wøµî
) {

1202 
	`¥ötf
("Using memoryállocationÖackage: %s\n\t\tWrapped with: %s\n",

1203 
the_mÆloc
, 
the_wøµî
);

1204 i‡(
	`lök
(
the_wøµî
, "mallocwrapper.c") == -1)

1205 
	`≥º‹
("link mallocwrapper.c");

1207 
	`¥ötf
("Usög mem‹yáŒoˇti⁄Öackage: %s\n", 
the_mÆloc
);

1209 i‡(
	`lök
(
the_mÆloc
, "malloc.c") == -1)

1210 
	`≥º‹
("link malloc.c");

1211 
	}
}

1213 
check_ö˛ude2
 
	$P4
(*, 
èg
, *, 
fûe
,

1214 *, 
bef‹e
, *, 
a·î
) {

1215 
buf
[1024];

1216 
FILE
 *
˘
;

1218 
	`¥ötf
("Checkög f‹ in˛udêfûê<%s> ... ", 
fûe
);

1219 
˘
 = 
	`f›í
("comptest.c", "w");

1220 
	`Ârötf
(
˘
, "#include \"configure.h\"\n#include \"std_incl.h\"\n%s\n#include <%s>\n%s\n",

1221 
bef‹e
, 
fûe
, 
a·î
);

1222 
	`f˛o£
(
˘
);

1224 
	`•rötf
(
buf
, "%†%†-¯com±e°.¯" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
);

1225 i‡(!
	`compûe
(
buf
)) {

1226 
	`Ârötf
(
yyout
, "#deföê%s\n", 
èg
);

1228 
	`fÊush
(
yyout
);

1229 
	`¥ötf
("exists\n");

1232 
	`¥ötf
("doesÇotÉxist or is unusable\n");

1234 
	}
}

1236 
check_ö˛ude
 
	$P2
(*, 
èg
, *, 
fûe
) {

1237 
buf
[1024];

1238 
FILE
 *
˘
;

1240 
	`¥ötf
("Checkög f‹ in˛udêfûê<%s> ... ", 
fûe
);

1241 
˘
 = 
	`f›í
("comptest.c", "w");

1242 
	`Ârötf
(
˘
, "#ö˛udê\"c⁄figuª.h\"\n#ö˛udê\"°d_ö˛.h\"\n#ö˛udê\"fûe_ö˛.h\"\n#ö˛udê<%s>\n", 
fûe
);

1243 
	`f˛o£
(
˘
);

1245 
	`•rötf
(
buf
, "%†%†-¯com±e°.¯" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
);

1246 i‡(!
	`compûe
(
buf
)) {

1247 
	`Ârötf
(
yyout
, "#deföê%s\n", 
èg
);

1249 
	`fÊush
(
yyout
);

1250 
	`¥ötf
("exists\n");

1253 
	`¥ötf
("doesÇotÉxist\n");

1255 
	}
}

1257 
check_libøry
 
	$P1
(*, 
lib
) {

1258 
buf
[1024];

1259 
FILE
 *
˘
;

1261 
	`¥ötf
("Checkög f‹Üibøry %†... ", 
lib
);

1262 
˘
 = 
	`f›í
("comptest.c", "w");

1263 
	`Ârötf
(
˘
, "int main() {Éxit(0); }\n");

1264 
	`f˛o£
(
˘
);

1266 
	`•rötf
(
buf
, "%†%†com±e°.¯%s" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
, 
lib
);

1267 i‡(!
	`compûe
(
buf
)) {

1268 
	`Ârötf
(
yyout
, " %s", 
lib
);

1269 
	`¥ötf
("exists\n");

1272 
	`¥ötf
("doesÇotÉxist\n");

1274 
	}
}

1277 
check_ªt_ty≥
 
	$P4
(*, 
èg
, *, 
¥e
,

1278 *, 
ty≥
, *, 
func
) {

1279 
buf
[1024];

1280 
FILE
 *
˘
;

1282 
	`¥ötf
("CheckögÑëu∫Åy≥ o‡%s(Ë...", 
func
);

1283 
˘
 = 
	`f›í
("comptest.c", "w");

1284 
	`Ârötf
(
˘
, "%s\n\n%s%s();\n", 
¥e
, 
ty≥
, 
func
);

1285 
	`f˛o£
(
˘
);

1287 
	`•rötf
(
buf
, "%†%†-¯com±e°.¯>/dev/nuŒ 2>&1", 
COMPILER
, 
CFLAGS
);

1288 i‡(!
	`sy°em
(
buf
)) {

1289 
	`Ârötf
(
yyout
, "#deföê%s\n", 
èg
);

1290 
	`¥ötf
("ªtu∫†%s\n", 
ty≥
);

1293 
	`¥ötf
("d€†nŸÑëu∫ %s\n", 
ty≥
);

1295 
	}
}

1299 
check_¥og
 
	$P4
(*, 
èg
, *, 
¥e
, *, 
code
, , 
™drun
) {

1300 
buf
[1024];

1301 
FILE
 *
˘
;

1303 
˘
 = 
	`f›í
("comptest.c", "w");

1304 
	`Ârötf
(
˘
, "#ö˛udê\"c⁄figuª.h\"\n#ö˛udê\"°d_ö˛.h\"\n%s\n\nöàmaö(Ë{%s}\n", (
¥e
 ?Öª : ""), 
code
);

1305 
	`f˛o£
(
˘
);

1307 
	`•rötf
(
buf
, "%†%†com±e°.¯-ÿcom±e°" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
);

1308 i‡(!
	`compûe
(
buf
Ë&& (!
™drun
 || !
	`sy°em
("./comptest"))) {

1309 i‡(
èg
) {

1310 
	`Ârötf
(
yyout
, "#deföê%s\n", 
èg
);

1311 
	`fÊush
(
yyout
);

1317 
	}
}

1319 
check_code
 
	$P2
(*, 
¥e
, *, 
code
) {

1320 
buf
[1024];

1321 
FILE
 *
˘
;

1322 
rc
;

1324 
˘
 = 
	`f›í
("comptest.c", "w");

1325 
	`Ârötf
(
˘
, "#ö˛udê\"c⁄figuª.h\"\n#ö˛udê\"°d_ö˛.h\"\n%s\n\nöàmaö(Ë{%s}\n", (
¥e
 ?Öª : ""), 
code
);

1326 
	`f˛o£
(
˘
);

1328 
	`•rötf
(
buf
, "%†%†com±e°.¯-ÿcom±e°" 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
);

1329 i‡(
	`compûe
(
buf
Ë|| (
rc
 = 
	`sy°em
("./comptest")) == 127 ||Ñc == -1) {

1332  
rc
;

1333 
	}
}

1335 
	$check_löux_libc
() {

1336 
buf
[1024];

1337 
FILE
 *
˘
;

1339 
˘
 = 
	`f›í
("comptest.c", "w");

1340 
	`Ârötf
(
˘
, "int main() { }\n");

1341 
	`f˛o£
(
˘
);

1343 
	`•rötf
(
buf
, "%†-g com±e°.¯-ÿcom±e° >/dev/nuŒ 2>&1", 
COMPILER
);

1344 i‡(
	`sy°em
(
buf
)) {

1345 
	`Ârötf
(
°dîr
, "Üibg.a/so installed wrong,Årying workaround ...\n");

1346 
	`•rötf
(
buf
, "%†-g com±e°.¯-l¯-ÿcom±e° >/dev/nuŒ 2>&1", 
COMPILER
);

1347 i‡(
	`sy°em
(
buf
)) {

1348 
	`Ârötf
(
°dîr
, "*** FAILED.\n");

1349 
	`exô
(-1);

1351 
	`Ârötf
(
yyout
, " -lc");

1353 
	}
}

1355 *
	gmemmove_¥og
 = "\
 buf[80];\n\
(buf,\"0123456789ABCDEF\");\n\
(&buf[1],&buf[4],13);\n\
(strcmp(buf,\"0456789ABCDEF\"))Éxit(-1);\n\
(&buf[8],&buf[6],9);\n\
(strcmp(buf,\"0456789A9ABCDEF\"))Éxit(-1);\n\
 0;\n";

1364 
check_memmove
 
	$P2
(*, 
èg
, *, 
°r
) {

1365  
	`check_¥og
(
èg
, 
°r
, 
memmove_¥og
, 1);

1366 
	}
}

1368 
	$föd_memmove
() {

1369 
	`¥ötf
("Checking for memmove() ...");

1370 i‡(
	`check_memmove
(0, "")) {

1371 
	`¥ötf
("Éxists\n");

1374 i‡(
	`check_memmove
("USE_BCOPY", "#define memmove(a,b,c) bcopy(b,a,c)")) {

1375 
	`¥ötf
(" simulating via bcopy()\n");

1378 
	`¥ötf
(" missing; using MudOS's version\n");

1379 
	`Ârötf
(
yyout
, "#define MEMMOVE_MISSING\n");

1380 
	}
}

1382 
vîbo£_check_¥og
 
	$P5
(*, 
msg
, *, 
def
, *, 
¥e
,

1383 *, 
¥og
, , 
™drun
) {

1384 
	`¥ötf
("%†...", 
msg
);

1385 i‡(
	`check_¥og
(
def
, 
¥e
, 
¥og
, 
™drun
))

1386 
	`¥ötf
("Éxists\n");

1387 
	`¥ötf
(" doesÇotÉxist\n");

1388 
	}
}

1390 
	$check_c⁄figuª_vîsi⁄
() {

1391 
buf
[1024];

1392 
FILE
 *
˘
;

1394 
˘
 = 
	`f›í
("comptest.c", "w");

1395 
	`Ârötf
(
˘
, "#ö˛udê\"c⁄figuª.h\"\n\n#i‡CONFIGURE_VERSION < %i\¡høshánd dõ\n#ídif\n\nöàmaö(Ë{ }\n", 
CONFIGURE_VERSION
);

1396 
	`f˛o£
(
˘
);

1398 
	`•rötf
(
buf
, "%†%†com±e°.¯-ÿcom±e° " 
TO_DEV_NULL
, 
COMPILER
, 
CFLAGS
);

1399  !
	`compûe
(
buf
);

1400 
	}
}

1402 
	$h™dÀ_c⁄figuª
() {

1403 i‡(
	`check_c⁄figuª_vîsi⁄
()) ;

1405 
	`›í_ouçut_fûe
("configure.h");

1407 #i‚de‡
WIN32


1408 
	`check_ö˛ude
("INCL_STDLIB_H", "stdlib.h");

1409 
	`check_ö˛ude
("INCL_UNISTD_H", "unistd.h");

1410 i‡(
	`check_ö˛ude
("INCL_TIME_H", "time.h")) {

1411 i‡(!
	`check_¥og
(0, "#include <time.h>", "tzset();", 0)) {

1412 i‡(
	`check_¥og
(0, 0, "voidÅzset();Åzset();", 0))

1413 
	`Ârötf
(
yyout
, "#define PROTO_TZSET\n#define USE_TZSET\n");

1416 
	`Ârötf
(
yyout
, "#define USE_TZSET\n");

1418 i‡(
	`check_¥og
(0, 0, "voidÅzset();Åzset();", 0))

1419 
	`Ârötf
(
yyout
, "#define PROTO_TZSET\n#define USE_TZSET\n");

1421 
	`check_ö˛ude
("INCL_SYS_TIMES_H", "sys/times.h");

1422 
	`check_ö˛ude
("INCL_FCNTL_H", "fcntl.h");

1423 
	`check_ö˛ude
("INCL_SYS_TIME_H", "sys/time.h");

1424 
	`check_ö˛ude
("INCL_DOS_H", "dos.h");

1425 
	`check_ö˛ude
("INCL_USCLKC_H", "usclkc.h");

1426 
	`check_ö˛ude
("INCL_LIMITS_H", "limits.h");

1427 
	`check_ö˛ude
("INCL_LOCALE_H", "locale.h");

1428 i‡(!
	`check_¥og
(0, 0, "int x = USHRT_MAX;", 0)) {

1429 i‡(!
	`check_¥og
(0, 0, "int x = MAXSHORT;", 0))

1430 
	`check_ö˛ude
("INCL_VALUES_H", "values.h");

1431 
	`Ârötf
(
yyout
, "#define USHRT_MAX (MAXSHORT)\n");

1434 
	`check_ö˛ude
("INCL_NETINET_IN_H", "netinet/in.h");

1435 
	`check_ö˛ude
("INCL_ARPA_INET_H", "arpa/inet.h");

1437 
	`check_ö˛ude
("INCL_SYS_TYPES_H", "sys/types.h");

1438 
	`check_ö˛ude
("INCL_SYS_IOCTL_H", "sys/ioctl.h");

1439 
	`check_ö˛ude
("INCL_SYS_SOCKET_H", "sys/socket.h");

1440 
	`check_ö˛ude
("INCL_NETDB_H", "netdb.h");

1442 
	`check_ö˛ude2
("INCL_ARPA_TELNET_H", "arpa/telnet.h", "", "int i=TELOPT_NAWS;");

1443 
	`check_ö˛ude
("INCL_SYS_SEMA_H", "sys/sema.h");

1444 
	`check_ö˛ude
("INCL_SYS_SOCKETVAR_H", "sys/socketvar.h");

1445 
	`check_ö˛ude
("INCL_SOCKET_H", "socket.h");

1446 
	`check_ö˛ude
("INCL_RESOLVE_H", "resolve.h");

1448 
	`check_ö˛ude
("INCL_SYS_STAT_H", "sys/stat.h");

1452 i‡(
	`check_¥og
("BSD_READDIR", "#include <sys/dir.h>", "struct direct *d; d->d_namlen;", 0)) {

1453 
	`check_ö˛ude
("INCL_SYS_DIR_H", "sys/dir.h");

1456 
	`check_ö˛ude
("INCL_DIRENT_H", "dirent.h");

1457 
	`check_ö˛ude
("INCL_SYS_DIRENT_H", "sys/dirent.h");

1458 
	`Ârötf
(
yyout
, "#define USE_STRUCT_DIRENT\n");

1461 
	`check_ö˛ude
("INCL_SYS_FILIO_H", "sys/filio.h");

1462 
	`check_ö˛ude
("INCL_SYS_SOCKIO_H", "sys/sockio.h");

1463 
	`check_ö˛ude
("INCL_SYS_MKDEV_H", "sys/mkdev.h");

1464 
	`check_ö˛ude
("INCL_SYS_RESOURCE_H", "sys/resource.h");

1465 
	`check_ö˛ude
("INCL_SYS_RUSAGE_H", "sys/rusage.h");

1466 
	`check_ö˛ude
("INCL_SYS_WAIT_H", "sys/wait.h");

1467 
	`check_ö˛ude
("INCL_SYS_CRYPT_H", "sys/crypt.h");

1468 
	`check_ö˛ude
("INCL_CRYPT_H", "crypt.h");

1469 
	`check_ö˛ude
("INCL_MALLOC_H", "my_malloc.h");

1472 i‡(!
	`check_ö˛ude
("INCL_MACH_MACH_H", "mach/mach.h"))

1473 
	`check_ö˛ude
("INCL_MACH_H", "mach.h");

1476 
	`check_ö˛ude
("INCL_SYS_SYSMACROS_H", "sys/sysmacros.h");

1477 
	`check_ö˛ude
("INCL_STDARG_H", "stdarg.h");

1479 #ifde‡
DEBUG


1481 
	`check_ö˛ude
("INCL_BSTRING_H", "bstring.h");

1485 i‡(
	`check_ö˛ude
("INCL_DLFCN_H", "dlfcn.h")) {

1486 i‡(!
	`check_¥og
(0, "#include <dlfcn.h>", "int x = RTLD_LAZY;", 0))

1487 
	`Ârötf
(
yyout
, "#define RTLD_LAZY 1\n");

1489 i‡(!
	`check_¥og
(0, 0, "int x = RTLD_LAZY;", 0))

1490 
	`Ârötf
(
yyout
, "#define RTLD_LAZY 1\n");

1494 
	`¥ötf
("Checking for missing INADDR_NONE ... ");

1495 i‡(!
	`check_¥og
(0, "#include <netinet/in.h>", "int x = INADDR_NONE;", 0)) {

1496 
	`¥ötf
("missing\n");

1497 
	`Ârötf
(
yyout
, "#define INADDR_NONE (unsigned int)0xffffffff\n");

1498 } 
	`¥ötf
("ok\n");

1500 
	`¥ötf
("Checking forÑandomÇumber generator ...");

1501 i‡(
	`check_¥og
("DRAND48", 0, "srand48(0);", 0)) {

1502 
	`¥ötf
(" using drand48()\n");

1504 i‡(
	`check_¥og
("RAND", 0, "srand(0);", 0)) {

1505 
	`¥ötf
(" usingÑand()\n");

1507 i‡(
	`check_¥og
("RANDOM", 0, "srandom(0);", 0)) {

1508 
	`¥ötf
("usingÑandom()\n");

1510 
	`¥ötf
("WARNING: didÇot findáÑandomÇumber generator\n");

1511 
	`exô
(-1);

1514 i‡(
	`check_¥og
("USE_BSD_SIGNALS", 0, "SIGCHLD; wait3(0, 0, 0);", 0)) {

1515 
	`¥ötf
("Using BSD signals.\n");

1517 
	`¥ötf
("Using System V signals.\n");

1520 
	`¥ötf
("Checking if signal()Ñeturns SIG_ERR onÉrror ...");

1521 i‡(
	`check_¥og
("SIGNAL_ERROR SIG_ERR", 0, "if (signal(0, 0) == SIG_ERR) ;", 0)) {

1522 
	`¥ötf
(" yes\n");

1524 
	`Ârötf
(
yyout
, "#define SIGNAL_ERROR BADSIG\n");

1525 
	`¥ötf
("Ço\n");

1528 
	`¥ötf
("Checking for inline ...");

1529 i‡(!
	`check_¥og
("INLINE inline", "inline void foo() { }", "foo();", 0)) {

1530 
	`¥ötf
(" __inline ...");

1531 i‡(!
	`check_¥og
("INLINE __inline", "__inline void foo() {}", "foo();", 0)) {

1532 
	`Ârötf
(
yyout
, "#define INLINE\n");

1535 
	`¥ötf
(" const ...\n");

1536 i‡(!
	`check_¥og
("CONST const", "int foo(const int *, const int *);", "", 0))

1537 
	`Ârötf
(
yyout
, "#define CONST\n");

1539 
	`vîbo£_check_¥og
("Checking for ualarm()", "HAS_UALARM",

1541 
	`vîbo£_check_¥og
("Checking for strerror()", "HAS_STRERROR",

1543 
	`vîbo£_check_¥og
("Checking for POSIX getcwd()", "HAS_GETCWD",

1545 
	`vîbo£_check_¥og
("Checking for getrusage()", "RUSAGE",

1547 
	`vîbo£_check_¥og
("Checking forÅimes()", "TIMES",

1549 
	`vîbo£_check_¥og
("Checking for gettimeofday()", "HAS_GETTIMEOFDAY",

1551 
	`vîbo£_check_¥og
("Checking for fchmod()", "HAS_FCHMOD",

1554 
	`¥ötf
("Checking for big orÜittleÉndian ... ");

1555 i‡(!
	`check_code
("charÇum[] = { 0x11, 0x22, 0x33, 0x44 }; int *foo = (int *)num;",

1557 
	`¥ötf
("big\n");

1558 
	`Ârötf
(
yyout
, "#define BIGENDIAN 1\n");

1559 
	`fÊush
(
yyout
);

1560 } 
	`¥ötf
("little\n");

1562 
	`föd_memmove
();

1565 
	`Ârötf
(
yyout
, "#define SIZEOF_INT %i\n", ());

1566 
	`Ârötf
(
yyout
, "#define SIZEOF_PTR %i\n", (*));

1567 
	`Ârötf
(
yyout
, "#define SIZEOF_SHORT %i\n", ());

1568 
	`Ârötf
(
yyout
, "#define SIZEOF_FLOAT %i\n", ());

1571 
	`Ârötf
(
yyout
, "#define UINT32 unsignedÜong\n");

1573 
	`Ârötf
(
yyout
, "#define UINT32 unsigned int\n");

1575 
	`¥ötf
("WARNING: couldÇot findá 32 bit integralÅype.\n");

1576 
	`exô
(-1);

1580 i‡(
	`lookup_deföe
("PACKAGE_DB")) {

1584 i‡(
	`lookup_deföe
("USE_MSQL")) {

1585 i‡(!(
	`check_ö˛ude
("INCL_LOCAL_MSQL_H", "/usr/local/include/msql.h")

1586 || 
	`check_ö˛ude
("INCL_LOCAL_MSQL_MSQL_H", "/usr/local/msql/include/msql.h")

1587 || 
	`check_ö˛ude
("INCL_LOCAL_MINERVA_MSQL_H", "/usr/local/Minerva/include/msql.h")

1588 || 
	`check_ö˛ude
("INCL_LIB_HUGHES_MSQL_H", "/usr/lib/Hughes/include/msql.h"))) {

1589 
	`Ârötf
(
°dîr
, "Cannot find msql.h, compilation is goingÅo fail miserably.\n");

1592 i‡(
	`lookup_deföe
("USE_MYSQL")) {

1593 i‡(!(
	`check_ö˛ude
("INCL_LOCAL_MYSQL_H", "/usr/local/include/mysql.h")

1594 || 
	`check_ö˛ude
("INCL_LOCAL_INCLUDE_MYSQL_MYSQL_H", "/usr/local/include/mysql/mysql.h")

1595 || 
	`check_ö˛ude
("INCL_LOCAL_MYSQL_MYSQL_H", "/usr/local/mysql/include/mysql.h")

1596 || 
	`check_ö˛ude
("INCL_MYSQL_MYSQL_H", "/usr/include/mysql/mysql.h"))) {

1597 
	`Ârötf
(
°dîr
, "Cannot find mysql.h, compilation is goingÅo fail miserably.\n");

1602 
	`Ârötf
(
yyout
, "#deföêCONFIGURE_VERSION %i\n\n", 
CONFIGURE_VERSION
);

1604 
	`˛o£_ouçut_fûe
();

1606 #ifde‡
WIN32


1607 
	`sy°em
("copy windows\\configure.hÅmp.config.h");

1608 
	`sy°em
("type configure.h >>Åmp.config.h");

1609 
	`sy°em
("del configure.h");

1610 
	`sy°em
("renameÅmp.config.h configure.h");

1613 
	`›í_ouçut_fûe
("system_libs");

1614 
	`check_libøry
("-lresolv");

1615 
	`check_libøry
("-lbsd");

1616 
	`check_libøry
("-lBSD");

1617 
	`check_libøry
("-ly");

1620 i‡(!
	`check_¥og
(0, "#include \"lint.h\"",

1622 
	`check_libøry
("-lcrypt");

1624 i‡(!
	`check_¥og
(0, "", "char *x = malloc(100);", 0))

1625 
	`check_libøry
("-lmalloc");

1627 i‡(!
	`check_¥og
(0, "", "void *x = dlopen(0, 0);", 0))

1628 
	`check_libøry
("-ldl");

1630 
	`check_libøry
("-lsocket");

1631 
	`check_libøry
("-linet");

1632 
	`check_libøry
("-lnsl");

1633 
	`check_libøry
("-lnsl_s");

1634 
	`check_libøry
("-lseq");

1635 
	`check_libøry
("-lm");

1637 
	`Ârötf
(
°dîr
, "Checking for flaky Linux systems ...\n");

1638 
	`check_löux_libc
();

1641 i‡(
	`lookup_deföe
("PACKAGE_DB") &&Üookup_define("USE_MSQL")) {

1642 i‡(!(
	`check_libøry
("-lmsql") ||

1643 
	`check_libøry
("-L/usr/local/lib -lmsql") ||

1644 
	`check_libøry
("-L/usr/local/msql/lib -lmsql") ||

1645 
	`check_libøry
("-L/usr/local/Minerva/lib -lmsql") ||

1646 
	`check_libøry
("-L/usr/lib/Hughes/lib -lmsql"))) {

1647 
	`Ârötf
(
°dîr
, "Cannot findÜibmsql.a, compilation is goingÅo fail miserably\n");

1650 i‡(
	`lookup_deföe
("PACKAGE_DB") &&Üookup_define("USE_MYSQL")) {

1651 i‡(!(
	`check_libøry
("-lmysqlclient") ||

1652 
	`check_libøry
("-L/usr/local/lib -lmysqlclient") ||

1653 
	`check_libøry
("-L/usr/local/lib/mysql -lmysqlclient") ||

1654 
	`check_libøry
("-L/usr/local/mysql/lib -lmysqlclient"))) {

1655 
	`Ârötf
(
°dîr
, "Cannot findÜibmysqlclient.a, compilation is goingÅo fail miserably\n");

1659 
	`Ârötf
(
yyout
, "\n\n");

1660 
	`˛o£_ouçut_fûe
();

1662 
	}
}

1664 
maö
 
	$P2
(, 
¨gc
, **, 
¨gv
) {

1665 
idx
 = 1;

1667 
idx
 < 
¨gc
) {

1668 i‡(
¨gv
[
idx
][0] != '-') {

1669 
	`Ârötf
(
°dîr
, 
SYNTAX
);

1670 
	`exô
(-1);

1672 i‡(
	`°rcmp
(
¨gv
[
idx
], "-configure")==0) {

1673 
	`h™dÀ_›ti⁄s
(0);

1674 
	`h™dÀ_c⁄figuª
();

1676 i‡(
	`°rcmp
(
¨gv
[
idx
], "-process")==0) {

1677 
	`h™dÀ_¥o˚ss
(
¨gv
[++
idx
]);

1679 i‡(
	`°rcmp
(
¨gv
[
idx
], "-options")==0) {

1680 
	`h™dÀ_›ti⁄s
(1);

1682 i‡(
	`°rcmp
(
¨gv
[
idx
], "-malloc")==0) {

1683 
	`h™dÀ_mÆloc
();

1685 i‡(
	`°rcmp
(
¨gv
[
idx
], "-build_applies")==0) {

1686 
	`h™dÀ_≠∂õs
();

1688 i‡(
	`°rcmp
(
¨gv
[
idx
], "-build_func_spec")==0) {

1689 
	`h™dÀ_buûd_func_•ec
(
¨gv
[++
idx
]);

1691 i‡(
	`°rcmp
(
¨gv
[
idx
], "-build_efuns")==0) {

1692 
	`h™dÀ_buûd_efuns
();

1694 
	`Ârötf
(
°dîr
, "Uƒecognized fœg %s\n", 
¨gv
[
idx
]);

1695 
	`exô
(-1);

1697 
idx
++;

1699 
	`¥ötf
("\n");

1701 
	}
}

	@edit_source.h

1 #i‚de‡
EDIT_SOURCE_H


2 
	#EDIT_SOURCE_H


	)

4 
FILE
 *
yyö
;

	@efun_defs.c

7 {"_ˇŒ_Ÿhî",
	gF__CALL_OTHER
,0,0,2,-1,
	gTYPE_UNKNOWN
,
	gT_OBJECT
|
	gT_STRING
|
	gT_ARRAY
,T_STRING|T_ARRAY,
	gT_ANY
,T_ANY,0,
	gDEFAULT_NONE
},

8 {"_evÆu©e",
	gF__EVALUATE
,0,0,1,-1,
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

9 {"_√w",
	gF__NEW
,0,0,1,-1,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

10 {"_this_obje˘",
	gF__THIS_OBJECT
,0,0,0,0,
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

11 {"_to_Êﬂt",
	gF__TO_FLOAT
,0,0,1,1,
	gTYPE_REAL
,
	gT_STRING
|
	gT_REAL
|
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,16,
	gDEFAULT_NONE
},

12 {"_to_öt",
	gF__TO_INT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_REAL
|
	gT_NUMBER
|
	gT_BUFFER
,
	gT_ANY
,T_ANY,T_ANY,11,
	gDEFAULT_NONE
},

13 {"acos",
	gF_ACOS
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

14 {"add_a˘i⁄",
	gF_ADD_ACTION
,0,0,2,3,
	gTYPE_NOVALUE
,
	gT_STRING
|
	gT_FUNCTION
,T_STRING|
	gT_ARRAY
,
	gT_NUMBER
,
	gT_ANY
,79,
	gDEFAULT_NONE
},

15 {"Æl_övít‹y",
	gF_ALL_INVENTORY
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

16 {"Æl_¥evious_obje˘s",
	gF_PREVIOUS_OBJECT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,-1},

17 {"Æloˇã",
	gF_ALLOCATE
,0,0,1,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,153,
	gDEFAULT_NONE
},

18 {"Æloˇã_buf„r",
	gF_ALLOCATE_BUFFER
,0,0,1,1,
	gTYPE_BUFFER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

19 {"Æloˇã_m≠pög",
	gF_ALLOCATE_MAPPING
,0,0,1,2,
	gTYPE_MAPPING
,
	gT_NUMBER
|
	gT_ARRAY
,
	gT_ANY
,T_ANY,T_ANY,123,
	gDEFAULT_NONE
},

20 {"¨øyp",
	gF_POINTERP
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

21 {"asö",
	gF_ASIN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

22 {"©™",
	gF_ATAN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

23 {"böd",
	gF_BIND
,0,0,2,2,
	gTYPE_FUNCTION
,
	gT_FUNCTION
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,23,
	gDEFAULT_NONE
},

24 {"buf„Ω",
	gF_BUFFERP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

25 {"ˇche_°©s",
	gF_CACHE_STATS
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

26 {"ˇŒ_Ÿhî",
	gF__CALL_OTHER
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_ANY
,
	gT_OBJECT
|
	gT_STRING
|
	gT_ARRAY
,T_STRING|T_ARRAY,
	gT_ANY
,T_ANY,0,
	gDEFAULT_NONE
},

27 {"ˇŒ_out",
	gF_CALL_OUT
,0,0,2,-1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,38,
	gDEFAULT_NONE
},

28 {"ˇŒ_out_öfo",
	gF_CALL_OUT_INFO
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

29 {"ˇŒ_°ack",
	gF_CALL_STACK
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

30 {"ˇpôÆize",
	gF_CAPITALIZE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

31 {"˚û",
	gF_CEIL
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

32 {"chûdªn",
	gF_CHILDREN
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

33 {"˛as•",
	gF_CLASSP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

34 {"˛ór_bô",
	gF_CLEAR_BIT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

35 {"˛⁄e_obje˘",
	gF__NEW
 | 
	gF_ALIAS_FLAG
,0,0,1,-1,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

36 {"˛⁄ï",
	gF_CLONEP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_THIS_OBJECT
},

37 {"comm™d",
	gF_COMMAND
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

38 {"comm™ds",
	gF_COMMANDS
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

39 {"c›y",
	gF_COPY
,0,0,1,1,
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

40 {"cos",
	gF_COS
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

41 {"˝",
	gF_CP
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,27,
	gDEFAULT_NONE
},

42 {"¸c32",
	gF_CRC32
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_BUFFER
,
	gT_ANY
,T_ANY,T_ANY,105,
	gDEFAULT_NONE
},

43 {"¸y±",
	gF_CRYPT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,T_STRING|
	gT_NUMBER
,
	gT_ANY
,T_ANY,98,
	gDEFAULT_NONE
},

44 {"˘ime",
	gF_CTIME
,0,0,1,1,
	gTYPE_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

45 {"debug_öfo",
	gF_DEBUG_INFO
,0,0,2,2,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,183,
	gDEFAULT_NONE
},

46 {"debug_mesßge",
	gF_DEBUG_MESSAGE
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

47 {"dìp_öhîô_li°",
	gF_DEEP_INHERIT_LIST
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

48 {"dìp_övít‹y",
	gF_DEEP_INVENTORY
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

49 {"de°ru˘",
	gF_DESTRUCT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

50 {"dißbÀ_comm™ds",
	gF_DISABLE_COMMANDS
,0,0,0,0,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

51 {"dump_fûe_des¸ùt‹s",
	gF_DUMP_FILE_DESCRIPTORS
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

52 {"dump_¥og",
	gF_DUMP_PROG
,0,0,1,-1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,307,
	gDEFAULT_NONE
},

53 {"dum∑Œobj",
	gF_DUMPALLOBJ
,0,0,0,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

54 {"ed",
	gF_ED
,0,0,0,4,
	gTYPE_NOVALUE
,
	gT_STRING
,T_STRING,T_STRING|
	gT_NUMBER
,T_NUMBER,208,
	gDEFAULT_NONE
},

55 {"íabÀ_comm™ds",
	gF_ENABLE_COMMANDS
,0,0,0,0,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

56 {"ívú⁄mít",
	gF_ENVIRONMENT
,0,0,0,1,
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

57 {"îr‹",
	gF_ERROR
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

58 {"evÆ_co°",
	gF_SET_EVAL_LIMIT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,-1},

59 {"evÆu©e",
	gF__EVALUATE
 | 
	gF_ALIAS_FLAG
,0,0,1,-1,
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

60 {"exec",
	gF_EXEC
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_OBJECT
,T_OBJECT,
	gT_ANY
,T_ANY,185,
	gDEFAULT_NONE
},

61 {"exp",
	gF_EXP
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

62 {"ex∂ode",
	gF_EXPLODE
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,27,
	gDEFAULT_NONE
},

63 {"„tch_v¨übÀ",
	gF_FETCH_VARIABLE
,0,0,1,1,
	gTYPE_ANY
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

64 {"fûe_Àngth",
	gF_FILE_LENGTH
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

65 {"fûe_«me",
	gF_FILE_NAME
,0,0,1,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

66 {"fûe_size",
	gF_FILE_SIZE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

67 {"fûãr",
	gF_FILTER
,0,0,2,-1,
	gTYPE_ANY
,
	gT_STRING
|
	gT_ARRAY
|
	gT_MAPPING
,T_STRING|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,217,
	gDEFAULT_NONE
},

68 {"fûãr_¨øy",
	gF_FILTER
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,202,
	gDEFAULT_NONE
},

69 {"fûãr_m≠pög",
	gF_FILTER
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_MAPPING
,
	gT_MAPPING
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,219,
	gDEFAULT_NONE
},

70 {"föd_ˇŒ_out",
	gF_FIND_CALL_OUT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,120,
	gDEFAULT_NONE
},

71 {"föd_livög",
	gF_FIND_LIVING
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

72 {"föd_obje˘",
	gF_FIND_OBJECT
,0,0,2,2,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,0},

73 {"föd_∂ayî",
	gF_FIND_PLAYER
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

74 {"fú°_övít‹y",
	gF_FIRST_INVENTORY
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_OBJECT
|
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,55,
	gDEFAULT_THIS_OBJECT
},

75 {"Êﬂç",
	gF_FLOATP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

76 {"Êo‹",
	gF_FLOOR
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

77 {"Êush_mesßges",
	gF_FLUSH_MESSAGES
,0,0,0,1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

78 {"fun˘i⁄_exi°s",
	gF_FUNCTION_EXISTS
,0,0,1,3,
	gTYPE_STRING
,
	gT_STRING
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,189,
	gDEFAULT_NONE
},

79 {"fun˘i⁄_ow√r",
	gF_FUNCTION_OWNER
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,23,
	gDEFAULT_NONE
},

80 {"fun˘i⁄p",
	gF_FUNCTIONP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

81 {"fun˘i⁄s",
	gF_FUNCTIONS
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,191,0},

82 {"gíî©e_sour˚",
	gF_GENERATE_SOURCE
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_ARRAY
,T_STRING,
	gT_ANY
,T_ANY,138,
	gDEFAULT_NONE
},

83 {"gë_ch¨",
	gF_GET_CHAR
,0,0,1,-1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,51,
	gDEFAULT_NONE
},

84 {"gë_c⁄fig",
	gF_GET_CONFIG
,0,0,1,1,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

85 {"gë_dú",
	gF_GET_DIR
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,0},

86 {"hóπ_bóts",
	gF_HEART_BEATS
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

87 {"im∂ode",
	gF_IMPLODE
,0,0,2,3,
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,31,
	gDEFAULT_NONE
},

88 {"ö_edô",
	gF_IN_EDIT
,0,0,1,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

89 {"ö_öput",
	gF_IN_INPUT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

90 {"öhîô_li°",
	gF_SHALLOW_INHERIT_LIST
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

91 {"öhîôs",
	gF_INHERITS
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,75,
	gDEFAULT_NONE
},

92 {"öput_to",
	gF_INPUT_TO
,0,0,1,-1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,51,
	gDEFAULT_NONE
},

93 {"öãø˘ive",
	gF_INTERACTIVE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

94 {"öç",
	gF_INTP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

95 {"keys",
	gF_KEYS
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,128,
	gDEFAULT_NONE
},

96 {"lök",
	gF_LINK
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,27,
	gDEFAULT_NONE
},

97 {"livög",
	gF_LIVING
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

98 {"livögs",
	gF_LIVINGS
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

99 {"lﬂd_obje˘",
	gF_FIND_OBJECT
 | 
	gF_ALIAS_FLAG
,0,0,2,2,
	gTYPE_OBJECT
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,1},

100 {"loˇ…ime",
	gF_LOCALTIME
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

101 {"log",
	gF_LOG
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

102 {"log10",
	gF_LOG10
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

103 {"lowî_ˇ£",
	gF_LOWER_CASE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

104 {"Õc_öfo",
	gF_LPC_INFO
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

105 {"mÆloc_°©us",
	gF_MALLOC_STATUS
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

106 {"m≠",
	gF_MAP
,0,0,2,-1,
	gTYPE_ANY
,
	gT_STRING
|
	gT_MAPPING
|
	gT_ARRAY
,T_STRING|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,225,
	gDEFAULT_NONE
},

107 {"m≠_¨øy",
	gF_MAP
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,202,
	gDEFAULT_NONE
},

108 {"m≠_dñëe",
	gF_MAP_DELETE
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,130,
	gDEFAULT_NONE
},

109 {"m≠_m≠pög",
	gF_MAP
 | 
	gF_ALIAS_FLAG
,0,0,2,-1,
	gTYPE_MAPPING
,
	gT_MAPPING
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,219,
	gDEFAULT_NONE
},

110 {"m≠p",
	gF_MAPP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

111 {"ma°î",
	gF_MASTER
,0,0,0,0,
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

112 {"m©ch_∑th",
	gF_MATCH_PATH
,0,0,2,2,
	gTYPE_ANY
,
	gT_MAPPING
,
	gT_STRING
,
	gT_ANY
,T_ANY,134,
	gDEFAULT_NONE
},

113 {"max_evÆ_co°",
	gF_SET_EVAL_LIMIT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,1},

114 {"membî_¨øy",
	gF_MEMBER_ARRAY
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_ANY
,
	gT_STRING
|
	gT_ARRAY
,
	gT_NUMBER
,T_ANY,44,
	gDEFAULT_NONE
},

115 {"mem‹y_öfo",
	gF_MEMORY_INFO
,0,0,0,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

116 {"mem‹y_summ¨y",
	gF_MEMORY_SUMMARY
,0,0,0,0,
	gTYPE_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

117 {"mesßge",
	gF_MESSAGE
,0,0,3,4,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,
	gT_STRING
|
	gT_ARRAY
|
	gT_OBJECT
|T_ARRAY,T_OBJECT|T_ARRAY,108,
	gDEFAULT_NONE
},

118 {"mkdú",
	gF_MKDIR
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

119 {"move_obje˘",
	gF_MOVE_OBJECT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_OBJECT
|
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,55,
	gDEFAULT_NONE
},

120 {"mud_°©us",
	gF_MUD_STATUS
,0,0,1,1,
	gTYPE_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

121 {"«med_livögs",
	gF_NAMED_LIVINGS
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

122 {"√tw‹k_°©s",
	gF_NETWORK_STATS
,0,0,0,0,
	gTYPE_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

123 {"√xt_bô",
	gF_NEXT_BIT
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

124 {"√xt_övít‹y",
	gF_NEXT_INVENTORY
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

125 {"nŸify_Áû",
	gF_NOTIFY_FAIL
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,33,
	gDEFAULT_NONE
},

126 {"nuŒp",
	gF_UNDEFINEDP
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

127 {"obje˘p",
	gF_OBJECTP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

128 {"obje˘s",
	gF_OBJECTS
,0,0,0,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,T_ANY,33,
	gDEFAULT_NONE
},

129 {"ﬁd¸y±",
	gF_OLDCRYPT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,T_STRING|
	gT_NUMBER
,
	gT_ANY
,T_ANY,98,
	gDEFAULT_NONE
},

130 {"‹igö",
	gF_ORIGIN
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

131 {"∂uølize",
	gF_PLURALIZE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

132 {"poöãΩ",
	gF_POINTERP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

133 {"pow",
	gF_POW
,0,0,2,2,
	gTYPE_REAL
,
	gT_REAL
,T_REAL,
	gT_ANY
,T_ANY,310,
	gDEFAULT_NONE
},

134 {"¥e£¡",
	gF_PRESENT
,0,0,1,2,
	gTYPE_OBJECT
,
	gT_OBJECT
|
	gT_STRING
,T_OBJECT,
	gT_ANY
,T_ANY,74,
	gDEFAULT_NONE
},

135 {"¥evious_obje˘",
	gF_PREVIOUS_OBJECT
,0,0,1,1,
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

136 {"¥ötf",
	gF_PRINTF
,0,0,1,-1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

137 {"¥ogøm_öfo",
	gF_PROGRAM_INFO
,0,0,0,1,
	gTYPE_MAPPING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

138 {"quîy_hóπ_bót",
	gF_QUERY_HEART_BEAT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

139 {"quîy_ho°_«me",
	gF_QUERY_HOST_NAME
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

140 {"quîy_idÀ",
	gF_QUERY_IDLE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

141 {"quîy_ù_«me",
	gF_QUERY_IP_NAME
,0,0,0,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

142 {"quîy_ù_numbî",
	gF_QUERY_IP_NUMBER
,0,0,0,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

143 {"quîy_ù_p‹t",
	gF_QUERY_IP_PORT
,0,0,0,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

144 {"quîy_lﬂd_avîage",
	gF_QUERY_LOAD_AVERAGE
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

145 {"quîy_nŸify_Áû",
	gF_QUERY_NOTIFY_FAIL
,0,0,0,0,
	gTYPE_ANY
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

146 {"quîy_ª∂a˚d_¥ogøm",
	gF_QUERY_REPLACED_PROGRAM
,0,0,0,1,
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

147 {"quîy_shadowög",
	gF_QUERY_SHADOWING
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

148 {"quîy_¢o›",
	gF_QUERY_SNOOP
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

149 {"quîy_¢o›ög",
	gF_QUERY_SNOOPING
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

150 {"quîy_vîb",
	gF_QUERY_VERB
,0,0,0,0,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

151 {"øndom",
	gF_RANDOM
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

152 {"ªad_buf„r",
	gF_READ_BUFFER
,0,0,1,3,
	gTYPE_ANY
,
	gT_STRING
|
	gT_BUFFER
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,157,
	gDEFAULT_NONE
},

153 {"ªad_byãs",
	gF_READ_BYTES
,0,0,1,3,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,179,
	gDEFAULT_NONE
},

154 {"ªad_fûe",
	gF_READ_FILE
,0,0,1,3,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,179,
	gDEFAULT_NONE
},

155 {"ª˚ive",
	gF_RECEIVE
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
|
	gT_BUFFER
,
	gT_ANY
,T_ANY,T_ANY,105,
	gDEFAULT_NONE
},

156 {"ª˛aim_obje˘s",
	gF_RECLAIM_OBJECTS
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

157 {"ªfs",
	gF_REFS
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

158 {"ªg_assoc",
	gF_REG_ASSOC
,0,0,3,4,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_STRING
,
	gT_ARRAY
,T_ARRAY,
	gT_ANY
,145,
	gDEFAULT_NONE
},

159 {"ªgexp",
	gF_REGEXP
,0,0,2,3,
	gTYPE_ANY
,
	gT_STRING
|
	gT_ARRAY
,T_STRING,
	gT_NUMBER
,
	gT_ANY
,138,
	gDEFAULT_NONE
},

160 {"ªlﬂd_obje˘",
	gF_RELOAD_OBJECT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

161 {"ªmove_a˘i⁄",
	gF_REMOVE_ACTION
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,27,
	gDEFAULT_NONE
},

162 {"ªmove_ˇŒ_out",
	gF_REMOVE_CALL_OUT
,0,0,0,1,
	gTYPE_NUMBER
,
	gT_NUMBER
|
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,120,
	gDEFAULT_NONE
},

163 {"ªmove_öãø˘ive",
	gF_REMOVE_INTERACTIVE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

164 {"ªmove_shadow",
	gF_REMOVE_SHADOW
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

165 {"ª«me",
	gF_RENAME
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,27,
	gDEFAULT_NONE
},

166 {"ª≥©_°rög",
	gF_REPEAT_STRING
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

167 {"ª∂a˚_¥ogøm",
	gF_REPLACE_PROGRAM
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

168 {"ª∂a˚_°rög",
	gF_REPLACE_STRING
,0,0,3,-1,
	gTYPE_STRING
,
	gT_STRING
,T_STRING,T_STRING,
	gT_ANY
,87,
	gDEFAULT_NONE
},

169 {"ª∂a˚abÀ",
	gF_REPLACEABLE
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ARRAY
,
	gT_ANY
,T_ANY,246,
	gDEFAULT_NONE
},

170 {"ª£t_evÆ_co°",
	gF_SET_EVAL_LIMIT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

171 {"ªsﬁve",
	gF_RESOLVE
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,233,
	gDEFAULT_NONE
},

172 {"ª°‹e_obje˘",
	gF_RESTORE_OBJECT
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

173 {"ª°‹e_v¨übÀ",
	gF_RESTORE_VARIABLE
,0,0,1,1,
	gTYPE_ANY
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

174 {"rm",
	gF_RM
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

175 {"rmdú",
	gF_RMDIR
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

176 {"rußge",
	gF_RUSAGE
,0,0,0,0,
	gTYPE_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

177 {"ßve_obje˘",
	gF_SAVE_OBJECT
,0,0,1,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

178 {"ßve_v¨übÀ",
	gF_SAVE_VARIABLE
,0,0,1,1,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

179 {"ßy",
	gF_SAY
,0,0,1,2,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_OBJECT
|
	gT_ARRAY
,
	gT_ANY
,T_ANY,58,
	gDEFAULT_NONE
},

180 {"£t_bô",
	gF_SET_BIT
,0,0,2,2,
	gTYPE_STRING
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

181 {"£t_evÆ_limô",
	gF_SET_EVAL_LIMIT
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

182 {"£t_hóπ_bót",
	gF_SET_HEART_BEAT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

183 {"£t_hide",
	gF_SET_HIDE
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

184 {"£t_livög_«me",
	gF_SET_LIVING_NAME
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

185 {"£t_ª£t",
	gF_SET_RESET
,0,0,1,2,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,191,
	gDEFAULT_NONE
},

186 {"shadow",
	gF_SHADOW
,0,0,2,2,
	gTYPE_OBJECT
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,191,1},

187 {"shÆlow_öhîô_li°",
	gF_SHALLOW_INHERIT_LIST
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_THIS_OBJECT
},

188 {"shout",
	gF_SHOUT
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

189 {"shutdown",
	gF_SHUTDOWN
,0,0,0,1,
	gTYPE_NOVALUE
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

190 {"sö",
	gF_SIN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

191 {"sizeof",
	gF_SIZEOF
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

192 {"¢o›",
	gF_SNOOP
,0,0,1,2,
	gTYPE_OBJECT
,
	gT_OBJECT
,T_OBJECT,
	gT_ANY
,T_ANY,185,
	gDEFAULT_NONE
},

193 {"sockë_ac˚±",
	gF_SOCKET_ACCEPT
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,T_STRING|T_FUNCTION,
	gT_ANY
,254,
	gDEFAULT_NONE
},

194 {"sockë_acquúe",
	gF_SOCKET_ACQUIRE
,0,0,4,4,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,T_STRING|T_FUNCTION,T_STRING|T_FUNCTION,291,
	gDEFAULT_NONE
},

195 {"sockë_addªss",
	gF_SOCKET_ADDRESS
,0,0,2,2,
	gTYPE_STRING
,
	gT_NUMBER
|
	gT_OBJECT
,T_NUMBER,
	gT_ANY
,T_ANY,302,0},

196 {"sockë_böd",
	gF_SOCKET_BIND
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,T_NUMBER,
	gT_STRING
,
	gT_ANY
,262,
	gDEFAULT_NONE
},

197 {"sockë_˛o£",
	gF_SOCKET_CLOSE
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

198 {"sockë_c⁄√˘",
	gF_SOCKET_CONNECT
,0,0,4,4,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
,T_STRING|
	gT_FUNCTION
,T_STRING|T_FUNCTION,268,
	gDEFAULT_NONE
},

199 {"sockë_¸óã",
	gF_SOCKET_CREATE
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,T_STRING|T_FUNCTION,
	gT_ANY
,254,
	gDEFAULT_NONE
},

200 {"sockë_îr‹",
	gF_SOCKET_ERROR
,0,0,1,1,
	gTYPE_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

201 {"sockë_li°í",
	gF_SOCKET_LISTEN
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,49,
	gDEFAULT_NONE
},

202 {"sockë_ªÀa£",
	gF_SOCKET_RELEASE
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_OBJECT
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,284,
	gDEFAULT_NONE
},

203 {"sockë_°©us",
	gF_SOCKET_STATUS
,0,0,0,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,
	gDEFAULT_NONE
},

204 {"sockë_wrôe",
	gF_SOCKET_WRITE
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_NUMBER
,
	gT_ANY
,
	gT_STRING
,T_ANY,278,
	gDEFAULT_NONE
},

205 {"s‹t_¨øy",
	gF_SORT_ARRAY
,0,0,2,-1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_NUMBER
|
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,195,
	gDEFAULT_NONE
},

206 {"•rötf",
	gF_SPRINTF
,0,0,1,-1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

207 {"sqπ",
	gF_SQRT
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

208 {"°©",
	gF_STAT
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,0},

209 {"°‹e_v¨übÀ",
	gF_STORE_VARIABLE
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,250,
	gDEFAULT_NONE
},

210 {"°rcmp",
	gF_STRCMP
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_ANY
,T_ANY,27,
	gDEFAULT_NONE
},

211 {"°rögp",
	gF_STRINGP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

212 {"°æí",
	gF_SIZEOF
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

213 {"°r§ch",
	gF_STRSRCH
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING|
	gT_NUMBER
,T_NUMBER,
	gT_ANY
,98,0},

214 {"èn",
	gF_TAN
,0,0,1,1,
	gTYPE_REAL
,
	gT_REAL
,
	gT_ANY
,T_ANY,T_ANY,69,
	gDEFAULT_NONE
},

215 {"ãŒ_obje˘",
	gF_TELL_OBJECT
,0,0,2,2,
	gTYPE_NOVALUE
,
	gT_OBJECT
,
	gT_STRING
,
	gT_ANY
,T_ANY,25,
	gDEFAULT_NONE
},

216 {"ãŒ_room",
	gF_TELL_ROOM
,0,0,2,3,
	gTYPE_NOVALUE
,
	gT_OBJECT
|
	gT_STRING
,T_STRING|T_OBJECT|
	gT_NUMBER
|
	gT_REAL
,T_OBJECT|
	gT_ARRAY
,
	gT_ANY
,63,
	gDEFAULT_NONE
},

217 {"ãrmöÆ_cﬁour",
	gF_TERMINAL_COLOUR
,0,0,2,4,
	gTYPE_STRING
,
	gT_STRING
,
	gT_MAPPING
,
	gT_NUMBER
,T_NUMBER,238,
	gDEFAULT_NONE
},

218 {"ã°_bô",
	gF_TEST_BIT
,0,0,2,2,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,94,
	gDEFAULT_NONE
},

219 {"this_öãø˘ive",
	gF_THIS_PLAYER
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,1},

220 {"this_obje˘",
	gF__THIS_OBJECT
 | 
	gF_ALIAS_FLAG
,0,0,0,0,
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

221 {"this_∂ayî",
	gF_THIS_PLAYER
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

222 {"this_u£r",
	gF_THIS_PLAYER
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,18,0},

223 {"throw",
	gF_THROW
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

224 {"time",
	gF_TIME
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

225 {"to_Êﬂt",
	gF__TO_FLOAT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_REAL
,
	gT_STRING
|
	gT_REAL
|
	gT_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,16,
	gDEFAULT_NONE
},

226 {"to_öt",
	gF__TO_INT
 | 
	gF_ALIAS_FLAG
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_REAL
|
	gT_NUMBER
|
	gT_BUFFER
,
	gT_ANY
,T_ANY,T_ANY,11,
	gDEFAULT_NONE
},

227 {"ty≥of",
	gF_TYPEOF
,0,0,1,1,
	gTYPE_STRING
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

228 {"undeföedp",
	gF_UNDEFINEDP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

229 {"unique_¨øy",
	gF_UNIQUE_ARRAY
,0,0,2,3,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,31,
	gDEFAULT_NONE
},

230 {"unique_m≠pög",
	gF_UNIQUE_MAPPING
,0,0,2,-1,
	gTYPE_MAPPING
,
	gT_ARRAY
,
	gT_STRING
|
	gT_FUNCTION
,
	gT_ANY
,T_ANY,202,
	gDEFAULT_NONE
},

231 {"uµî_ˇ£",
	gF_UPPER_CASE
,0,0,1,1,
	gTYPE_STRING
,
	gT_STRING
,
	gT_ANY
,T_ANY,T_ANY,20,
	gDEFAULT_NONE
},

232 {"u±ime",
	gF_UPTIME
,0,0,0,0,
	gTYPE_NUMBER
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

233 {"u£Ω",
	gF_USERP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

234 {"u£rs",
	gF_USERS
,0,0,0,0,
	gTYPE_MOD_ARRAY
|
	gTYPE_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,0,
	gDEFAULT_NONE
},

235 {"vÆues",
	gF_VALUES
,0,0,1,1,
	gTYPE_MOD_ARRAY
|
	gTYPE_ANY
,
	gT_MAPPING
,
	gT_ANY
,T_ANY,T_ANY,128,
	gDEFAULT_NONE
},

236 {"v¨übÀs",
	gF_VARIABLES
,0,0,2,2,
	gTYPE_MOD_ARRAY
|
	gTYPE_STRING
,
	gT_OBJECT
,
	gT_NUMBER
,
	gT_ANY
,T_ANY,191,0},

237 {"vútuÆp",
	gF_VIRTUALP
,0,0,1,1,
	gTYPE_NUMBER
,
	gT_OBJECT
,
	gT_ANY
,T_ANY,T_ANY,25,
	gDEFAULT_NONE
},

238 {"wrôe",
	gF_WRITE
,0,0,1,1,
	gTYPE_NOVALUE
,
	gT_ANY
,T_ANY,T_ANY,T_ANY,8,
	gDEFAULT_NONE
},

239 {"wrôe_buf„r",
	gF_WRITE_BUFFER
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
|
	gT_BUFFER
,
	gT_NUMBER
,T_STRING|T_BUFFER|T_NUMBER,
	gT_ANY
,164,
	gDEFAULT_NONE
},

240 {"wrôe_byãs",
	gF_WRITE_BYTES
,0,0,3,3,
	gTYPE_NUMBER
,
	gT_STRING
,
	gT_NUMBER
,T_STRING,
	gT_ANY
,94,
	gDEFAULT_NONE
},

241 {"wrôe_fûe",
	gF_WRITE_FILE
,0,0,2,3,
	gTYPE_NUMBER
,
	gT_STRING
,T_STRING,
	gT_NUMBER
,
	gT_ANY
,173,
	gDEFAULT_NONE
},

244 
	gefun_¨g_ty≥s
[] = {

245 
TYPE_OBJECT
,
TYPE_STRING
,
TYPE_MOD_ARRAY
|TYPE_OBJECT,0,

246 
TYPE_STRING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

248 
TYPE_ANY
,0,

250 
TYPE_STRING
,
TYPE_REAL
,
TYPE_NUMBER
,
TYPE_BUFFER
,0,

251 
TYPE_STRING
,
TYPE_REAL
,
TYPE_NUMBER
,0,

252 
TYPE_STRING
,0,

254 
TYPE_FUNCTION
,0,

255 
TYPE_OBJECT
,0,

256 
TYPE_STRING
,0,

257 
TYPE_STRING
,0,

258 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

259 
TYPE_STRING
,
TYPE_FUNCTION
,0,

260 
TYPE_ANY
,0,

261 
TYPE_STRING
,
TYPE_FUNCTION
,0,

262 
TYPE_NUMBER
,0,

264 
TYPE_ANY
,0,

265 
TYPE_STRING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

266 
TYPE_NUMBER
,0,

267 
TYPE_STRING
,
TYPE_FUNCTION
,0,

269 
TYPE_OBJECT
,
TYPE_STRING
,0,

270 
TYPE_STRING
,0,

271 
TYPE_OBJECT
,
TYPE_MOD_ARRAY
|TYPE_OBJECT,0,

272 
TYPE_OBJECT
,
TYPE_STRING
,0,

273 
TYPE_STRING
,
TYPE_OBJECT
,
TYPE_NUMBER
,
TYPE_REAL
,0,

274 
TYPE_OBJECT
,
TYPE_MOD_ARRAY
|TYPE_OBJECT,0,

275 
TYPE_OBJECT
,
TYPE_STRING
,0,

276 
TYPE_OBJECT
,0,

277 
TYPE_STRING
,
TYPE_FUNCTION
,0,

278 
TYPE_STRING
,
TYPE_MOD_ARRAY
|TYPE_STRING,0,

279 
TYPE_NUMBER
,0,

280 
TYPE_STRING
,0,

281 
TYPE_STRING
,0,

282 
TYPE_STRING
,0,

284 
TYPE_STRING
,0,

285 
TYPE_NUMBER
,0,

286 
TYPE_STRING
,0,

287 
TYPE_STRING
,
TYPE_NUMBER
,0,

288 
TYPE_NUMBER
,0,

289 
TYPE_STRING
,
TYPE_BUFFER
,0,

290 
TYPE_ANY
,0,

291 
TYPE_ANY
,0,

292 
TYPE_STRING
,
TYPE_MOD_ARRAY
|TYPE_STRING,
TYPE_OBJECT
,TYPE_MOD_ARRAY|TYPE_OBJECT,0,

293 
TYPE_OBJECT
,
TYPE_MOD_ARRAY
|TYPE_OBJECT,0,

294 
TYPE_NUMBER
,
TYPE_STRING
,0,

295 
TYPE_NUMBER
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

296 
TYPE_ANY
,0,

297 
TYPE_MAPPING
,0,

298 
TYPE_MAPPING
,0,

299 
TYPE_ANY
,0,

300 
TYPE_MAPPING
,0,

301 
TYPE_STRING
,0,

302 
TYPE_STRING
,
TYPE_MOD_ARRAY
|TYPE_STRING,0,

303 
TYPE_STRING
,0,

304 
TYPE_NUMBER
,0,

305 
TYPE_STRING
,0,

306 
TYPE_MOD_ARRAY
|
TYPE_STRING
,0,

307 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

308 
TYPE_ANY
,0,

309 
TYPE_NUMBER
,0,

310 
TYPE_ANY
,0,

311 
TYPE_STRING
,
TYPE_BUFFER
,0,

312 
TYPE_NUMBER
,0,

313 
TYPE_NUMBER
,0,

314 
TYPE_STRING
,
TYPE_BUFFER
,0,

315 
TYPE_NUMBER
,0,

316 
TYPE_STRING
,
TYPE_BUFFER
,
TYPE_NUMBER
,0,

317 
TYPE_STRING
,0,

318 
TYPE_STRING
,0,

319 
TYPE_NUMBER
,0,

320 
TYPE_STRING
,0,

321 
TYPE_NUMBER
,0,

322 
TYPE_NUMBER
,0,

323 
TYPE_OBJECT
,0,

324 
TYPE_OBJECT
,0,

325 
TYPE_STRING
,0,

326 
TYPE_OBJECT
,0,

327 
TYPE_NUMBER
,0,

328 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

329 
TYPE_NUMBER
,
TYPE_STRING
,
TYPE_FUNCTION
,0,

331 
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

332 
TYPE_STRING
,
TYPE_FUNCTION
,0,

334 
TYPE_STRING
,0,

335 
TYPE_STRING
,0,

336 
TYPE_STRING
,
TYPE_NUMBER
,0,

337 
TYPE_NUMBER
,0,

338 
TYPE_STRING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,
TYPE_MAPPING
,0,

339 
TYPE_STRING
,
TYPE_FUNCTION
,0,

341 
TYPE_STRING
,
TYPE_MAPPING
,
TYPE_MOD_ARRAY
|
TYPE_ANY
,0,

342 
TYPE_STRING
,
TYPE_FUNCTION
,0,

344 
TYPE_STRING
,0,

345 
TYPE_STRING
,
TYPE_FUNCTION
,0,

346 
TYPE_STRING
,0,

347 
TYPE_MAPPING
,0,

348 
TYPE_NUMBER
,0,

349 
TYPE_NUMBER
,0,

350 
TYPE_OBJECT
,0,

351 
TYPE_MOD_ARRAY
|
TYPE_STRING
,0,

352 
TYPE_STRING
,0,

353 
TYPE_ANY
,0,

354 
TYPE_NUMBER
,0,

355 
TYPE_STRING
,
TYPE_FUNCTION
,0,

356 
TYPE_STRING
,
TYPE_FUNCTION
,0,

357 
TYPE_NUMBER
,0,

358 
TYPE_NUMBER
,0,

359 
TYPE_STRING
,0,

360 
TYPE_NUMBER
,0,

361 
TYPE_STRING
,0,

362 
TYPE_STRING
,
TYPE_FUNCTION
,0,

363 
TYPE_STRING
,
TYPE_FUNCTION
,0,

364 
TYPE_NUMBER
,0,

365 
TYPE_ANY
,0,

366 
TYPE_STRING
,0,

367 
TYPE_NUMBER
,0,

368 
TYPE_OBJECT
,0,

369 
TYPE_STRING
,
TYPE_FUNCTION
,0,

370 
TYPE_NUMBER
,0,

371 
TYPE_STRING
,
TYPE_FUNCTION
,0,

372 
TYPE_STRING
,
TYPE_FUNCTION
,0,

373 
TYPE_STRING
,
TYPE_FUNCTION
,0,

374 
TYPE_NUMBER
,
TYPE_OBJECT
,0,

375 
TYPE_NUMBER
,0,

376 
TYPE_OBJECT
,0,

378 
TYPE_REAL
,0,

379 
TYPE_REAL
,0,

	@efun_protos.h

6 
f__to_öt
 
PROT
(());

7 
f__to_Êﬂt
 
PROT
(());

8 
f_this_∂ayî
 
PROT
(());

9 
f_¥evious_obje˘
 
PROT
(());

10 
f_ˇŒ_°ack
 
PROT
(());

11 
f_sizeof
 
PROT
(());

12 
f_de°ru˘
 
PROT
(());

13 
f_fûe_«me
 
PROT
(());

14 
f_ˇpôÆize
 
PROT
(());

15 
f_øndom
 
PROT
(());

16 
f_Æl_övít‹y
 
PROT
(());

17 
f_dìp_övít‹y
 
PROT
(());

18 
f_fú°_övít‹y
 
PROT
(());

19 
f_√xt_övít‹y
 
PROT
(());

20 
f_move_obje˘
 
PROT
(());

21 
f_comm™d
 
PROT
(());

22 
f_livög
 
PROT
(());

23 
f_£t_livög_«me
 
PROT
(());

24 
f_föd_livög
 
PROT
(());

25 
f_föd_∂ayî
 
PROT
(());

26 
f_nŸify_Áû
 
PROT
(());

27 
f_lowî_ˇ£
 
PROT
(());

28 
f_ßve_v¨übÀ
 
PROT
(());

29 
f_ª°‹e_v¨übÀ
 
PROT
(());

30 
f_wrôe
 
PROT
(());

31 
f_shout
 
PROT
(());

32 
f_ª˚ive
 
PROT
(());

33 
f_föd_ˇŒ_out
 
PROT
(());

34 
f_vÆues
 
PROT
(());

35 
f_keys
 
PROT
(());

36 
f_˛⁄ï
 
PROT
(());

37 
f_öç
 
PROT
(());

38 
f_undeföedp
 
PROT
(());

39 
f_Êﬂç
 
PROT
(());

40 
f_°rögp
 
PROT
(());

41 
f_vútuÆp
 
PROT
(());

42 
f_fun˘i⁄p
 
PROT
(());

43 
f_poöãΩ
 
PROT
(());

44 
f_obje˘p
 
PROT
(());

45 
f_˛as•
 
PROT
(());

46 
f_ty≥of
 
PROT
(());

47 
f_buf„Ω
 
PROT
(());

48 
f_Æloˇã_buf„r
 
PROT
(());

49 
f_ª∂a˚_¥ogøm
 
PROT
(());

50 
f_¸c32
 
PROT
(());

51 
f_fûe_size
 
PROT
(());

52 
f_mkdú
 
PROT
(());

53 
f_rm
 
PROT
(());

54 
f_rmdú
 
PROT
(());

55 
f_˘ime
 
PROT
(());

56 
f_loˇ…ime
 
PROT
(());

57 
f_quîy_idÀ
 
PROT
(());

58 
f_quîy_¢o›
 
PROT
(());

59 
f_quîy_¢o›ög
 
PROT
(());

60 
f_£t_hóπ_bót
 
PROT
(());

61 
f_quîy_hóπ_bót
 
PROT
(());

62 
f_£t_hide
 
PROT
(());

63 
f_quîy_shadowög
 
PROT
(());

64 
f_throw
 
PROT
(());

65 
f_dìp_öhîô_li°
 
PROT
(());

66 
f_shÆlow_öhîô_li°
 
PROT
(());

67 
f_m≠p
 
PROT
(());

68 
f_öãø˘ive
 
PROT
(());

69 
f_ö_edô
 
PROT
(());

70 
f_ö_öput
 
PROT
(());

71 
f_u£Ω
 
PROT
(());

72 
f_gë_c⁄fig
 
PROT
(());

73 
f_chûdªn
 
PROT
(());

74 
f_ªlﬂd_obje˘
 
PROT
(());

75 
f_îr‹
 
PROT
(());

76 
f_mud_°©us
 
PROT
(());

77 
f_£t_evÆ_limô
 
PROT
(());

78 
f_ªmove_shadow
 
PROT
(());

79 
f_c›y
 
PROT
(());

80 
f_∂uølize
 
PROT
(());

81 
f_fûe_Àngth
 
PROT
(());

82 
f_uµî_ˇ£
 
PROT
(());

83 
f_„tch_v¨übÀ
 
PROT
(());

84 
f_ªmove_öãø˘ive
 
PROT
(());

85 
f_debug_mesßge
 
PROT
(());

86 
f_fun˘i⁄_ow√r
 
PROT
(());

87 
f_sockë_˛o£
 
PROT
(());

88 
f_sockë_îr‹
 
PROT
(());

89 
f_ªfs
 
PROT
(());

90 
f_cos
 
PROT
(());

91 
f_sö
 
PROT
(());

92 
f_èn
 
PROT
(());

93 
f_asö
 
PROT
(());

94 
f_acos
 
PROT
(());

95 
f_©™
 
PROT
(());

96 
f_sqπ
 
PROT
(());

97 
f_log
 
PROT
(());

98 
f_log10
 
PROT
(());

99 
f_exp
 
PROT
(());

100 
f_Êo‹
 
PROT
(());

101 
f_˚û
 
PROT
(());

102 
f__ˇŒ_Ÿhî
 
PROT
(());

103 
f__evÆu©e
 
PROT
(());

104 
f__this_obje˘
 
PROT
(());

105 
f__√w
 
PROT
(());

106 
f_böd
 
PROT
(());

107 
f_ex∂ode
 
PROT
(());

108 
f_im∂ode
 
PROT
(());

109 
f_ˇŒ_out
 
PROT
(());

110 
f_membî_¨øy
 
PROT
(());

111 
f_öput_to
 
PROT
(());

112 
f_ívú⁄mít
 
PROT
(());

113 
f_ßy
 
PROT
(());

114 
f_ãŒ_room
 
PROT
(());

115 
f_¥e£¡
 
PROT
(());

116 
f_add_a˘i⁄
 
PROT
(());

117 
f_quîy_vîb
 
PROT
(());

118 
f_ªmove_a˘i⁄
 
PROT
(());

119 
f_comm™ds
 
PROT
(());

120 
f_dißbÀ_comm™ds
 
PROT
(());

121 
f_íabÀ_comm™ds
 
PROT
(());

122 
f_livögs
 
PROT
(());

123 
f_ª∂a˚_°rög
 
PROT
(());

124 
f_ª°‹e_obje˘
 
PROT
(());

125 
f_ßve_obje˘
 
PROT
(());

126 
f_u£rs
 
PROT
(());

127 
f_gë_dú
 
PROT
(());

128 
f_°r§ch
 
PROT
(());

129 
f_ãŒ_obje˘
 
PROT
(());

130 
f_mesßge
 
PROT
(());

131 
f_föd_obje˘
 
PROT
(());

132 
f_Æloˇã_m≠pög
 
PROT
(());

133 
f_m≠_dñëe
 
PROT
(());

134 
f_m©ch_∑th
 
PROT
(());

135 
f_öhîôs
 
PROT
(());

136 
f_ªgexp
 
PROT
(());

137 
f_ªg_assoc
 
PROT
(());

138 
f_Æloˇã
 
PROT
(());

139 
f_ˇŒ_out_öfo
 
PROT
(());

140 
f_ªad_buf„r
 
PROT
(());

141 
f_wrôe_buf„r
 
PROT
(());

142 
f_wrôe_fûe
 
PROT
(());

143 
f_ª«me
 
PROT
(());

144 
f_wrôe_byãs
 
PROT
(());

145 
f_ªad_byãs
 
PROT
(());

146 
f_ªad_fûe
 
PROT
(());

147 
f_˝
 
PROT
(());

148 
f_lök
 
PROT
(());

149 
f_˛ór_bô
 
PROT
(());

150 
f_ã°_bô
 
PROT
(());

151 
f_£t_bô
 
PROT
(());

152 
f_√xt_bô
 
PROT
(());

153 
f_¸y±
 
PROT
(());

154 
f_ﬁd¸y±
 
PROT
(());

155 
f_exec
 
PROT
(());

156 
f_fun˘i⁄_exi°s
 
PROT
(());

157 
f_obje˘s
 
PROT
(());

158 
f_quîy_ho°_«me
 
PROT
(());

159 
f_quîy_ù_«me
 
PROT
(());

160 
f_quîy_ù_numbî
 
PROT
(());

161 
f_¢o›
 
PROT
(());

162 
f_ªmove_ˇŒ_out
 
PROT
(());

163 
f_gíî©e_sour˚
 
PROT
(());

164 
f_Õc_öfo
 
PROT
(());

165 
f_£t_ª£t
 
PROT
(());

166 
f_shadow
 
PROT
(());

167 
f_s‹t_¨øy
 
PROT
(());

168 
f_time
 
PROT
(());

169 
f_unique_¨øy
 
PROT
(());

170 
f_unique_m≠pög
 
PROT
(());

171 
f_¥ötf
 
PROT
(());

172 
f_•rötf
 
PROT
(());

173 
f_°©
 
PROT
(());

174 
f_ma°î
 
PROT
(());

175 
f_mem‹y_öfo
 
PROT
(());

176 
f_gë_ch¨
 
PROT
(());

177 
f_u±ime
 
PROT
(());

178 
f_°rcmp
 
PROT
(());

179 
f_rußge
 
PROT
(());

180 
f_Êush_mesßges
 
PROT
(());

181 
f_ed
 
PROT
(());

182 
f_ˇche_°©s
 
PROT
(());

183 
f_fûãr
 
PROT
(());

184 
f_m≠
 
PROT
(());

185 
f_mÆloc_°©us
 
PROT
(());

186 
f_dum∑Œobj
 
PROT
(());

187 
f_dump_fûe_des¸ùt‹s
 
PROT
(());

188 
f_quîy_lﬂd_avîage
 
PROT
(());

189 
f_‹igö
 
PROT
(());

190 
f_ª˛aim_obje˘s
 
PROT
(());

191 
f_ªsﬁve
 
PROT
(());

192 
f_shutdown
 
PROT
(());

193 
f_quîy_nŸify_Áû
 
PROT
(());

194 
f_«med_livögs
 
PROT
(());

195 
f_fun˘i⁄s
 
PROT
(());

196 
f_v¨übÀs
 
PROT
(());

197 
f_hóπ_bóts
 
PROT
(());

198 
f_ãrmöÆ_cﬁour
 
PROT
(());

199 
f_ª∂a˚abÀ
 
PROT
(());

200 
f_¥ogøm_öfo
 
PROT
(());

201 
f_°‹e_v¨übÀ
 
PROT
(());

202 
f_quîy_ù_p‹t
 
PROT
(());

203 
f_ª≥©_°rög
 
PROT
(());

204 
f_mem‹y_summ¨y
 
PROT
(());

205 
f_quîy_ª∂a˚d_¥ogøm
 
PROT
(());

206 
f_√tw‹k_°©s
 
PROT
(());

207 
f_sockë_¸óã
 
PROT
(());

208 
f_sockë_böd
 
PROT
(());

209 
f_sockë_li°í
 
PROT
(());

210 
f_sockë_ac˚±
 
PROT
(());

211 
f_sockë_c⁄√˘
 
PROT
(());

212 
f_sockë_wrôe
 
PROT
(());

213 
f_sockë_ªÀa£
 
PROT
(());

214 
f_sockë_acquúe
 
PROT
(());

215 
f_sockë_addªss
 
PROT
(());

216 
f_sockë_°©us
 
PROT
(());

217 
f_debug_öfo
 
PROT
(());

218 
f_dump_¥og
 
PROT
(());

219 
f_pow
 
PROT
(());

	@efunctions.h

7 
	~"efun_¥Ÿos.h
"

10 (*
	tfunc_t
Ë
	tPROT
(());

12 
func_t
 
efun_èbÀ
[] = {

13 
f__to_öt
,

14 
f__to_Êﬂt
,

15 
f_this_∂ayî
,

16 
f_¥evious_obje˘
,

17 
f_ˇŒ_°ack
,

18 
f_sizeof
,

19 
f_de°ru˘
,

20 
f_fûe_«me
,

21 
f_ˇpôÆize
,

22 
f_øndom
,

23 
f_Æl_övít‹y
,

24 
f_dìp_övít‹y
,

25 
f_fú°_övít‹y
,

26 
f_√xt_övít‹y
,

27 
f_move_obje˘
,

28 
f_comm™d
,

29 
f_livög
,

30 
f_£t_livög_«me
,

31 
f_föd_livög
,

32 
f_föd_∂ayî
,

33 
f_nŸify_Áû
,

34 
f_lowî_ˇ£
,

35 
f_ßve_v¨übÀ
,

36 
f_ª°‹e_v¨übÀ
,

37 
f_wrôe
,

38 
f_shout
,

39 
f_ª˚ive
,

40 
f_föd_ˇŒ_out
,

41 
f_vÆues
,

42 
f_keys
,

43 
f_˛⁄ï
,

44 
f_öç
,

45 
f_undeföedp
,

46 
f_Êﬂç
,

47 
f_°rögp
,

48 
f_vútuÆp
,

49 
f_fun˘i⁄p
,

50 
f_poöãΩ
,

51 
f_obje˘p
,

52 
f_˛as•
,

53 
f_ty≥of
,

54 
f_buf„Ω
,

55 
f_Æloˇã_buf„r
,

56 
f_ª∂a˚_¥ogøm
,

57 
f_¸c32
,

58 
f_fûe_size
,

59 
f_mkdú
,

60 
f_rm
,

61 
f_rmdú
,

62 
f_˘ime
,

63 
f_loˇ…ime
,

64 
f_quîy_idÀ
,

65 
f_quîy_¢o›
,

66 
f_quîy_¢o›ög
,

67 
f_£t_hóπ_bót
,

68 
f_quîy_hóπ_bót
,

69 
f_£t_hide
,

70 
f_quîy_shadowög
,

71 
f_throw
,

72 
f_dìp_öhîô_li°
,

73 
f_shÆlow_öhîô_li°
,

74 
f_m≠p
,

75 
f_öãø˘ive
,

76 
f_ö_edô
,

77 
f_ö_öput
,

78 
f_u£Ω
,

79 
f_gë_c⁄fig
,

80 
f_chûdªn
,

81 
f_ªlﬂd_obje˘
,

82 
f_îr‹
,

83 
f_mud_°©us
,

84 
f_£t_evÆ_limô
,

85 
f_ªmove_shadow
,

86 
f_c›y
,

87 
f_∂uølize
,

88 
f_fûe_Àngth
,

89 
f_uµî_ˇ£
,

90 
f_„tch_v¨übÀ
,

91 
f_ªmove_öãø˘ive
,

92 
f_debug_mesßge
,

93 
f_fun˘i⁄_ow√r
,

94 
f_sockë_˛o£
,

95 
f_sockë_îr‹
,

96 
f_ªfs
,

97 
f_cos
,

98 
f_sö
,

99 
f_èn
,

100 
f_asö
,

101 
f_acos
,

102 
f_©™
,

103 
f_sqπ
,

104 
f_log
,

105 
f_log10
,

106 
f_exp
,

107 
f_Êo‹
,

108 
f_˚û
,

109 
f__ˇŒ_Ÿhî
,

110 
f__evÆu©e
,

111 
f__this_obje˘
,

112 
f__√w
,

113 
f_böd
,

114 
f_ex∂ode
,

115 
f_im∂ode
,

116 
f_ˇŒ_out
,

117 
f_membî_¨øy
,

118 
f_öput_to
,

119 
f_ívú⁄mít
,

120 
f_ßy
,

121 
f_ãŒ_room
,

122 
f_¥e£¡
,

123 
f_add_a˘i⁄
,

124 
f_quîy_vîb
,

125 
f_ªmove_a˘i⁄
,

126 
f_comm™ds
,

127 
f_dißbÀ_comm™ds
,

128 
f_íabÀ_comm™ds
,

129 
f_livögs
,

130 
f_ª∂a˚_°rög
,

131 
f_ª°‹e_obje˘
,

132 
f_ßve_obje˘
,

133 
f_u£rs
,

134 
f_gë_dú
,

135 
f_°r§ch
,

136 
f_ãŒ_obje˘
,

137 
f_mesßge
,

138 
f_föd_obje˘
,

139 
f_Æloˇã_m≠pög
,

140 
f_m≠_dñëe
,

141 
f_m©ch_∑th
,

142 
f_öhîôs
,

143 
f_ªgexp
,

144 
f_ªg_assoc
,

145 
f_Æloˇã
,

146 
f_ˇŒ_out_öfo
,

147 
f_ªad_buf„r
,

148 
f_wrôe_buf„r
,

149 
f_wrôe_fûe
,

150 
f_ª«me
,

151 
f_wrôe_byãs
,

152 
f_ªad_byãs
,

153 
f_ªad_fûe
,

154 
f_˝
,

155 
f_lök
,

156 
f_˛ór_bô
,

157 
f_ã°_bô
,

158 
f_£t_bô
,

159 
f_√xt_bô
,

160 
f_¸y±
,

161 
f_ﬁd¸y±
,

162 
f_exec
,

163 
f_fun˘i⁄_exi°s
,

164 
f_obje˘s
,

165 
f_quîy_ho°_«me
,

166 
f_quîy_ù_«me
,

167 
f_quîy_ù_numbî
,

168 
f_¢o›
,

169 
f_ªmove_ˇŒ_out
,

170 
f_gíî©e_sour˚
,

171 
f_Õc_öfo
,

172 
f_£t_ª£t
,

173 
f_shadow
,

174 
f_s‹t_¨øy
,

175 
f_time
,

176 
f_unique_¨øy
,

177 
f_unique_m≠pög
,

178 
f_¥ötf
,

179 
f_•rötf
,

180 
f_°©
,

181 
f_ma°î
,

182 
f_mem‹y_öfo
,

183 
f_gë_ch¨
,

184 
f_u±ime
,

185 
f_°rcmp
,

186 
f_rußge
,

187 
f_Êush_mesßges
,

188 
f_ed
,

189 
f_ˇche_°©s
,

190 
f_fûãr
,

191 
f_m≠
,

192 
f_mÆloc_°©us
,

193 
f_dum∑Œobj
,

194 
f_dump_fûe_des¸ùt‹s
,

195 
f_quîy_lﬂd_avîage
,

196 
f_‹igö
,

197 
f_ª˛aim_obje˘s
,

198 
f_ªsﬁve
,

199 
f_shutdown
,

200 
f_quîy_nŸify_Áû
,

201 
f_«med_livögs
,

202 
f_fun˘i⁄s
,

203 
f_v¨übÀs
,

204 
f_hóπ_bóts
,

205 
f_ãrmöÆ_cﬁour
,

206 
f_ª∂a˚abÀ
,

207 
f_¥ogøm_öfo
,

208 
f_°‹e_v¨übÀ
,

209 
f_quîy_ù_p‹t
,

210 
f_ª≥©_°rög
,

211 
f_mem‹y_summ¨y
,

212 
f_quîy_ª∂a˚d_¥ogøm
,

213 
f_√tw‹k_°©s
,

214 
f_sockë_¸óã
,

215 
f_sockë_böd
,

216 
f_sockë_li°í
,

217 
f_sockë_ac˚±
,

218 
f_sockë_c⁄√˘
,

219 
f_sockë_wrôe
,

220 
f_sockë_ªÀa£
,

221 
f_sockë_acquúe
,

222 
f_sockë_addªss
,

223 
f_sockë_°©us
,

224 
f_debug_öfo
,

225 
f_dump_¥og
,

226 
f_pow
,

227 
	}
};

	@efuns_incl.h

1 #i‚de‡
EFUNS_INCL_H


2 
	#EFUNS_INCL_H


	)

4 
	~"efun_¥Ÿos.h
"

	@efuns_main.c

10 
	~"°d.h
"

11 
	~"efuns_maö.h
"

12 
	~"fûe_ö˛.h
"

13 
	~"fûe.h
"

14 
	~"comm.h
"

15 
	~"∑r£.h
"

16 
	~"•rötf.h
"

17 
	~"backíd.h
"

18 
	~"p‹t.h
"

19 
	~"sw≠.h
"

20 
	~"ŸabÀ.h
"

21 
	~"¸c32.h
"

22 
	~"ª˛aim.h
"

23 
	~"dump°©.h
"

24 
	~"ˇŒ_out.h
"

25 
	~"ed.h
"

26 
	~"md.h
"

27 
	~"ma°î.h
"

28 
	~"efun_¥Ÿos.h
"

29 
	~"add_a˘i⁄.h
"

30 #ifde‡
LPC_TO_C


31 
	~"öãrÁ˚.h
"

32 
	~"compûe_fûe.h
"

35 
	gˇŒ_‹igö
 = 0;

37 
d©a_size
 
PROT
((
obje˘_t
 * 
ob
));

38 
ªlﬂd_obje˘
 
PROT
((
obje˘_t
 * 
obj
));

40 #ifde‡
F_ALL_INVENTORY


42 
f_Æl_övít‹y
 
PROT
(())

44 
¨øy_t
 *
	gvec
 = 
Æl_övít‹y
(
•
->
u
.
ob
, 0);

45 
‰ì_obje˘
(
•
->
u
.
ob
, "f_all_inventory");

46 
	g•
->
	gty≥
 = 
T_ARRAY
;

47 
	g•
->
	gu
.
	g¨r
 = 
vec
;

51 #ifde‡
F_ALLOCATE


53 
f_Æloˇã
 
PROT
(())

55 i‡(
	g°_num_¨g
 == 2) {

56 (
•
-1)->
u
.
¨r
 = 
Æloˇã_¨øy2
((•-1)->u.
numbî
, sp);

57 
p›_°ack
();

59 
	g•
->
	gu
.
	g¨r
 = 
Æloˇã_¨øy
(
•
->
u
.
numbî
);

61 
	g•
->
	gty≥
 = 
T_ARRAY
;

65 #ifde‡
F_ALLOCATE_BUFFER


67 
f_Æloˇã_buf„r
 
PROT
(())

69 
buf„r_t
 *
	gbuf
;

71 
	gbuf
 = 
Æloˇã_buf„r
(
•
->
u
.
numbî
);

72 i‡(
	gbuf
) {

73 
p›_°ack
();

74 
push_ª„d_buf„r
(
buf
);

76 
assign_svÆue
(
•
, &
c⁄°0
);

81 #ifde‡
F_ALLOCATE_MAPPING


83 
f_Æloˇã_m≠pög
 
PROT
(())

85 
¨øy_t
 *
	g¨r
;

87 i‡(
	g°_num_¨g
 == 2) {

88 i‡((
•
-1)->
ty≥
 !
T_ARRAY
)

89 
îr‹
("Badárgument 1Åoállocate_mapping()\n");

90 i‡(
	g•
->
	gty≥
 =
T_ARRAY
) {

91 
¨r
 = (
•
-1)->
u
.arr;

92 i‡(
	g•
->
	gu
.
	g¨r
->
	gsize
 !
¨r
->
size
)

93 
îr‹
("ArraysÖassedÅoállocate_mapping() must beÅhe same size\n");

94 (
	g•
-1)->
	gu
.
	gm≠
 = 
mkm≠pög
(
¨r
, 
•
->
u
.arr);

96 
	g¨r
 = (
•
-1)->
u
.
¨r
;

97 (
	g•
-1)->
	gu
.
	gm≠
 = 
Æloˇã_m≠pög2
(
¨r
, 
•
);

99 
p›_°ack
();

100 
‰ì_¨øy
(
¨r
);

101 } i‡(
	g•
->
	gty≥
 =
T_NUMBER
) {

102 
•
->
u
.
m≠
 = 
Æloˇã_m≠pög
(•->u.
numbî
);

104 
îr‹
("Badárgument 1Åoállocate_mapping()\n");

106 
	g•
->
	gty≥
 = 
T_MAPPING
;

110 #ifde‡
F_BIND


112 
f_böd
 
PROT
(())

114 
obje˘_t
 *
	gob
 = 
•
->
u
.
ob
;

115 
fu≈å_t
 *
	gﬁd_Â
 = (
•
-1)->
u
.
Â
;

116 
fu≈å_t
 *
	g√w_Â
;

117 
svÆue_t
 *
	gªs
;

119 i‡(
	gob
 =
ﬁd_Â
->
hdr
.
ow√r
) {

121 
‰ì_obje˘
(
ob
, "bindÇop");

122 
	g•
--;

126 i‡(
	gﬁd_Â
->
	ghdr
.
	gty≥
 =(
FP_LOCAL
 | 
FP_NOT_BINDABLE
))

127 
îr‹
("IllegalÅoÑebindáÖointerÅoáÜocal function.\n");

128 i‡(
	gﬁd_Â
->
	ghdr
.
	gty≥
 & 
	gFP_NOT_BINDABLE
)

129 
îr‹
("IllegalÅoÑebindá functionalÅhatÑeferences globals orÜocal functions.\n");

132 
push_obje˘
(
cuºít_obje˘
);

135 
push_obje˘
(
ﬁd_Â
->
hdr
.
ow√r
);

138 
push_obje˘
(
ob
);

140 
	gªs
 = 
≠∂y_ma°î_ob
(
APPLY_VALID_BIND
, 3);

141 i‡(!
MASTER_APPROVED
(
ªs
))

142 
îr‹
("Master object deniedÖermissionÅo bind() functionÖointer.\n");

144 
	g√w_Â
 = 
ALLOCATE
(
fu≈å_t
, 
TAG_FUNP
, "f_bind");

145 *
	g√w_Â
 = *
ﬁd_Â
;

146 
	g√w_Â
->
	ghdr
.
	gªf
 = 1;

147 
	g√w_Â
->
	ghdr
.
	gow√r
 = 
ob
;

148 i‡(
	g√w_Â
->
	ghdr
.
	g¨gs
)

149 
	g√w_Â
->
	ghdr
.
	g¨gs
->
	gªf
++;

150 i‡((
	gﬁd_Â
->
	ghdr
.
	gty≥
 & 0x0fË=
FP_FUNCTIONAL
) {

151 
√w_Â
->
f
.
fun˘i⁄Æ
.
¥og
->
func_ªf
++;

152 
debug
(
d_Êag
, ("add funcÑef /%s:Çow %i\n",

153 
√w_Â
->
f
.
fun˘i⁄Æ
.
¥og
->
«me
,

154 
√w_Â
->
f
.
fun˘i⁄Æ
.
¥og
->
func_ªf
));

157 
‰ì_fu≈
(
ﬁd_Â
);

158 
	g•
--;

159 
	g•
->
	gu
.
	gÂ
 = 
√w_Â
;

163 #ifde‡
F_CACHE_STATS


164 
¥öt_ˇche_°©s
 
	$P1
(
outbuf„r_t
 *, 
ob
)

166 
	`outbuf_add
(
ob
, "Function cache information\n");

167 
	`outbuf_add
(
ob
, "-------------------------------\n");

168 
	`outbuf_addv
(
ob
, "%% cache hits: %10.2f\n",

169 100 * ((Ë
≠∂y_low_ˇche_hôs
 / 
≠∂y_low_ˇŒ_Ÿhîs
));

170 
	`outbuf_addv
(
ob
, "ˇŒ_Ÿhîs: %10lu\n", 
≠∂y_low_ˇŒ_Ÿhîs
);

171 
	`outbuf_addv
(
ob
, "ˇchêhôs: %10lu\n", 
≠∂y_low_ˇche_hôs
);

172 
	`outbuf_addv
(
ob
, "ˇchêsize: %10lu\n", 
APPLY_CACHE_SIZE
);

173 
	`outbuf_addv
(
ob
, "¶Ÿ†u£d: %10lu\n", 
≠∂y_low_¶Ÿs_u£d
);

174 
	`outbuf_addv
(
ob
, "%% slots used: %10.2f\n",

175 100 * ((Ë
≠∂y_low_¶Ÿs_u£d
 / 
APPLY_CACHE_SIZE
));

176 
	`outbuf_addv
(
ob
, "cﬁlisi⁄s: %10lu\n", 
≠∂y_low_cﬁlisi⁄s
);

177 
	`outbuf_addv
(
ob
, "%% collisions: %10.2f\n",

178 100 * ((Ë
≠∂y_low_cﬁlisi⁄s
 / 
≠∂y_low_ˇŒ_Ÿhîs
));

179 
	}
}

181 
f_ˇche_°©s
 
PROT
(())

183 
outbuf„r_t
 
	gob
;

185 
outbuf_zîo
(&
ob
);

186 
¥öt_ˇche_°©s
(&
ob
);

187 
outbuf_push
(&
ob
);

191 #ifde‡
F__CALL_OTHER


194 
f__ˇŒ_Ÿhî
 
PROT
(())

196 
svÆue_t
 *
	g¨g
;

197 *
	gfun˙ame
;

198 
	gi
;

199 
	gnum_¨g
 = 
°_num_¨g
;

200 
obje˘_t
 *
	gob
;

202 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
) {

203 
p›_n_ñems
(
num_¨g
);

204 
push_undeföed
();

207 
	g¨g
 = 
•
 - 
num_¨g
 + 1;

208 i‡(
	g¨g
[1].
	gty≥
 =
T_STRING
)

209 
fun˙ame
 = 
¨g
[1].
u
.
°rög
;

211 
¨øy_t
 *
	gv
 = 
¨g
[1].
u
.
¨r
;

212 
svÆue_t
 *
	gsv
;

214 
check_f‹_de°r
(
v
);

215 i‡(((
	gi
 = 
v
->
size
Ë< 1Ë|| !((
sv
 = v->
ôem
)->
ty≥
 =
T_STRING
))

216 
îr‹
("call_other: 1stÉlem ofárray forárg 2 must beá string\n");

217 
	gfun˙ame
 = 
sv
->
u
.
°rög
;

218 
	gnum_¨g
 = 2 + 
mîge_¨g_li°s
(
num_¨g
 - 2, 
v
, 1);

221 i‡(
	g¨g
[0].
	gty≥
 =
T_OBJECT
)

222 
ob
 = 
¨g
[0].
u
.ob;

223 i‡(
	g¨g
[0].
	gty≥
 =
T_ARRAY
) {

224 
¨øy_t
 *
ªt
;

226 
	gªt
 = 
ˇŒ_Æl_Ÿhî
(
¨g
[0].
u
.
¨r
, 
fun˙ame
, 
num_¨g
 - 2);

227 
p›_°ack
();

228 
‰ì_¨øy
(
¨g
->
u
.
¨r
);

229 
	g•
->
	gu
.
	g¨r
 = 
ªt
;

232 
	gob
 = 
föd_obje˘
(
¨g
[0].
u
.
°rög
);

233 i‡(!
	gob
 || !
obje˘_visibÀ
(
ob
))

234 
îr‹
("call_other() couldn't find object\n");

237 #ifde‡
TRACE


238 i‡(
TRACEP
(
TRACE_CALL_OTHER
)) {

239 
do_åa˚
("CÆ»Ÿhî ", 
fun˙ame
, "\n");

242 
	gˇŒ_‹igö
 = 
ORIGIN_CALL_OTHER
;

243 i‡(
≠∂y_low
(
fun˙ame
, 
ob
, 
num_¨g
 - 2) == 0) {

244 
p›_2_ñems
();

245 
push_undeföed
();

252 
‰ì_svÆue
(--
•
, "f_call_other:1");

253 
‰ì_svÆue
(--
•
, "f_call_other:2");

254 *
	g•
 = *(
•
+2);

259 #ifde‡
F_CALL_OUT


261 
f_ˇŒ_out
 
PROT
(())

263 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

264 
	gnum
 = 
°_num_¨g
 - 2;

265 #ifde‡
CALLOUT_HANDLES


266 
	gªt
;

268 i‡(!(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
)) {

269 
	gªt
 = 
√w_ˇŒ_out
(
cuºít_obje˘
, 
¨g
,árg[1].
u
.
numbî
, 
num
,árg + 2);

272 
	g•
 -
num
 + 1;

274 
	gªt
 = 0;

275 
p›_n_ñems
(
num
);

276 
	g•
--;

279 
‰ì_svÆue
(
•
, "call_out");

280 
put_numbî
(
ªt
);

282 i‡(!(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
)) {

283 
√w_ˇŒ_out
(
cuºít_obje˘
, 
¨g
,árg[1].
u
.
numbî
, 
num
,árg + 2);

284 
	g•
 -
num
 + 1;

286 
p›_n_ñems
(
num
);

287 
	g•
--;

289 
‰ì_svÆue
(
•
--, "call_out");

294 #ifde‡
F_CALL_OUT_INFO


296 
f_ˇŒ_out_öfo
 
PROT
(())

298 
push_ª„d_¨øy
(
gë_Æl_ˇŒ_outs
());

302 #i‡
deföed
(
F_CALL_STACK
Ë|| deföed(
F_ORIGIN
)

303 *
‹igö_«me
 
	$P1
(, 
‹ig
) {

305 
i
 = 0;

306 *
‹igös
[] = {

316 
‹ig
 >>1Ë
i
++;

317  
‹igös
[
i
];

318 
	}
}

321 #ifde‡
F_CALL_STACK


323 
f_ˇŒ_°ack
 
PROT
(())

325 
	gi
, 
	gn
 = 
c•
 - &
c⁄åﬁ_°ack
[0] + 1;

326 
¨øy_t
 *
	gªt
;

328 i‡(
	g•
->
	gu
.
	gnumbî
 < 0 || sp->u.number > 3)

329 
îr‹
("Firstárgument of call_stack() must be 0, 1, 2, or 3.\n");

331 
	gªt
 = 
Æloˇã_em±y_¨øy
(
n
);

333 
	g•
->
	gu
.
	gnumbî
) {

335 
ªt
->
ôem
[0].
ty≥
 = 
T_STRING
;

336 
	gªt
->
	gôem
[0].
	gsubty≥
 = 
STRING_MALLOC
;

337 
	gªt
->
	gôem
[0].
	gu
.
	g°rög
 = 
add_¶ash
(
cuºít_¥og
->
«me
);

338 
	gi
 = 1; i < 
	gn
; i++) {

339 
	gªt
->
	gôem
[
i
].
	gty≥
 = 
T_STRING
;

340 
	gªt
->
	gôem
[
i
].
	gsubty≥
 = 
STRING_MALLOC
;

341 
	gªt
->
	gôem
[
i
].
	gu
.
	g°rög
 = 
add_¶ash
((
c•
 - i + 1)->
¥og
->
«me
);

345 
ªt
->
ôem
[0].
ty≥
 = 
T_OBJECT
;

346 
	gªt
->
	gôem
[0].
	gu
.
	gob
 = 
cuºít_obje˘
;

347 
add_ªf
(
cuºít_obje˘
, "f_call_stack: curr");

348 
	gi
 = 1; i < 
	gn
; i++) {

349 
	gªt
->
	gôem
[
i
].
	gty≥
 = 
T_OBJECT
;

350 
	gªt
->
	gôem
[
i
].
	gu
.
	gob
 = (
c•
 - i + 1)->
ob
;

351 
add_ªf
((
c•
 - 
i
 + 1)->
ob
, "f_call_stack");

355 
i
 = 0; 
	gi
 < 
	gn
; i++) {

356 
	gªt
->
	gôem
[
i
].
	gty≥
 = 
T_STRING
;

357 i‡(((
	gc•
 - 
	gi
)->
	g‰ameköd
 & 
	gFRAME_MASK
Ë=
FRAME_FUNCTION
) {

358 
¥ogøm_t
 *
¥og
 = (
i
 ? (
c•
-i+1)->¥og : 
cuºít_¥og
);

359 
	gödex
 = (
c•
-
i
)->
‰
.
èbÀ_ödex
;

360 
fun˘i⁄_t
 *
	gcÂ
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

362 
	gªt
->
	gôem
[
i
].
	gsubty≥
 = 
STRING_SHARED
;

363 
	gªt
->
	gôem
[
i
].
	gu
.
	g°rög
 = 
cÂ
->
«me
;

364 
ªf_°rög
(
cÂ
->
«me
);

366 
	gªt
->
	gôem
[
i
].
	gsubty≥
 = 
STRING_CONSTANT
;

367 
	gªt
->
	gôem
[
i
].
	gu
.
	g°rög
 = (((
c•
 - i)->
‰ameköd
 & 
FRAME_MASK
Ë=
FRAME_CATCH
) ? "CATCH" : "<function>";

372 
ªt
->
ôem
[0].
ty≥
 = 
T_STRING
;

373 
	gªt
->
	gôem
[0].
	gsubty≥
 = 
STRING_CONSTANT
;

374 
	gªt
->
	gôem
[0].
	gu
.
	g°rög
 = 
‹igö_«me
(
ˇŒî_ty≥
);

376 
	gi
 = 1; i < 
	gn
; i++) {

377 
	gªt
->
	gôem
[
i
].
	gty≥
 = 
T_STRING
;

378 
	gªt
->
	gôem
[
i
].
	gsubty≥
 = 
STRING_CONSTANT
;

379 
	gªt
->
	gôem
[
i
].
	gu
.
	g°rög
 = 
‹igö_«me
((
c•
-i+1)->
ˇŒî_ty≥
);

383 
put_¨øy
(
ªt
);

387 #ifde‡
F_CAPITALIZE


389 
f_ˇpôÆize
 
PROT
(())

391 i‡(
ui¶owî
(
•
->
u
.
°rög
[0])) {

392 
u∆ök_°rög_svÆue
(
•
);

393 
	g•
->
	gu
.
	g°rög
[0] = 
touµî
(()
•
->
u
.
°rög
[0]);

398 #ifde‡
F_CHILDREN


400 
f_chûdªn
 
PROT
(())

402 
¨øy_t
 *
	gvec
;

404 
	gvec
 = 
chûdªn
(
•
->
u
.
°rög
);

405 
‰ì_°rög_svÆue
(
•
);

406 
put_¨øy
(
vec
);

410 #ifde‡
F_CLASSP


412 
f_˛as•
 
PROT
(())

414 i‡(
	g•
->
	gty≥
 =
T_CLASS
) {

415 
‰ì_˛ass
(
•
->
u
.
¨r
);

416 *
	g•
 = 
c⁄°1
;

418 
‰ì_svÆue
(
•
, "f_classp");

419 *
	g•
 = 
c⁄°0
;

424 #ifde‡
F_CLEAR_BIT


426 
f_˛ór_bô
 
PROT
(())

428 *
	g°r
;

429 
	gÀn
, 
	göd
, 
	gbô
;

431 i‡(
	g•
->
	gu
.
	gnumbî
 > 
	gMAX_BITS
)

432 
îr‹
("˛ór_bô(ËbôÑeque°ed : %d > maximum bôs: %d\n", 
•
->
u
.
numbî
, 
MAX_BITS
);

433 
	gbô
 = (
•
--)->
u
.
numbî
;

434 i‡(
	gbô
 < 0)

435 
îr‹
("Badárgument 2 (negative)Åo clear_bit().\n");

436 
	göd
 = 
bô
 / 6;

437 
	gbô
 %= 6;

438 
	gÀn
 = 
SVALUE_STRLEN
(
•
);

439 i‡(
	göd
 >
Àn
)

441 
u∆ök_°rög_svÆue
(
•
);

442 
	g°r
 = 
•
->
u
.
°rög
;

444 i‡(
	g°r
[
öd
] > 0x3f + ' ' || str[ind] < ' ')

445 
îr‹
("IŒegÆ bôÖ©ã∫ i¿˛ór_bô ch¨a˘î %d\n", 
öd
);

446 
	g°r
[
öd
] = ((
°r
[öd] - ' 'Ë& ~(1 << 
bô
)) + ' ';

450 #ifde‡
F_CLONEP


452 
f_˛⁄ï
 
PROT
(())

454 i‡((
	g•
->
	gty≥
 =
T_OBJECT
Ë&& (
•
->
u
.
ob
->
Êags
 & 
O_CLONE
)) {

455 
‰ì_obje˘
(
•
->
u
.
ob
, "f_clonep");

456 *
	g•
 = 
c⁄°1
;

458 
‰ì_svÆue
(
•
, "f_clonep");

459 *
	g•
 = 
c⁄°0
;

464 #ifde‡
F__NEW


466 
f__√w
 
PROT
(())

468 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

469 
obje˘_t
 *
	gob
;

471 
	gob
 = 
˛⁄e_obje˘
(
¨g
->
u
.
°rög
, 
°_num_¨g
 - 1);

472 
‰ì_°rög_svÆue
(
•
);

473 i‡(
	gob
) {

474 
put_uƒe„d_unde°ed_obje˘
(
ob
, "f_clone_object");

475 } *
	g•
 = 
c⁄°0
;

479 #ifde‡
F_CP


481 
f_˝
 
PROT
(())

483 
	gi
;

485 
	gi
 = 
c›y_fûe
(
•
[-1].
u
.
°rög
, sp[0].u.string);

486 
‰ì_°rög_svÆue
(
•
--);

487 
‰ì_°rög_svÆue
(
•
);

488 
put_numbî
(
i
);

492 #ifde‡
F_CRC32


494 
f_¸c32
 
PROT
(())

496 
	gÀn
;

497 *
	gbuf
;

498 
UINT32
 
	g¸c
;

500 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

501 
Àn
 = 
SVALUE_STRLEN
(
•
);

502 
	gbuf
 = (*Ë
•
->
u
.
°rög
;

503 #i‚de‡
NO_BUFFER_TYPE


504 } i‡(
	g•
->
	gty≥
 =
T_BUFFER
) {

505 
Àn
 = 
•
->
u
.
buf
->
size
;

506 
	gbuf
 = 
•
->
u
.
buf
->
ôem
;

509 #ifde‡
NO_BUFFER_TYPE


510 
bad_¨gumít
(
•
, 
T_STRING
, 1, 
F_CRC32
);

512 
bad_¨gumít
(
•
, 
T_STRING
 | 
T_BUFFER
, 1, 
F_CRC32
);

515 
	g¸c
 = 
compuã_¸c32
(
buf
, 
Àn
);

516 
‰ì_svÆue
(
•
, "f_crc32");

517 
put_numbî
(
¸c
);

521 #ifde‡
F_CTIME


523 
f_˘ime
 
PROT
(())

525 *
	g˝
, *
	g∆
, *
	gp
;

526 
	gl
;

528 
	g˝
 = 
time_°rög
((
time_t
)
•
->
u
.
numbî
);

530 i‡((
	g∆
 = 
°rchr
(
˝
, '\n')))

531 
	gl
 = 
∆
 - 
˝
;

533 
	gl
 = 
°æí
(
˝
);

535 
	gp
 = 
√w_°rög
(
l
, "f_ctime");

536 
°∫˝y
(
p
, 
˝
, 
l
);

537 
	gp
[
l
] = '\0';

538 
put_mÆlo˚d_°rög
(
p
);

542 #ifde‡
F_DEEP_INHERIT_LIST


544 
f_dìp_öhîô_li°
 
PROT
(())

546 
¨øy_t
 *
	gvec
;

548 i‡(!(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_SWAPPED
)) {

549 
	gvec
 = 
dìp_öhîô_li°
(
•
->
u
.
ob
);

551 
	gvec
 = &
the_nuŒ_¨øy
;

553 
‰ì_obje˘
(
•
->
u
.
ob
, "f_deep_inherit_list");

554 
put_¨øy
(
vec
);

558 #ifde‡
DEBUG_MACRO


560 #ifde‡
F_SET_DEBUG_LEVEL


562 
f_£t_debug_Àvñ
 
PROT
(())

564 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

565 
debug_Àvñ_£t
(
•
->
u
.
°rög
);

566 
‰ì_°rög_svÆue
(
•
--);

568 
	gdebug_Àvñ
 = (
•
--)->
u
.
numbî
;

572 
f_˛ór_debug_Àvñ
 
PROT
(()) {

573 
debug_Àvñ_˛ór
(
•
->
u
.
°rög
);

577 
f_debug_Àvñs
 
PROT
(()) {

580 
m≠pög_t
 *
debug_Àvñs
 
PROT
(());

582 
push_ª„d_m≠pög
(
debug_Àvñs
());

588 #ifde‡
F_DEEP_INVENTORY


590 
f_dìp_övít‹y
 
PROT
(())

592 
¨øy_t
 *
	gvec
;

594 
	gvec
 = 
dìp_övít‹y
(
•
->
u
.
ob
, 0);

595 
‰ì_obje˘
(
•
->
u
.
ob
, "f_deep_inventory");

596 
put_¨øy
(
vec
);

600 #ifde‡
F_DESTRUCT


602 
f_de°ru˘
 
PROT
(())

604 
de°ru˘_obje˘
(
•
->
u
.
ob
);

605 
	g•
--;

609 #ifde‡
F_DUMPALLOBJ


611 
f_dum∑Œobj
 
PROT
(())

613 i‡(
	g°_num_¨g
) {

614 
dump°©
(
•
->
u
.
°rög
);

615 
‰ì_°rög_svÆue
(
•
--);

617 
dump°©
("/OBJ_DUMP");

622 #ifde‡
F_ED


624 
f_ed
 
PROT
(())

626 i‡(!
	gcomm™d_givî
 || !comm™d_givî->
	göãø˘ive
) {

627 
p›_n_ñems
(
°_num_¨g
);

631 i‡(!
	g°_num_¨g
) {

633 
ed_°¨t
(0, 0, 0, 0, 0);

634 } i‡(
	g°_num_¨g
 == 1) {

636 
ed_°¨t
(
•
->
u
.
°rög
, 0, 0, 0, 0);

637 
p›_°ack
();

638 } i‡(
	g°_num_¨g
 == 2) {

640 
ed_°¨t
((
•
 - 1)->
u
.
°rög
, 0, sp->u.°rög, 0, 
cuºít_obje˘
);

641 
p›_2_ñems
();

642 } i‡(
	g°_num_¨g
 == 3) {

644 i‡(
•
->
ty≥
 =
T_NUMBER
) {

645 
ed_°¨t
((
•
 - 2)->
u
.
°rög
, 0, (• - 1)->u.°rög, sp->u.
numbî
,

646 
cuºít_obje˘
);

647 } i‡(
	g•
->
	gty≥
 =
T_STRING
) {

648 
ed_°¨t
((
•
 - 2)->
u
.
°rög
, (sp - 1)->u.string, sp->u.string, 0,

649 
cuºít_obje˘
);

651 
bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_STRING
, 3, 
F_ED
);

653 
p›_3_ñems
();

656 i‡(!((
	g•
 - 1)->
	gty≥
 =
T_STRING
))

657 
bad_¨gumít
(
•
 - 1, 
T_STRING
, 3, 
F_ED
);

658 i‡(!(
	g•
->
	gty≥
 =
T_NUMBER
))

659 
bad_¨gumít
(
•
, 
T_NUMBER
, 4, 
F_ED
);

660 
ed_°¨t
((
•
 - 3)->
u
.
°rög
, (sp - 2)->u.string, (sp - 1)->u.string,

661 
•
->
u
.
numbî
, 
cuºít_obje˘
);

662 
p›_n_ñems
(4);

667 #ifde‡
F_ED_CMD


668 
f_ed_cmd
 
PROT
(())

670 *
	gªs
;

672 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
)

673 
îr‹
("destructed objects can't useÉd.\n");

675 i‡(!(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_IN_EDIT
))

676 
îr‹
("ed_cmd() called withÇoÉd sessionáctive.\n");

678 
	gªs
 = 
obje˘_ed_cmd
(
cuºít_obje˘
, 
•
->
u
.
°rög
);

680 
‰ì_°rög_svÆue
(
•
);

681 i‡(
	gªs
) {

682 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

683 
	g•
->
	gu
.
	g°rög
 = 
ªs
;

685 
	g•
->
	gsubty≥
 = 
STRING_CONSTANT
;

686 
	g•
->
	gu
.
	g°rög
 = "";

691 #ifde‡
F_ED_START


692 
f_ed_°¨t
 
PROT
(())

694 *
	gªs
;

695 *
	g‚ame
;

696 
	gª°r
 = 0;

698 i‡(
	g°_num_¨g
 == 2)

699 
ª°r
 = (
•
--)->
u
.
numbî
;

701 i‡(
	g°_num_¨g
)

702 
	g‚ame
 = 
•
->
u
.
°rög
;

704 
	g‚ame
 = 0;

706 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
)

707 
îr‹
("destructed objects can't useÉd.\n");

709 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_IN_EDIT
)

710 
îr‹
("ed_start() called whileánÉd session isálready started.\n");

712 
	gªs
 = 
obje˘_ed_°¨t
(
cuºít_obje˘
, 
‚ame
, 
ª°r
);

714 i‡(
	g‚ame
Ë
‰ì_°rög_svÆue
(
•
);

716 
	gSTACK_INC
;

717 
	g•
->
	gty≥
 = 
T_STRING
;

720 i‡(
	gªs
) {

721 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

722 
	g•
->
	gu
.
	g°rög
 = 
ªs
;

724 
	g•
->
	gsubty≥
 = 
STRING_CONSTANT
;

725 
	g•
->
	gu
.
	g°rög
 = "";

730 #ifde‡
F_ENABLE_WIZARD


732 
f_íabÀ_wiz¨d
 
PROT
(())

734 i‡(
	gcuºít_obje˘
->
	göãø˘ive
)

735 
	gcuºít_obje˘
->
	gÊags
 |
O_IS_WIZARD
;

739 #ifde‡
F_ERROR


741 
f_îr‹
 
PROT
(())

743 
	gl
 = 
SVALUE_STRLEN
(
•
);

744 
	gîr_buf
[2048];

746 i‡(
	g•
->
	gu
.
	g°rög
[
l
 - 1] == '\n')

747 
l
--;

748 i‡(
	gl
 > 2045)Ü = 2045;

750 
	gîr_buf
[0] = '*';

751 
°∫˝y
(
îr_buf
 + 1, 
•
->
u
.
°rög
, 
l
);

752 
	gîr_buf
[
l
 + 1] = '\n';

753 
	gîr_buf
[
l
 + 2] = 0;

755 
îr‹_h™dÀr
(
îr_buf
);

759 #ifde‡
F_DISABLE_WIZARD


761 
f_dißbÀ_wiz¨d
 
PROT
(())

763 i‡(
	gcuºít_obje˘
->
	göãø˘ive
)

764 
	gcuºít_obje˘
->
	gÊags
 &~
O_IS_WIZARD
;

768 #ifde‡
F_ENVIRONMENT


770 
f_ívú⁄mít
 
PROT
(())

772 
obje˘_t
 *
	gob
;

774 i‡(
	g°_num_¨g
) {

775 i‡((
	gob
 = 
•
->
u
.
ob
)->
Êags
 & 
O_DESTRUCTED
)

776 
îr‹
("environment() of destructed object.\n");

777 
	gob
 = 
ob
->
su≥r
;

778 
‰ì_obje˘
((
•
--)->
u
.
ob
, "f_environment");

779 } i‡(!(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
))

780 
	gob
 = 
cuºít_obje˘
->
su≥r
;

781 
îr‹
("environment() of destructed object.\n");

783 i‡(
	gob
 && 
obje˘_visibÀ
(
ob
)Ë
push_obje˘
(ob);

784 
push_numbî
(0);

788 #ifde‡
F_EXEC


790 
f_exec
 
PROT
(())

792 
	gi
;

794 
	gi
 = 
ª∂a˚_öãø˘ive
((
•
 - 1)->
u
.
ob
, sp->u.ob);

797 i‡(
	g•
->
	gty≥
 =
T_OBJECT
)

798 
‰ì_obje˘
(
•
->
u
.
ob
, "f_exec:1");

799 i‡((--
	g•
)->
	gty≥
 =
T_OBJECT
)

800 
‰ì_obje˘
(
•
->
u
.
ob
, "f_exec:2");

801 
put_numbî
(
i
);

805 #ifde‡
F_EXPLODE


807 
f_ex∂ode
 
PROT
(())

809 
¨øy_t
 *
	gvec
;

811 
	gvec
 = 
ex∂ode_°rög
((
•
 - 1)->
u
.
°rög
, 
SVALUE_STRLEN
(sp-1),

812 
•
->
u
.
°rög
, 
SVALUE_STRLEN
(sp));

813 
‰ì_°rög_svÆue
(
•
--);

814 
‰ì_°rög_svÆue
(
•
);

815 
put_¨øy
(
vec
);

819 #ifde‡
F_FILE_NAME


821 
f_fûe_«me
 
PROT
(())

823 *
	gªs
;

826 
	gªs
 = (*Ë
add_¶ash
(
•
->
u
.
ob
->
«me
);

827 
‰ì_obje˘
(
•
->
u
.
ob
, "f_file_name");

828 
put_mÆlo˚d_°rög
(
ªs
);

832 #ifde‡
F_FILE_SIZE


834 
f_fûe_size
 
PROT
(())

836 
	gi
 = 
fûe_size
(
•
->
u
.
°rög
);

837 
‰ì_°rög_svÆue
(
•
);

838 
put_numbî
(
i
);

842 #ifde‡
F_FILTER


844 
f_fûãr
 
PROT
(())

846 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

848 i‡(
	g¨g
->
	gty≥
 =
T_MAPPING
Ë
fûãr_m≠pög
(
¨g
, 
°_num_¨g
);

849 i‡(
	g¨g
->
	gty≥
 =
T_STRING
Ë
fûãr_°rög
(
¨g
, 
°_num_¨g
);

850 
fûãr_¨øy
(
¨g
, 
°_num_¨g
);

854 #ifde‡
F_FIND_CALL_OUT


856 
f_föd_ˇŒ_out
 
PROT
(())

858 
	gi
;

859 #ifde‡
CALLOUT_HANDLES


860 i‡(
	g•
->
	gty≥
 =
T_NUMBER
) {

861 
i
 = 
föd_ˇŒ_out_by_h™dÀ
(
•
->
u
.
numbî
);

864 
	gi
 = 
föd_ˇŒ_out
(
cuºít_obje˘
, 
•
->
u
.
°rög
);

865 
‰ì_°rög_svÆue
(
•
);

866 #ifde‡
CALLOUT_HANDLES


869 
put_numbî
(
i
);

873 #ifde‡
F_FIND_OBJECT


875 
f_föd_obje˘
 
PROT
(())

877 
obje˘_t
 *
	gob
;

879 i‡((
	g•
--)->
	gu
.
	gnumbî
)

880 
	gob
 = 
föd_obje˘
(
•
->
u
.
°rög
);

882 
	gob
 = 
föd_obje˘2
(
•
->
u
.
°rög
);

883 
‰ì_°rög_svÆue
(
•
);

884 i‡(
	gob
 && 
obje˘_visibÀ
(
ob
)) {

886 
put_uƒe„d_unde°ed_obje˘
(
ob
, "find_object");

888 *
	g•
 = 
c⁄°0
;

892 #ifde‡
F_FUNCTION_PROFILE


895 
f_fun˘i⁄_¥ofûe
 
PROT
(())

897 
¨øy_t
 *
	gvec
;

898 
m≠pög_t
 *
	gm≠
;

899 
¥ogøm_t
 *
	g¥og
;

900 
	gnf
, 
	gj
;

901 
obje˘_t
 *
	gob
;

903 
	gob
 = 
•
->
u
.
ob
;

904 i‡(
	gob
->
	gÊags
 & 
	gO_SWAPPED
) {

905 
lﬂd_ob_‰om_sw≠
(
ob
);

907 
	g¥og
 = 
ob
->
¥og
;

908 
	gnf
 = 
¥og
->
num_fun˘i⁄s_deföed
;

909 
	gvec
 = 
Æloˇã_em±y_¨øy
(
nf
);

910 
	gj
 = 0; j < 
	gnf
; j++) {

911 
	gm≠
 = 
Æloˇã_m≠pög
(3);

912 
add_m≠pög_∑ú
(
m≠
, "ˇŒs", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
ˇŒs
);

913 
add_m≠pög_∑ú
(
m≠
, "£lf", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
£lf


914 - 
¥og
->
fun˘i⁄_èbÀ
[
j
].
chûdªn
);

915 
add_m≠pög_∑ú
(
m≠
, "chûdªn", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
chûdªn
);

916 
add_m≠pög_sh¨ed_°rög
(
m≠
, "«me", 
¥og
->
fun˘i⁄_èbÀ
[
j
].
«me
);

917 
	gvec
->
	gôem
[
j
].
	gty≥
 = 
T_MAPPING
;

918 
	gvec
->
	gôem
[
j
].
	gu
.
	gm≠
 = 
m≠
;

920 
‰ì_obje˘
(
ob
, "f_function_profile");

921 
put_¨øy
(
vec
);

925 #ifde‡
F_FUNCTION_EXISTS


927 
f_fun˘i⁄_exi°s
 
PROT
(())

929 *
	g°r
, *
	gªs
;

930 
	gl
;

931 
obje˘_t
 *
	gob
;

932 
	gÊag
 = 0;

934 i‡(
	g°_num_¨g
 > 1) {

935 i‡(
	g°_num_¨g
 > 2)

936 
	gÊag
 = (
•
--)->
u
.
numbî
;

937 
	gob
 = (
•
--)->
u
.
ob
;

938 
‰ì_obje˘
(
ob
, "f_function_exists");

940 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
) {

941 
‰ì_°rög_svÆue
(
•
);

942 *
	g•
 = 
c⁄°0
;

945 
	gob
 = 
cuºít_obje˘
;

948 
	g°r
 = 
fun˘i⁄_exi°s
(
•
->
u
.
°rög
, 
ob
, 
Êag
);

949 
‰ì_°rög_svÆue
(
•
);

950 i‡(
	g°r
) {

951 
	gl
 = 
SHARED_STRLEN
(
°r
) - 2;

952 
	gªs
 = 
√w_°rög
(
l
 + 1, "function_exists");

953 
	gªs
[0] = '/';

954 
°∫˝y
(
ªs
 + 1, 
°r
, 
l
);

955 
	gªs
[
l
 + 1] = 0;

957 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

958 
	g•
->
	gu
.
	g°rög
 = 
ªs
;

959 } *
	g•
 = 
c⁄°0
;

963 #ifde‡
F_GENERATE_SOURCE


964 
f_gíî©e_sour˚
 
PROT
(())

966 
	gi
;

968 i‡(
	g°_num_¨g
 == 2) {

969 
i
 = 
gíî©e_sour˚
(
•
 - 1, sp->
u
.
°rög
);

970 
p›_°ack
();

972 
	gi
 = 
gíî©e_sour˚
(
•
, 0);

973 
‰ì_svÆue
(
•
, "f_generate_source");

974 
put_numbî
(
i
);

978 #ifde‡
F_GET_CHAR


980 
f_gë_ch¨
 
PROT
(())

982 
svÆue_t
 *
	g¨g
;

983 
	gi
, 
	gtmp
;

984 
	gÊag
;

986 
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

987 i‡(
	g°_num_¨g
 =1 || !(
¨g
[1].
ty≥
 =
T_NUMBER
)) {

988 
tmp
 = 0;

989 
	gÊag
 = 0;

991 
	gtmp
 = 1;

992 
	g°_num_¨g
--;

993 
	gÊag
 = 
¨g
[1].
u
.
numbî
;

995 
	g°_num_¨g
--;

996 
	gi
 = 
gë_ch¨
(
¨g
, 
Êag
, 
°_num_¨g
, &¨g[1 + 
tmp
]);

997 
‰ì_svÆue
(
¨g
, "f_get_char");

998 (
	g•
 = 
¨g
)->
ty≥
 = 
T_NUMBER
;

999 
	g•
->
	gu
.
	gnumbî
 = 
i
;

1003 #ifde‡
F_GET_CONFIG


1005 
f_gë_c⁄fig
 
PROT
(())

1007 i‡(!
gë_c⁄fig_ôem
(
•
, sp))

1008 
îr‹
("BadárgumentÅo get_config()\n");

1012 #ifde‡
F_GET_DIR


1014 
f_gë_dú
 
PROT
(())

1016 
¨øy_t
 *
	gvec
;

1018 
	gvec
 = 
gë_dú
((
•
 - 1)->
u
.
°rög
, sp->u.
numbî
);

1019 
‰ì_°rög_svÆue
(--
•
);

1020 i‡(
	gvec
Ë{ 
put_¨øy
(
vec
); }

1021 *
	g•
 = 
c⁄°0
;

1025 #ifde‡
F_IMPLODE


1027 
f_im∂ode
 
PROT
(())

1029 
¨øy_t
 *
	g¨r
;

1030 
	gÊag
;

1031 
svÆue_t
 *
	g¨gs
;

1033 i‡(
	g°_num_¨g
 == 3) {

1034 
¨gs
 = (
•
 - 2);

1035 i‡(
	g¨gs
[1].
	gty≥
 =
T_STRING
)

1036 
îr‹
("ThirdárgumentÅo implode() is illegal with implode(array, string)\n");

1037 
	gÊag
 = 1;

1039 
	g¨gs
 = (
•
 - 1);

1040 
	gÊag
 = 0;

1042 
	g¨r
 = 
¨gs
->
u
.
¨r
;

1043 
check_f‹_de°r
(
¨r
);

1045 i‡(
	g¨gs
[1].
	gty≥
 =
T_STRING
) {

1047 *
°r
;

1049 
	g°r
 = 
im∂ode_°rög
(
¨r
, 
•
->
u
.
°rög
,

1050 
SVALUE_STRLEN
(
•
));

1051 
‰ì_°rög_svÆue
(
•
--);

1052 
‰ì_¨øy
(
¨r
);

1053 
put_mÆlo˚d_°rög
(
°r
);

1055 
fu≈å_t
 *
	gfu≈
 = 
¨gs
[1].
u
.
Â
;

1058 
im∂ode_¨øy
(
fu≈
, 
¨r
, 
¨gs
, 
Êag
);

1059 
	g•
--;

1060 
‰ì_fu≈
(
fu≈
);

1061 
‰ì_¨øy
(
¨r
);

1066 #ifde‡
F_IN_EDIT


1068 
f_ö_edô
 
PROT
(())

1070 *
	g‚
;

1071 
ed_buf„r_t
 *
	geb
 = 0;

1073 #ifde‡
OLD_ED


1074 i‡(
	g•
->
	gu
.
	gob
->
	göãø˘ive
)

1075 
	geb
 = 
•
->
u
.
ob
->
öãø˘ive
->
ed_buf„r
;

1077 i‡(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_IN_EDIT
)

1078 
	geb
 = 
föd_ed_buf„r
(
•
->
u
.
ob
);

1080 i‡(
	geb
 && (
	g‚
 = 
eb
->
‚ame
)) {

1081 
‰ì_obje˘
(
•
->
u
.
ob
, "f_in_edit:1");

1082 
put_mÆlo˚d_°rög
(
add_¶ash
(
‚
));

1085 
‰ì_obje˘
(
•
->
u
.
ob
, "f_in_edit:1");

1086 *
	g•
 = 
c⁄°0
;

1091 #ifde‡
F_IN_INPUT


1093 
f_ö_öput
 
PROT
(())

1095 
	gi
;

1097 
	gi
 = 
•
->
u
.
ob
->
öãø˘ive
 && sp->u.ob->öãø˘ive->
öput_to
;

1098 
‰ì_obje˘
(
•
->
u
.
ob
, "f_in_input");

1099 
put_numbî
(
i
 != 0);

1103 #ifde‡
F_INHERITS


1105 
öhîôs
 
	$P2
(
¥ogøm_t
 *, 
¥og
,Örogøm_à*, 
thï
)

1107 
j
, 
k
 = 
¥og
->
num_öhîôed
;

1108 
¥ogøm_t
 *
pg
;

1110 
j
 = 0; j < 
k
; j++) {

1111 i‡((
pg
 = 
¥og
->
öhîô
[
j
].¥ogË=
thï
)

1113 i‡(!
	`°rcmp
(
pg
->
«me
, 
thï
->name))

1115 i‡(
	`öhîôs
(
pg
, 
thï
))

1119 
	}
}

1122 
f_öhîôs
 
PROT
(())

1124 
obje˘_t
 *
	gob
, *
	gba£
;

1125 
	gi
;

1127 
	gba£
 = (
•
--)->
u
.
ob
;

1128 
	gob
 = 
föd_obje˘2
(
•
->
u
.
°rög
);

1129 i‡(!
	gob
 || (ob->
	gÊags
 & 
	gO_SWAPPED
)) {

1130 
‰ì_obje˘
(
ba£
, "f_inherits");

1131 
assign_svÆue
(
•
, &
c⁄°0
);

1134 i‡(
	gba£
->
	gÊags
 & 
	gO_SWAPPED
)

1135 
lﬂd_ob_‰om_sw≠
(
ba£
);

1136 
	gi
 = 
öhîôs
(
ba£
->
¥og
, 
ob
->prog);

1137 
‰ì_obje˘
(
ba£
, "f_inherits");

1138 
‰ì_°rög_svÆue
(
•
);

1139 
put_numbî
(
i
);

1143 #ifde‡
F_SHALLOW_INHERIT_LIST


1145 
f_shÆlow_öhîô_li°
 
PROT
(())

1147 
¨øy_t
 *
	gvec
;

1149 i‡(!(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_SWAPPED
)) {

1150 
	gvec
 = 
öhîô_li°
(
•
->
u
.
ob
);

1152 
	gvec
 = &
the_nuŒ_¨øy
;

1154 
‰ì_obje˘
(
•
->
u
.
ob
, "f_inherit_list");

1155 
put_¨øy
(
vec
);

1159 #ifde‡
F_INPUT_TO


1161 
f_öput_to
 
PROT
(())

1163 
svÆue_t
 *
	g¨g
;

1164 
	gi
, 
	gtmp
;

1165 
	gÊag
;

1167 
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

1168 i‡((
	g°_num_¨g
 =1Ë|| !(
¨g
[1].
ty≥
 =
T_NUMBER
)) {

1169 
tmp
 = 
Êag
 = 0;

1171 
	gtmp
 = 1;

1172 
	g°_num_¨g
--;

1173 
	gÊag
 = 
¨g
[1].
u
.
numbî
;

1175 
	g°_num_¨g
--;

1176 
	gi
 = 
öput_to
(
¨g
, 
Êag
, 
°_num_¨g
, &¨g[1 + 
tmp
]);

1177 
‰ì_svÆue
(
¨g
, "f_input_to");

1178 (
	g•
 = 
¨g
)->
ty≥
 = 
T_NUMBER
;

1179 
	g•
->
	gu
.
	gnumbî
 = 
i
;

1183 #ifde‡
F_INTERACTIVE


1185 
f_öãø˘ive
 
PROT
(())

1187 
	gi
;

1189 
	gi
 = (
•
->
u
.
ob
->
öãø˘ive
 != 0);

1190 
‰ì_obje˘
(
•
->
u
.
ob
, "f_interactive");

1191 
put_numbî
(
i
);

1195 #ifde‡
F_INTP


1197 
f_öç
 
PROT
(())

1199 i‡(
	g•
->
	gty≥
 =
T_NUMBER
Ë
•
->
u
.
numbî
 = 1;

1201 
‰ì_svÆue
(
•
, "f_intp");

1202 
put_numbî
(0);

1207 #ifde‡
F_FUNCTIONP


1209 
f_fun˘i⁄p
 
PROT
(())

1211 
	gi
;

1213 i‡(
	g•
->
	gty≥
 =
T_FUNCTION
) {

1214 
i
 = 
•
->
u
.
Â
->
hdr
.
ty≥
;

1215 i‡(
	g•
->
	gu
.
	gÂ
->
	ghdr
.
	g¨gs
)

1216 
	gi
 |
FP_HAS_ARGUMENTS
;

1217 i‡(!
	g•
->
	gu
.
	gÂ
->
	ghdr
.
	gow√r
 || (•->u.Â->hdr.ow√r->
	gÊags
 & 
	gO_DESTRUCTED
))

1218 
	gi
 |
FP_OWNER_DESTED
;

1219 
‰ì_fu≈
(
•
->
u
.
Â
);

1220 
put_numbî
(
i
);

1223 
assign_svÆue
(
•
, &
c⁄°0
);

1227 #ifde‡
F_KEYS


1229 
f_keys
 
PROT
(())

1231 
¨øy_t
 *
	gvec
;

1233 
	gvec
 = 
m≠pög_ödi˚s
(
•
->
u
.
m≠
);

1234 
‰ì_m≠pög
(
•
->
u
.
m≠
);

1235 
put_¨øy
(
vec
);

1239 #ifde‡
F_VALUES


1241 
f_vÆues
 
PROT
(())

1243 
¨øy_t
 *
	gvec
;

1245 
	gvec
 = 
m≠pög_vÆues
(
•
->
u
.
m≠
);

1246 
‰ì_m≠pög
(
•
->
u
.
m≠
);

1247 
put_¨øy
(
vec
);

1251 #ifde‡
F_LINK


1253 
f_lök
 
PROT
(())

1255 
svÆue_t
 *
	gªt
, *
	g¨g
;

1256 
	gi
;

1258 
	g¨g
 = 
•
;

1259 
push_svÆue
(
¨g
 - 1);

1260 
push_svÆue
(
¨g
);

1261 
	gªt
 = 
≠∂y_ma°î_ob
(
APPLY_VALID_LINK
, 2);

1262 i‡(
MASTER_APPROVED
(
ªt
))

1263 
	gi
 = 
do_ª«me
((
•
 - 1)->
u
.
°rög
, sp->u.°rög, 
F_LINK
);

1265 
	gi
 = 0;

1266 (--
	g•
)->
	gty≥
 = 
T_NUMBER
;

1267 
	g•
->
	gu
.
	gnumbî
 = 
i
;

1268 
	g•
->
	gsubty≥
 = 0;

1272 #ifde‡
F_LOWER_CASE


1274 
f_lowî_ˇ£
 
PROT
(())

1276 *
	g°r
;

1278 
	g°r
 = 
•
->
u
.
°rög
;

1280 ; *
	g°r
; str++) {

1281 i‡(
uisuµî
(*
°r
)) {

1282 
	gl
 = 
°r
 - 
•
->
u
.
°rög
;

1283 
u∆ök_°rög_svÆue
(
•
);

1284 
	g°r
 = 
•
->
u
.
°rög
 + 
l
;

1285 *
	g°r
 = 
tﬁowî
(()*
°r
);

1286 
	g°r
++; *str; str++) {

1287 i‡(
uisuµî
(*
°r
))

1288 *
	g°r
 = 
tﬁowî
(()*
°r
);

1296 #ifde‡
F_LPC_INFO


1297 
f_Õc_öfo
 
PROT
(())

1299 
outbuf„r_t
 
	gout
;

1301 
öãrÁ˚_t
 **
	gp
 = 
öãrÁ˚
;

1302 
obje˘_t
 *
	gob
;

1304 
outbuf_zîo
(&
out
);

1305 
outbuf_addv
(&
out
, "%30s Loaded Using compiledÖrogram\n", "Program");

1306 *
	gp
) {

1307 
outbuf_addv
(&
out
, "%30s: ", (*
p
)->
‚ame
);

1308 
	gob
 = 
lookup_obje˘_hash
((*
p
)->
‚ame
);

1309 i‡(
	gob
) {

1310 i‡(
	gob
->
	gÊags
 & 
	gO_COMPILED_PROGRAM
) {

1311 
outbuf_add
(&
out
, " No\n");

1312 } i‡(
	gob
->
	gÊags
 & 
	gO_SWAPPED
) {

1313 
outbuf_add
(&
out
, " Yes Swapped\n");

1314 } i‡(
	gob
->
	g¥og
->
	g¥ogøm_size
 == 0) {

1315 
outbuf_add
(&
out
, " Yes Yes\n");

1317 
outbuf_add
(&
out
, " Yes No\n");

1320 
outbuf_add
(&
out
, "Something REALLY wierd happened;ÇoÑecord ofÅhe object.\n");

1322 
	gp
++;

1324 
outbuf_push
(&
out
);

1328 #ifde‡
F_MALLOC_STATUS


1329 
f_mÆloc_°©us
 
PROT
(())

1331 
outbuf„r_t
 
	gob
;

1333 
outbuf_zîo
(&
ob
);

1335 #ifde‡
BSDMALLOC


1336 
outbuf_add
(&
ob
, "Using BSD malloc");

1338 #ifde‡
SMALLOC


1339 
outbuf_add
(&
ob
, "Using Smalloc");

1341 #ifde‡
SYSMALLOC


1342 
outbuf_add
(&
ob
, "Using system malloc");

1344 #ifde‡
DEBUGMALLOC


1345 
outbuf_add
(&
ob
, ", wrapped with debugmalloc");

1347 #ifde‡
WRAPPEDMALLOC


1348 
outbuf_add
(&
ob
, ", wrapped with wrappedmalloc");

1350 
outbuf_add
(&
ob
, ".\n");

1351 #ifde‡
DO_MSTATS


1352 
show_m°©s
(&
ob
, "malloc_status()");

1354 #i‡(
deföed
(
WRAPPEDMALLOC
Ë|| deföed(
DEBUGMALLOC
))

1355 
dump_mÆloc_d©a
(&
ob
);

1357 
outbuf_push
(&
ob
);

1361 #ifde‡
F_MAP_DELETE


1363 
f_m≠_dñëe
 
PROT
(())

1365 
m≠pög_dñëe
((
•
 - 1)->
u
.
m≠
, sp);

1366 
p›_°ack
();

1367 #i‚de‡
COMPAT_32


1368 
‰ì_m≠pög
((
•
--)->
u
.
m≠
);

1373 #ifde‡
F_MAPP


1375 
f_m≠p
 
PROT
(())

1377 i‡(
	g•
->
	gty≥
 =
T_MAPPING
) {

1378 
‰ì_m≠pög
(
•
->
u
.
m≠
);

1379 *
	g•
 = 
c⁄°1
;

1381 
‰ì_svÆue
(
•
, "f_mapp");

1382 *
	g•
 = 
c⁄°0
;

1387 #ifde‡
F_MAP


1389 
f_m≠
 
PROT
(())

1391 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

1393 i‡(
	g¨g
->
	gty≥
 =
T_MAPPING
Ë
m≠_m≠pög
(
¨g
, 
°_num_¨g
);

1394 i‡(
	g¨g
->
	gty≥
 =
T_ARRAY
Ë
m≠_¨øy
(
¨g
, 
°_num_¨g
);

1395 
m≠_°rög
(
¨g
, 
°_num_¨g
);

1399 #ifde‡
F_MASTER


1401 
f_ma°î
 
PROT
(())

1403 i‡(!
	gma°î_ob
)

1404 
push_numbî
(0);

1406 
push_obje˘
(
ma°î_ob
);

1422 #ifde‡
F_MATCH_PATH


1424 
f_m©ch_∑th
 
PROT
(())

1426 
svÆue_t
 *
	gvÆue
;

1427 *
	g§c
, *
	gd°
;

1428 
svÆue_t
 *
	gnvÆue
;

1429 
m≠pög_t
 *
	gm≠
;

1430 *
	gtmp°r
;

1432 
	gvÆue
 = &
c⁄°0u
;

1434 
	gtmp°r
 = 
DMALLOC
(
SVALUE_STRLEN
(
•
Ë+ 1, 
TAG_STRING
, "match_path");

1436 
	g§c
 = 
•
->
u
.
°rög
;

1437 
	gd°
 = 
tmp°r
;

1439 *
	g§c
 != '\0') {

1440 *
§c
 != '/' && *src != '\0')

1441 *
d°
++ = *
§c
++;

1442 i‡(*
	g§c
 == '/') {

1443 *++
§c
 == '/');

1444 i‡(*
	g§c
 !'\0' || 
d°
 =
tmp°r
)

1445 *
d°
++ = '/';

1447 *
	gd°
 = '\0';

1448 
	gnvÆue
 = 
föd_°rög_ö_m≠pög
((
•
 - 1)->
u
.
m≠
, 
tmp°r
);

1450 i‡(
	gnvÆue
 !&
c⁄°0u
)

1451 
vÆue
 = 
nvÆue
;

1454 
FREE
(
tmp°r
);

1457 
‰ì_°rög_svÆue
(
•
--);

1458 
	gm≠
 = 
•
->
u
.
m≠
;

1459 
assign_svÆue_no_‰ì
(
•
, 
vÆue
);

1460 
‰ì_m≠pög
(
m≠
);

1464 #ifde‡
F_MEMBER_ARRAY


1466 
f_membî_¨øy
 
PROT
(())

1468 
¨øy_t
 *
	gv
;

1469 
	gi
;

1471 i‡(
	g°_num_¨g
 > 2) {

1472 
	gi
 = (
•
--)->
u
.
numbî
;

1473 i‡(
	gi
<0Ë
bad_¨g
(3, 
F_MEMBER_ARRAY
);

1474 } 
	gi
 = 0;

1476 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

1477 *
ªs
;

1478 
CHECK_TYPES
(
•
-1, 
T_NUMBER
, 1, 
F_MEMBER_ARRAY
);

1479 i‡(
	gi
 > 
SVALUE_STRLEN
(
•
)Ë
îr‹
("IndexÅo start search from in member_array() is > stringÜength.\n");

1480 i‡((
	gªs
 = 
°rchr
(
•
->
u
.
°rög
 + 
i
, (•-1)->u.
numbî
)))

1481 
	gi
 = 
ªs
 - 
•
->
u
.
°rög
;

1483 
	gi
 = -1;

1484 
‰ì_°rög_svÆue
(
•
--);

1486 
	gsize
 = (
v
 = 
•
->
u
.
¨r
)->
size
;

1487 
svÆue_t
 *
	gsv
;

1488 
svÆue_t
 *
	gföd
;

1489 
	gÊí
;

1491 
	gföd
 = (
•
 - 1);

1493 i‡(
	gföd
->
	gty≥
 =
T_STRING
) {

1495 i‡(
föd
->
subty≥
 & 
STRING_COUNTED
)

1496 
Êí
 = 
MSTR_SIZE
(
föd
->
u
.
°rög
);

1497 
	gÊí
 = 0;

1500 ; 
	gi
 < 
	gsize
; i++) {

1501 
	gföd
->
	gty≥
|(
	gsv

v
->
ôem
 + 
i
)->
ty≥
) {

1502 
T_STRING
:

1503 i‡(
Êí
 && (
sv
->
subty≥
 & 
STRING_COUNTED
)

1504 && 
Êí
 !
MSTR_SIZE
(
sv
->
u
.
°rög
))

1506 i‡(
°rcmp
(
föd
->
u
.
°rög
, 
sv
->u.string)) ;

1508 
	gT_NUMBER
:

1509 i‡(
föd
->
u
.
numbî
 =
sv
->u.number) ;

1511 
	gT_REAL
:

1512 i‡(
föd
->
u
.
ªÆ
 =
sv
->u.real) ;

1514 
	gT_ARRAY
:

1515 i‡(
föd
->
u
.
¨r
 =
sv
->u.arr) ;

1517 
	gT_OBJECT
:

1519 i‡(
sv
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
) {

1520 
assign_svÆue
(
sv
, &
c⁄°0u
);

1523 i‡(
	gföd
->
	gu
.
	gob
 =
sv
->
u
.
ob
) ;

1526 
	gT_MAPPING
:

1527 i‡(
föd
->
u
.
m≠
 =
sv
->u.map) ;

1529 
	gT_FUNCTION
:

1530 i‡(
föd
->
u
.
Â
 =
sv
->u.fp) ;

1532 #i‚de‡
NO_BUFFER_TYPE


1533 
	gT_BUFFER
:

1534 i‡(
föd
->
u
.
buf
 =
sv
->u.buf) ;

1538 i‡(
sv
->
ty≥
 =
T_OBJECT
 && (sv->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1539 
assign_svÆue
(
sv
, &
c⁄°0u
);

1540 i‡(
	gföd
->
	gty≥
 =
T_NUMBER
 && !
föd
->
u
.
numbî
) ;

1546 i‡(
	gi
 =
size
)

1547 
i
 = -1;

1548 
‰ì_¨øy
(
v
);

1549 
‰ì_svÆue
(
föd
, "f_member_array");

1550 
	g•
--;

1552 
put_numbî
(
i
);

1556 #ifde‡
F_MESSAGE


1558 
f_mesßge
 
PROT
(())

1560 
¨øy_t
 *
	gu£
, *
	gavoid
;

1561 
	gnum_¨g
 = 
°_num_¨g
;

1562 
svÆue_t
 *
	g¨gs
;

1564 
	g¨gs
 = 
•
 - 
num_¨g
 + 1;

1565 
	g¨gs
[2].
	gty≥
) {

1566 
	gT_OBJECT
:

1567 
T_STRING
:

1568 
u£
 = 
Æloˇã_em±y_¨øy
(1);

1569 
	gu£
->
	gôem
[0] = 
¨gs
[2];

1570 
	g¨gs
[2].
	gty≥
 = 
T_ARRAY
;

1571 
	g¨gs
[2].
	gu
.
	g¨r
 = 
u£
;

1573 
	gT_ARRAY
:

1574 
u£
 = 
¨gs
[2].
u
.
¨r
;

1576 
	gT_NUMBER
:

1577 i‡(
¨gs
[2].
u
.
numbî
 == 0) {

1578 
Àn
 = 
SVALUE_STRLEN
(
¨gs
 + 1);

1585 i‡(
	gÀn
 > 
	gLARGEST_PRINTABLE_STRING
)

1586 
îr‹
("Printable stringsÜimitedÅoÜength of %d.\n",

1587 
LARGEST_PRINTABLE_STRING
);

1589 
add_mesßge
(
comm™d_givî
, 
¨gs
[1].
u
.
°rög
, 
Àn
);

1590 
p›_n_ñems
(
num_¨g
);

1594 
bad_¨gumít
(&
¨gs
[2], 
T_OBJECT
 | 
T_STRING
 | 
T_ARRAY
 | 
T_NUMBER
,

1595 3, 
F_MESSAGE
);

1597 i‡(
	gnum_¨g
 == 4) {

1598 
¨gs
[3].
ty≥
) {

1599 
T_OBJECT
:

1600 
avoid
 = 
Æloˇã_em±y_¨øy
(1);

1601 
	gavoid
->
	gôem
[0] = 
¨gs
[3];

1602 
	g¨gs
[3].
	gty≥
 = 
T_ARRAY
;

1603 
	g¨gs
[3].
	gu
.
	g¨r
 = 
avoid
;

1605 
	gT_ARRAY
:

1606 
avoid
 = 
¨gs
[3].
u
.
¨r
;

1609 
avoid
 = &
the_nuŒ_¨øy
;

1612 
	gavoid
 = &
the_nuŒ_¨øy
;

1613 
do_mesßge
(&
¨gs
[0], &¨gs[1], 
u£
, 
avoid
, 1);

1614 
p›_n_ñems
(
num_¨g
);

1618 #ifde‡
F_MKDIR


1620 
f_mkdú
 
PROT
(())

1622 *
	g∑th
;

1624 
	g∑th
 = 
check_vÆid_∑th
(
•
->
u
.
°rög
, 
cuºít_obje˘
, "mkdir", 1);

1625 i‡(!
	g∑th
 || 
OS_mkdú
(
∑th
, 0770) == -1) {

1626 
‰ì_°rög_svÆue
(
•
);

1627 *
	g•
 = 
c⁄°0
;

1630 
‰ì_°rög_svÆue
(
•
);

1631 *
	g•
 = 
c⁄°1
;

1636 #ifde‡
F_MOVE_OBJECT


1638 
f_move_obje˘
 
PROT
(())

1640 
obje˘_t
 *
	go1
, *
	go2
;

1643 i‡(
	g•
->
	gty≥
 =
T_OBJECT
)

1644 
o2
 = 
•
->
u
.
ob
;

1646 i‡(!(
	go2
 = 
föd_obje˘
(
•
->
u
.
°rög
)Ë|| !
obje˘_visibÀ
(
o2
))

1647 
îr‹
("move_object failed: couldÇot find destination\n");

1650 i‡((
	go1
 = 
cuºít_obje˘
)->
Êags
 & 
O_DESTRUCTED
)

1651 
îr‹
("move_object(): can't moveá destructed object\n");

1653 
move_obje˘
(
o1
, 
o2
);

1654 
p›_°ack
();

1658 #ifde‡
F_MUD_STATUS


1659 
f_mud_°©us
 
PROT
(())

1661 
	gtŸ
, 
	gªs
, 
	gvîbo£
 = 0;

1662 
outbuf„r_t
 
	gob
;

1664 
outbuf_zîo
(&
ob
);

1665 
	gvîbo£
 = (
•
--)->
u
.
numbî
;

1667 i‡(
	gª£rved_¨ó
)

1668 
	gªs
 = 
RESERVED_SIZE
;

1670 
	gªs
 = 0;

1672 i‡(
	gvîbo£
) {

1673 
	gdú_buf
[1024];

1674 
FILE
 *
	gã°Â
;

1676 i‡((
	gã°Â
 = 
f›í
(".mudos_test_file", "w"))) {

1677 
f˛o£
(
ã°Â
);

1678 
outbuf_add
(&
ob
, "Open-file-test succeeded.\n");

1679 
u∆ök
(".mudos_test_file");

1681 
outbuf_addv
(&
ob
, "O≥¿fûêã° faûed: %s\n", 
p‹t_°ªº‹
(
î∫o
));

1684 
outbuf_addv
(&
ob
, "current working directory: %s\n\n",

1685 
gë_cuºít_dú
(
dú_buf
, 1024));

1686 
outbuf_add
(&
ob
, "add_message statistics\n");

1687 
outbuf_add
(&
ob
, "------------------------------\n");

1688 
outbuf_addv
(&
ob
, "CallsÅoádd_message: %d Packets: %d AverageÖacket size: %f\n\n",

1689 
add_mesßge_ˇŒs
, 
öë_∑ckës
, (Ë
öë_vﬁume
 / inet_packets);

1691 
°©_livög_obje˘s
(&
ob
);

1693 #ifde‡
F_CACHE_STATS


1694 
¥öt_ˇche_°©s
(&
ob
);

1695 
outbuf_add
(&
ob
, "\n");

1697 
¥öt_sw≠_°©s
(&
ob
);

1698 
outbuf_add
(&
ob
, "\n");

1700 
	gtŸ
 = 
show_ŸabÀ_°©us
(&
ob
, 
vîbo£
);

1701 
outbuf_add
(&
ob
, "\n");

1702 
	gtŸ
 +
hóπ_bót_°©us
(&
ob
, 
vîbo£
);

1703 
outbuf_add
(&
ob
, "\n");

1704 
	gtŸ
 +
add_°rög_°©us
(&
ob
, 
vîbo£
);

1705 
outbuf_add
(&
ob
, "\n");

1706 
	gtŸ
 +
¥öt_ˇŒ_out_ußge
(&
ob
, 
vîbo£
);

1709 
outbuf_addv
(&
ob
, "Síãn˚s:\t\t\t%8d %8d\n", 
tŸ_Æloc_£¡í˚
,

1710 
tŸ_Æloc_£¡í˚
 * (
£¡í˚_t
));

1711 #i‚de‡
DEBUG


1712 
outbuf_addv
(&
ob
, "Objects:\t\t\t%8d %8d\n",

1713 
tŸ_Æloc_obje˘
, 
tŸ_Æloc_obje˘_size
);

1715 
outbuf_addv
(&
ob
, "Objects:\t\t\t%8d %8d (%8d dangling)\n",

1716 
tŸ_Æloc_obje˘
, 
tŸ_Æloc_obje˘_size
, 
tŸ_d™glög_obje˘
);

1718 
outbuf_addv
(&
ob
, "Prog blocks:\t\t\t%8d %8d\n",

1719 
tŸÆ_num_¥og_blocks
, 
tŸÆ_¥og_block_size
);

1720 #ifde‡
ARRAY_STATS


1721 
outbuf_addv
(&
ob
, "Aºays:\t\t\t\t%8d %8d\n", 
num_¨øys
,

1722 
tŸÆ_¨øy_size
);

1724 
outbuf_add
(&
ob
, "<Array statistics disabled,Ço informationávailable>\n");

1726 
outbuf_addv
(&
ob
, "M≠pögs:\t\t\t%8d %8d\n", 
num_m≠pögs
,

1727 
tŸÆ_m≠pög_size
);

1728 
outbuf_addv
(&
ob
, "M≠pögs“odes):\t\t%8d\n", 
tŸÆ_m≠pög_nodes
);

1729 
outbuf_addv
(&
ob
, "I¡îa˘ives:\t\t\t%8d %8d\n", 
num_u£r
,

1730 
num_u£r
 * (
öãø˘ive_t
));

1732 
	gtŸ
 = 
show_ŸabÀ_°©us
(&
ob
, 
vîbo£
) +

1733 
hóπ_bót_°©us
(&
ob
, 
vîbo£
) +

1734 
add_°rög_°©us
(&
ob
, 
vîbo£
) +

1735 
¥öt_ˇŒ_out_ußge
(&
ob
, 
vîbo£
);

1738 
	gtŸ
 +
tŸÆ_¥og_block_size
 +

1739 #ifde‡
ARRAY_STATS


1740 
tŸÆ_¨øy_size
 +

1742 
tŸÆ_m≠pög_size
 +

1743 
tŸ_Æloc_£¡í˚
 * (
£¡í˚_t
) +

1744 
tŸ_Æloc_obje˘_size
 +

1745 
num_u£r
 * (
öãø˘ive_t
) +

1746 
ªs
;

1748 i‡(!
	gvîbo£
) {

1749 
outbuf_add
(&
ob
, "\t\t\t\t\t --------\n");

1750 
outbuf_addv
(&
ob
, "TŸÆ:\t\t\t\t\à%8d\n", 
tŸ
);

1752 
outbuf_push
(&
ob
);

1756 #ifde‡
F_OBJECTP


1758 
f_obje˘p
 
PROT
(())

1760 i‡(
	g•
->
	gty≥
 =
T_OBJECT
 && !(
•
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1761 
‰ì_obje˘
(
•
->
u
.
ob
, "f_objectp");

1762 *
	g•
 = 
c⁄°1
;

1764 
‰ì_svÆue
(
•
, "f_objectp");

1765 *
	g•
 = 
c⁄°0
;

1770 #ifde‡
F_OPCPROF


1772 
f_›˝rof
 
PROT
(())

1774 i‡(
	g°_num_¨g
 == 1) {

1775 
›cdump
(
•
->
u
.
°rög
);

1776 
‰ì_°rög_svÆue
(
•
--);

1778 
›cdump
("/OPCPROF");

1782 #ifde‡
F_ORIGIN


1784 
f_‹igö
 
PROT
(())

1786 
push_c⁄°™t_°rög
(
‹igö_«me
(
ˇŒî_ty≥
));

1790 #ifde‡
F_POINTERP


1792 
f_poöãΩ
 
PROT
(())

1794 i‡(
	g•
->
	gty≥
 =
T_ARRAY
) {

1795 
‰ì_¨øy
(
•
->
u
.
¨r
);

1796 *
	g•
 = 
c⁄°1
;

1798 
‰ì_svÆue
(
•
, "f_pointerp");

1799 *
	g•
 = 
c⁄°0
;

1804 #ifde‡
F_PRESENT


1806 
f_¥e£¡
 
PROT
(())

1808 
	gnum_¨g
 = 
°_num_¨g
;

1809 
svÆue_t
 *
	g¨g
 = 
•
 - 
num_¨g
 + 1;

1810 
obje˘_t
 *
	gob
;

1812 #i‡!
deföed
(
NO_RESETS
Ë&& deföed(
LAZY_RESETS
)

1813 i‡(
	gnum_¨g
 == 2) {

1814 
åy_ª£t
(
¨g
[1].
u
.
ob
);

1817 
	gob
 = 
obje˘_¥e£¡
(
¨g
, 
num_¨g
 =1 ? 0 :árg[1].
u
.
ob
);

1818 
p›_n_ñems
(
num_¨g
);

1819 i‡(
	gob
 && 
obje˘_visibÀ
(
ob
)Ë
push_obje˘
(ob);

1820 
push_numbî
(0);

1824 #ifde‡
F_PREVIOUS_OBJECT


1826 
f_¥evious_obje˘
 
PROT
(())

1828 
c⁄åﬁ_°ack_t
 *
	gp
;

1829 
	gi
;

1830 
obje˘_t
 *
	gob
;

1832 i‡((
	gi
 = 
•
->
u
.
numbî
) > 0) {

1833 i‡(
i
 >
CFG_MAX_CALL_DEPTH
) {

1834 
•
->
u
.
numbî
 = 0;

1837 
	gob
 = 0;

1838 
	gp
 = 
c•
;

1840 i‡((
	gp
->
	g‰ameköd
 & 
	gFRAME_OB_CHANGE
Ë&& !(--
	gi
)) {

1841 
	gob
 = 
p
->
¥ev_ob
;

1844 } --
	gp
 >
c⁄åﬁ_°ack
);

1845 } i‡(
	gi
 == -1) {

1846 
¨øy_t
 *
v
;

1848 
	gi
 = 
¥evious_ob
 ? 1 : 0;

1849 
	gp
 = 
c•
;

1851 i‡((
	gp
->
	g‰ameköd
 & 
	gFRAME_OB_CHANGE
Ë&&Ö->
	g¥ev_ob
Ë
	gi
++;

1852 } --
	gp
 >
c⁄åﬁ_°ack
);

1853 
	gv
 = 
Æloˇã_em±y_¨øy
(
i
);

1854 
	gp
 = 
c•
;

1855 i‡(
	g¥evious_ob
) {

1856 i‡(!(
	g¥evious_ob
->
	gÊags
 & 
	gO_DESTRUCTED
)) {

1857 
	gv
->
	gôem
[0].
	gty≥
 = 
T_OBJECT
;

1858 
	gv
->
	gôem
[0].
	gu
.
	gob
 = 
¥evious_ob
;

1859 
add_ªf
(
¥evious_ob
, "previous_object(-1)");

1860 } 
	gv
->
	gôem
[0] = 
c⁄°0u
;

1861 
	gi
 = 1;

1862 } 
	gi
 = 0;

1864 i‡((
	gp
->
	g‰ameköd
 & 
	gFRAME_OB_CHANGE
Ë&& (
	gob
 = 
p
->
¥ev_ob
)) {

1865 i‡(!(
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1866 
v
->
ôem
[
i
].
ty≥
 = 
T_OBJECT
;

1867 
	gv
->
	gôem
[
i
].
	gu
.
	gob
 = 
ob
;

1868 
add_ªf
(
ob
, "previous_object(-1)");

1869 } 
	gv
->
	gôem
[
i
] = 
c⁄°0u
;

1870 
	gi
++;

1872 } --
	gp
 >
c⁄åﬁ_°ack
);

1873 
put_¨øy
(
v
);

1875 } i‡(
	gi
 < 0) {

1876 
îr‹
("IllegalÇegativeárgumentÅoÖrevious_object()\n");

1878 
	gob
 = 
¥evious_ob
;

1879 i‡(!
	gob
 || (ob->
	gÊags
 & 
	gO_DESTRUCTED
))

1880 
	g•
->
	gu
.
	gnumbî
 = 0;

1882 
put_uƒe„d_unde°ed_obje˘
(
ob
, "previous_object()");

1887 #ifde‡
F_PRINTF


1889 
f_¥ötf
 
PROT
(())

1891 
	gnum_¨g
 = 
°_num_¨g
;

1892 *
	gªt
;

1894 i‡(
	gcomm™d_givî
) {

1895 
	gªt
 = 
°rög_¥öt_f‹m©ãd
((
•
 - 
num_¨g
 + 1)->
u
.
°rög
,

1896 
num_¨g
 - 1, 
•
 -Çum_arg + 2);

1897 i‡(
	gªt
) {

1898 
ãŒ_obje˘
(
comm™d_givî
, 
ªt
, 
COUNTED_STRLEN
(ret));

1899 
FREE_MSTR
(
ªt
);

1903 
p›_n_ñems
(
num_¨g
);

1907 #ifde‡
F_PROCESS_STRING


1909 
f_¥o˚ss_°rög
 
PROT
(())

1911 *
	g°r
;

1913 
	g°r
 = 
¥o˚ss_°rög
(
•
->
u
.
°rög
);

1914 i‡(
	g°r
 !
•
->
u
.
°rög
) {

1915 
‰ì_°rög_svÆue
(
•
);

1916 
put_mÆlo˚d_°rög
(
°r
);

1921 #ifde‡
F_PROCESS_VALUE


1923 
f_¥o˚ss_vÆue
 
PROT
(())

1925 
svÆue_t
 *
	gªt
;

1927 
	gªt
 = 
¥o˚ss_vÆue
(
•
->
u
.
°rög
);

1928 
‰ì_°rög_svÆue
(
•
);

1929 i‡(
	gªt
Ë
assign_svÆue_no_‰ì
(
•
, 
ªt
);

1930 *
	g•
 = 
c⁄°0
;

1934 #ifde‡
F_QUERY_ED_MODE


1936 
f_quîy_ed_mode
 
PROT
(())

1942 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_IN_EDIT
) {

1943 
push_numbî
(
obje˘_ed_mode
(
cuºít_obje˘
));

1945 
push_numbî
(-1);

1949 #ifde‡
F_QUERY_HOST_NAME


1951 
f_quîy_ho°_«me
 
PROT
(())

1953 *
	gtmp
;

1955 i‡((
	gtmp
 = 
quîy_ho°_«me
()))

1956 
push_c⁄°™t_°rög
(
tmp
);

1958 
push_numbî
(0);

1962 #ifde‡
F_QUERY_IDLE


1964 
f_quîy_idÀ
 
PROT
(())

1966 
	gi
;

1968 
	gi
 = 
quîy_idÀ
(
•
->
u
.
ob
);

1969 
‰ì_obje˘
(
•
->
u
.
ob
, "f_query_idle");

1970 
put_numbî
(
i
);

1974 #ifde‡
F_QUERY_IP_NAME


1976 
f_quîy_ù_«me
 
PROT
(())

1978 *
	gtmp
;

1980 
	gtmp
 = 
quîy_ù_«me
(
°_num_¨g
 ? 
•
->
u
.
ob
 : 0);

1981 i‡(
	g°_num_¨g
Ë
‰ì_obje˘
((
•
--)->
u
.
ob
, "f_query_ip_name");

1982 i‡(!
	gtmp
Ë
push_numbî
(0);

1983 
sh¨e_™d_push_°rög
(
tmp
);

1987 #ifde‡
F_QUERY_IP_NUMBER


1989 
f_quîy_ù_numbî
 
PROT
(())

1991 *
	gtmp
;

1993 
	gtmp
 = 
quîy_ù_numbî
(
°_num_¨g
 ? 
•
->
u
.
ob
 : 0);

1994 i‡(
	g°_num_¨g
Ë
‰ì_obje˘
((
•
--)->
u
.
ob
, "f_query_ip_number");

1995 i‡(!
	gtmp
Ë
push_numbî
(0);

1996 
sh¨e_™d_push_°rög
(
tmp
);

2000 #ifde‡
F_QUERY_LOAD_AVERAGE


2002 
f_quîy_lﬂd_avîage
 
PROT
(())

2004 
c›y_™d_push_°rög
(
quîy_lﬂd_av
());

2008 #ifde‡
F_QUERY_PRIVS


2010 
f_quîy_¥ivs
 
PROT
(())

2012 
obje˘_t
 *
	gob
;

2014 
	gob
 = 
•
->
u
.
ob
;

2015 i‡(
	gob
->
	g¥ivs
 !
NULL
) {

2016 
‰ì_obje˘
(
ob
, "f_query_privs");

2017 
	g•
->
	gty≥
 = 
T_STRING
;

2018 
	g•
->
	gu
.
	g°rög
 = 
make_sh¨ed_°rög
(
ob
->
¥ivs
);

2019 
	g•
->
	gsubty≥
 = 
STRING_SHARED
;

2021 
‰ì_obje˘
(
ob
, "f_query_privs");

2022 *
	g•
 = 
c⁄°0
;

2027 #ifde‡
F_QUERY_SNOOPING


2029 
f_quîy_¢o›ög
 
PROT
(())

2031 
obje˘_t
 *
	gob
;

2033 
	gob
 = 
quîy_¢o›ög
(
•
->
u
.
ob
);

2034 
‰ì_obje˘
(
•
->
u
.
ob
, "f_query_snooping");

2035 i‡(
	gob
Ë{ 
put_uƒe„d_unde°ed_obje˘
(
ob
, "query_snooping"); }

2036 *
	g•
 = 
c⁄°0
;

2040 #ifde‡
F_QUERY_SNOOP


2042 
f_quîy_¢o›
 
PROT
(())

2044 
obje˘_t
 *
	gob
;

2046 
	gob
 = 
quîy_¢o›
(
•
->
u
.
ob
);

2047 
‰ì_obje˘
(
•
->
u
.
ob
, "f_query_snoop");

2048 i‡(
	gob
Ë{ 
put_uƒe„d_unde°ed_obje˘
(
ob
, "query_snoop"); }

2049 *
	g•
 = 
c⁄°0
;

2053 #ifde‡
F_RANDOM


2055 
f_øndom
 
PROT
(())

2057 i‡(
	g•
->
	gu
.
	gnumbî
 <= 0) {

2058 
•
->
u
.
numbî
 = 0;

2061 
	g•
->
	gu
.
	gnumbî
 = 
øndom_numbî
(
•
->
u
.
numbî
);

2065 #ifde‡
F_READ_BYTES


2067 
f_ªad_byãs
 
PROT
(())

2069 *
	g°r
;

2070 
	g°¨t
 = 0, 
	gÀn
 = 0, 
	gæí
 = 0, 
	gnum_¨g
 = 
°_num_¨g
;

2071 
svÆue_t
 *
	g¨g
;

2073 
	g¨g
 = 
•
 - 
num_¨g
 + 1;

2074 i‡(
	gnum_¨g
 > 1)

2075 
	g°¨t
 = 
¨g
[1].
u
.
numbî
;

2076 i‡(
	gnum_¨g
 == 3) {

2077 
Àn
 = 
¨g
[2].
u
.
numbî
;

2079 
	g°r
 = 
ªad_byãs
(
¨g
[0].
u
.
°rög
, 
°¨t
, 
Àn
, &
æí
);

2080 
p›_n_ñems
(
num_¨g
);

2081 i‡(
	g°r
 == 0)

2082 
push_numbî
(0);

2084 
push_mÆlo˚d_°rög
(
°r
);

2089 #ifde‡
F_READ_BUFFER


2091 
f_ªad_buf„r
 
PROT
(())

2093 *
	g°r
;

2094 
	g°¨t
 = 0, 
	gÀn
 = 0, 
	gæí
 = 0, 
	gnum_¨g
 = 
°_num_¨g
;

2095 
	g‰om_fûe
 = 0;

2096 
svÆue_t
 *
	g¨g
 = 
•
 - 
num_¨g
 + 1;

2098 i‡(
	gnum_¨g
 > 1) {

2099 
	g°¨t
 = 
¨g
[1].
u
.
numbî
;

2100 i‡(
	gnum_¨g
 == 3) {

2101 
Àn
 = 
¨g
[2].
u
.
numbî
;

2104 i‡(
	g¨g
[0].
	gty≥
 =
T_STRING
) {

2105 
‰om_fûe
 = 1;

2106 
	g°r
 = 
ªad_byãs
(
¨g
[0].
u
.
°rög
, 
°¨t
, 
Àn
, &
æí
);

2108 
	g°r
 = 
ªad_buf„r
(
¨g
[0].
u
.
buf
, 
°¨t
, 
Àn
, &
æí
);

2110 
p›_n_ñems
(
num_¨g
);

2111 i‡(
	g°r
 == 0) {

2112 
push_numbî
(0);

2113 } i‡(
	g‰om_fûe
) {

2114 
buf„r_t
 *
	gbuf
;

2116 
	gbuf
 = 
Æloˇã_buf„r
(
æí
);

2117 
mem˝y
(
buf
->
ôem
, 
°r
, 
æí
);

2118 
	gSTACK_INC
;

2119 
	g•
->
	gty≥
 = 
T_BUFFER
;

2120 
	g•
->
	gu
.
	gbuf
 = 
buf
;

2121 
FREE_MSTR
(
°r
);

2123 
push_mÆlo˚d_°rög
(
°r
);

2128 #ifde‡
F_READ_FILE


2130 
f_ªad_fûe
 
PROT
(())

2132 *
	g°r
;

2133 
	g°¨t
,
	gÀn
;

2135 i‡(
	g°_num_¨g
 == 3) {

2136 
Àn
 = (
•
--)->
u
.
numbî
;

2137 } 
	gÀn
 = 0;

2138 i‡(
	g°_num_¨g
 > 1)

2139 
	g°¨t
 = (
•
--)->
u
.
numbî
;

2140 
	g°¨t
 = 0;

2142 
	g°r
 = 
ªad_fûe
(
•
->
u
.
°rög
, 
°¨t
, 
Àn
);

2143 
‰ì_°rög_svÆue
(
•
);

2144 i‡(!
	g°r
Ë*
	g•
 = 
c⁄°0
;

2145 { 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
; sp->
	gu
.
	g°rög
 = 
°r
; }

2149 #ifde‡
F_RECEIVE


2151 
f_ª˚ive
 
PROT
(())

2153 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

2154 i‡(
cuºít_obje˘
->
öãø˘ive
) {

2155 
Àn
 = 
SVALUE_STRLEN
(
•
);

2157 i‡(
	gÀn
 > 
	gLARGEST_PRINTABLE_STRING
)

2158 
îr‹
("Printable stringsÜimitedÅoÜength of %d.\n",

2159 
LARGEST_PRINTABLE_STRING
);

2161 
add_mesßge
(
cuºít_obje˘
, 
•
->
u
.
°rög
, 
Àn
);

2163 
‰ì_°rög_svÆue
(
•
--);

2165 #i‚de‡
NO_BUFFER_TYPE


2167 i‡(
	gcuºít_obje˘
->
	göãø˘ive
)

2168 
add_mesßge
(
cuºít_obje˘
, (*)
•
->
u
.
buf
->
ôem
, sp->u.buf->
size
);

2170 
‰ì_buf„r
((
•
--)->
u
.
buf
);

2176 #ifde‡
F_REG_ASSOC


2178 
f_ªg_assoc
 
PROT
(()) {

2179 
svÆue_t
 *
	g¨g
;

2180 
¨øy_t
 *
	gvec
;

2182 
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

2184 i‡(!(
	g¨g
[2].
	gty≥
 =
T_ARRAY
))

2185 
îr‹
("Badárgument 3ÅoÑeg_assoc()\n");

2187 
	gvec
 = 
ªg_assoc
(
¨g
[0].
u
.
°rög
,árg[1].u.
¨r
,árg[2].u.¨r, 
°_num_¨g
 > 3 ? &¨g[3] : &
c⁄°0
);

2189 i‡(
	g°_num_¨g
 == 4)

2190 
p›_3_ñems
();

2192 
p›_2_ñems
();

2193 
‰ì_°rög_svÆue
(
•
);

2194 
	g•
->
	gty≥
 = 
T_ARRAY
;

2195 
	g•
->
	gu
.
	g¨r
 = 
vec
;

2199 #ifde‡
F_REGEXP


2201 
f_ªgexp
 
PROT
(())

2203 
¨øy_t
 *
	gv
;

2204 
	gÊag
;

2206 i‡(
	g°_num_¨g
 > 2) {

2207 i‡(!(
	g•
->
	gty≥
 =
T_NUMBER
)Ë
îr‹
("Badárgument 3ÅoÑegexp()\n");

2208 i‡(
	g•
[-2].
	gty≥
 =
T_STRING
Ë
îr‹
("3rdárgument illegal forÑegexp(string, string)\n");

2209 
	gÊag
 = (
•
--)->
u
.
numbî
;

2210 } 
	gÊag
 = 0;

2211 i‡(
	g•
[-1].
	gty≥
 =
T_STRING
) {

2212 
Êag
 = 
m©ch_sögÀ_ªgexp
((
•
 - 1)->
u
.
°rög
, sp->u.string);

2213 
‰ì_°rög_svÆue
(
•
--);

2214 
‰ì_°rög_svÆue
(
•
);

2215 
put_numbî
(
Êag
);

2217 
	gv
 = 
m©ch_ªgexp
((
•
 - 1)->
u
.
¨r
, sp->u.
°rög
, 
Êag
);

2219 
‰ì_°rög_svÆue
(
•
--);

2220 
‰ì_¨øy
(
•
->
u
.
¨r
);

2221 
	g•
->
	gu
.
	g¨r
 = 
v
;

2226 #ifde‡
F_REMOVE_CALL_OUT


2228 
f_ªmove_ˇŒ_out
 
PROT
(())

2230 
	gi
;

2232 i‡(
	g°_num_¨g
) {

2233 #ifde‡
CALLOUT_HANDLES


2234 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

2236 
i
 = 
ªmove_ˇŒ_out
(
cuºít_obje˘
, 
•
->
u
.
°rög
);

2237 
‰ì_°rög_svÆue
(
•
);

2238 #ifde‡
CALLOUT_HANDLES


2240 
	gi
 = 
ªmove_ˇŒ_out_by_h™dÀ
(
•
->
u
.
numbî
);

2244 
ªmove_Æl_ˇŒ_out
(
cuºít_obje˘
);

2245 
	gi
 = 0;

2246 
	gSTACK_INC
;

2248 
put_numbî
(
i
);

2252 #ifde‡
F_RENAME


2254 
f_ª«me
 
PROT
(())

2256 
	gi
;

2258 
	gi
 = 
do_ª«me
((
•
 - 1)->
u
.
°rög
, sp->u.°rög, 
F_RENAME
);

2259 
‰ì_°rög_svÆue
(
•
--);

2260 
‰ì_°rög_svÆue
(
•
);

2261 
put_numbî
(
i
);

2290 #ifde‡
F_REPLACE_STRING


2314 
f_ª∂a˚_°rög
 
PROT
(())

2316 
	g∂í
, 
	gæí
, 
	gdÀn
, 
	g¶í
, 
	gfú°
, 
	gœ°
, 
	gcur
, 
	gj
;

2318 *
	g∑âîn
;

2319 *
	gª∂a˚
;

2320 *
	g§c
, *
	gd°1
, *
	gd°2
;

2321 
svÆue_t
 *
	g¨g
;

2322 
	gskù_èbÀ
[256];

2323 *
	g¶imô
;

2324 *
	gÊimô
;

2325 *
	g˛imô
;

2326 
	g¥obe
;

2327 
	gskù
;

2329 i‡(
	g°_num_¨g
 > 5) {

2330 
îr‹
("Too manyárgsÅoÑeplace_string.\n");

2331 
p›_n_ñems
(
°_num_¨g
);

2334 
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

2335 
	g§c
 = 
¨g
->
u
.
°rög
;

2336 
	gfú°
 = 0;

2337 
	gœ°
 = 0;

2339 i‡(
	g°_num_¨g
 >= 4) {

2340 
CHECK_TYPES
((
¨g
+3), 
T_NUMBER
, 4, 
F_REPLACE_STRING
);

2341 
	gfú°
 = (
¨g
+3)->
u
.
numbî
;

2343 i‡(
	g°_num_¨g
 == 4) {

2344 
œ°
 = 
fú°
;

2345 
	gfú°
 = 0;

2346 } i‡(
	g°_num_¨g
 == 5) {

2347 
CHECK_TYPES
(
•
, 
T_NUMBER
, 5, 
F_REPLACE_STRING
);

2349 
	gœ°
 = 
•
->
u
.
numbî
;

2353 i‡(!
	gœ°
)

2354 
	gœ°
 = 
max_°rög_Àngth
;

2356 i‡(
	gfú°
 > 
	gœ°
) {

2357 
p›_n_ñems
(
°_num_¨g
 - 1);

2360 
	g∑âîn
 = (
¨g
+1)->
u
.
°rög
;

2361 
	g∂í
 = 
SVALUE_STRLEN
(
¨g
+1);

2362 i‡(!
	g∂í
) {

2363 
p›_n_ñems
(
°_num_¨g
 - 1);

2367 
	gª∂a˚
 = (
¨g
+2)->
u
.
°rög
;

2368 
	gæí
 = 
SVALUE_STRLEN
(
¨g
+2);

2369 
	gdÀn
 = 0;

2370 
	gcur
 = 0;

2372 i‡(
	gæí
 <
∂í
) {

2374 
u∆ök_°rög_svÆue
(
¨g
);

2375 
	g§c
 = 
¨g
->
u
.
°rög
;

2378 i‡(
	g∂í
 > 1) {

2380 
	gj
 = 0; j < 256; j++) {

2381 
	gskù_èbÀ
[
j
] = 
∂í
;

2383 
	gj
 = 0; j < 
	g∂í
; j++) {

2384 
	gskù_èbÀ
[()
∑âîn
[
j
]] = 
∂í
 - j - 1;

2386 
	g¶í
 = 
SVALUE_STRLEN
(
¨g
);

2387 
	g¶imô
 = 
§c
 + 
¶í
;

2388 
	gÊimô
 = 
¶imô
 - 
∂í
 + 1;

2389 
	g¥obe
 = 
∂í
 - 1;

2392 i‡(
	gæí
 <
∂í
) {

2394 
d°2
 = 
d°1
 = 
¨g
->
u
.
°rög
;

2396 i‡(
	g∂í
 > 1) {

2397 
	g§c
 < 
	gÊimô
) {

2398 i‡((
	gskù
 = 
skù_èbÀ
[()
§c
[
¥obe
]])) {

2399 
˛imô
 = 
d°2
 + 
skù
; 
	gd°2
 < 
	g˛imô
; *d°2++ = *
§c
++)

2401 } i‡(
memcmp
(
§c
, 
∑âîn
, 
∂í
) == 0) {

2402 
cur
++;

2403 i‡((
	gcur
 >
fú°
Ë&& (
cur
 <
œ°
)) {

2404 i‡(
æí
) {

2405 
mem˝y
(
d°2
, 
ª∂a˚
, 
æí
);

2406 
	gd°2
 +
æí
;

2408 
	g§c
 +
∂í
;

2409 i‡(
	gcur
 =
œ°
) ;

2411 
mem˝y
(
d°2
, 
§c
, 
∂í
);

2412 
	gd°2
 +
∂í
;

2413 
	g§c
 +
∂í
;

2416 *
	gd°2
++ = *
§c
++;

2419 
mem˝y
(
d°2
, 
§c
, 
¶imô
 - src);

2420 
	gd°2
 +(
¶imô
 - 
§c
);

2421 *
	gd°2
 = 0;

2422 
	g¨g
->
	gu
.
	g°rög
 = 
exãnd_°rög
(
d°1
, 
d°2
 - dst1);

2426 i‡(
	gæí
) {

2427 *
	g§c
) {

2428 i‡(*
	g§c
 =*
∑âîn
) {

2429 
cur
++;

2431 i‡(
	gcur
 >
fú°
 && 
cur
 <
œ°
) {

2432 *
§c
 = *
ª∂a˚
;

2435 
	g§c
++;

2438 *
	g§c
) {

2439 i‡(*
	g§c
++ =*
∑âîn
) {

2440 
cur
++;

2441 i‡(
	gcur
 >
fú°
) {

2442 
d°2
 = 
§c
 - 1;

2443 *
	g§c
) {

2444 i‡(*
	g§c
 =*
∑âîn
) {

2445 
cur
++;

2446 i‡(
	gcur
 <
œ°
) {

2447 
§c
++;

2450 *
	g§c
)

2451 *
	gd°2
++ = *
§c
++;

2455 *
	gd°2
++ = *
§c
++;

2457 *
	gd°2
 = 0;

2458 
	g¨g
->
	gu
.
	g°rög
 = 
exãnd_°rög
(
d°1
, 
d°2
 - dst1);

2465 
p›_n_ñems
(
°_num_¨g
 - 1);

2467 
	gd°2
 = 
d°1
 = 
√w_°rög
(
max_°rög_Àngth
, "f_replace_string: 2");

2469 i‡(
	g∂í
 > 1) {

2470 
	g§c
 < 
	gÊimô
) {

2471 i‡((
	gskù
 = 
skù_èbÀ
[()
§c
[
¥obe
]])) {

2472 
˛imô
 = 
d°2
 + 
skù
; 
	gd°2
 < 
	g˛imô
; *d°2++ = *
§c
++)

2475 } i‡(
memcmp
(
§c
, 
∑âîn
, 
∂í
) == 0) {

2476 
cur
++;

2477 i‡((
	gcur
 >
fú°
Ë&& (
cur
 <
œ°
)) {

2478 i‡(
max_°rög_Àngth
 - 
dÀn
 <
æí
) {

2479 
p›_n_ñems
(
°_num_¨g
);

2480 
push_svÆue
(&
c⁄°0u
);

2481 
FREE_MSTR
(
d°1
);

2484 
mem˝y
(
d°2
, 
ª∂a˚
, 
æí
);

2485 
	gd°2
 +
æí
;

2486 
	gdÀn
 +
æí
;

2487 
	g§c
 +
∂í
;

2488 i‡(
	gcur
 =
œ°
) ;

2490 
	gdÀn
 +
∂í
;

2491 i‡(
	gmax_°rög_Àngth
 - 
	gdÀn
 <= 0) {

2492 
p›_n_ñems
(
°_num_¨g
);

2493 
push_svÆue
(&
c⁄°0u
);

2495 
FREE_MSTR
(
d°1
);

2498 
mem˝y
(
d°2
, 
§c
, 
∂í
);

2499 
	gd°2
 +
∂í
;

2500 
	g§c
 +
∂í
;

2503 i‡(
	gmax_°rög_Àngth
 - 
	gdÀn
 <= 1) {

2504 
p›_n_ñems
(
°_num_¨g
);

2505 
push_svÆue
(&
c⁄°0u
);

2507 
FREE_MSTR
(
d°1
);

2510 *
	gd°2
++ = *
§c
++;

2511 
	gdÀn
++;

2514 i‡(
	gmax_°rög_Àngth
 - 
	gdÀn
 <(
¶imô
 - 
§c
)) {

2515 
p›_n_ñems
(
°_num_¨g
);

2516 
push_svÆue
(&
c⁄°0u
);

2517 
FREE_MSTR
(
d°1
);

2520 
mem˝y
(
d°2
, 
§c
, 
¶imô
 - src);

2521 
	gd°2
 +(
¶imô
 - 
§c
);

2524 *
	g§c
 != '\0') {

2525 i‡(*
§c
 =*
∑âîn
) {

2526 
cur
++;

2527 i‡(
	gcur
 >
fú°
 && 
cur
 <
œ°
) {

2528 i‡(
æí
 != 0) {

2529 i‡(
max_°rög_Àngth
 - 
dÀn
 <
æí
) {

2530 
p›_n_ñems
(
°_num_¨g
);

2531 
push_svÆue
(&
c⁄°0u
);

2532 
FREE_MSTR
(
d°1
);

2535 
°∫˝y
(
d°2
, 
ª∂a˚
, 
æí
);

2536 
	gd°2
 +
æí
;

2537 
	gdÀn
 +
æí
;

2539 
	g§c
++;

2543 i‡(
	gmax_°rög_Àngth
 - 
	gdÀn
 <= 1) {

2544 
p›_n_ñems
(
°_num_¨g
);

2545 
push_svÆue
(&
c⁄°0u
);

2546 
FREE_MSTR
(
d°1
);

2549 *
	gd°2
++ = *
§c
++;

2550 
	gdÀn
++;

2553 *
	gd°2
 = '\0';

2555 
p›_n_ñems
(
°_num_¨g
);

2559 
push_mÆlo˚d_°rög
(
exãnd_°rög
(
d°1
, 
d°2
 - dst1));

2564 #ifde‡
F_RESOLVE


2566 
f_ªsﬁve
 
PROT
(())

2568 
	gi
, 
quîy_addr_numbî
 
PROT
((*, 
svÆue_t
 *));

2570 
	gi
 = 
quîy_addr_numbî
((
•
 - 1)->
u
.
°rög
, sp);

2571 
p›_°ack
();

2572 
‰ì_°rög_svÆue
(
•
);

2573 
put_numbî
(
i
);

2577 #ifde‡
F_RESTORE_OBJECT


2579 
f_ª°‹e_obje˘
 
PROT
(())

2581 
	gÊag
;

2583 
	gÊag
 = (
°_num_¨g
 > 1Ë? (
•
--)->
u
.
numbî
 : 0;

2584 
	gÊag
 = 
ª°‹e_obje˘
(
cuºít_obje˘
, 
•
->
u
.
°rög
, 
Êag
);

2585 
‰ì_°rög_svÆue
(
•
);

2586 
put_numbî
(
Êag
);

2590 #ifde‡
F_RESTORE_VARIABLE


2592 
f_ª°‹e_v¨übÀ
 
PROT
(()) {

2593 
svÆue_t
 
	gv
;

2595 
u∆ök_°rög_svÆue
(
•
);

2596 
	gv
.
	gty≥
 = 
T_NUMBER
;

2598 
ª°‹e_v¨übÀ
(&
v
, 
•
->
u
.
°rög
);

2599 
FREE_MSTR
(
•
->
u
.
°rög
);

2600 *
	g•
 = 
v
;

2604 #ifde‡
F_RM


2606 
f_rm
 
PROT
(())

2608 
	gi
;

2610 
	gi
 = 
ªmove_fûe
(
•
->
u
.
°rög
);

2611 
‰ì_°rög_svÆue
(
•
);

2612 
put_numbî
(
i
);

2616 #ifde‡
F_RMDIR


2618 
f_rmdú
 
PROT
(())

2620 *
	g∑th
;

2622 
	g∑th
 = 
check_vÆid_∑th
(
•
->
u
.
°rög
, 
cuºít_obje˘
, "rmdir", 1);

2623 i‡(!
	g∑th
 || 
rmdú
(
∑th
) == -1) {

2624 
‰ì_°rög_svÆue
(
•
);

2625 *
	g•
 = 
c⁄°0
;

2628 
‰ì_°rög_svÆue
(
•
);

2629 *
	g•
 = 
c⁄°1
;

2634 #ifde‡
F_SAVE_OBJECT


2636 
f_ßve_obje˘
 
PROT
(())

2638 
	gÊag
;

2640 
	gÊag
 = (
°_num_¨g
 =2Ë&& (
•
--)->
u
.
numbî
;

2641 
	gÊag
 = 
ßve_obje˘
(
cuºít_obje˘
, 
•
->
u
.
°rög
, 
Êag
);

2642 
‰ì_°rög_svÆue
(
•
);

2643 
put_numbî
(
Êag
);

2647 #ifde‡
F_SAVE_VARIABLE


2649 
f_ßve_v¨übÀ
 
PROT
(()) {

2650 *
	gp
;

2652 
	gp
 = 
ßve_v¨übÀ
(
•
);

2653 
p›_°ack
();

2654 
push_mÆlo˚d_°rög
(
p
);

2658 #ifde‡
F_SAY


2660 
f_ßy
 
PROT
(())

2662 
¨øy_t
 *
	gavoid
;

2663 
¨øy_t
 
	gvtmp
 =

2665 #ifde‡
DEBUG


2669 #ifde‡
PACKAGE_MUDLIB_STATS


2670 {(
mudlib_°©s_t
 *Ë
NULL
, (mudlib_stats_t *) NULL}

2674 i‡(
	g°_num_¨g
 == 1) {

2675 
avoid
 = &
the_nuŒ_¨øy
;

2676 
ßy
(
•
, 
avoid
);

2677 
p›_°ack
();

2679 i‡(
	g•
->
	gty≥
 =
T_OBJECT
) {

2680 
vtmp
.
ôem
[0].
ty≥
 = 
T_OBJECT
;

2681 
	gvtmp
.
	gôem
[0].
	gu
.
	gob
 = 
•
->
u
.
ob
;

2682 
	gavoid
 = &
vtmp
;

2684 
	gavoid
 = 
•
->
u
.
¨r
;

2686 
ßy
(
•
 - 1, 
avoid
);

2687 
p›_2_ñems
();

2692 #ifde‡
F_SET_EVAL_LIMIT


2697 
f_£t_evÆ_limô
 
PROT
(())

2699 
	g•
->
	gu
.
	gnumbî
) {

2701 
•
->
u
.
numbî
 = 
evÆ_co°
 = 
max_co°
;

2704 
•
->
u
.
numbî
 = 
evÆ_co°
;

2707 
•
->
u
.
numbî
 = 
max_co°
;

2710 
max_co°
 = 
•
->
u
.
numbî
;

2716 #ifde‡
F_SET_BIT


2718 
f_£t_bô
 
PROT
(())

2720 *
	g°r
;

2721 
	gÀn
, 
	gﬁd_Àn
, 
	göd
, 
	gbô
;

2723 i‡(
	g•
->
	gu
.
	gnumbî
 > 
	gMAX_BITS
)

2724 
îr‹
("£t_bô(ËbôÑeque°ed: %d > maximum bôs: %d\n", 
•
->
u
.
numbî
, 
MAX_BITS
);

2725 
	gbô
 = (
•
--)->
u
.
numbî
;

2726 i‡(
	gbô
 < 0)

2727 
îr‹
("Badárgument 2 (negative)Åo set_bit().\n");

2728 
	göd
 = 
bô
/6;

2729 
	gbô
 %= 6;

2730 
	gﬁd_Àn
 = 
Àn
 = 
SVALUE_STRLEN
(
•
);

2731 i‡(
	göd
 >
Àn
)

2732 
Àn
 = 
öd
 + 1;

2733 i‡(
	göd
 < 
	gﬁd_Àn
) {

2734 
u∆ök_°rög_svÆue
(
•
);

2735 
	g°r
 = 
•
->
u
.
°rög
;

2737 
	g°r
 = 
√w_°rög
(
Àn
, "f_set_bit: str");

2738 
	g°r
[
Àn
] = '\0';

2739 i‡(
	gﬁd_Àn
)

2740 
mem˝y
(
°r
, 
•
->
u
.
°rög
, 
ﬁd_Àn
);

2741 i‡(
	gÀn
 > 
	gﬁd_Àn
)

2742 
mem£t
(
°r
 + 
ﬁd_Àn
, ' ', 
Àn
 - old_len);

2743 
‰ì_°rög_svÆue
(
•
);

2744 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

2745 
	g•
->
	gu
.
	g°rög
 = 
°r
;

2748 i‡(
	g°r
[
öd
] > 0x3f + ' ' || str[ind] < ' ')

2749 
îr‹
("IŒegÆ bôÖ©ã∫ i¿£t_bô ch¨a˘î %d\n", 
öd
);

2750 
	g°r
[
öd
] = ((
°r
[öd] - ' 'Ë| (1 << 
bô
)) + ' ';

2754 #ifde‡
F_SET_HEART_BEAT


2756 
f_£t_hóπ_bót
 
PROT
(())

2758 
£t_hóπ_bót
(
cuºít_obje˘
, (
•
--)->
u
.
numbî
);

2762 #ifde‡
F_QUERY_HEART_BEAT


2764 
f_quîy_hóπ_bót
 
PROT
(())

2766 
obje˘_t
 *
	gob
;

2768 
‰ì_obje˘
(
ob
 = 
•
->
u
.ob, "f_query_heart_beat");

2769 
put_numbî
(
quîy_hóπ_bót
(
ob
));

2773 #ifde‡
F_SET_HIDE


2775 
f_£t_hide
 
PROT
(())

2777 i‡(!
vÆid_hide
(
cuºít_obje˘
)) {

2778 
	g•
--;

2781 i‡((
	g•
--)->
	gu
.
	gnumbî
) {

2782 
	gnum_hiddí
++;

2783 i‡(!(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_HIDDEN
Ë&& cuºít_obje˘->
	göãø˘ive
)

2784 
	gnum_hiddí_u£rs
++;

2785 
	gcuºít_obje˘
->
	gÊags
 |
O_HIDDEN
;

2787 
	gnum_hiddí
--;

2788 i‡((
	gcuºít_obje˘
->
	gÊags
 & 
	gO_HIDDEN
Ë&& cuºít_obje˘->
	göãø˘ive
)

2789 
	gnum_hiddí_u£rs
--;

2790 
	gcuºít_obje˘
->
	gÊags
 &~
O_HIDDEN
;

2795 #ifde‡
F_SET_LIGHT


2797 
f_£t_light
 
PROT
(())

2799 
obje˘_t
 *
	go1
;

2801 
add_light
(
cuºít_obje˘
, 
•
->
u
.
numbî
);

2802 
	go1
 = 
cuºít_obje˘
;

2803 #i‚de‡
NO_ENVIRONMENT


2804 
	go1
->
	gsu≥r
)

2805 
	go1
 = 
o1
->
su≥r
;

2807 
	g•
->
	gu
.
	gnumbî
 = 
o1
->
tŸÆ_light
;

2811 #ifde‡
F_SET_PRIVS


2813 
f_£t_¥ivs
 
PROT
(())

2815 
obje˘_t
 *
	gob
;

2817 
	gob
 = (
•
 - 1)->
u
.
ob
;

2818 i‡(
	gob
->
	g¥ivs
 !
NULL
)

2819 
‰ì_°rög
(
ob
->
¥ivs
);

2820 i‡(!(
	g•
->
	gty≥
 =
T_STRING
)) {

2821 
ob
->
¥ivs
 = 
NULL
;

2822 
	g•
--;

2824 
	gob
->
	g¥ivs
 = 
make_sh¨ed_°rög
(
•
->
u
.
°rög
);

2825 
‰ì_°rög_svÆue
(
•
--);

2827 
‰ì_obje˘
(
ob
, "f_set_privs");

2828 
	g•
--;

2832 #ifde‡
F_SHADOW


2834 
f_shadow
 
PROT
(())

2836 
obje˘_t
 *
	gob
;

2838 
	gob
 = (
•
 - 1)->
u
.
ob
;

2839 i‡(!((
	g•
--)->
	gu
.
	gnumbî
)) {

2840 
	gob
 = 
ob
->
shadowed
;

2841 
‰ì_obje˘
(
•
->
u
.
ob
, "f_shadow:1");

2842 i‡(
	gob
) {

2843 
add_ªf
(
ob
, "shadow(ob, 0)");

2844 
	g•
->
	gu
.
	gob
 = 
ob
;

2846 *
	g•
 = 
c⁄°0
;

2849 i‡(
	gob
 =
cuºít_obje˘
) {

2850 
îr‹
("shadow: Can't shadow self\n");

2852 i‡(
vÆid©e_shadowög
(
ob
)) {

2853 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
) {

2854 
‰ì_obje˘
(
ob
, "f_shadow:2");

2855 *
	g•
 = 
c⁄°0
;

2861 
	gob
->
	gshadowed
)

2862 
	gob
 = 
ob
->
shadowed
;

2863 
	gcuºít_obje˘
->
	gshadowög
 = 
ob
;

2864 
	gob
->
	gshadowed
 = 
cuºít_obje˘
;

2865 
‰ì_obje˘
(
•
->
u
.
ob
, "f_shadow:3");

2866 
add_ªf
(
ob
, "shadow(ob, 1)");

2867 
	g•
->
	gu
.
	gob
 = 
ob
;

2870 
‰ì_obje˘
(
•
->
u
.
ob
, "f_shadow:4");

2871 *
	g•
 = 
c⁄°0
;

2875 #ifde‡
F_SHOUT


2877 
f_shout
 
PROT
(())

2879 
shout_°rög
(
•
->
u
.
°rög
);

2880 
‰ì_°rög_svÆue
(
•
--);

2884 #ifde‡
F_SHUTDOWN


2886 
f_shutdown
 
PROT
(())

2888 i‡(
	g°_num_¨g
) {

2889 
shutdownMudOS
(
•
->
u
.
numbî
);

2891 
shutdownMudOS
(0);

2892 
push_numbî
(0);

2897 #ifde‡
F_SIZEOF


2899 
f_sizeof
 
PROT
(())

2901 
	gi
;

2903 
	g•
->
	gty≥
) {

2904 
	gT_CLASS
:

2905 
i
 = 
•
->
u
.
¨r
->
size
;

2906 
‰ì_˛ass
(
•
->
u
.
¨r
);

2908 
	gT_ARRAY
:

2909 
i
 = 
•
->
u
.
¨r
->
size
;

2910 
‰ì_¨øy
(
•
->
u
.
¨r
);

2912 
	gT_MAPPING
:

2913 
i
 = 
•
->
u
.
m≠
->
cou¡
;

2914 
‰ì_m≠pög
(
•
->
u
.
m≠
);

2916 #i‚de‡
NO_BUFFER_TYPE


2917 
	gT_BUFFER
:

2918 
i
 = 
•
->
u
.
buf
->
size
;

2919 
‰ì_buf„r
(
•
->
u
.
buf
);

2922 
	gT_STRING
:

2923 
i
 = 
SVALUE_STRLEN
(
•
);

2924 
‰ì_°rög_svÆue
(
•
);

2927 
i
 = 0;

2928 
‰ì_svÆue
(
•
, "f_sizeof");

2930 
	g•
->
	gty≥
 = 
T_NUMBER
;

2931 
	g•
->
	gu
.
	gnumbî
 = 
i
;

2935 #ifde‡
F_SNOOP


2937 
f_¢o›
 
PROT
(())

2943 i‡(
	g°_num_¨g
 == 1) {

2944 i‡(!
√w_£t_¢o›
(
•
->
u
.
ob
, 0Ë|| (•->u.ob->
Êags
 & 
O_DESTRUCTED
)) {

2945 
‰ì_obje˘
(
•
->
u
.
ob
, "f_snoop:1");

2946 *
	g•
 = 
c⁄°0
;

2949 i‡(!
√w_£t_¢o›
((
•
 - 1)->
u
.
ob
, sp->u.ob) ||

2950 (
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_DESTRUCTED
)) {

2951 
‰ì_obje˘
((
•
--)->
u
.
ob
, "f_snoop:2");

2952 
‰ì_obje˘
(
•
->
u
.
ob
, "f_snoop:3");

2953 *
	g•
 = 
c⁄°0
;

2955 
‰ì_obje˘
((--
•
)->
u
.
ob
, "f_snoop:4");

2956 
	g•
->
	gu
.
	gob
 = (
•
+1)->
u
.
ob
;

2962 #ifde‡
F_SPRINTF


2964 
f_•rötf
 
PROT
(())

2966 *
	gs
;

2967 
	gnum_¨g
 = 
°_num_¨g
;

2969 
	gs
 = 
°rög_¥öt_f‹m©ãd
((
•
 - 
num_¨g
 + 1)->
u
.
°rög
,

2970 
num_¨g
 - 1, 
•
 -Çum_arg + 2);

2971 
p›_n_ñems
(
num_¨g
);

2973 
	gSTACK_INC
;

2974 
	g•
->
	gty≥
 = 
T_STRING
;

2975 i‡(!
	gs
) {

2976 
	g•
->
	gsubty≥
 = 
STRING_CONSTANT
;

2977 
	g•
->
	gu
.
	g°rög
 = "";

2979 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

2980 
	g•
->
	gu
.
	g°rög
 = 
s
;

2985 #ifde‡
F_STAT


2987 
f_°©
 
PROT
(())

2989 
°©
 
	gbuf
;

2990 *
	g∑th
;

2991 
¨øy_t
 *
	gv
;

2992 
obje˘_t
 *
	gob
;

2994 
	g∑th
 = 
check_vÆid_∑th
((--
•
)->
u
.
°rög
, 
cuºít_obje˘
, "stat", 0);

2995 i‡(!
	g∑th
) {

2996 
‰ì_°rög_svÆue
(
•
);

2997 *
	g•
 = 
c⁄°0
;

3000 i‡(
°©
(
∑th
, &
buf
) != -1) {

3001 i‡(
buf
.
°_mode
 & 
S_IFREG
) {

3002 
v
 = 
Æloˇã_em±y_¨øy
(3);

3003 
	gv
->
	gôem
[0].
	gty≥
 = 
T_NUMBER
;

3004 
	gv
->
	gôem
[0].
	gu
.
	gnumbî
 = 
buf
.
°_size
;

3005 
	gv
->
	gôem
[1].
	gty≥
 = 
T_NUMBER
;

3006 
	gv
->
	gôem
[1].
	gu
.
	gnumbî
 = 
buf
.
°_mtime
;

3007 
	gv
->
	gôem
[2].
	gty≥
 = 
T_NUMBER
;

3008 
	gob
 = 
föd_obje˘2
(
∑th
);

3009 i‡(
	gob
 && !
obje˘_visibÀ
(
ob
))

3010 
	gob
 = 0;

3011 i‡(
	gob
)

3012 
	gv
->
	gôem
[2].
	gu
.
	gnumbî
 = 
ob
->
lﬂd_time
;

3014 
	gv
->
	gôem
[2].
	gu
.
	gnumbî
 = 0;

3015 
‰ì_°rög_svÆue
(
•
);

3016 
put_¨øy
(
v
);

3020 
	gv
 = 
gë_dú
(
•
->
u
.
°rög
, (•+1)->u.
numbî
);

3021 
‰ì_°rög_svÆue
(
•
);

3022 i‡(
	gv
Ë{ 
put_¨øy
(
v
); }

3023 *
	g•
 = 
c⁄°0
;

3027 #ifde‡
F_STRSRCH


3037 
f_°r§ch
 
PROT
(())

3039 *
	gbig
, *
	glôée
, *
	gpos
;

3040 
	gbuf
[2];

3041 
	gi
, 
	gbÀn
, 
	gŒí
;

3043 
	g•
--;

3044 
	gbig
 = (
•
 - 1)->
u
.
°rög
;

3045 
	gbÀn
 = 
SVALUE_STRLEN
(
•
 - 1);

3046 i‡(
	g•
->
	gty≥
 =
T_NUMBER
) {

3047 
lôée
 = 
buf
;

3048 i‡((
	gbuf
[0] = (Ë
•
->
u
.
numbî
))

3049 
Œí
 = 1;

3051 
	gŒí
 = 0;

3053 
	glôée
 = 
•
->
u
.
°rög
;

3054 
	gŒí
 = 
SVALUE_STRLEN
(
•
);

3057 i‡(!
	gŒí
 || 
	gbÀn
 <Ülen) {

3058 
	gpos
 = 
NULL
;

3061 } i‡(!((
	g•
+1)->
	gu
.
	gnumbî
)) {

3062 i‡(!
	glôée
[1])

3063 
	gpos
 = 
°rchr
(
big
, (Ë
lôée
[0]);

3065 
	gpos
 = (*)
°r°r
(
big
, 
lôée
);

3068 i‡(!
	glôée
[1])

3069 
	gpos
 = 
°ºchr
(
big
, (Ë
lôée
[0]);

3071 
	gc
 = *
lôée
;

3073 
	gpos
 = 
big
 + 
bÀn
;

3074 
	gpos
 -
Œí
;

3077 i‡(*
	gpos
 =
c
) ;

3078 } --
	gpos
 >
big
);

3079 i‡(*
	gpos
 !
c
) {

3080 
pos
 = 
NULL
;

3083 
	gi
 = 1; 
	glôée
[
i
] && (
	gpos
[i] =
lôée
[i]); i++);

3084 i‡(!
	glôée
[
i
])

3086 } --
	gpos
 >
big
);

3090 i‡(!
	gpos
)

3091 
	gi
 = -1;

3093 
	gi
 = (Ë(
pos
 - 
big
);

3094 i‡(
	g•
->
	gty≥
 =
T_STRING
Ë
‰ì_°rög_svÆue
(
•
);

3095 
‰ì_°rög_svÆue
(--
•
);

3096 
put_numbî
(
i
);

3100 #ifde‡
F_STRCMP


3102 
f_°rcmp
 
PROT
(())

3104 
	gi
;

3106 
	gi
 = 
°rcmp
((
•
 - 1)->
u
.
°rög
, sp->u.string);

3107 
‰ì_°rög_svÆue
(
•
--);

3108 
‰ì_°rög_svÆue
(
•
);

3109 
put_numbî
(
i
);

3113 #ifde‡
F_STRINGP


3115 
f_°rögp
 
PROT
(())

3117 i‡(
	g•
->
	gty≥
 =
T_STRING
) {

3118 
‰ì_°rög_svÆue
(
•
);

3119 *
	g•
 = 
c⁄°1
;

3122 
‰ì_svÆue
(
•
, "f_stringp");

3123 *
	g•
 = 
c⁄°0
;

3128 #ifde‡
F_BUFFERP


3130 
f_buf„Ω
 
PROT
(())

3132 i‡(
	g•
->
	gty≥
 =
T_BUFFER
) {

3133 
‰ì_buf„r
(
•
->
u
.
buf
);

3134 *
	g•
 = 
c⁄°1
;

3136 
‰ì_svÆue
(
•
, "f_bufferp");

3137 *
	g•
 = 
c⁄°0
;

3142 #ifde‡
F_SWAP


3144 
f_sw≠
 
PROT
(())

3146 
obje˘_t
 *
	gob
 = 
•
->
u
.
ob
;

3147 
c⁄åﬁ_°ack_t
 *
	gp
;

3150 i‡(!(
	gob
->
	gÊags
 & 
	gO_SWAPPED
Ë&& (ob !
cuºít_obje˘
)) {

3151 
p
 = 
c•
; 
	gp
 >
c⁄åﬁ_°ack
;Ö--)

3152 i‡(
	gob
 =
c•
->
ob
) {

3153 
p›_°ack
();

3156 (Ë
sw≠
(
•
->
u
.
ob
);

3159 
p›_°ack
();

3163 #ifde‡
F_TELL_OBJECT


3165 
f_ãŒ_obje˘
 
PROT
(())

3167 
ãŒ_obje˘
((
•
 - 1)->
u
.
ob
, sp->u.
°rög
, 
SVALUE_STRLEN
(sp));

3168 
‰ì_°rög_svÆue
(
•
--);

3169 
p›_°ack
();

3173 #ifde‡
F_TELL_ROOM


3175 
f_ãŒ_room
 
PROT
(())

3177 
¨øy_t
 *
	gavoid
;

3178 
¨øy_t
 
	gvtmp
 =

3180 #ifde‡
DEBUG


3184 #ifde‡
PACKAGE_MUDLIB_STATS


3185 {(
mudlib_°©s_t
 *Ë
NULL
, (mudlib_stats_t *) NULL}

3189 
	gnum_¨g
 = 
°_num_¨g
;

3190 
svÆue_t
 *
	g¨g
 = 
•
 - 
num_¨g
 + 1;

3191 
obje˘_t
 *
	gob
;

3193 i‡(
	g¨g
->
	gty≥
 =
T_OBJECT
) {

3194 
ob
 = 
¨g
[0].
u
.ob;

3196 
	gob
 = 
föd_obje˘
(
¨g
[0].
u
.
°rög
);

3197 i‡(!
	gob
 || !
obje˘_visibÀ
(
ob
))

3198 
îr‹
("Badárgument 1ÅoÅell_room()\n");

3201 i‡(
	gnum_¨g
 == 2) {

3202 
avoid
 = &
the_nuŒ_¨øy
;

3204 i‡(
	g¨g
[2].
	gty≥
 =
T_OBJECT
) {

3205 
vtmp
.
ôem
[0].
ty≥
 = 
T_OBJECT
;

3206 
	gvtmp
.
	gôem
[0].
	gu
.
	gob
 = 
¨g
[2].
u
.
ob
;

3207 
	gavoid
 = &
vtmp
;

3209 
	gavoid
 = 
¨g
[2].
u
.
¨r
;

3213 
ãŒ_room
(
ob
, &
¨g
[1], 
avoid
);

3214 i‡(
	gnum_¨g
 > 2 && 
	g¨g
[2].
	gty≥
 !
T_OBJECT
)

3215 
‰ì_¨øy
(
avoid
);

3216 
‰ì_svÆue
(
¨g
 + 1, "f_tell_room");

3217 
‰ì_svÆue
(
¨g
, "f_tell_room");

3218 
	g•
 = 
¨g
 - 1;

3222 #ifde‡
F_TEST_BIT


3224 
f_ã°_bô
 
PROT
(())

3226 
	göd
 = (
•
--)->
u
.
numbî
;

3228 i‡(
	göd
 / 6 >
SVALUE_STRLEN
(
•
)) {

3229 
‰ì_°rög_svÆue
(
•
);

3230 *
	g•
 = 
c⁄°0
;

3233 i‡(
	göd
 < 0Ë
îr‹
("Badárgument 2 (negative)ÅoÅest_bit().\n");

3234 i‡((
	g•
->
	gu
.
	g°rög
[
öd
 / 6] - ' 'Ë& (1 << (
	göd
 % 6))) {

3235 
‰ì_°rög_svÆue
(
•
);

3236 *
	g•
 = 
c⁄°1
;

3238 
‰ì_°rög_svÆue
(
•
);

3239 *
	g•
 = 
c⁄°0
;

3244 #ifde‡
F_NEXT_BIT


3246 
f_√xt_bô
 
PROT
(())

3248 
	g°¨t
 = (
•
--)->
u
.
numbî
;

3249 
	gÀn
 = 
SVALUE_STRLEN
(
•
);

3250 
	gwhich
, 
	gbô
, 
	gvÆue
;

3252 i‡(!
	gÀn
 || 
	g°¨t
 / 6 >
Àn
) {

3253 
‰ì_°rög_svÆue
(
•
);

3254 
put_numbî
(-1);

3258 i‡(
	g°¨t
 > 0) {

3259 i‡(
	g°¨t
 % 6 == 5) {

3260 
which
 = (
°¨t
 / 6) + 1;

3261 
	gvÆue
 = 
•
->
u
.
°rög
[
which
] - ' ';

3264 
	gwhich
 = 
°¨t
 / 6;

3265 
	gbô
 = 0x3‡- ((1 << ((
°¨t
 % 6) + 1)) - 1);

3266 
	gvÆue
 = (
•
->
u
.
°rög
[
which
] - ' 'Ë& 
bô
;

3269 
	gwhich
 = 0;

3270 
	gvÆue
 = *
•
->
u
.
°rög
 - ' ';

3274 i‡(
	gvÆue
) {

3275 i‡(
	gvÆue
 & 0x07) {

3276 i‡(
	gvÆue
 & 0x01)

3277 
	gbô
 = 
which
 * 6;

3278 i‡(
	gvÆue
 & 0x02)

3279 
	gbô
 = 
which
 * 6 + 1;

3280 i‡(
	gvÆue
 & 0x04)

3281 
	gbô
 = 
which
 * 6 + 2;

3283 } i‡(
	gvÆue
 & 0x38) {

3284 i‡(
	gvÆue
 & 0x08)

3285 
	gbô
 = 
which
 * 6 + 3;

3286 i‡(
	gvÆue
 & 0x10)

3287 
	gbô
 = 
which
 * 6 + 4;

3288 i‡(
	gvÆue
 & 0x20)

3289 
	gbô
 = 
which
 * 6 + 5;

3293 
	gwhich
++;

3294 i‡(
	gwhich
 =
Àn
) {

3295 
bô
 = -1;

3298 
	gvÆue
 = 
•
->
u
.
°rög
[
which
] - ' ';

3301 
‰ì_°rög_svÆue
(
•
);

3302 
put_numbî
(
bô
);

3306 #ifde‡
F__THIS_OBJECT


3308 
f__this_obje˘
 
PROT
(())

3310 
push_obje˘
(
cuºít_obje˘
);

3314 #ifde‡
F_THIS_PLAYER


3316 
f_this_∂ayî
 
PROT
(())

3318 i‡(
	g•
->
	gu
.
	gnumbî
) {

3319 i‡(
	gcuºít_öãø˘ive
)

3320 
put_uƒe„d_obje˘
(
cuºít_öãø˘ive
, "this_player(1)");

3321 
	g•
->
	gu
.
	gnumbî
 = 0;

3323 i‡(
	gcomm™d_givî
)

3324 
put_uƒe„d_obje˘
(
comm™d_givî
, "this_player(0)");

3330 #ifde‡
F_SET_THIS_PLAYER


3332 
f_£t_this_∂ayî
 
PROT
(())

3334 i‡(
	g•
->
	gty≥
 =
T_NUMBER
)

3335 
£t_comm™d_givî
(0);

3337 
£t_comm™d_givî
(
•
->
u
.
ob
);

3338 
p›_°ack
();

3342 #ifde‡
F_THROW


3344 
f_throw
 
PROT
(())

3346 
‰ì_svÆue
(&
ˇtch_vÆue
, "f_throw");

3347 
	gˇtch_vÆue
 = *
•
--;

3348 
throw_îr‹
();

3352 #ifde‡
F_TIME


3354 
f_time
 
PROT
(())

3356 
push_numbî
(
cuºít_time
);

3360 #ifde‡
F__TO_FLOAT


3362 
f__to_Êﬂt
 
PROT
(())

3364 
	gãmp
 = 0;

3366 
	g•
->
	gty≥
) {

3367 
	gT_NUMBER
:

3368 
•
->
ty≥
 = 
T_REAL
;

3369 
	g•
->
	gu
.
	gªÆ
 = (Ë
•
->
u
.
numbî
;

3371 
	gT_STRING
:

3372 
ssˇnf
(
•
->
u
.
°rög
, "%lf", &
ãmp
);

3373 
‰ì_°rög_svÆue
(
•
);

3374 
	g•
->
	gty≥
 = 
T_REAL
;

3375 
	g•
->
	gu
.
	gªÆ
 = 
ãmp
;

3380 #ifde‡
F__TO_INT


3382 
f__to_öt
 
PROT
(())

3384 
	g•
->
	gty≥
) {

3385 
	gT_REAL
:

3386 
•
->
ty≥
 = 
T_NUMBER
;

3387 
	g•
->
	gu
.
	gnumbî
 = (Ë
•
->
u
.
ªÆ
;

3389 
	gT_STRING
:

3391 
ãmp
;

3392 *
	gp
;

3394 
	gãmp
 = 
°πﬁ
(
•
->
u
.
°rög
, &
p
, 10);

3395 i‡(*
	gp
) {

3410 
	gp
 > 
	g•
->
	gu
.
	g°rög
 && 
uis•a˚
(*(
p
 - 1)))

3411 
	gp
--;

3413 i‡(
	gp
 =
•
->
u
.
°rög
) {

3414 
‰ì_°rög_svÆue
(
•
);

3415 *
	g•
 = 
c⁄°0u
;

3419 
‰ì_°rög_svÆue
(
•
);

3420 
	g•
->
	gu
.
	gnumbî
 = 
ãmp
;

3421 
	g•
->
	gty≥
 = 
T_NUMBER
;

3424 #i‚de‡
NO_BUFFER_TYPE


3425 
	gT_BUFFER
:

3426 i‡(
•
->
u
.
buf
->
size
 < ()) {

3427 
‰ì_buf„r
(
•
->
u
.
buf
);

3428 *
	g•
 = 
c⁄°0
;

3430 
	gho°öt
, 
	g√töt
;

3432 
mem˝y
((*Ë&
√töt
, 
•
->
u
.
buf
->
ôem
, ());

3433 
	gho°öt
 = 
¡ohl
(
√töt
);

3434 
‰ì_buf„r
(
•
->
u
.
buf
);

3435 
put_numbî
(
ho°öt
);

3442 #ifde‡
F_TYPEOF


3444 
f_ty≥of
 
PROT
(())

3446 *
	gt
 = 
ty≥_«me
(
•
->
ty≥
);

3448 
‰ì_svÆue
(
•
, "f_typeof");

3449 
put_c⁄°™t_°rög
(
t
);

3453 #ifde‡
F_UNDEFINEDP


3455 
f_undeföedp
 
PROT
(())

3457 i‡(
	g•
->
	gty≥
 =
T_NUMBER
) {

3458 i‡(!
•
->
u
.
numbî
 && (•->
subty≥
 =
T_UNDEFINED
)) {

3459 *
•
 = 
c⁄°1
;

3460 } *
	g•
 = 
c⁄°0
;

3462 
‰ì_svÆue
(
•
, "f_undefinedp");

3463 *
	g•
 = 
c⁄°0
;

3468 #ifde‡
F_UPTIME


3470 
f_u±ime
 
PROT
(())

3472 
push_numbî
(
cuºít_time
 - 
boŸ_time
);

3476 #ifde‡
F_USERP


3478 
f_u£Ω
 
PROT
(())

3480 
	gi
;

3482 
	gi
 = (Ë
•
->
u
.
ob
->
Êags
 & 
O_ONCE_INTERACTIVE
;

3483 
‰ì_obje˘
(
•
->
u
.
ob
, "f_userp");

3484 
put_numbî
(
i
 != 0);

3488 #ifde‡
F_USERS


3490 
f_u£rs
 
PROT
(())

3492 
push_ª„d_¨øy
(
u£rs
());

3496 #ifde‡
F_WIZARDP


3498 
f_wiz¨dp
 
PROT
(())

3500 
	gi
;

3502 
	gi
 = (Ë
•
->
u
.
ob
->
Êags
 & 
O_IS_WIZARD
;

3503 
‰ì_obje˘
(
•
->
u
.
ob
, "f_wizardp");

3504 
put_numbî
(
i
 != 0);

3508 #ifde‡
F_VIRTUALP


3510 
f_vútuÆp
 
PROT
(())

3512 
	gi
;

3514 
	gi
 = (Ë
•
->
u
.
ob
->
Êags
 & 
O_VIRTUAL
;

3515 
‰ì_obje˘
(
•
->
u
.
ob
, "f_virtualp");

3516 
put_numbî
(
i
 != 0);

3520 #ifde‡
F_WRITE


3522 
f_wrôe
 
PROT
(())

3524 
do_wrôe
(
•
);

3525 
p›_°ack
();

3529 #ifde‡
F_WRITE_BYTES


3531 
f_wrôe_byãs
 
PROT
(())

3533 
	gi
;

3535 
	g•
->
	gty≥
) {

3536 
	gT_NUMBER
:

3538 
√töt
;

3539 *
	g√tbuf
;

3541 i‡(!
	g•
->
	gu
.
	gnumbî
Ë
bad_¨g
(3, 
F_WRITE_BYTES
);

3542 
	g√töt
 = 
ht⁄l
(
•
->
u
.
numbî
);

3544 
	g√tbuf
 = (*Ë&
√töt
;

3545 
	gi
 = 
wrôe_byãs
((
•
 - 2)->
u
.
°rög
, (• - 1)->u.
numbî
, 
√tbuf
,

3550 #i‚de‡
NO_BUFFER_TYPE


3551 
	gT_BUFFER
:

3553 
i
 = 
wrôe_byãs
((
•
 - 2)->
u
.
°rög
, (• - 1)->u.
numbî
,

3554 (*Ë
•
->
u
.
buf
->
ôem
, sp->u.buf->
size
);

3559 
	gT_STRING
:

3561 
i
 = 
wrôe_byãs
((
•
 - 2)->
u
.
°rög
, (• - 1)->u.
numbî
,

3562 
•
->
u
.
°rög
, 
SVALUE_STRLEN
(sp));

3568 #ifde‡
NO_BUFFER_TYPE


3569 
bad_¨gumít
(
•
, 
T_STRING
 | 
T_NUMBER
, 3, 
F_WRITE_BYTES
);

3571 
bad_¨gumít
(
•
, 
T_BUFFER
 | 
T_STRING
 | 
T_NUMBER
, 3, 
F_WRITE_BYTES
);

3575 
‰ì_svÆue
(
•
--, "f_write_bytes");

3576 
‰ì_°rög_svÆue
(--
•
);

3577 
put_numbî
(
i
);

3581 #ifde‡
F_WRITE_BUFFER


3583 
f_wrôe_buf„r
 
PROT
(())

3585 
	gi
;

3587 i‡((
	g•
-2)->
	gty≥
 =
T_STRING
) {

3588 
f_wrôe_byãs
();

3592 
	g•
->
	gty≥
) {

3593 
	gT_NUMBER
:

3595 
√töt
;

3596 *
	g√tbuf
;

3598 
	g√töt
 = 
ht⁄l
(
•
->
u
.
numbî
);

3600 
	g√tbuf
 = (*Ë&
√töt
;

3601 
	gi
 = 
wrôe_buf„r
((
•
 - 2)->
u
.
buf
, (• - 1)->u.
numbî
, 
√tbuf
,

3606 
	gT_BUFFER
:

3608 
i
 = 
wrôe_buf„r
((
•
 - 2)->
u
.
buf
, (• - 1)->u.
numbî
,

3609 (*Ë
•
->
u
.
buf
->
ôem
, sp->u.buf->
size
);

3613 
	gT_STRING
:

3615 
i
 = 
wrôe_buf„r
((
•
 - 2)->
u
.
buf
, (• - 1)->u.
numbî
,

3616 
•
->
u
.
°rög
, 
SVALUE_STRLEN
(sp));

3622 
bad_¨gumít
(
•
, 
T_BUFFER
 | 
T_STRING
 | 
T_NUMBER
, 3, 
F_WRITE_BUFFER
);

3625 
‰ì_svÆue
(
•
--, "f_write_buffer");

3626 
‰ì_svÆue
(--
•
, "f_write_buffer");

3627 
put_numbî
(
i
);

3631 #ifde‡
F_WRITE_FILE


3633 
f_wrôe_fûe
 
PROT
(())

3635 
	gÊags
 = 0;

3637 i‡(
	g°_num_¨g
 == 3) {

3638 
Êags
 = (
•
--)->
u
.
numbî
;

3640 
	gÊags
 = 
wrôe_fûe
((
•
 - 1)->
u
.
°rög
, sp->u.°rög, 
Êags
);

3641 
‰ì_°rög_svÆue
(
•
--);

3642 
‰ì_°rög_svÆue
(
•
);

3643 
put_numbî
(
Êags
);

3647 #ifde‡
F_DUMP_FILE_DESCRIPTORS


3649 
f_dump_fûe_des¸ùt‹s
 
PROT
(())

3651 
outbuf„r_t
 
	gout
;

3653 
outbuf_zîo
(&
out
);

3654 
dump_fûe_des¸ùt‹s
(&
out
);

3655 
outbuf_push
(&
out
);

3659 #ifde‡
F_RECLAIM_OBJECTS


3660 
f_ª˛aim_obje˘s
 
PROT
(())

3662 
push_numbî
(
ª˛aim_obje˘s
());

3666 #ifde‡
F_MEMORY_INFO


3668 
f_mem‹y_öfo
 
PROT
(())

3670 
	gmem
, 
	gsw≠≥d
;

3671 
obje˘_t
 *
	gob
;

3673 i‡(
	g°_num_¨g
 == 0) {

3674 
ªs
, 
tŸ
;

3676 i‡(
	gª£rved_¨ó
)

3677 
	gªs
 = 
RESERVED_SIZE
;

3679 
	gªs
 = 0;

3680 
	gtŸ
 = 
tŸÆ_¥og_block_size
 +

3681 #ifde‡
ARRAY_STATS


3682 
tŸÆ_¨øy_size
 +

3684 
tŸÆ_m≠pög_size
 +

3685 
tŸ_Æloc_obje˘_size
 +

3686 
tŸ_Æloc_£¡í˚
 * (
£¡í˚_t
) +

3687 
num_u£r
 * (
öãø˘ive_t
) +

3688 
show_ŸabÀ_°©us
(0, -1) +

3689 
hóπ_bót_°©us
(0, -1) +

3690 
add_°rög_°©us
(0, -1) +

3691 
¥öt_ˇŒ_out_ußge
(0, -1Ë+ 
	gªs
;

3692 
push_numbî
(
tŸ
);

3695 i‡(
	g•
->
	gty≥
 !
T_OBJECT
)

3696 
bad_¨gumít
(
•
, 
T_OBJECT
, 1, 
F_MEMORY_INFO
);

3697 
	gob
 = 
•
->
u
.
ob
;

3699 i‡((
	gsw≠≥d
 = (
ob
->
Êags
 & 
O_SWAPPED
)) == O_SWAPPED)

3700 
lﬂd_ob_‰om_sw≠
(
ob
);

3706 
	gmem
 = 
ob
->
¥og
->
tŸÆ_size
;

3707 i‡(
	gsw≠≥d
 =
O_SWAPPED
)

3708 
sw≠
(
ob
);

3709 
	gmem
 +(
d©a_size
(
ob
Ë+ (
obje˘_t
));

3710 
‰ì_obje˘
(
ob
, "f_memory_info");

3711 
put_numbî
(
mem
);

3715 #ifde‡
F_RELOAD_OBJECT


3717 
f_ªlﬂd_obje˘
 
PROT
(())

3719 
ªlﬂd_obje˘
(
•
->
u
.
ob
);

3720 
‰ì_obje˘
((
•
--)->
u
.
ob
, "f_reload_object");

3724 #ifde‡
F_QUERY_SHADOWING


3726 
f_quîy_shadowög
 
PROT
(())

3728 
obje˘_t
 *
	gob
;

3730 i‡((
	g•
->
	gty≥
 =
T_OBJECT
Ë&& (
ob
 = 
•
->
u
.ob)->
shadowög
) {

3731 
add_ªf
(
ob
->
shadowög
, "query_shadowing(ob)");

3732 
	g•
->
	gu
.
	gob
 = 
ob
->
shadowög
;

3733 
‰ì_obje˘
(
ob
, "f_query_shadowing");

3735 
‰ì_svÆue
(
•
, "f_query_shadowing");

3736 *
	g•
 = 
c⁄°0
;

3741 #ifde‡
F_SET_RESET


3743 
f_£t_ª£t
 
PROT
(())

3745 i‡(
	g°_num_¨g
 == 2) {

3746 (
•
 - 1)->
u
.
ob
->
√xt_ª£t
 = 
cuºít_time
 + sp->u.
numbî
;

3747 
‰ì_obje˘
((--
•
)->
u
.
ob
, "f_set_reset:1");

3748 
	g•
--;

3750 
	g•
->
	gu
.
	gob
->
	g√xt_ª£t
 = 
cuºít_time
 + 
TIME_TO_RESET
 / 2 +

3751 
øndom_numbî
(
TIME_TO_RESET
 / 2);

3752 
‰ì_obje˘
((
•
--)->
u
.
ob
, "f_set_reset:2");

3757 #ifde‡
F_FLOATP


3759 
f_Êﬂç
 
PROT
(())

3761 i‡(
	g•
->
	gty≥
 =
T_REAL
) {

3762 
•
->
ty≥
 = 
T_NUMBER
;

3763 
	g•
->
	gu
.
	gnumbî
 = 1;

3766 
‰ì_svÆue
(
•
, "f_floatp");

3767 *
	g•
 = 
c⁄°0
;

3772 #ifde‡
F_FLUSH_MESSAGES


3774 
f_Êush_mesßges
 
PROT
(()) {

3775 i‡(
	g°_num_¨g
 == 1) {

3776 i‡(
•
->
u
.
ob
->
öãø˘ive
)

3777 
Êush_mesßge
(
•
->
u
.
ob
->
öãø˘ive
);

3778 
p›_°ack
();

3780 
	gi
;

3782 
	gi
 = 0; i < 
	gmax_u£rs
; i++) {

3783 i‡(
	gÆl_u£rs
[
i
] && !◊Œ_u£rs[i]->
	giÊags
 & 
	gCLOSING
))

3784 
Êush_mesßge
(
Æl_u£rs
[
i
]);

3790 #ifde‡
F_FIRST_INVENTORY


3792 
f_fú°_övít‹y
 
PROT
(())

3794 
obje˘_t
 *
	gob
;

3796 
	gob
 = 
fú°_övít‹y
(
•
);

3797 
‰ì_svÆue
(
•
, "f_first_inventory");

3798 i‡(
	gob
Ë{ 
put_uƒe„d_unde°ed_obje˘
(
ob
, "first_inventory"); }

3799 *
	g•
 = 
c⁄°0
;

3803 #ifde‡
F_NEXT_INVENTORY


3805 
f_√xt_övít‹y
 
PROT
(())

3807 
obje˘_t
 *
	gob
;

3809 
	gob
 = 
•
->
u
.
ob
->
√xt_öv
;

3810 
‰ì_obje˘
(
•
->
u
.
ob
, "f_next_inventory");

3812 #ifde‡
F_SET_HIDE


3813 
	gob
 && (ob->
	gÊags
 & 
	gO_HIDDEN
Ë&& !
obje˘_visibÀ
(
ob
))

3814 
	gob
 = 
ob
->
√xt_öv
;

3817 i‡(
	gob
) {

3818 
add_ªf
(
ob
, "next_inventory(ob) : 1");

3819 
	g•
->
	gu
.
	gob
 = 
ob
;

3821 *
	g•
 = 
c⁄°0
;

	@efuns_main.h

1 #i‚de‡
EFUNS_MAIN_H


2 
	#EFUNS_MAIN_H


	)

4 
	~"Õc_ö˛.h
"

10 
ˇŒ_‹igö
;

12 
öhîôs
 
PROT
((
¥ogøm_t
 *,Örogram_t *));

13 
add_m≠pög_∑ú
 
PROT
((
m≠pög_t
 *, *, ));

14 
add_m≠pög_°rög
 
PROT
((
m≠pög_t
 *, *, *));

15 
add_m≠pög_obje˘
 
PROT
((
m≠pög_t
 *, *, 
obje˘_t
 *));

16 
add_m≠pög_¨øy
 
PROT
((
m≠pög_t
 *, *, 
¨øy_t
 *));

17 
add_m≠pög_sh¨ed_°rög
 
PROT
((
m≠pög_t
 *, *, *));

	@efuns_port.c

10 
	~"°d.h
"

11 
	~"Õc_ö˛.h
"

12 
	~"fûe_ö˛.h
"

13 
	~"löt.h
"

14 
	~"ö˛ude/loˇ…ime.h
"

15 
	~"p‹t.h
"

16 
	~"¸y±.h
"

17 
	~"efun_¥Ÿos.h
"

20 #i‡(
deföed
(
TIMES
Ë&& !deföed(
RUSAGE
))

22 
	~<limôs.h
>

25 #ifde‡
F_CRYPT


26 
	#SALT_LEN
 8

	)

29 
f_¸y±
 
PROT
(())

31 *
	gªs
, *
	gp
, 
	gß…
[
SALT_LEN
 + 1];

32 *
	gchoi˚
 =

35 i‡(
	g•
->
	gty≥
 =
T_STRING
 && 
SVALUE_STRLEN
(
•
) >= 2) {

36 
p
 = 
•
->
u
.
°rög
;

38 
	gi
;

40 
	gi
 = 0; i < 
	gSALT_LEN
; i++)

41 
	gß…
[
i
] = 
choi˚
[
øndom_numbî
(
°æí
(choice))];

43 
	gß…
[
SALT_LEN
] = 0;

44 
	gp
 = 
ß…
;

47 
	gªs
 = 
°rög_c›y
(
CRYPT
((
•
-1)->
u
.
°rög
, 
p
), "f_crypt");

48 
p›_°ack
();

49 
‰ì_°rög_svÆue
(
•
);

50 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

51 
	g•
->
	gu
.
	g°rög
 = 
ªs
;

55 #ifde‡
F_OLDCRYPT


57 
f_ﬁd¸y±
 
PROT
(()) {

58 *
	gªs
, 
	gß…
[3];

59 *
	gchoi˚
 =

62 i‡(
	g•
->
	gty≥
 =
T_STRING
 && 
SVALUE_STRLEN
(
•
) >= 2) {

63 
ß…
[0] = 
•
->
u
.
°rög
[0];

64 
	gß…
[1] = 
•
->
u
.
°rög
[1];

65 
‰ì_°rög_svÆue
(
•
--);

67 
	gß…
[0] = 
choi˚
[
øndom_numbî
(
°æí
(choice))];

68 
	gß…
[1] = 
choi˚
[
øndom_numbî
(
°æí
(choice))];

69 
p›_°ack
();

71 
	gß…
[2] = 0;

72 
	gªs
 = 
°rög_c›y
(
OLDCRYPT
(
•
->
u
.
°rög
, 
ß…
), "f_crypt");

73 
‰ì_°rög_svÆue
(
•
);

74 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

75 
	g•
->
	gu
.
	g°rög
 = 
ªs
;

79 #ifde‡
F_LOCALTIME


83 
f_loˇ…ime
 
PROT
(())

85 
tm
 *
	gtm
;

86 
¨øy_t
 *
	gvec
;

87 
time_t
 
	g…
;

89 #ifde‡
£quít


90 
timez⁄e
 
	gtz
;

93 
	g…
 = 
•
->
u
.
numbî
;

94 
	gtm
 = 
loˇ…ime
(&
…
);

96 
	gvec
 = 
Æloˇã_em±y_¨øy
(11);

97 
	gvec
->
	gôem
[
LT_SEC
].
	gty≥
 = 
T_NUMBER
;

98 
	gvec
->
	gôem
[
LT_SEC
].
	gu
.
	gnumbî
 = 
tm
->
tm_£c
;

99 
	gvec
->
	gôem
[
LT_MIN
].
	gty≥
 = 
T_NUMBER
;

100 
	gvec
->
	gôem
[
LT_MIN
].
	gu
.
	gnumbî
 = 
tm
->
tm_mö
;

101 
	gvec
->
	gôem
[
LT_HOUR
].
	gty≥
 = 
T_NUMBER
;

102 
	gvec
->
	gôem
[
LT_HOUR
].
	gu
.
	gnumbî
 = 
tm
->
tm_hour
;

103 
	gvec
->
	gôem
[
LT_MDAY
].
	gty≥
 = 
T_NUMBER
;

104 
	gvec
->
	gôem
[
LT_MDAY
].
	gu
.
	gnumbî
 = 
tm
->
tm_mday
;

105 
	gvec
->
	gôem
[
LT_MON
].
	gty≥
 = 
T_NUMBER
;

106 
	gvec
->
	gôem
[
LT_MON
].
	gu
.
	gnumbî
 = 
tm
->
tm_m⁄
;

107 
	gvec
->
	gôem
[
LT_YEAR
].
	gty≥
 = 
T_NUMBER
;

108 
	gvec
->
	gôem
[
LT_YEAR
].
	gu
.
	gnumbî
 = 
tm
->
tm_yór
 + 1900;

109 
	gvec
->
	gôem
[
LT_WDAY
].
	gty≥
 = 
T_NUMBER
;

110 
	gvec
->
	gôem
[
LT_WDAY
].
	gu
.
	gnumbî
 = 
tm
->
tm_wday
;

111 
	gvec
->
	gôem
[
LT_YDAY
].
	gty≥
 = 
T_NUMBER
;

112 
	gvec
->
	gôem
[
LT_YDAY
].
	gu
.
	gnumbî
 = 
tm
->
tm_yday
;

113 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gty≥
 = 
T_NUMBER
;

114 
	gvec
->
	gôem
[
LT_ZONE
].
	gty≥
 = 
T_STRING
;

115 
	gvec
->
	gôem
[
LT_ZONE
].
	gsubty≥
 = 
STRING_MALLOC
;

116 
	gvec
->
	gôem
[
LT_ISDST
].
	gty≥
 = 
T_NUMBER
;

117 #i‡
deföed
(
BSD42
Ë|| deföed(
≠ﬁlo
Ë|| deföed(
_AUX_SOURCE
) \

118 || 
deföed
(
OLD_ULTRIX
)

120 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 0;

121 
	gvec
->
	gôem
[
LT_ZONE
].
	gty≥
 = 
T_NUMBER
;

122 
	gvec
->
	gôem
[
LT_ZONE
].
	gu
.
	gnumbî
 = 0;

123 
	gvec
->
	gôem
[
LT_ISDST
].
	gu
.
	gnumbî
 = -1;

125 
	gvec
->
	gôem
[
LT_ISDST
].
	gu
.
	gnumbî
 = 
tm
->
tm_isd°
;

126 #i‡
deföed
(
£quít
)

127 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 0;

128 
gëtimeofday
(
NULL
, &
tz
);

129 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 
tz
.
tz_möuãswe°
;

130 
	gvec
->
	gôem
[
LT_ZONE
].
	gu
.
	g°rög
 =

131 
°rög_c›y
(
timez⁄e
(
tz
.
tz_möuãswe°
, 
tm
->
tm_isd°
), "f_localtime");

133 #i‡(
deföed
(
hpux
Ë|| deföed(
_SEQUENT_
Ë|| deföed(
_AIX
Ë|| deföed(
SunOS_5
) \

134 || 
deföed
(
SVR4
Ë|| deföed(
sgi
Ë|| deföed(
löux
Ë|| deföed(
¸ay
) \

135 || 
deföed
(
LATTICE
Ë|| deföed(
SCO
))

136 i‡(!
	gtm
->
	gtm_isd°
) {

137 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 
timez⁄e
;

138 
	gvec
->
	gôem
[
LT_ZONE
].
	gu
.
	g°rög
 = 
°rög_c›y
(
tz«me
[0], "f_localtime");

140 #i‡(
deföed
(
_AIX
Ë|| deföed(
hpux
Ë|| deföed(
löux
Ë|| deföed(
¸ay
) \

141 || 
deföed
(
LATTICE
))

142 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 
timez⁄e
;

144 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 
Ætz⁄e
;

146 
	gvec
->
	gôem
[
LT_ZONE
].
	gu
.
	g°rög
 = 
°rög_c›y
(
tz«me
[1], "f_localtime");

149 #i‚de‡
WIN32


150 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 
tm
->
tm_gmtoff
;

151 
	gvec
->
	gôem
[
LT_ZONE
].
	gu
.
	g°rög
 = 
°rög_c›y
(
tm
->
tm_z⁄e
, "f_localtime");

153 
	gvec
->
	gôem
[
LT_GMTOFF
].
	gu
.
	gnumbî
 = 
_timez⁄e
;

154 
	gvec
->
	gôem
[
LT_ZONE
].
	gu
.
	g°rög
 = 
°rög_c›y
(
_tz«me
[
_daylight
?1:0],"f_localtime");

159 
put_¨øy
(
vec
);

163 #ifde‡
F_RUSAGE


164 #ifde‡
WIN32


165 
f_rußge
 
PROT
(())

167 
îr‹
("rusage()Çot supported under Windows.\n");

171 #ifde‡
RUSAGE


173 
f_rußge
 
PROT
(())

175 
rußge
 
	grus
;

176 
m≠pög_t
 *
	gm
;

177 
	gu£πime
, 
	g°ime
;

178 
	gmaxrss
;

180 i‡(
gërußge
(
RUSAGE_SELF
, &
rus
) < 0) {

181 
	gm
 = 
Æloˇã_m≠pög
(0);

184 
	gu£πime
 = 
rus
.
ru_utime
.
tv_£c
 * 1000 +Ñus.ru_utime.
tv_u£c
 / 1000;

185 
	g°ime
 = 
rus
.
ru_°ime
.
tv_£c
 * 1000 +Ñus.ru_°ime.
tv_u£c
 / 1000;

187 
	gu£πime
 = 
rus
.
ru_utime
.
tv_£c
 * 1000 +Ñus.ru_utime.
tv_n£c
 / 1000000;

188 
	g°ime
 = 
rus
.
ru_°ime
.
tv_£c
 * 1000 +Ñus.ru_°ime.
tv_n£c
 / 1000000;

190 
	gmaxrss
 = 
rus
.
ru_maxrss
;

191 #ifde‡
sun


192 
	gmaxrss
 *
gë∑gesize
() / 1024;

194 
	gm
 = 
Æloˇã_m≠pög
(16);

195 
add_m≠pög_∑ú
(
m
, "utime", 
u£πime
);

196 
add_m≠pög_∑ú
(
m
, "°ime", 
°ime
);

197 
add_m≠pög_∑ú
(
m
, "maxrss", 
maxrss
);

198 
add_m≠pög_∑ú
(
m
, "ixrss", 
rus
.
ru_ixrss
);

199 
add_m≠pög_∑ú
(
m
, "idrss", 
rus
.
ru_idrss
);

200 
add_m≠pög_∑ú
(
m
, "i§ss", 
rus
.
ru_i§ss
);

201 
add_m≠pög_∑ú
(
m
, "möÊt", 
rus
.
ru_möÊt
);

202 
add_m≠pög_∑ú
(
m
, "majÊt", 
rus
.
ru_majÊt
);

203 
add_m≠pög_∑ú
(
m
, "nsw≠", 
rus
.
ru_nsw≠
);

204 
add_m≠pög_∑ú
(
m
, "öblock", 
rus
.
ru_öblock
);

205 
add_m≠pög_∑ú
(
m
, "oublock", 
rus
.
ru_oublock
);

206 
add_m≠pög_∑ú
(
m
, "msg¢d", 
rus
.
ru_msg¢d
);

207 
add_m≠pög_∑ú
(
m
, "msgrcv", 
rus
.
ru_msgrcv
);

208 
add_m≠pög_∑ú
(
m
, "nsig«ls", 
rus
.
ru_nsig«ls
);

209 
add_m≠pög_∑ú
(
m
, "nvcsw", 
rus
.
ru_nvcsw
);

210 
add_m≠pög_∑ú
(
m
, "nivcsw", 
rus
.
ru_nivcsw
);

212 
push_ª„d_m≠pög
(
m
);

216 #ifde‡
GET_PROCESS_STATS


218 
f_rußge
 
PROT
(())

220 
¥o˚ss_°©s
 
	gps
;

221 
m≠pög_t
 *
	gm
;

222 
	gutime
, 
	g°ime
, 
	gmaxrss
;

224 i‡(
gë_¥o˚ss_°©s
(
NULL
, 
PS_SELF
, &
ps
, NULL) == -1)

225 
m
 = 
Æloˇã_m≠pög
(0);

227 
	gutime
 = 
ps
.
ps_utime
.
tv_£c
 * 1000 +Ös.ps_utime.
tv_u£c
 / 1000;

228 
	g°ime
 = 
ps
.
ps_°ime
.
tv_£c
 * 1000 +Ös.ps_°ime.
tv_u£c
 / 1000;

229 
	gmaxrss
 = 
ps
.
ps_maxrss
 * 
gë∑gesize
() / 1024;

231 
	gm
 = 
Æloˇã_m≠pög
(19);

232 
add_m≠pög_∑ú
(
m
, "utime", 
utime
);

233 
add_m≠pög_∑ú
(
m
, "°ime", 
°ime
);

234 
add_m≠pög_∑ú
(
m
, "maxrss", 
maxrss
);

235 
add_m≠pög_∑ú
(
m
, "∑geö", 
ps
.
ps_∑geö
);

236 
add_m≠pög_∑ú
(
m
, "ª˛aim", 
ps
.
ps_ª˛aim
);

237 
add_m≠pög_∑ú
(
m
, "zîofûl", 
ps
.
ps_zîofûl
);

238 
add_m≠pög_∑ú
(
m
, "pffö¸", 
ps
.
ps_pffö¸
);

239 
add_m≠pög_∑ú
(
m
, "pffde¸", 
ps
.
ps_pffde¸
);

240 
add_m≠pög_∑ú
(
m
, "sw≠", 
ps
.
ps_sw≠
);

241 
add_m≠pög_∑ú
(
m
, "sysˇŒ", 
ps
.
ps_sysˇŒ
);

242 
add_m≠pög_∑ú
(
m
, "vﬁcsw", 
ps
.
ps_vﬁcsw
);

243 
add_m≠pög_∑ú
(
m
, "övﬁcsw", 
ps
.
ps_övﬁcsw
);

244 
add_m≠pög_∑ú
(
m
, "sig«l", 
ps
.
ps_sig«l
);

245 
add_m≠pög_∑ú
(
m
, "Ãód", 
ps
.
ps_Ãód
);

246 
add_m≠pög_∑ú
(
m
, "lwrôe", 
ps
.
ps_lwrôe
);

247 
add_m≠pög_∑ú
(
m
, "bªad", 
ps
.
ps_bªad
);

248 
add_m≠pög_∑ú
(
m
, "bwrôe", 
ps
.
ps_bwrôe
);

249 
add_m≠pög_∑ú
(
m
, "phªad", 
ps
.
ps_phªad
);

250 
add_m≠pög_∑ú
(
m
, "phwrôe", 
ps
.
ps_phwrôe
);

252 
push_ª„d_m≠pög
(
m
);

256 #ifde‡
TIMES


264 
f_rußge
 
PROT
(())

266 
m≠pög_t
 *
	gm
;

267 
tms
 
	gt
;

269 
times
(&
t
);

270 
	gm
 = 
Æloˇã_m≠pög
(2);

271 
add_m≠pög_∑ú
(
m
, "utime", 
t
.
tms_utime
 * 1000 / 
CLK_TCK
);

272 
add_m≠pög_∑ú
(
m
, "°ime", 
t
.
tms_°ime
 * 1000 / 
CLK_TCK
);

273 
push_ª„d_m≠pög
(
m
);

278 #ifde‡
LATTICE


281 
f_rußge
 
PROT
(())

283 
m≠pög_t
 *
	gm
;

284 
	gi
;

285 
	g˛ock
[2];

287 
	gi
 = 
timî
(
˛ock
);

288 
	gm
 = 
Æloˇã_m≠pög
(2);

289 
add_m≠pög_∑ú
(
m
, "utime", 
i
 ? 0 : 
˛ock
[0] * 1000 + clock[1] / 1000);

290 
add_m≠pög_∑ú
(
m
, "°ime", 
i
 ? 0 : 
˛ock
[0] * 1000 + clock[1] / 1000);

291 
push_ª„d_m≠pög
(
m
);

306 #ifde‡
F_MALLOC_CHECK


312 
f_mÆloc_check
 
PROT
(())

314 
push_numbî
(
NXMÆlocCheck
());

318 #ifde‡
F_MALLOC_DEBUG


323 
f_mÆloc_debug
 
PROT
(())

325 
	gÀvñ
;

327 
	gÀvñ
 = 
•
->
u
.
numbî
;

328 i‡(
	gÀvñ
 < 0) {

329 
	grc
;

331 
	grc
 = 
mÆloc_debug
(0);

332 
mÆloc_sögÀthªaded
();

333 
	g•
->
	gu
.
	gnumbî
 = 
rc
;

335 
	g•
->
	gu
.
	gnumbî
 = 
mÆloc_debug
(
Àvñ
);

	@eoperators.c

6 
	#SUPPRESS_COMPILER_INLINES


	)

7 
	~"°d.h
"

8 
	~"Õc_ö˛.h
"

9 
	~"efuns_ö˛.h
"

10 
	~"backíd.h
"

11 
	~"∑r£.h
"

12 
	~"sw≠.h
"

13 #ifde‡
TRACE


14 
	~"comm.h
"

16 
	~"compûî.h
"

17 
	~"simul_efun.h
"

18 
	~"e›î©‹s.h
"

20 
INLINE
 
	$f_™d
()

22 i‡(
•
->
ty≥
 =
T_ARRAY
 && (sp - 1)->type == T_ARRAY) {

23 
•
--;

24 
•
->
u
.
¨r
 = 
	`öãr£˘_¨øy
((sp + 1)->u.arr, sp->u.arr);

27 
	`CHECK_TYPES
(
•
 - 1, 
T_NUMBER
, 1, 
F_AND
);

28 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_AND
);

29 
•
--;

30 
•
->
u
.
numbî
 &= (sp + 1)->u.number;

31 
•
->
subty≥
 = 0;

32 
	}
}

34 
INLINE
 

35 
	$f_™d_eq
()

37 
svÆue_t
 *
¨gp
;

39 
¨gp
 = (
•
--)->
u
.
lvÆue
;

41 i‡(
¨gp
->
ty≥
 =
T_ARRAY
 && 
•
->type == T_ARRAY) {

42 
•
->
u
.
¨r
 = 
¨gp
->u.¨∏
	`öãr£˘_¨øy
(argp->u.arr, sp->u.arr);

43 
•
->
u
.
¨r
->
ªf
++;

46 i‡(
¨gp
->
ty≥
 !
T_NUMBER
)

47 
	`îr‹
("BadÜeftÅypeÅo &=\n");

48 i‡(
•
->
ty≥
 !
T_NUMBER
)

49 
	`îr‹
("BadÑightÅypeÅo &=\n");

50 
•
->
u
.
numbî
 = 
¨gp
->u.number &= sp->u.number;

51 
•
->
subty≥
 = 0;

52 
	}
}

54 
INLINE
 

55 
	$f_div_eq
()

57 
svÆue_t
 *
¨gp
 = (
•
--)->
u
.
lvÆue
;

59 
¨gp
->
ty≥
 | 
•
->type) {

61 
T_NUMBER
:

63 i‡(!
•
->
u
.
numbî
Ë
	`îr‹
("Division by 0nn\n");

64 
•
->
u
.
numbî
 = 
¨gp
->u.number /= sp->u.number;

65 
•
->
subty≥
 = 0;

69 
T_REAL
:

71 i‡(
•
->
u
.
ªÆ
 =0.0Ë
	`îr‹
("Division by 0rr\n");

72 
•
->
u
.
ªÆ
 = 
¨gp
->u.real /= sp->u.real;

76 
T_NUMBER
|
T_REAL
:

78 i‡(
•
->
ty≥
 =
T_NUMBER
) {

79 i‡(!
•
->
u
.
numbî
Ë
	`îr‹
("Division by 0rn\n");

80 
•
->
u
.
ªÆ
 = 
¨gp
->u.ªÆ /•->u.
numbî
;

81 
•
->
ty≥
 = 
T_REAL
;

83 i‡(
•
->
u
.
ªÆ
 =0.0Ë
	`îr‹
("Division by 0nr\n");

84 
•
->
u
.
ªÆ
 = 
¨gp
->u.
numbî
 /= sp->u.real;

91 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
))Ë
	`îr‹
("BadÑightÅypeÅo /=\n");

92 
	`îr‹
("BadÜeftÅypeÅo /=\n");

95 
	}
}

97 
INLINE
 

98 
	$f_eq
()

100 
i
;

102 
•
->
ty≥
|(sp-1)->type) {

103 
T_NUMBER
:

105 --
•
;

106 
•
->
u
.
numbî
 = sp->u.number == (sp+1)->u.number;

107 
•
->
subty≥
 = 0;

111 
T_REAL
:

113 --
•
;

114 
•
->
ty≥
 = 
T_NUMBER
;

115 
•
->
u
.
numbî
 = sp->u.
ªÆ
 == (sp+1)->u.real;

116 
•
->
subty≥
 = 0;

120 
T_NUMBER
|
T_REAL
:

122 i‡((--
•
)->
ty≥
 =
T_NUMBER
) {

123 
•
->
u
.
numbî
 = sp->u.numbî =(•+1)->u.
ªÆ
;

126 
•
->
u
.
numbî
 = sp->u.
ªÆ
 == (sp+1)->u.number;

127 
•
->
ty≥
 = 
T_NUMBER
;

129 
•
->
subty≥
 = 0;

133 
T_ARRAY
:

135 
i
 = (
•
-1)->
u
.
¨r
 == sp->u.arr;

136 
	`‰ì_¨øy
((
•
--)->
u
.
¨r
);

137 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

141 
T_CLASS
:

143 
i
 = (
•
-1)->
u
.
¨r
 == sp->u.arr;

144 
	`‰ì_˛ass
((
•
--)->
u
.
¨r
);

145 
	`‰ì_˛ass
(
•
->
u
.
¨r
);

149 
T_MAPPING
:

151 
i
 = (
•
-1)->
u
.
m≠
 == sp->u.map;

152 
	`‰ì_m≠pög
((
•
--)->
u
.
m≠
);

153 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

157 
T_STRING
:

159 i‡(
	`SVALUE_STRLEN_DIFFERS
(
•
-1,sp))

160 
i
 = 0;

162 
i
 = !
	`°rcmp
((
•
-1)->
u
.
°rög
, sp->u.string);

163 
	`‰ì_°rög_svÆue
(
•
--);

164 
	`‰ì_°rög_svÆue
(
•
);

168 
T_OBJECT
:

170 
i
 = (
•
-1)->
u
.
ob
 == sp->u.ob;

171 
	`‰ì_obje˘
((
•
--)->
u
.
ob
, "f_eq: 1");

172 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_eq: 2");

176 
T_FUNCTION
:

178 
i
 = (
•
-1)->
u
.
Â
 == sp->u.fp;

179 
	`‰ì_fu≈
((
•
--)->
u
.
Â
);

180 
	`‰ì_fu≈
(
•
->
u
.
Â
);

183 #i‚de‡
NO_BUFFER_TYPE


184 
T_BUFFER
:

186 
i
 = (
•
-1)->
u
.
buf
 == sp->u.buf;

187 
	`‰ì_buf„r
((
•
--)->
u
.
buf
);

188 
	`‰ì_buf„r
(
•
->
u
.
buf
);

193 
	`p›_°ack
();

194 
	`‰ì_svÆue
(
•
, "f_eq");

195 
i
 = 0;

198 
	`put_numbî
(
i
);

199 
	}
}

201 
INLINE
 

202 
	$f_ge
()

204 
i
 = 
•
->
ty≥
;

205 (--
•
)->
ty≥
 | 
i
) {

206 
T_NUMBER
:

207 
•
->
u
.
numbî
 = sp->u.number >= (sp+1)->u.number;

208 
•
->
subty≥
 = 0;

210 
T_REAL
:

211 
i
 = 
•
->
u
.
ªÆ
 >= (sp+1)->u.real;

212 
	`put_numbî
(
i
);

214 
T_NUMBER
 | 
T_REAL
:

215 i‡(
i
 =
T_NUMBER
) {

216 
•
->
ty≥
 = 
T_NUMBER
;

217 
•
->
u
.
numbî
 = sp->u.
ªÆ
 >= (sp+1)->u.number;

219 
•
->
u
.
numbî
 = sp->u.numbî >(•+1)->u.
ªÆ
;

221 
•
->
subty≥
 = 0;

223 
T_STRING
:

224 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp+1)->u.string) >= 0;

225 
	`‰ì_°rög_svÆue
(
•
 + 1);

226 
	`‰ì_°rög_svÆue
(
•
);

227 
	`put_numbî
(
i
);

231 (
•
++)->
ty≥
) {

232 
T_NUMBER
:

233 
T_REAL
:

234 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_GE
);

235 
T_STRING
:

236 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_GE
);

238 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_GE
);

242 
	}
}

244 
INLINE
 

245 
	$f_gt
() {

246 
i
 = 
•
->
ty≥
;

247 (--
•
)->
ty≥
 | 
i
) {

248 
T_NUMBER
:

249 
•
->
u
.
numbî
 = sp->u.number > (sp+1)->u.number;

250 
•
->
subty≥
 = 0;

252 
T_REAL
:

253 
•
->
u
.
numbî
 = sp->u.
ªÆ
 > (sp+1)->u.real;

254 
•
->
ty≥
 = 
T_NUMBER
;

255 
•
->
subty≥
 = 0;

257 
T_NUMBER
 | 
T_REAL
:

258 i‡(
i
 =
T_NUMBER
) {

259 
•
->
ty≥
 = 
T_NUMBER
;

260 
•
->
u
.
numbî
 = sp->u.
ªÆ
 > (sp+1)->u.number;

261 } 
•
->
u
.
numbî
 = sp->u.numbî > (•+1)->u.
ªÆ
;

262 
•
->
subty≥
 = 0;

264 
T_STRING
:

265 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp+1)->u.string) > 0;

266 
	`‰ì_°rög_svÆue
(
•
+1);

267 
	`‰ì_°rög_svÆue
(
•
);

268 
	`put_numbî
(
i
);

272 (
•
++)->
ty≥
) {

273 
T_NUMBER
:

274 
T_REAL
:

275 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_GT
);

276 
T_STRING
:

277 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_GT
);

279 
	`bad_¨gumít
(
•
-1, 
T_NUMBER
 | 
T_REAL
 | 
T_STRING
, 1, 
F_GT
);

283 
	}
}

285 
INLINE
 

286 
	$f_À
()

288 
i
 = 
•
->
ty≥
;

289 (--
•
)->
ty≥
|
i
) {

290 
T_NUMBER
:

291 
•
->
u
.
numbî
 = sp->u.number <= (sp+1)->u.number;

294 
T_REAL
:

295 
•
->
u
.
numbî
 = sp->u.
ªÆ
 <= (sp+1)->u.real;

296 
•
->
ty≥
 = 
T_NUMBER
;

299 
T_NUMBER
|
T_REAL
:

300 i‡(
i
 =
T_NUMBER
) {

301 
•
->
ty≥
 = 
T_NUMBER
;

302 
•
->
u
.
numbî
 = sp->u.
ªÆ
 <= (sp+1)->u.number;

303 } 
•
->
u
.
numbî
 = sp->u.numbî <(•+1)->u.
ªÆ
;

306 
T_STRING
:

307 
i
 = 
	`°rcmp
(
•
->
u
.
°rög
, (sp+1)->u.string) <= 0;

308 
	`‰ì_°rög_svÆue
(
•
+1);

309 
	`‰ì_°rög_svÆue
(
•
);

310 
•
->
ty≥
 = 
T_NUMBER
;

311 
•
->
u
.
numbî
 = 
i
;

316 (
•
++)->
ty≥
) {

317 
T_NUMBER
:

318 
T_REAL
:

319 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_LE
);

321 
T_STRING
:

322 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_LE
);

325 
	`bad_¨gumít
(
•
 - 1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_LE
);

329 
•
->
subty≥
 = 0;

330 
	}
}

332 
INLINE
 

333 
	$f_…
() {

334 
i
 = 
•
->
ty≥
;

335 
i
 | (--
•
)->
ty≥
) {

336 
T_NUMBER
:

337 
•
->
u
.
numbî
 = sp->u.number < (sp+1)->u.number;

339 
T_REAL
:

340 
•
->
u
.
numbî
 = sp->u.
ªÆ
 < (sp+1)->u.real;

341 
•
->
ty≥
 = 
T_NUMBER
;

343 
T_NUMBER
|
T_REAL
:

344 i‡(
i
 =
T_NUMBER
) {

345 
•
->
ty≥
 = 
T_NUMBER
;

346 
•
->
u
.
numbî
 = sp->u.
ªÆ
 < (sp+1)->u.number;

347 } 
•
->
u
.
numbî
 = sp->u.numbî < (•+1)->u.
ªÆ
;

349 
T_STRING
:

350 
i
 = (
	`°rcmp
(
•
->
u
.
°rög
, (sp + 1)->u.string) < 0);

351 
	`‰ì_°rög_svÆue
(
•
+1);

352 
	`‰ì_°rög_svÆue
(
•
);

353 
•
->
ty≥
 = 
T_NUMBER
;

354 
•
->
u
.
numbî
 = 
i
;

357 (
•
++)->
ty≥
) {

358 
T_NUMBER
:

359 
T_REAL
:

360 
	`bad_¨gumít
(
•
, 
T_NUMBER
 | 
T_REAL
, 2, 
F_LT
);

361 
T_STRING
:

362 
	`bad_¨gumít
(
•
, 
T_STRING
, 2, 
F_LT
);

364 
	`bad_¨gumít
(
•
-1, 
T_NUMBER
 | 
T_STRING
 | 
T_REAL
, 1, 
F_LT
);

367 
•
->
subty≥
 = 0;

368 
	}
}

370 
INLINE
 

371 
	$f_lsh
()

373 
	`CHECK_TYPES
((
•
 - 1), 
T_NUMBER
, 1, 
F_LSH
);

374 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_LSH
);

375 
•
--;

376 
•
->
u
.
numbî
 <<= (sp + 1)->u.number;

377 
	}
}

379 
INLINE
 

380 
	$f_lsh_eq
()

382 
svÆue_t
 *
¨gp
;

385 i‡((
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

386 
	`îr‹
("BadÜeftÅypeÅo <<=\n");

387 i‡((--
•
)->
ty≥
 !
T_NUMBER
)

388 
	`îr‹
("BadÑightÅypeÅo <<=\n");

389 
•
->
u
.
numbî
 = 
¨gp
->u.number <<= sp->u.number;

390 
•
->
subty≥
 = 0;

391 
	}
}

393 
INLINE
 

394 
	$f_mod_eq
()

396 
svÆue_t
 *
¨gp
;

398 i‡((
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

399 
	`îr‹
("BadÜeftÅypeÅo %=\n");

400 i‡((--
•
)->
ty≥
 !
T_NUMBER
)

401 
	`îr‹
("BadÑightÅypeÅo %=\n");

402 i‡(
•
->
u
.
numbî
 == 0)

403 
	`îr‹
("Modulo by 0\n");

404 
•
->
u
.
numbî
 = 
¨gp
->u.number %= sp->u.number;

405 
•
->
subty≥
 = 0;

406 
	}
}

408 
INLINE
 

409 
	$f_mu…_eq
()

411 
svÆue_t
 *
¨gp
 = (
•
--)->
u
.
lvÆue
;

413 
¨gp
->
ty≥
 | 
•
->type) {

414 
T_NUMBER
:

416 
•
->
u
.
numbî
 = 
¨gp
->u.number *= sp->u.number;

417 
•
->
subty≥
 = 0;

421 
T_REAL
:

423 
•
->
u
.
ªÆ
 = 
¨gp
->u.real *= sp->u.real;

427 
T_NUMBER
|
T_REAL
:

429 i‡(
•
->
ty≥
 =
T_NUMBER
) {

430 
•
->
ty≥
 = 
T_REAL
;

431 
•
->
u
.
ªÆ
 = 
¨gp
->u.ªÆ *•->u.
numbî
;

434 
•
->
u
.
ªÆ
 = 
¨gp
->u.
numbî
 *= sp->u.real;

439 
T_MAPPING
:

441 
m≠pög_t
 *
m
 = 
	`compo£_m≠pög
(
¨gp
->
u
.
m≠
, 
•
->u.map,0);

442 i‡(
¨gp
->
u
.
m≠
 !
•
->u.map) {

443 
	`p›_°ack
();

444 
	`push_m≠pög
(
m
);

451 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_MAPPING
))Ë
	`îr‹
("BadÑightÅypeÅo *=\n");

452 
	`îr‹
("BadÜeftÅypeÅo *=\n");

455 
	}
}

458 
INLINE
 

459 
	$f_√
()

461 
i
;

463 
•
->
ty≥
|(sp-1)->type) {

464 
T_NUMBER
:

466 --
•
;

467 
•
->
u
.
numbî
 = sp->u.number != (sp+1)->u.number;

468 
•
->
subty≥
 = 0;

472 
T_REAL
:

474 --
•
;

475 
•
->
ty≥
 = 
T_NUMBER
;

476 
•
->
u
.
numbî
 = sp->u.
ªÆ
 != (sp+1)->u.real;

477 
•
->
subty≥
 = 0;

481 
T_NUMBER
|
T_REAL
:

483 i‡((--
•
)->
ty≥
 =
T_NUMBER
) {

484 
•
->
u
.
numbî
 = sp->u.numbî !(•+1)->u.
ªÆ
;

487 
•
->
u
.
numbî
 = sp->u.
ªÆ
 != (sp+1)->u.number;

488 
•
->
ty≥
 = 
T_NUMBER
;

490 
•
->
subty≥
 = 0;

494 
T_ARRAY
:

496 
i
 = (
•
-1)->
u
.
¨r
 != sp->u.arr;

497 
	`‰ì_¨øy
((
•
--)->
u
.
¨r
);

498 
	`‰ì_¨øy
(
•
->
u
.
¨r
);

502 
T_CLASS
:

504 
i
 = (
•
-1)->
u
.
¨r
 != sp->u.arr;

505 
	`‰ì_˛ass
((
•
--)->
u
.
¨r
);

506 
	`‰ì_˛ass
(
•
->
u
.
¨r
);

510 
T_MAPPING
:

512 
i
 = (
•
-1)->
u
.
m≠
 != sp->u.map;

513 
	`‰ì_m≠pög
((
•
--)->
u
.
m≠
);

514 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

518 
T_STRING
:

520 i‡(
	`SVALUE_STRLEN_DIFFERS
(
•
-1, sp))

521 
i
 = 1;

523 
i
 = !!
	`°rcmp
((
•
-1)->
u
.
°rög
, sp->u.string);

524 
	`‰ì_°rög_svÆue
(
•
--);

525 
	`‰ì_°rög_svÆue
(
•
);

529 
T_OBJECT
:

531 
i
 = (
•
-1)->
u
.
ob
 != sp->u.ob;

532 
	`‰ì_obje˘
((
•
--)->
u
.
ob
, "f_ne: 1");

533 
	`‰ì_obje˘
(
•
->
u
.
ob
, "f_ne: 2");

537 
T_FUNCTION
:

539 
i
 = (
•
-1)->
u
.
Â
 != sp->u.fp;

540 
	`‰ì_fu≈
((
•
--)->
u
.
Â
);

541 
	`‰ì_fu≈
(
•
->
u
.
Â
);

545 #i‚de‡
NO_BUFFER_TYPE


546 
T_BUFFER
:

548 
i
 = (
•
-1)->
u
.
buf
 != sp->u.buf;

549 
	`‰ì_buf„r
((
•
--)->
u
.
buf
);

550 
	`‰ì_buf„r
(
•
->
u
.
buf
);

556 
	`p›_°ack
();

557 
	`‰ì_svÆue
(
•
, "f_ne");

558 
i
 = 1;

560 
•
->
ty≥
 = 
T_NUMBER
;

561 
•
->
subty≥
 = 0;

562 
•
->
u
.
numbî
 = 
i
;

563 
	}
}

565 
INLINE
 

566 
	$f_‹
()

568 i‡(
•
->
ty≥
 =
T_ARRAY
 && (sp - 1)->type == T_ARRAY) {

569 
•
--;

570 
•
->
u
.
¨r
 = 
	`uni⁄_¨øy
(sp->u.arr, (sp+1)->u.arr);

573 
	`CHECK_TYPES
((
•
 - 1), 
T_NUMBER
, 1, 
F_OR
);

574 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_OR
);

575 
•
--;

576 
•
->
u
.
numbî
 |= (sp + 1)->u.number;

577 
	}
}

579 
INLINE
 

580 
	$f_‹_eq
()

582 
svÆue_t
 *
¨gp
;

584 
¨gp
 = (
•
--)->
u
.
lvÆue
;

585 i‡(
¨gp
->
ty≥
 =
T_ARRAY
 && 
•
->type == T_ARRAY) {

586 
¨gp
->
u
.
¨r
 = 
•
->u.¨∏
	`uni⁄_¨øy
(argp->u.arr, sp->u.arr);

587 
•
->
u
.
¨r
->
ªf
++;

591 i‡(
¨gp
->
ty≥
 !
T_NUMBER
)

592 
	`îr‹
("BadÜeftÅypeÅo |=\n");

593 i‡(
•
->
ty≥
 !
T_NUMBER
)

594 
	`îr‹
("BadÑightÅypeÅo |=\n");

595 
•
->
u
.
numbî
 = 
¨gp
->u.number |= sp->u.number;

596 
•
->
subty≥
 = 0;

597 
	}
}

599 
INLINE
 

600 
	$f_∑r£_comm™d
()

602 
svÆue_t
 *
¨g
;

603 
svÆue_t
 *
Â
;

604 
i
;

605 
num_¨g
;

610 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
);

611 
pc
++;

616 
¨g
 = 
•
 - 2;

617 
	`CHECK_TYPES
(&
¨g
[0], 
T_STRING
, 1, 
F_PARSE_COMMAND
);

618 
	`CHECK_TYPES
(&
¨g
[1], 
T_OBJECT
 | 
T_ARRAY
, 2, 
F_PARSE_COMMAND
);

619 
	`CHECK_TYPES
(&
¨g
[2], 
T_STRING
, 3, 
F_PARSE_COMMAND
);

625 
Â
 = 
•
;

626 
	`CHECK_STACK_OVERFLOW
(
num_¨g
 + 1);

627 
•
 +
num_¨g
 + 1;

628 
¨g
 = 
•
;

629 *(
¨g
--Ë*(
Â
--);

630 *(
¨g
--Ë*(
Â
--);

632 *(
¨g
Ë*(
Â
);

633 
Â
->
ty≥
 = 
T_NUMBER
;

638 
i
 = 1; i <
num_¨g
; i++)

639 
Â
[
i
].
ty≥
 = 
T_INVALID
;

644 
i
 = 
	`∑r£
(
¨g
[0].
u
.
°rög
, &¨g[1],árg[2].u.°rög, &
Â
[1], 
num_¨g
);

649 
	`p›_3_ñems
();

654 
Â
->
u
.
numbî
 = 
i
;

655 
Â
->
subty≥
 = 0;

656 
	}
}

658 
INLINE
 

659 
f_ønge
 
	$P1
(, 
code
)

661 
‰om
, 
to
, 
Àn
;

663 i‡((
•
-2)->
ty≥
 !
T_NUMBER
)

664 
	`îr‹
("Start ofÑange [ .. ] interval must beáÇumber.\n");

665 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

666 
	`îr‹
("End ofÑange [ .. ] interval must beáÇumber.\n");

668 
•
->
ty≥
) {

669 
T_STRING
:

671 *
ªs
 = 
•
->
u
.
°rög
;

673 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

674 
to
 = (--
•
)->
u
.
numbî
;

675 i‡(
code
 & 0x01Ë
to
 = 
Àn
 -Åo;

676 #ifde‡
OLD_RANGE_BEHAVIOR


677 i‡(
to
 < 0)

678 
to
 +
Àn
;

680 
‰om
 = (--
•
)->
u
.
numbî
;

681 i‡(
code
 & 0x10Ë
‰om
 = 
Àn
 - from;

682 #ifde‡
OLD_RANGE_BEHAVIOR


683 i‡(
‰om
 < 0)

684 
‰om
 +
Àn
;

686 i‡(
‰om
 < 0) from = 0;

688 i‡(
to
 < 
‰om
 || from >
Àn
) {

689 
	`‰ì_°rög_svÆue
(
•
+2);

690 
•
->
ty≥
 = 
T_STRING
;

691 
•
->
subty≥
 = 
STRING_CONSTANT
;

692 
•
->
u
.
°rög
 = "";

696 i‡(
to
 >
Àn
 - 1) {

697 
	`put_mÆlo˚d_°rög
(
	`°rög_c›y
(
ªs
 + 
‰om
, "f_range"));

699 *
tmp
;

700 
tmp
 = 
	`√w_°rög
(
to
 - 
‰om
 + 1, "f_range");

701 
	`°∫˝y
(
tmp
, 
ªs
 + 
‰om
, 
to
 - from + 1);

702 
tmp
[
to
 - 
‰om
 + 1] = '\0';

703 
	`put_mÆlo˚d_°rög
(
tmp
);

705 
	`‰ì_°rög_svÆue
(
•
 + 2);

708 #i‚de‡
NO_BUFFER_TYPE


709 
T_BUFFER
:

711 
buf„r_t
 *
rbuf
 = 
•
->
u
.
buf
;

713 
Àn
 = 
rbuf
->
size
;

714 
to
 = (--
•
)->
u
.
numbî
;

715 i‡(
code
 & 0x01Ë
to
 = 
Àn
 -Åo;

716 #ifde‡
OLD_RANGE_BEHAVIOR


717 i‡(
to
 < 0Ëtÿ+
Àn
;

719 
‰om
 = (--
•
)->
u
.
numbî
;

720 i‡(
code
 & 0x10Ë
‰om
 = 
Àn
 - from;

721 #ifde‡
OLD_RANGE_BEHAVIOR


722 i‡(
‰om
 < 0) {

723 i‡((
‰om
 +
Àn
) < 0) from = 0;

726 i‡(
‰om
 < 0) from = 0;

728 i‡(
to
 < 
‰om
 || from >
Àn
) {

729 
	`‰ì_buf„r
(
rbuf
);

730 
	`put_buf„r
(
	`nuŒ_buf„r
());

733 i‡(
to
 >
Àn
)Åo =Üen - 1;

735 
buf„r_t
 *
nbuf
 = 
	`Æloˇã_buf„r
(
to
 - 
‰om
 + 1);

736 
	`mem˝y
(
nbuf
->
ôem
, 
rbuf
->ôem + 
‰om
, 
to
 - from + 1);

737 
	`‰ì_buf„r
(
rbuf
);

738 
	`put_buf„r
(
nbuf
);

744 
T_ARRAY
:

746 
¨øy_t
 *
v
 = 
•
->
u
.
¨r
;

747 
to
 = (--
•
)->
u
.
numbî
;

748 i‡(
code
 & 0x01Ë
to
 = 
v
->
size
 -Åo;

749 
‰om
 = (--
•
)->
u
.
numbî
;

750 i‡(
code
 & 0x10Ë
‰om
 = 
v
->
size
 - from;

751 
	`put_¨øy
(
	`¶i˚_¨øy
(
v
, 
‰om
, 
to
));

756 
	`îr‹
("Cannot indexÅype '%s' using [ .. ] operator.\n",

757 
	`ty≥_«me
(
•
->
ty≥
));

759 
	}
}

761 
INLINE
 

762 
f_exåa˘_ønge
 
	$P1
(, 
code
)

764 
‰om
, 
Àn
;

766 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

767 
	`îr‹
("Start ofÑange [ .. ] interval must beáÇumber.\n");

769 
•
->
ty≥
) {

770 
T_STRING
:

772 *
ªs
 = 
•
->
u
.
°rög
;

774 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

775 
‰om
 = (--
•
)->
u
.
numbî
;

776 i‡(
code
Ë
‰om
 = 
Àn
 - from;

777 #ifde‡
OLD_RANGE_BEHAVIOR


778 i‡(
‰om
 < 0) {

779 i‡((
‰om
 +
Àn
) < 0) from = 0;

782 i‡(
‰om
 < 0) from = 0;

784 i‡(
‰om
 >
Àn
) {

785 
•
->
ty≥
 = 
T_STRING
;

786 
•
->
subty≥
 = 
STRING_CONSTANT
;

787 
•
->
u
.
°rög
 = "";

789 
	`put_mÆlo˚d_°rög
(
	`°rög_c›y
(
ªs
 + 
‰om
, "f_extract_range"));

790 
	`‰ì_°rög_svÆue
(
•
 + 1);

793 #i‚de‡
NO_BUFFER_TYPE


794 
T_BUFFER
:

796 
buf„r_t
 *
rbuf
 = 
•
->
u
.
buf
;

797 
buf„r_t
 *
nbuf
;

800 
Àn
 = 
rbuf
->
size
;

801 
‰om
 = (--
•
)->
u
.
numbî
;

802 i‡(
code
Ë
‰om
 = 
Àn
 - from;

803 #ifde‡
OLD_RANGE_BEHAVIOR


804 i‡(
‰om
 < 0) {

805 i‡((
‰om
 +
Àn
) < 0) from = 0;

808 i‡(
‰om
 < 0) from = 0;

810 i‡(
‰om
 > 
Àn
) from =Üen;

811 
nbuf
 = 
	`Æloˇã_buf„r
(
Àn
 - 
‰om
);

812 
	`mem˝y
(
nbuf
->
ôem
, 
rbuf
->ôem + 
‰om
, 
Àn
 - from);

813 
	`‰ì_buf„r
(
rbuf
);

814 
	`put_buf„r
(
nbuf
);

819 
T_ARRAY
:

821 
¨øy_t
 *
v
 = 
•
->
u
.
¨r
;

822 
‰om
 = (--
•
)->
u
.
numbî
;

823 i‡(
code
Ë
‰om
 = 
v
->
size
 - from;

824 
	`put_¨øy
(
	`¶i˚_¨øy
(
v
, 
‰om
, v->
size
 - 1));

829 
	`îr‹
("BadárgumentÅo [ .. ]Ñange operator.\n");

831 
	}
}

833 
INLINE
 

834 
	$f_rsh
()

836 
	`CHECK_TYPES
((
•
 - 1), 
T_NUMBER
, 1, 
F_RSH
);

837 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_RSH
);

838 
•
--;

839 
•
->
u
.
numbî
 >>= (sp + 1)->u.number;

840 
	}
}

842 
INLINE
 

843 
	$f_rsh_eq
()

845 
svÆue_t
 *
¨gp
;

847 i‡((
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

848 
	`îr‹
("BadÜeftÅypeÅo >>=\n");

849 i‡((--
•
)->
ty≥
 !
T_NUMBER
)

850 
	`îr‹
("BadÑightÅypeÅo >>=\n");

851 
•
->
u
.
numbî
 = 
¨gp
->u.number >>= sp->u.number;

852 
•
->
subty≥
 = 0;

853 
	}
}

855 
INLINE
 

856 
	$f_sub_eq
()

858 
svÆue_t
 *
¨gp
 = (
•
--)->
u
.
lvÆue
;

860 
¨gp
->
ty≥
 | 
•
->type) {

861 
T_NUMBER
:

863 
•
->
u
.
numbî
 = 
¨gp
->u.number -= sp->u.number;

864 
•
->
subty≥
 = 0;

868 
T_REAL
:

870 
•
->
u
.
ªÆ
 = 
¨gp
->u.real -= sp->u.real;

874 
T_NUMBER
|
T_REAL
:

876 i‡(
•
->
ty≥
 =
T_NUMBER
) {

877 
•
->
ty≥
 = 
T_REAL
;

878 
•
->
u
.
ªÆ
 = 
¨gp
->u.ªÆ -•->u.
numbî
;

879 } 
•
->
u
.
ªÆ
 = 
¨gp
->u.
numbî
 -= sp->u.real;

883 
T_ARRAY
:

885 
•
->
u
.
¨r
 = 
¨gp
->u.¨∏
	`subåa˘_¨øy
(argp->u.arr, sp->u.arr);

886 
•
->
u
.
¨r
->
ªf
++;

890 
T_LVALUE_BYTE
 | 
T_NUMBER
:

892 
c
;

894 
c
 = *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 - 
•
->u.
numbî
;

896 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

897 
	`îr‹
("Strings cannot contain 0 bytes.\n");

898 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

904 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_ARRAY
))Ë
	`îr‹
("BadÑightÅypeÅo -=\n");

905 i‡(!(
¨gp
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_ARRAY
))Ë
	`îr‹
("BadÜeftÅypeÅo -=\n");

906 
	`îr‹
("ArgumentsÅo -= doÇot match inÅype.\n");

909 
	}
}

939 
	#SW_TYPE
 0

	)

940 
	#SW_TABLE
 1

	)

941 
	#SW_ENDTAB
 3

	)

942 
	#SW_DEFAULT
 5

	)

945 
	#L_LOWER
 0

	)

946 
	#L_TYPE
 ((*))

	)

947 
	#L_UPPER
 (
SWITCH_CASE_SIZE
)

	)

948 
	#L_ADDR
 (
SWITCH_CASE_SIZE
 + (*))

	)

949 
	#U_LOWER
 (-
SWITCH_CASE_SIZE
)

	)

950 
	#U_TYPE
 (-
SWITCH_CASE_SIZE
 + (*))

	)

951 
	#U_UPPER
 0

	)

952 
	#U_ADDR
 ((*))

	)

954 
INLINE
 

955 
	$f_swôch
()

957 
off£t
, 
íd_off
;

958 
d
;

959 
POINTER_INT
 
s
;

960 
POINTER_INT
 
r
;

961 
i
;

962 *
l
, *
íd_èb
;

963 
off_èb
[] =

965 0 * 
SWITCH_CASE_SIZE
, 1 * SWITCH_CASE_SIZE, 3 * SWITCH_CASE_SIZE,

966 7 * 
SWITCH_CASE_SIZE
, 15 * SWITCH_CASE_SIZE, 31 * SWITCH_CASE_SIZE,

967 63 * 
SWITCH_CASE_SIZE
, 127 * SWITCH_CASE_SIZE,

968 255 * 
SWITCH_CASE_SIZE
, 511 * SWITCH_CASE_SIZE,

969 1023 * 
SWITCH_CASE_SIZE
, 2047 * SWITCH_CASE_SIZE,

970 4095 * 
SWITCH_CASE_SIZE
, 8191 * SWITCH_CASE_SIZE,

973 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_TABLE
);

974 
	`COPY_SHORT
(&
íd_off
, 
pc
 + 
SW_ENDTAB
);

976 i‡((
i
 = 
	`EXTRACT_UCHAR
(
pc
) >> 4) != 0xf) {

978 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
) {

980 
s
 = 0;

981 
•
--;

982 } i‡(
•
->
ty≥
 =
T_STRING
) {

983 i‡(
•
->
subty≥
 =
STRING_SHARED
) {

984 
s
 = (
POINTER_INT
)
•
->
u
.
°rög
;

985 
	`‰ì_°rög
(
•
->
u
.
°rög
);

986 
•
--;

988 
s
 = (
POINTER_INT
)
	`föd°rög
(
•
->
u
.
°rög
);

989 
	`‰ì_°rög_svÆue
(
•
--);

991 i‡(
s
 == 0) {

996 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

997 
pc
 +
off£t
;

1001 
	`bad_¨gumít
(
•
, 
T_STRING
, 1, 
F_SWITCH
);

1004 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 1, 
F_SWITCH
);

1005 
s
 = (
•
--)->
u
.
numbî
;

1006 
i
 = (Ë
pc
[0] & 0xf;

1008 
íd_èb
 = 
pc
 + 
íd_off
;

1013 i‡(
i
 >= 14) {

1014 i‡(
i
 == 14) {

1015 *
zz
 = 
íd_èb
 - 4;

1018 
l
 = 
pc
 + 
off£t
;

1019 
	`COPY_INT
(&
d
, 
zz
);

1021 
s
 -
d
;

1022 i‡(
s
 >0 && s < (
zz
-
l
)/()) {

1023 
	`COPY_SHORT
(&
off£t
, 
l
 + 
s
 * ());

1024 i‡(
off£t
) {

1025 
pc
 +
off£t
;

1030 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1031 
pc
 +
off£t
;

1034 
	`Áèl
("unsupported switchÅable format.\n");

1043 
l
 = 
pc
 + 
off£t
 + 
off_èb
[
i
];

1044 
d
 = (Ë(
off_èb
[
i
] + 
SWITCH_CASE_SIZE
) >> 1;

1045 i‡(
d
 < 
SWITCH_CASE_SIZE
)

1046 
d
 = 0;

1048 
	`COPY_PTR
(&
r
, 
l
);

1049 i‡(
s
 < 
r
) {

1050 i‡(
d
 < 
SWITCH_CASE_SIZE
) {

1053 
	`COPY_SHORT
(&
off£t
, 
l
 + 
U_TYPE
);

1054 i‡(
off£t
 <= 1) {

1055 
	`COPY_PTR
(&
r
, 
l
 + 
U_LOWER
);

1056 i‡(
s
 >
r
) {

1058 
	`COPY_SHORT
(&
off£t
, 
l
 + 
U_ADDR
);

1059 i‡(!
off£t
) {

1061 
l
 = 
pc
 + 
off£t
 +

1062 (
s
 - 
r
) * ();

1063 
	`COPY_SHORT
(&
off£t
, 
l
);

1069 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1073 
l
 -
d
;

1074 
d
 >>= 1;

1076 } i‡(
s
 > 
r
) {

1077 i‡(
d
 < 
SWITCH_CASE_SIZE
) {

1079 
	`COPY_SHORT
(&
off£t
, 
l
 + 
L_TYPE
);

1080 i‡(
off£t
 <= 1) {

1081 
	`COPY_PTR
(&
r
, 
l
 + 
L_UPPER
);

1082 i‡(
s
 <
r
) {

1084 
	`COPY_SHORT
(&
off£t
, 
l
 + 
L_ADDR
);

1085 i‡(!
off£t
) {

1087 
l
 = 
pc
 + 
off£t
 + (
s
 - 
r
) * ();

1088 
	`COPY_SHORT
(&
off£t
, 
l
);

1094 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1097 
l
 +
d
;

1099 
l
 >
íd_èb
) {

1100 
d
 >>= 1;

1101 i‡(
d
 < 
SWITCH_CASE_SIZE
) {

1102 
d
 = 0;

1105 
l
 -
d
;

1107 i‡(
l
 =
íd_èb
) {

1109 
	`COPY_SHORT
(&
off£t
, 
pc
 + 
SW_DEFAULT
);

1112 
d
 >>= 1;

1116 
	`COPY_SHORT
(&
off£t
, 
l
 + 
U_ADDR
);

1118 i‡(!
l
[
U_TYPE
] && !l[U_TYPE + 1]) {

1120 
	`COPY_PTR
(&
r
, 
l
 + 
U_LOWER
);

1121 
l
 = 
pc
 + 
off£t
 + (
s
 - 
r
) * ();

1122 
	`COPY_SHORT
(&
off£t
, 
l
);

1124 i‡(
off£t
 <= 1) {

1125 
	`COPY_SHORT
(&
off£t
, 
l
 + 
L_ADDR
);

1126 i‡(!
off£t
) {

1128 
l
 = 
pc
 + 
off£t
;

1129 
	`COPY_SHORT
(&
off£t
, 
l
);

1136 
pc
 +
off£t
;

1137 
	}
}

1140 
ˇŒ_simul_efun
 
	$P2
(, 
ödex
, , 
num_¨g
)

1142 
obje˘_t
 *
simul_efun_ob
;

1144 i‡(
cuºít_obje˘
->
Êags
 & 
O_DESTRUCTED
) {

1145 
	`p›_n_ñems
(
num_¨g
);

1146 
	`push_undeföed
();

1150 i‡(
simuls
[
ödex
].
func
) {

1151 #ifde‡
TRACE


1152 i‡(
	`TRACEP
(
TRACE_CALL_OTHER
)) {

1153 
	`do_åa˚
("simul_efu¿", 
simuls
[
ödex
].
func
->
«me
, "\n");

1159 
	`DEBUG_CHECK
(
simul_efun_ob
->
Êags
 & 
O_SWAPPED
, "Simulefun object swapped!\n");

1160 
	`ˇŒ_dúe˘
(
simul_efun_ob
, 
simuls
[
ödex
].index,

1161 
ORIGIN_SIMUL_EFUN
, 
num_¨g
);

1163 
	`îr‹
("Function isÇoÜongerá simul_efun.\n");

1164 
	}
}

1166 
INLINE
 

1167 
	$f_x‹
()

1169 
	`CHECK_TYPES
((
•
 - 1), 
T_NUMBER
, 1, 
F_XOR
);

1170 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
F_XOR
);

1171 
•
--;

1172 
•
->
u
.
numbî
 ^= (sp + 1)->u.number;

1173 
	}
}

1175 
INLINE
 

1176 
	$f_x‹_eq
()

1178 
svÆue_t
 *
¨gp
;

1180 i‡((
¨gp
 = 
•
->
u
.
lvÆue
)->
ty≥
 !
T_NUMBER
)

1181 
	`îr‹
("BadÜeftÅypeÅo ^=\n");

1182 i‡((--
•
)->
ty≥
 !
T_NUMBER
)

1183 
	`îr‹
("BadÑightÅypeÅo ^=\n");

1184 
•
->
u
.
numbî
 = 
¨gp
->u.number ^= sp->u.number;

1185 
	}
}

1187 
INLINE
 

1188 
	$f_fun˘i⁄_c⁄°ru˘‹
()

1190 
fu≈å_t
 *
Â
;

1191 
köd
;

1192 
ödex
;

1194 
köd
 = 
	`EXTRACT_UCHAR
(
pc
++);

1196 
köd
) {

1197 
FP_EFUN
:

1198 
	`LOAD_SHORT
(
ödex
, 
pc
);

1199 
Â
 = 
	`make_efun_fu≈
(
ödex
, 
•
);

1200 
	`p›_°ack
();

1202 
FP_LOCAL
:

1203 
	`LOAD_SHORT
(
ödex
, 
pc
);

1204 
Â
 = 
	`make_lfun_fu≈
(
ödex
, 
•
);

1205 
	`p›_°ack
();

1207 
FP_SIMUL
:

1208 
	`LOAD_SHORT
(
ödex
, 
pc
);

1209 
Â
 = 
	`make_simul_fu≈
(
ödex
, 
•
);

1210 
	`p›_°ack
();

1212 
FP_FUNCTIONAL
:

1213 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

1215 
num_¨g
;

1217 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
++);

1218 
	`LOAD_SHORT
(
ödex
, 
pc
);

1219 
Â
 = 
	`make_fun˘i⁄Æ_fu≈
(
num_¨g
, 0, 
ödex
, 
•
, 
köd
 & 
FP_NOT_BINDABLE
);

1220 
	`p›_°ack
();

1223 
FP_ANONYMOUS
:

1224 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
:

1226 
num_¨g
, 
loˇls
;

1228 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
++);

1229 
loˇls
 = 
	`EXTRACT_UCHAR
(
pc
++);

1230 
	`LOAD_SHORT
(
ödex
, 
pc
);

1231 
Â
 = 
	`make_fun˘i⁄Æ_fu≈
(
num_¨g
, 
loˇls
, 
ödex
, 0, 
köd
 & 
FP_NOT_BINDABLE
);

1235 
	`Áèl
("TriedÅo make unknownÅype of functionÖointer.\n");

1237 
	`push_ª„d_fu≈
(
Â
);

1238 
	}
}

1240 
INLINE
 

1241 
f__evÆu©e
 
PROT
(())

1243 
svÆue_t
 *
	gv
;

1244 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1;

1246 i‡(
	g¨g
->
	gty≥
 !
T_FUNCTION
) {

1247 
p›_n_ñems
(
°_num_¨g
-1);

1250 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
) {

1251 
p›_n_ñems
(
°_num_¨g
);

1252 
push_undeföed
();

1255 
	gv
 = 
ˇŒ_fun˘i⁄_poöãr
(
¨g
->
u
.
Â
, 
°_num_¨g
 - 1);

1256 
‰ì_fu≈
(
¨g
->
u
.
Â
);

1257 
assign_svÆue_no_‰ì
(
•
, 
v
);

1260 
INLINE
 

1261 
	$f_ssˇnf
()

1263 
svÆue_t
 *
Â
;

1264 
i
;

1265 
num_¨g
;

1270 
num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
);

1271 
pc
++;

1278 
Â
 = 
•
;

1279 
	`CHECK_STACK_OVERFLOW
(
num_¨g
 + 1);

1280 
•
 +
num_¨g
 + 1;

1281 *
•
 = *(
Â
--);

1282 *(
•
 - 1Ë*(
Â
);

1284 
Â
->
ty≥
 = 
T_NUMBER
;

1290 
i
 = 1; i <
num_¨g
; i++)

1291 
Â
[
i
].
ty≥
 = 
T_INVALID
;

1296 
i
 = 
	`öãr_ssˇnf
(
•
 - 2, s∞- 1, sp, 
num_¨g
);

1301 
	`p›_2_ñems
();

1306 
Â
->
u
.
numbî
 = 
i
;

1307 
Â
->
subty≥
 = 0;

1308 
	}
}

	@eoperators.h

3 
INLINE
 
f_ge
 
PROT
(());

4 
INLINE
 
f_À
 
PROT
(());

5 
INLINE
 
f_…
 
PROT
(());

6 
INLINE
 
f_gt
 
PROT
(());

7 
INLINE
 
f_™d
 
PROT
(());

8 
INLINE
 
f_™d_eq
 
PROT
(());

9 
INLINE
 
f_div_eq
 
PROT
(());

10 
INLINE
 
f_eq
 
PROT
(());

11 
INLINE
 
f_lsh
 
PROT
(());

12 
INLINE
 
f_lsh_eq
 
PROT
(());

13 
INLINE
 
f_mod_eq
 
PROT
(());

14 
INLINE
 
f_mu…_eq
 
PROT
(());

15 
INLINE
 
f_√
 
PROT
(());

16 
INLINE
 
f_‹
 
PROT
(());

17 
INLINE
 
f_‹_eq
 
PROT
(());

18 
INLINE
 
f_∑r£_comm™d
 
PROT
(());

19 
INLINE
 
f_ønge
 
PROT
(());

20 
INLINE
 
f_exåa˘_ønge
 
PROT
(());

21 
INLINE
 
f_rsh
 
PROT
(());

22 
INLINE
 
f_rsh_eq
 
PROT
(());

23 
INLINE
 
f_simul_efun
 
PROT
(());

24 
INLINE
 
f_sub_eq
 
PROT
(());

25 
INLINE
 
f_swôch
 
PROT
(());

26 
INLINE
 
f_x‹
 
PROT
(());

27 
INLINE
 
f_x‹_eq
 
PROT
(());

28 
INLINE
 
f_fun˘i⁄_c⁄°ru˘‹
 
PROT
(());

29 
INLINE
 
f_evÆu©e
 
PROT
(());

30 
INLINE
 
f_ssˇnf
 
PROT
(());

35 
ˇŒ_simul_efun
 
PROT
((, ));

	@file.c

6 
	~"°d.h
"

7 
	~"fûe.h
"

8 
	~"comm.h
"

9 
	~"Àx.h
"

10 
	~"md.h
"

11 
	~"p‹t.h
"

12 
	~"ma°î.h
"

19 #ifde‡
INCL_SYS_SYSMACROS_H


21 #ifde‡
maj‹


22 #unde‡
maj‹


24 #ifde‡
mö‹


25 #unde‡
mö‹


27 #ifde‡
makedev


28 #unde‡
makedev


30 
	~<sys/sysma¸os.h
>

34 
ÀgÆ_∑th
 
PROT
((*));

36 
m©ch_°rög
 
PROT
((*, *));

37 
c›y
 
PROT
((*
‰om
, *
to
));

38 
do_move
 
PROT
((*
‰om
, *
to
, 
Êag
));

39 
CDECL
 
p°rcmp
 
PROT
((
CONST
 *, CONST *));

40 
CDECL
 
∑ºcmp
 
PROT
((
CONST
 *, CONST *));

41 
ícode_°©
 
PROT
((
svÆue_t
 *, , *, 
°©
 *));

43 
	#MAX_LINES
 50

	)

48 
CDECL
 
p°rcmp
 
	$P2
(
CONST
 *, 
p1
, CONST *, 
p2
)

50 
svÆue_t
 *
x
 = (svÆue_à*)
p1
;

51 
svÆue_t
 *
y
 = (svÆue_à*)
p2
;

53  
	`°rcmp
(
x
->
u
.
°rög
, 
y
->u.string);

54 
	}
}

56 
CDECL
 
∑ºcmp
 
	$P2
(
CONST
 *, 
p1
, CONST *, 
p2
)

58 
svÆue_t
 *
x
 = (svÆue_à*)
p1
;

59 
svÆue_t
 *
y
 = (svÆue_à*)
p2
;

61  
	`°rcmp
(
x
->
u
.
¨r
->
ôem
[0].u.
°rög
, 
y
->u.arr->item[0].u.string);

62 
	}
}

64 
ícode_°©
 
	$P4
(
svÆue_t
 *, 
vp
, , 
Êags
, *, 
°r
, 
°©
 *, 
°
)

66 i‡(
Êags
 == -1) {

67 
¨øy_t
 *
v
 = 
	`Æloˇã_em±y_¨øy
(3);

69 
v
->
ôem
[0].
ty≥
 = 
T_STRING
;

70 
v
->
ôem
[0].
subty≥
 = 
STRING_MALLOC
;

71 
v
->
ôem
[0].
u
.
°rög
 = 
	`°rög_c›y
(
°r
, "encode_stat");

72 
v
->
ôem
[1].
ty≥
 = 
T_NUMBER
;

73 
v
->
ôem
[1].
u
.
numbî
 =

74 ((
°
->
°_mode
 & 
S_IFDIR
Ë? -2 : st->
°_size
);

75 
v
->
ôem
[2].
ty≥
 = 
T_NUMBER
;

76 
v
->
ôem
[2].
u
.
numbî
 = 
°
->
°_mtime
;

77 
vp
->
ty≥
 = 
T_ARRAY
;

78 
vp
->
u
.
¨r
 = 
v
;

80 
vp
->
ty≥
 = 
T_STRING
;

81 
vp
->
subty≥
 = 
STRING_MALLOC
;

82 
vp
->
u
.
°rög
 = 
	`°rög_c›y
(
°r
, "encode_stat");

84 
	}
}

109 
	#MAX_FNAME_SIZE
 255

	)

110 
	#MAX_PATH_LEN
 1024

	)

111 
¨øy_t
 *
gë_dú
 
	$P2
(*, 
∑th
, , 
Êags
)

113 
¨øy_t
 *
v
;

114 
i
, 
cou¡
 = 0;

115 #i‚de‡
WIN32


116 
DIR
 *
dúp
;

118 
«mñí
, 
do_m©ch
 = 0;

120 #i‚de‡
WIN32


121 #ifde‡
USE_STRUCT_DIRENT


122 
dúít
 *
de
;

124 
dúe˘
 *
de
;

127 
°©
 
°
;

128 *
ídãmp
;

129 
ãmµ©h
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

130 
ªgexµ©h
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

131 *
p
;

133 #ifde‡
WIN32


134 
_född©a_t
 
FödBuf„r
;

135 
FûeH™dÀ
, 
FûeCou¡
;

138 i‡(!
∑th
)

141 
∑th
 = 
	`check_vÆid_∑th
’©h, 
cuºít_obje˘
, "stat", 0);

143 i‡(
∑th
 == 0)

146 i‡(
	`°æí
(
∑th
) < 2) {

147 #i‚de‡
LATTICE


148 
ãmµ©h
[0] = 
∑th
[0] ?Öath[0] : '.';

150 
ãmµ©h
[0] = 
∑th
[0];

152 
ãmµ©h
[1] = '\000';

153 
p
 = 
ãmµ©h
;

155 
	`°∫˝y
(
ãmµ©h
, 
∑th
, 
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 1);

156 
ãmµ©h
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 1] = '\0';

161 i‡((
p
 = 
	`°ºchr
(
ãmµ©h
, '/')) == 0)

162 
p
 = 
ãmµ©h
;

163 i‡(
p
[0] == '/' && ((p[1] == '.' &&Ö[2] == '\0') ||Ö[1] == '\0'))

164 *
p
 = '\0';

167 i‡(
	`°©
(
ãmµ©h
, &
°
) < 0) {

168 i‡(*
p
 == '\0')

170 i‡(
p
 !
ãmµ©h
) {

171 
	`°r˝y
(
ªgexµ©h
, 
p
 + 1);

172 *
p
 = '\0';

174 
	`°r˝y
(
ªgexµ©h
, 
p
);

175 #i‚de‡
LATTICE


176 
	`°r˝y
(
ãmµ©h
, ".");

178 
	`°r˝y
(
ãmµ©h
, "");

181 
do_m©ch
 = 1;

182 } i‡(*
p
 !'\0' && 
	`°rcmp
(
ãmµ©h
, ".")) {

183 i‡(*
p
 == '/' && *(p + 1) != '\0')

184 
p
++;

185 
v
 = 
	`Æloˇã_em±y_¨øy
(1);

186 
	`ícode_°©
(&
v
->
ôem
[0], 
Êags
, 
p
, &
°
);

187  
v
;

192 #ifde‡
WIN32


193 
FûeH™dÀ
 = -1;

194 
FûeCou¡
 = 1;

196 
	`°rˇt
(
ãmµ©h
, "/*");

197 i‡((
FûeH™dÀ
 = 
	`_födfú°
(
ãmµ©h
, &
FödBuf„r
)) == -1)  0;

199 i‡((
dúp
 = 
	`›ídú
(
ãmµ©h
)) == 0)

206 #ifde‡
WIN32


208 i‡(!
do_m©ch
 && (!
	`°rcmp
(
FödBuf„r
.
«me
, ".") ||

209 !
	`°rcmp
(
FödBuf„r
.
«me
, ".."))) {

212 i‡(
do_m©ch
 && !
	`m©ch_°rög
(
ªgexµ©h
, 
FödBuf„r
.
«me
)) {

215 
cou¡
++;

216 i‡(
cou¡
 >
max_¨øy_size
) {

219 } !
	`_föd√xt
(
FûeH™dÀ
, &
FödBuf„r
));

220 
	`_föd˛o£
(
FûeH™dÀ
);

222 
de
 = 
	`ªaddú
(
dúp
); de; de =Ñeaddir(dirp)) {

223 #ifde‡
USE_STRUCT_DIRENT


224 
«mñí
 = 
	`°æí
(
de
->
d_«me
);

226 
«mñí
 = 
de
->
d_«mÀn
;

228 i‡(!
do_m©ch
 && (
	`°rcmp
(
de
->
d_«me
, ".") == 0 ||

229 
	`°rcmp
(
de
->
d_«me
, "..") == 0))

231 i‡(
do_m©ch
 && !
	`m©ch_°rög
(
ªgexµ©h
, 
de
->
d_«me
))

233 
cou¡
++;

234 i‡(
cou¡
 >
max_¨øy_size
)

242 
v
 = 
	`Æloˇã_em±y_¨øy
(
cou¡
);

243 i‡(
cou¡
 == 0) {

245 #i‚de‡
WIN32


246 
	`˛o£dú
(
dúp
);

248  
v
;

250 #ifde‡
WIN32


251 
FûeH™dÀ
 = -1;

252 i‡((
FûeH™dÀ
 = 
	`_födfú°
(
ãmµ©h
, &
FödBuf„r
)) == -1)  0;

253 
ídãmp
 = 
ãmµ©h
 + 
	`°æí
(temppath) - 2;

254 *
ídãmp
 = 0;

256 
	`°rˇt
(
ídãmp
++, "/");

257 
i
 = 0;

259 i‡(!
do_m©ch
 && (!
	`°rcmp
(
FödBuf„r
.
«me
, ".") ||

260 !
	`°rcmp
(
FödBuf„r
.
«me
, ".."))) ;

261 i‡(
do_m©ch
 && !
	`m©ch_°rög
(
ªgexµ©h
, 
FödBuf„r
.
«me
)) ;

262 i‡(
Êags
 == -1) {

263 
	`°r˝y
(
ídãmp
, 
FödBuf„r
.
«me
);

264 
	`°©
(
ãmµ©h
, &
°
);

266 
	`ícode_°©
(&
v
->
ôem
[
i
], 
Êags
, 
FödBuf„r
.
«me
, &
°
);

267 
i
++;

268 } !
	`_föd√xt
(
FûeH™dÀ
, &
FödBuf„r
));

269 
	`_föd˛o£
(
FûeH™dÀ
);

271 
	`ªwöddú
(
dúp
);

272 
ídãmp
 = 
ãmµ©h
 + 
	`°æí
(temppath);

274 #ifde‡
LATTICE


275 i‡(
ídãmp
 !
ãmµ©h
)

277 
	`°rˇt
(
ídãmp
++, "/");

279 
i
 = 0, 
de
 = 
	`ªaddú
(
dúp
); i < 
cou¡
; de =Ñeaddir(dirp)) {

280 #ifde‡
USE_STRUCT_DIRENT


281 
«mñí
 = 
	`°æí
(
de
->
d_«me
);

283 
«mñí
 = 
de
->
d_«mÀn
;

285 i‡(!
do_m©ch
 && (
	`°rcmp
(
de
->
d_«me
, ".") == 0 ||

286 
	`°rcmp
(
de
->
d_«me
, "..") == 0))

288 i‡(
do_m©ch
 && !
	`m©ch_°rög
(
ªgexµ©h
, 
de
->
d_«me
))

290 
de
->
d_«me
[
«mñí
] = '\0';

291 i‡(
Êags
 == -1) {

296 
	`°r˝y
(
ídãmp
, 
de
->
d_«me
);

297 
	`°©
(
ãmµ©h
, &
°
);

299 
	`ícode_°©
(&
v
->
ôem
[
i
], 
Êags
, 
de
->
d_«me
, &
°
);

300 
i
++;

302 
	`˛o£dú
(
dúp
);

306 
	`qs‹t
((*Ë
v
->
ôem
, 
cou¡
,  v->item[0],

307 (
Êags
 =-1Ë? 
∑ºcmp
 : 
p°rcmp
);

308  
v
;

309 
	}
}

311 
ªmove_fûe
 
	$P1
(*, 
∑th
)

313 
∑th
 = 
	`check_vÆid_∑th
’©h, 
cuºít_obje˘
, "remove_file", 1);

315 i‡(
∑th
 == 0)

317 i‡(
	`u∆ök
(
∑th
) == -1)

320 
	}
}

325 
ÀgÆ_∑th
 
	$P1
(*, 
∑th
)

327 *
p
;

329 i‡(
∑th
 =
NULL
)

331 i‡(
∑th
[0] == '/')

337 i‡(
	`°rchr
(
∑th
, '#')) {

340 
p
 = 
∑th
;

341 
p
) {

342 i‡(
p
[0] == '.') {

343 i‡(
p
[1] == '\0')

345 i‡(
p
[1] == '.')

346 
p
++;

347 i‡(
p
[1] == '/' ||Ö[1] == '\0')

350 
p
 = (*)
	`°r°r
(p, "/.");

351 i‡(
p
)

352 
p
++;

354 #i‡
	`deföed
(
AMIGA
Ë|| deföed(
LATTICE
Ë|| deföed(
WIN32
)

364 i‡(
	`°rchr
(
∑th
, ':'))

368 
	}
}

374 
sm¨t_log
 
	$P4
(*, 
îr‹_fûe
, , 
löe
, *, 
wh©
, , 
Êag
)

376 *
buff
;

377 
svÆue_t
 *
mªt
;

378 
¥agmas
;

380 
buff
 = (*)

381 
	`DMALLOC
(
	`°æí
(
îr‹_fûe
Ë+ såÀn(
wh©
) +

382 ((
¥agmas
 & 
PRAGMA_ERROR_CONTEXT
Ë? 100 : 40), 
TAG_TEMPORARY
, "smart_log: 1");

384 i‡(
Êag
)

385 
	`•rötf
(
buff
, "/%†löê%d: W¨nög: %s", 
îr‹_fûe
, 
löe
, 
wh©
);

387 
	`•rötf
(
buff
, "/%†löê%d: %s", 
îr‹_fûe
, 
löe
, 
wh©
);

389 i‡(
¥agmas
 & 
PRAGMA_ERROR_CONTEXT
) {

390 *
ls
 = 
	`°ºchr
(
buff
, '\n');

391 *
tmp
;

392 i‡(
ls
) {

393 
tmp
 = (*)
ls
 + 1;

394 *
tmp
 && 
	`is•a˚
(*tmp))Åmp++;

395 i‡(!*
tmp
Ë*
ls
 = 0;

397 
	`°rˇt
(
buff
, 
	`show_îr‹_c⁄ãxt
());

398 } 
	`°rˇt
(
buff
, "\n");

400 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
îr‹_fûe
));

401 
	`c›y_™d_push_°rög
(
buff
);

402 
mªt
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_LOG_ERROR
, 2);

403 i‡(!
mªt
 || mªà=(
svÆue_t
 *)-1) {

404 
	`debug_mesßge
("%s", 
buff
);

406 
	`FREE
(
buff
);

407 
	}
}

412 
wrôe_fûe
 
	$P3
(*, 
fûe
, *, 
°r
, , 
Êags
)

414 
FILE
 *
f
;

416 #ifde‡
WIN32


417 
fmode
[3];

420 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "write_file", 1);

421 i‡(!
fûe
)

423 #ifde‡
WIN32


424 
fmode
[0] = (
Êags
 & 1) ? 'w' : 'a';

425 
fmode
[1] = 't';

426 
fmode
[2] = '\0';

427 
f
 = 
	`f›í
(
fûe
, 
fmode
);

429 
f
 = 
	`f›í
(
fûe
, (
Êags
 & 1) ? "w" : "a");

431 i‡(
f
 == 0) {

432 
	`îr‹
("WrongÖermissions for opening file /%s for %s.\n\"%s\"\n",

433 
fûe
, (
Êags
 & 1Ë? "ovîwrôe" : "≠≥nd", 
	`p‹t_°ªº‹
(
î∫o
));

435 
	`fwrôe
(
°r
, 
	`°æí
(°r), 1, 
f
);

436 
	`f˛o£
(
f
);

438 
	}
}

440 *
ªad_fûe
 
	$P3
(*, 
fûe
, , 
°¨t
, , 
Àn
) {

441 
°©
 
°
;

442 
FILE
 *
f
;

443 
œ°chunk
, 
chunk
, 
ssize
, 
fsize
;

444 *
°r
, *
p
, *
p2
;

446 i‡(
Àn
 < 0)

449 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "read_file", 0);

451 i‡(!
fûe
)

457 i‡(
	`°©
(
fûe
, &
°
Ë=-1 || (°.
°_mode
 & 
S_IFDIR
))

460 
f
 = 
	`f›í
(
fûe
, 
FOPEN_READ
);

461 i‡(
f
 == 0)

464 #i‚de‡
LATTICE


465 i‡(
	`f°©
(
	`fûío
(
f
), &
°
) == -1)

466 
	`Áèl
("CouldÇot statán open file.\n");

473 
œ°chunk
 = 
chunk
 = 
ssize
 = 
fsize
 = 
°
.
°_size
;

474 i‡(
fsize
 > 
READ_FILE_MAX_SIZE
)

475 
œ°chunk
 = 
chunk
 = 
ssize
 = 
READ_FILE_MAX_SIZE
;

481 i‡(
°¨t
 < 1) start = 1;

482 i‡(
Àn
 =0ËÀ¿
READ_FILE_MAX_SIZE
;

484 
°r
 = 
	`√w_°rög
(
ssize
, "read_file: str");

485 i‡(
fsize
 == 0) {

487 
°r
[0] = 0;

488 
	`f˛o£
(
f
);

489  
°r
;

494 i‡(
fsize
 =0 || 
	`‰ód
(
°r
, 
chunk
, 1, 
f
) != 1)

495 
‰ì_°r
;

496 
p
 = 
°r
;

497 
œ°chunk
 = 
chunk
;

498 
fsize
 -
chunk
;

499 i‡(
chunk
 > 
fsize
) chunk = fsize;

501 
°¨t
 > 1) {

503 
p2
 = 
	`memchr
(
p
, '\n', 
°r
 + 
œ°chunk
 -Ö);

504 i‡(
p2
) {

505 
p
 = 
p2
 + 1;

506 
°¨t
--;

510 } 
°¨t
 > 1);

512 
p2
 = 
°r
;

514 
c
;

516 i‡(
p
 =
°r
 + 
œ°chunk
) {

518 i‡(
chunk
 > 
ssize
 - (
p2
 - 
°r
))

519 
chunk
 = 
ssize
 - (
p2
 - 
°r
);

520 i‡(
fsize
 == 0) ;

521 i‡(
chunk
 =0 || 
	`‰ód
(
p2
, chunk, 1, 
f
) != 1)

522 
‰ì_°r
;

523 
p
 = 
p2
;

524 
œ°chunk
 = 
chunk
 + (
p2
 - 
°r
);

526 
fsize
 -
chunk
;

527 i‡(
chunk
 > 
fsize
) chunk = fsize;

530 
c
 = *
p
++;

531 i‡(
c
 == '\0') {

532 
	`FREE_MSTR
(
°r
);

533 
	`f˛o£
(
f
);

534 
	`îr‹
("AttemptedÅoÑead '\\0' into string!\n");

536 i‡(
c
 !'\r' || *
p
 != '\n') {

537 *
p2
++ = 
c
;

538 i‡(
c
 ='\n' && --
Àn
 == 0)

543 *
p2
 = 0;

544 
°r
 = 
	`exãnd_°rög
(°r, 
p2
 - str);

545 
	`f˛o£
(
f
);

547  
°r
;

551 
‰ì_°r
:

552 
	`FREE_MSTR
(
°r
);

553 
	`f˛o£
(
f
);

555 
	}
}

557 *
ªad_byãs
 
	$P4
(*, 
fûe
, , 
°¨t
, , 
Àn
, *, 
æí
)

559 
°©
 
°
;

560 
FILE
 *
Â
;

561 *
°r
;

562 
size
;

564 i‡(
Àn
 < 0)

566 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
,

568 i‡(!
fûe
)

570 #ifde‡
LATTICE


571 i‡(
	`°©
(
fûe
, &
°
) == -1)

574 
Â
 = 
	`f›í
(
fûe
, "rb");

575 i‡(
Â
 =
NULL
)

577 #i‚de‡
LATTICE


578 i‡(
	`f°©
(
	`fûío
(
Â
), &
°
) == -1)

579 
	`Áèl
("CouldÇot statán open file.\n");

581 
size
 = 
°
.
°_size
;

582 i‡(
°¨t
 < 0)

583 
°¨t
 = 
size
 + start;

585 i‡(
Àn
 == 0)

586 
Àn
 = 
size
;

587 i‡(
Àn
 > 
MAX_BYTE_TRANSFER
) {

588 
	`f˛o£
(
Â
);

589 
	`îr‹
("TransferÉxceeded maximumállowedÇumber of bytes.\n");

592 i‡(
°¨t
 >
size
) {

593 
	`f˛o£
(
Â
);

596 i‡((
°¨t
 + 
Àn
Ë> 
size
)

597 
Àn
 = (
size
 - 
°¨t
);

599 i‡((
size
 = 
	`f£ek
(
Â
, 
°¨t
, 0)) < 0) {

600 
	`f˛o£
(
Â
);

604 
°r
 = 
	`√w_°rög
(
Àn
, "read_bytes: str");

606 
size
 = 
	`‰ód
(
°r
, 1, 
Àn
, 
Â
);

608 
	`f˛o£
(
Â
);

610 i‡(
size
 <= 0) {

611 
	`FREE_MSTR
(
°r
);

617 
°r
[
size
] = '\0';

619 *
æí
 = 
size
;

620  
°r
;

621 
	}
}

623 
wrôe_byãs
 
	$P4
(*, 
fûe
, , 
°¨t
, *, 
°r
, , 
theLígth
)

625 
°©
 
°
;

626 
size
;

627 
FILE
 *
Â
;

629 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "write_bytes", 1);

631 i‡(!
fûe
)

633 i‡(
theLígth
 > 
MAX_BYTE_TRANSFER
)

641 i‡(
	`°©
(
fûe
, &
°
) == -1) {

642 
Â
 = 
	`f›í
(
fûe
, "wb");

644 
Â
 = 
	`f›í
(
fûe
, "r+b");

646 i‡(
Â
 =
NULL
) {

649 #i‚de‡
LATTICE


650 i‡(
	`f°©
(
	`fûío
(
Â
), &
°
) == -1)

651 
	`Áèl
("CouldÇot statán open file.\n");

653 
size
 = 
°
.
°_size
;

654 i‡(
°¨t
 < 0)

655 
°¨t
 = 
size
 + start;

656 i‡(
°¨t
 < 0 || sèπ > 
size
) {

657 
	`f˛o£
(
Â
);

660 i‡((
size
 = 
	`f£ek
(
Â
, 
°¨t
, 0)) < 0) {

661 
	`f˛o£
(
Â
);

664 
size
 = 
	`fwrôe
(
°r
, 1, 
theLígth
, 
Â
);

666 
	`f˛o£
(
Â
);

668 i‡(
size
 <= 0) {

672 
	}
}

674 
fûe_size
 
	$P1
(*, 
fûe
)

676 
°©
 
°
;

677 
ªt
;

678 #ifde‡
WIN32


679 
√eds_‰ì
 = 0, 
Àn
;

680 *
p
;

683 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "file_size", 0);

684 i‡(!
fûe
)

687 #ifde‡
WIN32


688 
Àn
 = 
	`°æí
(
fûe
);

689 
p
 = 
fûe
 + 
Àn
 - 1;

690 i‡(*
p
 == '/') {

691 
√eds_‰ì
 = 1;

692 
p
 = 
fûe
;

693 
fûe
 = 
	`√w_°rög
(
Àn
 - 1, "file_size");

694 
	`mem˝y
(
fûe
, 
p
, 
Àn
 - 1);

695 
fûe
[
Àn
-1] = 0;

699 i‡(
	`°©
(
fûe
, &
°
) == -1)

700 
ªt
 = -1;

701 i‡(
S_IFDIR
 & 
°
.
°_mode
)

702 
ªt
 = -2;

704 
ªt
 = 
°
.
°_size
;

706 #ifde‡
WIN32


707 i‡(
√eds_‰ì
Ë
	`FREE_MSTR
(
fûe
);

710  
ªt
;

711 
	}
}

723 *
check_vÆid_∑th
 
	$P4
(*, 
∑th
, 
obje˘_t
 *, 
ˇŒ_obje˘
, *, 
ˇŒ_fun
, , 
wrôeÊg
)

725 
svÆue_t
 *
v
;

727 i‡(
ˇŒ_obje˘
 =0 || cÆl_obje˘->
Êags
 & 
O_DESTRUCTED
)

730 #ifde‡
WIN32


732 *
p
;

734 
p
=
∑th
; *p;Ö++) if (*p == '\\') *p='/';

738 
	`c›y_™d_push_°rög
(
∑th
);

739 
	`push_obje˘
(
ˇŒ_obje˘
);

740 
	`push_c⁄°™t_°rög
(
ˇŒ_fun
);

741 i‡(
wrôeÊg
)

742 
v
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_WRITE
, 3);

744 
v
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_READ
, 3);

746 i‡(
v
 =(
svÆue_t
 *)-1)

747 
v
 = 0;

749 i‡(
v
 && v->
ty≥
 =
T_NUMBER
 && v->
u
.
numbî
 == 0)  0;

750 i‡(
v
 && v->
ty≥
 =
T_STRING
) {

751 
∑th
 = 
v
->
u
.
°rög
;

753 
svÆue_t
 
≠∂y_ªt_vÆue
;

755 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "check_valid_path");

756 
≠∂y_ªt_vÆue
.
ty≥
 = 
T_STRING
;

757 
≠∂y_ªt_vÆue
.
subty≥
 = 
STRING_MALLOC
;

758 
∑th
 = 
≠∂y_ªt_vÆue
.
u
.
°rög
 = 
	`°rög_c›y
(path, "check_valid_path");

761 i‡(
∑th
[0] == '/')

762 
∑th
++;

763 #i‚de‡
LATTICE


764 i‡(
∑th
[0] == '\0')

765 
∑th
 = ".";

767 i‡(
	`ÀgÆ_∑th
(
∑th
))

768  
∑th
;

771 
	}
}

773 
m©ch_°rög
 
	$P2
(*, 
m©ch
, *, 
°r
)

775 
i
;

777 
agaö
:

778 i‡(*
°r
 ='\0' && *
m©ch
 == '\0')

780 *
m©ch
) {

782 i‡(*
°r
 == '\0')

784 
°r
++;

785 
m©ch
++;

786 
agaö
;

788 
m©ch
++;

789 i‡(*
m©ch
 == '\0')

791 
i
 = 0; 
°r
[i] != '\0'; i++)

792 i‡(
	`m©ch_°rög
(
m©ch
, 
°r
 + 
i
))

798 
m©ch
++;

799 i‡(*
m©ch
 == '\0')

803 i‡(*
m©ch
 =*
°r
) {

804 
m©ch
++;

805 
°r
++;

806 
agaö
;

810 
	}
}

812 
°©
 
	gto_°©s
, 
	g‰om_°©s
;

814 
c›y
 
	$P2
(*, 
‰om
, *, 
to
)

816 
ifd
;

817 
ofd
;

818 
buf
[1024 * 8];

819 
Àn
;

821 i‡(!
	`S_ISREG
(
‰om_°©s
.
°_mode
)) {

824 i‡(
	`u∆ök
(
to
Ë&& 
î∫o
 !
ENOENT
) {

827 
ifd
 = 
	`›í
(
‰om
, 
OPEN_READ
);

828 i‡(
ifd
 < 0) {

829  
î∫o
;

831 
ofd
 = 
	`›í
(
to
, 
OPEN_WRITE
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

832 i‡(
ofd
 < 0) {

833 
	`˛o£
(
ifd
);

836 #ifde‡
HAS_FCHMOD


837 i‡(
	`fchmod
(
ofd
, 
‰om_°©s
.
°_mode
 & 0777)) {

838 
	`˛o£
(
ifd
);

839 
	`˛o£
(
ofd
);

840 
	`u∆ök
(
to
);

845 (
Àn
 = 
	`ªad
(
ifd
, 
buf
, (buf))) > 0) {

846 
wrŸe
 = 0;

847 *
bp
 = 
buf
;

850 
wrŸe
 = 
	`wrôe
(
ofd
, 
bp
, 
Àn
);

851 i‡(
wrŸe
 < 0) {

852 
	`˛o£
(
ifd
);

853 
	`˛o£
(
ofd
);

854 
	`u∆ök
(
to
);

857 
bp
 +
wrŸe
;

858 
Àn
 -
wrŸe
;

859 } 
Àn
 > 0);

861 i‡(
Àn
 < 0) {

862 
	`˛o£
(
ifd
);

863 
	`˛o£
(
ofd
);

864 
	`u∆ök
(
to
);

867 i‡(
	`˛o£
(
ifd
) < 0) {

868 
	`˛o£
(
ofd
);

871 i‡(
	`˛o£
(
ofd
) < 0) {

874 #ifde‡
FCHMOD_MISSING


875 i‡(
	`chmod
(
to
, 
‰om_°©s
.
°_mode
 & 0777)) {

881 
	}
}

887 #ifde‡
F_RENAME


888 
do_move
 
	$P3
(*, 
‰om
, *, 
to
, , 
Êag
)

890 i‡(
	`l°©
(
‰om
, &
‰om_°©s
) != 0) {

891 
	`îr‹
("/%s:Ü°© faûed\n", 
‰om
);

894 i‡(
	`l°©
(
to
, &
to_°©s
) == 0) {

895 #ifde‡
WIN32


896 i‡(!
	`°rcmp
(
‰om
, 
to
))

898 i‡(
‰om_°©s
.
°_dev
 =
to_°©s
.st_dev

899 && 
‰om_°©s
.
°_öo
 =
to_°©s
.st_ino)

902 
	`îr‹
("`/%s'ánd `/%s'áªÅhêßmêfûe", 
‰om
, 
to
);

905 i‡(
	`S_ISDIR
(
to_°©s
.
°_mode
)) {

906 
	`îr‹
("/%s: c™nŸ ovîwrôêdúe˘‹y", 
to
);

909 #ifde‡
WIN32


910 
	`u∆ök
(
to
);

912 } i‡(
î∫o
 !
ENOENT
) {

913 
	`îr‹
("/%s: unknow¿îr‹\n", 
to
);

916 #ifde‡
SYSV


917 i‡((
Êag
 =
F_RENAME
Ë&& 
	`fûe_size
(
‰om
) == -2) {

918 
cmd_buf
[100];

920 
	`•rötf
(
cmd_buf
, "/u§/lib/mv_dú %†%s", 
‰om
, 
to
);

921  
	`sy°em
(
cmd_buf
);

924 i‡((
Êag
 =
F_RENAME
Ë&& (
	`ª«me
(
‰om
, 
to
) == 0))

926 #ifde‡
F_LINK


927 i‡(
Êag
 =
F_LINK
) {

928 #ifde‡
WIN32


929 
	`îr‹
("link()Çot supported.\n");

931 i‡(
	`lök
(
‰om
, 
to
) == 0)

937 i‡(
î∫o
 !
EXDEV
) {

938 i‡(
Êag
 =
F_RENAME
)

939 
	`îr‹
("ˇ¬Ÿ movê`/%s'Åÿ`/%s'\n", 
‰om
, 
to
);

941 
	`îr‹
("ˇ¬ŸÜök `/%s'Åÿ`/%s'\n", 
‰om
, 
to
);

946 i‡(
Êag
 =
F_RENAME
) {

947 i‡(
	`c›y
(
‰om
, 
to
))

949 i‡(
	`u∆ök
(
‰om
)) {

950 
	`îr‹
("ˇ¬ŸÑemovê`/%s'", 
‰om
);

954 #ifde‡
F_LINK


955 i‡(
Êag
 =
F_LINK
) {

956 i‡(
	`symlök
(
‰om
, 
to
) == 0)

961 
	}
}

964 
debug_≥º‹
 
	$P2
(*, 
wh©
, *, 
fûe
) {

965 i‡(
fûe
)

966 
	`debug_mesßge
("Sy°em Eº‹: %s:%s:%s\n", 
wh©
, 
fûe
, 
	`p‹t_°ªº‹
(
î∫o
));

968 
	`debug_mesßge
("Sy°em Eº‹: %s:%s\n", 
wh©
, 
	`p‹t_°ªº‹
(
î∫o
));

969 
	}
}

976 
svÆue_t
 
	g‰om_sv
 = { 
T_NUMBER
 };

977 
svÆue_t
 
	gto_sv
 = { 
T_NUMBER
 };

979 #ifde‡
DEBUGMALLOC_EXTENSIONS


980 
	$m¨k_fûe_sv
() {

981 
	`m¨k_svÆue
(&
‰om_sv
);

982 
	`m¨k_svÆue
(&
to_sv
);

983 
	}
}

986 #ifde‡
F_RENAME


987 
do_ª«me
 
	$P3
(*, 
‰
, *, 
t
, , 
Êag
)

989 *
‰om
, *
to
, 
tbuf
[3];

990 
√w‰om
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

991 
Êí
;

992 
svÆue_t
 
≠∂y_ªt_vÆue
;

1002 
‰om
 = 
	`check_vÆid_∑th
(
‰
, 
cuºít_obje˘
, "rename", 1);

1003 i‡(!
‰om
)

1006 
	`assign_svÆue
(&
‰om_sv
, &
≠∂y_ªt_vÆue
);

1008 
to
 = 
	`check_vÆid_∑th
(
t
, 
cuºít_obje˘
, "rename", 1);

1009 i‡(!
to
)

1012 
	`assign_svÆue
(&
to_sv
, &
≠∂y_ªt_vÆue
);

1013 i‡(!
	`°æí
(
to
Ë&& !
	`°rcmp
(
t
, "/")) {

1014 
to
 = 
tbuf
;

1015 
	`•rötf
(
to
, "./");

1019 
Êí
 = 
	`°æí
(
‰om
);

1020 i‡(
Êí
 > 1 && 
‰om
[flen - 1] == '/') {

1021 *
p
 = 
‰om
 + 
Êí
 - 2;

1022 
n
;

1024 *
p
 ='/' && (∞> 
‰om
))

1025 
p
--;

1026 
n
 = 
p
 - 
‰om
 + 1;

1027 
	`mem˝y
(
√w‰om
, 
‰om
, 
n
);

1028 
√w‰om
[
n
] = 0;

1029 
‰om
 = 
√w‰om
;

1032 i‡(
	`fûe_size
(
to
) == -2) {

1034 *
˝
;

1035 
√wto
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

1037 
˝
 = 
	`°ºchr
(
‰om
, '/');

1038 i‡(
˝
)

1039 
˝
++;

1041 
˝
 = 
‰om
;

1043 
	`•rötf
(
√wto
, "%s/%s", 
to
, 
˝
);

1044  
	`do_move
(
‰om
, 
√wto
, 
Êag
);

1046  
	`do_move
(
‰om
, 
to
, 
Êag
);

1047 
	}
}

1050 
c›y_fûe
 
	$P2
(*, 
‰om
, *, 
to
)

1052 
buf
[128];

1053 
‰om_fd
, 
to_fd
;

1054 
num_ªad
, 
num_wrôãn
;

1055 *
wrôe_±r
;

1056 
svÆue_t
 
≠∂y_ªt_vÆue
;

1058 
‰om
 = 
	`check_vÆid_∑th
(‰om, 
cuºít_obje˘
, "move_file", 0);

1059 
	`assign_svÆue
(&
‰om_sv
, &
≠∂y_ªt_vÆue
);

1061 
to
 = 
	`check_vÆid_∑th
—o, 
cuºít_obje˘
, "move_file", 1);

1062 
	`assign_svÆue
(&
to_sv
, &
≠∂y_ªt_vÆue
);

1064 i‡(
‰om
 == 0)

1066 i‡(
to
 == 0)

1069 i‡(
	`l°©
(
‰om
, &
‰om_°©s
) != 0) {

1070 
	`îr‹
("/%s:Ü°© faûed\n", 
‰om
);

1073 i‡(
	`l°©
(
to
, &
to_°©s
) == 0) {

1074 #ifde‡
WIN32


1075 i‡(!
	`°rcmp
(
‰om
, 
to
))

1077 i‡(
‰om_°©s
.
°_dev
 =
to_°©s
.st_dev

1078 && 
‰om_°©s
.
°_öo
 =
to_°©s
.st_ino)

1081 
	`îr‹
("`/%s'ánd `/%s'áªÅhêßmêfûe", 
‰om
, 
to
);

1084 } i‡(
î∫o
 !
ENOENT
) {

1085 
	`îr‹
("/%s: unknow¿îr‹\n", 
to
);

1089 
‰om_fd
 = 
	`›í
(
‰om
, 
OPEN_READ
);

1090 i‡(
‰om_fd
 < 0)

1093 i‡(
	`fûe_size
(
to
) == -2) {

1095 *
˝
;

1096 
√wto
[
MAX_FNAME_SIZE
 + 
MAX_PATH_LEN
 + 2];

1098 
˝
 = 
	`°ºchr
(
‰om
, '/');

1099 i‡(
˝
)

1100 
˝
++;

1102 
˝
 = 
‰om
;

1104 
	`•rötf
(
√wto
, "%s/%s", 
to
, 
˝
);

1105 
	`˛o£
(
‰om_fd
);

1106  
	`c›y_fûe
(
‰om
, 
√wto
);

1108 
to_fd
 = 
	`›í
(
to
, 
OPEN_WRITE
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

1109 i‡(
to_fd
 < 0) {

1110 
	`˛o£
(
‰om_fd
);

1113 (
num_ªad
 = 
	`ªad
(
‰om_fd
, 
buf
, 128)) != 0) {

1114 i‡(
num_ªad
 < 0) {

1115 
	`debug_≥º‹
("c›y_fûe:Ñód", 
‰om
);

1116 
	`˛o£
(
‰om_fd
);

1117 
	`˛o£
(
to_fd
);

1120 
wrôe_±r
 = 
buf
;

1121 
wrôe_±r
 !(
buf
 + 
num_ªad
)) {

1122 
num_wrôãn
 = 
	`wrôe
(
to_fd
, 
wrôe_±r
, 
num_ªad
);

1123 i‡(
num_wrôãn
 < 0) {

1124 
	`debug_≥º‹
("c›y_fûe: wrôe", 
to
);

1125 
	`˛o£
(
‰om_fd
);

1126 
	`˛o£
(
to_fd
);

1129 
wrôe_±r
 +
num_wrôãn
;

1132 
	`˛o£
(
‰om_fd
);

1133 
	`˛o£
(
to_fd
);

1135 
	}
}

1137 
dump_fûe_des¸ùt‹s
 
	$P1
(
outbuf„r_t
 *, 
out
)

1139 
i
;

1140 
dev_t
 
dev
;

1141 
°©
 
°buf
;

1143 
	`outbuf_add
(
out
, "Fd Device Number Inode Mode Uid Gid Size\n");

1144 
	`outbuf_add
(
out
, "-- ------------- ----- ------ ----- ----- ----------\n");

1146 
i
 = 0; i < 
FD_SETSIZE
; i++) {

1148 i‡(
	`f°©
(
i
, &
°buf
) == -1)

1151 #i‡!
	`deföed
(
LATTICE
Ë&& !deföed(
WIN32
)

1152 i‡(
	`S_ISCHR
(
°buf
.
°_mode
Ë|| 
	`S_ISBLK
(stbuf.st_mode))

1153 
dev
 = 
°buf
.
°_rdev
;

1156 
dev
 = 
°buf
.
°_dev
;

1158 
	`outbuf_addv
(
out
, "%2d", 
i
);

1159 
	`outbuf_addv
(
out
, "%13x", 
dev
);

1160 
	`outbuf_addv
(
out
, "%9d", 
°buf
.
°_öo
);

1161 
	`outbuf_add
(
out
, " ");

1163 
°buf
.
°_mode
 & 
S_IFMT
) {

1165 
S_IFDIR
:

1166 
	`outbuf_add
(
out
, "d");

1168 
S_IFCHR
:

1169 
	`outbuf_add
(
out
, "c");

1171 #ifde‡
S_IFBLK


1172 
S_IFBLK
:

1173 
	`outbuf_add
(
out
, "b");

1176 
S_IFREG
:

1177 
	`outbuf_add
(
out
, "f");

1179 #ifde‡
S_IFIFO


1180 
S_IFIFO
:

1181 
	`outbuf_add
(
out
, "p");

1184 #ifde‡
S_IFLNK


1185 
S_IFLNK
:

1186 
	`outbuf_add
(
out
, "l");

1189 #ifde‡
S_IFSOCK


1190 
S_IFSOCK
:

1191 
	`outbuf_add
(
out
, "s");

1195 
	`outbuf_add
(
out
, "?");

1199 
	`outbuf_addv
(
out
, "%5o", 
°buf
.
°_mode
 & ~
S_IFMT
);

1200 
	`outbuf_addv
(
out
, "%7d", 
°buf
.
°_uid
);

1201 
	`outbuf_addv
(
out
, "%7d", 
°buf
.
°_gid
);

1202 
	`outbuf_addv
(
out
, "%12d", 
°buf
.
°_size
);

1203 
	`outbuf_add
(
out
, "\n");

1205 
	}
}

	@file.h

1 #i‚de‡
FILE_H


2 
	#FILE_H


	)

4 
	~"Õc_ö˛.h
"

5 
	~"fûe_ö˛.h
"

12 #i‚de‡
S_ISDIR


13 
	#S_ISDIR
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFDIR
)

	)

16 #i‚de‡
S_ISREG


17 
	#S_ISREG
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFREG
)

	)

20 #i‚de‡
S_ISCHR


21 
	#S_ISCHR
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFCHR
)

	)

24 #i‚de‡
S_ISBLK


25 
	#S_ISBLK
(
m
Ë(((m)&
S_IFMT
Ë=
S_IFBLK
)

	)

32 
ÀgÆ_∑th
 
PROT
((*));

33 *
check_vÆid_∑th
 
PROT
((*, 
obje˘_t
 *, *, ));

34 
sm¨t_log
 
PROT
((*, , *, ));

35 
dump_fûe_des¸ùt‹s
 
PROT
((
outbuf„r_t
 *));

37 *
ªad_fûe
 
PROT
((*, , ));

38 *
ªad_byãs
 
PROT
((*, , , *));

39 
wrôe_fûe
 
PROT
((*, *, ));

40 
wrôe_byãs
 
PROT
((*, , *, ));

41 
¨øy_t
 *
gë_dú
 
PROT
((*, ));

42 
èû
 
PROT
((*));

43 
fûe_size
 
PROT
((*));

44 
c›y_fûe
 
PROT
((*, *));

45 
do_ª«me
 
PROT
((*, *, ));

46 
ªmove_fûe
 
PROT
((*));

48 #ifde‡
DEBUGMALLOC_EXTENSIONS


49 
m¨k_fûe_sv
 
PROT
(());

	@file_incl.h

1 #i‚de‡
FILE_INCL_H


2 
	#FILE_INCL_H


	)

4 #ifde‡
INCL_SYS_STAT_H


5 
	~<sys/°©.h
>

7 #ifde‡
INCL_SYS_DIR_H


8 
	~<sys/dú.h
>

11 #i‚de‡
löux


12 #ifde‡
INCL_SYS_DIRENT_H


13 
	~<sys/dúít.h
>

17 #ifde‡
INCL_DIRENT_H


18 
	~<dúít.h
>

20 #ifde‡
INCL_SYS_FILIO_H


21 
	~<sys/fûio.h
>

23 #ifde‡
INCL_SYS_SOCKIO_H


24 
	~<sys/sockio.h
>

26 #ifde‡
INCL_SYS_MKDEV_H


27 
	~<sys/mkdev.h
>

30 #ifde‡
INCL_SYS_RESOURCE_H


31 
	~<sys/ªsour˚.h
>

33 #ifde‡
INCL_SYS_RUSAGE_H


34 
	~<sys/rußge.h
>

36 #ifde‡
INCL_CRYPT_H


37 
	~<¸y±.h
>

40 #i‡
deföed
(
LATTICE
Ë|| deföed(
__SASC
)

41 #unde‡
˛o£


42 #unde‡
io˘l


43 #unde‡
wrôe


44 #unde‡
ªad


47 #ifde‡
WIN32


48 
	~<dúe˘.h
>

49 
	~<io.h
>

51 
	#OS_mkdú
(
x
, 
y
Ë
	`mkdú
(x)

	)

52 
	#l°©
(
x
, 
y
Ë
	`°©
(x, y)

	)

54 
	#OS_mkdú
(
x
, 
y
Ë
	`mkdú
(x, y)

	)

	@func_spec.c

1 
	~"•ec.h
"

3 
	~"›_•ec.c
"

21 #ifde‡
NO_BUFFER_TYPE


22 
	#OR_BUFFER


	)

24 
	#OR_BUFFER
 | 
buf„r


	)

37 
unknown
 
_ˇŒ_Ÿhî
(
obje˘
 | 
°rög
 | obje˘ *, såög | 
mixed
 *,...);

39 
mixed
 
_evÆu©e
(mixed, ...);

41 
obje˘
 
_this_obje˘
();

43 
_to_öt
(
°rög
 | | 
OR_BUFFER
);

44 
_to_Êﬂt
(
°rög
 | | );

46 
obje˘
 
_√w
(
°rög
, ...);

48 
unknown
 
ˇŒ_Ÿhî
 
_ˇŒ_Ÿhî
(
obje˘
 | 
°rög
 | obje˘ *, såög | 
mixed
 *,...);

49 
mixed
 
evÆu©e
 
_evÆu©e
(mixed, ...);

50 #ifde‡
COMPAT_32


51 
mixed
 
funˇŒ
 
_evÆu©e
(mixed, ...);

53 
obje˘
 
this_obje˘
 
_this_obje˘
();

54 
to_öt
 
_to_öt
(
°rög
 | | 
OR_BUFFER
);

55 
to_Êﬂt
 
_to_Êﬂt
(
°rög
 | | );

56 
obje˘
 
˛⁄e_obje˘
 
_√w
(
°rög
, ...);

58 
fun˘i⁄
 
böd
(fun˘i⁄, 
obje˘
);

59 
obje˘
 
this_∂ayî
(: 0);

60 
obje˘
 
this_öãø˘ive
 
this_∂ayî
( : 1);

61 
obje˘
 
this_u£r
 
this_∂ayî
( : 0);

62 
mixed
 
¥evious_obje˘
(: 0);

63 
obje˘
 *
Æl_¥evious_obje˘s
 
¥evious_obje˘
(: -1);

64 
mixed
 *
ˇŒ_°ack
(: 0);

65 (
	gmixed
);

66 
°æí
 (
	g°rög
);

67 
de°ru˘
(
obje˘
);

68 
°rög
 
fûe_«me
(
obje˘
 : 
F__THIS_OBJECT
);

69 
°rög
 
ˇpôÆize
(string);

70 
°rög
 *
ex∂ode
(string, string);

71 
mixed
 
im∂ode
(mixed *, 
°rög
 | 
fun˘i⁄
, | mixed);

72 #ifde‡
CALLOUT_HANDLES


73 
ˇŒ_out
(
°rög
 | 
fun˘i⁄
, ,...);

75 
ˇŒ_out
(
°rög
 | 
fun˘i⁄
, ,...);

77 
membî_¨øy
(
mixed
, 
°rög
 | mixed *, | );

78 
öput_to
(
°rög
 | 
fun˘i⁄
,...);

79 
øndom
();

81 #i‚de‡
NO_ENVIRONMENT


82 
obje˘
 
ívú⁄mít
(| object);

83 
obje˘
 *
Æl_övít‹y
(obje˘ : 
F__THIS_OBJECT
);

84 
obje˘
 *
dìp_övít‹y
(obje˘ : 
F__THIS_OBJECT
);

85 
obje˘
 
fú°_övít‹y
(obje˘|
°rög
 : 
F__THIS_OBJECT
);

86 
obje˘
 
√xt_övít‹y
(obje˘ : 
F__THIS_OBJECT
);

87 
ßy
(
°rög
, | 
obje˘
 | object *);

88 
ãŒ_room
(
obje˘
 | 
°rög
, string | object | | , | object | object *);

89 
obje˘
 
¥e£¡
(obje˘ | 
°rög
, | object);

90 
move_obje˘
(
obje˘
 | 
°rög
);

93 #i‚de‡
NO_ADD_ACTION


94 
add_a˘i⁄
(
°rög
 | 
fun˘i⁄
, string | string *, | );

95 
°rög
 
quîy_vîb
();

96 
comm™d
(
°rög
);

97 
ªmove_a˘i⁄
(
°rög
, string);

98 
livög
(
obje˘
 : 
F__THIS_OBJECT
);

99 
mixed
 *
comm™ds
();

100 
dißbÀ_comm™ds
();

101 
íabÀ_comm™ds
();

102 
£t_livög_«me
(
°rög
);

103 
obje˘
 *
livögs
();

104 
obje˘
 
föd_livög
(
°rög
);

105 
obje˘
 
föd_∂ayî
(
°rög
);

106 
nŸify_Áû
(
°rög
 | 
fun˘i⁄
);

108 
£t_this_∂ayî
(
obje˘
 | );

109 
£t_this_u£r
 
£t_this_∂ayî
(
obje˘
 | );

112 
°rög
 
lowî_ˇ£
(string);

113 
°rög
 
ª∂a˚_°rög
(string, string, string,...);

114 
ª°‹e_obje˘
(
°rög
, | );

115 
ßve_obje˘
(
°rög
, | );

116 
°rög
 
ßve_v¨übÀ
(
mixed
);

117 
mixed
 
ª°‹e_v¨übÀ
(
°rög
);

118 
obje˘
 *
u£rs
();

119 
mixed
 *
gë_dú
(
°rög
, : 0);

120 
°r§ch
(
°rög
, string | , : 0);

121 #ifde‡
COMPAT_32


122 
°r°r
 
°r§ch
(
°rög
, string | , : 0);

127 
wrôe
(
mixed
);

128 
ãŒ_obje˘
(
obje˘
, 
°rög
);

129 
shout
(
°rög
);

130 
ª˚ive
(
°rög
 
OR_BUFFER
);

131 
mesßge
(
mixed
, mixed, 
°rög
 | såög * | 
obje˘
 | object *,

132 | 
obje˘
 | object *);

136 
obje˘
 
föd_obje˘
(
°rög
, : 0);

137 
obje˘
 
lﬂd_obje˘
 
föd_obje˘
(
°rög
, : 1);

138 #ifde‡
CALLOUT_HANDLES


139 
föd_ˇŒ_out
(|
°rög
);

141 
föd_ˇŒ_out
(
°rög
);

146 
m≠pög
 
Æloˇã_m≠pög
(| 
mixed
 *, | mixed);

147 
mixed
 *
vÆues
(
m≠pög
);

148 
mixed
 *
keys
(
m≠pög
);

149 #ifde‡
COMPAT_32


150 
m≠pög
 
m≠_dñëe
(m≠pög, 
mixed
);

151 
m≠pög
 
m_dñëe
 
m≠_dñëe
(m≠pög, 
mixed
);

152 
mixed
 *
m_vÆues
 
vÆues
(
m≠pög
);

153 
mixed
 *
m_ödi˚s
 
keys
(
m≠pög
);

155 
m≠_dñëe
(
m≠pög
, 
mixed
);

158 
mixed
 
m©ch_∑th
(
m≠pög
, 
°rög
);

162 
˛⁄ï
(
mixed
 : 
F__THIS_OBJECT
);

163 
öç
(
mixed
);

164 
undeföedp
(
mixed
);

165 
nuŒp
 
undeföedp
(
mixed
);

166 
Êﬂç
(
mixed
);

167 
°rögp
(
mixed
);

168 
vútuÆp
(
obje˘
);

169 
fun˘i⁄p
(
mixed
);

170 #ifde‡
COMPAT_32


171 
˛osuªp
 
fun˘i⁄p
(
mixed
);

173 
poöãΩ
(
mixed
);

174 
¨øyp
 
poöãΩ
(
mixed
);

175 
obje˘p
(
mixed
);

176 
˛as•
(
mixed
);

177 
°rög
 
ty≥of
(
mixed
);

179 #i‚de‡
NO_BUFFER_TYPE


180 
buf„Ω
(
mixed
);

181 
buf„r
 
Æloˇã_buf„r
();

184 
öhîôs
(
°rög
, 
obje˘
);

185 
ª∂a˚_¥ogøm
(
°rög
);

187 
mixed
 
ªgexp
(
°rög
 | string *, string, | );

188 
mixed
 *
ªg_assoc
(
°rög
, string *, mixed *, mixed | );

189 
mixed
 *
Æloˇã
(, | mixed);

190 
mixed
 *
ˇŒ_out_öfo
();

193 
¸c32
(
°rög
 
OR_BUFFER
);

197 #i‚de‡
NO_BUFFER_TYPE


198 
mixed
 
ªad_buf„r
(
°rög
 | 
buf„r
, | , | );

199 
wrôe_buf„r
(
°rög
 | 
buf„r
, , string | buffer | );

201 
wrôe_fûe
(
°rög
, string, | );

202 
ª«me
(
°rög
, string);

203 
wrôe_byãs
(
°rög
, , string);

205 
fûe_size
(
°rög
);

206 
°rög
 
ªad_byãs
(string, | , | );

207 
°rög
 
ªad_fûe
(string, | , | );

208 
˝
(
°rög
, string);

210 #i‚de‡
LATTICE


211 
lök
(
°rög
, string);

213 
mkdú
(
°rög
);

214 
rm
(
°rög
);

215 
rmdú
(
°rög
);

219 
°rög
 
˛ór_bô
(string, );

220 
ã°_bô
(
°rög
, );

221 
°rög
 
£t_bô
(string, );

222 
√xt_bô
(
°rög
, );

224 
°rög
 
¸y±
(string, string | );

225 
°rög
 
ﬁd¸y±
(string, string | );

227 
°rög
 
˘ime
();

228 
exec
(
obje˘
, object);

229 
mixed
 *
loˇ…ime
();

230 
°rög
 
fun˘i⁄_exi°s
(°rög, | 
obje˘
, | );

232 
obje˘
 *
obje˘s
(| 
°rög
 | 
fun˘i⁄
);

233 
°rög
 
quîy_ho°_«me
();

234 
quîy_idÀ
(
obje˘
);

235 
°rög
 
quîy_ù_«me
(| 
obje˘
);

236 
°rög
 
quîy_ù_numbî
(| 
obje˘
);

237 #i‚de‡
NO_SNOOP


238 
obje˘
 
¢o›
(object, | object);

239 
obje˘
 
quîy_¢o›
(object);

240 
obje˘
 
quîy_¢o›ög
(object);

242 #ifde‡
CALLOUT_HANDLES


243 
ªmove_ˇŒ_out
(| | 
°rög
);

245 
ªmove_ˇŒ_out
(| 
°rög
);

247 
£t_hóπ_bót
();

248 
quîy_hóπ_bót
(
obje˘
 :
F__THIS_OBJECT
);

249 
£t_hide
();

251 #ifde‡
LPC_TO_C


252 
gíî©e_sour˚
(
°rög
 | string *, | string);

253 
°rög
 
Õc_öfo
();

256 #i‚de‡
NO_RESETS


257 
£t_ª£t
(
obje˘
, | );

260 #i‚de‡
NO_SHADOWS


261 
obje˘
 
shadow
(object, : 1);

262 
obje˘
 
quîy_shadowög
(object);

264 
mixed
 *
s‹t_¨øy
(mixed *, | 
°rög
 | 
fun˘i⁄
, ...);

265 
throw
(
mixed
);

266 
time
();

267 
mixed
 *
unique_¨øy
(mixed *, 
°rög
 | 
fun˘i⁄
, | mixed);

268 
m≠pög
 
unique_m≠pög
(
mixed
 *, 
°rög
 | 
fun˘i⁄
, ...);

269 
°rög
 *
dìp_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

270 
°rög
 *
shÆlow_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

271 #ifde‡
COMPAT_32


272 
°rög
 *
öhîô_li°
 
dìp_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

274 
°rög
 *
öhîô_li°
 
shÆlow_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

276 
¥ötf
(
°rög
,...);

277 
°rög
 
•rötf
(string,...);

278 
m≠p
(
mixed
);

279 
mixed
 *
°©
(
°rög
, : 0);

284 
öãø˘ive
(
obje˘
 :
F__THIS_OBJECT
);

285 
°rög
 
ö_edô
(
obje˘
 :
F__THIS_OBJECT
);

286 
ö_öput
(
obje˘
 :
F__THIS_OBJECT
);

287 
u£Ω
(
obje˘
);

288 #ifde‡
COMPAT_32


289 
quîy_⁄˚_öãø˘ive
 
u£Ω
(
obje˘
);

292 #i‚de‡
NO_WIZARDS


293 
íabÀ_wiz¨d
();

294 
dißbÀ_wiz¨d
();

295 
wiz¨dp
(
obje˘
);

298 
obje˘
 
ma°î
();

303 
mem‹y_öfo
(
obje˘
 | );

304 
mixed
 
gë_c⁄fig
();

306 #ifde‡
PRIVS


308 
°rög
 
quîy_¥ivs
(
obje˘
 :
F__THIS_OBJECT
);

309 
£t_¥ivs
(
obje˘
, | 
°rög
);

312 
gë_ch¨
(
°rög
 | 
fun˘i⁄
,...);

313 
obje˘
 *
chûdªn
(
°rög
);

315 
ªlﬂd_obje˘
(
obje˘
);

317 
îr‹
(
°rög
);

318 #ifde‡
COMPAT_32


319 
øi£_îr‹
 
îr‹
(
°rög
);

321 
u±ime
();

322 
°rcmp
(
°rög
, string);

324 #i‚de‡
WIN32


325 #i‡(
deföed
(
RUSAGE
Ë|| deföed(
GET_PROCESS_STATS
Ë|| deföed(
TIMES
)Ë|| deföed(
LATTICE
)

326 
m≠pög
 
rußge
();

330 
Êush_mesßges
(| 
obje˘
);

332 #ifde‡
OLD_ED


333 
ed
(
°rög
 | , string | , string | | , | );

335 
°rög
 
ed_°¨t
(string | , | );

336 
°rög
 
ed_cmd
(string);

337 
quîy_ed_mode
();

340 #ifde‡
CACHE_STATS


341 
°rög
 
ˇche_°©s
();

344 
mixed
 
fûãr
(
°rög
 | mixed * | 
m≠pög
, såög | 
fun˘i⁄
, ...);

345 
mixed
 
fûãr_¨øy
 
fûãr
(mixed *, 
°rög
 | 
fun˘i⁄
, ...);

346 
m≠pög
 
fûãr_m≠pög
 
fûãr
(m≠pög, 
°rög
 | 
fun˘i⁄
, ...);

348 
mixed
 
m≠
(
°rög
 | 
m≠pög
 | mixed *, såög | 
fun˘i⁄
, ...);

349 
m≠pög
 
m≠_m≠pög
 
m≠
(m≠pög, 
°rög
 | 
fun˘i⁄
, ...);

350 
mixed
 *
m≠_¨øy
 
m≠
(mixed *, 
°rög
 | 
fun˘i⁄
, ...);

354 
°rög
 
mÆloc_°©us
();

355 
°rög
 
mud_°©us
(: 0);

356 
dum∑Œobj
(
°rög
 | );

358 
°rög
 
dump_fûe_des¸ùt‹s
();

359 
°rög
 
quîy_lﬂd_avîage
();

361 #i‚de‡
NO_LIGHT


363 
£t_light
();

366 
°rög
 
‹igö
();

370 
ª˛aim_obje˘s
();

372 
£t_evÆ_limô
();

373 
ª£t_evÆ_co°
 
£t_evÆ_limô
(: 0);

374 
evÆ_co°
 
£t_evÆ_limô
(: -1);

375 
max_evÆ_co°
 
£t_evÆ_limô
(: 1);

376 #ifde‡
COMPAT_32


377 
gë_evÆ_co°
 
£t_evÆ_limô
(: -1);

380 #ifde‡
DEBUG_MACRO


381 
£t_debug_Àvñ
(|
°rög
);

382 
m≠pög
 
debug_Àvñs
();

383 
˛ór_debug_Àvñ
(
°rög
);

386 #i‡
deföed
(
OPCPROF
Ë|| deföed(
OPCPROF_2D
)

387 
›˝rof
(
°rög
 | );

390 #ifde‡
PROFILE_FUNCTIONS


391 
m≠pög
 *
fun˘i⁄_¥ofûe
(
obje˘
 :
F__THIS_OBJECT
);

394 #ifde‡
DEBUG


395 
sw≠
(
obje˘
);

397 
ªsﬁve
(
°rög
, såög|
fun˘i⁄
);

400 
shutdown
(| );

	@func_spec.cpp

65 
›î©‹
 
	gp›_vÆue
, 
	gpush
, 
	gefun0
, 
	gefun1
, 
	gefun2
, 
	gefun3
, 
	gefunv
;

67 
›î©‹
 
	gsh‹t_öt
, 
	gnumbî
, 
	gªÆ
, 
	gbyã
, 
	gnbyã
, 
	g°rög
, 
	gsh‹t_°rög
, 
	gc⁄°0
, 
	gc⁄°1
;

69 
›î©‹
 
	gaggªg©e
, 
	gaggªg©e_assoc
;

77 
›î©‹
 
	gbønch_whí_zîo
, 
	gbønch_whí_n⁄_zîo
, 
	gbønch
;

78 
›î©‹
 
	gbbønch_whí_zîo
, 
	gbbønch_whí_n⁄_zîo
, 
	gbbønch
;

80 
›î©‹
 
	gbønch_√
, 
	gbønch_ge
, 
	gbønch_À
, 
	gbønch_eq
, 
	gbbønch_…
;

82 
›î©‹
 
	gf‹óch
, 
	g√xt_f‹óch
, 
	gexô_f‹óch
;

83 
›î©‹
 
	glo›_c⁄d_loˇl
, 
	glo›_c⁄d_numbî
;

84 
›î©‹
 
	glo›_ö¸
;

85 
›î©‹
 
	gwhûe_dec
;

87 
›î©‹
 
	gl‹
, 
	gœnd
;

89 
›î©‹
 
	gˇtch
, 
	gíd_ˇtch
;

90 
›î©‹
 
	gtime_ex¥essi⁄
, 
	gíd_time_ex¥essi⁄
;

92 
›î©‹
 ;

94 
›î©‹
 
	gˇŒ_fun˘i⁄_by_addªss
, 
	gˇŒ_öhîôed
, , 
	gªtu∫_zîo
;

97 
›î©‹
 
	geq
, 
	g√
, 
	gÀ
, 
	g…
, 
	gge
, 
	ggt
;

99 
›î©‹
 
	göc
, 
	gdec
, 
	g¥e_öc
, 
	gpo°_öc
, 
	g¥e_dec
, 
	gpo°_dec
;

101 
›î©‹
 
	gå™s„r_loˇl
;

103 
›î©‹
 
	gmake_ªf
, 
	gkûl_ªfs
;

106 
›î©‹
 
	gloˇl
, 
	gloˇl_lvÆue
;

107 
›î©‹
 
	gªf
, 
	gªf_lvÆue
;

108 
›î©‹
 
	gglobÆ
, 
	gglobÆ_lvÆue
;

109 
›î©‹
 
	gmembî
, 
	gmembî_lvÆue
;

110 
›î©‹
 
	gödex
, 
	gödex_lvÆue
;

111 
›î©‹
 
	grödex
, 
	grödex_lvÆue
;

112 
›î©‹
 
	g¬_ønge
, 
	g¬_ønge_lvÆue
, 
	g∫_ønge
, 
	g∫_ønge_lvÆue
;

113 
›î©‹
 
	gº_ønge
, 
	gº_ønge_lvÆue
, 
	gƒ_ønge
, 
	gƒ_ønge_lvÆue
;

114 
›î©‹
 
	g√_ønge
, 
	gª_ønge
;

117 
›î©‹
 
	gadd_eq
, 
	gsub_eq
, 
	g™d_eq
, 
	g‹_eq
, 
	gx‹_eq
, 
	glsh_eq
, 
	grsh_eq
, 
	gmu…_eq
;

118 
›î©‹
 
	gdiv_eq
, 
	gmod_eq
, 
	gassign
;

120 
›î©‹
 
	gvoid_add_eq
, 
	gvoid_assign
, 
	gvoid_assign_loˇl
;

122 
›î©‹
 
	gadd
, 
	gsubåa˘
, 
	gmu…ùly
, 
	gdivide
, 
	gmod
, 
	g™d
, 
	g‹
, 
	gx‹
, 
	glsh
, 
	grsh
;

123 
›î©‹
 
	gnŸ
, 
	g√g©e
, 
	gcom∂
;

125 
›î©‹
 
	gfun˘i⁄_c⁄°ru˘‹
;

126 
›î©‹
 
	gsimul_efun
;

128 
›î©‹
 
	gssˇnf
;

129 
›î©‹
 
	g∑r£_comm™d
;

131 
›î©‹
 
	g√w_˛ass
, 
	g√w_em±y_˛ass
;

132 
›î©‹
 
	gex∑nd_v¨¨gs
;

135 
unknown
 
_ˇŒ_Ÿhî
(
obje˘
 | 
°rög
 | obje˘ *, såög | 
mixed
 *,...);

137 
mixed
 
_evÆu©e
(mixed, ...);

139 
obje˘
 
_this_obje˘
();

141 
_to_öt
(
°rög
 | | | 
buf„r
);

142 
_to_Êﬂt
(
°rög
 | | );

144 
obje˘
 
_√w
(
°rög
, ...);

146 
unknown
 
ˇŒ_Ÿhî
 
_ˇŒ_Ÿhî
(
obje˘
 | 
°rög
 | obje˘ *, såög | 
mixed
 *,...);

147 
mixed
 
evÆu©e
 
_evÆu©e
(mixed, ...);

151 
obje˘
 
this_obje˘
 
_this_obje˘
();

152 
to_öt
 
_to_öt
(
°rög
 | | | 
buf„r
);

153 
to_Êﬂt
 
_to_Êﬂt
(
°rög
 | | );

154 
obje˘
 
˛⁄e_obje˘
 
_√w
(
°rög
, ...);

156 
fun˘i⁄
 
böd
(fun˘i⁄, 
obje˘
);

157 
obje˘
 
this_∂ayî
(: 0);

158 
obje˘
 
this_öãø˘ive
 
this_∂ayî
( : 1);

159 
obje˘
 
this_u£r
 
this_∂ayî
( : 0);

160 
mixed
 
¥evious_obje˘
(: 0);

161 
obje˘
 *
Æl_¥evious_obje˘s
 
¥evious_obje˘
(: -1);

162 
mixed
 *
ˇŒ_°ack
(: 0);

163 (
	gmixed
);

164 
°æí
 (
	g°rög
);

165 
de°ru˘
(
obje˘
);

166 
°rög
 
fûe_«me
(
obje˘
 : 
F__THIS_OBJECT
);

167 
°rög
 
ˇpôÆize
(string);

168 
°rög
 *
ex∂ode
(string, string);

169 
mixed
 
im∂ode
(mixed *, 
°rög
 | 
fun˘i⁄
, | mixed);

171 
ˇŒ_out
(
°rög
 | 
fun˘i⁄
, ,...);

175 
membî_¨øy
(
mixed
, 
°rög
 | mixed *, | );

176 
öput_to
(
°rög
 | 
fun˘i⁄
,...);

177 
øndom
();

180 
obje˘
 
ívú⁄mít
(| object);

181 
obje˘
 *
Æl_övít‹y
(obje˘ : 
F__THIS_OBJECT
);

182 
obje˘
 *
dìp_övít‹y
(obje˘ : 
F__THIS_OBJECT
);

183 
obje˘
 
fú°_övít‹y
(obje˘|
°rög
 : 
F__THIS_OBJECT
);

184 
obje˘
 
√xt_övít‹y
(obje˘ : 
F__THIS_OBJECT
);

185 
ßy
(
°rög
, | 
obje˘
 | object *);

186 
ãŒ_room
(
obje˘
 | 
°rög
, string | object | | , | object | object *);

187 
obje˘
 
¥e£¡
(obje˘ | 
°rög
, | object);

188 
move_obje˘
(
obje˘
 | 
°rög
);

192 
add_a˘i⁄
(
°rög
 | 
fun˘i⁄
, string | string *, | );

193 
°rög
 
quîy_vîb
();

194 
comm™d
(
°rög
);

195 
ªmove_a˘i⁄
(
°rög
, string);

196 
livög
(
obje˘
 : 
F__THIS_OBJECT
);

197 
mixed
 *
comm™ds
();

198 
dißbÀ_comm™ds
();

199 
íabÀ_comm™ds
();

200 
£t_livög_«me
(
°rög
);

201 
obje˘
 *
livögs
();

202 
obje˘
 
föd_livög
(
°rög
);

203 
obje˘
 
föd_∂ayî
(
°rög
);

204 
nŸify_Áû
(
°rög
 | 
fun˘i⁄
);

210 
°rög
 
lowî_ˇ£
(string);

211 
°rög
 
ª∂a˚_°rög
(string, string, string,...);

212 
ª°‹e_obje˘
(
°rög
, | );

213 
ßve_obje˘
(
°rög
, | );

214 
°rög
 
ßve_v¨übÀ
(
mixed
);

215 
mixed
 
ª°‹e_v¨übÀ
(
°rög
);

216 
obje˘
 *
u£rs
();

217 
mixed
 *
gë_dú
(
°rög
, : 0);

218 
°r§ch
(
°rög
, string | , : 0);

225 
wrôe
(
mixed
);

226 
ãŒ_obje˘
(
obje˘
, 
°rög
);

227 
shout
(
°rög
);

228 
ª˚ive
(
°rög
 | 
buf„r
);

229 
mesßge
(
mixed
, mixed, 
°rög
 | såög * | 
obje˘
 | object *,

230 | 
obje˘
 | object *);

234 
obje˘
 
föd_obje˘
(
°rög
, : 0);

235 
obje˘
 
lﬂd_obje˘
 
föd_obje˘
(
°rög
, : 1);

237 
föd_ˇŒ_out
(|
°rög
);

244 
m≠pög
 
Æloˇã_m≠pög
(| 
mixed
 *, | mixed);

245 
mixed
 *
vÆues
(
m≠pög
);

246 
mixed
 *
keys
(
m≠pög
);

253 
m≠_dñëe
(
m≠pög
, 
mixed
);

256 
mixed
 
m©ch_∑th
(
m≠pög
, 
°rög
);

260 
˛⁄ï
(
mixed
 : 
F__THIS_OBJECT
);

261 
öç
(
mixed
);

262 
undeföedp
(
mixed
);

263 
nuŒp
 
undeföedp
(
mixed
);

264 
Êﬂç
(
mixed
);

265 
°rögp
(
mixed
);

266 
vútuÆp
(
obje˘
);

267 
fun˘i⁄p
(
mixed
);

271 
poöãΩ
(
mixed
);

272 
¨øyp
 
poöãΩ
(
mixed
);

273 
obje˘p
(
mixed
);

274 
˛as•
(
mixed
);

275 
°rög
 
ty≥of
(
mixed
);

278 
buf„Ω
(
mixed
);

279 
buf„r
 
Æloˇã_buf„r
();

282 
öhîôs
(
°rög
, 
obje˘
);

283 
ª∂a˚_¥ogøm
(
°rög
);

285 
mixed
 
ªgexp
(
°rög
 | string *, string, | );

286 
mixed
 *
ªg_assoc
(
°rög
, string *, mixed *, mixed | );

287 
mixed
 *
Æloˇã
(, | mixed);

288 
mixed
 *
ˇŒ_out_öfo
();

291 
¸c32
(
°rög
 | 
buf„r
);

296 
mixed
 
ªad_buf„r
(
°rög
 | 
buf„r
, | , | );

297 
wrôe_buf„r
(
°rög
 | 
buf„r
, , string | buffer | );

299 
wrôe_fûe
(
°rög
, string, | );

300 
ª«me
(
°rög
, string);

301 
wrôe_byãs
(
°rög
, , string);

303 
fûe_size
(
°rög
);

304 
°rög
 
ªad_byãs
(string, | , | );

305 
°rög
 
ªad_fûe
(string, | , | );

306 
˝
(
°rög
, string);

309 
lök
(
°rög
, string);

311 
mkdú
(
°rög
);

312 
rm
(
°rög
);

313 
rmdú
(
°rög
);

317 
°rög
 
˛ór_bô
(string, );

318 
ã°_bô
(
°rög
, );

319 
°rög
 
£t_bô
(string, );

320 
√xt_bô
(
°rög
, );

322 
°rög
 
¸y±
(string, string | );

323 
°rög
 
ﬁd¸y±
(string, string | );

325 
°rög
 
˘ime
();

326 
exec
(
obje˘
, object);

327 
mixed
 *
loˇ…ime
();

328 
°rög
 
fun˘i⁄_exi°s
(°rög, | 
obje˘
, | );

330 
obje˘
 *
obje˘s
(| 
°rög
 | 
fun˘i⁄
);

331 
°rög
 
quîy_ho°_«me
();

332 
quîy_idÀ
(
obje˘
);

333 
°rög
 
quîy_ù_«me
(| 
obje˘
);

334 
°rög
 
quîy_ù_numbî
(| 
obje˘
);

336 
obje˘
 
¢o›
(object, | object);

337 
obje˘
 
quîy_¢o›
(object);

338 
obje˘
 
quîy_¢o›ög
(object);

341 
ªmove_ˇŒ_out
(| | 
°rög
);

345 
£t_hóπ_bót
();

346 
quîy_hóπ_bót
(
obje˘
 :
F__THIS_OBJECT
);

347 
£t_hide
();

350 
gíî©e_sour˚
(
°rög
 | string *, | string);

351 
°rög
 
Õc_öfo
();

355 
£t_ª£t
(
obje˘
, | );

359 
obje˘
 
shadow
(object, : 1);

360 
obje˘
 
quîy_shadowög
(object);

362 
mixed
 *
s‹t_¨øy
(mixed *, | 
°rög
 | 
fun˘i⁄
, ...);

363 
throw
(
mixed
);

364 
time
();

365 
mixed
 *
unique_¨øy
(mixed *, 
°rög
 | 
fun˘i⁄
, | mixed);

366 
m≠pög
 
unique_m≠pög
(
mixed
 *, 
°rög
 | 
fun˘i⁄
, ...);

367 
°rög
 *
dìp_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

368 
°rög
 *
shÆlow_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

372 
°rög
 *
öhîô_li°
 
shÆlow_öhîô_li°
(
obje˘
 :
F__THIS_OBJECT
);

374 
¥ötf
(
°rög
,...);

375 
°rög
 
•rötf
(string,...);

376 
m≠p
(
mixed
);

377 
mixed
 *
°©
(
°rög
, : 0);

382 
öãø˘ive
(
obje˘
 :
F__THIS_OBJECT
);

383 
°rög
 
ö_edô
(
obje˘
 :
F__THIS_OBJECT
);

384 
ö_öput
(
obje˘
 :
F__THIS_OBJECT
);

385 
u£Ω
(
obje˘
);

387 
obje˘
 
ma°î
();

392 
mem‹y_öfo
(
obje˘
 | );

393 
mixed
 
gë_c⁄fig
();

401 
gë_ch¨
(
°rög
 | 
fun˘i⁄
,...);

402 
obje˘
 *
chûdªn
(
°rög
);

404 
ªlﬂd_obje˘
(
obje˘
);

406 
îr‹
(
°rög
);

410 
u±ime
();

411 
°rcmp
(
°rög
, string);

415 
m≠pög
 
rußge
();

419 
Êush_mesßges
(| 
obje˘
);

422 
ed
(
°rög
 | , string | , string | | , | );

430 
°rög
 
ˇche_°©s
();

433 
mixed
 
fûãr
(
°rög
 | mixed * | 
m≠pög
, såög | 
fun˘i⁄
, ...);

434 
mixed
 
fûãr_¨øy
 
fûãr
(mixed *, 
°rög
 | 
fun˘i⁄
, ...);

435 
m≠pög
 
fûãr_m≠pög
 
fûãr
(m≠pög, 
°rög
 | 
fun˘i⁄
, ...);

437 
mixed
 
m≠
(
°rög
 | 
m≠pög
 | mixed *, såög | 
fun˘i⁄
, ...);

438 
m≠pög
 
m≠_m≠pög
 
m≠
(m≠pög, 
°rög
 | 
fun˘i⁄
, ...);

439 
mixed
 *
m≠_¨øy
 
m≠
(mixed *, 
°rög
 | 
fun˘i⁄
, ...);

443 
°rög
 
mÆloc_°©us
();

444 
°rög
 
mud_°©us
(: 0);

445 
dum∑Œobj
(
°rög
 | );

447 
°rög
 
dump_fûe_des¸ùt‹s
();

448 
°rög
 
quîy_lﬂd_avîage
();

455 
°rög
 
‹igö
();

459 
ª˛aim_obje˘s
();

461 
£t_evÆ_limô
();

462 
ª£t_evÆ_co°
 
£t_evÆ_limô
(: 0);

463 
evÆ_co°
 
£t_evÆ_limô
(: -1);

464 
max_evÆ_co°
 
£t_evÆ_limô
(: 1);

466 
ªsﬁve
(
°rög
, såög|
fun˘i⁄
);

469 
shutdown
(| );

529 
ªmove_shadow
(
obje˘
);

532 
mixed
 
quîy_nŸify_Áû
();

533 
obje˘
 *
«med_livögs
();

538 
mixed
 
c›y
(mixed);

539 
°rög
 *
fun˘i⁄s
(
obje˘
, : 0);

540 
°rög
 *
v¨übÀs
(
obje˘
, : 0);

541 
obje˘
 *
hóπ_bóts
();

545 
°rög
 
ãrmöÆ_cﬁour
(°rög, 
m≠pög
, | , | );

546 
°rög
 
∂uølize
(string);

547 
fûe_Àngth
(
°rög
);

548 
°rög
 
uµî_ˇ£
(string);

549 
ª∂a˚abÀ
(
obje˘
, | 
°rög
 *);

550 
m≠pög
 
¥ogøm_öfo
(| 
obje˘
);

551 
°‹e_v¨übÀ
(
°rög
, 
mixed
);

552 
mixed
 
„tch_v¨übÀ
(
°rög
);

553 
ªmove_öãø˘ive
(
obje˘
);

554 
quîy_ù_p‹t
(| 
obje˘
);

559 
debug_mesßge
(
°rög
);

560 
obje˘
 
fun˘i⁄_ow√r
(
fun˘i⁄
);

561 
°rög
 
ª≥©_°rög
(string, );

562 
m≠pög
 
mem‹y_summ¨y
();

563 
°rög
 
quîy_ª∂a˚d_¥ogøm
(|
obje˘
);

564 
m≠pög
 
√tw‹k_°©s
();

626 
sockë_¸óã
(, 
°rög
 | 
fun˘i⁄
, string | function | );

627 
sockë_böd
(, , 
°rög
 | );

628 
sockë_li°í
(, 
°rög
 | 
fun˘i⁄
);

629 
sockë_ac˚±
(, 
°rög
 | 
fun˘i⁄
, string | function);

630 
sockë_c⁄√˘
(, 
°rög
, såög | 
fun˘i⁄
, string | function);

631 
sockë_wrôe
(, 
mixed
, 
°rög
 | );

632 
sockë_˛o£
();

633 
sockë_ªÀa£
(, 
obje˘
, 
°rög
 | 
fun˘i⁄
);

634 
sockë_acquúe
(, 
°rög
 | 
fun˘i⁄
, string | function, string | function);

635 
°rög
 
sockë_îr‹
();

636 
°rög
 
sockë_addªss
(| 
obje˘
, : 0);

638 
mixed
 *
sockë_°©us
(| );

697 
mixed
 
debug_öfo
(, 
obje˘
);

698 
ªfs
(
mixed
);

706 
dump_¥og
(
obje˘
,...);

765 
cos
();

766 
sö
();

767 
èn
();

768 
asö
();

769 
acos
();

770 
©™
();

771 
sqπ
();

772 
log
();

773 
log10
();

774 
pow
(, );

775 
exp
();

776 
Êo‹
();

777 
˚û
();

	@function.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"sw≠.h
"

5 
	~"e›î©‹s.h
"

6 
	~"compûî.h
"

7 
	~"ª∂a˚_¥ogøm.h
"

9 
INLINE
 

10 
dóŒoc_fu≈
 
	$P1
(
fu≈å_t
 *, 
Â
)

12 
¥ogøm_t
 *
¥og
 = 0;

14 
Â
->
hdr
.
ty≥
) {

15 
FP_LOCAL
 | 
FP_NOT_BINDABLE
:

16 i‡(
Â
->
hdr
.
ow√r
)

17 
¥og
 = 
Â
->
hdr
.
ow√r
->prog;

19 
FP_FUNCTIONAL
:

20 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

21 
¥og
 = 
Â
->
f
.
fun˘i⁄Æ
.prog;

25 i‡(
Â
->
hdr
.
ow√r
)

26 
	`‰ì_obje˘
(
Â
->
hdr
.
ow√r
, "free_funp");

27 i‡(
Â
->
hdr
.
¨gs
)

28 
	`‰ì_¨øy
(
Â
->
hdr
.
¨gs
);

30 i‡(
¥og
) {

31 
¥og
->
func_ªf
--;

32 
	`debug
(
d_Êag
, ("subtr funcÑef /%s:Çow %i\n",

33 
¥og
->
«me
,Örog->
func_ªf
));

34 i‡(!
¥og
->
func_ªf
 && !¥og->
ªf
)

35 
	`dóŒoˇã_¥ogøm
(
¥og
);

38 
	`FREE
(
Â
);

39 
	}
}

41 
INLINE
 

42 
‰ì_fu≈
 
	$P1
(
fu≈å_t
 *, 
Â
)

44 
Â
->
hdr
.
ªf
--;

45 i‡(
Â
->
hdr
.
ªf
 > 0) {

48 
	`dóŒoc_fu≈
(
Â
);

49 
	}
}

51 
INLINE
 

52 
push_ª„d_fu≈
 
	$P1
(
fu≈å_t
 *, 
Â
)

54 
STACK_INC
;

55 
•
->
ty≥
 = 
T_FUNCTION
;

56 
•
->
u
.
Â
 = fp;

57 
	}
}

59 
INLINE
 

60 
push_fu≈
 
	$P1
(
fu≈å_t
 *, 
Â
)

62 
STACK_INC
;

63 
•
->
ty≥
 = 
T_FUNCTION
;

64 
•
->
u
.
Â
 = fp;

65 
Â
->
hdr
.
ªf
++;

66 
	}
}

75 
mîge_¨g_li°s
 
	$P3
(, 
num_¨g
, 
¨øy_t
 *, 
¨r
, , 
°¨t
) {

76 
num_¨r_¨g
 = 
¨r
->
size
 - 
°¨t
;

77 
svÆue_t
 *
•å
;

79 i‡(
num_¨r_¨g
) {

80 
	`CHECK_STACK_OVERFLOW
(
num_¨r_¨g
);

81 
•å
 = (
•
 +
num_¨r_¨g
);

82 i‡(
num_¨g
) {

85 
num_¨g
--) {

86 *
•å
 = *(•å - 
num_¨r_¨g
);

87 
•å
--;

90 
num_¨g
 = 
¨r
->
size
;

91 --
num_¨g
 >
°¨t
)

92 
	`assign_svÆue_no_‰ì
(
•å
--, &
¨r
->
ôem
[
num_¨g
]);

94  (
•
 - 
•å
);

96  
num_¨g
;

97 
	}
}

99 
INLINE
 
fu≈å_t
 *

100 
make_efun_fu≈
 
	$P2
(, 
›code
, 
svÆue_t
 *, 
¨gs
)

102 
fu≈å_t
 *
Â
;

104 
Â
 = (
fu≈å_t
 *)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
efun_±r_t
),

105 
TAG_FUNP
, "make_efun_funp");

106 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

107 
	`add_ªf
–
cuºít_obje˘
, "make_efun_funp" );

108 
Â
->
hdr
.
ty≥
 = 
FP_EFUN
;

110 
Â
->
f
.
efun
.
ödex
 = 
›code
;

112 i‡(
¨gs
->
ty≥
 =
T_ARRAY
) {

113 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

114 
¨gs
->
u
.
¨r
->
ªf
++;

116 
Â
->
hdr
.
¨gs
 = 0;

118 
Â
->
hdr
.
ªf
 = 1;

119  
Â
;

120 
	}
}

122 
INLINE
 
fu≈å_t
 *

123 
make_lfun_fu≈
 
	$P2
(, 
ödex
, 
svÆue_t
 *, 
¨gs
)

125 
fu≈å_t
 *
Â
;

126 
√wödex
;

128 i‡(
	`ª∂a˚_¥ogøm_≥ndög
(
cuºít_obje˘
))

129 
	`îr‹
("cannot bindánÜfun fpÅoán object witháÖendingÑeplace_program()\n");

131 
Â
 = (
fu≈å_t
 *)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
loˇl_±r_t
),

132 
TAG_FUNP
, "make_lfun_funp");

133 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

134 
	`add_ªf
–
cuºít_obje˘
, "make_lfun_funp" );

135 
Â
->
hdr
.
ty≥
 = 
FP_LOCAL
 | 
FP_NOT_BINDABLE
;

137 
Â
->
hdr
.
ow√r
->
¥og
->
func_ªf
++;

138 
	`debug
(
d_Êag
, ("add funcÑef /%s:Çow %i\n",

139 
Â
->
hdr
.
ow√r
->
¥og
->
«me
,

140 
Â
->
hdr
.
ow√r
->
¥og
->
func_ªf
));

142 
√wödex
 = 
ödex
 + 
fun˘i⁄_ödex_off£t
;

143 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
√wödex
] & 
FUNC_ALIAS
)

144 
√wödex
 = 
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[√wödex] & ~
FUNC_ALIAS
;

145 
Â
->
f
.
loˇl
.
ödex
 = 
√wödex
;

147 i‡(
¨gs
->
ty≥
 =
T_ARRAY
) {

148 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

149 
¨gs
->
u
.
¨r
->
ªf
++;

151 
Â
->
hdr
.
¨gs
 = 0;

153 
Â
->
hdr
.
ªf
 = 1;

154  
Â
;

155 
	}
}

157 
INLINE
 
fu≈å_t
 *

158 
make_simul_fu≈
 
	$P2
(, 
ödex
, 
svÆue_t
 *, 
¨gs
)

160 
fu≈å_t
 *
Â
;

162 
Â
 = (
fu≈å_t
 *)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
simul_±r_t
),

163 
TAG_FUNP
, "make_simul_funp");

164 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

165 
	`add_ªf
–
cuºít_obje˘
, "make_simul_funp" );

166 
Â
->
hdr
.
ty≥
 = 
FP_SIMUL
;

168 
Â
->
f
.
simul
.
ödex
 = index;

170 i‡(
¨gs
->
ty≥
 =
T_ARRAY
) {

171 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

172 
¨gs
->
u
.
¨r
->
ªf
++;

174 
Â
->
hdr
.
¨gs
 = 0;

176 
Â
->
hdr
.
ªf
 = 1;

177  
Â
;

178 
	}
}

180 
INLINE
 
fu≈å_t
 *

181 
make_fun˘i⁄Æ_fu≈
 
	$P5
(, 
num_¨g
, , 
num_loˇl
, , 
Àn
, 
svÆue_t
 *, 
¨gs
, , 
Êag
)

183 
fu≈å_t
 *
Â
;

185 i‡(
	`ª∂a˚_¥ogøm_≥ndög
(
cuºít_obje˘
))

186 
	`îr‹
("cannot bindá functionalÅoán object witháÖendingÑeplace_program()\n");

188 
Â
 = (
fu≈å_t
 *)
	`DXALLOC
((
fu≈å_hdr_t
Ë+ (
fun˘i⁄Æ_t
),

189 
TAG_FUNP
, "make_functional_funp");

190 
Â
->
hdr
.
ow√r
 = 
cuºít_obje˘
;

191 
	`add_ªf
–
cuºít_obje˘
, "make_functional_funp" );

192 
Â
->
hdr
.
ty≥
 = 
FP_FUNCTIONAL
 + 
Êag
;

194 
cuºít_¥og
->
func_ªf
++;

195 
	`debug
(
d_Êag
, ("add funcÑef /%s:Çow %i\n",

196 
cuºít_¥og
->
«me
,

197 
cuºít_¥og
->
func_ªf
));

199 
Â
->
f
.
fun˘i⁄Æ
.
¥og
 = 
cuºít_¥og
;

200 
Â
->
f
.
fun˘i⁄Æ
.
off£t
 = 
pc
 - 
cuºít_¥og
->
¥ogøm
;

201 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 =Çum_arg;

202 
Â
->
f
.
fun˘i⁄Æ
.
num_loˇl
 =Çum_local;

203 
Â
->
f
.
fun˘i⁄Æ
.
fio
 = 
fun˘i⁄_ödex_off£t
;

204 
Â
->
f
.
fun˘i⁄Æ
.
vio
 = 
v¨übÀ_ödex_off£t
;

205 
pc
 +
Àn
;

207 i‡(
¨gs
 &&árgs->
ty≥
 =
T_ARRAY
) {

208 
Â
->
hdr
.
¨gs
 =árgs->
u
.
¨r
;

209 
¨gs
->
u
.
¨r
->
ªf
++;

210 
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
 +
¨gs
->
u
.
¨r
->
size
;

212 
Â
->
hdr
.
¨gs
 = 0;

214 
Â
->
hdr
.
ªf
 = 1;

215  
Â
;

216 
	}
}

218 (*
	tfunc_t
Ë
	tPROT
(());

219 
func_t
 
efun_èbÀ
[];

221 
svÆue_t
 *

222 
ˇŒ_fun˘i⁄_poöãr
 
	$P2
(
fu≈å_t
 *, 
fu≈
, , 
num_¨g
)

224 
func_t
 *
€fun_èbÀ
 = 
efun_èbÀ
 - 
BASE
;

226 i‡(!
fu≈
->
hdr
.
ow√r
 || (fu≈->hdr.ow√r->
Êags
 & 
O_DESTRUCTED
))

227 
	`îr‹
("Owner (/%s) of functionÖointer is destructed.\n",

228 (
fu≈
->
hdr
.
ow√r
 ? fu≈->hdr.ow√r->
«me
 : "(null)"));

230 
	`£tup_Áke_‰ame
(
fu≈
);

231 i‡(
cuºít_obje˘
->
Êags
 & 
O_SWAPPED
)

232 
	`lﬂd_ob_‰om_sw≠
(
cuºít_obje˘
);

234 
fu≈
->
hdr
.
ty≥
) {

235 
FP_SIMUL
:

236 i‡(
fu≈
->
hdr
.
¨gs
) {

237 
	`check_f‹_de°r
(
fu≈
->
hdr
.
¨gs
);

238 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
fu≈
->
hdr
.
¨gs
, 0);

240 
	`ˇŒ_simul_efun
(
fu≈
->
f
.
simul
.
ödex
, 
num_¨g
);

242 
FP_EFUN
:

244 
i
, 
def
;

246 
Â
 = 
•
 - 
num_¨g
 + 1;

247 i‡(
fu≈
->
hdr
.
¨gs
) {

248 
	`check_f‹_de°r
(
fu≈
->
hdr
.
¨gs
);

249 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
fu≈
->
hdr
.
¨gs
, 0);

251 
i
 = 
fu≈
->
f
.
efun
.
ödex
;

252 i‡(
num_¨g
 =
ö°rs
[
i
].
mö_¨g
 - 1 &&

253 ((
def
 = 
ö°rs
[
i
].
DeÁu…
Ë!
DEFAULT_NONE
)) {

254 i‡(
def
 =
DEFAULT_THIS_OBJECT
) {

255 
	`push_obje˘
(
cuºít_obje˘
);

257 
	`push_numbî
(
def
);

259 
num_¨g
++;

261 i‡(
num_¨g
 < 
ö°rs
[
i
].
mö_¨g
) {

262 
	`îr‹
("Toÿ„wárgumít†tÿefu¿%†öÉfu¿poöãr.\n", 
	`quîy_ö°r_«me
(
i
));

263 } i‡(
num_¨g
 > 
ö°rs
[
i
].
max_¨g
 && instrs[i].max_arg != -1) {

264 
	`îr‹
("Toÿm™yárgumít†tÿefu¿%†öÉfu¿poöãr.\n", 
	`quîy_ö°r_«me
(
i
));

269 
j
, 
n
 = 
num_¨g
;

270 
°_num_¨g
 = 
num_¨g
;

272 i‡(
n
 >4 || 
ö°rs
[
i
].
max_¨g
 == -1)

273 
n
 = 
ö°rs
[
i
].
mö_¨g
;

275 
j
 = 0; j < 
n
; j++) {

276 
	`CHECK_TYPES
(
•
 - 
num_¨g
 + 
j
 + 1, 
ö°rs
[
i
].
ty≥
[j], j + 1, i);

278 (*
€fun_èbÀ
[
i
])();

280 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "call_function_pointer");

281 i‡(
ö°rs
[
i
].
ªt_ty≥
 =
TYPE_NOVALUE
)

282 
≠∂y_ªt_vÆue
 = 
c⁄°0
;

284 
≠∂y_ªt_vÆue
 = *
•
--;

285 
	`ªmove_Áke_‰ame
();

286  &
≠∂y_ªt_vÆue
;

289 
FP_LOCAL
 | 
FP_NOT_BINDABLE
: {

290 
fun˘i⁄_t
 *
func
;

292 
Â
 = 
•
 - 
num_¨g
 + 1;

294 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
fu≈
->
f
.
loˇl
.
ödex
] & (
FUNC_PROTOTYPE
|
FUNC_UNDEFINED
))

295 
	`îr‹
("UndeföedÜfu¿poöã∏ˇŒed: %s\n", 
	`fun˘i⁄_«me
(
cuºít_obje˘
->
¥og
, 
fu≈
->
f
.
loˇl
.
ödex
));

297 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

298 
cuºít_¥og
 = 
fu≈
->
hdr
.
ow√r
->
¥og
;

300 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

302 i‡(
fu≈
->
hdr
.
¨gs
) {

303 
¨øy_t
 *
v
 = 
fu≈
->
hdr
.
¨gs
;

305 
	`check_f‹_de°r
(
v
);

306 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
v
, 0);

309 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

310 
func
 = 
	`£tup_√w_‰ame
(
fu≈
->
f
.
loˇl
.
ödex
);

312 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
func
->
addªss
);

315 
FP_FUNCTIONAL
:

316 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
: {

317 
Â
 = 
•
 - 
num_¨g
 + 1;

319 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNP
);

320 
cuºít_¥og
 = 
fu≈
->
f
.
fun˘i⁄Æ
.
¥og
;

321 
c•
->
‰
.
fu≈
 = funp;

323 
ˇŒî_ty≥
 = 
ORIGIN_FUNCTIONAL
;

325 i‡(
fu≈
->
hdr
.
¨gs
) {

326 
¨øy_t
 *
v
 = 
fu≈
->
hdr
.
¨gs
;

328 
	`check_f‹_de°r
(
v
);

329 
num_¨g
 = 
	`mîge_¨g_li°s
“um_¨g, 
v
, 0);

332 
	`£tup_v¨übÀs
(
num_¨g
, 
fu≈
->
f
.
fun˘i⁄Æ
.
num_loˇl
,

333 
fu≈
->
f
.
fun˘i⁄Æ
.
num_¨g
);

335 
fun˘i⁄_ödex_off£t
 = 
fu≈
->
f
.
fun˘i⁄Æ
.
fio
;

336 
v¨übÀ_ödex_off£t
 = 
fu≈
->
f
.
fun˘i⁄Æ
.
vio
;

337 
	`ˇŒ_¥ogøm
(
fu≈
->
f
.
fun˘i⁄Æ
.
¥og
, fu≈->f.fun˘i⁄Æ.
off£t
);

341 
	`îr‹
("Unsupported functionÖointerÅype.\n");

343 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "call_function_pointer");

344 
≠∂y_ªt_vÆue
 = *
•
--;

345 
	`ªmove_Áke_‰ame
();

346  &
≠∂y_ªt_vÆue
;

347 
	}
}

349 
svÆue_t
 *

350 
ß„_ˇŒ_fun˘i⁄_poöãr
 
	$P2
(
fu≈å_t
 *, 
fu≈
, , 
num_¨g
)

352 
îr‹_c⁄ãxt_t
 
ec⁄
;

353 
svÆue_t
 *
ªt
;

355 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
))

357 i‡(!
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

358 
ªt
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
fu≈
, 
num_¨g
);

360 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

362 
	`p›_n_ñems
(
num_¨g
);

363 
ªt
 = 0;

365 
	`p›_c⁄ãxt
(&
ec⁄
);

366  
ªt
;

367 
	}
}

	@function.h

1 #i‚de‡
FUNCTION_H


2 
	#FUNCTION_H


	)

9 
	mödex
;

10 } 
	tloˇl_±r_t
;

13 
loˇl_±r_t
 
	tsimul_±r_t
;

16 
loˇl_±r_t
 
	tefun_±r_t
;

21 
	mnum_¨g
;

22 
	mnum_loˇl
;

23 #i‚de‡
LPC_TO_C


24 
	moff£t
;

26 
POINTER_INT
 
	moff£t
;

28 
¥ogøm_s
 *
	m¥og
;

29 
	mfio
, 
	mvio
;

30 } 
	tfun˘i⁄Æ_t
;

34 
	mªf
;

35 
	mty≥
;

36 #ifde‡
DEBUG


37 
	mexåa_ªf
;

39 
obje˘_s
 *
	mow√r
;

40 
¨øy_s
 *
	m¨gs
;

41 } 
	tfu≈å_hdr_t
;

43 
	sfu≈å_s
 {

44 
fu≈å_hdr_t
 
	mhdr
;

46 
efun_±r_t
 
	mefun
;

47 
loˇl_±r_t
 
	mloˇl
;

48 
simul_±r_t
 
	msimul
;

49 
fun˘i⁄Æ_t
 
	mfun˘i⁄Æ
;

50 } 
	mf
;

51 } 
	tfu≈å_t
;

53 
	u°rög_‹_func
 {

54 
fu≈å_t
 *
	mf
;

55 *
	ms
;

58 
dóŒoc_fu≈
 
PROT
((
fu≈å_t
 *));

59 
push_ª„d_fu≈
 
PROT
((
fu≈å_t
 *));

60 
INLINE
 
push_fu≈
 
PROT
((
fu≈å_t
 *));

61 
INLINE
 
‰ì_fu≈
 
PROT
((
fu≈å_t
 *));

62 
mîge_¨g_li°s
 
PROT
((, 
¨øy_s
 *, ));

63 
INLINE
 
fu≈å_t
 *
make_efun_fu≈
 
PROT
((, 
svÆue_s
 *));

64 
INLINE
 
fu≈å_t
 *
make_lfun_fu≈
 
PROT
((, 
svÆue_s
 *));

65 
INLINE
 
fu≈å_t
 *
make_simul_fu≈
 
PROT
((, 
svÆue_s
 *));

66 
INLINE
 
fu≈å_t
 *
make_fun˘i⁄Æ_fu≈
 
PROT
((, , ,

67 
svÆue_s
 *, ));

	@generate.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"gíî©e.h
"

4 
	~"compûî.h
"

6 
∑r£_node_t
 *
›timize
 
PROT
((parse_node_t *));

7 
∑r£_node_t
 **
	gœ°_loˇl_ªfs
 = 0;

8 
	g›timizî_num_loˇls
;

25 
›timize_ex¥_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

26 i‡(!
ex¥
) ;

28 
ex¥
->
v
.ex¥ = 
	`›timize
(expr->v.expr);

29 } (
ex¥
 =Éx¥->
r
.expr));

30 
	}
}

33 
›timize_lvÆue_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

34 (
ex¥
 =Éx¥->
r
.expr)) {

35 
ex¥
->
v
.ex¥ = 
	`›timize
”x¥->
l
.expr);

37 
	}
}

39 
	#OPT
(
x
Ëx = 
	`›timize
(x)

	)

40 
	#OPTIMIZER_IN_LOOP
 1

	)

41 
	#OPTIMIZER_IN_COND
 2

	)

42 
	g›timizî_°©e
 = 0;

44 
∑r£_node_t
 *

45 
›timize
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

46 i‡(!
ex¥
)  0;

48 
ex¥
->
köd
) {

49 
NODE_TERNARY_OP
:

50 
	`OPT
(
ex¥
->
l
.expr);

51 
	`OPT
(
ex¥
->
r
.ex¥->
l
.expr);

52 
	`OPT
(
ex¥
->
r
.expr->r.expr);

54 
NODE_BINARY_OP
:

55 
	`OPT
(
ex¥
->
l
.expr);

56 i‡(
ex¥
->
v
.
numbî
 =
F_ASSIGN
) {

57 i‡(
	`IS_NODE
(
ex¥
->
r
.ex¥, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

58 i‡(!
›timizî_°©e
) {

59 
x
 = 
ex¥
->
r
.ex¥->
l
.
numbî
;

61 i‡(
œ°_loˇl_ªfs
[
x
]) {

62 
œ°_loˇl_ªfs
[
x
]->
v
.
numbî
 = 
F_TRANSFER_LOCAL
;

63 
œ°_loˇl_ªfs
[
x
] = 0;

68 
	`OPT
(
ex¥
->
r
.expr);

70 
NODE_UNARY_OP
:

71 
	`OPT
(
ex¥
->
r
.expr);

73 
NODE_OPCODE
:

75 
NODE_TERNARY_OP_1
:

76 
	`OPT
(
ex¥
->
l
.expr);

77 
	`OPT
(
ex¥
->
r
.ex¥->
l
.expr);

78 
	`OPT
(
ex¥
->
r
.expr->r.expr);

80 
NODE_BINARY_OP_1
:

81 
	`OPT
(
ex¥
->
l
.expr);

82 
	`OPT
(
ex¥
->
r
.expr);

84 
NODE_UNARY_OP_1
:

85 
	`OPT
(
ex¥
->
r
.expr);

86 i‡(
ex¥
->
v
.
numbî
 =
F_VOID_ASSIGN_LOCAL
) {

87 i‡(
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] && !
›timizî_°©e
) {

88 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
]->
v
.numbî = 
F_TRANSFER_LOCAL
;

89 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] = 0;

93 
NODE_OPCODE_1
:

94 i‡(
ex¥
->
v
.
numbî
 =
F_LOCAL
 ||Éx¥->v.numbî =
F_LOCAL_LVALUE
) {

95 i‡(
ex¥
->
v
.
numbî
 =
F_LOCAL
) {

96 if(!
›timizî_°©e
) {

97 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] =Éxpr;

101 
œ°_loˇl_ªfs
[
ex¥
->
l
.
numbî
] = 0;

104 
NODE_OPCODE_2
:

106 
NODE_RETURN
:

107 
	`OPT
(
ex¥
->
r
.expr);

109 
NODE_STRING
:

110 
NODE_REAL
:

111 
NODE_NUMBER
:

113 
NODE_LAND_LOR
:

114 
NODE_BRANCH_LINK
:

115 
	`OPT
(
ex¥
->
l
.expr);

116 
	`OPT
(
ex¥
->
r
.expr);

118 
NODE_CALL_2
:

119 
NODE_CALL_1
:

120 
NODE_CALL
:

121 
	`›timize_ex¥_li°
(
ex¥
->
r
.expr);

123 
NODE_TWO_VALUES
:

124 
	`OPT
(
ex¥
->
l
.expr);

125 
	`OPT
(
ex¥
->
r
.expr);

127 
NODE_CONTROL_JUMP
:

128 
NODE_PARAMETER
:

129 
NODE_PARAMETER_LVALUE
:

131 
NODE_IF
:

133 
ö_c⁄d
;

134 
	`OPT
(
ex¥
->
v
.expr);

135 
ö_c⁄d
 = (
›timizî_°©e
 & 
OPTIMIZER_IN_COND
);

136 
›timizî_°©e
 |
OPTIMIZER_IN_COND
;

137 
	`OPT
(
ex¥
->
l
.expr);

138 
	`OPT
(
ex¥
->
r
.expr);

139 
›timizî_°©e
 &~
OPTIMIZER_IN_COND
;

140 
›timizî_°©e
 |
ö_c⁄d
;

143 
NODE_LOOP
:

145 
ö_lo›
 = (
›timizî_°©e
 & 
OPTIMIZER_IN_LOOP
);

146 
›timizî_°©e
 |
OPTIMIZER_IN_LOOP
;

147 
	`OPT
(
ex¥
->
v
.expr);

148 
	`OPT
(
ex¥
->
l
.expr);

149 
	`OPT
(
ex¥
->
r
.expr);

150 
›timizî_°©e
 &~
OPTIMIZER_IN_LOOP
;

151 
›timizî_°©e
 |
ö_lo›
;

154 
NODE_FOREACH
:

155 
	`OPT
(
ex¥
->
l
.expr);

156 
	`OPT
(
ex¥
->
r
.expr);

157 
	`OPT
(
ex¥
->
v
.expr);

159 
NODE_CASE_NUMBER
:

160 
NODE_CASE_STRING
:

161 
NODE_DEFAULT
:

163 
NODE_SWITCH_STRINGS
:

164 
NODE_SWITCH_NUMBERS
:

165 
NODE_SWITCH_DIRECT
:

166 
NODE_SWITCH_RANGES
:

168 
ö_c⁄d
;

169 
	`OPT
(
ex¥
->
l
.expr);

170 
ö_c⁄d
 = (
›timizî_°©e
 & 
OPTIMIZER_IN_COND
);

171 
›timizî_°©e
 |
OPTIMIZER_IN_COND
;

172 
	`OPT
(
ex¥
->
r
.expr);

173 
›timizî_°©e
 &~
OPTIMIZER_IN_COND
;

174 
›timizî_°©e
 |
ö_c⁄d
;

177 
NODE_CATCH
:

178 
	`OPT
(
ex¥
->
r
.expr);

180 
NODE_LVALUE_EFUN
:

181 
	`OPT
(
ex¥
->
l
.expr);

182 
	`›timize_lvÆue_li°
(
ex¥
->
r
.expr);

185 
NODE_FUNCTION_CONSTRUCTOR
:

197 i‡(
ex¥
->
r
.expr)

198 
	`›timize_ex¥_li°
(
ex¥
->
r
.expr);

200 
NODE_ANON_FUNC
:

202 
NODE_EFUN
:

203 
	`›timize_ex¥_li°
(
ex¥
->
r
.expr);

208  
ex¥
;

209 
	}
}

211 #ifde‡
DEBUG


212 *
	gÕc_åì_«me
[] = {

223 
Õc_åì
 
	$P2
(
∑r£_node_t
 *, 
de°
, , 
num
) {

224 
∑r£_node_t
 *
≤
;

226 
de°
->
köd
 = 
NODE_CALL
;

227 
de°
->
v
.
numbî
 = 
F_AGGREGATE
;

228 
de°
->
ty≥
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

229 
de°
->
l
.
numbî
 = 
num
;

230 i‡(!
num
)

231 
de°
->
r
.
ex¥
 = 0;

233 
de°
->
r
.
ex¥
 = 
	`√w_node_no_löe
();

234 
de°
->
r
.
ex¥
->
köd
 = 
num
--;

235 
≤
 = 
de°
->
r
.
ex¥
;

236 
num
--) {

237 
≤
->
r
.
ex¥
 = 
	`√w_node_no_löe
();

238 
≤
->
ty≥
 = 0;

239 
≤
 =Ön->
r
.
ex¥
;

241 
≤
->
ty≥
 = 0;

242 
≤
->
r
.
ex¥
 = 0;

243 
de°
->
r
.
ex¥
->
l
.ex¥ = 
≤
;

245 
	}
}

247 
Õc_åì_numbî
 
	$P2
(
∑r£_node_t
 *, 
de°
, , 
num
) {

248 
	`CREATE_NUMBER
(
de°
->
v
.
ex¥
, 
num
);

249 
	}
}

251 
Õc_åì_ªÆ
 
	$P2
(
∑r£_node_t
 *, 
de°
, , 
ªÆ
) {

252 
	`CREATE_REAL
(
de°
->
v
.
ex¥
, 
ªÆ
);

253 
	}
}

255 
Õc_åì_ex¥
 
	$P2
(
∑r£_node_t
 *, 
de°
,Ö¨£_node_à*, 
ex¥
) {

256 
de°
->
v
.
ex¥
 = 
	`√w_node_no_löe
();

257 
	`Õc_åì_f‹m
(
ex¥
, 
de°
->
v
.expr);

258 
	}
}

260 
Õc_åì_°rög
 
	$P2
(
∑r£_node_t
 *, 
de°
, *, 
°r
) {

261 
	`CREATE_STRING
(
de°
->
v
.
ex¥
, 
°r
);

262 
	}
}

264 
Õc_åì_li°
 
	$P2
(
∑r£_node_t
 *, 
de°
,Ö¨£_node_à*, 
ex¥
) {

265 
∑r£_node_t
 *
≤
;

266 
num
 = 0;

268 
≤
 = 
ex¥
;

269 
≤
) {

270 
≤
 =Ön->
r
.
ex¥
;

271 
num
++;

274 
de°
->
v
.
ex¥
 = 
	`√w_node_no_löe
();

275 
	`Õc_åì
(
de°
->
v
.
ex¥
, 
num
);

276 
de°
 = de°->
v
.
ex¥
;

277 
ex¥
) {

278 
de°
 = de°->
r
.
ex¥
;

279 
	`Õc_åì_ex¥
(
de°
, 
ex¥
->
v
.expr);

280 
ex¥
 =Éx¥->
r
.expr;

282 
	}
}

284 
	#Õc_åì_›c
(
x
, 
y
Ë
	`Õc_åì_°rög
(x, 
	`quîy_ö°r_«me
(y & ~
NOVALUE_USED_FLAG
))

	)

286 
	#ARG_1
 
de°
->
r
.
ex¥


	)

287 
	#ARG_2
 
de°
->
r
.
ex¥
->r.
	)
expr

288 
	#ARG_3
 
de°
->
r
.
ex¥
->r.ex¥->r.
	)
expr

289 
	#ARG_4
 
de°
->
r
.
ex¥
->r.ex¥->r.ex¥->r.
	)
expr

290 
	#ARG_5
 
de°
->
r
.
ex¥
->r.ex¥->r.ex¥->r.ex¥->r.
	)
expr

293 
Õc_åì_f‹m
 
	$P2
(
∑r£_node_t
 *, 
ex¥
,Ö¨£_node_à*, 
de°
) {

294 i‡(!
ex¥
) {

295 
de°
->
köd
 = 
NODE_NUMBER
;

296 
de°
->
ty≥
 = 
TYPE_ANY
;

297 
de°
->
v
.
numbî
 = 0;

301 
ex¥
->
köd
) {

302 
NODE_TERNARY_OP
:

303 
	`Õc_åì
(
de°
, 4);

304 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
r
.ex¥->
v
.
numbî
);

305 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
l
.expr);

306 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

308 
NODE_TERNARY_OP_1
:

309 
	`Õc_åì
(
de°
, 5);

310 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
r
.ex¥->
v
.
numbî
);

311 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
ty≥
);

312 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
l
.expr);

313 
	`Õc_åì_ex¥
(
ARG_5
, 
ex¥
->
r
.expr);

315 
NODE_BINARY_OP
:

316 
NODE_LAND_LOR
:

317 
NODE_BRANCH_LINK
:

318 
	`Õc_åì
(
de°
, 4);

319 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

320 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
l
.expr);

321 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

323 
NODE_TWO_VALUES
:

324 
	`Õc_åì
(
de°
, 3);

325 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

326 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

328 
NODE_BINARY_OP_1
:

329 
	`Õc_åì
(
de°
, 5);

330 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

331 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
ty≥
);

332 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
l
.expr);

333 
	`Õc_åì_ex¥
(
ARG_5
, 
ex¥
->
r
.expr);

335 
NODE_UNARY_OP
:

336 
	`Õc_åì
(
de°
, 3);

337 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

338 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

340 
NODE_UNARY_OP_1
:

341 
	`Õc_åì
(
de°
, 4);

342 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

343 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
l
.
numbî
);

344 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

346 
NODE_OPCODE
:

347 
	`Õc_åì
(
de°
, 2);

348 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

350 
NODE_CONTROL_JUMP
:

351 
NODE_PARAMETER
:

352 
NODE_PARAMETER_LVALUE
:

353 
	`Õc_åì
(
de°
, 2);

354 
	`Õc_åì_numbî
(
ARG_2
, 
ex¥
->
v
.
numbî
);

356 
NODE_OPCODE_1
:

357 
	`Õc_åì
(
de°
, 3);

358 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

359 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
l
.
numbî
);

361 
NODE_OPCODE_2
:

362 
	`Õc_åì
(
de°
, 4);

363 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

364 
	`Õc_åì_numbî
(
ARG_3
, 
ex¥
->
l
.
numbî
);

365 
	`Õc_åì_numbî
(
ARG_4
, 
ex¥
->
r
.
numbî
);

367 
NODE_RETURN
:

368 
	`Õc_åì
(
de°
, 2);

369 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
r
.expr);

371 
NODE_STRING
:

372 
NODE_NUMBER
:

373 
	`Õc_åì
(
de°
, 2);

374 
	`Õc_åì_numbî
(
ARG_2
, 
ex¥
->
v
.
numbî
);

376 
NODE_REAL
:

377 
	`Õc_åì
(
de°
, 2);

378 
	`Õc_åì_ªÆ
(
ARG_2
, 
ex¥
->
v
.
ªÆ
);

380 
NODE_CALL_2
:

381 
NODE_CALL_1
:

382 
NODE_CALL
:

383 
	`Õc_åì
(
de°
, 4);

384 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

385 
	`Õc_åì_li°
(
ARG_3
, 
ex¥
->
r
.expr);

386 
	`Õc_åì_numbî
(
ARG_4
, 
ex¥
->
l
.
numbî
);

388 
NODE_IF
:

389 
NODE_FOREACH
:

390 
	`Õc_åì
(
de°
, 4);

391 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

392 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

393 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
v
.expr);

395 
NODE_LOOP
:

396 
	`Õc_åì
(
de°
, 5);

397 
	`Õc_åì_numbî
(
ARG_2
, 
ex¥
->
ty≥
);

398 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
v
.expr);

399 
	`Õc_åì_ex¥
(
ARG_4
, 
ex¥
->
r
.expr);

400 
	`Õc_åì_ex¥
(
ARG_5
, 
ex¥
->
l
.expr);

402 
NODE_CASE_NUMBER
:

403 
NODE_CASE_STRING
:

404 
NODE_DEFAULT
:

405 
	`Õc_åì
(
de°
, 1);

407 
NODE_SWITCH_STRINGS
:

408 
NODE_SWITCH_NUMBERS
:

409 
NODE_SWITCH_DIRECT
:

410 
NODE_SWITCH_RANGES
:

411 
	`Õc_åì
(
de°
, 3);

412 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

413 
	`Õc_åì_ex¥
(
ARG_3
, 
ex¥
->
r
.expr);

415 
NODE_CATCH
:

416 
	`Õc_åì
(
de°
, 2);

417 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
r
.expr);

419 
NODE_LVALUE_EFUN
:

420 
	`Õc_åì
(
de°
, 3);

421 
	`Õc_åì_ex¥
(
ARG_2
, 
ex¥
->
l
.expr);

422 
	`Õc_åì_li°
(
ARG_3
, 
ex¥
->
r
.expr);

424 
NODE_FUNCTION_CONSTRUCTOR
:

425 
NODE_EFUN
:

426 
	`Õc_åì
(
de°
, 3);

427 
	`Õc_åì_›c
(
ARG_2
, 
ex¥
->
v
.
numbî
);

428 
	`Õc_åì_li°
(
ARG_3
, 
ex¥
->
r
.expr);

431 
	`Õc_åì
(
de°
,1);

432 
	`Õc_åì_°rög
(
ARG_1
, "!GARBAGE!");

435 
	`Õc_åì_°rög
(
ARG_1
, 
Õc_åì_«me
[
ex¥
->
köd
]);

436 
	}
}

440 
gíî©e
 
	$P1
(
∑r£_node_t
 *, 
node
) {

441 
whîe
 = 
CURRENT_PROGRAM_SIZE
;

443 i‡(
num_∑r£_îr‹
)  0;

444 #ifde‡
LPC_TO_C


445 i‡(
compûe_to_c
)

446 
	`c_gíî©e_node
(
node
);

450 
	`i_gíî©e_node
(
node
);

452 
	`‰ì_åì
();

454  
whîe
;

455 
	}
}

457 
›timizî_°¨t_fun˘i⁄
 
	$P1
(, 
n
) {

458 i‡(
n
) {

459 
œ°_loˇl_ªfs
 = 
	`CALLOCATE
(
n
, 
∑r£_node_t
 *, 
TAG_COMPILER
, "c_start_function");

460 
›timizî_num_loˇls
 = 
n
;

461 
n
--) {

462 
œ°_loˇl_ªfs
[
n
] = 0;

464 } 
œ°_loˇl_ªfs
 = 0;

465 
	}
}

467 
›timizî_íd_fun˘i⁄
 
PROT
(()) {

468 
	gi
;

469 i‡(
	gœ°_loˇl_ªfs
) {

470 
	gi
 = 0; i < 
	g›timizî_num_loˇls
; i++)

471 i‡(
	gœ°_loˇl_ªfs
[
i
]) {

472 
	gœ°_loˇl_ªfs
[
i
]->
	gv
.
	gnumbî
 = 
F_TRANSFER_LOCAL
;

474 
FREE
(
œ°_loˇl_ªfs
);

475 
	gœ°_loˇl_ªfs
 = 0;

479 #ifde‡
LPC_TO_C


480 
gíî©e_fun˘i⁄
 
	$P3
(
fun˘i⁄_t
 *, 
cÂ
, 
∑r£_node_t
 *, 
node
, , 
num
) {

481 
ªt
;

483 i‡(
¥agmas
 & 
PRAGMA_OPTIMIZE
) {

484 
	`›timizî_°¨t_fun˘i⁄
(
num
);

485 
›timizî_°©e
 = 0;

486 i‡(
num_∑r£_îr‹
 == 0)

487 
node
 = 
	`›timize
(node);

488 
	`›timizî_íd_fun˘i⁄
();

490 i‡(
compûe_to_c
) {

491 
	`c_°¨t_fun˘i⁄
(
cÂ
->
«me
);

492 
	`c_™Æyze
(
node
);

493 
ªt
 = 
	`gíî©e
(
node
);

494 
	`c_íd_fun˘i⁄
();

496 
ªt
 = 
	`gíî©e
(
node
);

497  
ªt
;

498 
	}
}

500 
gíî©e_fun˘i⁄
 
	$P3
(
fun˘i⁄_t
 *, 
f
, 
∑r£_node_t
 *, 
node
, , 
num
) {

501 
ªt
;

502 i‡(
¥agmas
 & 
PRAGMA_OPTIMIZE
) {

503 
	`›timizî_°¨t_fun˘i⁄
(
num
);

504 
›timizî_°©e
 = 0;

505 
node
 = 
	`›timize
(node);

506 
	`›timizî_íd_fun˘i⁄
();

508 
ªt
 = 
	`gíî©e
(
node
);

509  
ªt
;

510 
	}
}

514 
node_Æways_åue
 
	$P1
(
∑r£_node_t
 *, 
node
) {

515 i‡(!
node
)  1;

516 i‡(
node
->
köd
 =
NODE_NUMBER
)

517  
node
->
v
.
numbî
;

519 
	}
}

522 
gíî©e_c⁄dôi⁄Æ_bønch
 
	$P1
(
∑r£_node_t
 *, 
node
) {

523 
bønch
;

525 i‡(!
node
)

526  
F_BBRANCH
;

531 i‡(
	`IS_NODE
(
node
, 
NODE_BINARY_OP
, 
F_NE
)) {

532 i‡(
	`IS_NODE
(
node
->
r
.
ex¥
, 
NODE_NUMBER
, 0))

533 
node
 =Çode->
l
.
ex¥
;

534 i‡(
	`IS_NODE
(
node
->
l
.
ex¥
, 
NODE_NUMBER
, 0))

535 
node
 =Çode->
r
.
ex¥
;

537 i‡(
	`IS_NODE
(
node
, 
NODE_UNARY_OP
, 
F_NOT
)) {

538 
node
 =Çode->
r
.
ex¥
;

539 
bønch
 = 
F_BBRANCH_WHEN_ZERO
;

541 
bønch
 = 
F_BBRANCH_WHEN_NON_ZERO
;

542 i‡(
node
->
köd
 =
NODE_NUMBER
) {

543 i‡(
node
->
v
.
numbî
 == 0)

544 
bønch
 = 0;

546 
bønch
 = 
F_BBRANCH
;

547 
node
 = 0;

549 i‡(
node
) {

550 i‡(
	`IS_NODE
(
node
, 
NODE_BINARY_OP
, 
F_LT
)) {

551 
	`gíî©e
(
node
->
l
.
ex¥
);

552 
	`gíî©e
(
node
->
r
.
ex¥
);

553  
F_BBRANCH_LT
;

555 i‡(
	`IS_NODE
(
node
, 
NODE_OPCODE_1
, 
F_WHILE_DEC
)) {

556 
	`gíî©e
(
node
);

557  
F_WHILE_DEC
;

561 
	`gíî©e
(
node
);

562  
bønch
;

563 
	}
}

565 #ifde‡
DEBUG


567 
dump_ex¥_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

568 i‡(!
ex¥
) ;

570 
	`dump_åì
(
ex¥
->
v
.expr);

571 } (
ex¥
 =Éx¥->
r
.expr));

572 
	}
}

575 
dump_lvÆue_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

576 
	`¥ötf
("(lvalue_list ");

577 (
ex¥
 =Éx¥->
r
.expr))

578 
	`dump_åì
(
ex¥
->
l
.expr);

579 
	}
}

582 
dump_åì
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

583 i‡(!
ex¥
) ;

585 
ex¥
->
köd
) {

586 
NODE_TERNARY_OP
:

587 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
r
.ex¥->
v
.
numbî
].
«me
);

588 
	`dump_åì
(
ex¥
->
l
.expr);

589 
ex¥
 =Éx¥->
r
.expr;

590 
	`dump_åì
(
ex¥
->
l
.expr);

591 
	`dump_åì
(
ex¥
->
r
.expr);

592 
	`¥ötf
(")");

594 
NODE_BINARY_OP
:

595 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

596 
	`dump_åì
(
ex¥
->
l
.expr);

597 
	`dump_åì
(
ex¥
->
r
.expr);

598 
	`¥ötf
(")");

600 
NODE_UNARY_OP
:

601 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

602 
	`dump_åì
(
ex¥
->
r
.expr);

603 
	`¥ötf
(")");

605 
NODE_OPCODE
:

606 
	`¥ötf
("(%s)", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

608 
NODE_TERNARY_OP_1
:

610 
p
 = 
ex¥
->
ty≥
;

611 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
r
.ex¥->
v
.
numbî
].
«me
);

612 
	`dump_åì
(
ex¥
->
l
.expr);

613 
ex¥
 =Éx¥->
r
.expr;

614 
	`dump_åì
(
ex¥
->
l
.expr);

615 
	`dump_åì
(
ex¥
->
r
.expr);

616 
	`¥ötf
(" %i)", 
p
);

619 
NODE_BINARY_OP_1
:

620 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

621 
	`dump_åì
(
ex¥
->
l
.expr);

622 
	`dump_åì
(
ex¥
->
r
.expr);

623 
	`¥ötf
(" %i)", 
ex¥
->
ty≥
);

625 
NODE_UNARY_OP_1
:

626 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
);

627 
	`dump_åì
(
ex¥
->
r
.expr);

628 
	`¥ötf
(" %i)", 
ex¥
->
l
.
numbî
);

630 
NODE_OPCODE_1
:

631 
	`¥ötf
("(%†%i)", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.number);

633 
NODE_OPCODE_2
:

634 
	`¥ötf
("(%†%ò%i)", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.numbî,Éx¥->
r
.number);

636 
NODE_RETURN
:

637 i‡(
ex¥
->
r
.expr) {

638 
	`¥ötf
("(return ");

639 
	`dump_åì
(
ex¥
->
r
.expr);

640 
	`¥ötf
(")");

642 
	`¥ötf
("(return_zero)");

645 
NODE_STRING
:

646 
	`¥ötf
("(°rög %i)", 
ex¥
->
v
.
numbî
);

648 
NODE_REAL
:

649 
	`¥ötf
("‘ó»%f)", 
ex¥
->
v
.
ªÆ
);

651 
NODE_NUMBER
:

652 
	`¥ötf
("“umbî %i)", 
ex¥
->
v
.
numbî
);

654 
NODE_LAND_LOR
:

655 i‡(
ex¥
->
v
.
numbî
 =
F_LAND
)

656 
	`¥ötf
("(&& ");

658 
	`¥ötf
("(|| ");

659 
	`dump_åì
(
ex¥
->
l
.expr);

660 
	`dump_åì
(
ex¥
->
r
.expr);

661 
	`¥ötf
(")");

663 
NODE_BRANCH_LINK
:

664 
	`¥ötf
("(branch_link ");

665 
	`dump_åì
(
ex¥
->
l
.expr);

666 
	`dump_åì
(
ex¥
->
r
.expr);

667 
	`¥ötf
(")");

669 
NODE_CALL_2
:

670 
	`¥ötf
("(%†%ò%ò%ò", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.number >> 16,

671 
ex¥
->
l
.
numbî
 & 0xffff, (ex¥->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0));

672 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

673 
	`¥ötf
(")");

675 
NODE_CALL_1
:

676 
	`¥ötf
("(%†%ò%ò", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.number,

677 (
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0));

678 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

679 
	`¥ötf
(")");

681 
NODE_CALL
:

682 
	`¥ötf
("(%†%ò", 
ö°rs
[
ex¥
->
v
.
numbî
].
«me
,Éx¥->
l
.number);

683 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

684 
	`¥ötf
(")");

686 
NODE_TWO_VALUES
:

687 
	`dump_åì
(
ex¥
->
l
.expr);

688 
	`¥ötf
("\n");

689 
	`dump_åì
(
ex¥
->
r
.expr);

691 
NODE_CONTROL_JUMP
:

692 i‡(
ex¥
->
v
.
numbî
 =
CJ_BREAK_SWITCH
) {

693 
	`¥ötf
("(break_switch)");

694 } i‡(
ex¥
->
v
.
numbî
 =
CJ_BREAK
) {

695 
	`¥ötf
("(break)");

696 } i‡(
ex¥
->
v
.
numbî
 =
CJ_CONTINUE
) {

697 
	`¥ötf
("(continue)");

699 
	`¥ötf
("(UNKNOWN CONTROL JUMP)");

702 
NODE_PARAMETER
:

703 
	`¥ötf
("’¨amëî %i)", 
ex¥
->
v
.
numbî
);

705 
NODE_PARAMETER_LVALUE
:

706 
	`¥ötf
("’¨amëî_lvÆuê%i)", 
ex¥
->
v
.
numbî
);

708 
NODE_IF
:

709 
	`¥ötf
("(if ");

710 
	`dump_åì
(
ex¥
->
v
.expr);

711 
	`¥ötf
("\n");

712 
	`dump_åì
(
ex¥
->
l
.expr);

713 i‡(
ex¥
->
r
.expr) {

714 
	`¥ötf
("\n");

715 
	`dump_åì
(
ex¥
->
r
.expr);

717 
	`¥ötf
(")\n");

719 
NODE_LOOP
:

720 
	`¥ötf
("÷o› %i\n", 
ex¥
->
ty≥
);

721 
	`dump_åì
(
ex¥
->
v
.expr);

722 
	`¥ötf
("\n");

723 
	`dump_åì
(
ex¥
->
l
.expr);

724 
	`¥ötf
("\n");

725 
	`dump_åì
(
ex¥
->
r
.expr);

726 
	`¥ötf
(")\n");

728 
NODE_FOREACH
:

729 
	`¥ötf
("(foreach ");

730 
	`dump_åì
(
ex¥
->
l
.expr);

731 
	`dump_åì
(
ex¥
->
r
.expr);

732 
	`dump_åì
(
ex¥
->
v
.expr);

733 
	`¥ötf
(")\n");

735 
NODE_CASE_NUMBER
:

736 
NODE_CASE_STRING
:

737 
	`¥ötf
("(case)");

739 
NODE_DEFAULT
:

740 
	`¥ötf
("(default)");

742 
NODE_SWITCH_STRINGS
:

743 
NODE_SWITCH_NUMBERS
:

744 
NODE_SWITCH_DIRECT
:

745 
NODE_SWITCH_RANGES
:

746 
	`¥ötf
("(switch ");

747 
	`dump_åì
(
ex¥
->
l
.expr);

748 
	`dump_åì
(
ex¥
->
r
.expr);

749 
	`¥ötf
(")");

751 
NODE_CATCH
:

752 
	`¥ötf
("(catch ");

753 
	`dump_åì
(
ex¥
->
r
.expr);

754 
	`¥ötf
(")");

756 
NODE_LVALUE_EFUN
:

757 
	`¥ötf
("(lvalue_efun ");

758 
	`dump_åì
(
ex¥
->
l
.expr);

759 
	`dump_lvÆue_li°
(
ex¥
->
r
.expr);

760 
	`¥ötf
(")");

762 
NODE_FUNCTION_CONSTRUCTOR
:

763 
	`¥ötf
("(fun˘i⁄ %ò", 
ex¥
->
v
.
numbî
 & 0xff);

764 i‡(
ex¥
->
r
.expr) {

765 
	`¥ötf
("(array ");

766 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

767 
	`¥ötf
(")");

769 
	`¥ötf
("(number 0)");

771 
ex¥
->
v
.
numbî
 & 0xff) {

772 
FP_SIMUL
:

773 
	`¥ötf
("(Â-simu»%i)", 
ex¥
->
v
.
numbî
 >> 8);

775 
FP_LOCAL
:

776 
	`¥ötf
("(Â-loˇ»%i)", 
ex¥
->
v
.
numbî
 >> 8);

778 
FP_EFUN
:

779 
	`¥ötf
("(Â-efu¿%s)", 
ö°rs
[
ex¥
->
v
.
numbî
 >> 8].
«me
);

781 
FP_FUNCTIONAL
:

782 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

783 
	`¥ötf
("(Â-fun˘i⁄Æ %ò", 
ex¥
->
v
.
numbî
 >> 8);

784 
	`dump_åì
(
ex¥
->
l
.expr);

785 
	`¥ötf
(")");

788 
	`¥ötf
(" %i)", 
ex¥
->
v
.
numbî
 >> 8);

790 
NODE_ANON_FUNC
:

791 
	`¥ötf
("◊n⁄-fun¯%ò%ò", 
ex¥
->
v
.
numbî
,Éx¥->
l
.number);

792 
	`dump_åì
(
ex¥
->
r
.expr);

793 
	`¥ötf
(")");

795 
NODE_EFUN
:

796 
	`¥ötf
("(%†", 
ö°rs
[
ex¥
->
v
.
numbî
 & ~
NOVALUE_USED_FLAG
].
«me
);

797 
	`dump_ex¥_li°
(
ex¥
->
r
.expr);

798 
	`¥ötf
(")");

801 
	`¥ötf
("(unknown)");

804 
	`fÊush
(
°dout
);

805 
	}
}

	@generate.h

1 #i‚de‡
_GENERATE_H


2 
	#_GENERATE_H


	)

4 
	~"löt.h
"

5 
	~"åìs.h
"

6 
	~"Õc_ö˛.h
"

7 
	~"icode.h
"

9 #ifde‡
LPC_TO_C


10 
	~"ccode.h
"

12 
	#gíî©e_fun˘i⁄_ˇŒ
(
x
,
y
Ë{ if(
compûe_to_c
Ë
	`c_gíî©e_fun˘i⁄_ˇŒ
(x,y); 
	`i_gíî©e_fun˘i⁄_ˇŒ
(x,y); }

	)

13 
	#gíî©e_öhîôed_öô_ˇŒ
(
x
,
y
Ë{ i‡(
compûe_to_c
Ë
	`c_gíî©e_öhîôed_öô_ˇŒ
(x,y); 
	`i_gíî©e_öhîôed_öô_ˇŒ
(x,y); }

	)

14 
	#gíî©e___INIT
(Ë{ i‡(
compûe_to_c
Ë
	`c_gíî©e___INIT
(); 
	`i_gíî©e___INIT
(); }

	)

15 
	#gíî©e_föÆ_¥ogøm
(
x
Ë{ i‡(
compûe_to_c
Ë
	`c_gíî©e_föÆ_¥ogøm
(x); 
	`i_gíî©e_föÆ_¥ogøm
(x); }

	)

16 
	#öôülize_∑r£r
(Ë{ i‡(
compûe_to_c
Ë
	`c_öôülize_∑r£r
(); 
	`i_öôülize_∑r£r
(); }

	)

17 
	#unöôülize_∑r£r
(Ë{ i‡(
compûe_to_c
Ë
	`c_unöôülize_∑r£r
(); 
	`i_unöôülize_∑r£r
(); }

	)

19 
	#gíî©e_fun˘i⁄_ˇŒ
 
i_gíî©e_fun˘i⁄_ˇŒ


	)

20 
	#gíî©e_öhîôed_öô_ˇŒ
 
i_gíî©e_öhîôed_öô_ˇŒ


	)

21 
	#gíî©e___INIT
 
i_gíî©e___INIT


	)

22 
	#gíî©e_föÆ_¥ogøm
 
i_gíî©e_föÆ_¥ogøm


	)

23 
	#öôülize_∑r£r
 
i_öôülize_∑r£r


	)

24 
	#unöôülize_∑r£r
 
i_unöôülize_∑r£r


	)

27 
node_Æways_åue
 
PROT
((
∑r£_node_t
 *));

28 
gíî©e
 
PROT
((
∑r£_node_t
 *));

29 
gíî©e_fun˘i⁄
 
PROT
((
fun˘i⁄_t
 *, 
∑r£_node_t
 *, ));

30 
gíî©e_c⁄dôi⁄Æ_bønch
 
PROT
((
∑r£_node_t
 *));

32 #ifde‡
DEBUG


33 
dump_ex¥_li°
 
PROT
((
∑r£_node_t
 *));

34 
dump_åì
 
PROT
((
∑r£_node_t
 *));

35 
Õc_åì_f‹m
 
PROT
((
∑r£_node_t
 *,Öarse_node_t *));

	@grammar.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

68 
	~"°d.h
"

69 
	~"compûî.h
"

70 
	~"Àx.h
"

71 
	~"s¸©ch∑d.h
"

73 
	~"Õc_ö˛.h
"

74 
	~"simul_efun.h
"

75 
	~"gíî©e.h
"

76 
	~"ma°î.h
"

79 #ifde‡
WIN32


80 
	#MSDOS


	)

96 
	gc⁄ãxt
;

97 
	gnum_ªfs
;

102 
yy∑r£
 
PROT
(());

107 #i‚de‡
YY_NULLPTR


108 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

109 
	#YY_NULLPTR
 
nuŒ±r


	)

111 
	#YY_NULLPTR
 0

	)

116 #ifde‡
YYERROR_VERBOSE


117 #unde‡
YYERROR_VERBOSE


118 
	#YYERROR_VERBOSE
 1

	)

120 
	#YYERROR_VERBOSE
 0

	)

125 #i‚de‡
YY_YY_Y_TAB_H_INCLUDED


126 
	#YY_YY_Y_TAB_H_INCLUDED


	)

128 #i‚de‡
YYDEBUG


129 
	#YYDEBUG
 0

	)

131 #i‡
YYDEBUG


132 
yydebug
;

136 #i‚de‡
YYTOKENTYPE


137 
	#YYTOKENTYPE


	)

138 
	eyytokíty≥


140 
	mL_STRING
 = 258,

141 
	mL_NUMBER
 = 259,

142 
	mL_REAL
 = 260,

143 
	mL_BASIC_TYPE
 = 261,

144 
	mL_TYPE_MODIFIER
 = 262,

145 
	mL_DEFINED_NAME
 = 263,

146 
	mL_IDENTIFIER
 = 264,

147 
	mL_EFUN
 = 265,

148 
	mL_INC
 = 266,

149 
	mL_DEC
 = 267,

150 
	mL_ASSIGN
 = 268,

151 
	mL_LAND
 = 269,

152 
	mL_LOR
 = 270,

153 
	mL_LSH
 = 271,

154 
	mL_RSH
 = 272,

155 
	mL_ORDER
 = 273,

156 
	mL_NOT
 = 274,

157 
	mL_IF
 = 275,

158 
	mL_ELSE
 = 276,

159 
	mL_SWITCH
 = 277,

160 
	mL_CASE
 = 278,

161 
	mL_DEFAULT
 = 279,

162 
	mL_RANGE
 = 280,

163 
	mL_DOT_DOT_DOT
 = 281,

164 
	mL_WHILE
 = 282,

165 
	mL_DO
 = 283,

166 
	mL_FOR
 = 284,

167 
	mL_FOREACH
 = 285,

168 
	mL_IN
 = 286,

169 
	mL_BREAK
 = 287,

170 
	mL_CONTINUE
 = 288,

171 
	mL_RETURN
 = 289,

172 
	mL_ARROW
 = 290,

173 
	mL_INHERIT
 = 291,

174 
	mL_COLON_COLON
 = 292,

175 
	mL_ARRAY_OPEN
 = 293,

176 
	mL_MAPPING_OPEN
 = 294,

177 
	mL_FUNCTION_OPEN
 = 295,

178 
	mL_NEW_FUNCTION_OPEN
 = 296,

179 
	mL_SSCANF
 = 297,

180 
	mL_CATCH
 = 298,

181 
	mL_ARRAY
 = 299,

182 
	mL_REF
 = 300,

183 
	mL_PARSE_COMMAND
 = 301,

184 
	mL_TIME_EXPRESSION
 = 302,

185 
	mL_CLASS
 = 303,

186 
	mL_NEW
 = 304,

187 
	mL_PARAMETER
 = 305,

188 
	mLOWER_THAN_ELSE
 = 306,

189 
	mL_EQ
 = 307,

190 
	mL_NE
 = 308

194 
	#L_STRING
 258

	)

195 
	#L_NUMBER
 259

	)

196 
	#L_REAL
 260

	)

197 
	#L_BASIC_TYPE
 261

	)

198 
	#L_TYPE_MODIFIER
 262

	)

199 
	#L_DEFINED_NAME
 263

	)

200 
	#L_IDENTIFIER
 264

	)

201 
	#L_EFUN
 265

	)

202 
	#L_INC
 266

	)

203 
	#L_DEC
 267

	)

204 
	#L_ASSIGN
 268

	)

205 
	#L_LAND
 269

	)

206 
	#L_LOR
 270

	)

207 
	#L_LSH
 271

	)

208 
	#L_RSH
 272

	)

209 
	#L_ORDER
 273

	)

210 
	#L_NOT
 274

	)

211 
	#L_IF
 275

	)

212 
	#L_ELSE
 276

	)

213 
	#L_SWITCH
 277

	)

214 
	#L_CASE
 278

	)

215 
	#L_DEFAULT
 279

	)

216 
	#L_RANGE
 280

	)

217 
	#L_DOT_DOT_DOT
 281

	)

218 
	#L_WHILE
 282

	)

219 
	#L_DO
 283

	)

220 
	#L_FOR
 284

	)

221 
	#L_FOREACH
 285

	)

222 
	#L_IN
 286

	)

223 
	#L_BREAK
 287

	)

224 
	#L_CONTINUE
 288

	)

225 
	#L_RETURN
 289

	)

226 
	#L_ARROW
 290

	)

227 
	#L_INHERIT
 291

	)

228 
	#L_COLON_COLON
 292

	)

229 
	#L_ARRAY_OPEN
 293

	)

230 
	#L_MAPPING_OPEN
 294

	)

231 
	#L_FUNCTION_OPEN
 295

	)

232 
	#L_NEW_FUNCTION_OPEN
 296

	)

233 
	#L_SSCANF
 297

	)

234 
	#L_CATCH
 298

	)

235 
	#L_ARRAY
 299

	)

236 
	#L_REF
 300

	)

237 
	#L_PARSE_COMMAND
 301

	)

238 
	#L_TIME_EXPRESSION
 302

	)

239 
	#L_CLASS
 303

	)

240 
	#L_NEW
 304

	)

241 
	#L_PARAMETER
 305

	)

242 
	#LOWER_THAN_ELSE
 306

	)

243 
	#L_EQ
 307

	)

244 
	#L_NE
 308

	)

247 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


248 
YYSTYPE
 
	tYYSTYPE
;

249 
	uYYSTYPE


253 
POINTER_INT
 
	mpoöãr_öt
;

254 
	mnumbî
;

255 
	mªÆ
;

256 *
	m°rög
;

257 
	mty≥
;

258 °ru˘ { 
	mnum_¨g
; 
	mÊags
; } 
	m¨gumít
;

259 
idít_hash_ñem_t
 *
	mihe
;

260 
∑r£_node_t
 *
	mnode
;

261 
fun˘i⁄_c⁄ãxt_t
 *
	mc⁄ãxç
;

263 
∑r£_node_t
 *
	mnode
;

264 
	mnum
;

265 } 
	mde˛
;

267 
	mnum_loˇl
;

268 
	mmax_num_loˇls
;

269 
	mc⁄ãxt
;

270 
	mßve_cuºít_ty≥
;

271 
	mßve_exa˘_ty≥s
;

272 } 
	mfunc_block
;

276 
	#YYSTYPE_IS_TRIVIAL
 1

	)

277 
	#YYSTYPE_IS_DECLARED
 1

	)

281 
YYSTYPE
 
yylvÆ
;

283 
yy∑r£
 ();

295 #ifde‡
YYTYPE_UINT8


296 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

298 
	tyyty≥_uöt8
;

301 #ifde‡
YYTYPE_INT8


302 
YYTYPE_INT8
 
	tyyty≥_öt8
;

304 sig√d 
	tyyty≥_öt8
;

307 #ifde‡
YYTYPE_UINT16


308 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

310 
	tyyty≥_uöt16
;

313 #ifde‡
YYTYPE_INT16


314 
YYTYPE_INT16
 
	tyyty≥_öt16
;

316 
	tyyty≥_öt16
;

319 #i‚de‡
YYSIZE_T


320 #ifde‡
__SIZE_TYPE__


321 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

322 #ñi‡
deföed
 
size_t


323 
	#YYSIZE_T
 
size_t


	)

324 #ñi‡! 
deföed
 
YYSIZE_T


325 
	~<°ddef.h
>

326 
	#YYSIZE_T
 
size_t


	)

328 
	#YYSIZE_T
 

	)

332 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

334 #i‚de‡
YY_


335 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

336 #i‡
ENABLE_NLS


337 
	~<liböé.h
>

338 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

341 #i‚de‡
YY_


342 
	#YY_
(
Msgid
Ë
	)
Msgid

346 #i‚de‡
YY_ATTRIBUTE


347 #i‡(
deföed
 
__GNUC__
 \

348 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

349 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

350 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

352 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

356 #i‚de‡
YY_ATTRIBUTE_PURE


357 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

360 #i‚de‡
YY_ATTRIBUTE_UNUSED


361 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

364 #i‡!
deföed
 
_N‹ëu∫
 \

365 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

366 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

367 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

369 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

374 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


375 
	#YYUSE
(
E
Ë((Ë(E))

	)

377 
	#YYUSE
(
E
Ë

	)

380 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


382 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

383 
	`_Pøgma
 ("GCC diagnosticÖush") \

384 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

385 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

386 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

387 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

389 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

391 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


392 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

393 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

395 #i‚de‡
YY_INITIAL_VALUE


396 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

400 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


404 #ifde‡
YYSTACK_USE_ALLOCA


405 #i‡
YYSTACK_USE_ALLOCA


406 #ifde‡
__GNUC__


407 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

408 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


409 
	~<Æloˇ.h
>

410 #ñi‡
deföed
 
_AIX


411 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

412 #ñi‡
deföed
 
_MSC_VER


413 
	~<mÆloc.h
>

414 
	#Æloˇ
 
_Æloˇ


	)

416 
	#YYSTACK_ALLOC
 
Æloˇ


	)

417 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


418 
	~<°dlib.h
>

420 #i‚de‡
EXIT_SUCCESS


421 
	#EXIT_SUCCESS
 0

	)

428 #ifde‡
YYSTACK_ALLOC


430 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

431 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


436 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

439 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

440 
	#YYSTACK_FREE
 
YYFREE


	)

441 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


442 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

444 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

445 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

446 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

447 
	~<°dlib.h
>

448 #i‚de‡
EXIT_SUCCESS


449 
	#EXIT_SUCCESS
 0

	)

452 #i‚de‡
YYMALLOC


453 
	#YYMALLOC
 
mÆloc


	)

454 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


455 *
mÆloc
 (
YYSIZE_T
);

458 #i‚de‡
YYFREE


459 
	#YYFREE
 
‰ì


	)

460 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


461 
‰ì
 (*);

468 #i‡(! 
deföed
 
yyovîÊow
 \

469 && (! 
deföed
 
	g__˝lu•lus
 \

470 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

473 
	uyyÆloc


475 
yyty≥_öt16
 
	myyss_Æloc
;

476 
YYSTYPE
 
	myyvs_Æloc
;

480 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

484 
	#YYSTACK_BYTES
(
N
) \

485 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

486 + 
YYSTACK_GAP_MAXIMUM
)

	)

488 
	#YYCOPY_NEEDED
 1

	)

495 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

498 
YYSIZE_T
 
yy√wbyãs
; \

499 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

500 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

501 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

502 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

504 0)

	)

508 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

511 #i‚de‡
YYCOPY


512 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

513 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

514 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

516 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

519 
YYSIZE_T
 
yyi
; \

520 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

521 (
D°
)[
yyi
] = (
Src
)[yyi]; \

523 0)

	)

529 
	#YYFINAL
 3

	)

531 
	#YYLAST
 1827

	)

534 
	#YYNTOKENS
 75

	)

536 
	#YYNNTS
 101

	)

538 
	#YYNRULES
 255

	)

540 
	#YYNSTATES
 481

	)

544 
	#YYUNDEFTOK
 2

	)

545 
	#YYMAXUTOK
 308

	)

547 
	#YYTRANSLATE
(
YYX
) \

548 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

552 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

587 #i‡
YYDEBUG


589 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

620 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

623 c⁄° *c⁄° 
	gyyäame
[] =

655 "@20", "efun_ovîride", "fun˘i⁄_«me", "c⁄d", "›ti⁄Æ_ñ£_∑π", 
YY_NULLPTR


659 #ifde‡
YYPRINT


662 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

675 
	#YYPACT_NINF
 -343

	)

677 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

678 (!!((
Yy°©e
Ë=(-343)))

	)

680 
	#YYTABLE_NINF
 -250

	)

682 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

683 0

	)

687 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

743 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

797 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

813 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

831 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1018 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1207 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1261 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

1292 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

1323 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1324 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1325 
	#YYEMPTY
 (-2)

	)

1326 
	#YYEOF
 0

	)

1328 
	#YYACCEPT
 
yyac˚±œb


	)

1329 
	#YYABORT
 
yyab‹éab


	)

1330 
	#YYERROR
 
yyîr‹œb


	)

1333 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1335 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1337 i‡(
yych¨
 =
YYEMPTY
) \

1339 
yych¨
 = (
Tokí
); \

1340 
yylvÆ
 = (
VÆue
); \

1341 
	`YYPOPSTACK
 (
yyÀn
); \

1342 
yy°©e
 = *
yys•
; \

1343 
yybackup
; \

1347 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1348 
YYERROR
; \

1350 0)

	)

1353 
	#YYTERROR
 1

	)

1354 
	#YYERRCODE
 256

	)

1359 #i‡
YYDEBUG


1361 #i‚de‡
YYFPRINTF


1362 
	~<°dio.h
>

1363 
	#YYFPRINTF
 
Ârötf


	)

1366 
	#YYDPRINTF
(
Args
) \

1368 i‡(
yydebug
) \

1369 
YYFPRINTF
 
Args
; \

1370 } 0)

	)

1373 #i‚de‡
YY_LOCATION_PRINT


1374 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1378 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1380 i‡(
yydebug
) \

1382 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1383 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1384 
Ty≥
, 
VÆue
); \

1385 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1387 } 0)

	)

1395 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1397 
FILE
 *
yyo
 = 
yyouçut
;

1398 
	`YYUSE
 (
yyo
);

1399 i‡(!
yyvÆuï
)

1401 #ifde‡
YYPRINT


1402 i‡(
yyty≥
 < 
YYNTOKENS
)

1403 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1405 
	`YYUSE
 (
yyty≥
);

1406 
	}
}

1414 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1416 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

1417 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

1419 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1420 
	`YYFPRINTF
 (
yyouçut
, ")");

1421 
	}
}

1429 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1431 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1432 ; 
yybŸtom
 <
yyt›
; yybottom++)

1434 
yybŸ
 = *
yybŸtom
;

1435 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1437 
	`YYFPRINTF
 (
°dîr
, "\n");

1438 
	}
}

1440 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1442 i‡(
yydebug
) \

1443 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1444 } 0)

	)

1452 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1454 
yy o
 = 
yyæöe
[
yyruÀ
];

1455 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1456 
yyi
;

1457 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1458 
yyruÀ
 - 1, 
yy o
);

1460 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1462 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1463 
	`yy_symbﬁ_¥öt
 (
°dîr
,

1464 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

1465 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1467 
	`YYFPRINTF
 (
°dîr
, "\n");

1469 
	}
}

1471 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1473 i‡(
yydebug
) \

1474 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

1475 } 0)

	)

1479 
	gyydebug
;

1481 
	#YYDPRINTF
(
Args
)

	)

1482 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1483 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1484 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1489 #i‚de‡
YYINITDEPTH


1490 
	#YYINITDEPTH
 200

	)

1500 #i‚de‡
YYMAXDEPTH


1501 
	#YYMAXDEPTH
 10000

	)

1505 #i‡
YYERROR_VERBOSE


1507 #i‚de‡
yy°æí


1508 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1509 
	#yy°æí
 
°æí


	)

1512 
YYSIZE_T


1513 
	$yy°æí
 (c⁄° *
yy°r
)

1515 
YYSIZE_T
 
yyÀn
;

1516 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1518  
yyÀn
;

1519 
	}
}

1523 #i‚de‡
yy°p˝y


1524 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1525 
	#yy°p˝y
 
°p˝y


	)

1530 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1532 *
yyd
 = 
yyde°
;

1533 c⁄° *
yys
 = 
yy§c
;

1535 (*
yyd
++ = *
yys
++) != '\0')

1538  
yyd
 - 1;

1539 
	}
}

1543 #i‚de‡
yyäamîr


1551 
YYSIZE_T


1552 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1554 i‡(*
yy°r
 == '"')

1556 
YYSIZE_T
 
yyn
 = 0;

1557 c⁄° *
yyp
 = 
yy°r
;

1560 *++
yyp
)

1564 
do_nŸ_°rù_quŸes
;

1567 i‡(*++
yyp
 != '\\')

1568 
do_nŸ_°rù_quŸes
;

1571 i‡(
yyªs
)

1572 
yyªs
[
yyn
] = *
yyp
;

1573 
yyn
++;

1577 i‡(
yyªs
)

1578 
yyªs
[
yyn
] = '\0';

1579  
yyn
;

1581 
do_nŸ_°rù_quŸes
: ;

1584 i‡(! 
yyªs
)

1585  
	`yy°æí
 (
yy°r
);

1587  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1588 
	}
}

1600 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

1601 
yyty≥_öt16
 *
yys•
, 
yytokí
)

1603 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

1604 
YYSIZE_T
 
yysize
 = 
yysize0
;

1605 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1607 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

1609 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1612 
yycou¡
 = 0;

1637 i‡(
yytokí
 !
YYEMPTY
)

1639 
yyn
 = 
yy∑˘
[*
yys•
];

1640 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1641 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1646 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1648 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1649 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1650 
yyx
;

1652 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1653 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1654 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1656 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1658 
yycou¡
 = 1;

1659 
yysize
 = 
yysize0
;

1662 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1664 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

1665 i‡(! (
yysize
 <
yysize1


1666 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

1668 
yysize
 = 
yysize1
;

1674 
yycou¡
)

1676 
	#YYCASE_
(
N
, 
S
) \

1677 
N
: \

1678 
yyf‹m©
 = 
S
; \

1679 

	)

1680 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1681 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1682 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1683 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1684 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1685 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1686 #unde‡
YYCASE_


1690 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1691 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1693 
yysize
 = 
yysize1
;

1696 i‡(*
yymsg_Æloc
 < 
yysize
)

1698 *
yymsg_Æloc
 = 2 * 
yysize
;

1699 i‡(! (
yysize
 <*
yymsg_Æloc


1700 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1701 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1709 *
yyp
 = *
yymsg
;

1710 
yyi
 = 0;

1711 (*
yyp
 = *
yyf‹m©
) != '\0')

1712 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1714 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1715 
yyf‹m©
 += 2;

1719 
yyp
++;

1720 
yyf‹m©
++;

1724 
	}
}

1732 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1734 
	`YYUSE
 (
yyvÆuï
);

1735 i‡(!
yymsg
)

1736 
yymsg
 = "Deleting";

1737 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1739 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1740 
	`YYUSE
 (
yyty≥
);

1741 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1742 
	}
}

1748 
	gyych¨
;

1751 
YYSTYPE
 
	gyylvÆ
;

1753 
	gyy√ºs
;

1761 
	$yy∑r£
 ()

1763 
yy°©e
;

1765 
yyîr°©us
;

1775 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1776 
yyty≥_öt16
 *
yyss
;

1777 
yyty≥_öt16
 *
yys•
;

1780 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1781 
YYSTYPE
 *
yyvs
;

1782 
YYSTYPE
 *
yyv•
;

1784 
YYSIZE_T
 
yy°acksize
;

1786 
yyn
;

1787 
yyªsu…
;

1789 
yytokí
 = 0;

1792 
YYSTYPE
 
yyvÆ
;

1794 #i‡
YYERROR_VERBOSE


1796 
yymsgbuf
[128];

1797 *
yymsg
 = 
yymsgbuf
;

1798 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1801 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1805 
yyÀn
 = 0;

1807 
yys•
 = 
yyss
 = 
yysß
;

1808 
yyv•
 = 
yyvs
 = 
yyvß
;

1809 
yy°acksize
 = 
YYINITDEPTH
;

1811 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1813 
yy°©e
 = 0;

1814 
yyîr°©us
 = 0;

1815 
yy√ºs
 = 0;

1816 
yych¨
 = 
YYEMPTY
;

1817 
yy£t°©e
;

1822 
yy√w°©e
:

1825 
yys•
++;

1827 
yy£t°©e
:

1828 *
yys•
 = 
yy°©e
;

1830 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1833 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1835 #ifde‡
yyovîÊow


1840 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1841 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1847 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1848 &
yyss1
, 
yysize
 *  (*
yys•
),

1849 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1850 &
yy°acksize
);

1852 
yyss
 = 
yyss1
;

1853 
yyvs
 = 
yyvs1
;

1856 #i‚de‡
YYSTACK_RELOCATE


1857 
yyexhau°edœb
;

1860 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1861 
yyexhau°edœb
;

1862 
yy°acksize
 *= 2;

1863 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1864 
yy°acksize
 = 
YYMAXDEPTH
;

1867 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1868 
yyÆloc
 *
yy±r
 =

1869 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1870 i‡(! 
yy±r
)

1871 
yyexhau°edœb
;

1872 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1873 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1874 #unde‡
YYSTACK_RELOCATE


1875 i‡(
yyss1
 !
yysß
)

1876 
	`YYSTACK_FREE
 (
yyss1
);

1881 
yys•
 = 
yyss
 + 
yysize
 - 1;

1882 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1884 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1885 (Ë
yy°acksize
));

1887 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1888 
YYABORT
;

1891 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1893 i‡(
yy°©e
 =
YYFINAL
)

1894 
YYACCEPT
;

1896 
yybackup
;

1901 
yybackup
:

1907 
yyn
 = 
yy∑˘
[
yy°©e
];

1908 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1909 
yydeÁu…
;

1914 i‡(
yych¨
 =
YYEMPTY
)

1916 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1917 
yych¨
 = 
	`yyÀx
 ();

1920 i‡(
yych¨
 <
YYEOF
)

1922 
yych¨
 = 
yytokí
 = 
YYEOF
;

1923 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1927 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1928 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1933 
yyn
 +
yytokí
;

1934 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1935 
yydeÁu…
;

1936 
yyn
 = 
yyèbÀ
[yyn];

1937 i‡(
yyn
 <= 0)

1939 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1940 
yyîæab
;

1941 
yyn
 = -yyn;

1942 
yyªdu˚
;

1947 i‡(
yyîr°©us
)

1948 
yyîr°©us
--;

1951 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1954 
yych¨
 = 
YYEMPTY
;

1956 
yy°©e
 = 
yyn
;

1957 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1958 *++
yyv•
 = 
yylvÆ
;

1959 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1961 
yy√w°©e
;

1967 
yydeÁu…
:

1968 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1969 i‡(
yyn
 == 0)

1970 
yyîæab
;

1971 
yyªdu˚
;

1977 
yyªdu˚
:

1979 
yyÀn
 = 
yyr2
[
yyn
];

1989 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1992 
	`YY_REDUCE_PRINT
 (
yyn
);

1993 
yyn
)

1999 
comp_åìs
[
TREE_MAIN
] = (
yyvÆ
.
node
);

2008 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 0, (
yyv•
[-2].node), (yyvsp[-1].node));

2017 (
yyvÆ
.
node
) = 0;

2027 
	`yyw¨n
("Extra ';'. Ignored.");

2036 
obje˘_t
 *
ob
;

2037 
öhîô_t
 
öhîô
;

2038 
öôülizî
;

2039 
acc_mod
;

2041 (
yyv•
[-3].
ty≥
Ë|
globÆ_modifõrs
;

2043 
acc_mod
 = ((
yyv•
[-3].
ty≥
Ë& 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

2044 i‡(
acc_mod
 & (acc_mod - 1)) {

2045 
buf
[256];

2046 *
íd
 = 
	`EndOf
(
buf
);

2047 *
p
;

2049 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

2050 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, (
yyv•
[-3].
ty≥
));

2051 
p
 = 
	`°Ωut
’, 
íd
, ") for inheritance");

2052 
	`yyîr‹
(
buf
);

2055 i‡(!((
yyv•
[-3].
ty≥
Ë& 
DECL_ACCESS
)Ë(yyv•[-3].ty≥Ë|
DECL_PUBLIC
;

2057 i‡(
v¨_deföed
)

2058 
	`yyîr‹
("IllegalÅo inheritáfter defining global variables.");

2059 
ob
 = 
	`föd_obje˘2
((
yyv•
[-1].
°rög
));

2060 i‡(
ob
 == 0) {

2061 
öhîô_fûe
 = 
	`Æloc_c°rög
((
yyv•
[-1].
°rög
), "inherit");

2063 
YYACCEPT
;

2065 
	`s¸©ch_‰ì
((
yyv•
[-1].
°rög
));

2066 
öhîô
.
¥og
 = 
ob
->prog;

2068 i‡(
mem_block
[
A_INHERITS
].
cuºít_size
){

2069 
öhîô_t
 *
¥ev_öhîô
 = 
	`INHERIT
(
NUM_INHERITS
 - 1);

2071 
öhîô
.
fun˘i⁄_ödex_off£t


2072 
¥ev_öhîô
->
fun˘i⁄_ödex_off£t


2073 + 
¥ev_öhîô
->
¥og
->
num_fun˘i⁄s_deföed


2074 + 
¥ev_öhîô
->
¥og
->
œ°_öhîôed
;

2075 i‡(
¥ev_öhîô
->
¥og
->
num_fun˘i⁄s_deföed
 &&

2076 
¥ev_öhîô
->
¥og
->
fun˘i⁄_èbÀ
[¥ev_öhîô->¥og->
num_fun˘i⁄s_deföed
 - 1].
«me
[0] == '#')

2077 
öhîô
.
fun˘i⁄_ödex_off£t
--;

2078 } 
öhîô
.
fun˘i⁄_ödex_off£t
 = 0;

2080 
öhîô
.
v¨übÀ_ödex_off£t
 =

2081 
mem_block
[
A_VAR_TEMP
].
cuºít_size
 /

2082  (
v¨übÀ_t
);

2083 
öhîô
.
ty≥_mod
 = (
yyv•
[-3].
ty≥
);

2084 
	`add_to_mem_block
(
A_INHERITS
, (*)&
öhîô
,  inherit);

2087 
	`c›y_°ru˘uªs
(
ob
->
¥og
);

2088 
	`c›y_v¨übÀs
(
ob
->
¥og
, (
yyv•
[-3].
ty≥
));

2089 
öôülizî
 = 
	`c›y_fun˘i⁄s
(
ob
->
¥og
, (
yyv•
[-3].
ty≥
));

2090 i‡(
öôülizî
 >= 0) {

2091 
∑r£_node_t
 *
node
, *
√wnode
;

2096 
node
 = 
	`√w_node_no_löe
();

2097 
node
->
köd
 = 
NODE_CALL_2
;

2098 
node
->
r
.
ex¥
 = 0;

2099 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

2100 
node
->
l
.
numbî
 = 
öôülizî
 | ((
NUM_INHERITS
 - 1) << 16);

2101 
node
->
ty≥
 = 
TYPE_ANY
;

2105 
√wnode
 = 
comp_åìs
[
TREE_INIT
];

2106 
	`CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
],0, 
√wnode
, 
node
);

2107 
comp_åìs
[
TREE_INIT
] = 
	`p›_vÆue
(comp_trees[TREE_INIT]);

2110 (
yyvÆ
.
node
) = 0;

2119 
	`CREATE_REAL
((
yyvÆ
.
node
), (
yyv•
[0].
ªÆ
));

2128 
	`CREATE_NUMBER
((
yyvÆ
.
node
), (
yyv•
[0].
numbî
));

2137 (
yyvÆ
.
ty≥
) = 0;

2146 (
yyvÆ
.
ty≥
Ë
TYPE_MOD_ARRAY
;

2155 (
yyvÆ
.
node
Ë(
yyv•
[0].
de˛
).node;

2156 i‡(!(
yyvÆ
.
node
)) {

2157 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

2167 (
yyvÆ
.
node
) = 0;

2176 (
yyvÆ
.
node
) = 0;

2185 (
yyvÆ
.
°rög
Ë
	`s¸©ch_c›y
((
yyv•
[0].
ihe
)->
«me
);

2194 
Êags
;

2195 
acc_mod
;

2197 
Êags
 = ((
yyv•
[-2].
ty≥
) >> 16);

2199 
Êags
 |
globÆ_modifõrs
;

2201 
acc_mod
 = (
Êags
 & 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

2202 i‡(
acc_mod
 & (acc_mod - 1)) {

2203 
buf
[256];

2204 *
íd
 = 
	`EndOf
(
buf
);

2205 *
p
;

2207 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

2208 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, 
Êags
);

2209 
p
 = 
	`°Ωut
’, 
íd
, ") for function");

2210 
	`yyîr‹
(
buf
);

2213 i‡(!(
Êags
 & 
DECL_ACCESS
)ËÊag†|
DECL_PUBLIC
;

2214 i‡(
Êags
 & 
DECL_NOSAVE
) {

2215 
	`yyw¨n
("IllegalÅo declareÇosave function.");

2216 
Êags
 &~
DECL_NOSAVE
;

2218 (
yyv•
[-2].
ty≥
Ë(
Êags
 << 16) | ((yyvsp[-2].type) & 0xffff);

2221 i‡((
yyv•
[-2].
ty≥
) & 0xffff) {

2222 
exa˘_ty≥s
 = ((
yyv•
[-2].
ty≥
)& 0xffff) | (yyvsp[-1].type);

2224 i‡(
¥agmas
 & 
PRAGMA_STRICT_TYPES
) {

2225 i‡(
	`°rcmp
((
yyv•
[0].
°rög
), "create") != 0)

2226 
	`yyîr‹
("\"#pragma strict_types\"ÑequiresÅype of function");

2228 
exa˘_ty≥s
 = 
TYPE_VOID
;

2230 
exa˘_ty≥s
 = 0;

2240 *
p
 = (
yyv•
[-4].
°rög
);

2241 (
yyv•
[-4].
°rög
Ë
	`make_sh¨ed_°rög
((yyvsp[-4].string));

2242 
	`s¸©ch_‰ì
(
p
);

2252 (
yyvÆ
.
numbî
Ë
FUNC_PROTOTYPE
;

2253 i‡((
yyv•
[-1].
¨gumít
).
Êags
 & 
ARG_IS_VARARGS
) {

2254 (
yyvÆ
.
numbî
Ë|(
FUNC_TRUE_VARARGS
 | 
FUNC_VARARGS
);

2256 (
yyvÆ
.
numbî
Ë|((
yyv•
[-6].
ty≥
) >> 16);

2258 
	`deföe_√w_fun˘i⁄
((
yyv•
[-4].
°rög
), (yyv•[-1].
¨gumít
).
num_¨g
, 0, (
yyvÆ
.
numbî
), ((yyv•[-6].
ty≥
) & 0xffff)| (yyvsp[-5].type));

2261 
	`‰ì_°rög
((
yyv•
[-4].
°rög
));

2262 
c⁄ãxt
 = 0;

2272 i‡((
yyv•
[0].
node
)) {

2273 
fun
;

2275 (
yyv•
[-1].
numbî
Ë&~
FUNC_PROTOTYPE
;

2276 i‡((
yyv•
[0].
node
)->
köd
 !
NODE_RETURN
 &&

2277 ((
yyv•
[0].
node
)->
köd
 !
NODE_TWO_VALUES


2278 || (
yyv•
[0].
node
)->
r
.
ex¥
->
köd
 !
NODE_RETURN
)) {

2279 
∑r£_node_t
 *
ª∂a˚mít
;

2280 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyv•
[0].
node
), 0);

2281 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

2282 (
yyv•
[0].
node
Ë
ª∂a˚mít
;

2285 
fun
 = 
	`deföe_√w_fun˘i⁄
((
yyv•
[-6].
°rög
), (yyv•[-3].
¨gumít
).
num_¨g
,

2286 
max_num_loˇls
 - (
yyv•
[-3].
¨gumít
).
num_¨g
,

2287 (
yyv•
[-1].
numbî
), ((yyv•[-8].
ty≥
) & 0xffff) | (yyvsp[-7].type));

2288 i‡(
fun
 != -1) {

2289 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

2290 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION
;

2291 (
yyvÆ
.
node
)->
v
.
numbî
 = 
fun
;

2292 (
yyvÆ
.
node
)->
l
.
numbî
 = 
max_num_loˇls
;

2293 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[0].node);

2295 (
yyvÆ
.
node
) = 0;

2297 (
yyvÆ
.
node
) = 0;

2298 
	`‰ì_Æl_loˇl_«mes
(!!(
yyv•
[0].
node
));

2307 i‡(!((
yyv•
[-2].
ty≥
Ë& ~(
DECL_MODS
)Ë&& (
¥agmas
 & 
PRAGMA_STRICT_TYPES
))

2308 
	`yyîr‹
("MissingÅype for global variable declaration");

2309 (
yyvÆ
.
node
) = 0;

2318 i‡(!(
yyv•
[-1].
ty≥
))

2319 
	`yyîr‹
("modifierÜist mayÇot beÉmpty.");

2321 i‡((
yyv•
[-1].
ty≥
Ë& 
FUNC_VARARGS
) {

2322 
	`yyîr‹
("Illegal modifier 'varargs' in global modifierÜist.");

2323 (
yyv•
[-1].
ty≥
Ë&~
FUNC_VARARGS
;

2326 i‡(!((
yyv•
[-1].
ty≥
Ë& 
DECL_ACCESS
)Ë(yyv•[-1].ty≥Ë|
DECL_PUBLIC
;

2327 
globÆ_modifõrs
 = (
yyv•
[-1].
ty≥
);

2328 (
yyvÆ
.
node
) = 0;

2340 i‡(
cuºít_ty≥
 =
TYPE_VOID
)

2341 
	`yyîr‹
("IllegalÅo declare class member ofÅype void.");

2342 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
cuºít_ty≥
 | (yyv•[-1].
ty≥
));

2343 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2352 
cuºít_ty≥
 = (
yyv•
[0].
ty≥
);

2361 
idít_hash_ñem_t
 *
ihe
;

2363 
ihe
 = 
	`föd_‹_add_idít
(

2364 
	`PROG_STRING
((
yyvÆ
.
numbî
Ë
	`°‹e_¥og_°rög
((
yyv•
[-1].
°rög
))),

2365 
FOA_GLOBAL_SCOPE
);

2366 i‡(
ihe
->
dn
.
˛ass_num
 == -1) {

2367 
ihe
->
£m_vÆue
++;

2368 
ihe
->
dn
.
˛ass_num
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

2369 i‡(
ihe
->
dn
.
˛ass_num
 > 
CLASS_NUM_MASK
){

2370 
buf
[256];

2371 *
p
;

2373 
p
 = 
buf
;

2374 
	`•rötf
(
p
, "Toÿm™y cœs£s, max i†%d.\n", 
CLASS_NUM_MASK
 + 1);

2375 
	`yyîr‹
(
buf
);

2378 
	`s¸©ch_‰ì
((
yyv•
[-1].
°rög
));

2379 (
yyv•
[-2].
ihe
) = 0;

2382 (
yyv•
[-2].
ihe
) = ihe;

2392 
˛ass_def_t
 *
sd
;

2393 
˛ass_membî_íåy_t
 *
sme
;

2394 
i
, 
øi£_îr‹
 = 0;

2397 i‡((
yyv•
[-5].
ihe
) != 0) {

2398 
sd
 = 
	`CLASS
((
yyv•
[-5].
ihe
)->
dn
.
˛ass_num
);

2399 i‡(
sd
->
size
 !
cuºít_numbî_of_loˇls
)

2400 
øi£_îr‹
 = 1;

2402 
i
 = 
sd
->
size
;

2403 
sme
 = (
˛ass_membî_íåy_t
 *)
mem_block
[
A_CLASS_MEMBER
].
block
 + 
sd
->
ödex
;

2404 
i
--) {

2406 i‡(
	`°rcmp
(
	`PROG_STRING
(
sme
[
i
].
«me
), 
loˇls_±r
[i].
ihe
->name) != 0 ||

2407 
sme
[
i
].
ty≥
 !(
ty≥_of_loˇls_±r
[i] & ~
LOCAL_MODS
)) {

2408 
øi£_îr‹
 = 1;

2415 i‡(
øi£_îr‹
) {

2416 
buf
[256];

2417 *
íd
 = 
	`EndOf
(
buf
);

2418 *
p
;

2420 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine class ");

2421 
p
 = 
	`°Ωut
’, 
íd
, 
	`PROG_STRING
((
yyvÆ
.
numbî
)));

2422 
	`yyîr‹
(
buf
);

2424 
sd
 = (
˛ass_def_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_DEF
, (class_def_t));

2425 
i
 = 
sd
->
size
 = 
cuºít_numbî_of_loˇls
;

2426 
sd
->
ödex
 = 
mem_block
[
A_CLASS_MEMBER
].
cuºít_size
 / (
˛ass_membî_íåy_t
);

2427 
sd
->
«me
 = (
yyv•
[-2].
numbî
);

2429 
sme
 = (
˛ass_membî_íåy_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_MEMBER
, (˛ass_membî_íåy_tË* 
cuºít_numbî_of_loˇls
);

2431 
i
--) {

2432 
sme
[
i
].
«me
 = 
	`°‹e_¥og_°rög
(
loˇls_±r
[i].
ihe
->name);

2433 
sme
[
i
].
ty≥
 = 
ty≥_of_loˇls_±r
[i] & ~
LOCAL_MODS
;

2437 
	`‰ì_Æl_loˇl_«mes
(0);

2438 (
yyvÆ
.
node
) = 0;

2447 i‡((
yyv•
[0].
ihe
)->
dn
.
loˇl_num
 != -1) {

2448 
buff
[256];

2449 *
íd
 = 
	`EndOf
(
buff
);

2450 *
p
;

2452 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÑedeclareÜocalÇame '");

2453 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

2454 
p
 = 
	`°Ωut
’, 
íd
, "'");

2455 
	`yyîr‹
(
buff
);

2457 (
yyvÆ
.
°rög
Ë
	`s¸©ch_c›y
((
yyv•
[0].
ihe
)->
«me
);

2466 i‡((
yyv•
[0].
ihe
)->
dn
.
˛ass_num
 == -1) {

2467 
buf
[256];

2468 *
íd
 = 
	`EndOf
(
buf
);

2469 *
p
;

2471 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

2472 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

2473 
p
 = 
	`°Ωut
’, 
íd
, "'");

2474 
	`yyîr‹
(
buf
);

2475 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2477 (
yyvÆ
.
ty≥
Ë(
yyv•
[0].
ihe
)->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

2487 
buf
[256];

2488 *
íd
 = 
	`EndOf
(
buf
);

2489 *
p
;

2491 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

2492 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

2493 
p
 = 
	`°Ωut
’, 
íd
, "'");

2494 
	`yyîr‹
(
buf
);

2495 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2504 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2513 (
yyvÆ
.
ty≥
Ë(
yyv•
[-1].ty≥Ë| 
TYPE_MOD_ARRAY
;

2522 (
yyvÆ
.
ty≥
Ë(
yyv•
[-1].ty≥Ë| 
LOCAL_MOD_REF
;

2531 (
yyvÆ
.
numbî
Ë(
yyv•
[-1].
ty≥
) | (yyvsp[0].type);

2532 i‡((
yyv•
[-1].
ty≥
Ë!
TYPE_VOID
)

2533 
	`add_loˇl_«me
("", (
yyv•
[-1].
ty≥
) | (yyvsp[0].type));

2542 i‡((
yyv•
[-2].
ty≥
Ë=
TYPE_VOID
)

2543 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2544 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), (yyv•[-2].
ty≥
) | (yyvsp[-1].type));

2545 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2546 (
yyvÆ
.
numbî
Ë(
yyv•
[-2].
ty≥
) | (yyvsp[-1].type);

2555 i‡(
exa˘_ty≥s
) {

2556 
	`yyîr‹
("MissingÅype forárgument");

2558 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
TYPE_ANY
);

2559 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2560 (
yyvÆ
.
numbî
Ë
TYPE_ANY
;

2569 (
yyvÆ
.
¨gumít
).
num_¨g
 = 0;

2570 (
yyvÆ
.
¨gumít
).
Êags
 = 0;

2579 
x
 = 
ty≥_of_loˇls_±r
[
max_num_loˇls
-1];

2580 
…
 = 
x
 & ~
LOCAL_MODS
;

2582 (
yyvÆ
.
¨gumít
Ë(
yyv•
[-1].argument);

2583 (
yyvÆ
.
¨gumít
).
Êags
 |
ARG_IS_VARARGS
;

2585 i‡(
x
 & 
LOCAL_MOD_REF
) {

2586 
	`yyîr‹
("VariableÅo holdÑemainder ofárgs mayÇot beáÑeference");

2587 
x
 &~
LOCAL_MOD_REF
;

2589 i‡(
…
 !
TYPE_ANY
 && !÷à& 
TYPE_MOD_ARRAY
))

2590 
	`yyw¨n
("VariableÅo holdÑemainder ofárguments should beánárray.");

2599 i‡(((
yyv•
[0].
numbî
Ë& 
TYPE_MASK
Ë=
TYPE_VOID
 && !((yyv•[0].numbîË& 
TYPE_MOD_CLASS
)) {

2600 i‡((
yyv•
[0].
numbî
Ë& ~
TYPE_MASK
)

2601 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2602 (
yyvÆ
.
¨gumít
).
num_¨g
 = 0;

2604 (
yyvÆ
.
¨gumít
).
num_¨g
 = 1;

2606 (
yyvÆ
.
¨gumít
).
Êags
 = 0;

2615 i‡(!(
yyvÆ
.
¨gumít
).
num_¨g
)

2616 
	`yyîr‹
("argument ofÅype void must beÅhe onlyárgument.");

2617 i‡(((
yyv•
[0].
numbî
Ë& 
TYPE_MASK
Ë=
TYPE_VOID
 && !((yyv•[0].numbîË& 
TYPE_MOD_CLASS
))

2618 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2620 (
yyvÆ
.
¨gumít
Ë(
yyv•
[-2].argument);

2621 (
yyvÆ
.
¨gumít
).
num_¨g
++;

2630 (
yyvÆ
.
ty≥
) = 0;

2639 
acc_mod
;

2641 (
yyvÆ
.
ty≥
Ë(
yyv•
[-1].type) | (yyvsp[0].type);

2643 
acc_mod
 = ((
yyvÆ
.
ty≥
Ë& 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

2644 i‡(
acc_mod
 & (acc_mod - 1)) {

2645 
buf
[256];

2646 *
íd
 = 
	`EndOf
(
buf
);

2647 *
p
;

2649 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

2650 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, (
yyvÆ
.
ty≥
));

2651 
p
 = 
	`°Ωut
’, 
íd
, ") ");

2652 
	`yyîr‹
(
buf
);

2653 (
yyvÆ
.
ty≥
Ë
DECL_PUBLIC
;

2663 (
yyvÆ
.
ty≥
Ë((
yyv•
[-1].type) << 16) | (yyvsp[0].type);

2664 
cuºít_ty≥
 = (
yyvÆ
.
ty≥
);

2673 (
yyvÆ
.
ty≥
Ë(
yyv•
[-2].type) | (yyvsp[-1].type);

2682 (
yyvÆ
.
ty≥
Ë
TYPE_UNKNOWN
;

2691 i‡(
cuºít_ty≥
 & (
FUNC_VARARGS
 << 16)){

2692 
	`yyîr‹
("IllegalÅo declare varargs variable.");

2693 
cuºít_ty≥
 &~(
FUNC_VARARGS
 << 16);

2700 i‡(
cuºít_ty≥
 & 0xffff0000){

2701 
cuºít_ty≥
 = (current_type >> 16) | (current_type & 0xffff);

2704 
cuºít_ty≥
 |
globÆ_modifõrs
;

2706 i‡(!(
cuºít_ty≥
 & 
DECL_ACCESS
)Ëcuºít_ty≥ |
DECL_PUBLIC
;

2708 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

2709 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2711 
	`deföe_√w_v¨übÀ
((
yyv•
[0].
°rög
), 
cuºít_ty≥
 | (yyv•[-1].
ty≥
));

2712 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2721 
∑r£_node_t
 *
ex¥
, *
√wnode
;

2722 
ty≥
;

2724 i‡(
cuºít_ty≥
 & (
FUNC_VARARGS
 << 16)){

2725 
	`yyîr‹
("IllegalÅo declare varargs variable.");

2726 
cuºít_ty≥
 &~(
FUNC_VARARGS
 << 16);

2729 i‡(
cuºít_ty≥
 & 0xffff0000){

2730 
cuºít_ty≥
 = (current_type >> 16) | (current_type & 0xffff);

2733 
cuºít_ty≥
 |
globÆ_modifõrs
;

2735 i‡(!(
cuºít_ty≥
 & 
DECL_ACCESS
)Ëcuºít_ty≥ |
DECL_PUBLIC
;

2737 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

2738 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2740 i‡((
yyv•
[-1].
numbî
Ë!
F_ASSIGN
)

2741 
	`yyîr‹
("Only '=' isÜegal in initializers.");

2745 i‡(
cuºít_ty≥
) {

2746 
ty≥
 = (
cuºít_ty≥
 | (
yyv•
[-3].ty≥)Ë& ~
DECL_MODS
;

2747 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

2748 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2749 i‡(!
	`com∑tibÀ_ty≥s
(
ty≥
, (
yyv•
[0].
node
)->type)) {

2750 
buff
[256];

2751 *
íd
 = 
	`EndOf
(
buff
);

2752 *
p
;

2754 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2755 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[0].
node
)->type);

2756 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

2757 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
°rög
));

2758 
	`yyîr‹
(
buff
);

2761 (
yyv•
[0].
node
Ë
	`do_¥omŸi⁄s
((yyv•[0].node), 
ty≥
);

2763 
	`CREATE_BINARY_OP
(
ex¥
, 
F_VOID_ASSIGN
, 0, (
yyv•
[0].
node
), 0);

2764 
	`CREATE_OPCODE_1
(
ex¥
->
r
.ex¥, 
F_GLOBAL_LVALUE
, 0,

2765 
	`deföe_√w_v¨übÀ
((
yyv•
[-2].
°rög
), 
cuºít_ty≥
 | (yyv•[-3].
ty≥
)));

2766 
√wnode
 = 
comp_åìs
[
TREE_INIT
];

2767 
	`CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
], 0,

2768 
√wnode
, 
ex¥
);

2769 
	`s¸©ch_‰ì
((
yyv•
[-2].
°rög
));

2778 i‡((
yyv•
[-2].
de˛
).
node
 && (yyvsp[-1].node)) {

2779 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-2].decl).node, (yyvsp[-1].node));

2780 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[-2].decl).node ? (yyvsp[-2].decl).node : (yyvsp[-1].node));

2781 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-2].decl).num;

2790 (
yyvÆ
.
de˛
).
node
 = 0;

2791 (
yyvÆ
.
de˛
).
num
 = 0;

2800 i‡((
yyv•
[0].
ty≥
Ë=
TYPE_VOID
)

2801 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

2805 
cuºít_ty≥
 = (
yyv•
[0].
ty≥
);

2814 i‡((
yyv•
[-4].
de˛
).
node
 && (yyvsp[-1].decl).node) {

2815 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-4].decl).node, (yyvsp[-1].decl).node);

2816 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[-4].decl).node ? (yyvsp[-4].decl).node : (yyvsp[-1].decl).node);

2817 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-4].decl).num + (yyvsp[-1].decl).num;

2826 i‡(
cuºít_ty≥
 & 
LOCAL_MOD_REF
) {

2827 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

2828 
cuºít_ty≥
 &~
LOCAL_MOD_REF
;

2830 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
cuºít_ty≥
 | (yyv•[-1].
ty≥
Ë| 
LOCAL_MOD_UNUSED
);

2832 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2833 (
yyvÆ
.
node
) = 0;

2842 
ty≥
 = (
cuºít_ty≥
 | (
yyv•
[-3].ty≥)Ë& ~
DECL_MODS
;

2844 i‡(
cuºít_ty≥
 & 
LOCAL_MOD_REF
) {

2845 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

2846 
cuºít_ty≥
 &~
LOCAL_MOD_REF
;

2847 
ty≥
 &~
LOCAL_MOD_REF
;

2850 i‡((
yyv•
[-1].
numbî
Ë!
F_ASSIGN
)

2851 
	`yyîr‹
("Only '=' isállowed in initializers.");

2852 i‡(!
	`com∑tibÀ_ty≥s
((
yyv•
[0].
node
)->
ty≥
,Åype)) {

2853 
buff
[256];

2854 *
íd
 = 
	`EndOf
(
buff
);

2855 *
p
;

2857 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2858 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[0].
node
)->type);

2859 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

2860 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
°rög
));

2862 
	`yyîr‹
(
buff
);

2865 (
yyv•
[0].
node
Ë
	`do_¥omŸi⁄s
((yyv•[0].node), 
ty≥
);

2867 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_VOID_ASSIGN_LOCAL
, 0, (
yyv•
[0].node),

2868 
	`add_loˇl_«me
((
yyv•
[-2].
°rög
), 
cuºít_ty≥
 | (yyv•[-3].
ty≥
Ë| 
LOCAL_MOD_UNUSED
));

2869 
	`s¸©ch_‰ì
((
yyv•
[-2].
°rög
));

2878 i‡((
yyv•
[-2].
ty≥
Ë=
TYPE_VOID
)

2879 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

2881 (
yyvÆ
.
numbî
Ë
	`add_loˇl_«me
((
yyv•
[0].
°rög
), (yyv•[-2].
ty≥
) | (yyvsp[-1].type));

2882 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2891 
ty≥
 = 
ty≥_of_loˇls_±r
[(
yyv•
[-2].
numbî
)];

2893 i‡(
ty≥
 & 
LOCAL_MOD_REF
) {

2894 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

2895 
ty≥_of_loˇls_±r
[(
yyv•
[-2].
numbî
)] &~
LOCAL_MOD_REF
;

2897 
ty≥
 &~
LOCAL_MODS
;

2899 i‡((
yyv•
[-1].
numbî
Ë!
F_ASSIGN
)

2900 
	`yyîr‹
("Only '=' isállowed in initializers.");

2901 i‡(!
	`com∑tibÀ_ty≥s
((
yyv•
[0].
node
)->
ty≥
,Åype)) {

2902 
buff
[256];

2903 *
íd
 = 
	`EndOf
(
buff
);

2904 *
p
;

2906 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2907 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[0].
node
)->type);

2908 
p
 = 
	`°Ωut
’, 
íd
, " when initializing.");

2909 
	`yyîr‹
(
buff
);

2912 (
yyv•
[0].
node
Ë
	`do_¥omŸi⁄s
((yyv•[0].node), 
ty≥
);

2915 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ASSIGN
, 0, (
yyv•
[0].node), 0);

2916 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
r
.
ex¥
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[-2].
numbî
));

2925 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[0].node);

2926 (
yyvÆ
.
de˛
).
num
 = 1;

2935 i‡((
yyv•
[-2].
node
Ë&& (yyv•[0].
de˛
).node) {

2936 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-2].node), (yyvsp[0].decl).node);

2937 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[-2].node) ? (yyvsp[-2].node) : (yyvsp[0].decl).node);

2938 (
yyvÆ
.
de˛
).
num
 = 1 + (
yyv•
[0].decl).num;

2947 (
yyvÆ
.
node
) = 0;

2956 i‡((
yyv•
[-1].
node
) && (yyvsp[0].node)) {

2957 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[-1].node), (yyvsp[0].node));

2958 } (
yyvÆ
.
node
Ë((
yyv•
[-1].node) ? (yyvsp[-1].node) : (yyvsp[0].node));

2967 (
yyvÆ
.
node
) = 0;

2976 (
yyvÆ
.
node
Ë
	`p›_vÆue
((
yyv•
[-1].node));

2977 #ifde‡
DEBUG


2979 
∑r£_node_t
 *
ª∂a˚mít
;

2980 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyvÆ
.
node
), 0);

2981 
	`CREATE_OPCODE
(
ª∂a˚mít
->
r
.
ex¥
, 
F_BREAK_POINT
, 0);

2982 (
yyvÆ
.
node
Ë
ª∂a˚mít
;

2993 (
yyvÆ
.
node
Ë(
yyv•
[0].
de˛
).node;

2994 
	`p›_n_loˇls
((
yyv•
[0].
de˛
).
num
);

3003 (
yyvÆ
.
node
) = 0;

3012 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
) {

3013 
	`yyîr‹
("Cannot break out of catch { } orÅime_expression { }");

3014 (
yyvÆ
.
node
) = 0;

3016 i‡(
c⁄ãxt
 & 
SWITCH_CONTEXT
) {

3017 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_BREAK_SWITCH
);

3019 i‡(
c⁄ãxt
 & 
LOOP_CONTEXT
) {

3020 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_BREAK
);

3021 i‡(
c⁄ãxt
 & 
LOOP_FOREACH
) {

3022 
∑r£_node_t
 *
ª∂a˚
;

3023 
	`CREATE_STATEMENTS
(
ª∂a˚
, 0, (
yyvÆ
.
node
));

3024 
	`CREATE_OPCODE
(
ª∂a˚
->
l
.
ex¥
, 
F_EXIT_FOREACH
, 0);

3025 (
yyvÆ
.
node
Ë
ª∂a˚
;

3028 
	`yyîr‹
("break statement outsideÜoop");

3029 (
yyvÆ
.
node
) = 0;

3039 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
)

3040 
	`yyîr‹
("Cannot continue out of catch { } orÅime_expression { }");

3042 i‡(!(
c⁄ãxt
 & 
LOOP_CONTEXT
))

3043 
	`yyîr‹
("continue statement outsideÜoop");

3044 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_CONTINUE
);

3053 (
yyv•
[-3].
numbî
Ë
c⁄ãxt
;

3054 
c⁄ãxt
 = 
LOOP_CONTEXT
;

3063 
	`CREATE_LOOP
((
yyvÆ
.
node
), 1, (
yyv•
[0].node), 0, 
	`›timize_lo›_ã°
((yyvsp[-3].node)));

3064 
c⁄ãxt
 = (
yyv•
[-5].
numbî
);

3073 (
yyv•
[0].
numbî
Ë
c⁄ãxt
;

3074 
c⁄ãxt
 = 
LOOP_CONTEXT
;

3083 
	`CREATE_LOOP
((
yyvÆ
.
node
), 0, (
yyv•
[-5].node), 0, 
	`›timize_lo›_ã°
((yyvsp[-2].node)));

3084 
c⁄ãxt
 = (
yyv•
[-7].
numbî
);

3093 (
yyv•
[-5].
de˛
).
node
 = 
	`p›_vÆue
((yyvsp[-5].decl).node);

3094 (
yyv•
[-7].
numbî
Ë
c⁄ãxt
;

3095 
c⁄ãxt
 = 
LOOP_CONTEXT
;

3104 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-7].decl).num;

3106 (
yyv•
[-3].
node
Ë
	`p›_vÆue
((yyvsp[-3].node));

3107 i‡((
yyv•
[-3].
node
Ë&& 
	`IS_NODE
((yyv•[-3].node), 
NODE_UNARY_OP
, 
F_INC
)

3108 && 
	`IS_NODE
((
yyv•
[-3].
node
)->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

3109 
lv¨
 = (
yyv•
[-3].
node
)->
r
.
ex¥
->
l
.
numbî
;

3110 
	`CREATE_OPCODE_1
((
yyv•
[-3].
node
), 
F_LOOP_INCR
, 0, 
lv¨
);

3113 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-7].decl).node, 0);

3114 
	`CREATE_LOOP
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
, 1, (
yyv•
[0].node), (yyv•[-3].node), 
	`›timize_lo›_ã°
((yyvsp[-5].node)));

3116 
c⁄ãxt
 = (
yyv•
[-9].
numbî
);

3125 i‡((
yyv•
[0].
ihe
)->
dn
.
loˇl_num
 != -1) {

3126 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[0].
ihe
)->
dn
.
loˇl_num
);

3127 
ty≥_of_loˇls_±r
[(
yyv•
[0].
ihe
)->
dn
.
loˇl_num
] &~
LOCAL_MOD_UNUSED
;

3129 i‡((
yyv•
[0].
ihe
)->
dn
.
globÆ_num
 != -1) {

3130 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, (
yyv•
[0].
ihe
)->
dn
.
globÆ_num
);

3132 
buf
[256];

3133 *
íd
 = 
	`EndOf
(
buf
);

3134 *
p
;

3136 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

3137 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

3138 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

3139 
	`yyîr‹
(
buf
);

3140 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, 0);

3142 (
yyvÆ
.
de˛
).
num
 = 0;

3151 i‡(
ty≥_of_loˇls_±r
[(
yyv•
[0].
numbî
)] & 
LOCAL_MOD_REF
) {

3152 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_REF_LVALUE
, 0, (
yyv•
[0].
numbî
));

3154 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[0].
numbî
));

3155 
ty≥_of_loˇls_±r
[(
yyv•
[0].
numbî
)] &~
LOCAL_MOD_UNUSED
;

3157 (
yyvÆ
.
de˛
).
num
 = 1;

3166 
buf
[256];

3167 *
íd
 = 
	`EndOf
(
buf
);

3168 *
p
;

3170 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

3171 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

3172 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

3173 
	`yyîr‹
(
buf
);

3174 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, 0);

3175 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

3176 (
yyvÆ
.
de˛
).
num
 = 0;

3185 
	`CREATE_FOREACH
((
yyvÆ
.
de˛
).
node
, (
yyv•
[0].decl).node, 0);

3186 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[0].decl).num;

3195 
	`CREATE_FOREACH
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-2].decl).node, (yyvsp[0].decl).node);

3196 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-2].decl).num + (yyvsp[0].decl).num;

3197 i‡((
yyv•
[-2].
de˛
).
node
->
v
.
numbî
 =
F_REF_LVALUE
)

3198 
	`yyîr‹
("Mapping key mayÇot beáÑeference in foreach()");

3207 (
yyv•
[-3].
de˛
).
node
->
v
.
ex¥
 = (yyvsp[-1].node);

3208 (
yyv•
[-5].
numbî
Ë
c⁄ãxt
;

3209 
c⁄ãxt
 = 
LOOP_CONTEXT
 | 
LOOP_FOREACH
;

3218 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-5].decl).num;

3220 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-5].decl).node, 0);

3221 
	`CREATE_LOOP
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
, 2, (
yyv•
[0].node), 0, 0);

3222 
	`CREATE_OPCODE
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
->r.ex¥, 
F_NEXT_FOREACH
, 0);

3224 
c⁄ãxt
 = (
yyv•
[-7].
numbî
);

3233 (
yyvÆ
.
node
) = 0;

3242 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[0].node);

3243 (
yyvÆ
.
de˛
).
num
 = 0;

3252 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[0].node);

3253 (
yyvÆ
.
de˛
).
num
 = 1;

3262 (
yyv•
[-3].
numbî
Ë
c⁄ãxt
;

3263 
c⁄ãxt
 &
LOOP_CONTEXT
;

3264 
c⁄ãxt
 |
SWITCH_CONTEXT
;

3265 (
yyv•
[-2].
numbî
Ë
mem_block
[
A_CASES
].
cuºít_size
;

3274 
∑r£_node_t
 *
node1
, *
node2
;

3276 i‡((
yyv•
[-1].
node
)) {

3277 
	`CREATE_STATEMENTS
(
node1
, (
yyv•
[-2].
node
), (yyvsp[-1].node));

3278 } 
node1
 = (
yyv•
[-2].
node
);

3280 i‡(
c⁄ãxt
 & 
SWITCH_STRINGS
) {

3281 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_STRINGS
);

3282 } i‡(
c⁄ãxt
 & 
SWITCH_RANGES
) {

3283 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_RANGES
);

3285 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_NUMBERS
);

3288 
node2
->
l
.
ex¥
 = (
yyv•
[-7].
node
);

3289 
node2
->
r
.
ex¥
 = 
node1
;

3290 
	`¥ï¨e_ˇ£s
(
node2
, (
yyv•
[-8].
numbî
));

3291 
c⁄ãxt
 = (
yyv•
[-9].
numbî
);

3292 (
yyvÆ
.
node
Ë
node2
;

3293 
	`p›_n_loˇls
((
yyv•
[-3].
de˛
).
num
);

3302 i‡((
yyv•
[0].
node
)){

3303 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[-1].node), (yyvsp[0].node));

3304 } (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

3313 i‡((
yyv•
[0].
node
)){

3314 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[-1].node), (yyvsp[0].node));

3315 } (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

3324 (
yyvÆ
.
node
) = 0;

3333 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

3334 (
yyvÆ
.
node
)->
v
.
ex¥
 = 0;

3336 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyv•
[-1].
node
)), ((yyvsp[-1].node)));

3345 i‡–(
yyv•
[-3].
node
)->
köd
 !
NODE_CASE_NUMBER


3346 || (
yyv•
[-1].
node
)->
köd
 !
NODE_CASE_NUMBER
 )

3347 
	`yyîr‹
("String caseÜabelsÇotállowedásÑange bounds");

3348 i‡((
yyv•
[-3].
node
)->
r
.
numbî
 > (yyvsp[-1].node)->r.number) ;

3350 
c⁄ãxt
 |
SWITCH_RANGES
;

3352 (
yyvÆ
.
node
Ë(
yyv•
[-3].node);

3353 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[-1].node);

3355 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyv•
[-3].
node
)), ((yyvsp[-3].node)));

3364 i‡(
c⁄ãxt
 & 
SWITCH_DEFAULT
) {

3365 
	`yyîr‹
("Duplicate default");

3366 (
yyvÆ
.
node
) = 0;

3369 (
yyvÆ
.
node
Ë
	`√w_node
();

3370 (
yyvÆ
.
node
)->
köd
 = 
NODE_DEFAULT
;

3371 (
yyvÆ
.
node
)->
v
.
ex¥
 = 0;

3372 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyvÆ
.
node
)), ((yyval.node)));

3373 
c⁄ãxt
 |
SWITCH_DEFAULT
;

3382 i‡((
c⁄ãxt
 & 
SWITCH_STRINGS
Ë&& (
yyv•
[0].
poöãr_öt
))

3383 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

3385 i‡((
yyv•
[0].
poöãr_öt
)Ë
c⁄ãxt
 |
SWITCH_NUMBERS
;

3387 (
yyvÆ
.
node
Ë
	`√w_node
();

3388 (
yyvÆ
.
node
)->
köd
 = 
NODE_CASE_NUMBER
;

3389 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
∑r£_node_t
 *)(
yyv•
[0].
poöãr_öt
);

3398 
°r
;

3400 
°r
 = 
	`°‹e_¥og_°rög
((
yyv•
[0].
°rög
));

3401 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

3402 i‡(
c⁄ãxt
 & 
SWITCH_NUMBERS
)

3403 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

3404 
c⁄ãxt
 |
SWITCH_STRINGS
;

3405 (
yyvÆ
.
node
Ë
	`√w_node
();

3406 (
yyvÆ
.
node
)->
köd
 = 
NODE_CASE_STRING
;

3407 (
yyvÆ
.
node
)->
r
.
numbî
 = 
°r
;

3416 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) | (yyvsp[0].pointer_int);

3425 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) ^ (yyvsp[0].pointer_int);

3434 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) & (yyvsp[0].pointer_int);

3443 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) == (yyvsp[0].pointer_int);

3452 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) != (yyvsp[0].pointer_int);

3461 (
yyv•
[-1].
numbî
)){

3462 
F_GE
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) >= (yyvsp[0].pointer_int); ;

3463 
F_LE
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) <= (yyvsp[0].pointer_int); ;

3464 
F_GT
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) > (yyvsp[0].pointer_int); ;

3474 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) < (yyvsp[0].pointer_int);

3483 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) << (yyvsp[0].pointer_int);

3492 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) >> (yyvsp[0].pointer_int);

3501 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) + (yyvsp[0].pointer_int);

3510 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) - (yyvsp[0].pointer_int);

3519 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) * (yyvsp[0].pointer_int);

3528 i‡((
yyv•
[0].
poöãr_öt
)Ë(
yyvÆ
.poöãr_ötË(yyv•[-2].poöãr_ötË% (yyv•[0].poöãr_öt); 
	`yyîr‹
("Modulo by zero");

3537 i‡((
yyv•
[0].
poöãr_öt
)Ë(
yyvÆ
.poöãr_ötË(yyv•[-2].poöãr_ötË/ (yyv•[0].poöãr_öt); 
	`yyîr‹
("Division by zero");

3546 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-1].pointer_int);

3555 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[0].
numbî
);

3564 (
yyvÆ
.
poöãr_öt
Ë-(
yyv•
[0].
numbî
);

3573 (
yyvÆ
.
poöãr_öt
Ë!(
yyv•
[0].
numbî
);

3582 (
yyvÆ
.
poöãr_öt
Ë~(
yyv•
[0].
numbî
);

3591 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

3600 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), (
yyv•
[0].node)->
ty≥
, 
	`p›_vÆue
((yyvsp[-2].node)), (yyvsp[0].node));

3609 
›
;

3611 i‡(!(
c⁄ãxt
 & 
ARG_LIST
))

3612 
	`yyîr‹
("ref illegal outside functionárgumentÜist");

3614 
num_ªfs
++;

3616 (
yyv•
[0].
node
)->
köd
) {

3617 
NODE_PARAMETER_LVALUE
:

3618 
›
 = 
F_LOCAL_LVALUE
;

3620 
NODE_TERNARY_OP
:

3621 
NODE_OPCODE_1
:

3622 
NODE_UNARY_OP_1
:

3623 
NODE_BINARY_OP
:

3624 
›
 = (
yyv•
[0].
node
)->
v
.
numbî
;

3625 i‡(
›
 > 
F_RINDEX_LVALUE
) {

3626 
	`yyîr‹
("IllegalÅo makeÑeferenceÅoÑange");

3630 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MAKE_REF
, 
TYPE_ANY
, (
yyv•
[0].node), 
›
);

3639 
∑r£_node_t
 *
l
 = (
yyv•
[-2].
node
), *
r
 = (yyvsp[0].node);

3644 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), (
yyv•
[-1].
numbî
), 
r
->
ty≥
,Ñ, 
l
);

3646 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
(
r
->
ty≥
, 
l
->type) &&

3647 !((
yyv•
[-1].
numbî
Ë=
F_ADD_EQ


3648 && 
r
->
ty≥
 =
TYPE_STRING
 &&

3649 
	`COMP_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
))) {

3650 
buf
[256];

3651 *
íd
 = 
	`EndOf
(
buf
);

3652 *
p
;

3654 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badássignment ");

3655 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
l
->
ty≥
, 
r
->type);

3656 
p
 = 
	`°Ωut
’, 
íd
, ".");

3657 
	`yyîr‹
(
buf
);

3660 i‡((
yyv•
[-1].
numbî
Ë=
F_ASSIGN
)

3661 (
yyvÆ
.
node
)->
l
.
ex¥
 = 
	`do_¥omŸi⁄s
(
r
,Ü->
ty≥
);

3670 
	`yyîr‹
("Illegal LHS");

3671 
	`CREATE_ERROR
((
yyvÆ
.
node
));

3680 
∑r£_node_t
 *
p1
 = (
yyv•
[-2].
node
), *
p2
 = (yyvsp[0].node);

3682 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
(
p1
->
ty≥
, 
p2
->type)) {

3683 
buf
[256];

3684 *
íd
 = 
	`EndOf
(
buf
);

3685 *
p
;

3687 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Types in ?: doÇot match ");

3688 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
p1
->
ty≥
, 
p2
->type);

3689 
p
 = 
	`°Ωut
’, 
íd
, ".");

3690 
	`yyw¨n
(
buf
);

3694 i‡(
	`IS_NODE
((
yyv•
[-4].
node
), 
NODE_UNARY_OP
, 
F_NOT
)) {

3696 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[-4].node)->
r
.
ex¥
, 
p2
, 
p1
);

3698 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[-4].node), 
p1
, 
p2
);

3700 (
yyvÆ
.
node
)->
ty≥
 = ((
p1
->ty≥ =
p2
->ty≥Ë?Ö1->ty≥ : 
TYPE_ANY
);

3709 
	`CREATE_LAND_LOR
((
yyvÆ
.
node
), 
F_LOR
, (
yyv•
[-2].node), (yyvsp[0].node));

3710 i‡(
	`IS_NODE
((
yyv•
[-2].
node
), 
NODE_LAND_LOR
, 
F_LOR
))

3711 (
yyv•
[-2].
node
)->
köd
 = 
NODE_BRANCH_LINK
;

3720 
	`CREATE_LAND_LOR
((
yyvÆ
.
node
), 
F_LAND
, (
yyv•
[-2].node), (yyvsp[0].node));

3721 i‡(
	`IS_NODE
((
yyv•
[-2].
node
), 
NODE_LAND_LOR
, 
F_LAND
))

3722 (
yyv•
[-2].
node
)->
köd
 = 
NODE_BRANCH_LINK
;

3731 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3733 i‡(
	`is_boﬁón
((
yyv•
[-2].
node
)) && is_boolean((yyvsp[0].node)))

3734 
	`yyw¨n
("bitwise operation on boolean values.");

3735 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

3736 i‡(
t1
 !
t3
) {

3737 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

3738 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

3739 
buf
[256];

3740 *
íd
 = 
	`EndOf
(
buf
);

3741 *
p
;

3743 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for | ");

3744 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3745 
p
 = 
	`°Ωut
’, 
íd
, ".");

3746 
	`yyîr‹
(
buf
);

3748 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

3750 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_OR
, 
t1
, (
yyv•
[-2].node), (yyvsp[0].node));

3752 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_OR
, "|");

3761 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_XOR
, "^");

3770 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3771 i‡(
	`is_boﬁón
((
yyv•
[-2].
node
)) && is_boolean((yyvsp[0].node)))

3772 
	`yyw¨n
("bitwise operation on boolean values.");

3773 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

3774 i‡(
t1
 !
t3
) {

3775 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

3776 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

3777 
buf
[256];

3778 *
íd
 = 
	`EndOf
(
buf
);

3779 *
p
;

3781 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for & ");

3782 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3783 
p
 = 
	`°Ωut
’, 
íd
, ".");

3784 
	`yyîr‹
(
buf
);

3786 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

3788 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_AND
, 
t1
, (
yyv•
[-2].node), (yyvsp[0].node));

3789 } (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_AND
, "&");

3798 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
((
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type)){

3799 
buf
[256];

3800 *
íd
 = 
	`EndOf
(
buf
);

3801 *
p
;

3803 
p
 = 
	`°Ωut
(
buf
, 
íd
, "==álways false because of incompatibleÅypes ");

3804 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type);

3805 
p
 = 
	`°Ωut
’, 
íd
, ".");

3806 
	`yyîr‹
(
buf
);

3809 i‡(
	`IS_NODE
((
yyv•
[-2].
node
), 
NODE_NUMBER
, 0)) {

3810 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[0].node));

3812 i‡(
	`IS_NODE
((
yyv•
[0].
node
), 
NODE_NUMBER
, 0)) {

3813 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[-2].node));

3815 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_EQ
, 
TYPE_NUMBER
, (
yyv•
[-2].node), (yyvsp[0].node));

3825 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
((
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type)){

3826 
buf
[256];

3827 *
íd
 = 
	`EndOf
(
buf
);

3828 *
p
;

3830 
p
 = 
	`°Ωut
(
buf
, 
íd
, "!=álwaysÅrue because of incompatibleÅypes ");

3831 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type);

3832 
p
 = 
	`°Ωut
’, 
íd
, ".");

3833 
	`yyîr‹
(
buf
);

3835 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_NE
, 
TYPE_NUMBER
, (
yyv•
[-2].node), (yyvsp[0].node));

3844 i‡(
exa˘_ty≥s
) {

3845 
t1
 = (
yyv•
[-2].
node
)->
ty≥
;

3846 
t3
 = (
yyv•
[0].
node
)->
ty≥
;

3848 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

3849 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

3850 
buf
[256];

3851 *
íd
 = 
	`EndOf
(
buf
);

3852 *
p
;

3854 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '");

3855 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
((
yyv•
[-1].
numbî
)));

3856 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

3857 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

3858 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3859 
	`yyîr‹
(
buf
);

3860 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

3861 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

3862 
buf
[256];

3863 *
íd
 = 
	`EndOf
(
buf
);

3864 *
p
;

3866 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '");

3867 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
((
yyv•
[-1].
numbî
)));

3868 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

3869 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

3870 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3871 
	`yyîr‹
(
buf
);

3872 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

3873 
buf
[256];

3874 *
íd
 = 
	`EndOf
(
buf
);

3875 *
p
;

3877 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo ");

3878 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
((
yyv•
[-1].
numbî
)));

3879 
p
 = 
	`°Ωut
’, 
íd
, " doÇot have compatibleÅypes : ");

3880 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3881 
	`yyîr‹
(
buf
);

3884 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), (
yyv•
[-1].
numbî
), 
TYPE_NUMBER
, (yyvsp[-2].node), (yyvsp[0].node));

3893 i‡(
exa˘_ty≥s
) {

3894 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3896 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

3897 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

3898 
buf
[256];

3899 *
íd
 = 
	`EndOf
(
buf
);

3900 *
p
;

3902 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '<' : \"");

3903 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

3904 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3905 
	`yyîr‹
(
buf
);

3906 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

3907 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

3908 
buf
[200];

3909 *
íd
 = 
	`EndOf
(
buf
);

3910 *
p
;

3912 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '<' : \"");

3913 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

3914 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3915 
	`yyîr‹
(
buf
);

3916 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

3917 
buf
[256];

3918 *
íd
 = 
	`EndOf
(
buf
);

3919 *
p
;

3921 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo < doÇot have compatibleÅypes : ");

3922 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3923 
	`yyîr‹
(
buf
);

3926 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_LT
, 
TYPE_NUMBER
, (
yyv•
[-2].node), (yyvsp[0].node));

3935 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_LSH
, "<<");

3944 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_RSH
, ">>");

3953 
ªsu…_ty≥
;

3955 i‡(
exa˘_ty≥s
) {

3956 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3958 i‡(
t1
 =
t3
){

3959 #ifde‡
CAST_CALL_OTHERS


3960 i‡(
t1
 =
TYPE_UNKNOWN
){

3961 
	`yyîr‹
("BadárgumentsÅo '+' (unknown vs unknown)");

3962 
ªsu…_ty≥
 = 
TYPE_ANY
;

3965 
ªsu…_ty≥
 = 
t1
;

3967 i‡(
t1
 =
TYPE_ANY
) {

3968 i‡(
t3
 =
TYPE_FUNCTION
) {

3969 
	`yyîr‹
("BadÑightárgumentÅo '+' (function)");

3970 
ªsu…_ty≥
 = 
TYPE_ANY
;

3971 } 
ªsu…_ty≥
 = 
t3
;

3972 } i‡(
t3
 =
TYPE_ANY
) {

3973 i‡(
t1
 =
TYPE_FUNCTION
) {

3974 
	`yyîr‹
("BadÜeftárgumentÅo '+' (function)");

3975 
ªsu…_ty≥
 = 
TYPE_ANY
;

3976 } 
ªsu…_ty≥
 = 
t1
;

3978 
t1
) {

3979 
TYPE_STRING
:

3981 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_NUMBER
){

3982 
ªsu…_ty≥
 = 
TYPE_STRING
;

3983 } 
add_îr‹
;

3986 
TYPE_NUMBER
:

3988 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_STRING
)

3989 
ªsu…_ty≥
 = 
t3
;

3990 
add_îr‹
;

3993 
TYPE_REAL
:

3995 i‡(
t3
 =
TYPE_NUMBER
Ë
ªsu…_ty≥
 = 
TYPE_REAL
;

3996 i‡(
t3
 =
TYPE_STRING
Ë
ªsu…_ty≥
 = TYPE_STRING;

3997 
add_îr‹
;

4002 i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
) {

4003 
ªsu…_ty≥
 = 
TYPE_ANY
|
TYPE_MOD_ARRAY
;

4006 
add_îr‹
:

4008 
buf
[256];

4009 *
íd
 = 
	`EndOf
(
buf
);

4010 *
p
;

4012 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidárgumentÅypesÅo '+' ");

4013 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4014 
	`yyîr‹
(
buf
);

4015 
ªsu…_ty≥
 = 
TYPE_ANY
;

4021 
ªsu…_ty≥
 = 
TYPE_ANY
;

4032 (
yyv•
[-2].
node
)->
köd
) {

4033 
NODE_NUMBER
:

4035 i‡((
yyv•
[-2].
node
)->
v
.
numbî
 == 0 &&

4036 ((
yyv•
[0].
node
)->
ty≥
 =
TYPE_NUMBER
 || (yyv•[0].node)->ty≥ =
TYPE_REAL
)) {

4037 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4040 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4041 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4042 (
yyv•
[-2].
node
)->
v
.
numbî
 += (yyvsp[0].node)->v.number;

4045 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4046 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4047 (
yyv•
[0].
node
)->
v
.
ªÆ
 +(yyv•[-2].node)->v.
numbî
;

4051 i‡((
yyv•
[0].
node
)->
ty≥
 !
TYPE_STRING
 && (yyv•[0].node)->ty≥ !
TYPE_ANY
)

4052 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4054 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4056 
NODE_REAL
:

4057 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4058 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4059 (
yyv•
[-2].
node
)->
v
.
ªÆ
 +(yyv•[0].node)->v.
numbî
;

4062 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4063 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4064 (
yyv•
[-2].
node
)->
v
.
ªÆ
 += (yyvsp[0].node)->v.real;

4068 i‡((
yyv•
[0].
node
)->
ty≥
 !
TYPE_STRING
 && (yyv•[0].node)->ty≥ !
TYPE_ANY
)

4069 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4071 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4073 
NODE_STRING
:

4074 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_STRING
) {

4076 
n1
, 
n2
;

4077 *
√w
, *
s1
, *
s2
;

4078 
l
;

4080 
n1
 = (
yyv•
[-2].
node
)->
v
.
numbî
;

4081 
n2
 = (
yyv•
[0].
node
)->
v
.
numbî
;

4082 
s1
 = 
	`PROG_STRING
(
n1
);

4083 
s2
 = 
	`PROG_STRING
(
n2
);

4084 
√w
 = (*)
	`DXALLOC
–(
l
 = 
	`°æí
(
s1
))+°æí(
s2
)+1, 
TAG_COMPILER
, "combine string" );

4085 
	`°r˝y
(
√w
, 
s1
);

4086 
	`°rˇt
(
√w
 + 
l
, 
s2
);

4088 i‡(
n1
 > 
n2
) {

4089 
	`‰ì_¥og_°rög
(
n1
); fªe_¥og_°rög(
n2
);

4091 
	`‰ì_¥og_°rög
(
n2
); fªe_¥og_°rög(
n1
);

4093 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4094 (
yyvÆ
.
node
)->
v
.
numbî
 = 
	`°‹e_¥og_°rög
(
√w
);

4095 
	`FREE
(
√w
);

4106 i‡(
	`IS_NODE
((
yyv•
[0].
node
), 
NODE_NUMBER
, 0) &&

4107 ((
yyv•
[-2].
node
)->
ty≥
 =
TYPE_NUMBER
 || (yyv•[-2].node)->ty≥ =
TYPE_REAL
)) {

4108 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4111 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4122 
ªsu…_ty≥
;

4124 i‡(
exa˘_ty≥s
) {

4125 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

4127 i‡(
t1
 =
t3
){

4128 
t1
){

4129 
TYPE_ANY
:

4130 
TYPE_NUMBER
:

4131 
TYPE_REAL
:

4132 
ªsu…_ty≥
 = 
t1
;

4135 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

4136 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

4137 
ªsu…_ty≥
 = 
TYPE_ANY
;

4138 } 
ªsu…_ty≥
 = 
t1
;

4140 } i‡(
t1
 =
TYPE_ANY
){

4141 
t3
){

4142 
TYPE_REAL
:

4143 
TYPE_NUMBER
:

4144 
ªsu…_ty≥
 = 
t3
;

4147 i‡(!(
t3
 & 
TYPE_MOD_ARRAY
)){

4148 
	`ty≥_îr‹
("Badárgumíànumbî 2Åÿ'-'", 
t3
);

4149 
ªsu…_ty≥
 = 
TYPE_ANY
;

4150 } 
ªsu…_ty≥
 = 
t3
;

4152 } i‡(
t3
 =
TYPE_ANY
){

4153 
t1
){

4154 
TYPE_REAL
:

4155 
TYPE_NUMBER
:

4156 
ªsu…_ty≥
 = 
t1
;

4159 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

4160 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

4161 
ªsu…_ty≥
 = 
TYPE_ANY
;

4162 } 
ªsu…_ty≥
 = 
t1
;

4164 } i‡((
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
) ||

4165 (
t3
 =
TYPE_REAL
 && 
t1
 =
TYPE_NUMBER
)){

4166 
ªsu…_ty≥
 = 
TYPE_REAL
;

4167 } i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
){

4168 
ªsu…_ty≥
 = 
TYPE_MOD_ARRAY
|
TYPE_ANY
;

4170 
buf
[256];

4171 *
íd
 = 
	`EndOf
(
buf
);

4172 *
p
;

4174 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '-' ");

4175 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4176 
	`yyîr‹
(
buf
);

4177 
ªsu…_ty≥
 = 
TYPE_ANY
;

4179 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4181 (
yyv•
[-2].
node
)->
köd
) {

4182 
NODE_NUMBER
:

4183 i‡((
yyv•
[-2].
node
)->
v
.
numbî
 == 0) {

4184 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NEGATE
, (
yyv•
[0].node)->
ty≥
, (yyvsp[0].node));

4185 } i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4186 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4187 (
yyv•
[-2].
node
)->
v
.
numbî
 -= (yyvsp[0].node)->v.number;

4188 } i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4189 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4190 (
yyv•
[0].
node
)->
v
.
ªÆ
 = (yyv•[-2].node)->v.
numbî
 - (yyvsp[0].node)->v.real;

4192 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4195 
NODE_REAL
:

4196 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4197 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4198 (
yyv•
[-2].
node
)->
v
.
ªÆ
 -(yyv•[0].node)->v.
numbî
;

4199 } i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4200 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4201 (
yyv•
[-2].
node
)->
v
.
ªÆ
 -= (yyvsp[0].node)->v.real;

4203 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4208 i‡(
	`IS_NODE
((
yyv•
[0].
node
), 
NODE_NUMBER
, 0)) {

4209 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4211 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4221 
ªsu…_ty≥
;

4223 i‡(
exa˘_ty≥s
){

4224 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

4226 i‡(
t1
 =
t3
){

4227 
t1
){

4228 
TYPE_MAPPING
:

4229 
TYPE_ANY
:

4230 
TYPE_NUMBER
:

4231 
TYPE_REAL
:

4232 
ªsu…_ty≥
 = 
t1
;

4235 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'*'", 
t1
);

4236 
ªsu…_ty≥
 = 
TYPE_ANY
;

4238 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

4239 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

4240 
t
){

4241 
TYPE_NUMBER
:

4242 
TYPE_REAL
:

4243 
TYPE_MAPPING
:

4244 
ªsu…_ty≥
 = 
t
;

4247 
	`ty≥_îr‹
((
t1
 =
TYPE_ANY
) ?

4250 
t
);

4251 
ªsu…_ty≥
 = 
TYPE_ANY
;

4253 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

4254 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)){

4255 
ªsu…_ty≥
 = 
TYPE_REAL
;

4257 
buf
[256];

4258 *
íd
 = 
	`EndOf
(
buf
);

4259 *
p
;

4261 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '*' ");

4262 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4263 
	`yyîr‹
(
buf
);

4264 
ªsu…_ty≥
 = 
TYPE_ANY
;

4266 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4268 (
yyv•
[-2].
node
)->
köd
) {

4269 
NODE_NUMBER
:

4270 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4271 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4272 (
yyvÆ
.
node
)->
v
.
numbî
 *(
yyv•
[0].node)->v.number;

4275 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4276 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4277 (
yyv•
[0].
node
)->
v
.
ªÆ
 *(yyv•[-2].node)->v.
numbî
;

4280 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4282 
NODE_REAL
:

4283 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4284 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4285 (
yyv•
[-2].
node
)->
v
.
ªÆ
 *(yyv•[0].node)->v.
numbî
;

4288 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4289 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4290 (
yyv•
[-2].
node
)->
v
.
ªÆ
 *= (yyvsp[0].node)->v.real;

4293 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4296 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4306 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_MOD
, "%");

4315 
ªsu…_ty≥
;

4317 i‡(
exa˘_ty≥s
){

4318 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

4320 i‡(
t1
 =
t3
){

4321 
t1
){

4322 
TYPE_NUMBER
:

4323 
TYPE_REAL
:

4324 
TYPE_ANY
:

4325 
ªsu…_ty≥
 = 
t1
;

4328 
	`ty≥_îr‹
("Badárgumíà1Åÿ'/'", 
t1
);

4329 
ªsu…_ty≥
 = 
TYPE_ANY
;

4331 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

4332 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

4333 i‡(
t
 =
TYPE_REAL
 ||Å =
TYPE_NUMBER
)

4334 
ªsu…_ty≥
 = 
t
;

4336 
	`ty≥_îr‹
(
t1
 =
TYPE_ANY
 ?

4338 "Badárgumíà1Åÿ'/'", 
t
);

4339 
ªsu…_ty≥
 = 
TYPE_ANY
;

4341 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

4342 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)) {

4343 
ªsu…_ty≥
 = 
TYPE_REAL
;

4345 
buf
[256];

4346 *
íd
 = 
	`EndOf
(
buf
);

4347 *
p
;

4349 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '/' ");

4350 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4351 
	`yyîr‹
(
buf
);

4352 
ªsu…_ty≥
 = 
TYPE_ANY
;

4354 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4357 (
yyv•
[-2].
node
)->
köd
) {

4358 
NODE_NUMBER
:

4359 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4360 i‡((
yyv•
[0].
node
)->
v
.
numbî
 == 0) {

4361 
	`yyîr‹
("Divide by zero in constant");

4362 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4365 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4366 (
yyv•
[-2].
node
)->
v
.
numbî
 /= (yyvsp[0].node)->v.number;

4369 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4370 i‡((
yyv•
[0].
node
)->
v
.
ªÆ
 == 0.0) {

4371 
	`yyîr‹
("Divide by zero in constant");

4372 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4375 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4376 (
yyv•
[0].
node
)->
v
.
ªÆ
 = ((yyv•[-2].node)->v.
numbî
 / (yyvsp[0].node)->v.real);

4379 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4381 
NODE_REAL
:

4382 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4383 i‡((
yyv•
[0].
node
)->
v
.
numbî
 == 0) {

4384 
	`yyîr‹
("Divide by zero in constant");

4385 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4388 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4389 (
yyv•
[-2].
node
)->
v
.
ªÆ
 /(yyv•[0].node)->v.
numbî
;

4392 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4393 i‡((
yyv•
[0].
node
)->
v
.
ªÆ
 == 0.0) {

4394 
	`yyîr‹
("Divide by zero in constant");

4395 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4398 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4399 (
yyv•
[-2].
node
)->
v
.
ªÆ
 /= (yyvsp[0].node)->v.real;

4402 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4405 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4415 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4416 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-1].type);

4418 i‡(
exa˘_ty≥s
 &&

4419 (
yyv•
[0].
node
)->
ty≥
 != (yyvsp[-1].type) &&

4420 (
yyv•
[0].
node
)->
ty≥
 !
TYPE_ANY
 &&

4421 (
yyv•
[0].
node
)->
ty≥
 !
TYPE_UNKNOWN
 &&

4422 (
yyv•
[-1].
ty≥
Ë!
TYPE_VOID
) {

4423 
buf
[256];

4424 *
íd
 = 
	`EndOf
(
buf
);

4425 *
p
;

4427 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Cannot cast ");

4428 
p
 = 
	`gë_ty≥_«me
’, 
íd
, (
yyv•
[0].
node
)->
ty≥
);

4429 
p
 = 
	`°Ωut
’, 
íd
, "to ");

4430 
p
 = 
	`gë_ty≥_«me
’, 
íd
, (
yyv•
[-1].
ty≥
));

4431 
	`yyîr‹
(
buf
);

4441 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_PRE_INC
, 0, (
yyv•
[0].node));

4442 i‡(
exa˘_ty≥s
){

4443 (
yyv•
[0].
node
)->
ty≥
){

4444 
TYPE_NUMBER
:

4445 
TYPE_ANY
:

4446 
TYPE_REAL
:

4448 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[0].node)->type;

4454 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4455 
	`ty≥_îr‹
("Badárgumíà1Åÿ++x", (
yyv•
[0].
node
)->
ty≥
);

4458 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4467 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_PRE_DEC
, 0, (
yyv•
[0].node));

4468 i‡(
exa˘_ty≥s
){

4469 (
yyv•
[0].
node
)->
ty≥
){

4470 
TYPE_NUMBER
:

4471 
TYPE_ANY
:

4472 
TYPE_REAL
:

4474 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[0].node)->type;

4480 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4481 
	`ty≥_îr‹
("Badárgumíà1Åÿ--x", (
yyv•
[0].
node
)->
ty≥
);

4484 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4494 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4495 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4496 (
yyvÆ
.
node
)->
v
.
numbî
 = !((yyval.node)->v.number);

4498 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[0].node));

4508 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
((
yyv•
[0].
node
)->
ty≥
, 
TYPE_NUMBER
))

4509 
	`ty≥_îr‹
("Badárgumíàtÿ~", (
yyv•
[0].
node
)->
ty≥
);

4510 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4511 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4512 (
yyvÆ
.
node
)->
v
.
numbî
 = ~(yyval.node)->v.number;

4514 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_COMPL
, 
TYPE_NUMBER
, (
yyv•
[0].node));

4524 
ªsu…_ty≥
;

4525 i‡(
exa˘_ty≥s
){

4526 
t
 = (
yyv•
[0].
node
)->
ty≥
;

4527 i‡(!
	`COMP_TYPE
(
t
, 
TYPE_NUMBER
)){

4528 
	`ty≥_îr‹
("Badárgumíàtÿu«ry '-'", 
t
);

4529 
ªsu…_ty≥
 = 
TYPE_ANY
;

4530 } 
ªsu…_ty≥
 = 
t
;

4531 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4533 (
yyv•
[0].
node
)->
köd
) {

4534 
NODE_NUMBER
:

4535 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4536 (
yyvÆ
.
node
)->
v
.
numbî
 = -(yyval.node)->v.number;

4538 
NODE_REAL
:

4539 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4540 (
yyvÆ
.
node
)->
v
.
ªÆ
 = -(yyval.node)->v.real;

4543 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NEGATE
, 
ªsu…_ty≥
, (
yyv•
[0].node));

4553 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_POST_INC
, 0, (
yyv•
[-1].node));

4554 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_POST_INC
;

4555 i‡(
exa˘_ty≥s
){

4556 (
yyv•
[-1].
node
)->
ty≥
){

4557 
TYPE_NUMBER
:

4558 
TYPE_ANY
:

4559 
TYPE_REAL
:

4561 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-1].node)->type;

4567 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4568 
	`ty≥_îr‹
("Badárgumíà1Åÿx++", (
yyv•
[-1].
node
)->
ty≥
);

4571 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4580 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_POST_DEC
, 0, (
yyv•
[-1].node));

4581 i‡(
exa˘_ty≥s
){

4582 (
yyv•
[-1].
node
)->
ty≥
){

4583 
TYPE_NUMBER
:

4584 
TYPE_ANY
:

4585 
TYPE_REAL
:

4587 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-1].node)->type;

4593 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4594 
	`ty≥_îr‹
("Badárgumíà1Åÿx--", (
yyv•
[-1].
node
)->
ty≥
);

4597 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4606 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
”xa˘_ty≥s, 
TYPE_VOID
))

4607 
	`yyw¨n
("Non-void functions mustÑeturná value.");

4608 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4617 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
((
yyv•
[-1].
node
)->
ty≥
,Éxact_types)) {

4618 
buf
[256];

4619 *
íd
 = 
	`EndOf
(
buf
);

4620 *
p
;

4622 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Type ofÑeturned value doesn't match functionÑeturnÅype ");

4623 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[-1].
node
)->
ty≥
, 
exa˘_ty≥s
);

4624 
	`yyîr‹
(
buf
);

4626 i‡(
	`IS_NODE
((
yyv•
[-1].
node
), 
NODE_NUMBER
, 0)) {

4627 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4629 
	`CREATE_RETURN
((
yyvÆ
.
node
), (
yyv•
[-1].node));

4639 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), 0);

4648 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[0].node));

4657 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[-1].node));

4666 
	`CREATE_EXPR_NODE
((
yyvÆ
.
node
), (
yyv•
[0].node), 0);

4675 
	`CREATE_EXPR_NODE
((
yyvÆ
.
node
), (
yyv•
[-1].node), 1);

4684 (
yyv•
[0].
node
)->
köd
 = 1;

4686 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4695 (
yyv•
[0].
node
)->
köd
 = 0;

4697 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4698 (
yyvÆ
.
node
)->
köd
++;

4699 (
yyvÆ
.
node
)->
l
.
ex¥
->
r
.ex¥ = (
yyv•
[0].node);

4700 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
yyv•
[0].node);

4710 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), 0);

4719 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[0].node));

4728 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[-1].node));

4737 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

4738 (
yyvÆ
.
node
)->
köd
 = 2;

4739 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[0].node);

4740 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

4741 (
yyvÆ
.
node
)->
ty≥
 = 0;

4743 (
yyvÆ
.
node
)->
l
.
ex¥
 = (yyval.node);

4752 
∑r£_node_t
 *
ex¥
;

4754 
ex¥
 = 
	`√w_node_no_löe
();

4755 
ex¥
->
köd
 = 0;

4756 
ex¥
->
v
.ex¥ = (
yyv•
[0].
node
);

4757 
ex¥
->
r
.expr = 0;

4758 
ex¥
->
ty≥
 = 0;

4760 (
yyv•
[-2].
node
)->
l
.
ex¥
->
r
.expr =Éxpr;

4761 (
yyv•
[-2].
node
)->
l
.
ex¥
 =Éxpr;

4762 (
yyv•
[-2].
node
)->
köd
 += 2;

4763 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4772 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 0, (
yyv•
[-2].node), (yyvsp[0].node));

4781 
	#LV_ILLEGAL
 1

	)

4782 
	#LV_RANGE
 2

	)

4783 
	#LV_INDEX
 4

	)

4785 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4786 (
yyvÆ
.
node
)->
köd
) {

4788 
	`yyîr‹
("IllegalÜvalue");

4790 
NODE_PARAMETER
:

4791 (
yyvÆ
.
node
)->
köd
 = 
NODE_PARAMETER_LVALUE
;

4793 
NODE_TERNARY_OP
:

4794 (
yyvÆ
.
node
)->
v
.
numbî
 = (yyvÆ.node)->
r
.
ex¥
->v.number;

4795 
NODE_OPCODE_1
:

4796 
NODE_UNARY_OP_1
:

4797 
NODE_BINARY_OP
:

4798 i‡((
yyvÆ
.
node
)->
v
.
numbî
 >
F_LOCAL
 && (yyvÆ.node)->v.numbî <
F_MEMBER
)

4799 (
yyvÆ
.
node
)->
v
.
numbî
++;

4800 i‡((
yyvÆ
.
node
)->
v
.
numbî
 >
F_INDEX


4801 && (
yyvÆ
.
node
)->
v
.
numbî
 <
F_RE_RANGE
) {

4802 
∑r£_node_t
 *
node
 = (
yyvÆ
.node);

4803 
Êag
 = 0;

4805 
node
->
köd
) {

4806 
NODE_PARAMETER
:

4807 
node
->
köd
 = 
NODE_PARAMETER_LVALUE
;

4808 
Êag
 |
LV_ILLEGAL
;

4810 
NODE_TERNARY_OP
:

4811 
node
->
v
.
numbî
 =Çode->
r
.
ex¥
->v.number;

4812 
NODE_OPCODE_1
:

4813 
NODE_UNARY_OP_1
:

4814 
NODE_BINARY_OP
:

4815 i‡(
node
->
v
.
numbî
 >
F_LOCAL


4816 && 
node
->
v
.
numbî
 <
F_MEMBER
) {

4817 
node
->
v
.
numbî
++;

4818 
Êag
 |
LV_ILLEGAL
;

4820 } i‡(
node
->
v
.
numbî
 =
F_INDEX
 ||

4821 
node
->
v
.
numbî
 =
F_RINDEX
) {

4822 
node
->
v
.
numbî
++;

4823 
Êag
 |
LV_INDEX
;

4825 } i‡(
node
->
v
.
numbî
 >
F_ADD_EQ


4826 && 
node
->
v
.
numbî
 <
F_ASSIGN
) {

4827 i‡(!(
Êag
 & 
LV_INDEX
)) {

4828 
	`yyîr‹
("IllegalÜvalue,áÖossibleÜvalue is (x <assign> y)[a]");

4830 i‡(
node
->
r
.
ex¥
->
köd
 =
NODE_BINARY_OP
||

4831 
node
->
r
.
ex¥
->
köd
 =
NODE_TERNARY_OP
){

4832 i‡(
node
->
r
.
ex¥
->
v
.
numbî
 >
F_NN_RANGE_LVALUE
 &&Çode->r.ex¥->v.numbî <
F_NR_RANGE_LVALUE
)

4833 
	`yyîr‹
("IllegalÅo have (x[a..b] <assign> y)Åo beÅhe beginning ofánÜvalue");

4835 
Êag
 = 
LV_ILLEGAL
;

4837 } i‡(
node
->
v
.
numbî
 >
F_NN_RANGE


4838 && 
node
->
v
.
numbî
 <
F_RE_RANGE
) {

4839 i‡(
Êag
 & 
LV_RANGE
) {

4840 
	`yyîr‹
("Can't doÑangeÜvalue ofÑangeÜvalue.");

4841 
Êag
 |
LV_ILLEGAL
;

4844 i‡(
Êag
 & 
LV_INDEX
){

4845 
	`yyîr‹
("Can't do indexedÜvalue ofÑangeÜvalue.");

4846 
Êag
 |
LV_ILLEGAL
;

4849 i‡(
node
->
v
.
numbî
 =
F_NE_RANGE
) {

4851 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

4852 
node
->
köd
 = 
NODE_TERNARY_OP
;

4853 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

4854 
F_NR_RANGE_LVALUE
,

4855 0, 0, 
rchûd
);

4856 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

4857 } i‡(
node
->
v
.
numbî
 =
F_RE_RANGE
) {

4859 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

4860 
node
->
köd
 = 
NODE_TERNARY_OP
;

4861 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

4862 
F_RR_RANGE_LVALUE
,

4863 0, 0, 
rchûd
);

4864 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

4866 
node
->
r
.
ex¥
->
v
.
numbî
++;

4867 
Êag
 |
LV_RANGE
;

4868 
node
 =Çode->
r
.
ex¥
->r.expr;

4872 
	`yyîr‹
("IllegalÜvalue");

4873 
Êag
 = 
LV_ILLEGAL
;

4876 i‡((
Êag
 & 
LV_ILLEGAL
Ë|| !(
node
 =Çode->
r
.
ex¥
)) ;

4880 
	`yyîr‹
("IllegalÜvalue");

4891 (
yyvÆ
.
numbî
Ë((
yyv•
[0].numbîË<< 8Ë| 
FP_EFUN
;

4900 
i
;

4901 i‡((
i
 = (
yyv•
[0].
ihe
)->
dn
.
loˇl_num
) != -1) {

4902 
ty≥_of_loˇls_±r
[
i
] &~
LOCAL_MOD_UNUSED
;

4903 i‡(
ty≥_of_loˇls_±r
[
i
] & 
LOCAL_MOD_REF
)

4904 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_REF
, 
ty≥_of_loˇls_±r
[
i
] & ~
LOCAL_MOD_REF
,i & 0xff);

4906 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, 
ty≥_of_loˇls_±r
[
i
], i & 0xff);

4907 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4908 
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
++;

4910 i‡((
i
 = (
yyv•
[0].
ihe
)->
dn
.
globÆ_num
) != -1) {

4911 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4912 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

4913 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_GLOBAL
,

4914 
	`VAR_TEMP
(
i
)->
ty≥
 & ~
DECL_MODS
, i);

4915 i‡(
	`VAR_TEMP
(
i
)->
ty≥
 & 
DECL_HIDDEN
) {

4916 
buf
[256];

4917 *
íd
 = 
	`EndOf
(
buf
);

4918 *
p
;

4920 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

4921 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

4922 
p
 = 
	`°Ωut
’, 
íd
, "'");

4923 
	`yyîr‹
(
buf
);

4926 
buf
[256];

4927 *
íd
 = 
	`EndOf
(
buf
);

4928 *
p
;

4930 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

4931 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

4932 
p
 = 
	`°Ωut
’, 
íd
, "'");

4933 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

4934 
	`add_loˇl_«me
((
yyv•
[0].
ihe
)->
«me
, 
TYPE_ANY
);

4936 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4937 
	`yyîr‹
(
buf
);

4947 
buf
[256];

4948 *
íd
 = 
	`EndOf
(
buf
);

4949 *
p
;

4951 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

4952 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

4953 
p
 = 
	`°Ωut
’, 
íd
, "'");

4954 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

4955 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
TYPE_ANY
);

4957 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4958 
	`yyîr‹
(
buf
);

4959 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

4968 
	`CREATE_PARAMETER
((
yyvÆ
.
node
), 
TYPE_ANY
, (
yyv•
[0].
numbî
));

4977 (
yyvÆ
.
c⁄ãxç
Ë
cuºít_fun˘i⁄_c⁄ãxt
;

4979 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4980 
cuºít_fun˘i⁄_c⁄ãxt
 = cuºít_fun˘i⁄_c⁄ãxt->
∑ª¡
;

4989 
∑r£_node_t
 *
node
;

4991 
cuºít_fun˘i⁄_c⁄ãxt
 = (
yyv•
[-2].
c⁄ãxç
);

4993 i‡(!
cuºít_fun˘i⁄_c⁄ãxt
 || cuºít_fun˘i⁄_c⁄ãxt->
num_∑ømëîs
 == -2) {

4997 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4999 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, (
yyv•
[-1].node)->
ty≥
,

5000 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
köd
++);

5002 
node
 = 
	`√w_node_no_löe
();

5003 
node
->
ty≥
 = 0;

5004 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
->
r
.ex¥ = 
node
;

5005 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
 = 
node
;

5006 
node
->
r
.
ex¥
 = 0;

5007 
node
->
v
.
ex¥
 = (
yyv•
[-1].node);

5017 i‡((
yyv•
[-2].
node
)->
ty≥
 =
TYPE_ANY
) {

5018 
cmi
;

5019 
ç
;

5021 i‡((
cmi
 = 
	`lookup_™y_˛ass_membî
((
yyv•
[0].
°rög
), &
ç
)) != -1) {

5022 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MEMBER
, 
ç
, (
yyv•
[-2].node), 0);

5023 (
yyvÆ
.
node
)->
l
.
numbî
 = 
cmi
;

5025 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5027 } i‡(!
	`IS_CLASS
((
yyv•
[-2].
node
)->
ty≥
)) {

5028 
	`yyîr‹
("Leftárgument of -> isÇotá class");

5029 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5031 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MEMBER
, 0, (
yyv•
[-2].node), 0);

5032 (
yyvÆ
.
node
)->
l
.
numbî
 = 
	`lookup_˛ass_membî
(
	`CLASS_IDX
((
yyv•
[-2].node)->
ty≥
),

5033 (
yyv•
[0].
°rög
),

5034 &((
yyvÆ
.
node
)->
ty≥
));

5037 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

5046 i‡((
yyv•
[-5].
node
)->
ty≥
 !
TYPE_MAPPING
 &&

5047 (
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 < 0)

5048 
	`yyw¨n
("AÇegative constantásÅhe secondÉlement ofárr[x..y]ÇoÜonger means indexing fromÅheÉnd. Useárr[x..<y]");

5049 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NN_RANGE
, (
yyv•
[-5].node), (yyvsp[-3].node), (yyvsp[-1].node));

5058 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RN_RANGE
, (
yyv•
[-6].node), (yyvsp[-3].node), (yyvsp[-1].node));

5067 i‡((
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 <= 1)

5068 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RE_RANGE
, (
yyv•
[-7].node), (yyvsp[-4].node), 0);

5070 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RR_RANGE
, (
yyv•
[-7].node), (yyvsp[-4].node), (yyvsp[-1].node));

5079 i‡((
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 <= 1)

5080 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NE_RANGE
, (
yyv•
[-6].node), (yyvsp[-4].node), 0);

5082 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NR_RANGE
, (
yyv•
[-6].node), (yyvsp[-4].node), (yyvsp[-1].node));

5091 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NE_RANGE
, (
yyv•
[-4].node), (yyvsp[-2].node), 0);

5100 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RE_RANGE
, (
yyv•
[-5].node), (yyvsp[-2].node), 0);

5109 i‡(
	`IS_NODE
((
yyv•
[-4].
node
), 
NODE_CALL
, 
F_AGGREGATE
)

5110 && (
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
) {

5111 
i
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5112 i‡(
i
 < 1 || i > (
yyv•
[-4].
node
)->
l
.
numbî
)

5113 
	`yyîr‹
("Illegal indexÅoárray constant.");

5115 
∑r£_node_t
 *
node
 = (
yyv•
[-4].node)->
r
.
ex¥
;

5116 
i
 = (
yyv•
[-4].
node
)->
l
.
numbî
 - i;

5117 
i
--)

5118 
node
 =Çode->
r
.
ex¥
;

5119 (
yyvÆ
.
node
Ënode->
v
.
ex¥
;

5123 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_RINDEX
, 0, (
yyv•
[-1].node), (yyvsp[-4].node));

5124 i‡(
exa˘_ty≥s
) {

5125 (
yyv•
[-4].
node
)->
ty≥
) {

5126 
TYPE_MAPPING
:

5127 
	`yyîr‹
("Illegal index for mapping.");

5128 
TYPE_ANY
:

5129 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5131 
TYPE_STRING
:

5132 
TYPE_BUFFER
:

5133 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_NUMBER
;

5134 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5135 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5139 i‡((
yyv•
[-4].
node
)->
ty≥
 & 
TYPE_MOD_ARRAY
) {

5140 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-4].node)->ty≥ & ~
TYPE_MOD_ARRAY
;

5141 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5142 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5144 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", (
yyv•
[-4].
node
)->
ty≥
);

5145 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5148 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5167 i‡(
	`IS_NODE
((
yyv•
[-3].
node
), 
NODE_CALL
, 
F_AGGREGATE
Ë&& (yyv•[-1].node)->
köd
 =
NODE_NUMBER
) {

5168 
i
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5169 i‡(
i
 < 0 || i >(
yyv•
[-3].
node
)->
l
.
numbî
)

5170 
	`yyîr‹
("Illegal indexÅoárray constant.");

5172 
∑r£_node_t
 *
node
 = (
yyv•
[-3].node)->
r
.
ex¥
;

5173 
i
--)

5174 
node
 =Çode->
r
.
ex¥
;

5175 (
yyvÆ
.
node
Ënode->
v
.
ex¥
;

5179 i‡((
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 < 0)

5180 
	`yyw¨n
("AÇegative constant inárr[x]ÇoÜonger means indexing fromÅheÉnd. Useárr[<x]");

5181 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_INDEX
, 0, (
yyv•
[-1].node), (yyvsp[-3].node));

5182 i‡(
exa˘_ty≥s
) {

5183 (
yyv•
[-3].
node
)->
ty≥
) {

5184 
TYPE_MAPPING
:

5185 
TYPE_ANY
:

5186 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5188 
TYPE_STRING
:

5189 
TYPE_BUFFER
:

5190 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_NUMBER
;

5191 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5192 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5196 i‡((
yyv•
[-3].
node
)->
ty≥
 & 
TYPE_MOD_ARRAY
) {

5197 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-3].node)->ty≥ & ~
TYPE_MOD_ARRAY
;

5198 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5199 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5201 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", (
yyv•
[-3].
node
)->
ty≥
);

5202 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5205 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5214 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5223 i‡((
yyv•
[0].
ty≥
Ë!
TYPE_FUNCTION
Ë
	`yyîr‹
("ReservedÅypeÇame unexpected.");

5224 (
yyvÆ
.
func_block
).
num_loˇl
 = 
cuºít_numbî_of_loˇls
;

5225 (
yyvÆ
.
func_block
).
max_num_loˇls
 = max_num_locals;

5226 (
yyvÆ
.
func_block
).
c⁄ãxt
 = context;

5227 (
yyvÆ
.
func_block
).
ßve_cuºít_ty≥
 = 
cuºít_ty≥
;

5228 (
yyvÆ
.
func_block
).
ßve_exa˘_ty≥s
 = 
exa˘_ty≥s
;

5229 i‡(
ty≥_of_loˇls_±r
 + 
max_num_loˇls
 + 
CFG_MAX_LOCAL_VARIABLES
 >&
ty≥_of_loˇls
[
ty≥_of_loˇls_size
])

5230 
	`ªÆloˇã_loˇls
();

5231 
	`dó˘iv©e_cuºít_loˇls
();

5232 
loˇls_±r
 +
cuºít_numbî_of_loˇls
;

5233 
ty≥_of_loˇls_±r
 +
max_num_loˇls
;

5234 
max_num_loˇls
 = 
cuºít_numbî_of_loˇls
 = 0;

5235 
	`push_fun˘i⁄_c⁄ãxt
();

5236 
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 = -1;

5237 
exa˘_ty≥s
 = 
TYPE_ANY
;

5238 
c⁄ãxt
 = 0;

5247 i‡((
yyv•
[-2].
¨gumít
).
Êags
 & 
ARG_IS_VARARGS
) {

5248 
	`yyîr‹
("Anonymous varargs functionsáren't implemented");

5250 i‡(!(
yyv•
[0].
de˛
).
node
) {

5251 
	`CREATE_RETURN
((
yyv•
[0].
de˛
).
node
, 0);

5252 } i‡((
yyv•
[0].
de˛
).
node
->
köd
 !
NODE_RETURN
 &&

5253 ((
yyv•
[0].
de˛
).
node
->
köd
 !
NODE_TWO_VALUES
 || (yyv•[0].de˛).node->
r
.
ex¥
->köd !
NODE_RETURN
)) {

5254 
∑r£_node_t
 *
ª∂a˚mít
;

5255 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyv•
[0].
de˛
).
node
, 0);

5256 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

5257 (
yyv•
[0].
de˛
).
node
 = 
ª∂a˚mít
;

5260 (
yyvÆ
.
node
Ë
	`√w_node
();

5261 (
yyvÆ
.
node
)->
köd
 = 
NODE_ANON_FUNC
;

5262 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5263 (
yyvÆ
.
node
)->
l
.
numbî
 = (
max_num_loˇls
 - (
yyv•
[-2].
¨gumít
).
num_¨g
);

5264 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[0].
de˛
).node;

5265 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[-2].
¨gumít
).
num_¨g
;

5266 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
)

5267 (
yyvÆ
.
node
)->
v
.
numbî
 |= 0x10000;

5268 
	`‰ì_Æl_loˇl_«mes
(1);

5270 
cuºít_numbî_of_loˇls
 = (
yyv•
[-4].
func_block
).
num_loˇl
;

5271 
max_num_loˇls
 = (
yyv•
[-4].
func_block
).max_num_locals;

5272 
c⁄ãxt
 = (
yyv•
[-4].
func_block
).context;

5273 
cuºít_ty≥
 = (
yyv•
[-4].
func_block
).
ßve_cuºít_ty≥
;

5274 
exa˘_ty≥s
 = (
yyv•
[-4].
func_block
).
ßve_exa˘_ty≥s
;

5275 
	`p›_fun˘i⁄_c⁄ãxt
();

5277 
loˇls_±r
 -
cuºít_numbî_of_loˇls
;

5278 
ty≥_of_loˇls_±r
 -
max_num_loˇls
;

5279 
	`ªa˘iv©e_cuºít_loˇls
();

5288 (
yyvÆ
.
node
Ë
	`√w_node
();

5289 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5290 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5291 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5292 (
yyv•
[-2].
numbî
) & 0xff) {

5293 
FP_L_VAR
:

5294 
	`yyîr‹
("IllegalÅo useÜocal variable iná functional.");

5295 
	`CREATE_NUMBER
((
yyvÆ
.
node
)->
l
.
ex¥
, 0);

5296 (
yyvÆ
.
node
)->
l
.
ex¥
->
r
.expr = 0;

5297 (
yyvÆ
.
node
)->
l
.
ex¥
->l.expr = 0;

5298 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
;

5300 
FP_G_VAR
:

5301 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_GLOBAL
, 0, (
yyv•
[-2].
numbî
) >> 8);

5302 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
;

5303 i‡(
	`VAR_TEMP
((
yyvÆ
.
node
)->
l
.
ex¥
->l.
numbî
)->
ty≥
 & 
DECL_HIDDEN
) {

5304 
buf
[256];

5305 *
íd
 = 
	`EndOf
(
buf
);

5306 *
p
;

5308 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

5309 
p
 = 
	`°Ωut
’, 
íd
, 
	`VAR_TEMP
((
yyvÆ
.
node
)->
l
.
ex¥
->l.
numbî
)->
«me
);

5310 
p
 = 
	`°Ωut
’, 
íd
, "'");

5311 
	`yyîr‹
(
buf
);

5315 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[-2].number);

5326 (
yyvÆ
.
node
Ë
	`√w_node
();

5327 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5328 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5329 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[-4].number);

5330 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[-2].node);

5332 (
yyv•
[-4].
numbî
) & 0xff) {

5333 
FP_EFUN
: {

5334 *
¨gp
;

5335 
f
 = (
yyv•
[-4].
numbî
) >>8;

5336 
num
 = (
yyv•
[-2].
node
)->
köd
;

5337 
max_¨g
 = 
¥edefs
[
f
].
max_¨gs
;

5339 i‡(
num
 > 
max_¨g
 && max_arg != -1) {

5340 
∑r£_node_t
 *
≤
 = (
yyv•
[-2].
node
);

5342 
≤
) {

5343 i‡(
≤
->
ty≥
 & 1) ;

5344 
≤
 =Ön->
r
.
ex¥
;

5347 i‡(!
≤
) {

5348 
bff
[256];

5349 *
íd
 = 
	`EndOf
(
bff
);

5350 *
p
;

5352 
p
 = 
	`°Ωut
(
bff
, 
íd
, "Too manyárgumentsÅo ");

5353 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

5354 
	`yyîr‹
(
bff
);

5356 } i‡(
max_¨g
 !-1 && 
exa˘_ty≥s
) {

5360 
i
, 
¨gn
, 
tmp
;

5361 
∑r£_node_t
 *
íode
 = (
yyv•
[-2].
node
);

5362 
¨gp
 = &
efun_¨g_ty≥s
[
¥edefs
[
f
].
¨g_ödex
];

5364 
¨gn
 = 0;árg¿< 
num
;árgn++) {

5365 i‡(
íode
->
ty≥
 & 1) ;

5367 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

5368 
i
=0; !
	`com∑tibÀ_ty≥s
(
tmp
, 
¨gp
[i])

5369 && 
¨gp
[
i
] != 0; i++)

5371 i‡(
¨gp
[
i
] == 0) {

5372 
buf
[256];

5373 *
íd
 = 
	`EndOf
(
buf
);

5374 *
p
;

5376 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badárgument ");

5377 
p
 = 
	`°Ωut_öt
’, 
íd
, 
¨gn
+1);

5378 
p
 = 
	`°Ωut
’, 
íd
, "ÅoÉfun ");

5379 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

5380 
p
 = 
	`°Ωut
’, 
íd
, "()");

5381 
	`yyîr‹
(
buf
);

5386 i‡(
tmp
 =
TYPE_NUMBER
 && 
¨gp
[
i
] =
TYPE_REAL
) {

5387 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_NUMBER
; i++)

5389 i‡(!
¨gp
[
i
])

5390 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_Êﬂt
(enode->v.expr);

5392 i‡(
tmp
 =
TYPE_REAL
 && 
¨gp
[
i
] =
TYPE_NUMBER
) {

5393 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_REAL
; i++)

5395 i‡(!
¨gp
[
i
])

5396 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_öt
(enode->v.expr);

5399 
¨gp
[
i
] != 0)

5400 
i
++;

5401 
¨gp
 +
i
 + 1;

5402 
íode
 =Énode->
r
.
ex¥
;

5407 
FP_L_VAR
:

5408 
FP_G_VAR
:

5409 
	`yyîr‹
("Can't giveÖarametersÅo functional.");

5420 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
)

5421 
	`yyîr‹
("IllegalÅo useÜocal variable in functional.");

5422 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
)

5423 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
->
köd
 = current_function_context->values_list->kind;

5425 (
yyvÆ
.
node
Ë
	`√w_node
();

5426 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5427 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5428 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
yyv•
[-2].node);

5429 i‡((
yyv•
[-2].
node
)->
köd
 =
NODE_STRING
)

5430 
	`yyw¨n
("FunctionÖointerÑeturning string constant is NOTá function call");

5431 (
yyvÆ
.
node
)->
r
.
ex¥
 = 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->r.expr;

5432 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
 + 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ


5433 + (
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 << 8);

5434 
	`p›_fun˘i⁄_c⁄ãxt
();

5443 
	`CREATE_CALL
((
yyvÆ
.
node
), 
F_AGGREGATE_ASSOC
, 
TYPE_MAPPING
, (
yyv•
[-2].node));

5452 
	`CREATE_CALL
((
yyvÆ
.
node
), 
F_AGGREGATE
, 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
, (
yyv•
[-2].node));

5461 (
yyvÆ
.
node
Ë(
yyv•
[0].
de˛
).node;

5470 (
yyvÆ
.
node
Ë
	`ö£π_p›_vÆue
((
yyv•
[-1].node));

5479 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5480 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

5489 
	`CREATE_CATCH
((
yyvÆ
.
node
), (
yyv•
[0].node));

5490 
c⁄ãxt
 = (
yyv•
[-1].
numbî
);

5499 
p
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5500 
	`CREATE_LVALUE_EFUN
((
yyvÆ
.
node
), 
TYPE_NUMBER
, (
yyv•
[-1].node));

5501 
	`CREATE_BINARY_OP_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_SSCANF
, 0, (
yyv•
[-4].node), (yyv•[-2].node), 
p
);

5510 
p
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5511 
	`CREATE_LVALUE_EFUN
((
yyvÆ
.
node
), 
TYPE_NUMBER
, (
yyv•
[-1].node));

5512 
	`CREATE_TERNARY_OP_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_PARSE_COMMAND
, 0,

5513 (
yyv•
[-6].
node
), (yyv•[-4].node), (yyv•[-2].node), 
p
);

5522 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5523 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

5532 
	`CREATE_TIME_EXPRESSION
((
yyvÆ
.
node
), (
yyv•
[0].node));

5533 
c⁄ãxt
 = (
yyv•
[-1].
numbî
);

5542 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

5543 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5544 (
yyvÆ
.
node
)->
v
.
numbî
 = 0;

5553 
∑r£_node_t
 *
ö£π
;

5555 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

5556 
ö£π
 = 
	`√w_node_no_löe
();

5557 
ö£π
->
r
.
ex¥
 = (
yyv•
[0].
node
)->r.expr;

5558 
ö£π
->
l
.
ex¥
 = (
yyv•
[-1].
node
);

5559 (
yyv•
[0].
node
)->
r
.
ex¥
 = 
ö£π
;

5560 (
yyvÆ
.
node
)->
v
.
numbî
++;

5569 
	`CREATE_STRING
((
yyvÆ
.
node
), (
yyv•
[0].
°rög
));

5570 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

5579 (
yyvÆ
.
°rög
Ë(
yyv•
[-1].string);

5588 (
yyvÆ
.
°rög
Ë
	`s¸©ch_joö
((
yyv•
[-2].string), (yyvsp[0].string));

5597 (
yyvÆ
.
°rög
Ë
	`s¸©ch_joö
((
yyv•
[-1].string), (yyvsp[0].string));

5606 (
yyvÆ
.
node
Ë
	`√w_node
();

5607 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
∑r£_node_t
 *)(
yyv•
[-2].
°rög
);

5608 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[0].node);

5609 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5618 (
yyvÆ
.
node
) = 0;

5627 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

5628 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[-2].node);

5637 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5638 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5639 
c⁄ãxt
 |
ARG_LIST
;

5648 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5649 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
((
yyv•
[-4].
numbî
),(yyvsp[-1].node));

5650 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5651 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5660 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5661 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5662 
c⁄ãxt
 |
ARG_LIST
;

5671 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5672 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
√w_efun
, (
yyv•
[-1].node));

5673 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5674 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5683 
∑r£_node_t
 *
node
;

5685 i‡((
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
 == -1) {

5686 
buf
[256];

5687 *
íd
 = 
	`EndOf
(
buf
);

5688 *
p
;

5690 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

5691 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
ihe
)->
«me
);

5692 
p
 = 
	`°Ωut
’, 
íd
, "'");

5693 
	`yyîr‹
(
buf
);

5694 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5695 
node
 = (
yyv•
[-1].node);

5696 
node
) {

5697 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

5698 
node
 =Çode->
r
.
ex¥
;

5701 
ty≥
 = (
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

5703 i‡((
node
 = (
yyv•
[-1].node))) {

5704 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 
ty≥
, 0, 0);

5705 (
yyvÆ
.
node
)->
l
.
ex¥
 = 
	`ª‹dî_˛ass_vÆues
((
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
,

5706 
node
);

5707 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
r
.
ex¥
, 
F_NEW_CLASS
,

5708 
ty≥
, (
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
);

5711 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_NEW_EMPTY_CLASS
,

5712 
ty≥
, (
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
);

5723 
∑r£_node_t
 *
node
;

5724 
buf
[256];

5725 *
íd
 = 
	`EndOf
(
buf
);

5726 *
p
;

5728 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

5729 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
°rög
));

5730 
p
 = 
	`°Ωut
’, 
íd
, "'");

5731 
	`yyîr‹
(
buf
);

5732 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5733 
node
 = (
yyv•
[-1].node);

5734 
node
) {

5735 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

5736 
node
 =Çode->
r
.
ex¥
;

5746 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5747 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5748 
c⁄ãxt
 |
ARG_LIST
;

5757 
f
;

5759 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5760 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5761 i‡((
f
 = (
yyv•
[-4].
ihe
)->
dn
.
fun˘i⁄_num
) != -1) {

5762 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5763 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5765 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5766 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5767 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5768 (
yyvÆ
.
node
)->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, (
yyv•
[-1].node)->
r
.
ex¥
);

5769 } i‡((
f
=(
yyv•
[-4].
ihe
)->
dn
.
simul_num
) != -1) {

5770 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5771 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_SIMUL_EFUN
;

5772 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5773 (
yyvÆ
.
node
)->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
DECL_MODS
;

5774 } i‡((
f
=(
yyv•
[-4].
ihe
)->
dn
.
efun_num
) != -1) {

5775 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
f
, (
yyv•
[-1].node));

5785 
f
;

5787 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5788 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5790 
f
 = 
	`deföe_√w_fun˘i⁄
((
yyv•
[-4].
ihe
)->
«me
, 0, 0,

5791 
DECL_PUBLIC
|
FUNC_UNDEFINED
, 
TYPE_ANY
);

5792 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5793 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5794 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5795 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5796 i‡(
exa˘_ty≥s
) {

5797 
buf
[256];

5798 *
íd
 = 
	`EndOf
(
buf
);

5799 *
p
;

5800 *
n
 = (
yyv•
[-4].
ihe
)->
«me
;

5801 i‡(*
n
 == ':')Ç++;

5807 
	`FUNCTION_FLAGS
(
f
Ë&~
FUNC_UNDEFINED
;

5808 
	`FUNCTION_FLAGS
(
f
Ë|(
FUNC_INHERITED
 | 
FUNC_VARARGS
);

5809 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

5810 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

5811 
	`yyîr‹
(
buf
);

5814 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5815 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5824 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5825 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5826 
c⁄ãxt
 |
ARG_LIST
;

5835 *
«me
 = (
yyv•
[-4].
°rög
);

5837 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5838 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5840 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5841 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5843 i‡(*
«me
 == ':') {

5844 
f
;

5846 i‡((
f
 = 
	`¨ønge_ˇŒ_öhîôed
(
«me
 + 1, (
yyvÆ
.
node
))) != -1)

5854 
f
;

5855 
idít_hash_ñem_t
 *
ihe
;

5857 
f
 = (
ihe
 = 
	`lookup_idít
(
«me
)Ë? ihe->
dn
.
fun˘i⁄_num
 : -1;

5858 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5859 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5860 i‡(
f
!=-1) {

5865 (
yyvÆ
.
node
)->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, (
yyv•
[-1].node)->
r
.
ex¥
);

5867 
f
 = 
	`deföe_√w_fun˘i⁄
(
«me
, 0, 0,

5868 
DECL_PUBLIC
|
FUNC_UNDEFINED
, 
TYPE_ANY
);

5870 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5876 i‡(
exa˘_ty≥s
 && (
	`FUNCTION_FLAGS
(
f
Ë& 
FUNC_UNDEFINED
)) {

5877 
buf
[256];

5878 *
íd
 = 
	`EndOf
(
buf
);

5879 *
p
;

5880 *
n
 = (
yyv•
[-4].
°rög
);

5881 i‡(*
n
 == ':')Ç++;

5883 
	`FUNCTION_FLAGS
(
f
Ë&~
FUNC_UNDEFINED
;

5884 
	`FUNCTION_FLAGS
(
f
Ë|(
FUNC_INHERITED
 | 
FUNC_VARARGS
);

5885 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

5886 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

5887 
	`yyîr‹
(
buf
);

5889 i‡(!(
	`FUNCTION_FLAGS
(
f
Ë& 
FUNC_UNDEFINED
))

5890 (
yyvÆ
.
node
)->
ty≥
 = 
	`FUNCTION_DEF
(
f
)->type;

5892 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5894 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5895 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5896 
	`s¸©ch_‰ì
(
«me
);

5905 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5906 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5907 
c⁄ãxt
 |
ARG_LIST
;

5916 
idít_hash_ñem_t
 *
ihe
;

5917 
f
;

5918 
∑r£_node_t
 *
≤1
, *
≤2
;

5920 (
yyv•
[-1].
node
)->
v
.
numbî
 += 2;

5922 
≤1
 = 
	`√w_node_no_löe
();

5923 
≤1
->
ty≥
 = 0;

5924 
≤1
->
v
.
ex¥
 = (
yyv•
[-6].
node
);

5925 
≤1
->
köd
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5927 
≤2
 = 
	`√w_node_no_löe
();

5928 
≤2
->
ty≥
 = 0;

5929 
	`CREATE_STRING
(
≤2
->
v
.
ex¥
, (
yyv•
[-4].
°rög
));

5930 
	`s¸©ch_‰ì
((
yyv•
[-4].
°rög
));

5933 
≤2
->
r
.
ex¥
 = (
yyv•
[-1].
node
)->r.expr;

5934 
≤1
->
r
.
ex¥
 = 
≤2
;

5935 (
yyv•
[-1].
node
)->
r
.
ex¥
 = 
≤1
;

5937 i‡(!(
yyv•
[-1].
node
)->
l
.
ex¥
Ë(yyv•[-1].node)->l.ex¥ = 
≤2
;

5939 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5940 
ihe
 = 
	`lookup_idít
("call_other");

5942 i‡((
f
 = 
ihe
->
dn
.
simul_num
) != -1) {

5943 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5944 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5945 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_SIMUL_EFUN
;

5946 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5947 (
yyvÆ
.
node
)->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
DECL_MODS
;

5949 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
¨row_efun
, (
yyv•
[-1].node));

5950 #ifde‡
CAST_CALL_OTHERS


5951 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_UNKNOWN
;

5953 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5956 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5957 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5966 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5967 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5968 
c⁄ãxt
 |
ARG_LIST
;

5977 
∑r£_node_t
 *
ex¥
;

5979 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5980 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5981 (
yyvÆ
.
node
)->
köd
 = 
NODE_EFUN
;

5982 (
yyvÆ
.
node
)->
l
.
numbî
 = (yyvÆ.node)->
v
.number + 1;

5983 (
yyvÆ
.
node
)->
v
.
numbî
 = 
¥edefs
[
evÆu©e_efun
].
tokí
;

5984 #ifde‡
CAST_CALL_OTHERS


5985 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_UNKNOWN
;

5987 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5989 
ex¥
 = 
	`√w_node_no_löe
();

5990 
ex¥
->
ty≥
 = 0;

5991 
ex¥
->
v
.ex¥ = (
yyv•
[-5].
node
);

5992 
ex¥
->
r
.ex¥ = (
yyvÆ
.
node
)->r.expr;

5993 (
yyvÆ
.
node
)->
r
.
ex¥
 =Éxpr;

5994 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5995 
num_ªfs
 = (
yyv•
[-3].
numbî
);

6004 
svÆue_t
 *
ªs
;

6005 
idít_hash_ñem_t
 *
ihe
;

6007 (
yyvÆ
.
numbî
Ë(
ihe
 = 
	`lookup_idít
((
yyv•
[0].
°rög
))Ë? ihe->
dn
.
efun_num
 : -1;

6008 i‡((
yyvÆ
.
numbî
) == -1) {

6009 
buf
[256];

6010 *
íd
 = 
	`EndOf
(
buf
);

6011 *
p
;

6013 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnknownÉfun: ");

6014 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

6015 
	`yyîr‹
(
buf
);

6017 
	`push_mÆlo˚d_°rög
(
	`the_fûe_«me
(
cuºít_fûe
));

6018 
	`sh¨e_™d_push_°rög
((
yyv•
[0].
°rög
));

6019 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
	`maö_fûe_«me
()));

6020 
ªs
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_OVERRIDE
, 3);

6021 i‡(!
	`MASTER_APPROVED
(
ªs
)) {

6022 
	`yyîr‹
("Invalid simulatedÉfunction override");

6023 (
yyvÆ
.
numbî
) = -1;

6026 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

6035 
svÆue_t
 *
ªs
;

6037 
	`push_mÆlo˚d_°rög
(
	`the_fûe_«me
(
cuºít_fûe
));

6038 
	`push_c⁄°™t_°rög
("new");

6039 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
	`maö_fûe_«me
()));

6040 
ªs
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_OVERRIDE
, 3);

6041 i‡(!
	`MASTER_APPROVED
(
ªs
)) {

6042 
	`yyîr‹
("Invalid simulatedÉfunction override");

6043 (
yyvÆ
.
numbî
) = -1;

6044 } (
yyvÆ
.
numbî
Ë
√w_efun
;

6053 
l
 = 
	`°æí
((
yyv•
[0].
°rög
)) + 1;

6054 *
p
;

6059 (
yyvÆ
.
°rög
Ë
	`s¸©ch_ªÆloc
((
yyv•
[0].°rög), 
l
 + 3);

6060 
p
 = (
yyvÆ
.
°rög
Ë+ 
l
;

6061 
p
--,
l
--)

6062 *(
p
+3) = *p;

6063 
	`°∫˝y
((
yyvÆ
.
°rög
), ":::", 3);

6072 
z
, 
l
 = 
	`°æí
((
yyv•
[0].
°rög
)) + 1;

6073 *
p
;

6075 
z
 = 
	`°æí
(
compûî_ty≥_«mes
[(
yyv•
[-2].
ty≥
)]) + 3;

6076 (
yyvÆ
.
°rög
Ë
	`s¸©ch_ªÆloc
((
yyv•
[0].°rög), 
l
 + 
z
);

6077 
p
 = (
yyvÆ
.
°rög
Ë+ 
l
;

6078 
p
--,
l
--)

6079 *(
p
+
z
) = *p;

6080 (
yyvÆ
.
°rög
)[0] = ':';

6081 
	`°∫˝y
((
yyvÆ
.
°rög
Ë+ 1, 
compûî_ty≥_«mes
[(
yyv•
[-2].
ty≥
)], 
z
 - 3);

6082 (
yyvÆ
.
°rög
)[
z
-2] = ':';

6083 (
yyvÆ
.
°rög
)[
z
-1] = ':';

6092 
l
 = 
	`°æí
((
yyv•
[-2].
°rög
));

6094 (
yyvÆ
.
°rög
Ë
	`s¸©ch_Æloc
(
l
 + 
	`°æí
((
yyv•
[0].string)) + 4);

6095 *((
yyvÆ
.
°rög
)) = ':';

6096 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 1, (
yyv•
[-2].string));

6097 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 
l
 + 1, "::");

6098 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 
l
 + 3, (
yyv•
[0].string));

6099 
	`s¸©ch_‰ì
((
yyv•
[-2].
°rög
));

6100 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

6110 i‡(
	`IS_NODE
((
yyv•
[-3].
node
), 
NODE_BINARY_OP
, 
F_NE
)) {

6111 i‡(
	`IS_NODE
((
yyv•
[-3].
node
)->
r
.
ex¥
, 
NODE_NUMBER
, 0))

6112 (
yyv•
[-3].
node
Ë(yyv•[-3].node)->
l
.
ex¥
;

6113 i‡(
	`IS_NODE
((
yyv•
[-3].
node
)->
l
.
ex¥
, 
NODE_NUMBER
, 0))

6114 (
yyv•
[-3].
node
Ë(yyv•[-3].node)->
r
.
ex¥
;

6121 i‡((
yyv•
[-1].
node
) == 0) {

6122 i‡((
yyv•
[0].
node
) == 0) {

6124 (
yyvÆ
.
node
Ë
	`p›_vÆue
((
yyv•
[-3].node));

6128 
∑r£_node_t
 *
ª∂
;

6130 
	`CREATE_UNARY_OP
(
ª∂
, 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[-3].
node
));

6131 (
yyv•
[-3].
node
Ë
ª∂
;

6132 (
yyv•
[-1].
node
) = (yyvsp[0].node);

6133 (
yyv•
[0].
node
) = 0;

6136 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[-3].node), (yyvsp[-1].node), (yyvsp[0].node));

6145 (
yyvÆ
.
node
) = 0;

6154 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

6174 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

6176 
	`YYPOPSTACK
 (
yyÀn
);

6177 
yyÀn
 = 0;

6178 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6180 *++
yyv•
 = 
yyvÆ
;

6186 
yyn
 = 
yyr1
[yyn];

6188 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

6189 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

6190 
yy°©e
 = 
yyèbÀ
[yystate];

6192 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

6194 
yy√w°©e
;

6200 
yyîæab
:

6203 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

6206 i‡(!
yyîr°©us
)

6208 ++
yy√ºs
;

6209 #i‡! 
YYERROR_VERBOSE


6210 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

6212 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

6213 
yys•
, 
yytokí
)

	)

6215 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

6216 
yysy¡ax_îr‹_°©us
;

6217 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

6218 i‡(
yysy¡ax_îr‹_°©us
 == 0)

6219 
yymsgp
 = 
yymsg
;

6220 i‡(
yysy¡ax_îr‹_°©us
 == 1)

6222 i‡(
yymsg
 !
yymsgbuf
)

6223 
	`YYSTACK_FREE
 (
yymsg
);

6224 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

6225 i‡(!
yymsg
)

6227 
yymsg
 = 
yymsgbuf
;

6228 
yymsg_Æloc
 =  
yymsgbuf
;

6229 
yysy¡ax_îr‹_°©us
 = 2;

6233 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

6234 
yymsgp
 = 
yymsg
;

6237 
	`yyîr‹
 (
yymsgp
);

6238 i‡(
yysy¡ax_îr‹_°©us
 == 2)

6239 
yyexhau°edœb
;

6241 #unde‡
YYSYNTAX_ERROR


6247 i‡(
yyîr°©us
 == 3)

6252 i‡(
yych¨
 <
YYEOF
)

6255 i‡(
yych¨
 =
YYEOF
)

6256 
YYABORT
;

6260 
	`yyde°ru˘
 ("Error: discarding",

6261 
yytokí
, &
yylvÆ
);

6262 
yych¨
 = 
YYEMPTY
;

6268 
yyîæab1
;

6274 
yyîr‹œb
:

6280 
yyîr‹œb
;

6284 
	`YYPOPSTACK
 (
yyÀn
);

6285 
yyÀn
 = 0;

6286 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6287 
yy°©e
 = *
yys•
;

6288 
yyîæab1
;

6294 
yyîæab1
:

6295 
yyîr°©us
 = 3;

6299 
yyn
 = 
yy∑˘
[
yy°©e
];

6300 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

6302 
yyn
 +
YYTERROR
;

6303 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

6305 
yyn
 = 
yyèbÀ
[yyn];

6306 i‡(0 < 
yyn
)

6312 i‡(
yys•
 =
yyss
)

6313 
YYABORT
;

6316 
	`yyde°ru˘
 ("Error:Öopping",

6317 
yy°os
[
yy°©e
], 
yyv•
);

6318 
	`YYPOPSTACK
 (1);

6319 
yy°©e
 = *
yys•
;

6320 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6323 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


6324 *++
yyv•
 = 
yylvÆ
;

6325 
YY_IGNORE_MAYBE_UNINITIALIZED_END


6329 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

6331 
yy°©e
 = 
yyn
;

6332 
yy√w°©e
;

6338 
yyac˚±œb
:

6339 
yyªsu…
 = 0;

6340 
yyªtu∫
;

6345 
yyab‹éab
:

6346 
yyªsu…
 = 1;

6347 
yyªtu∫
;

6349 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


6353 
yyexhau°edœb
:

6354 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

6355 
yyªsu…
 = 2;

6359 
yyªtu∫
:

6360 i‡(
yych¨
 !
YYEMPTY
)

6364 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

6365 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

6366 
yytokí
, &
yylvÆ
);

6370 
	`YYPOPSTACK
 (
yyÀn
);

6371 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6372 
yys•
 !
yyss
)

6374 
	`yyde°ru˘
 ("Cleanup:Öopping",

6375 
yy°os
[*
yys•
], 
yyv•
);

6376 
	`YYPOPSTACK
 (1);

6378 #i‚de‡
yyovîÊow


6379 i‡(
yyss
 !
yysß
)

6380 
	`YYSTACK_FREE
 (
yyss
);

6382 #i‡
YYERROR_VERBOSE


6383 i‡(
yymsg
 !
yymsgbuf
)

6384 
	`YYSTACK_FREE
 (
yymsg
);

6386  
yyªsu…
;

6387 
	}
}

	@grammar.tab.h

33 #i‚de‡
YY_YY_Y_TAB_H_INCLUDED


34 
	#YY_YY_Y_TAB_H_INCLUDED


	)

36 #i‚de‡
YYDEBUG


37 
	#YYDEBUG
 0

	)

39 #i‡
YYDEBUG


40 
yydebug
;

44 #i‚de‡
YYTOKENTYPE


45 
	#YYTOKENTYPE


	)

46 
	eyytokíty≥


48 
	mL_STRING
 = 258,

49 
	mL_NUMBER
 = 259,

50 
	mL_REAL
 = 260,

51 
	mL_BASIC_TYPE
 = 261,

52 
	mL_TYPE_MODIFIER
 = 262,

53 
	mL_DEFINED_NAME
 = 263,

54 
	mL_IDENTIFIER
 = 264,

55 
	mL_EFUN
 = 265,

56 
	mL_INC
 = 266,

57 
	mL_DEC
 = 267,

58 
	mL_ASSIGN
 = 268,

59 
	mL_LAND
 = 269,

60 
	mL_LOR
 = 270,

61 
	mL_LSH
 = 271,

62 
	mL_RSH
 = 272,

63 
	mL_ORDER
 = 273,

64 
	mL_NOT
 = 274,

65 
	mL_IF
 = 275,

66 
	mL_ELSE
 = 276,

67 
	mL_SWITCH
 = 277,

68 
	mL_CASE
 = 278,

69 
	mL_DEFAULT
 = 279,

70 
	mL_RANGE
 = 280,

71 
	mL_DOT_DOT_DOT
 = 281,

72 
	mL_WHILE
 = 282,

73 
	mL_DO
 = 283,

74 
	mL_FOR
 = 284,

75 
	mL_FOREACH
 = 285,

76 
	mL_IN
 = 286,

77 
	mL_BREAK
 = 287,

78 
	mL_CONTINUE
 = 288,

79 
	mL_RETURN
 = 289,

80 
	mL_ARROW
 = 290,

81 
	mL_INHERIT
 = 291,

82 
	mL_COLON_COLON
 = 292,

83 
	mL_ARRAY_OPEN
 = 293,

84 
	mL_MAPPING_OPEN
 = 294,

85 
	mL_FUNCTION_OPEN
 = 295,

86 
	mL_NEW_FUNCTION_OPEN
 = 296,

87 
	mL_SSCANF
 = 297,

88 
	mL_CATCH
 = 298,

89 
	mL_ARRAY
 = 299,

90 
	mL_REF
 = 300,

91 
	mL_PARSE_COMMAND
 = 301,

92 
	mL_TIME_EXPRESSION
 = 302,

93 
	mL_CLASS
 = 303,

94 
	mL_NEW
 = 304,

95 
	mL_PARAMETER
 = 305,

96 
	mLOWER_THAN_ELSE
 = 306,

97 
	mL_EQ
 = 307,

98 
	mL_NE
 = 308

102 
	#L_STRING
 258

	)

103 
	#L_NUMBER
 259

	)

104 
	#L_REAL
 260

	)

105 
	#L_BASIC_TYPE
 261

	)

106 
	#L_TYPE_MODIFIER
 262

	)

107 
	#L_DEFINED_NAME
 263

	)

108 
	#L_IDENTIFIER
 264

	)

109 
	#L_EFUN
 265

	)

110 
	#L_INC
 266

	)

111 
	#L_DEC
 267

	)

112 
	#L_ASSIGN
 268

	)

113 
	#L_LAND
 269

	)

114 
	#L_LOR
 270

	)

115 
	#L_LSH
 271

	)

116 
	#L_RSH
 272

	)

117 
	#L_ORDER
 273

	)

118 
	#L_NOT
 274

	)

119 
	#L_IF
 275

	)

120 
	#L_ELSE
 276

	)

121 
	#L_SWITCH
 277

	)

122 
	#L_CASE
 278

	)

123 
	#L_DEFAULT
 279

	)

124 
	#L_RANGE
 280

	)

125 
	#L_DOT_DOT_DOT
 281

	)

126 
	#L_WHILE
 282

	)

127 
	#L_DO
 283

	)

128 
	#L_FOR
 284

	)

129 
	#L_FOREACH
 285

	)

130 
	#L_IN
 286

	)

131 
	#L_BREAK
 287

	)

132 
	#L_CONTINUE
 288

	)

133 
	#L_RETURN
 289

	)

134 
	#L_ARROW
 290

	)

135 
	#L_INHERIT
 291

	)

136 
	#L_COLON_COLON
 292

	)

137 
	#L_ARRAY_OPEN
 293

	)

138 
	#L_MAPPING_OPEN
 294

	)

139 
	#L_FUNCTION_OPEN
 295

	)

140 
	#L_NEW_FUNCTION_OPEN
 296

	)

141 
	#L_SSCANF
 297

	)

142 
	#L_CATCH
 298

	)

143 
	#L_ARRAY
 299

	)

144 
	#L_REF
 300

	)

145 
	#L_PARSE_COMMAND
 301

	)

146 
	#L_TIME_EXPRESSION
 302

	)

147 
	#L_CLASS
 303

	)

148 
	#L_NEW
 304

	)

149 
	#L_PARAMETER
 305

	)

150 
	#LOWER_THAN_ELSE
 306

	)

151 
	#L_EQ
 307

	)

152 
	#L_NE
 308

	)

155 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


156 
YYSTYPE
 
	tYYSTYPE
;

157 
	uYYSTYPE


161 
POINTER_INT
 
	mpoöãr_öt
;

162 
	mnumbî
;

163 
	mªÆ
;

164 *
	m°rög
;

165 
	mty≥
;

166 °ru˘ { 
	mnum_¨g
; 
	mÊags
; } 
	m¨gumít
;

167 
idít_hash_ñem_t
 *
	mihe
;

168 
∑r£_node_t
 *
	mnode
;

169 
fun˘i⁄_c⁄ãxt_t
 *
	mc⁄ãxç
;

171 
∑r£_node_t
 *
	mnode
;

172 
	mnum
;

173 } 
	mde˛
;

175 
	mnum_loˇl
;

176 
	mmax_num_loˇls
;

177 
	mc⁄ãxt
;

178 
	mßve_cuºít_ty≥
;

179 
	mßve_exa˘_ty≥s
;

180 } 
	mfunc_block
;

184 
	#YYSTYPE_IS_TRIVIAL
 1

	)

185 
	#YYSTYPE_IS_DECLARED
 1

	)

189 
YYSTYPE
 
yylvÆ
;

191 
yy∑r£
 ();

	@grammar.y

5 
	~"°d.h
"

6 
	~"compûî.h
"

7 
	~"Àx.h
"

8 
	~"s¸©ch∑d.h
"

10 
	~"Õc_ö˛.h
"

11 
	~"simul_efun.h
"

12 
	~"gíî©e.h
"

13 
	~"ma°î.h
"

16 #ifde‡
WIN32


17 
	#MSDOS


	)

33 
	gc⁄ãxt
;

34 
	gnum_ªfs
;

39 
yy∑r£
 
PROT
(());

56 %
tokí
 
L_STRING
 
L_NUMBER
 
L_REAL


57 %
tokí
 
L_BASIC_TYPE
 
L_TYPE_MODIFIER


58 %
tokí
 
L_DEFINED_NAME
 
L_IDENTIFIER


59 %
tokí
 
L_EFUN


61 %
tokí
 
L_INC
 
L_DEC


62 %
tokí
 
L_ASSIGN


63 %
tokí
 
L_LAND
 
L_LOR


64 %
tokí
 
L_LSH
 
L_RSH


65 %
tokí
 
L_ORDER


66 %
tokí
 
L_NOT


68 %
tokí
 
L_IF
 
L_ELSE


69 %
tokí
 
L_SWITCH
 
L_CASE
 
L_DEFAULT
 
L_RANGE
 
L_DOT_DOT_DOT


70 %
tokí
 
L_WHILE
 
L_DO
 
L_FOR
 
L_FOREACH
 
L_IN


71 %
tokí
 
L_BREAK
 
L_CONTINUE


72 %
tokí
 
L_RETURN


73 %
tokí
 
L_ARROW
 
L_INHERIT
 
L_COLON_COLON


74 %
tokí
 
L_ARRAY_OPEN
 
L_MAPPING_OPEN
 
L_FUNCTION_OPEN
 
L_NEW_FUNCTION_OPEN


76 %
tokí
 
L_SSCANF
 
L_CATCH


77 %
tokí
 
L_ARRAY


78 %
tokí
 
L_REF


79 %
tokí
 
L_PARSE_COMMAND
 
L_TIME_EXPRESSION


80 %
tokí
 
L_CLASS
 
L_NEW


81 %
tokí
 
L_PARAMETER


89 %
n⁄assoc
 
LOWER_THAN_ELSE


90 %
n⁄assoc
 
L_ELSE


97 %
right
 
L_ASSIGN


98 %
right
 '?'

99 %
À·
 
L_LOR


100 %
À·
 
L_LAND


101 %
À·
 '|'

102 %
À·
 '^'

103 %
À·
 '&'

104 %
À·
 
L_EQ
 
L_NE


105 %
À·
 
L_ORDER
 '<'

106 %
À·
 
L_LSH
 
L_RSH


107 %
À·
 '+' '-'

108 %
À·
 '*' '%' '/'

109 %
right
 
L_NOT
 '~'

110 %
n⁄assoc
 
L_INC
 
L_DEC


123 
POINTER_INT
 
poöãr_öt
;

124 
numbî
;

125 
ªÆ
;

126 *
°rög
;

127 
ty≥
;

128 °ru˘ { 
num_¨g
; 
Êags
; } 
¨gumít
;

129 
idít_hash_ñem_t
 *
ihe
;

130 
∑r£_node_t
 *
node
;

131 
fun˘i⁄_c⁄ãxt_t
 *
c⁄ãxç
;

133 
∑r£_node_t
 *
node
;

134 
num
;

135 } 
de˛
;

137 
num_loˇl
;

138 
max_num_loˇls
;

139 
c⁄ãxt
;

140 
ßve_cuºít_ty≥
;

141 
ßve_exa˘_ty≥s
;

142 } 
func_block
;

151 %
ty≥
 <
numbî
> 
efun_ovîride
 
L_ASSIGN
 
L_ORDER


154 %
ty≥
 <
numbî
> 
L_PARAMETER
 
sögÀ_√w_loˇl_def


157 %
ty≥
 <
numbî
> 
L_NUMBER


162 %
ty≥
 <
poöãr_öt
> 
c⁄°™t


165 %
ty≥
 <
ªÆ
> 
L_REAL


168 %
ty≥
 <
°rög
> 
L_STRING
 
°rög_c⁄1
 
°rög_c⁄2


171 %
ty≥
 <
¨gumít
> 
¨gumít_li°
árgument

174 %
ty≥
 <
ihe
> 
L_DEFINED_NAME


177 %
ty≥
 <ty≥>Åy≥ 
›ti⁄Æ_°¨
 
ty≥_modifõr_li°


178 %
ty≥
 <ty≥> 
›t_basic_ty≥
 
L_TYPE_MODIFIER
 
L_BASIC_TYPE
 
basic_ty≥
 
©omic_ty≥


179 %
ty≥
 <ty≥> 
ˇ°
 
¨g_ty≥


180 %
ty≥
 <ty≥> 
›t_©omic_ty≥


183 %
ty≥
 <
numbî
> 
L_NEW_FUNCTION_OPEN
 
l_√w_fun˘i⁄_›í


186 %
ty≥
 <
°rög
> 
L_IDENTIFIER
 
L_EFUN
 
fun˘i⁄_«me
 
idítifõr


187 %
ty≥
 <
°rög
> 
√w_loˇl_«me


190 %
ty≥
 <
node
> 
numbî
 
ªÆ
 
°rög
 
ex¥0
 
comma_ex¥
 
f‹_ex¥
 
ssˇnf
 
ˇtch


191 %
ty≥
 <
node
> 
∑r£_comm™d
 
time_ex¥essi⁄
 
ex¥_li°
 
ex¥_li°2
 
ex¥_li°3


192 %
ty≥
 <
node
> 
ex¥_li°4
 
assoc_∑ú
 
ex¥4
 
lvÆue
 
fun˘i⁄_ˇŒ
 
lvÆue_li°


193 %
ty≥
 <
node
> 
√w_loˇl_def
 
°©emít
 
c⁄d
 do 

194 %
ty≥
 <
node
>  
›ti⁄Æ_ñ£_∑π
 
block_‹_£mi


195 %
ty≥
 <
node
> 
ˇ£_œbñ
 
°©emíts
 
swôch_block


196 %
ty≥
 <
node
> 
ex¥_li°_node
 
ex¥_‹_block


197 %
ty≥
 <
node
> 
sögÀ_√w_loˇl_def_wôh_öô


198 %
ty≥
 <
node
> 
˛ass_öô
 
›t_˛ass_öô
 
Æl
 
def


199 %
ty≥
 <
node
> 
¥ogøm
 
modifõr_ch™ge
 
öhîô™˚
 
ty≥_de˛


202 %
ty≥
 <
de˛
> 
loˇl_de˛¨©i⁄s
 
loˇl_«me_li°
 
block
 
de˛_block


203 %
ty≥
 <
de˛
> 
f‹óch_v¨
 
f‹óch_v¨s
 
fú°_f‹_ex¥
 
f‹óch
 

206 %
ty≥
 <
numbî
> 
√w_¨g


208 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

211 
Æl
:

212 
¥ogøm


214 #
löe
 229 "grammar.y.pre"

215 
comp_åìs
[
TREE_MAIN
] = 
$$
;

219 
¥ogøm
:

220 
¥ogøm
 
def
 
possibÀ_£mi_cﬁ⁄


222 #
löe
 236 "grammar.y.pre"

223 
	`CREATE_TWO_VALUES
(
$$
, 0, 
$1
, 
$2
);

227 #
löe
 240 "grammar.y.pre"

228 
$$
 = 0;

232 
possibÀ_£mi_cﬁ⁄
:

236 #
löe
 248 "grammar.y.pre"

238 
	`yyw¨n
("Extra ';'. Ignored.");

243 
öhîô™˚
:

244 
ty≥_modifõr_li°
 
L_INHERIT
 
°rög_c⁄1
 ';'

246 #
löe
 257 "grammar.y.pre"

247 
obje˘_t
 *
ob
;

248 
öhîô_t
 
öhîô
;

249 
öôülizî
;

250 
acc_mod
;

252 
$1
 |
globÆ_modifõrs
;

254 
acc_mod
 = (
$1
 & 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

255 i‡(
acc_mod
 & (acc_mod - 1)) {

256 
buf
[256];

257 *
íd
 = 
	`EndOf
(
buf
);

258 *
p
;

260 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

261 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, 
$1
);

262 
p
 = 
	`°Ωut
’, 
íd
, ") for inheritance");

263 
	`yyîr‹
(
buf
);

266 i‡(!(
$1
 & 
DECL_ACCESS
)Ë$1 |
DECL_PUBLIC
;

268 i‡(
v¨_deföed
)

269 
	`yyîr‹
("IllegalÅo inheritáfter defining global variables.");

270 
ob
 = 
	`föd_obje˘2
(
$3
);

271 i‡(
ob
 == 0) {

272 
öhîô_fûe
 = 
	`Æloc_c°rög
(
$3
, "inherit");

274 
YYACCEPT
;

276 
	`s¸©ch_‰ì
(
$3
);

277 
öhîô
.
¥og
 = 
ob
->prog;

279 i‡(
mem_block
[
A_INHERITS
].
cuºít_size
){

280 
öhîô_t
 *
¥ev_öhîô
 = 
	`INHERIT
(
NUM_INHERITS
 - 1);

282 
öhîô
.
fun˘i⁄_ödex_off£t


283 
¥ev_öhîô
->
fun˘i⁄_ödex_off£t


284 + 
¥ev_öhîô
->
¥og
->
num_fun˘i⁄s_deföed


285 + 
¥ev_öhîô
->
¥og
->
œ°_öhîôed
;

286 i‡(
¥ev_öhîô
->
¥og
->
num_fun˘i⁄s_deföed
 &&

287 
¥ev_öhîô
->
¥og
->
fun˘i⁄_èbÀ
[¥ev_öhîô->¥og->
num_fun˘i⁄s_deföed
 - 1].
«me
[0] == '#')

288 
öhîô
.
fun˘i⁄_ödex_off£t
--;

289 } 
öhîô
.
fun˘i⁄_ödex_off£t
 = 0;

291 
öhîô
.
v¨übÀ_ödex_off£t
 =

292 
mem_block
[
A_VAR_TEMP
].
cuºít_size
 /

293  (
v¨übÀ_t
);

294 
öhîô
.
ty≥_mod
 = 
$1
;

295 
	`add_to_mem_block
(
A_INHERITS
, (*)&
öhîô
,  inherit);

298 
	`c›y_°ru˘uªs
(
ob
->
¥og
);

299 
	`c›y_v¨übÀs
(
ob
->
¥og
, 
$1
);

300 
öôülizî
 = 
	`c›y_fun˘i⁄s
(
ob
->
¥og
, 
$1
);

301 i‡(
öôülizî
 >= 0) {

302 
∑r£_node_t
 *
node
, *
√wnode
;

307 
node
 = 
	`√w_node_no_löe
();

308 
node
->
köd
 = 
NODE_CALL_2
;

309 
node
->
r
.
ex¥
 = 0;

310 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

311 
node
->
l
.
numbî
 = 
öôülizî
 | ((
NUM_INHERITS
 - 1) << 16);

312 
node
->
ty≥
 = 
TYPE_ANY
;

316 
√wnode
 = 
comp_åìs
[
TREE_INIT
];

317 
	`CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
],0, 
√wnode
, 
node
);

318 
comp_åìs
[
TREE_INIT
] = 
	`p›_vÆue
(comp_trees[TREE_INIT]);

321 
$$
 = 0;

325 
ªÆ
:

326 
L_REAL


328 #
löe
 342 "grammar.y.pre"

329 
	`CREATE_REAL
(
$$
, 
$1
);

333 
numbî
:

334 
L_NUMBER


336 #
löe
 349 "grammar.y.pre"

337 
	`CREATE_NUMBER
(
$$
, 
$1
);

341 
›ti⁄Æ_°¨
:

344 #
löe
 356 "grammar.y.pre"

345 
$$
 = 0;

349 #
löe
 360 "grammar.y.pre"

350 
$$
 = 
TYPE_MOD_ARRAY
;

354 
block_‹_£mi
:

355 
block


357 #
löe
 367 "grammar.y.pre"

358 
$$
 = 
$1
.
node
;

359 i‡(!
$$
) {

360 
	`CREATE_RETURN
(
$$
, 0);

365 #
löe
 374 "grammar.y.pre"

366 
$$
 = 0;

368 | 
îr‹


370 #
löe
 378 "grammar.y.pre"

371 
$$
 = 0;

375 
idítifõr
:

376 
L_DEFINED_NAME


378 #
löe
 385 "grammar.y.pre"

379 
$$
 = 
	`s¸©ch_c›y
(
$1
->
«me
);

381 | 
L_IDENTIFIER


384 
def
:

385 
ty≥
 
›ti⁄Æ_°¨
 
idítifõr


387 #
löe
 393 "grammar.y.pre"

388 
Êags
;

389 
acc_mod
;

391 
Êags
 = (
$1
 >> 16);

393 
Êags
 |
globÆ_modifõrs
;

395 
acc_mod
 = (
Êags
 & 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

396 i‡(
acc_mod
 & (acc_mod - 1)) {

397 
buf
[256];

398 *
íd
 = 
	`EndOf
(
buf
);

399 *
p
;

401 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

402 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, 
Êags
);

403 
p
 = 
	`°Ωut
’, 
íd
, ") for function");

404 
	`yyîr‹
(
buf
);

407 i‡(!(
Êags
 & 
DECL_ACCESS
)ËÊag†|
DECL_PUBLIC
;

408 i‡(
Êags
 & 
DECL_NOSAVE
) {

409 
	`yyw¨n
("IllegalÅo declareÇosave function.");

410 
Êags
 &~
DECL_NOSAVE
;

412 
$1
 = (
Êags
 << 16) | ($1 & 0xffff);

415 i‡(
$1
 & 0xffff) {

416 
exa˘_ty≥s
 = (
$1
& 0xffffË| 
$2
;

418 i‡(
¥agmas
 & 
PRAGMA_STRICT_TYPES
) {

419 i‡(
	`°rcmp
(
$3
, "create") != 0)

420 
	`yyîr‹
("\"#pragma strict_types\"ÑequiresÅype of function");

422 
exa˘_ty≥s
 = 
TYPE_VOID
;

424 
exa˘_ty≥s
 = 0;

427 '(' 
¨gumít
 ')'

429 #
löe
 444 "grammar.y.pre"

430 *
p
 = 
$3
;

431 
$3
 = 
	`make_sh¨ed_°rög
($3);

432 
	`s¸©ch_‰ì
(
p
);

442 
$
<
numbî
>$ = 
FUNC_PROTOTYPE
;

443 i‡(
$6
.
Êags
 & 
ARG_IS_VARARGS
) {

444 
$
<
numbî
>$ |(
FUNC_TRUE_VARARGS
 | 
FUNC_VARARGS
);

446 
$
<
numbî
>$ |(
$1
 >> 16);

448 
	`deföe_√w_fun˘i⁄
(
$3
, 
$6
.
num_¨g
, 0, 
$
<
numbî
>$, (
$1
 & 0xffff)| 
$2
);

451 
	`‰ì_°rög
(
$3
);

452 
c⁄ãxt
 = 0;

454 
block_‹_£mi


456 #
löe
 470 "grammar.y.pre"

458 i‡(
$9
) {

459 
fun
;

461 
$
<
numbî
>8 &~
FUNC_PROTOTYPE
;

462 i‡(
$9
->
köd
 !
NODE_RETURN
 &&

463 (
$9
->
köd
 !
NODE_TWO_VALUES


464 || 
$9
->
r
.
ex¥
->
köd
 !
NODE_RETURN
)) {

465 
∑r£_node_t
 *
ª∂a˚mít
;

466 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, 
$9
, 0);

467 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

468 
$9
 = 
ª∂a˚mít
;

471 
fun
 = 
	`deföe_√w_fun˘i⁄
(
$3
, 
$6
.
num_¨g
,

472 
max_num_loˇls
 - 
$6
.
num_¨g
,

473 
$
<
numbî
>8, (
$1
 & 0xffffË| 
$2
);

474 i‡(
fun
 != -1) {

475 
$$
 = 
	`√w_node_no_löe
();

476 
$$
->
köd
 = 
NODE_FUNCTION
;

477 
$$
->
v
.
numbî
 = 
fun
;

478 
$$
->
l
.
numbî
 = 
max_num_loˇls
;

479 
$$
->
r
.
ex¥
 = 
$9
;

481 
$$
 = 0;

483 
$$
 = 0;

484 
	`‰ì_Æl_loˇl_«mes
(!!
$9
);

486 | 
ty≥
 
«me_li°
 ';'

488 #
löe
 501 "grammar.y.pre"

489 i‡(!(
$1
 & ~(
DECL_MODS
)Ë&& (
¥agmas
 & 
PRAGMA_STRICT_TYPES
))

490 
	`yyîr‹
("MissingÅype for global variable declaration");

491 
$$
 = 0;

493 | 
öhîô™˚


494 | 
ty≥_de˛


495 | 
modifõr_ch™ge


498 
modifõr_ch™ge
: 
ty≥_modifõr_li°
 ':'

500 #
löe
 512 "grammar.y.pre"

501 i‡(!
$1
)

502 
	`yyîr‹
("modifierÜist mayÇot beÉmpty.");

504 i‡(
$1
 & 
FUNC_VARARGS
) {

505 
	`yyîr‹
("Illegal modifier 'varargs' in global modifierÜist.");

506 
$1
 &~
FUNC_VARARGS
;

509 i‡(!(
$1
 & 
DECL_ACCESS
)Ë$1 |
DECL_PUBLIC
;

510 
globÆ_modifõrs
 = 
$1
;

511 
$$
 = 0;

515 
membî_«me
:

516 
›ti⁄Æ_°¨
 
idítifõr


518 #
löe
 529 "grammar.y.pre"

522 i‡(
cuºít_ty≥
 =
TYPE_VOID
)

523 
	`yyîr‹
("IllegalÅo declare class member ofÅype void.");

524 
	`add_loˇl_«me
(
$2
, 
cuºít_ty≥
 | 
$1
);

525 
	`s¸©ch_‰ì
(
$2
);

529 
membî_«me_li°
:

530 
membî_«me


531 | 
membî_«me
 ',' 
membî_«me_li°


534 
membî_li°
:

536 | 
membî_li°
 
basic_ty≥


538 #
löe
 548 "grammar.y.pre"

539 
cuºít_ty≥
 = 
$2
;

541 
membî_«me_li°
 ';'

544 
ty≥_de˛
:

545 
ty≥_modifõr_li°
 
L_CLASS
 
idítifõr
 '{'

547 #
löe
 556 "grammar.y.pre"

548 
idít_hash_ñem_t
 *
ihe
;

550 
ihe
 = 
	`föd_‹_add_idít
(

551 
	`PROG_STRING
(
$
<
numbî
>$ = 
	`°‹e_¥og_°rög
(
$3
)),

552 
FOA_GLOBAL_SCOPE
);

553 i‡(
ihe
->
dn
.
˛ass_num
 == -1) {

554 
ihe
->
£m_vÆue
++;

555 
ihe
->
dn
.
˛ass_num
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

556 i‡(
ihe
->
dn
.
˛ass_num
 > 
CLASS_NUM_MASK
){

557 
buf
[256];

558 *
p
;

560 
p
 = 
buf
;

561 
	`•rötf
(
p
, "Toÿm™y cœs£s, max i†%d.\n", 
CLASS_NUM_MASK
 + 1);

562 
	`yyîr‹
(
buf
);

565 
	`s¸©ch_‰ì
(
$3
);

566 
$
<
ihe
>2 = 0;

569 
$
<
ihe
>2 = ihe;

572 
membî_li°
 '}'

574 #
löe
 582 "grammar.y.pre"

575 
˛ass_def_t
 *
sd
;

576 
˛ass_membî_íåy_t
 *
sme
;

577 
i
, 
øi£_îr‹
 = 0;

580 i‡(
$
<
ihe
>2 != 0) {

581 
sd
 = 
	`CLASS
(
$
<
ihe
>2->
dn
.
˛ass_num
);

582 i‡(
sd
->
size
 !
cuºít_numbî_of_loˇls
)

583 
øi£_îr‹
 = 1;

585 
i
 = 
sd
->
size
;

586 
sme
 = (
˛ass_membî_íåy_t
 *)
mem_block
[
A_CLASS_MEMBER
].
block
 + 
sd
->
ödex
;

587 
i
--) {

589 i‡(
	`°rcmp
(
	`PROG_STRING
(
sme
[
i
].
«me
), 
loˇls_±r
[i].
ihe
->name) != 0 ||

590 
sme
[
i
].
ty≥
 !(
ty≥_of_loˇls_±r
[i] & ~
LOCAL_MODS
)) {

591 
øi£_îr‹
 = 1;

598 i‡(
øi£_îr‹
) {

599 
buf
[256];

600 *
íd
 = 
	`EndOf
(
buf
);

601 *
p
;

603 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine class ");

604 
p
 = 
	`°Ωut
’, 
íd
, 
	`PROG_STRING
(
$
<
numbî
>$));

605 
	`yyîr‹
(
buf
);

607 
sd
 = (
˛ass_def_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_DEF
, (class_def_t));

608 
i
 = 
sd
->
size
 = 
cuºít_numbî_of_loˇls
;

609 
sd
->
ödex
 = 
mem_block
[
A_CLASS_MEMBER
].
cuºít_size
 / (
˛ass_membî_íåy_t
);

610 
sd
->
«me
 = 
$
<
numbî
>5;

612 
sme
 = (
˛ass_membî_íåy_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_MEMBER
, (˛ass_membî_íåy_tË* 
cuºít_numbî_of_loˇls
);

614 
i
--) {

615 
sme
[
i
].
«me
 = 
	`°‹e_¥og_°rög
(
loˇls_±r
[i].
ihe
->name);

616 
sme
[
i
].
ty≥
 = 
ty≥_of_loˇls_±r
[i] & ~
LOCAL_MODS
;

620 
	`‰ì_Æl_loˇl_«mes
(0);

621 
$$
 = 0;

625 
√w_loˇl_«me
:

626 
L_IDENTIFIER


627 | 
L_DEFINED_NAME


629 #
löe
 636 "grammar.y.pre"

630 i‡(
$1
->
dn
.
loˇl_num
 != -1) {

631 
buff
[256];

632 *
íd
 = 
	`EndOf
(
buff
);

633 *
p
;

635 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÑedeclareÜocalÇame '");

636 
p
 = 
	`°Ωut
’, 
íd
, 
$1
->
«me
);

637 
p
 = 
	`°Ωut
’, 
íd
, "'");

638 
	`yyîr‹
(
buff
);

640 
$$
 = 
	`s¸©ch_c›y
(
$1
->
«me
);

644 
©omic_ty≥
:

645 
L_BASIC_TYPE


646 | 
L_CLASS
 
L_DEFINED_NAME


648 #
löe
 654 "grammar.y.pre"

649 i‡(
$2
->
dn
.
˛ass_num
 == -1) {

650 
buf
[256];

651 *
íd
 = 
	`EndOf
(
buf
);

652 *
p
;

654 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

655 
p
 = 
	`°Ωut
’, 
íd
, 
$2
->
«me
);

656 
p
 = 
	`°Ωut
’, 
íd
, "'");

657 
	`yyîr‹
(
buf
);

658 
$$
 = 
TYPE_ANY
;

660 
$$
 = 
$2
->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

663 | 
L_CLASS
 
L_IDENTIFIER


665 #
löe
 670 "grammar.y.pre"

666 
buf
[256];

667 *
íd
 = 
	`EndOf
(
buf
);

668 *
p
;

670 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

671 
p
 = 
	`°Ωut
’, 
íd
, 
$2
);

672 
p
 = 
	`°Ωut
’, 
íd
, "'");

673 
	`yyîr‹
(
buf
);

674 
$$
 = 
TYPE_ANY
;

678 
›t_©omic_ty≥
:

679 
©omic_ty≥


682 #
löe
 687 "grammar.y.pre"

683 
$$
 = 
TYPE_ANY
;

687 
basic_ty≥
:

688 
©omic_ty≥


689 | 
›t_©omic_ty≥
 
L_ARRAY


691 #
löe
 697 "grammar.y.pre"

692 
$$
 = 
$1
 | 
TYPE_MOD_ARRAY
;

696 
¨g_ty≥
:

697 
basic_ty≥


698 | 
basic_ty≥
 
ªf


700 #
löe
 707 "grammar.y.pre"

701 
$$
 = 
$1
 | 
LOCAL_MOD_REF
;

705 
√w_¨g
:

706 
¨g_ty≥
 
›ti⁄Æ_°¨


708 #
löe
 715 "grammar.y.pre"

709 
$$
 = 
$1
 | 
$2
;

710 i‡(
$1
 !
TYPE_VOID
)

711 
	`add_loˇl_«me
("", 
$1
 | 
$2
);

713 | 
¨g_ty≥
 
›ti⁄Æ_°¨
 
√w_loˇl_«me


715 #
löe
 721 "grammar.y.pre"

716 i‡(
$1
 =
TYPE_VOID
)

717 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

718 
	`add_loˇl_«me
(
$3
, 
$1
 | 
$2
);

719 
	`s¸©ch_‰ì
(
$3
);

720 
$$
 = 
$1
 | 
$2
;

722 | 
√w_loˇl_«me


724 #
löe
 729 "grammar.y.pre"

725 i‡(
exa˘_ty≥s
) {

726 
	`yyîr‹
("MissingÅype forárgument");

728 
	`add_loˇl_«me
(
$1
, 
TYPE_ANY
);

729 
	`s¸©ch_‰ì
(
$1
);

730 
$$
 = 
TYPE_ANY
;

734 
¨gumít
:

737 #
löe
 741 "grammar.y.pre"

738 
$$
.
num_¨g
 = 0;

739 
$$
.
Êags
 = 0;

741 | 
¨gumít_li°


742 | 
¨gumít_li°
 
L_DOT_DOT_DOT


744 #
löe
 747 "grammar.y.pre"

745 
x
 = 
ty≥_of_loˇls_±r
[
max_num_loˇls
-1];

746 
…
 = 
x
 & ~
LOCAL_MODS
;

748 
$$
 = 
$1
;

749 
$$
.
Êags
 |
ARG_IS_VARARGS
;

751 i‡(
x
 & 
LOCAL_MOD_REF
) {

752 
	`yyîr‹
("VariableÅo holdÑemainder ofárgs mayÇot beáÑeference");

753 
x
 &~
LOCAL_MOD_REF
;

755 i‡(
…
 !
TYPE_ANY
 && !÷à& 
TYPE_MOD_ARRAY
))

756 
	`yyw¨n
("VariableÅo holdÑemainder ofárguments should beánárray.");

760 
¨gumít_li°
:

761 
√w_¨g


763 #
löe
 765 "grammar.y.pre"

764 i‡((
$1
 & 
TYPE_MASK
Ë=
TYPE_VOID
 && !($1 & 
TYPE_MOD_CLASS
)) {

765 i‡(
$1
 & ~
TYPE_MASK
)

766 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

767 
$$
.
num_¨g
 = 0;

769 
$$
.
num_¨g
 = 1;

771 
$$
.
Êags
 = 0;

773 | 
¨gumít_li°
 ',' 
√w_¨g


775 #
löe
 776 "grammar.y.pre"

776 i‡(!
$$
.
num_¨g
)

777 
	`yyîr‹
("argument ofÅype void must beÅhe onlyárgument.");

778 i‡((
$3
 & 
TYPE_MASK
Ë=
TYPE_VOID
 && !($3 & 
TYPE_MOD_CLASS
))

779 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

781 
$$
 = 
$1
;

782 
$$
.
num_¨g
++;

786 
ty≥_modifõr_li°
:

789 #
löe
 789 "grammar.y.pre"

790 
$$
 = 0;

792 | 
L_TYPE_MODIFIER
 
ty≥_modifõr_li°


794 #
löe
 793 "grammar.y.pre"

795 
acc_mod
;

797 
$$
 = 
$1
 | 
$2
;

799 
acc_mod
 = (
$$
 & 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

800 i‡(
acc_mod
 & (acc_mod - 1)) {

801 
buf
[256];

802 *
íd
 = 
	`EndOf
(
buf
);

803 *
p
;

805 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

806 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, 
$$
);

807 
p
 = 
	`°Ωut
’, 
íd
, ") ");

808 
	`yyîr‹
(
buf
);

809 
$$
 = 
DECL_PUBLIC
;

814 
ty≥
:

815 
ty≥_modifõr_li°
 
›t_basic_ty≥


817 #
löe
 819 "grammar.y.pre"

818 
$$
 = (
$1
 << 16Ë| 
$2
;

819 
cuºít_ty≥
 = 
$$
;

823 
ˇ°
:

824 '(' 
basic_ty≥
 
›ti⁄Æ_°¨
 ')'

826 #
löe
 827 "grammar.y.pre"

827 
$$
 = 
$2
 | 
$3
;

831 
›t_basic_ty≥
:

832 
basic_ty≥


835 #
löe
 835 "grammar.y.pre"

836 
$$
 = 
TYPE_UNKNOWN
;

840 
«me_li°
:

841 
√w_«me


842 | 
√w_«me
 ',' 
«me_li°


845 
√w_«me
:

846 
›ti⁄Æ_°¨
 
idítifõr


848 #
löe
 847 "grammar.y.pre"

849 i‡(
cuºít_ty≥
 & (
FUNC_VARARGS
 << 16)){

850 
	`yyîr‹
("IllegalÅo declare varargs variable.");

851 
cuºít_ty≥
 &~(
FUNC_VARARGS
 << 16);

858 i‡(
cuºít_ty≥
 & 0xffff0000){

859 
cuºít_ty≥
 = (current_type >> 16) | (current_type & 0xffff);

862 
cuºít_ty≥
 |
globÆ_modifõrs
;

864 i‡(!(
cuºít_ty≥
 & 
DECL_ACCESS
)Ëcuºít_ty≥ |
DECL_PUBLIC
;

866 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

867 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

869 
	`deföe_√w_v¨übÀ
(
$2
, 
cuºít_ty≥
 | 
$1
);

870 
	`s¸©ch_‰ì
(
$2
);

872 | 
›ti⁄Æ_°¨
 
idítifõr
 
L_ASSIGN
 
ex¥0


874 #
löe
 872 "grammar.y.pre"

875 
∑r£_node_t
 *
ex¥
, *
√wnode
;

876 
ty≥
;

878 i‡(
cuºít_ty≥
 & (
FUNC_VARARGS
 << 16)){

879 
	`yyîr‹
("IllegalÅo declare varargs variable.");

880 
cuºít_ty≥
 &~(
FUNC_VARARGS
 << 16);

883 i‡(
cuºít_ty≥
 & 0xffff0000){

884 
cuºít_ty≥
 = (current_type >> 16) | (current_type & 0xffff);

887 
cuºít_ty≥
 |
globÆ_modifõrs
;

889 i‡(!(
cuºít_ty≥
 & 
DECL_ACCESS
)Ëcuºít_ty≥ |
DECL_PUBLIC
;

891 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

892 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

894 i‡(
$3
 !
F_ASSIGN
)

895 
	`yyîr‹
("Only '=' isÜegal in initializers.");

899 i‡(
cuºít_ty≥
) {

900 
ty≥
 = (
cuºít_ty≥
 | 
$1
Ë& ~
DECL_MODS
;

901 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

902 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

903 i‡(!
	`com∑tibÀ_ty≥s
(
ty≥
, 
$4
->type)) {

904 
buff
[256];

905 *
íd
 = 
	`EndOf
(
buff
);

906 *
p
;

908 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

909 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, 
$4
->type);

910 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

911 
p
 = 
	`°Ωut
’, 
íd
, 
$2
);

912 
	`yyîr‹
(
buff
);

915 
$4
 = 
	`do_¥omŸi⁄s
($4, 
ty≥
);

917 
	`CREATE_BINARY_OP
(
ex¥
, 
F_VOID_ASSIGN
, 0, 
$4
, 0);

918 
	`CREATE_OPCODE_1
(
ex¥
->
r
.ex¥, 
F_GLOBAL_LVALUE
, 0,

919 
	`deföe_√w_v¨übÀ
(
$2
, 
cuºít_ty≥
 | 
$1
));

920 
√wnode
 = 
comp_åìs
[
TREE_INIT
];

921 
	`CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
], 0,

922 
√wnode
, 
ex¥
);

923 
	`s¸©ch_‰ì
(
$2
);

927 
block
:

928 '{' 
loˇl_de˛¨©i⁄s
 
°©emíts
 '}'

930 #
löe
 927 "grammar.y.pre"

931 i‡(
$2
.
node
 && 
$3
) {

932 
	`CREATE_STATEMENTS
(
$$
.
node
, 
$2
.node, 
$3
);

933 } 
$$
.
node
 = (
$2
.nodê? $2.nodê: 
$3
);

934 
$$
.
num
 = 
$2
.num;

938 
de˛_block
: 
block
 | | 
f‹óch
 ;

940 
loˇl_de˛¨©i⁄s
:

943 #
löe
 939 "grammar.y.pre"

944 
$$
.
node
 = 0;

945 
$$
.
num
 = 0;

947 | 
loˇl_de˛¨©i⁄s
 
basic_ty≥


949 #
löe
 944 "grammar.y.pre"

950 i‡(
$2
 =
TYPE_VOID
)

951 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

955 
cuºít_ty≥
 = 
$2
;

957 
loˇl_«me_li°
 ';'

959 #
löe
 953 "grammar.y.pre"

960 i‡(
$1
.
node
 && 
$4
.node) {

961 
	`CREATE_STATEMENTS
(
$$
.
node
, 
$1
.node, 
$4
.node);

962 } 
$$
.
node
 = (
$1
.nodê? $1.nodê: 
$4
.node);

963 
$$
.
num
 = 
$1
.num + 
$4
.num;

968 
√w_loˇl_def
:

969 
›ti⁄Æ_°¨
 
√w_loˇl_«me


971 #
löe
 964 "grammar.y.pre"

972 i‡(
cuºít_ty≥
 & 
LOCAL_MOD_REF
) {

973 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

974 
cuºít_ty≥
 &~
LOCAL_MOD_REF
;

976 
	`add_loˇl_«me
(
$2
, 
cuºít_ty≥
 | 
$1
 | 
LOCAL_MOD_UNUSED
);

978 
	`s¸©ch_‰ì
(
$2
);

979 
$$
 = 0;

981 | 
›ti⁄Æ_°¨
 
√w_loˇl_«me
 
L_ASSIGN
 
ex¥0


983 #
löe
 975 "grammar.y.pre"

984 
ty≥
 = (
cuºít_ty≥
 | 
$1
Ë& ~
DECL_MODS
;

986 i‡(
cuºít_ty≥
 & 
LOCAL_MOD_REF
) {

987 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

988 
cuºít_ty≥
 &~
LOCAL_MOD_REF
;

989 
ty≥
 &~
LOCAL_MOD_REF
;

992 i‡(
$3
 !
F_ASSIGN
)

993 
	`yyîr‹
("Only '=' isállowed in initializers.");

994 i‡(!
	`com∑tibÀ_ty≥s
(
$4
->
ty≥
,Åype)) {

995 
buff
[256];

996 *
íd
 = 
	`EndOf
(
buff
);

997 *
p
;

999 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

1000 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, 
$4
->type);

1001 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

1002 
p
 = 
	`°Ωut
’, 
íd
, 
$2
);

1004 
	`yyîr‹
(
buff
);

1007 
$4
 = 
	`do_¥omŸi⁄s
($4, 
ty≥
);

1009 
	`CREATE_UNARY_OP_1
(
$$
, 
F_VOID_ASSIGN_LOCAL
, 0, 
$4
,

1010 
	`add_loˇl_«me
(
$2
, 
cuºít_ty≥
 | 
$1
 | 
LOCAL_MOD_UNUSED
));

1011 
	`s¸©ch_‰ì
(
$2
);

1015 
sögÀ_√w_loˇl_def
:

1016 
¨g_ty≥
 
›ti⁄Æ_°¨
 
√w_loˇl_«me


1018 #
löe
 1009 "grammar.y.pre"

1019 i‡(
$1
 =
TYPE_VOID
)

1020 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

1022 
$$
 = 
	`add_loˇl_«me
(
$3
, 
$1
 | 
$2
);

1023 
	`s¸©ch_‰ì
(
$3
);

1027 
sögÀ_√w_loˇl_def_wôh_öô
:

1028 
sögÀ_√w_loˇl_def
 
L_ASSIGN
 
ex¥0


1030 #
löe
 1020 "grammar.y.pre"

1031 
ty≥
 = 
ty≥_of_loˇls_±r
[
$1
];

1033 i‡(
ty≥
 & 
LOCAL_MOD_REF
) {

1034 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

1035 
ty≥_of_loˇls_±r
[
$1
] &~
LOCAL_MOD_REF
;

1037 
ty≥
 &~
LOCAL_MODS
;

1039 i‡(
$2
 !
F_ASSIGN
)

1040 
	`yyîr‹
("Only '=' isállowed in initializers.");

1041 i‡(!
	`com∑tibÀ_ty≥s
(
$3
->
ty≥
,Åype)) {

1042 
buff
[256];

1043 *
íd
 = 
	`EndOf
(
buff
);

1044 *
p
;

1046 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

1047 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, 
$3
->type);

1048 
p
 = 
	`°Ωut
’, 
íd
, " when initializing.");

1049 
	`yyîr‹
(
buff
);

1052 
$3
 = 
	`do_¥omŸi⁄s
($3, 
ty≥
);

1055 
	`CREATE_BINARY_OP
(
$$
, 
F_ASSIGN
, 0, 
$3
, 0);

1056 
	`CREATE_OPCODE_1
(
$$
->
r
.
ex¥
, 
F_LOCAL_LVALUE
, 0, 
$1
);

1060 
loˇl_«me_li°
:

1061 
√w_loˇl_def


1063 #
löe
 1052 "grammar.y.pre"

1064 
$$
.
node
 = 
$1
;

1065 
$$
.
num
 = 1;

1067 | 
√w_loˇl_def
 ',' 
loˇl_«me_li°


1069 #
löe
 1057 "grammar.y.pre"

1070 i‡(
$1
 && 
$3
.
node
) {

1071 
	`CREATE_STATEMENTS
(
$$
.
node
, 
$1
, 
$3
.node);

1072 } 
$$
.
node
 = (
$1
 ? $1 : 
$3
.node);

1073 
$$
.
num
 = 1 + 
$3
.num;

1077 
°©emíts
:

1080 #
löe
 1067 "grammar.y.pre"

1081 
$$
 = 0;

1083 | 
°©emít
 
°©emíts


1085 #
löe
 1071 "grammar.y.pre"

1086 i‡(
$1
 && 
$2
) {

1087 
	`CREATE_STATEMENTS
(
$$
, 
$1
, 
$2
);

1088 } 
$$
 = (
$1
 ? $1 : 
$2
);

1090 | 
îr‹
 ';'

1092 #
löe
 1077 "grammar.y.pre"

1093 
$$
 = 0;

1097 
°©emít
:

1098 
comma_ex¥
 ';'

1100 #
löe
 1084 "grammar.y.pre"

1101 
$$
 = 
	`p›_vÆue
(
$1
);

1102 #
ifdef
 
DEBUG


1104 
∑r£_node_t
 *
ª∂a˚mít
;

1105 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, 
$$
, 0);

1106 
	`CREATE_OPCODE
(
ª∂a˚mít
->
r
.
ex¥
, 
F_BREAK_POINT
, 0);

1107 
$$
 = 
ª∂a˚mít
;

1109 #
ídif


1111 | 
c⁄d


1116 | 
de˛_block


1118 #
löe
 1101 "grammar.y.pre"

1119 
$$
 = 
$1
.
node
;

1120 
	`p›_n_loˇls
(
$1
.
num
);

1124 #
löe
 1106 "grammar.y.pre"

1125 
$$
 = 0;

1127 | 
L_BREAK
 ';'

1129 #
löe
 1110 "grammar.y.pre"

1130 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
) {

1131 
	`yyîr‹
("Cannot break out of catch { } orÅime_expression { }");

1132 
$$
 = 0;

1134 i‡(
c⁄ãxt
 & 
SWITCH_CONTEXT
) {

1135 
	`CREATE_CONTROL_JUMP
(
$$
, 
CJ_BREAK_SWITCH
);

1137 i‡(
c⁄ãxt
 & 
LOOP_CONTEXT
) {

1138 
	`CREATE_CONTROL_JUMP
(
$$
, 
CJ_BREAK
);

1139 i‡(
c⁄ãxt
 & 
LOOP_FOREACH
) {

1140 
∑r£_node_t
 *
ª∂a˚
;

1141 
	`CREATE_STATEMENTS
(
ª∂a˚
, 0, 
$$
);

1142 
	`CREATE_OPCODE
(
ª∂a˚
->
l
.
ex¥
, 
F_EXIT_FOREACH
, 0);

1143 
$$
 = 
ª∂a˚
;

1146 
	`yyîr‹
("break statement outsideÜoop");

1147 
$$
 = 0;

1150 | 
L_CONTINUE
 ';'

1152 #
löe
 1132 "grammar.y.pre"

1153 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
)

1154 
	`yyîr‹
("Cannot continue out of catch { } orÅime_expression { }");

1156 i‡(!(
c⁄ãxt
 & 
LOOP_CONTEXT
))

1157 
	`yyîr‹
("continue statement outsideÜoop");

1158 
	`CREATE_CONTROL_JUMP
(
$$
, 
CJ_CONTINUE
);

1163 
L_WHILE
 '(' 
comma_ex¥
 ')'

1165 #
löe
 1144 "grammar.y.pre"

1166 
$
<
numbî
>1 = 
c⁄ãxt
;

1167 
c⁄ãxt
 = 
LOOP_CONTEXT
;

1169 
°©emít


1171 #
löe
 1149 "grammar.y.pre"

1172 
	`CREATE_LOOP
(
$$
, 1, 
$6
, 0, 
	`›timize_lo›_ã°
(
$3
));

1173 
c⁄ãxt
 = 
$
<
numbî
>1;

1178 
L_DO


1180 #
löe
 1157 "grammar.y.pre"

1181 
$
<
numbî
>1 = 
c⁄ãxt
;

1182 
c⁄ãxt
 = 
LOOP_CONTEXT
;

1184 
°©emít
 
L_WHILE
 '(' 
comma_ex¥
 ')' ';'

1186 #
löe
 1162 "grammar.y.pre"

1187 
	`CREATE_LOOP
(
$$
, 0, 
$3
, 0, 
	`›timize_lo›_ã°
(
$6
));

1188 
c⁄ãxt
 = 
$
<
numbî
>1;

1193 
L_FOR
 '(' 
fú°_f‹_ex¥
 ';' 
f‹_ex¥
 ';' for_expr ')'

1195 #
löe
 1170 "grammar.y.pre"

1196 
$3
.
node
 = 
	`p›_vÆue
($3.node);

1197 
$
<
numbî
>1 = 
c⁄ãxt
;

1198 
c⁄ãxt
 = 
LOOP_CONTEXT
;

1200 
°©emít


1202 #
löe
 1176 "grammar.y.pre"

1203 
$$
.
num
 = 
$3
.num;

1205 
$7
 = 
	`p›_vÆue
($7);

1206 i‡(
$7
 && 
	`IS_NODE
($7, 
NODE_UNARY_OP
, 
F_INC
)

1207 && 
	`IS_NODE
(
$7
->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

1208 
lv¨
 = 
$7
->
r
.
ex¥
->
l
.
numbî
;

1209 
	`CREATE_OPCODE_1
(
$7
, 
F_LOOP_INCR
, 0, 
lv¨
);

1212 
	`CREATE_STATEMENTS
(
$$
.
node
, 
$3
.node, 0);

1213 
	`CREATE_LOOP
(
$$
.
node
->
r
.
ex¥
, 1, 
$10
, 
$7
, 
	`›timize_lo›_ã°
(
$5
));

1215 
c⁄ãxt
 = 
$
<
numbî
>1;

1219 
f‹óch_v¨
: 
L_DEFINED_NAME


1221 #
löe
 1194 "grammar.y.pre"

1222 i‡(
$1
->
dn
.
loˇl_num
 != -1) {

1223 
	`CREATE_OPCODE_1
(
$$
.
node
, 
F_LOCAL_LVALUE
, 0, 
$1
->
dn
.
loˇl_num
);

1224 
ty≥_of_loˇls_±r
[
$1
->
dn
.
loˇl_num
] &~
LOCAL_MOD_UNUSED
;

1226 i‡(
$1
->
dn
.
globÆ_num
 != -1) {

1227 
	`CREATE_OPCODE_1
(
$$
.
node
, 
F_GLOBAL_LVALUE
, 0, 
$1
->
dn
.
globÆ_num
);

1229 
buf
[256];

1230 *
íd
 = 
	`EndOf
(
buf
);

1231 *
p
;

1233 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

1234 
p
 = 
	`°Ωut
’, 
íd
, 
$1
->
«me
);

1235 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

1236 
	`yyîr‹
(
buf
);

1237 
	`CREATE_OPCODE_1
(
$$
.
node
, 
F_GLOBAL_LVALUE
, 0, 0);

1239 
$$
.
num
 = 0;

1241 | 
sögÀ_√w_loˇl_def


1243 #
löe
 1215 "grammar.y.pre"

1244 i‡(
ty≥_of_loˇls_±r
[
$1
] & 
LOCAL_MOD_REF
) {

1245 
	`CREATE_OPCODE_1
(
$$
.
node
, 
F_REF_LVALUE
, 0, 
$1
);

1247 
	`CREATE_OPCODE_1
(
$$
.
node
, 
F_LOCAL_LVALUE
, 0, 
$1
);

1248 
ty≥_of_loˇls_±r
[
$1
] &~
LOCAL_MOD_UNUSED
;

1250 
$$
.
num
 = 1;

1252 | 
L_IDENTIFIER


1254 #
löe
 1225 "grammar.y.pre"

1255 
buf
[256];

1256 *
íd
 = 
	`EndOf
(
buf
);

1257 *
p
;

1259 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

1260 
p
 = 
	`°Ωut
’, 
íd
, 
$1
);

1261 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

1262 
	`yyîr‹
(
buf
);

1263 
	`CREATE_OPCODE_1
(
$$
.
node
, 
F_GLOBAL_LVALUE
, 0, 0);

1264 
	`s¸©ch_‰ì
(
$1
);

1265 
$$
.
num
 = 0;

1269 
f‹óch_v¨s
:

1270 
f‹óch_v¨


1272 #
löe
 1242 "grammar.y.pre"

1273 
	`CREATE_FOREACH
(
$$
.
node
, 
$1
.node, 0);

1274 
$$
.
num
 = 
$1
.num;

1276 | 
f‹óch_v¨
 ',' foreach_var

1278 #
löe
 1247 "grammar.y.pre"

1279 
	`CREATE_FOREACH
(
$$
.
node
, 
$1
.node, 
$3
.node);

1280 
$$
.
num
 = 
$1
.num + 
$3
.num;

1281 i‡(
$1
.
node
->
v
.
numbî
 =
F_REF_LVALUE
)

1282 
	`yyîr‹
("Mapping key mayÇot beáÑeference in foreach()");

1286 
f‹óch
:

1287 
L_FOREACH
 '(' 
f‹óch_v¨s
 
L_IN
 
ex¥0
 ')'

1289 #
löe
 1257 "grammar.y.pre"

1290 
$3
.
node
->
v
.
ex¥
 = 
$5
;

1291 
$
<
numbî
>1 = 
c⁄ãxt
;

1292 
c⁄ãxt
 = 
LOOP_CONTEXT
 | 
LOOP_FOREACH
;

1294 
°©emít


1296 #
löe
 1263 "grammar.y.pre"

1297 
$$
.
num
 = 
$3
.num;

1299 
	`CREATE_STATEMENTS
(
$$
.
node
, 
$3
.node, 0);

1300 
	`CREATE_LOOP
(
$$
.
node
->
r
.
ex¥
, 2, 
$8
, 0, 0);

1301 
	`CREATE_OPCODE
(
$$
.
node
->
r
.
ex¥
->r.ex¥, 
F_NEXT_FOREACH
, 0);

1303 
c⁄ãxt
 = 
$
<
numbî
>1;

1307 
f‹_ex¥
:

1310 #
löe
 1276 "grammar.y.pre"

1311 
$$
 = 0;

1313 | 
comma_ex¥


1316 
fú°_f‹_ex¥
:

1317 
f‹_ex¥


1319 #
löe
 1284 "grammar.y.pre"

1320 
$$
.
node
 = 
$1
;

1321 
$$
.
num
 = 0;

1323 | 
sögÀ_√w_loˇl_def_wôh_öô


1325 #
löe
 1289 "grammar.y.pre"

1326 
$$
.
node
 = 
$1
;

1327 
$$
.
num
 = 1;

1332 
L_SWITCH
 '(' 
comma_ex¥
 ')'

1334 #
löe
 1297 "grammar.y.pre"

1335 
$
<
numbî
>1 = 
c⁄ãxt
;

1336 
c⁄ãxt
 &
LOOP_CONTEXT
;

1337 
c⁄ãxt
 |
SWITCH_CONTEXT
;

1338 
$
<
numbî
>2 = 
mem_block
[
A_CASES
].
cuºít_size
;

1340 '{' 
loˇl_de˛¨©i⁄s
 
swôch_block
 '}'

1342 #
löe
 1304 "grammar.y.pre"

1343 
∑r£_node_t
 *
node1
, *
node2
;

1345 i‡(
$9
) {

1346 
	`CREATE_STATEMENTS
(
node1
, 
$8
, 
$9
);

1347 } 
node1
 = 
$8
;

1349 i‡(
c⁄ãxt
 & 
SWITCH_STRINGS
) {

1350 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_STRINGS
);

1351 } i‡(
c⁄ãxt
 & 
SWITCH_RANGES
) {

1352 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_RANGES
);

1354 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_NUMBERS
);

1357 
node2
->
l
.
ex¥
 = 
$3
;

1358 
node2
->
r
.
ex¥
 = 
node1
;

1359 
	`¥ï¨e_ˇ£s
(
node2
, 
$
<
numbî
>2);

1360 
c⁄ãxt
 = 
$
<
numbî
>1;

1361 
$$
 = 
node2
;

1362 
	`p›_n_loˇls
(
$7
.
num
);

1366 
swôch_block
:

1367 
swôch_block


1369 #
löe
 1330 "grammar.y.pre"

1370 i‡(
$2
){

1371 
	`CREATE_STATEMENTS
(
$$
, 
$1
, 
$2
);

1372 } 
$$
 = 
$1
;

1374 | 
°©emít
 
swôch_block


1376 #
löe
 1336 "grammar.y.pre"

1377 i‡(
$2
){

1378 
	`CREATE_STATEMENTS
(
$$
, 
$1
, 
$2
);

1379 } 
$$
 = 
$1
;

1383 #
löe
 1342 "grammar.y.pre"

1384 
$$
 = 0;

1390 
L_CASE
 
ˇ£_œbñ
 ':'

1392 #
löe
 1350 "grammar.y.pre"

1393 
$$
 = 
$2
;

1394 
$$
->
v
.
ex¥
 = 0;

1396 
	`add_to_mem_block
(
A_CASES
, (*)&(
$2
), ($2));

1398 | 
L_CASE
 
ˇ£_œbñ
 
L_RANGE
 case_label ':'

1400 #
löe
 1357 "grammar.y.pre"

1401 i‡–
$2
->
köd
 !
NODE_CASE_NUMBER


1402 || 
$4
->
köd
 !
NODE_CASE_NUMBER
 )

1403 
	`yyîr‹
("String caseÜabelsÇotállowedásÑange bounds");

1404 i‡(
$2
->
r
.
numbî
 > 
$4
->r.number) ;

1406 
c⁄ãxt
 |
SWITCH_RANGES
;

1408 
$$
 = 
$2
;

1409 
$$
->
v
.
ex¥
 = 
$4
;

1411 
	`add_to_mem_block
(
A_CASES
, (*)&(
$2
), ($2));

1413 | 
L_DEFAULT
 ':'

1415 #
löe
 1371 "grammar.y.pre"

1416 i‡(
c⁄ãxt
 & 
SWITCH_DEFAULT
) {

1417 
	`yyîr‹
("Duplicate default");

1418 
$$
 = 0;

1421 
$$
 = 
	`√w_node
();

1422 
$$
->
köd
 = 
NODE_DEFAULT
;

1423 
$$
->
v
.
ex¥
 = 0;

1424 
	`add_to_mem_block
(
A_CASES
, (*)&(
$$
), ($$));

1425 
c⁄ãxt
 |
SWITCH_DEFAULT
;

1429 
ˇ£_œbñ
:

1430 
c⁄°™t


1432 #
löe
 1387 "grammar.y.pre"

1433 i‡((
c⁄ãxt
 & 
SWITCH_STRINGS
Ë&& 
$1
)

1434 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

1436 i‡(
$1
Ë
c⁄ãxt
 |
SWITCH_NUMBERS
;

1438 
$$
 = 
	`√w_node
();

1439 
$$
->
köd
 = 
NODE_CASE_NUMBER
;

1440 
$$
->
r
.
ex¥
 = (
∑r£_node_t
 *)
$1
;

1442 | 
°rög_c⁄1


1444 #
löe
 1398 "grammar.y.pre"

1445 
°r
;

1447 
°r
 = 
	`°‹e_¥og_°rög
(
$1
);

1448 
	`s¸©ch_‰ì
(
$1
);

1449 i‡(
c⁄ãxt
 & 
SWITCH_NUMBERS
)

1450 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

1451 
c⁄ãxt
 |
SWITCH_STRINGS
;

1452 
$$
 = 
	`√w_node
();

1453 
$$
->
köd
 = 
NODE_CASE_STRING
;

1454 
$$
->
r
.
numbî
 = 
°r
;

1458 
c⁄°™t
:

1459 
c⁄°™t
 '|' constant

1461 #
löe
 1414 "grammar.y.pre"

1462 
$$
 = 
$1
 | 
$3
;

1464 | 
c⁄°™t
 '^' constant

1466 #
löe
 1418 "grammar.y.pre"

1467 
$$
 = 
$1
 ^ 
$3
;

1469 | 
c⁄°™t
 '&' constant

1471 #
löe
 1422 "grammar.y.pre"

1472 
$$
 = 
$1
 & 
$3
;

1474 | 
c⁄°™t
 
L_EQ
 constant

1476 #
löe
 1426 "grammar.y.pre"

1477 
$$
 = 
$1
 =
$3
;

1479 | 
c⁄°™t
 
L_NE
 constant

1481 #
löe
 1430 "grammar.y.pre"

1482 
$$
 = 
$1
 !
$3
;

1484 | 
c⁄°™t
 
L_ORDER
 constant

1486 #
löe
 1434 "grammar.y.pre"

1487 
$2
){

1488 
F_GE
: 
$$
 = 
$1
 >
$3
; ;

1489 
F_LE
: 
$$
 = 
$1
 <
$3
; ;

1490 
F_GT
: 
$$
 = 
$1
 > 
$3
; ;

1493 | 
c⁄°™t
 '<' constant

1495 #
löe
 1442 "grammar.y.pre"

1496 
$$
 = 
$1
 < 
$3
;

1498 | 
c⁄°™t
 
L_LSH
 constant

1500 #
löe
 1446 "grammar.y.pre"

1501 
$$
 = 
$1
 << 
$3
;

1503 | 
c⁄°™t
 
L_RSH
 constant

1505 #
löe
 1450 "grammar.y.pre"

1506 
$$
 = 
$1
 >> 
$3
;

1508 | 
c⁄°™t
 '+' constant

1510 #
löe
 1454 "grammar.y.pre"

1511 
$$
 = 
$1
 + 
$3
;

1513 | 
c⁄°™t
 '-' constant

1515 #
löe
 1458 "grammar.y.pre"

1516 
$$
 = 
$1
 - 
$3
;

1518 | 
c⁄°™t
 '*' constant

1520 #
löe
 1462 "grammar.y.pre"

1521 
$$
 = 
$1
 * 
$3
;

1523 | 
c⁄°™t
 '%' constant

1525 #
löe
 1466 "grammar.y.pre"

1526 i‡(
$3
Ë
$$
 = 
$1
 % $3; 
	`yyîr‹
("Modulo by zero");

1528 | 
c⁄°™t
 '/' constant

1530 #
löe
 1470 "grammar.y.pre"

1531 i‡(
$3
Ë
$$
 = 
$1
 / $3; 
	`yyîr‹
("Division by zero");

1533 | '(' 
c⁄°™t
 ')'

1535 #
löe
 1474 "grammar.y.pre"

1536 
$$
 = 
$2
;

1538 | 
L_NUMBER


1540 #
löe
 1478 "grammar.y.pre"

1541 
$$
 = 
$1
;

1543 | '-' 
L_NUMBER


1545 #
löe
 1482 "grammar.y.pre"

1546 
$$
 = -
$2
;

1548 | 
L_NOT
 
L_NUMBER


1550 #
löe
 1486 "grammar.y.pre"

1551 
$$
 = !
$2
;

1553 | '~' 
L_NUMBER


1555 #
löe
 1490 "grammar.y.pre"

1556 
$$
 = ~
$2
;

1560 
comma_ex¥
:

1561 
ex¥0


1563 #
löe
 1497 "grammar.y.pre"

1564 
$$
 = 
$1
;

1566 | 
comma_ex¥
 ',' 
ex¥0


1568 #
löe
 1501 "grammar.y.pre"

1569 
	`CREATE_TWO_VALUES
(
$$
, 
$3
->
ty≥
, 
	`p›_vÆue
(
$1
), $3);

1573 
ªf
:

1574 
L_REF


1577 
ex¥0
:

1578 
ªf
 
lvÆue


1580 #
löe
 1518 "grammar.y.pre"

1581 
›
;

1583 i‡(!(
c⁄ãxt
 & 
ARG_LIST
))

1584 
	`yyîr‹
("ref illegal outside functionárgumentÜist");

1586 
num_ªfs
++;

1588 
$2
->
köd
) {

1589 
NODE_PARAMETER_LVALUE
:

1590 
›
 = 
F_LOCAL_LVALUE
;

1592 
NODE_TERNARY_OP
:

1593 
NODE_OPCODE_1
:

1594 
NODE_UNARY_OP_1
:

1595 
NODE_BINARY_OP
:

1596 
›
 = 
$2
->
v
.
numbî
;

1597 i‡(
›
 > 
F_RINDEX_LVALUE
) {

1598 
	`yyîr‹
("IllegalÅo makeÑeferenceÅoÑange");

1602 
	`CREATE_UNARY_OP_1
(
$$
, 
F_MAKE_REF
, 
TYPE_ANY
, 
$2
, 
›
);

1605 
lvÆue
 
L_ASSIGN
 
ex¥0


1607 #
löe
 1545 "grammar.y.pre"

1608 
∑r£_node_t
 *
l
 = 
$1
, *
r
 = 
$3
;

1613 
	`CREATE_BINARY_OP
(
$$
, 
$2
, 
r
->
ty≥
,Ñ, 
l
);

1615 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
(
r
->
ty≥
, 
l
->type) &&

1616 !(
$2
 =
F_ADD_EQ


1617 && 
r
->
ty≥
 =
TYPE_STRING
 &&

1618 
	`COMP_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
))) {

1619 
buf
[256];

1620 *
íd
 = 
	`EndOf
(
buf
);

1621 *
p
;

1623 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badássignment ");

1624 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
l
->
ty≥
, 
r
->type);

1625 
p
 = 
	`°Ωut
’, 
íd
, ".");

1626 
	`yyîr‹
(
buf
);

1629 i‡(
$2
 =
F_ASSIGN
)

1630 
$$
->
l
.
ex¥
 = 
	`do_¥omŸi⁄s
(
r
,Ü->
ty≥
);

1632 | 
îr‹
 
L_ASSIGN
 
ex¥0


1634 #
löe
 1571 "grammar.y.pre"

1635 
	`yyîr‹
("Illegal LHS");

1636 
	`CREATE_ERROR
(
$$
);

1638 | 
ex¥0
 '?'Éx¥0 ':'Éx¥0 %
¥ec
 '?'

1640 #
löe
 1576 "grammar.y.pre"

1641 
∑r£_node_t
 *
p1
 = 
$3
, *
p2
 = 
$5
;

1643 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
(
p1
->
ty≥
, 
p2
->type)) {

1644 
buf
[256];

1645 *
íd
 = 
	`EndOf
(
buf
);

1646 *
p
;

1648 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Types in ?: doÇot match ");

1649 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
p1
->
ty≥
, 
p2
->type);

1650 
p
 = 
	`°Ωut
’, 
íd
, ".");

1651 
	`yyw¨n
(
buf
);

1655 i‡(
	`IS_NODE
(
$1
, 
NODE_UNARY_OP
, 
F_NOT
)) {

1657 
	`CREATE_IF
(
$$
, 
$1
->
r
.
ex¥
, 
p2
, 
p1
);

1659 
	`CREATE_IF
(
$$
, 
$1
, 
p1
, 
p2
);

1661 
$$
->
ty≥
 = ((
p1
->ty≥ =
p2
->ty≥Ë?Ö1->ty≥ : 
TYPE_ANY
);

1663 | 
ex¥0
 
L_LOR
Éxpr0

1665 #
löe
 1600 "grammar.y.pre"

1666 
	`CREATE_LAND_LOR
(
$$
, 
F_LOR
, 
$1
, 
$3
);

1667 i‡(
	`IS_NODE
(
$1
, 
NODE_LAND_LOR
, 
F_LOR
))

1668 
$1
->
köd
 = 
NODE_BRANCH_LINK
;

1670 | 
ex¥0
 
L_LAND
Éxpr0

1672 #
löe
 1606 "grammar.y.pre"

1673 
	`CREATE_LAND_LOR
(
$$
, 
F_LAND
, 
$1
, 
$3
);

1674 i‡(
	`IS_NODE
(
$1
, 
NODE_LAND_LOR
, 
F_LAND
))

1675 
$1
->
köd
 = 
NODE_BRANCH_LINK
;

1677 | 
ex¥0
 '|'Éxpr0

1679 #
löe
 1612 "grammar.y.pre"

1680 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

1682 i‡(
	`is_boﬁón
(
$1
Ë&& is_boﬁón(
$3
))

1683 
	`yyw¨n
("bitwise operation on boolean values.");

1684 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

1685 i‡(
t1
 !
t3
) {

1686 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

1687 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

1688 
buf
[256];

1689 *
íd
 = 
	`EndOf
(
buf
);

1690 *
p
;

1692 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for | ");

1693 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

1694 
p
 = 
	`°Ωut
’, 
íd
, ".");

1695 
	`yyîr‹
(
buf
);

1697 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

1699 
	`CREATE_BINARY_OP
(
$$
, 
F_OR
, 
t1
, 
$1
, 
$3
);

1701 
$$
 = 
	`bö¨y_öt_›
(
$1
, 
$3
, 
F_OR
, "|");

1703 | 
ex¥0
 '^'Éxpr0

1705 #
löe
 1637 "grammar.y.pre"

1706 
$$
 = 
	`bö¨y_öt_›
(
$1
, 
$3
, 
F_XOR
, "^");

1708 | 
ex¥0
 '&'Éxpr0

1710 #
löe
 1641 "grammar.y.pre"

1711 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

1712 i‡(
	`is_boﬁón
(
$1
Ë&& is_boﬁón(
$3
))

1713 
	`yyw¨n
("bitwise operation on boolean values.");

1714 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

1715 i‡(
t1
 !
t3
) {

1716 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

1717 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

1718 
buf
[256];

1719 *
íd
 = 
	`EndOf
(
buf
);

1720 *
p
;

1722 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for & ");

1723 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

1724 
p
 = 
	`°Ωut
’, 
íd
, ".");

1725 
	`yyîr‹
(
buf
);

1727 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

1729 
	`CREATE_BINARY_OP
(
$$
, 
F_AND
, 
t1
, 
$1
, 
$3
);

1730 } 
$$
 = 
	`bö¨y_öt_›
(
$1
, 
$3
, 
F_AND
, "&");

1732 | 
ex¥0
 
L_EQ
Éxpr0

1734 #
löe
 1664 "grammar.y.pre"

1735 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
(
$1
->
ty≥
, 
$3
->type)){

1736 
buf
[256];

1737 *
íd
 = 
	`EndOf
(
buf
);

1738 *
p
;

1740 
p
 = 
	`°Ωut
(
buf
, 
íd
, "==álways false because of incompatibleÅypes ");

1741 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
$1
->
ty≥
, 
$3
->type);

1742 
p
 = 
	`°Ωut
’, 
íd
, ".");

1743 
	`yyîr‹
(
buf
);

1746 i‡(
	`IS_NODE
(
$1
, 
NODE_NUMBER
, 0)) {

1747 
	`CREATE_UNARY_OP
(
$$
, 
F_NOT
, 
TYPE_NUMBER
, 
$3
);

1749 i‡(
	`IS_NODE
(
$3
, 
NODE_NUMBER
, 0)) {

1750 
	`CREATE_UNARY_OP
(
$$
, 
F_NOT
, 
TYPE_NUMBER
, 
$1
);

1752 
	`CREATE_BINARY_OP
(
$$
, 
F_EQ
, 
TYPE_NUMBER
, 
$1
, 
$3
);

1755 | 
ex¥0
 
L_NE
Éxpr0

1757 #
löe
 1686 "grammar.y.pre"

1758 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
(
$1
->
ty≥
, 
$3
->type)){

1759 
buf
[256];

1760 *
íd
 = 
	`EndOf
(
buf
);

1761 *
p
;

1763 
p
 = 
	`°Ωut
(
buf
, 
íd
, "!=álwaysÅrue because of incompatibleÅypes ");

1764 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
$1
->
ty≥
, 
$3
->type);

1765 
p
 = 
	`°Ωut
’, 
íd
, ".");

1766 
	`yyîr‹
(
buf
);

1768 
	`CREATE_BINARY_OP
(
$$
, 
F_NE
, 
TYPE_NUMBER
, 
$1
, 
$3
);

1770 | 
ex¥0
 
L_ORDER
Éxpr0

1772 #
löe
 1700 "grammar.y.pre"

1773 i‡(
exa˘_ty≥s
) {

1774 
t1
 = 
$1
->
ty≥
;

1775 
t3
 = 
$3
->
ty≥
;

1777 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

1778 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

1779 
buf
[256];

1780 *
íd
 = 
	`EndOf
(
buf
);

1781 *
p
;

1783 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '");

1784 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
(
$2
));

1785 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

1786 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

1787 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1788 
	`yyîr‹
(
buf
);

1789 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

1790 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

1791 
buf
[256];

1792 *
íd
 = 
	`EndOf
(
buf
);

1793 *
p
;

1795 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '");

1796 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
(
$2
));

1797 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

1798 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

1799 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1800 
	`yyîr‹
(
buf
);

1801 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

1802 
buf
[256];

1803 *
íd
 = 
	`EndOf
(
buf
);

1804 *
p
;

1806 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo ");

1807 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
(
$2
));

1808 
p
 = 
	`°Ωut
’, 
íd
, " doÇot have compatibleÅypes : ");

1809 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

1810 
	`yyîr‹
(
buf
);

1813 
	`CREATE_BINARY_OP
(
$$
, 
$2
, 
TYPE_NUMBER
, 
$1
, 
$3
);

1815 | 
ex¥0
 '<'Éxpr0

1817 #
löe
 1744 "grammar.y.pre"

1818 i‡(
exa˘_ty≥s
) {

1819 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

1821 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

1822 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

1823 
buf
[256];

1824 *
íd
 = 
	`EndOf
(
buf
);

1825 *
p
;

1827 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '<' : \"");

1828 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

1829 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1830 
	`yyîr‹
(
buf
);

1831 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

1832 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

1833 
buf
[200];

1834 *
íd
 = 
	`EndOf
(
buf
);

1835 *
p
;

1837 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '<' : \"");

1838 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

1839 
p
 = 
	`°Ωut
’, 
íd
, "\"");

1840 
	`yyîr‹
(
buf
);

1841 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

1842 
buf
[256];

1843 *
íd
 = 
	`EndOf
(
buf
);

1844 *
p
;

1846 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo < doÇot have compatibleÅypes : ");

1847 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

1848 
	`yyîr‹
(
buf
);

1851 
	`CREATE_BINARY_OP
(
$$
, 
F_LT
, 
TYPE_NUMBER
, 
$1
, 
$3
);

1853 | 
ex¥0
 
L_LSH
Éxpr0

1855 #
löe
 1781 "grammar.y.pre"

1856 
$$
 = 
	`bö¨y_öt_›
(
$1
, 
$3
, 
F_LSH
, "<<");

1858 | 
ex¥0
 
L_RSH
Éxpr0

1860 #
löe
 1785 "grammar.y.pre"

1861 
$$
 = 
	`bö¨y_öt_›
(
$1
, 
$3
, 
F_RSH
, ">>");

1863 | 
ex¥0
 '+'Éxpr0

1865 #
löe
 1789 "grammar.y.pre"

1866 
ªsu…_ty≥
;

1868 i‡(
exa˘_ty≥s
) {

1869 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

1871 i‡(
t1
 =
t3
){

1872 #
ifdef
 
CAST_CALL_OTHERS


1873 i‡(
t1
 =
TYPE_UNKNOWN
){

1874 
	`yyîr‹
("BadárgumentsÅo '+' (unknown vs unknown)");

1875 
ªsu…_ty≥
 = 
TYPE_ANY
;

1877 #
ídif


1878 
ªsu…_ty≥
 = 
t1
;

1880 i‡(
t1
 =
TYPE_ANY
) {

1881 i‡(
t3
 =
TYPE_FUNCTION
) {

1882 
	`yyîr‹
("BadÑightárgumentÅo '+' (function)");

1883 
ªsu…_ty≥
 = 
TYPE_ANY
;

1884 } 
ªsu…_ty≥
 = 
t3
;

1885 } i‡(
t3
 =
TYPE_ANY
) {

1886 i‡(
t1
 =
TYPE_FUNCTION
) {

1887 
	`yyîr‹
("BadÜeftárgumentÅo '+' (function)");

1888 
ªsu…_ty≥
 = 
TYPE_ANY
;

1889 } 
ªsu…_ty≥
 = 
t1
;

1891 
t1
) {

1892 
TYPE_STRING
:

1894 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_NUMBER
){

1895 
ªsu…_ty≥
 = 
TYPE_STRING
;

1896 } 
add_îr‹
;

1899 
TYPE_NUMBER
:

1901 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_STRING
)

1902 
ªsu…_ty≥
 = 
t3
;

1903 
add_îr‹
;

1906 
TYPE_REAL
:

1908 i‡(
t3
 =
TYPE_NUMBER
Ë
ªsu…_ty≥
 = 
TYPE_REAL
;

1909 i‡(
t3
 =
TYPE_STRING
Ë
ªsu…_ty≥
 = TYPE_STRING;

1910 
add_îr‹
;

1915 i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
) {

1916 
ªsu…_ty≥
 = 
TYPE_ANY
|
TYPE_MOD_ARRAY
;

1919 
add_îr‹
:

1921 
buf
[256];

1922 *
íd
 = 
	`EndOf
(
buf
);

1923 *
p
;

1925 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidárgumentÅypesÅo '+' ");

1926 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

1927 
	`yyîr‹
(
buf
);

1928 
ªsu…_ty≥
 = 
TYPE_ANY
;

1934 
ªsu…_ty≥
 = 
TYPE_ANY
;

1945 
$1
->
köd
) {

1946 
NODE_NUMBER
:

1948 i‡(
$1
->
v
.
numbî
 == 0 &&

1949 (
$3
->
ty≥
 =
TYPE_NUMBER
 || $3->ty≥ =
TYPE_REAL
)) {

1950 
$$
 = 
$3
;

1953 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

1954 
$$
 = 
$1
;

1955 
$1
->
v
.
numbî
 +
$3
->v.number;

1958 i‡(
$3
->
köd
 =
NODE_REAL
) {

1959 
$$
 = 
$3
;

1960 
$3
->
v
.
ªÆ
 +
$1
->v.
numbî
;

1964 i‡(
$3
->
ty≥
 !
TYPE_STRING
 && $3->ty≥ !
TYPE_ANY
)

1965 
	`CREATE_BINARY_OP
(
$$
, 
F_ADD
, 
ªsu…_ty≥
, 
$3
, 
$1
);

1967 
	`CREATE_BINARY_OP
(
$$
, 
F_ADD
, 
ªsu…_ty≥
, 
$1
, 
$3
);

1969 
NODE_REAL
:

1970 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

1971 
$$
 = 
$1
;

1972 
$1
->
v
.
ªÆ
 +
$3
->v.
numbî
;

1975 i‡(
$3
->
köd
 =
NODE_REAL
) {

1976 
$$
 = 
$1
;

1977 
$1
->
v
.
ªÆ
 +
$3
->v.real;

1981 i‡(
$3
->
ty≥
 !
TYPE_STRING
 && $3->ty≥ !
TYPE_ANY
)

1982 
	`CREATE_BINARY_OP
(
$$
, 
F_ADD
, 
ªsu…_ty≥
, 
$3
, 
$1
);

1984 
	`CREATE_BINARY_OP
(
$$
, 
F_ADD
, 
ªsu…_ty≥
, 
$1
, 
$3
);

1986 
NODE_STRING
:

1987 i‡(
$3
->
köd
 =
NODE_STRING
) {

1989 
n1
, 
n2
;

1990 *
√w
, *
s1
, *
s2
;

1991 
l
;

1993 
n1
 = 
$1
->
v
.
numbî
;

1994 
n2
 = 
$3
->
v
.
numbî
;

1995 
s1
 = 
	`PROG_STRING
(
n1
);

1996 
s2
 = 
	`PROG_STRING
(
n2
);

1997 
√w
 = (*)
	`DXALLOC
–(
l
 = 
	`°æí
(
s1
))+°æí(
s2
)+1, 
TAG_COMPILER
, "combine string" );

1998 
	`°r˝y
(
√w
, 
s1
);

1999 
	`°rˇt
(
√w
 + 
l
, 
s2
);

2001 i‡(
n1
 > 
n2
) {

2002 
	`‰ì_¥og_°rög
(
n1
); fªe_¥og_°rög(
n2
);

2004 
	`‰ì_¥og_°rög
(
n2
); fªe_¥og_°rög(
n1
);

2006 
$$
 = 
$1
;

2007 
$$
->
v
.
numbî
 = 
	`°‹e_¥og_°rög
(
√w
);

2008 
	`FREE
(
√w
);

2019 i‡(
	`IS_NODE
(
$3
, 
NODE_NUMBER
, 0) &&

2020 (
$1
->
ty≥
 =
TYPE_NUMBER
 || $1->ty≥ =
TYPE_REAL
)) {

2021 
$$
 = 
$1
;

2024 
	`CREATE_BINARY_OP
(
$$
, 
F_ADD
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2028 | 
ex¥0
 '-'Éxpr0

2030 #
löe
 1953 "grammar.y.pre"

2031 
ªsu…_ty≥
;

2033 i‡(
exa˘_ty≥s
) {

2034 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

2036 i‡(
t1
 =
t3
){

2037 
t1
){

2038 
TYPE_ANY
:

2039 
TYPE_NUMBER
:

2040 
TYPE_REAL
:

2041 
ªsu…_ty≥
 = 
t1
;

2044 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

2045 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

2046 
ªsu…_ty≥
 = 
TYPE_ANY
;

2047 } 
ªsu…_ty≥
 = 
t1
;

2049 } i‡(
t1
 =
TYPE_ANY
){

2050 
t3
){

2051 
TYPE_REAL
:

2052 
TYPE_NUMBER
:

2053 
ªsu…_ty≥
 = 
t3
;

2056 i‡(!(
t3
 & 
TYPE_MOD_ARRAY
)){

2057 
	`ty≥_îr‹
("Badárgumíànumbî 2Åÿ'-'", 
t3
);

2058 
ªsu…_ty≥
 = 
TYPE_ANY
;

2059 } 
ªsu…_ty≥
 = 
t3
;

2061 } i‡(
t3
 =
TYPE_ANY
){

2062 
t1
){

2063 
TYPE_REAL
:

2064 
TYPE_NUMBER
:

2065 
ªsu…_ty≥
 = 
t1
;

2068 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

2069 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

2070 
ªsu…_ty≥
 = 
TYPE_ANY
;

2071 } 
ªsu…_ty≥
 = 
t1
;

2073 } i‡((
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
) ||

2074 (
t3
 =
TYPE_REAL
 && 
t1
 =
TYPE_NUMBER
)){

2075 
ªsu…_ty≥
 = 
TYPE_REAL
;

2076 } i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
){

2077 
ªsu…_ty≥
 = 
TYPE_MOD_ARRAY
|
TYPE_ANY
;

2079 
buf
[256];

2080 *
íd
 = 
	`EndOf
(
buf
);

2081 *
p
;

2083 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '-' ");

2084 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

2085 
	`yyîr‹
(
buf
);

2086 
ªsu…_ty≥
 = 
TYPE_ANY
;

2088 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

2090 
$1
->
köd
) {

2091 
NODE_NUMBER
:

2092 i‡(
$1
->
v
.
numbî
 == 0) {

2093 
	`CREATE_UNARY_OP
(
$$
, 
F_NEGATE
, 
$3
->
ty≥
, $3);

2094 } i‡(
$3
->
köd
 =
NODE_NUMBER
) {

2095 
$$
 = 
$1
;

2096 
$1
->
v
.
numbî
 -
$3
->v.number;

2097 } i‡(
$3
->
köd
 =
NODE_REAL
) {

2098 
$$
 = 
$3
;

2099 
$3
->
v
.
ªÆ
 = 
$1
->v.
numbî
 - $3->v.real;

2101 
	`CREATE_BINARY_OP
(
$$
, 
F_SUBTRACT
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2104 
NODE_REAL
:

2105 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

2106 
$$
 = 
$1
;

2107 
$1
->
v
.
ªÆ
 -
$3
->v.
numbî
;

2108 } i‡(
$3
->
köd
 =
NODE_REAL
) {

2109 
$$
 = 
$1
;

2110 
$1
->
v
.
ªÆ
 -
$3
->v.real;

2112 
	`CREATE_BINARY_OP
(
$$
, 
F_SUBTRACT
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2117 i‡(
	`IS_NODE
(
$3
, 
NODE_NUMBER
, 0)) {

2118 
$$
 = 
$1
;

2120 
	`CREATE_BINARY_OP
(
$$
, 
F_SUBTRACT
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2123 | 
ex¥0
 '*'Éxpr0

2125 #
löe
 2047 "grammar.y.pre"

2126 
ªsu…_ty≥
;

2128 i‡(
exa˘_ty≥s
){

2129 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

2131 i‡(
t1
 =
t3
){

2132 
t1
){

2133 
TYPE_MAPPING
:

2134 
TYPE_ANY
:

2135 
TYPE_NUMBER
:

2136 
TYPE_REAL
:

2137 
ªsu…_ty≥
 = 
t1
;

2140 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'*'", 
t1
);

2141 
ªsu…_ty≥
 = 
TYPE_ANY
;

2143 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

2144 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

2145 
t
){

2146 
TYPE_NUMBER
:

2147 
TYPE_REAL
:

2148 
TYPE_MAPPING
:

2149 
ªsu…_ty≥
 = 
t
;

2152 
	`ty≥_îr‹
((
t1
 =
TYPE_ANY
) ?

2155 
t
);

2156 
ªsu…_ty≥
 = 
TYPE_ANY
;

2158 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

2159 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)){

2160 
ªsu…_ty≥
 = 
TYPE_REAL
;

2162 
buf
[256];

2163 *
íd
 = 
	`EndOf
(
buf
);

2164 *
p
;

2166 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '*' ");

2167 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

2168 
	`yyîr‹
(
buf
);

2169 
ªsu…_ty≥
 = 
TYPE_ANY
;

2171 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

2173 
$1
->
köd
) {

2174 
NODE_NUMBER
:

2175 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

2176 
$$
 = 
$1
;

2177 
$$
->
v
.
numbî
 *
$3
->v.number;

2180 i‡(
$3
->
köd
 =
NODE_REAL
) {

2181 
$$
 = 
$3
;

2182 
$3
->
v
.
ªÆ
 *
$1
->v.
numbî
;

2185 
	`CREATE_BINARY_OP
(
$$
, 
F_MULTIPLY
, 
ªsu…_ty≥
, 
$3
, 
$1
);

2187 
NODE_REAL
:

2188 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

2189 
$$
 = 
$1
;

2190 
$1
->
v
.
ªÆ
 *
$3
->v.
numbî
;

2193 i‡(
$3
->
köd
 =
NODE_REAL
) {

2194 
$$
 = 
$1
;

2195 
$1
->
v
.
ªÆ
 *
$3
->v.real;

2198 
	`CREATE_BINARY_OP
(
$$
, 
F_MULTIPLY
, 
ªsu…_ty≥
, 
$3
, 
$1
);

2201 
	`CREATE_BINARY_OP
(
$$
, 
F_MULTIPLY
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2204 | 
ex¥0
 '%'Éxpr0

2206 #
löe
 2127 "grammar.y.pre"

2207 
$$
 = 
	`bö¨y_öt_›
(
$1
, 
$3
, 
F_MOD
, "%");

2209 | 
ex¥0
 '/'Éxpr0

2211 #
löe
 2131 "grammar.y.pre"

2212 
ªsu…_ty≥
;

2214 i‡(
exa˘_ty≥s
){

2215 
t1
 = 
$1
->
ty≥
, 
t3
 = 
$3
->type;

2217 i‡(
t1
 =
t3
){

2218 
t1
){

2219 
TYPE_NUMBER
:

2220 
TYPE_REAL
:

2221 
TYPE_ANY
:

2222 
ªsu…_ty≥
 = 
t1
;

2225 
	`ty≥_îr‹
("Badárgumíà1Åÿ'/'", 
t1
);

2226 
ªsu…_ty≥
 = 
TYPE_ANY
;

2228 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

2229 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

2230 i‡(
t
 =
TYPE_REAL
 ||Å =
TYPE_NUMBER
)

2231 
ªsu…_ty≥
 = 
t
;

2233 
	`ty≥_îr‹
(
t1
 =
TYPE_ANY
 ?

2235 "Badárgumíà1Åÿ'/'", 
t
);

2236 
ªsu…_ty≥
 = 
TYPE_ANY
;

2238 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

2239 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)) {

2240 
ªsu…_ty≥
 = 
TYPE_REAL
;

2242 
buf
[256];

2243 *
íd
 = 
	`EndOf
(
buf
);

2244 *
p
;

2246 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '/' ");

2247 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

2248 
	`yyîr‹
(
buf
);

2249 
ªsu…_ty≥
 = 
TYPE_ANY
;

2251 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

2254 
$1
->
köd
) {

2255 
NODE_NUMBER
:

2256 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

2257 i‡(
$3
->
v
.
numbî
 == 0) {

2258 
	`yyîr‹
("Divide by zero in constant");

2259 
$$
 = 
$1
;

2262 
$$
 = 
$1
;

2263 
$1
->
v
.
numbî
 /
$3
->v.number;

2266 i‡(
$3
->
köd
 =
NODE_REAL
) {

2267 i‡(
$3
->
v
.
ªÆ
 == 0.0) {

2268 
	`yyîr‹
("Divide by zero in constant");

2269 
$$
 = 
$1
;

2272 
$$
 = 
$3
;

2273 
$3
->
v
.
ªÆ
 = (
$1
->v.
numbî
 / $3->v.real);

2276 
	`CREATE_BINARY_OP
(
$$
, 
F_DIVIDE
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2278 
NODE_REAL
:

2279 i‡(
$3
->
köd
 =
NODE_NUMBER
) {

2280 i‡(
$3
->
v
.
numbî
 == 0) {

2281 
	`yyîr‹
("Divide by zero in constant");

2282 
$$
 = 
$1
;

2285 
$$
 = 
$1
;

2286 
$1
->
v
.
ªÆ
 /
$3
->v.
numbî
;

2289 i‡(
$3
->
köd
 =
NODE_REAL
) {

2290 i‡(
$3
->
v
.
ªÆ
 == 0.0) {

2291 
	`yyîr‹
("Divide by zero in constant");

2292 
$$
 = 
$1
;

2295 
$$
 = 
$1
;

2296 
$1
->
v
.
ªÆ
 /
$3
->v.real;

2299 
	`CREATE_BINARY_OP
(
$$
, 
F_DIVIDE
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2302 
	`CREATE_BINARY_OP
(
$$
, 
F_DIVIDE
, 
ªsu…_ty≥
, 
$1
, 
$3
);

2305 | 
ˇ°
 
ex¥0
 %
¥ec
 
L_NOT


2307 #
löe
 2226 "grammar.y.pre"

2308 
$$
 = 
$2
;

2309 
$$
->
ty≥
 = 
$1
;

2311 i‡(
exa˘_ty≥s
 &&

2312 
$2
->
ty≥
 !
$1
 &&

2313 
$2
->
ty≥
 !
TYPE_ANY
 &&

2314 
$2
->
ty≥
 !
TYPE_UNKNOWN
 &&

2315 
$1
 !
TYPE_VOID
) {

2316 
buf
[256];

2317 *
íd
 = 
	`EndOf
(
buf
);

2318 *
p
;

2320 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Cannot cast ");

2321 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
$2
->
ty≥
);

2322 
p
 = 
	`°Ωut
’, 
íd
, "to ");

2323 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
$1
);

2324 
	`yyîr‹
(
buf
);

2327 | 
L_INC
 
lvÆue
 %
¥ec
 
L_NOT


2329 #
löe
 2247 "grammar.y.pre"

2330 
	`CREATE_UNARY_OP
(
$$
, 
F_PRE_INC
, 0, 
$2
);

2331 i‡(
exa˘_ty≥s
){

2332 
$2
->
ty≥
){

2333 
TYPE_NUMBER
:

2334 
TYPE_ANY
:

2335 
TYPE_REAL
:

2337 
$$
->
ty≥
 = 
$2
->type;

2343 
$$
->
ty≥
 = 
TYPE_ANY
;

2344 
	`ty≥_îr‹
("Badárgumíà1Åÿ++x", 
$2
->
ty≥
);

2347 } 
$$
->
ty≥
 = 
TYPE_ANY
;

2349 | 
L_DEC
 
lvÆue
 %
¥ec
 
L_NOT


2351 #
löe
 2268 "grammar.y.pre"

2352 
	`CREATE_UNARY_OP
(
$$
, 
F_PRE_DEC
, 0, 
$2
);

2353 i‡(
exa˘_ty≥s
){

2354 
$2
->
ty≥
){

2355 
TYPE_NUMBER
:

2356 
TYPE_ANY
:

2357 
TYPE_REAL
:

2359 
$$
->
ty≥
 = 
$2
->type;

2365 
$$
->
ty≥
 = 
TYPE_ANY
;

2366 
	`ty≥_îr‹
("Badárgumíà1Åÿ--x", 
$2
->
ty≥
);

2369 } 
$$
->
ty≥
 = 
TYPE_ANY
;

2372 | 
L_NOT
 
ex¥0


2374 #
löe
 2290 "grammar.y.pre"

2375 i‡(
$2
->
köd
 =
NODE_NUMBER
) {

2376 
$$
 = 
$2
;

2377 
$$
->
v
.
numbî
 = !($$->v.number);

2379 
	`CREATE_UNARY_OP
(
$$
, 
F_NOT
, 
TYPE_NUMBER
, 
$2
);

2382 | '~' 
ex¥0


2384 #
löe
 2299 "grammar.y.pre"

2385 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
(
$2
->
ty≥
, 
TYPE_NUMBER
))

2386 
	`ty≥_îr‹
("Badárgumíàtÿ~", 
$2
->
ty≥
);

2387 i‡(
$2
->
köd
 =
NODE_NUMBER
) {

2388 
$$
 = 
$2
;

2389 
$$
->
v
.
numbî
 = ~$$->v.number;

2391 
	`CREATE_UNARY_OP
(
$$
, 
F_COMPL
, 
TYPE_NUMBER
, 
$2
);

2394 | '-' 
ex¥0
 %
¥ec
 
L_NOT


2396 #
löe
 2310 "grammar.y.pre"

2397 
ªsu…_ty≥
;

2398 i‡(
exa˘_ty≥s
){

2399 
t
 = 
$2
->
ty≥
;

2400 i‡(!
	`COMP_TYPE
(
t
, 
TYPE_NUMBER
)){

2401 
	`ty≥_îr‹
("Badárgumíàtÿu«ry '-'", 
t
);

2402 
ªsu…_ty≥
 = 
TYPE_ANY
;

2403 } 
ªsu…_ty≥
 = 
t
;

2404 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

2406 
$2
->
köd
) {

2407 
NODE_NUMBER
:

2408 
$$
 = 
$2
;

2409 
$$
->
v
.
numbî
 = -$$->v.number;

2411 
NODE_REAL
:

2412 
$$
 = 
$2
;

2413 
$$
->
v
.
ªÆ
 = -$$->v.real;

2416 
	`CREATE_UNARY_OP
(
$$
, 
F_NEGATE
, 
ªsu…_ty≥
, 
$2
);

2419 | 
lvÆue
 
L_INC


2421 #
löe
 2334 "grammar.y.pre"

2422 
	`CREATE_UNARY_OP
(
$$
, 
F_POST_INC
, 0, 
$1
);

2423 
$$
->
v
.
numbî
 = 
F_POST_INC
;

2424 i‡(
exa˘_ty≥s
){

2425 
$1
->
ty≥
){

2426 
TYPE_NUMBER
:

2427 
TYPE_ANY
:

2428 
TYPE_REAL
:

2430 
$$
->
ty≥
 = 
$1
->type;

2436 
$$
->
ty≥
 = 
TYPE_ANY
;

2437 
	`ty≥_îr‹
("Badárgumíà1Åÿx++", 
$1
->
ty≥
);

2440 } 
$$
->
ty≥
 = 
TYPE_ANY
;

2442 | 
lvÆue
 
L_DEC


2444 #
löe
 2356 "grammar.y.pre"

2445 
	`CREATE_UNARY_OP
(
$$
, 
F_POST_DEC
, 0, 
$1
);

2446 i‡(
exa˘_ty≥s
){

2447 
$1
->
ty≥
){

2448 
TYPE_NUMBER
:

2449 
TYPE_ANY
:

2450 
TYPE_REAL
:

2452 
$$
->
ty≥
 = 
$1
->type;

2458 
$$
->
ty≥
 = 
TYPE_ANY
;

2459 
	`ty≥_îr‹
("Badárgumíà1Åÿx--", 
$1
->
ty≥
);

2462 } 
$$
->
ty≥
 = 
TYPE_ANY
;

2464 | 
ex¥4


2465 | 
ssˇnf


2466 | 
∑r£_comm™d


2467 | 
time_ex¥essi⁄


2468 | 
numbî


2469 | 
ªÆ


2473 
L_RETURN
 ';'

2475 #
löe
 2386 "grammar.y.pre"

2476 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
”xa˘_ty≥s, 
TYPE_VOID
))

2477 
	`yyw¨n
("Non-void functions mustÑeturná value.");

2478 
	`CREATE_RETURN
(
$$
, 0);

2480 | 
L_RETURN
 
comma_ex¥
 ';'

2482 #
löe
 2392 "grammar.y.pre"

2483 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
(
$2
->
ty≥
,Éxact_types)) {

2484 
buf
[256];

2485 *
íd
 = 
	`EndOf
(
buf
);

2486 *
p
;

2488 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Type ofÑeturned value doesn't match functionÑeturnÅype ");

2489 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
$2
->
ty≥
, 
exa˘_ty≥s
);

2490 
	`yyîr‹
(
buf
);

2492 i‡(
	`IS_NODE
(
$2
, 
NODE_NUMBER
, 0)) {

2493 
	`CREATE_RETURN
(
$$
, 0);

2495 
	`CREATE_RETURN
(
$$
, 
$2
);

2500 
ex¥_li°
:

2503 #
löe
 2412 "grammar.y.pre"

2504 
	`CREATE_EXPR_LIST
(
$$
, 0);

2506 | 
ex¥_li°2


2508 #
löe
 2416 "grammar.y.pre"

2509 
	`CREATE_EXPR_LIST
(
$$
, 
$1
);

2511 | 
ex¥_li°2
 ','

2513 #
löe
 2420 "grammar.y.pre"

2514 
	`CREATE_EXPR_LIST
(
$$
, 
$1
);

2518 
ex¥_li°_node
:

2519 
ex¥0


2521 #
löe
 2427 "grammar.y.pre"

2522 
	`CREATE_EXPR_NODE
(
$$
, 
$1
, 0);

2524 | 
ex¥0
 
L_DOT_DOT_DOT


2526 #
löe
 2431 "grammar.y.pre"

2527 
	`CREATE_EXPR_NODE
(
$$
, 
$1
, 1);

2531 
ex¥_li°2
:

2532 
ex¥_li°_node


2534 #
löe
 2438 "grammar.y.pre"

2535 
$1
->
köd
 = 1;

2537 
$$
 = 
$1
;

2539 | 
ex¥_li°2
 ',' 
ex¥_li°_node


2541 #
löe
 2444 "grammar.y.pre"

2542 
$3
->
köd
 = 0;

2544 
$$
 = 
$1
;

2545 
$$
->
köd
++;

2546 
$$
->
l
.
ex¥
->
r
.ex¥ = 
$3
;

2547 
$$
->
l
.
ex¥
 = 
$3
;

2551 
ex¥_li°3
:

2554 #
löe
 2456 "grammar.y.pre"

2556 
	`CREATE_EXPR_LIST
(
$$
, 0);

2558 | 
ex¥_li°4


2560 #
löe
 2461 "grammar.y.pre"

2561 
	`CREATE_EXPR_LIST
(
$$
, 
$1
);

2563 | 
ex¥_li°4
 ','

2565 #
löe
 2465 "grammar.y.pre"

2566 
	`CREATE_EXPR_LIST
(
$$
, 
$1
);

2570 
ex¥_li°4
:

2571 
assoc_∑ú


2573 #
löe
 2472 "grammar.y.pre"

2574 
$$
 = 
	`√w_node_no_löe
();

2575 
$$
->
köd
 = 2;

2576 
$$
->
v
.
ex¥
 = 
$1
;

2577 
$$
->
r
.
ex¥
 = 0;

2578 
$$
->
ty≥
 = 0;

2580 
$$
->
l
.
ex¥
 = $$;

2582 | 
ex¥_li°4
 ',' 
assoc_∑ú


2584 #
löe
 2482 "grammar.y.pre"

2585 
∑r£_node_t
 *
ex¥
;

2587 
ex¥
 = 
	`√w_node_no_löe
();

2588 
ex¥
->
köd
 = 0;

2589 
ex¥
->
v
.ex¥ = 
$3
;

2590 
ex¥
->
r
.expr = 0;

2591 
ex¥
->
ty≥
 = 0;

2593 
$1
->
l
.
ex¥
->
r
.expr =Éxpr;

2594 
$1
->
l
.
ex¥
 =Éxpr;

2595 
$1
->
köd
 += 2;

2596 
$$
 = 
$1
;

2600 
assoc_∑ú
:

2601 
ex¥0
 ':'Éxpr0

2603 #
löe
 2500 "grammar.y.pre"

2604 
	`CREATE_TWO_VALUES
(
$$
, 0, 
$1
, 
$3
);

2608 
lvÆue
:

2609 
ex¥4


2611 #
löe
 2507 "grammar.y.pre"

2612 #
deföe
 
LV_ILLEGAL
 1

2613 #
deföe
 
LV_RANGE
 2

2614 #
deföe
 
LV_INDEX
 4

2616 
$$
 = 
$1
;

2617 
$$
->
köd
) {

2619 
	`yyîr‹
("IllegalÜvalue");

2621 
NODE_PARAMETER
:

2622 
$$
->
köd
 = 
NODE_PARAMETER_LVALUE
;

2624 
NODE_TERNARY_OP
:

2625 
$$
->
v
.
numbî
 = $$->
r
.
ex¥
->v.number;

2626 
NODE_OPCODE_1
:

2627 
NODE_UNARY_OP_1
:

2628 
NODE_BINARY_OP
:

2629 i‡(
$$
->
v
.
numbî
 >
F_LOCAL
 && $$->v.numbî <
F_MEMBER
)

2630 
$$
->
v
.
numbî
++;

2631 i‡(
$$
->
v
.
numbî
 >
F_INDEX


2632 && 
$$
->
v
.
numbî
 <
F_RE_RANGE
) {

2633 
∑r£_node_t
 *
node
 = 
$$
;

2634 
Êag
 = 0;

2636 
node
->
köd
) {

2637 
NODE_PARAMETER
:

2638 
node
->
köd
 = 
NODE_PARAMETER_LVALUE
;

2639 
Êag
 |
LV_ILLEGAL
;

2641 
NODE_TERNARY_OP
:

2642 
node
->
v
.
numbî
 =Çode->
r
.
ex¥
->v.number;

2643 
NODE_OPCODE_1
:

2644 
NODE_UNARY_OP_1
:

2645 
NODE_BINARY_OP
:

2646 i‡(
node
->
v
.
numbî
 >
F_LOCAL


2647 && 
node
->
v
.
numbî
 <
F_MEMBER
) {

2648 
node
->
v
.
numbî
++;

2649 
Êag
 |
LV_ILLEGAL
;

2651 } i‡(
node
->
v
.
numbî
 =
F_INDEX
 ||

2652 
node
->
v
.
numbî
 =
F_RINDEX
) {

2653 
node
->
v
.
numbî
++;

2654 
Êag
 |
LV_INDEX
;

2656 } i‡(
node
->
v
.
numbî
 >
F_ADD_EQ


2657 && 
node
->
v
.
numbî
 <
F_ASSIGN
) {

2658 i‡(!(
Êag
 & 
LV_INDEX
)) {

2659 
	`yyîr‹
("IllegalÜvalue,áÖossibleÜvalue is (x <assign> y)[a]");

2661 i‡(
node
->
r
.
ex¥
->
köd
 =
NODE_BINARY_OP
||

2662 
node
->
r
.
ex¥
->
köd
 =
NODE_TERNARY_OP
){

2663 i‡(
node
->
r
.
ex¥
->
v
.
numbî
 >
F_NN_RANGE_LVALUE
 &&Çode->r.ex¥->v.numbî <
F_NR_RANGE_LVALUE
)

2664 
	`yyîr‹
("IllegalÅo have (x[a..b] <assign> y)Åo beÅhe beginning ofánÜvalue");

2666 
Êag
 = 
LV_ILLEGAL
;

2668 } i‡(
node
->
v
.
numbî
 >
F_NN_RANGE


2669 && 
node
->
v
.
numbî
 <
F_RE_RANGE
) {

2670 i‡(
Êag
 & 
LV_RANGE
) {

2671 
	`yyîr‹
("Can't doÑangeÜvalue ofÑangeÜvalue.");

2672 
Êag
 |
LV_ILLEGAL
;

2675 i‡(
Êag
 & 
LV_INDEX
){

2676 
	`yyîr‹
("Can't do indexedÜvalue ofÑangeÜvalue.");

2677 
Êag
 |
LV_ILLEGAL
;

2680 i‡(
node
->
v
.
numbî
 =
F_NE_RANGE
) {

2682 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

2683 
node
->
köd
 = 
NODE_TERNARY_OP
;

2684 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

2685 
F_NR_RANGE_LVALUE
,

2686 0, 0, 
rchûd
);

2687 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

2688 } i‡(
node
->
v
.
numbî
 =
F_RE_RANGE
) {

2690 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

2691 
node
->
köd
 = 
NODE_TERNARY_OP
;

2692 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

2693 
F_RR_RANGE_LVALUE
,

2694 0, 0, 
rchûd
);

2695 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

2697 
node
->
r
.
ex¥
->
v
.
numbî
++;

2698 
Êag
 |
LV_RANGE
;

2699 
node
 =Çode->
r
.
ex¥
->r.expr;

2703 
	`yyîr‹
("IllegalÜvalue");

2704 
Êag
 = 
LV_ILLEGAL
;

2707 i‡((
Êag
 & 
LV_ILLEGAL
Ë|| !(
node
 =Çode->
r
.
ex¥
)) ;

2711 
	`yyîr‹
("IllegalÜvalue");

2717 
l_√w_fun˘i⁄_›í
: 
L_NEW_FUNCTION_OPEN


2718 | 
L_FUNCTION_OPEN
 
efun_ovîride


2720 #
löe
 2615 "grammar.y.pre"

2721 
$$
 = (
$2
 << 8Ë| 
FP_EFUN
;

2726 
ex¥4
:

2727 
fun˘i⁄_ˇŒ


2728 | 
L_DEFINED_NAME


2730 #
löe
 2647 "grammar.y.pre"

2731 
i
;

2732 i‡((
i
 = 
$1
->
dn
.
loˇl_num
) != -1) {

2733 
ty≥_of_loˇls_±r
[
i
] &~
LOCAL_MOD_UNUSED
;

2734 i‡(
ty≥_of_loˇls_±r
[
i
] & 
LOCAL_MOD_REF
)

2735 
	`CREATE_OPCODE_1
(
$$
, 
F_REF
, 
ty≥_of_loˇls_±r
[
i
] & ~
LOCAL_MOD_REF
,i & 0xff);

2737 
	`CREATE_OPCODE_1
(
$$
, 
F_LOCAL
, 
ty≥_of_loˇls_±r
[
i
], i & 0xff);

2738 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

2739 
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
++;

2741 i‡((
i
 = 
$1
->
dn
.
globÆ_num
) != -1) {

2742 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

2743 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

2744 
	`CREATE_OPCODE_1
(
$$
, 
F_GLOBAL
,

2745 
	`VAR_TEMP
(
i
)->
ty≥
 & ~
DECL_MODS
, i);

2746 i‡(
	`VAR_TEMP
(
i
)->
ty≥
 & 
DECL_HIDDEN
) {

2747 
buf
[256];

2748 *
íd
 = 
	`EndOf
(
buf
);

2749 *
p
;

2751 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

2752 
p
 = 
	`°Ωut
’, 
íd
, 
$1
->
«me
);

2753 
p
 = 
	`°Ωut
’, 
íd
, "'");

2754 
	`yyîr‹
(
buf
);

2757 
buf
[256];

2758 *
íd
 = 
	`EndOf
(
buf
);

2759 *
p
;

2761 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

2762 
p
 = 
	`°Ωut
’, 
íd
, 
$1
->
«me
);

2763 
p
 = 
	`°Ωut
’, 
íd
, "'");

2764 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

2765 
	`add_loˇl_«me
(
$1
->
«me
, 
TYPE_ANY
);

2767 
	`CREATE_ERROR
(
$$
);

2768 
	`yyîr‹
(
buf
);

2771 | 
L_IDENTIFIER


2773 #
löe
 2689 "grammar.y.pre"

2774 
buf
[256];

2775 *
íd
 = 
	`EndOf
(
buf
);

2776 *
p
;

2778 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

2779 
p
 = 
	`°Ωut
’, 
íd
, 
$1
);

2780 
p
 = 
	`°Ωut
’, 
íd
, "'");

2781 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

2782 
	`add_loˇl_«me
(
$1
, 
TYPE_ANY
);

2784 
	`CREATE_ERROR
(
$$
);

2785 
	`yyîr‹
(
buf
);

2786 
	`s¸©ch_‰ì
(
$1
);

2788 | 
L_PARAMETER


2790 #
löe
 2705 "grammar.y.pre"

2791 
	`CREATE_PARAMETER
(
$$
, 
TYPE_ANY
, 
$1
);

2795 #
löe
 2709 "grammar.y.pre"

2796 
$
<
c⁄ãxç
>$ = 
cuºít_fun˘i⁄_c⁄ãxt
;

2798 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

2799 
cuºít_fun˘i⁄_c⁄ãxt
 = cuºít_fun˘i⁄_c⁄ãxt->
∑ª¡
;

2801 
comma_ex¥
 ')'

2803 #
löe
 2716 "grammar.y.pre"

2804 
∑r£_node_t
 *
node
;

2806 
cuºít_fun˘i⁄_c⁄ãxt
 = 
$
<
c⁄ãxç
>3;

2808 i‡(!
cuºít_fun˘i⁄_c⁄ãxt
 || cuºít_fun˘i⁄_c⁄ãxt->
num_∑ømëîs
 == -2) {

2812 
	`CREATE_ERROR
(
$$
);

2814 
	`CREATE_OPCODE_1
(
$$
, 
F_LOCAL
, 
$4
->
ty≥
,

2815 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
köd
++);

2817 
node
 = 
	`√w_node_no_löe
();

2818 
node
->
ty≥
 = 0;

2819 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
->
r
.ex¥ = 
node
;

2820 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
 = 
node
;

2821 
node
->
r
.
ex¥
 = 0;

2822 
node
->
v
.
ex¥
 = 
$4
;

2825 | 
ex¥4
 
L_ARROW
 
idítifõr


2827 #
löe
 2739 "grammar.y.pre"

2828 i‡(
$1
->
ty≥
 =
TYPE_ANY
) {

2829 
cmi
;

2830 
ç
;

2832 i‡((
cmi
 = 
	`lookup_™y_˛ass_membî
(
$3
, &
ç
)) != -1) {

2833 
	`CREATE_UNARY_OP_1
(
$$
, 
F_MEMBER
, 
ç
, 
$1
, 0);

2834 
$$
->
l
.
numbî
 = 
cmi
;

2836 
	`CREATE_ERROR
(
$$
);

2838 } i‡(!
	`IS_CLASS
(
$1
->
ty≥
)) {

2839 
	`yyîr‹
("Leftárgument of -> isÇotá class");

2840 
	`CREATE_ERROR
(
$$
);

2842 
	`CREATE_UNARY_OP_1
(
$$
, 
F_MEMBER
, 0, 
$1
, 0);

2843 
$$
->
l
.
numbî
 = 
	`lookup_˛ass_membî
(
	`CLASS_IDX
(
$1
->
ty≥
),

2844 
$3
,

2845 &(
$$
->
ty≥
));

2848 
	`s¸©ch_‰ì
(
$3
);

2850 | 
ex¥4
 '[' 
comma_ex¥
 
L_RANGE
 comma_expr ']'

2852 #
löe
 2763 "grammar.y.pre"

2853 i‡(
$1
->
ty≥
 !
TYPE_MAPPING
 &&

2854 
$5
->
köd
 =
NODE_NUMBER
 && $5->
v
.
numbî
 < 0)

2855 
	`yyw¨n
("AÇegative constantásÅhe secondÉlement ofárr[x..y]ÇoÜonger means indexing fromÅheÉnd. Useárr[x..<y]");

2856 
$$
 = 
	`make_ønge_node
(
F_NN_RANGE
, 
$1
, 
$3
, 
$5
);

2858 | 
ex¥4
 '[' '<' 
comma_ex¥
 
L_RANGE
 comma_expr ']'

2860 #
löe
 2772 "grammar.y.pre"

2861 
$$
 = 
	`make_ønge_node
(
F_RN_RANGE
, 
$1
, 
$4
, 
$6
);

2863 | 
ex¥4
 '[' '<' 
comma_ex¥
 
L_RANGE
 '<' comma_expr ']'

2865 #
löe
 2776 "grammar.y.pre"

2866 i‡(
$7
->
köd
 =
NODE_NUMBER
 && $7->
v
.
numbî
 <= 1)

2867 
$$
 = 
	`make_ønge_node
(
F_RE_RANGE
, 
$1
, 
$4
, 0);

2869 
$$
 = 
	`make_ønge_node
(
F_RR_RANGE
, 
$1
, 
$4
, 
$7
);

2871 | 
ex¥4
 '[' 
comma_ex¥
 
L_RANGE
 '<' comma_expr ']'

2873 #
löe
 2783 "grammar.y.pre"

2874 i‡(
$6
->
köd
 =
NODE_NUMBER
 && $6->
v
.
numbî
 <= 1)

2875 
$$
 = 
	`make_ønge_node
(
F_NE_RANGE
, 
$1
, 
$3
, 0);

2877 
$$
 = 
	`make_ønge_node
(
F_NR_RANGE
, 
$1
, 
$3
, 
$6
);

2879 | 
ex¥4
 '[' 
comma_ex¥
 
L_RANGE
 ']'

2881 #
löe
 2790 "grammar.y.pre"

2882 
$$
 = 
	`make_ønge_node
(
F_NE_RANGE
, 
$1
, 
$3
, 0);

2884 | 
ex¥4
 '[' '<' 
comma_ex¥
 
L_RANGE
 ']'

2886 #
löe
 2794 "grammar.y.pre"

2887 
$$
 = 
	`make_ønge_node
(
F_RE_RANGE
, 
$1
, 
$4
, 0);

2889 | 
ex¥4
 '[' '<' 
comma_ex¥
 ']'

2891 #
löe
 2798 "grammar.y.pre"

2892 i‡(
	`IS_NODE
(
$1
, 
NODE_CALL
, 
F_AGGREGATE
)

2893 && 
$4
->
köd
 =
NODE_NUMBER
) {

2894 
i
 = 
$4
->
v
.
numbî
;

2895 i‡(
i
 < 1 || i > 
$1
->
l
.
numbî
)

2896 
	`yyîr‹
("Illegal indexÅoárray constant.");

2898 
∑r£_node_t
 *
node
 = 
$1
->
r
.
ex¥
;

2899 
i
 = 
$1
->
l
.
numbî
 - i;

2900 
i
--)

2901 
node
 =Çode->
r
.
ex¥
;

2902 
$$
 = 
node
->
v
.
ex¥
;

2906 
	`CREATE_BINARY_OP
(
$$
, 
F_RINDEX
, 0, 
$4
, 
$1
);

2907 i‡(
exa˘_ty≥s
) {

2908 
$1
->
ty≥
) {

2909 
TYPE_MAPPING
:

2910 
	`yyîr‹
("Illegal index for mapping.");

2911 
TYPE_ANY
:

2912 
$$
->
ty≥
 = 
TYPE_ANY
;

2914 
TYPE_STRING
:

2915 
TYPE_BUFFER
:

2916 
$$
->
ty≥
 = 
TYPE_NUMBER
;

2917 i‡(!
	`IS_TYPE
(
$4
->
ty≥
,
TYPE_NUMBER
))

2918 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", 
$4
->
ty≥
);

2922 i‡(
$1
->
ty≥
 & 
TYPE_MOD_ARRAY
) {

2923 
$$
->
ty≥
 = 
$1
->ty≥ & ~
TYPE_MOD_ARRAY
;

2924 i‡(!
	`IS_TYPE
(
$4
->
ty≥
,
TYPE_NUMBER
))

2925 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", 
$4
->
ty≥
);

2927 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", 
$1
->
ty≥
);

2928 
$$
->
ty≥
 = 
TYPE_ANY
;

2931 } 
$$
->
ty≥
 = 
TYPE_ANY
;

2933 | 
ex¥4
 '[' 
comma_ex¥
 ']'

2935 #
löe
 2841 "grammar.y.pre"

2946 i‡(
	`IS_NODE
(
$1
, 
NODE_CALL
, 
F_AGGREGATE
Ë&& 
$3
->
köd
 =
NODE_NUMBER
) {

2947 
i
 = 
$3
->
v
.
numbî
;

2948 i‡(
i
 < 0 || i >
$1
->
l
.
numbî
)

2949 
	`yyîr‹
("Illegal indexÅoárray constant.");

2951 
∑r£_node_t
 *
node
 = 
$1
->
r
.
ex¥
;

2952 
i
--)

2953 
node
 =Çode->
r
.
ex¥
;

2954 
$$
 = 
node
->
v
.
ex¥
;

2958 i‡(
$3
->
köd
 =
NODE_NUMBER
 && $3->
v
.
numbî
 < 0)

2959 
	`yyw¨n
("AÇegative constant inárr[x]ÇoÜonger means indexing fromÅheÉnd. Useárr[<x]");

2960 
	`CREATE_BINARY_OP
(
$$
, 
F_INDEX
, 0, 
$3
, 
$1
);

2961 i‡(
exa˘_ty≥s
) {

2962 
$1
->
ty≥
) {

2963 
TYPE_MAPPING
:

2964 
TYPE_ANY
:

2965 
$$
->
ty≥
 = 
TYPE_ANY
;

2967 
TYPE_STRING
:

2968 
TYPE_BUFFER
:

2969 
$$
->
ty≥
 = 
TYPE_NUMBER
;

2970 i‡(!
	`IS_TYPE
(
$3
->
ty≥
,
TYPE_NUMBER
))

2971 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", 
$3
->
ty≥
);

2975 i‡(
$1
->
ty≥
 & 
TYPE_MOD_ARRAY
) {

2976 
$$
->
ty≥
 = 
$1
->ty≥ & ~
TYPE_MOD_ARRAY
;

2977 i‡(!
	`IS_TYPE
(
$3
->
ty≥
,
TYPE_NUMBER
))

2978 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", 
$3
->
ty≥
);

2980 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", 
$1
->
ty≥
);

2981 
$$
->
ty≥
 = 
TYPE_ANY
;

2984 } 
$$
->
ty≥
 = 
TYPE_ANY
;

2986 | 
°rög


2987 | '(' 
comma_ex¥
 ')'

2989 #
löe
 2896 "grammar.y.pre"

2990 
$$
 = 
$2
;

2992 | 
ˇtch


2993 | 
L_BASIC_TYPE


2995 #
löe
 2904 "grammar.y.pre"

2996 i‡(
$1
 !
TYPE_FUNCTION
Ë
	`yyîr‹
("ReservedÅypeÇame unexpected.");

2997 
$
<
func_block
>$.
num_loˇl
 = 
cuºít_numbî_of_loˇls
;

2998 
$
<
func_block
>$.
max_num_loˇls
 = max_num_locals;

2999 
$
<
func_block
>$.
c⁄ãxt
 = context;

3000 
$
<
func_block
>$.
ßve_cuºít_ty≥
 = 
cuºít_ty≥
;

3001 
$
<
func_block
>$.
ßve_exa˘_ty≥s
 = 
exa˘_ty≥s
;

3002 i‡(
ty≥_of_loˇls_±r
 + 
max_num_loˇls
 + 
CFG_MAX_LOCAL_VARIABLES
 >&
ty≥_of_loˇls
[
ty≥_of_loˇls_size
])

3003 
	`ªÆloˇã_loˇls
();

3004 
	`dó˘iv©e_cuºít_loˇls
();

3005 
loˇls_±r
 +
cuºít_numbî_of_loˇls
;

3006 
ty≥_of_loˇls_±r
 +
max_num_loˇls
;

3007 
max_num_loˇls
 = 
cuºít_numbî_of_loˇls
 = 0;

3008 
	`push_fun˘i⁄_c⁄ãxt
();

3009 
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 = -1;

3010 
exa˘_ty≥s
 = 
TYPE_ANY
;

3011 
c⁄ãxt
 = 0;

3013 '(' 
¨gumít
 ')' 
block


3015 #
löe
 2923 "grammar.y.pre"

3016 i‡(
$4
.
Êags
 & 
ARG_IS_VARARGS
) {

3017 
	`yyîr‹
("Anonymous varargs functionsáren't implemented");

3019 i‡(!
$6
.
node
) {

3020 
	`CREATE_RETURN
(
$6
.
node
, 0);

3021 } i‡(
$6
.
node
->
köd
 !
NODE_RETURN
 &&

3022 (
$6
.
node
->
köd
 !
NODE_TWO_VALUES
 || $6.node->
r
.
ex¥
->köd !
NODE_RETURN
)) {

3023 
∑r£_node_t
 *
ª∂a˚mít
;

3024 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, 
$6
.
node
, 0);

3025 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

3026 
$6
.
node
 = 
ª∂a˚mít
;

3029 
$$
 = 
	`√w_node
();

3030 
$$
->
köd
 = 
NODE_ANON_FUNC
;

3031 
$$
->
ty≥
 = 
TYPE_FUNCTION
;

3032 
$$
->
l
.
numbî
 = (
max_num_loˇls
 - 
$4
.
num_¨g
);

3033 
$$
->
r
.
ex¥
 = 
$6
.
node
;

3034 
$$
->
v
.
numbî
 = 
$4
.
num_¨g
;

3035 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
)

3036 
$$
->
v
.
numbî
 |= 0x10000;

3037 
	`‰ì_Æl_loˇl_«mes
(1);

3039 
cuºít_numbî_of_loˇls
 = 
$
<
func_block
>2.
num_loˇl
;

3040 
max_num_loˇls
 = 
$
<
func_block
>2.max_num_locals;

3041 
c⁄ãxt
 = 
$
<
func_block
>2.c
⁄ãxt
;

3042 
cuºít_ty≥
 = 
$
<
func_block
>2.
ßve_cuºít_ty≥
;

3043 
exa˘_ty≥s
 = 
$
<
func_block
>2.
ßve_exa˘_ty≥s
;

3044 
	`p›_fun˘i⁄_c⁄ãxt
();

3046 
loˇls_±r
 -
cuºít_numbî_of_loˇls
;

3047 
ty≥_of_loˇls_±r
 -
max_num_loˇls
;

3048 
	`ªa˘iv©e_cuºít_loˇls
();

3050 | 
l_√w_fun˘i⁄_›í
 ':' ')'

3052 #
löe
 2963 "grammar.y.pre"

3053 
$$
 = 
	`√w_node
();

3054 
$$
->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

3055 
$$
->
ty≥
 = 
TYPE_FUNCTION
;

3056 
$$
->
r
.
ex¥
 = 0;

3057 
$1
 & 0xff) {

3058 
FP_L_VAR
:

3059 
	`yyîr‹
("IllegalÅo useÜocal variable iná functional.");

3060 
	`CREATE_NUMBER
(
$$
->
l
.
ex¥
, 0);

3061 
$$
->
l
.
ex¥
->
r
.expr = 0;

3062 
$$
->
l
.
ex¥
->l.expr = 0;

3063 
$$
->
v
.
numbî
 = 
FP_FUNCTIONAL
;

3065 
FP_G_VAR
:

3066 
	`CREATE_OPCODE_1
(
$$
->
l
.
ex¥
, 
F_GLOBAL
, 0, 
$1
 >> 8);

3067 
$$
->
v
.
numbî
 = 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
;

3068 i‡(
	`VAR_TEMP
(
$$
->
l
.
ex¥
->l.
numbî
)->
ty≥
 & 
DECL_HIDDEN
) {

3069 
buf
[256];

3070 *
íd
 = 
	`EndOf
(
buf
);

3071 *
p
;

3073 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

3074 
p
 = 
	`°Ωut
’, 
íd
, 
	`VAR_TEMP
(
$$
->
l
.
ex¥
->l.
numbî
)->
«me
);

3075 
p
 = 
	`°Ωut
’, 
íd
, "'");

3076 
	`yyîr‹
(
buf
);

3080 
$$
->
v
.
numbî
 = 
$1
;

3084 | 
l_√w_fun˘i⁄_›í
 ',' 
ex¥_li°2
 ':' ')'

3086 #
löe
 2996 "grammar.y.pre"

3087 
$$
 = 
	`√w_node
();

3088 
$$
->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

3089 
$$
->
ty≥
 = 
TYPE_FUNCTION
;

3090 
$$
->
v
.
numbî
 = 
$1
;

3091 
$$
->
r
.
ex¥
 = 
$3
;

3093 
$1
 & 0xff) {

3094 
FP_EFUN
: {

3095 *
¨gp
;

3096 
f
 = 
$1
 >>8;

3097 
num
 = 
$3
->
köd
;

3098 
max_¨g
 = 
¥edefs
[
f
].
max_¨gs
;

3100 i‡(
num
 > 
max_¨g
 && max_arg != -1) {

3101 
∑r£_node_t
 *
≤
 = 
$3
;

3103 
≤
) {

3104 i‡(
≤
->
ty≥
 & 1) ;

3105 
≤
 =Ön->
r
.
ex¥
;

3108 i‡(!
≤
) {

3109 
bff
[256];

3110 *
íd
 = 
	`EndOf
(
bff
);

3111 *
p
;

3113 
p
 = 
	`°Ωut
(
bff
, 
íd
, "Too manyárgumentsÅo ");

3114 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

3115 
	`yyîr‹
(
bff
);

3117 } i‡(
max_¨g
 !-1 && 
exa˘_ty≥s
) {

3121 
i
, 
¨gn
, 
tmp
;

3122 
∑r£_node_t
 *
íode
 = 
$3
;

3123 
¨gp
 = &
efun_¨g_ty≥s
[
¥edefs
[
f
].
¨g_ödex
];

3125 
¨gn
 = 0;árg¿< 
num
;árgn++) {

3126 i‡(
íode
->
ty≥
 & 1) ;

3128 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

3129 
i
=0; !
	`com∑tibÀ_ty≥s
(
tmp
, 
¨gp
[i])

3130 && 
¨gp
[
i
] != 0; i++)

3132 i‡(
¨gp
[
i
] == 0) {

3133 
buf
[256];

3134 *
íd
 = 
	`EndOf
(
buf
);

3135 *
p
;

3137 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badárgument ");

3138 
p
 = 
	`°Ωut_öt
’, 
íd
, 
¨gn
+1);

3139 
p
 = 
	`°Ωut
’, 
íd
, "ÅoÉfun ");

3140 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

3141 
p
 = 
	`°Ωut
’, 
íd
, "()");

3142 
	`yyîr‹
(
buf
);

3147 i‡(
tmp
 =
TYPE_NUMBER
 && 
¨gp
[
i
] =
TYPE_REAL
) {

3148 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_NUMBER
; i++)

3150 i‡(!
¨gp
[
i
])

3151 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_Êﬂt
(enode->v.expr);

3153 i‡(
tmp
 =
TYPE_REAL
 && 
¨gp
[
i
] =
TYPE_NUMBER
) {

3154 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_REAL
; i++)

3156 i‡(!
¨gp
[
i
])

3157 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_öt
(enode->v.expr);

3160 
¨gp
[
i
] != 0)

3161 
i
++;

3162 
¨gp
 +
i
 + 1;

3163 
íode
 =Énode->
r
.
ex¥
;

3168 
FP_L_VAR
:

3169 
FP_G_VAR
:

3170 
	`yyîr‹
("Can't giveÖarametersÅo functional.");

3174 | 
L_FUNCTION_OPEN
 
comma_ex¥
 ':' ')'

3176 #
löe
 3085 "grammar.y.pre"

3177 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
)

3178 
	`yyîr‹
("IllegalÅo useÜocal variable in functional.");

3179 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
)

3180 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
->
köd
 = current_function_context->values_list->kind;

3182 
$$
 = 
	`√w_node
();

3183 
$$
->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

3184 
$$
->
ty≥
 = 
TYPE_FUNCTION
;

3185 
$$
->
l
.
ex¥
 = 
$2
;

3186 i‡(
$2
->
köd
 =
NODE_STRING
)

3187 
	`yyw¨n
("FunctionÖointerÑeturning string constant is NOTá function call");

3188 
$$
->
r
.
ex¥
 = 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->r.expr;

3189 
$$
->
v
.
numbî
 = 
FP_FUNCTIONAL
 + 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ


3190 + (
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 << 8);

3191 
	`p›_fun˘i⁄_c⁄ãxt
();

3193 | 
L_MAPPING_OPEN
 
ex¥_li°3
 ']' ')'

3195 #
löe
 3103 "grammar.y.pre"

3196 
	`CREATE_CALL
(
$$
, 
F_AGGREGATE_ASSOC
, 
TYPE_MAPPING
, 
$2
);

3198 | 
L_ARRAY_OPEN
 
ex¥_li°
 '}' ')'

3200 #
löe
 3107 "grammar.y.pre"

3201 
	`CREATE_CALL
(
$$
, 
F_AGGREGATE
, 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
, 
$2
);

3205 
ex¥_‹_block
:

3206 
block


3208 #
löe
 3114 "grammar.y.pre"

3209 
$$
 = 
$1
.
node
;

3211 | '(' 
comma_ex¥
 ')'

3213 #
löe
 3118 "grammar.y.pre"

3214 
$$
 = 
	`ö£π_p›_vÆue
(
$2
);

3218 
ˇtch
:

3219 
L_CATCH


3221 #
löe
 3125 "grammar.y.pre"

3222 
$
<
numbî
>$ = 
c⁄ãxt
;

3223 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

3225 
ex¥_‹_block


3227 #
löe
 3130 "grammar.y.pre"

3228 
	`CREATE_CATCH
(
$$
, 
$3
);

3229 
c⁄ãxt
 = 
$
<
numbî
>2;

3234 
ssˇnf
:

3235 
L_SSCANF
 '(' 
ex¥0
 ','Éx¥0 
lvÆue_li°
 ')'

3237 #
löe
 3154 "grammar.y.pre"

3238 
p
 = 
$6
->
v
.
numbî
;

3239 
	`CREATE_LVALUE_EFUN
(
$$
, 
TYPE_NUMBER
, 
$6
);

3240 
	`CREATE_BINARY_OP_1
(
$$
->
l
.
ex¥
, 
F_SSCANF
, 0, 
$3
, 
$5
, 
p
);

3244 
∑r£_comm™d
:

3245 
L_PARSE_COMMAND
 '(' 
ex¥0
 ','Éx¥0 ','Éx¥0 
lvÆue_li°
 ')'

3247 #
löe
 3163 "grammar.y.pre"

3248 
p
 = 
$8
->
v
.
numbî
;

3249 
	`CREATE_LVALUE_EFUN
(
$$
, 
TYPE_NUMBER
, 
$8
);

3250 
	`CREATE_TERNARY_OP_1
(
$$
->
l
.
ex¥
, 
F_PARSE_COMMAND
, 0,

3251 
$3
, 
$5
, 
$7
, 
p
);

3255 
time_ex¥essi⁄
:

3256 
L_TIME_EXPRESSION


3258 #
löe
 3173 "grammar.y.pre"

3259 
$
<
numbî
>$ = 
c⁄ãxt
;

3260 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

3262 
ex¥_‹_block


3264 #
löe
 3178 "grammar.y.pre"

3265 
	`CREATE_TIME_EXPRESSION
(
$$
, 
$3
);

3266 
c⁄ãxt
 = 
$
<
numbî
>2;

3270 
lvÆue_li°
:

3273 #
löe
 3186 "grammar.y.pre"

3274 
$$
 = 
	`√w_node_no_löe
();

3275 
$$
->
r
.
ex¥
 = 0;

3276 
$$
->
v
.
numbî
 = 0;

3278 | ',' 
lvÆue
 
lvÆue_li°


3280 #
löe
 3192 "grammar.y.pre"

3281 
∑r£_node_t
 *
ö£π
;

3283 
$$
 = 
$3
;

3284 
ö£π
 = 
	`√w_node_no_löe
();

3285 
ö£π
->
r
.
ex¥
 = 
$3
->r.expr;

3286 
ö£π
->
l
.
ex¥
 = 
$2
;

3287 
$3
->
r
.
ex¥
 = 
ö£π
;

3288 
$$
->
v
.
numbî
++;

3292 
°rög
:

3293 
°rög_c⁄2


3295 #
löe
 3206 "grammar.y.pre"

3296 
	`CREATE_STRING
(
$$
, 
$1
);

3297 
	`s¸©ch_‰ì
(
$1
);

3301 
°rög_c⁄1
:

3302 
°rög_c⁄2


3303 | '(' 
°rög_c⁄1
 ')'

3305 #
löe
 3215 "grammar.y.pre"

3306 
$$
 = 
$2
;

3308 | 
°rög_c⁄1
 '+' string_con1

3310 #
löe
 3219 "grammar.y.pre"

3311 
$$
 = 
	`s¸©ch_joö
(
$1
, 
$3
);

3315 
°rög_c⁄2
:

3316 
L_STRING


3317 | 
°rög_c⁄2
 
L_STRING


3319 #
löe
 3227 "grammar.y.pre"

3320 
$$
 = 
	`s¸©ch_joö
(
$1
, 
$2
);

3324 
˛ass_öô
: 
idítifõr
 ':' 
ex¥0


3326 #
löe
 3233 "grammar.y.pre"

3327 
$$
 = 
	`√w_node
();

3328 
$$
->
l
.
ex¥
 = (
∑r£_node_t
 *)
$1
;

3329 
$$
->
v
.
ex¥
 = 
$3
;

3330 
$$
->
r
.
ex¥
 = 0;

3334 
›t_˛ass_öô
:

3337 #
löe
 3243 "grammar.y.pre"

3338 
$$
 = 0;

3340 | 
›t_˛ass_öô
 ',' 
˛ass_öô


3342 #
löe
 3247 "grammar.y.pre"

3343 
$$
 = 
$3
;

3344 
$$
->
r
.
ex¥
 = 
$1
;

3349 
fun˘i⁄_ˇŒ
:

3350 
efun_ovîride
 '('

3352 #
löe
 3256 "grammar.y.pre"

3353 
$
<
numbî
>$ = 
c⁄ãxt
;

3354 
$
<
numbî
>2 = 
num_ªfs
;

3355 
c⁄ãxt
 |
ARG_LIST
;

3357 
ex¥_li°
 ')'

3359 #
löe
 3262 "grammar.y.pre"

3360 
c⁄ãxt
 = 
$
<
numbî
>3;

3361 
$$
 = 
	`vÆid©e_efun_ˇŒ
(
$1
,
$4
);

3362 
$$
 = 
	`check_ªfs
(
num_ªfs
 - 
$
<
numbî
>2, 
$4
, $$);

3363 
num_ªfs
 = 
$
<
numbî
>2;

3365 | 
L_NEW
 '('

3367 #
löe
 3269 "grammar.y.pre"

3368 
$
<
numbî
>$ = 
c⁄ãxt
;

3369 
$
<
numbî
>2 = 
num_ªfs
;

3370 
c⁄ãxt
 |
ARG_LIST
;

3372 
ex¥_li°
 ')'

3374 #
löe
 3275 "grammar.y.pre"

3375 
c⁄ãxt
 = 
$
<
numbî
>3;

3376 
$$
 = 
	`vÆid©e_efun_ˇŒ
(
√w_efun
, 
$4
);

3377 
$$
 = 
	`check_ªfs
(
num_ªfs
 - 
$
<
numbî
>2, 
$4
, $$);

3378 
num_ªfs
 = 
$
<
numbî
>2;

3380 | 
L_NEW
 '(' 
L_CLASS
 
L_DEFINED_NAME
 
›t_˛ass_öô
 ')'

3382 #
löe
 3282 "grammar.y.pre"

3383 
∑r£_node_t
 *
node
;

3385 i‡(
$4
->
dn
.
˛ass_num
 == -1) {

3386 
buf
[256];

3387 *
íd
 = 
	`EndOf
(
buf
);

3388 *
p
;

3390 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

3391 
p
 = 
	`°Ωut
’, 
íd
, 
$4
->
«me
);

3392 
p
 = 
	`°Ωut
’, 
íd
, "'");

3393 
	`yyîr‹
(
buf
);

3394 
	`CREATE_ERROR
(
$$
);

3395 
node
 = 
$5
;

3396 
node
) {

3397 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

3398 
node
 =Çode->
r
.
ex¥
;

3401 
ty≥
 = 
$4
->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

3403 i‡((
node
 = 
$5
)) {

3404 
	`CREATE_TWO_VALUES
(
$$
, 
ty≥
, 0, 0);

3405 
$$
->
l
.
ex¥
 = 
	`ª‹dî_˛ass_vÆues
(
$4
->
dn
.
˛ass_num
,

3406 
node
);

3407 
	`CREATE_OPCODE_1
(
$$
->
r
.
ex¥
, 
F_NEW_CLASS
,

3408 
ty≥
, 
$4
->
dn
.
˛ass_num
);

3411 
	`CREATE_OPCODE_1
(
$$
, 
F_NEW_EMPTY_CLASS
,

3412 
ty≥
, 
$4
->
dn
.
˛ass_num
);

3416 | 
L_NEW
 '(' 
L_CLASS
 
L_IDENTIFIER
 
›t_˛ass_öô
 ')'

3418 #
löe
 3317 "grammar.y.pre"

3419 
∑r£_node_t
 *
node
;

3420 
buf
[256];

3421 *
íd
 = 
	`EndOf
(
buf
);

3422 *
p
;

3424 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

3425 
p
 = 
	`°Ωut
’, 
íd
, 
$4
);

3426 
p
 = 
	`°Ωut
’, 
íd
, "'");

3427 
	`yyîr‹
(
buf
);

3428 
	`CREATE_ERROR
(
$$
);

3429 
node
 = 
$5
;

3430 
node
) {

3431 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

3432 
node
 =Çode->
r
.
ex¥
;

3435 | 
L_DEFINED_NAME
 '('

3437 #
löe
 3335 "grammar.y.pre"

3438 
$
<
numbî
>$ = 
c⁄ãxt
;

3439 
$
<
numbî
>2 = 
num_ªfs
;

3440 
c⁄ãxt
 |
ARG_LIST
;

3442 
ex¥_li°
 ')'

3444 #
löe
 3341 "grammar.y.pre"

3445 
f
;

3447 
c⁄ãxt
 = 
$
<
numbî
>3;

3448 
$$
 = 
$4
;

3449 i‡((
f
 = 
$1
->
dn
.
fun˘i⁄_num
) != -1) {

3450 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

3451 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

3453 
$$
->
köd
 = 
NODE_CALL_1
;

3454 
$$
->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

3455 
$$
->
l
.
numbî
 = 
f
;

3456 
$$
->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, 
$4
->
r
.
ex¥
);

3457 } i‡((
f
=
$1
->
dn
.
simul_num
) != -1) {

3458 
$$
->
köd
 = 
NODE_CALL_1
;

3459 
$$
->
v
.
numbî
 = 
F_SIMUL_EFUN
;

3460 
$$
->
l
.
numbî
 = 
f
;

3461 
$$
->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
DECL_MODS
;

3462 } i‡((
f
=
$1
->
dn
.
efun_num
) != -1) {

3463 
$$
 = 
	`vÆid©e_efun_ˇŒ
(
f
, 
$4
);

3473 
f
;

3475 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

3476 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

3478 
f
 = 
	`deföe_√w_fun˘i⁄
(
$1
->
«me
, 0, 0,

3479 
DECL_PUBLIC
|
FUNC_UNDEFINED
, 
TYPE_ANY
);

3480 
$$
->
köd
 = 
NODE_CALL_1
;

3481 
$$
->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

3482 
$$
->
l
.
numbî
 = 
f
;

3483 
$$
->
ty≥
 = 
TYPE_ANY
;

3484 i‡(
exa˘_ty≥s
) {

3485 
buf
[256];

3486 *
íd
 = 
	`EndOf
(
buf
);

3487 *
p
;

3488 *
n
 = 
$1
->
«me
;

3489 i‡(*
n
 == ':')Ç++;

3495 
	`FUNCTION_FLAGS
(
f
Ë&~
FUNC_UNDEFINED
;

3496 
	`FUNCTION_FLAGS
(
f
Ë|(
FUNC_INHERITED
 | 
FUNC_VARARGS
);

3497 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

3498 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

3499 
	`yyîr‹
(
buf
);

3502 
$$
 = 
	`check_ªfs
(
num_ªfs
 - 
$
<
numbî
>2, 
$4
, $$);

3503 
num_ªfs
 = 
$
<
numbî
>2;

3505 | 
fun˘i⁄_«me
 '('

3507 #
löe
 3403 "grammar.y.pre"

3508 
$
<
numbî
>$ = 
c⁄ãxt
;

3509 
$
<
numbî
>2 = 
num_ªfs
;

3510 
c⁄ãxt
 |
ARG_LIST
;

3512 
ex¥_li°
 ')'

3514 #
löe
 3409 "grammar.y.pre"

3515 *
«me
 = 
$1
;

3517 
c⁄ãxt
 = 
$
<
numbî
>3;

3518 
$$
 = 
$4
;

3520 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

3521 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

3523 i‡(*
«me
 == ':') {

3524 
f
;

3526 i‡((
f
 = 
	`¨ønge_ˇŒ_öhîôed
(
«me
 + 1, 
$$
)) != -1)

3534 
f
;

3535 
idít_hash_ñem_t
 *
ihe
;

3537 
f
 = (
ihe
 = 
	`lookup_idít
(
«me
)Ë? ihe->
dn
.
fun˘i⁄_num
 : -1;

3538 
$$
->
köd
 = 
NODE_CALL_1
;

3539 
$$
->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

3540 i‡(
f
!=-1) {

3545 
$$
->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, 
$4
->
r
.
ex¥
);

3547 
f
 = 
	`deföe_√w_fun˘i⁄
(
«me
, 0, 0,

3548 
DECL_PUBLIC
|
FUNC_UNDEFINED
, 
TYPE_ANY
);

3550 
$$
->
l
.
numbî
 = 
f
;

3556 i‡(
exa˘_ty≥s
 && (
	`FUNCTION_FLAGS
(
f
Ë& 
FUNC_UNDEFINED
)) {

3557 
buf
[256];

3558 *
íd
 = 
	`EndOf
(
buf
);

3559 *
p
;

3560 *
n
 = 
$1
;

3561 i‡(*
n
 == ':')Ç++;

3563 
	`FUNCTION_FLAGS
(
f
Ë&~
FUNC_UNDEFINED
;

3564 
	`FUNCTION_FLAGS
(
f
Ë|(
FUNC_INHERITED
 | 
FUNC_VARARGS
);

3565 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

3566 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

3567 
	`yyîr‹
(
buf
);

3569 i‡(!(
	`FUNCTION_FLAGS
(
f
Ë& 
FUNC_UNDEFINED
))

3570 
$$
->
ty≥
 = 
	`FUNCTION_DEF
(
f
)->type;

3572 
$$
->
ty≥
 = 
TYPE_ANY
;

3574 
$$
 = 
	`check_ªfs
(
num_ªfs
 - 
$
<
numbî
>2, 
$4
, $$);

3575 
num_ªfs
 = 
$
<
numbî
>2;

3576 
	`s¸©ch_‰ì
(
«me
);

3578 | 
ex¥4
 
L_ARROW
 
idítifõr
 '('

3580 #
löe
 3474 "grammar.y.pre"

3581 
$
<
numbî
>$ = 
c⁄ãxt
;

3582 
$
<
numbî
>4 = 
num_ªfs
;

3583 
c⁄ãxt
 |
ARG_LIST
;

3585 
ex¥_li°
 ')'

3587 #
löe
 3480 "grammar.y.pre"

3588 
idít_hash_ñem_t
 *
ihe
;

3589 
f
;

3590 
∑r£_node_t
 *
≤1
, *
≤2
;

3592 
$6
->
v
.
numbî
 += 2;

3594 
≤1
 = 
	`√w_node_no_löe
();

3595 
≤1
->
ty≥
 = 0;

3596 
≤1
->
v
.
ex¥
 = 
$1
;

3597 
≤1
->
köd
 = 
$6
->
v
.
numbî
;

3599 
≤2
 = 
	`√w_node_no_löe
();

3600 
≤2
->
ty≥
 = 0;

3601 
	`CREATE_STRING
(
≤2
->
v
.
ex¥
, 
$3
);

3602 
	`s¸©ch_‰ì
(
$3
);

3605 
≤2
->
r
.
ex¥
 = 
$6
->r.expr;

3606 
≤1
->
r
.
ex¥
 = 
≤2
;

3607 
$6
->
r
.
ex¥
 = 
≤1
;

3609 i‡(!
$6
->
l
.
ex¥
Ë$6->l.ex¥ = 
≤2
;

3611 
c⁄ãxt
 = 
$
<
numbî
>5;

3612 
ihe
 = 
	`lookup_idít
("call_other");

3614 i‡((
f
 = 
ihe
->
dn
.
simul_num
) != -1) {

3615 
$$
 = 
$6
;

3616 
$$
->
köd
 = 
NODE_CALL_1
;

3617 
$$
->
v
.
numbî
 = 
F_SIMUL_EFUN
;

3618 
$$
->
l
.
numbî
 = 
f
;

3619 
$$
->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
DECL_MODS
;

3621 
$$
 = 
	`vÆid©e_efun_ˇŒ
(
¨row_efun
, 
$6
);

3622 #
ifdef
 
CAST_CALL_OTHERS


3623 
$$
->
ty≥
 = 
TYPE_UNKNOWN
;

3625 
$$
->
ty≥
 = 
TYPE_ANY
;

3626 #
ídif


3628 
$$
 = 
	`check_ªfs
(
num_ªfs
 - 
$
<
numbî
>4, 
$6
, $$);

3629 
num_ªfs
 = 
$
<
numbî
>4;

3631 | '(' '*' 
comma_ex¥
 ')' '('

3633 #
löe
 3525 "grammar.y.pre"

3634 
$
<
numbî
>$ = 
c⁄ãxt
;

3635 
$
<
numbî
>5 = 
num_ªfs
;

3636 
c⁄ãxt
 |
ARG_LIST
;

3638 
ex¥_li°
 ')'

3640 #
löe
 3531 "grammar.y.pre"

3641 
∑r£_node_t
 *
ex¥
;

3643 
c⁄ãxt
 = 
$
<
numbî
>6;

3644 
$$
 = 
$7
;

3645 
$$
->
köd
 = 
NODE_EFUN
;

3646 
$$
->
l
.
numbî
 = $$->
v
.number + 1;

3647 
$$
->
v
.
numbî
 = 
¥edefs
[
evÆu©e_efun
].
tokí
;

3648 #
ifdef
 
CAST_CALL_OTHERS


3649 
$$
->
ty≥
 = 
TYPE_UNKNOWN
;

3651 
$$
->
ty≥
 = 
TYPE_ANY
;

3652 #
ídif


3653 
ex¥
 = 
	`√w_node_no_löe
();

3654 
ex¥
->
ty≥
 = 0;

3655 
ex¥
->
v
.ex¥ = 
$3
;

3656 
ex¥
->
r
.ex¥ = 
$$
->r.expr;

3657 
$$
->
r
.
ex¥
 =Éxpr;

3658 
$$
 = 
	`check_ªfs
(
num_ªfs
 - 
$
<
numbî
>5, 
$7
, $$);

3659 
num_ªfs
 = 
$
<
numbî
>5;

3663 
efun_ovîride
: 
L_EFUN
 
L_COLON_COLON
 
idítifõr
 {

3664 #
löe
 3554 "grammar.y.pre"

3665 
svÆue_t
 *
ªs
;

3666 
idít_hash_ñem_t
 *
ihe
;

3668 
$$
 = (
ihe
 = 
	`lookup_idít
(
$3
)Ë? ihe->
dn
.
efun_num
 : -1;

3669 i‡(
$$
 == -1) {

3670 
buf
[256];

3671 *
íd
 = 
	`EndOf
(
buf
);

3672 *
p
;

3674 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnknownÉfun: ");

3675 
p
 = 
	`°Ωut
’, 
íd
, 
$3
);

3676 
	`yyîr‹
(
buf
);

3678 
	`push_mÆlo˚d_°rög
(
	`the_fûe_«me
(
cuºít_fûe
));

3679 
	`sh¨e_™d_push_°rög
(
$3
);

3680 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
	`maö_fûe_«me
()));

3681 
ªs
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_OVERRIDE
, 3);

3682 i‡(!
	`MASTER_APPROVED
(
ªs
)) {

3683 
	`yyîr‹
("Invalid simulatedÉfunction override");

3684 
$$
 = -1;

3687 
	`s¸©ch_‰ì
(
$3
);

3689 | 
L_EFUN
 
L_COLON_COLON
 
L_NEW
 {

3690 #
löe
 3579 "grammar.y.pre"

3691 
svÆue_t
 *
ªs
;

3693 
	`push_mÆlo˚d_°rög
(
	`the_fûe_«me
(
cuºít_fûe
));

3694 
	`push_c⁄°™t_°rög
("new");

3695 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
	`maö_fûe_«me
()));

3696 
ªs
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_OVERRIDE
, 3);

3697 i‡(!
	`MASTER_APPROVED
(
ªs
)) {

3698 
	`yyîr‹
("Invalid simulatedÉfunction override");

3699 
$$
 = -1;

3700 } 
$$
 = 
√w_efun
;

3704 
fun˘i⁄_«me
:

3705 
L_IDENTIFIER


3706 | 
L_COLON_COLON
 
idítifõr


3708 #
löe
 3596 "grammar.y.pre"

3709 
l
 = 
	`°æí
(
$2
) + 1;

3710 *
p
;

3715 
$$
 = 
	`s¸©ch_ªÆloc
(
$2
, 
l
 + 3);

3716 
p
 = 
$$
 + 
l
;

3717 
p
--,
l
--)

3718 *(
p
+3) = *p;

3719 
	`°∫˝y
(
$$
, ":::", 3);

3721 | 
L_BASIC_TYPE
 
L_COLON_COLON
 
idítifõr


3723 #
löe
 3610 "grammar.y.pre"

3724 
z
, 
l
 = 
	`°æí
(
$3
) + 1;

3725 *
p
;

3727 
z
 = 
	`°æí
(
compûî_ty≥_«mes
[
$1
]) + 3;

3728 
$$
 = 
	`s¸©ch_ªÆloc
(
$3
, 
l
 + 
z
);

3729 
p
 = 
$$
 + 
l
;

3730 
p
--,
l
--)

3731 *(
p
+
z
) = *p;

3732 
$$
[0] = ':';

3733 
	`°∫˝y
(
$$
 + 1, 
compûî_ty≥_«mes
[
$1
], 
z
 - 3);

3734 
$$
[
z
-2] = ':';

3735 
$$
[
z
-1] = ':';

3737 | 
idítifõr
 
L_COLON_COLON
 identifier

3739 #
löe
 3625 "grammar.y.pre"

3740 
l
 = 
	`°æí
(
$1
);

3742 
$$
 = 
	`s¸©ch_Æloc
(
l
 + 
	`°æí
(
$3
) + 4);

3743 *(
$$
) = ':';

3744 
	`°r˝y
(
$$
 + 1, 
$1
);

3745 
	`°r˝y
(
$$
 + 
l
 + 1, "::");

3746 
	`°r˝y
(
$$
 + 
l
 + 3, 
$3
);

3747 
	`s¸©ch_‰ì
(
$1
);

3748 
	`s¸©ch_‰ì
(
$3
);

3752 
c⁄d
:

3753 
L_IF
 '(' 
comma_ex¥
 ')' 
°©emít
 
›ti⁄Æ_ñ£_∑π


3755 #
löe
 3640 "grammar.y.pre"

3757 i‡(
	`IS_NODE
(
$3
, 
NODE_BINARY_OP
, 
F_NE
)) {

3758 i‡(
	`IS_NODE
(
$3
->
r
.
ex¥
, 
NODE_NUMBER
, 0))

3759 
$3
 = $3->
l
.
ex¥
;

3760 i‡(
	`IS_NODE
(
$3
->
l
.
ex¥
, 
NODE_NUMBER
, 0))

3761 
$3
 = $3->
r
.
ex¥
;

3768 i‡(
$5
 == 0) {

3769 i‡(
$6
 == 0) {

3771 
$$
 = 
	`p›_vÆue
(
$3
);

3775 
∑r£_node_t
 *
ª∂
;

3777 
	`CREATE_UNARY_OP
(
ª∂
, 
F_NOT
, 
TYPE_NUMBER
, 
$3
);

3778 
$3
 = 
ª∂
;

3779 
$5
 = 
$6
;

3780 
$6
 = 0;

3783 
	`CREATE_IF
(
$$
, 
$3
, 
$5
, 
$6
);

3787 
›ti⁄Æ_ñ£_∑π
:

3788  %
¥ec
 
LOWER_THAN_ELSE


3790 #
löe
 3674 "grammar.y.pre"

3791 
$$
 = 0;

3793 | 
L_ELSE
 
°©emít


3795 #
löe
 3678 "grammar.y.pre"

3796 
$$
 = 
$2
;

3799 
	}
%%

	@hash.c

5 
	#EDIT_SOURCE


	)

6 
	#NO_SOCKETS


	)

7 
	#NO_OPCODES


	)

9 
	~"°d.h
"

10 
	~"hash.h
"

12 
	gT
[] =

32 
INLINE
 

33 
hash°r
 
	$P3
(*, 
s
,

34 , 
maxn
,

35 , 
hashs
)

37 
h
;

38 *
p
;

40 
h
 = (Ë*
s
;

41 i‡(
h
) {

42 i‡(
hashs
 > 256) {

43 
oh
 = 
T
[(Ë*
s
];

45 
p
 = (*Ë
s
 + 1; *∞&&Ö <(*Ë†+ 
maxn
;Ö++) {

46 
h
 = 
T
[h ^ *
p
];

47 
oh
 = 
T
[oh ^ *
p
];

49 
h
 |(
oh
 << 8);

51 
p
 = (*Ë
s
 + 1; *∞&&Ö <(*Ë†+ 
maxn
;Ö++)

52 
h
 = 
T
[h ^ *
p
];

54  (Ë(
h
 % 
hashs
);

55 
	}
}

63 
INLINE
 

64 
whash°r
 
	$P2
(*, 
s
, , 
maxn
)

66 
oh
, 
h
;

67 *
p
;

68 
i
;

70 i‡(!*
s
)

72 
p
 = (*Ë
s
;

73 
oh
 = 
T
[*
p
];

74 
h
 = (*(
p
++) + 1) & 0xff;

75 
i
 = 
maxn
 - 1; *
p
 && --i >= 0; ) {

76 
oh
 = 
T
[oh ^ *
p
];

77 
h
 = 
T
[h ^ *(
p
++)];

80  (
oh
 << 8Ë+ 
h
;

81 
	}
}

	@hash.h

1 #i‚de‡
HASH_H


2 
	#HASH_H


	)

7 
hash°r
 
PROT
((*, , ));

8 
whash°r
 
PROT
((*, ));

	@icode.c

4 
	~"°d.h
"

5 
	~"Õc_ö˛.h
"

6 
	~"icode.h
"

7 
	~"compûî.h
"

8 
	~"gíî©e.h
"

10 
ös_ªÆ
 
PROT
(());

11 
ös_sh‹t
 
PROT
(());

12 
upd_sh‹t
 
PROT
((, , *));

13 
ös_byã
 
PROT
(());

14 
upd_byã
 
PROT
((, ));

15 
wrôe_numbî
 
PROT
(());

16 
ös_öt
 
PROT
(());

17 #i‡
SIZEOF_PTR
 == 8

18 
ös_l⁄g
 
PROT
(());

20 
i_gíî©e_node
 
PROT
((
∑r£_node_t
 *));

21 
i_gíî©e_if_bønch
 
PROT
((
∑r£_node_t
 *, ));

22 
i_gíî©e_lo›
 
PROT
((, 
∑r£_node_t
 *,Öarse_node_t *,

23 
∑r£_node_t
 *));

24 
i_upd©e_bønch_li°
 
PROT
((
∑r£_node_t
 *, *));

25 
åy_to_push
 
PROT
((, ));

27 
	gf‹óch_dïth
 = 0;

29 
	gcuºít_num_vÆues
;

31 
	gœ°_size_gíî©ed
;

32 
	glöe_beög_gíî©ed
;

34 
	gpush_°©e
;

35 
	gpush_°¨t
;

37 
∑r£_node_t
 *
	gbønch_li°
[3];

38 
	gnf‹w¨d_bønches
, 
	gnf‹w¨d_bønches_max
;

39 *
	gf‹w¨d_bønches
 = 0;

41 
ös_ªÆ
 
	$P1
(, 
l
)

43 
f
 = ()
l
;

45 i‡(
¥og_code
 + 4 > 
¥og_code_max
) {

46 
mem_block_t
 *
mbp
 = &
mem_block
[
A_PROGRAM
];

48 
UPDATE_PROGRAM_SIZE
;

49 
	`ªÆloc_mem_block
(
mbp
);

51 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

52 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

54 
	`STORE_FLOAT
(
¥og_code
, 
f
);

55 
	}
}

62 
ös_sh‹t
 
	$P1
(, 
l
)

64 i‡(
¥og_code
 + 2 > 
¥og_code_max
) {

65 
mem_block_t
 *
mbp
 = &
mem_block
[
A_PROGRAM
];

66 
UPDATE_PROGRAM_SIZE
;

67 
	`ªÆloc_mem_block
(
mbp
);

69 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

70 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

72 
	`STORE_SHORT
(
¥og_code
, 
l
);

73 
	}
}

79 
ös_öt
 
	$P1
(, 
l
)

82 i‡(
¥og_code
 + 4 > 
¥og_code_max
) {

83 
mem_block_t
 *
mbp
 = &
mem_block
[
A_PROGRAM
];

84 
UPDATE_PROGRAM_SIZE
;

85 
	`ªÆloc_mem_block
(
mbp
);

87 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

88 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

90 
	`STORE_INT
(
¥og_code
, 
l
);

91 
	}
}

97 #i‡
SIZEOF_PTR
 == 8

98 
ös_l⁄g
 
	$P1
(, 
l
)

100 i‡(
¥og_code
 + 8 > 
¥og_code_max
) {

101 
mem_block_t
 *
mbp
 = &
mem_block
[
A_PROGRAM
];

102 
UPDATE_PROGRAM_SIZE
;

103 
	`ªÆloc_mem_block
(
mbp
);

105 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

106 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

108 
	`STORE_PTR
(
¥og_code
, 
l
);

109 
	}
}

112 
upd_sh‹t
 
	$P3
(, 
off£t
, , 
l
, *, 
whîe
)

114 
s
;

116 
	`IF_DEBUG
(
UPDATE_PROGRAM_SIZE
);

117 
	`DEBUG_CHECK2
(
off£t
 > 
CURRENT_PROGRAM_SIZE
,

119 
off£t
, 
CURRENT_PROGRAM_SIZE
);

120 i‡(
l
 > 
USHRT_MAX
) {

121 
buf
[256];

123 
	`•rötf
(
buf
, "branchÜimitÉxceeded in %s,ÇearÜine %i",

124 
whîe
, 
löe_beög_gíî©ed
);

125 
	`yyîr‹
(
buf
);

127 
s
 = 
l
;

129 
	`COPY_SHORT
(
mem_block
[
A_PROGRAM
].
block
 + 
off£t
, &
s
);

130 
	}
}

132 
ös_ªl_sh‹t
 
	$P1
(, 
l
)

134 i‡(
l
 > 
USHRT_MAX
) {

135 
buf
[256];

137 
	`•rötf
(
buf
, "branchÜimitÉxceeded in switchÅable,ÇearÜine %i",

138 
löe_beög_gíî©ed
);

139 
	`yyîr‹
(
buf
);

141 
	`ös_sh‹t
(
l
);

142 
	}
}

144 
ös_byã
 
	$P1
(, 
b
)

146 i‡(
¥og_code
 =
¥og_code_max
) {

147 
mem_block_t
 *
mbp
 = &
mem_block
[
A_PROGRAM
];

148 
UPDATE_PROGRAM_SIZE
;

149 
	`ªÆloc_mem_block
(
mbp
);

151 
¥og_code
 = 
mbp
->
block
 + mbp->
cuºít_size
;

152 
¥og_code_max
 = 
mbp
->
block
 + mbp->
max_size
;

154 *
¥og_code
++ = 
b
;

155 
	}
}

157 
upd_byã
 
	$P2
(, 
off£t
, , 
b
)

159 
	`IF_DEBUG
(
UPDATE_PROGRAM_SIZE
);

160 
	`DEBUG_CHECK2
(
off£t
 > 
CURRENT_PROGRAM_SIZE
,

162 
off£t
, 
CURRENT_PROGRAM_SIZE
);

163 
mem_block
[
A_PROGRAM
].
block
[
off£t
] = 
b
;

164 
	}
}

166 
íd_pushes
 
PROT
(()) {

167 i‡(
	gpush_°©e
) {

168 i‡(
	gpush_°©e
 > 1)

169 
upd_byã
(
push_°¨t
, 
push_°©e
);

170 
	gpush_°©e
 = 0;

174 
öôülize_push
 
PROT
(()) {

175 
	gwh©
 = 
mem_block
[
A_PROGRAM
].
block
[
push_°¨t
];

176 
	g¨g
 = 
mem_block
[
A_PROGRAM
].
block
[
push_°¨t
 + 1];

178 
	g¥og_code
 = 
mem_block
[
A_PROGRAM
].
block
 + 
push_°¨t
;

179 
ös_byã
(
F_PUSH
);

180 
	gpush_°¨t
++;

181 
ös_byã
(0);

183 
	gwh©
) {

184 
	gF_CONST0
:

185 
ös_byã
(
PUSH_NUMBER
 | 0);

187 
	gF_CONST1
:

188 
ös_byã
(
PUSH_NUMBER
 | 1);

190 
	gF_BYTE
:

191 
ös_byã
(
PUSH_NUMBER
 | 
¨g
);

193 
	gF_SHORT_STRING
:

194 
ös_byã
(
PUSH_STRING
 | 
¨g
);

196 
	gF_LOCAL
:

197 
ös_byã
(
PUSH_LOCAL
 | 
¨g
);

199 
	gF_GLOBAL
:

200 
ös_byã
(
PUSH_GLOBAL
 | 
¨g
);

210 
wrôe_smÆl_numbî
 
	$P1
(, 
vÆ
) {

211 i‡(
	`åy_to_push
(
PUSH_NUMBER
, 
vÆ
)) ;

212 
	`ös_byã
(
F_BYTE
);

213 
	`ös_byã
(
vÆ
);

214 
	}
}

216 
wrôe_numbî
 
	$P1
(, 
vÆ
)

218 i‡((
vÆ
 & ~0xff) == 0)

219 
	`wrôe_smÆl_numbî
(
vÆ
);

221 
	`íd_pushes
();

222 i‡(
vÆ
 < 0 && val > -256) {

223 
	`ös_byã
(
F_NBYTE
);

224 
	`ös_byã
(-
vÆ
);

225 } i‡(
vÆ
 >= -32768 && val <= 32767) {

226 
	`ös_byã
(
F_SHORT_INT
);

227 
	`ös_sh‹t
(
vÆ
);

229 
	`ös_byã
(
F_NUMBER
);

230 
	`ös_öt
(
vÆ
);

233 
	}
}

236 
gíî©e_ex¥_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

237 
∑r£_node_t
 *
≤
;

238 
n
, 
Êag
;

240 i‡(!
ex¥
) ;

241 
≤
 = 
ex¥
;

242 
Êag
 = 
n
 = 0;

244 i‡(
≤
->
ty≥
 & 1Ë
Êag
 = 1;

245 
	`i_gíî©e_node
(
≤
->
v
.
ex¥
);

246 
n
++;

247 } (
≤
 =Ön->
r
.
ex¥
));

249 i‡(
Êag
) {

250 
≤
 = 
ex¥
;

252 
n
--;

253 i‡(
≤
->
ty≥
 & 1) {

254 
	`íd_pushes
();

255 
	`ös_byã
(
F_EXPAND_VARARGS
);

256 
	`ös_byã
(
n
);

258 } (
≤
 =Ön->
r
.
ex¥
));

260 
	}
}

263 
gíî©e_lvÆue_li°
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

264 (
ex¥
 =Éx¥->
r
.expr)) {

265 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

266 
	`íd_pushes
();

267 
	`ös_byã
(
F_VOID_ASSIGN
);

269 
	}
}

271 
INLINE_STATIC
 

272 
swôch_to_löe
 
	$P1
(, 
löe
) {

273 
sz
 = 
CURRENT_PROGRAM_SIZE
 - 
œ°_size_gíî©ed
;

274 
ADDRESS_TYPE
 
s
;

275 *
p
;

277 i‡(
sz
) {

278 
s
 = 
löe_beög_gíî©ed
;

280 
œ°_size_gíî©ed
 +
sz
;

281 
sz
 > 255) {

282 
p
 = (*)
	`Æloˇã_ö_mem_block
(
A_LINENUMBERS
, (
ADDRESS_TYPE
) + 1);

283 *
p
++ = 255;

284 #i‡!
	`deföed
(
USE_32BIT_ADDRESSES
Ë&& !deföed(
LPC_TO_C
)

285 
	`STORE_SHORT
(
p
, 
s
);

287 
	`STORE_INT
(
p
, 
s
);

289 
sz
 -= 255;

291 
p
 = (*)
	`Æloˇã_ö_mem_block
(
A_LINENUMBERS
, (
ADDRESS_TYPE
) + 1);

292 *
p
++ = 
sz
;

293 #i‡!
	`deföed
(
USE_32BIT_ADDRESSES
Ë&& !deföed(
LPC_TO_C
)

294 
	`STORE_SHORT
(
p
, 
s
);

296 
	`STORE_INT
(
p
, 
s
);

299 
löe_beög_gíî©ed
 = 
löe
;

300 
	}
}

303 
åy_to_push
 
	$P2
(, 
köd
, , 
vÆue
) {

304 i‡(
push_°©e
) {

305 i‡(
vÆue
 <
PUSH_MASK
) {

306 i‡(
push_°©e
 == 1)

307 
	`öôülize_push
();

308 
push_°©e
++;

309 
	`ös_byã
(
köd
 | 
vÆue
);

310 i‡(
push_°©e
 == 255)

311 
	`íd_pushes
();

313 } 
	`íd_pushes
();

314 } i‡(
vÆue
 <
PUSH_MASK
) {

315 
push_°¨t
 = 
CURRENT_PROGRAM_SIZE
;

316 
push_°©e
 = 1;

317 
köd
) {

318 
PUSH_STRING
: 
	`ös_byã
(
F_SHORT_STRING
); ;

319 
PUSH_LOCAL
: 
	`ös_byã
(
F_LOCAL
); ;

320 
PUSH_GLOBAL
: 
	`ös_byã
(
F_GLOBAL
); ;

321 
PUSH_NUMBER
:

322 i‡(
vÆue
 == 0) {

323 
	`ös_byã
(
F_CONST0
);

325 } i‡(
vÆue
 == 1) {

326 
	`ös_byã
(
F_CONST1
);

329 
	`ös_byã
(
F_BYTE
);

331 
	`ös_byã
(
vÆue
);

335 
	}
}

338 
i_gíî©e_node
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

339 i‡(!
ex¥
) ;

341 i‡(
ex¥
->
löe
 &&Éx¥->löê!
löe_beög_gíî©ed
)

342 
	`swôch_to_löe
(
ex¥
->
löe
);

343 
ex¥
->
köd
) {

344 
NODE_FUNCTION
:

346 
num
;

351 
num
 = 
	`FUNCTION_TEMP
(
ex¥
->
v
.
numbî
)->
u
.
ödex
;

352 
	`FUNC
(
num
)->
addªss
 = 
	`gíî©e_fun˘i⁄
(FUNC(num),

353 
ex¥
->
r
.ex¥,Éx¥->
l
.
numbî
);

356 
NODE_TERNARY_OP
:

357 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

358 
ex¥
 =Éx¥->
r
.expr;

359 
NODE_BINARY_OP
:

360 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

362 
NODE_UNARY_OP
:

363 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

365 
NODE_OPCODE
:

366 
	`íd_pushes
();

367 
	`ös_byã
(
ex¥
->
v
.
numbî
);

369 
NODE_TERNARY_OP_1
:

370 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

371 
ex¥
 =Éx¥->
r
.expr;

373 
NODE_BINARY_OP_1
:

374 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

375 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

376 
	`íd_pushes
();

377 
	`ös_byã
(
ex¥
->
v
.
numbî
);

378 
	`ös_byã
(
ex¥
->
ty≥
);

380 
NODE_UNARY_OP_1
:

381 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

383 
NODE_OPCODE_1
:

384 i‡(
ex¥
->
v
.
numbî
 =
F_LOCAL
) {

385 i‡(
	`åy_to_push
(
PUSH_LOCAL
, 
ex¥
->
l
.
numbî
)) ;

386 } i‡(
ex¥
->
v
.
numbî
 =
F_GLOBAL
) {

387 i‡(
	`åy_to_push
(
PUSH_GLOBAL
, 
ex¥
->
l
.
numbî
)) ;

389 
	`íd_pushes
();

390 
	`ös_byã
(
ex¥
->
v
.
numbî
);

391 
	`ös_byã
(
ex¥
->
l
.
numbî
);

393 
NODE_OPCODE_2
:

394 
	`íd_pushes
();

395 
	`ös_byã
(
ex¥
->
v
.
numbî
);

396 
	`ös_byã
(
ex¥
->
l
.
numbî
);

397 i‡(
ex¥
->
v
.
numbî
 =
F_LOOP_COND_NUMBER
)

398 
	`ös_öt
(
ex¥
->
r
.
numbî
);

400 
	`ös_byã
(
ex¥
->
r
.
numbî
);

402 
NODE_RETURN
:

404 
n
;

405 
n
 = 
f‹óch_dïth
;

406 
	`íd_pushes
();

407 
n
--)

408 
	`ös_byã
(
F_EXIT_FOREACH
);

410 i‡(
ex¥
->
r
.expr) {

411 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

412 
	`íd_pushes
();

413 
	`ös_byã
(
F_RETURN
);

414 } 
	`ös_byã
(
F_RETURN_ZERO
);

417 
NODE_STRING
:

418 i‡(
	`åy_to_push
(
PUSH_STRING
, 
ex¥
->
v
.
numbî
)) ;

419 i‡(
ex¥
->
v
.
numbî
 <= 0xff) {

420 
	`ös_byã
(
F_SHORT_STRING
);

421 
	`ös_byã
(
ex¥
->
v
.
numbî
);

423 
	`ös_byã
(
F_STRING
);

424 
	`ös_sh‹t
(
ex¥
->
v
.
numbî
);

427 
NODE_REAL
:

428 
	`íd_pushes
();

429 
	`ös_byã
(
F_REAL
);

430 
	`ös_ªÆ
(
ex¥
->
v
.
ªÆ
);

432 
NODE_NUMBER
:

433 
	`wrôe_numbî
(
ex¥
->
v
.
numbî
);

435 
NODE_LAND_LOR
:

436 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

437 
	`i_gíî©e_f‹w¨d_bønch
(
ex¥
->
v
.
numbî
);

438 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

439 i‡(
ex¥
->
l
.ex¥->
köd
 =
NODE_BRANCH_LINK
)

440 
	`i_upd©e_f‹w¨d_bønch_löks
(
ex¥
->
v
.
numbî
,ex¥->
l
.expr);

442 
	`i_upd©e_f‹w¨d_bønch
("&& or ||");

444 
NODE_BRANCH_LINK
:

445 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

446 
	`íd_pushes
();

447 
	`ös_byã
(0);

448 
ex¥
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

449 
	`ös_sh‹t
(0);

450 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

452 
NODE_CALL_2
:

453 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

454 
	`íd_pushes
();

455 
	`ös_byã
(
ex¥
->
v
.
numbî
);

456 
	`ös_byã
(
ex¥
->
l
.
numbî
 >> 16);

457 
	`ös_sh‹t
(
ex¥
->
l
.
numbî
 & 0xffff);

458 
	`ös_byã
((
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0));

460 
NODE_CALL_1
:

461 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

462 
	`íd_pushes
();

463 i‡(
ex¥
->
v
.
numbî
 =
F_CALL_FUNCTION_BY_ADDRESS
) {

464 
ex¥
->
l
.
numbî
 = 
comp_def_ödex_m≠
[expr->l.number];

466 
	`ös_byã
(
ex¥
->
v
.
numbî
);

467 
	`ös_sh‹t
(
ex¥
->
l
.
numbî
);

468 
	`ös_byã
((
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0));

470 
NODE_CALL
:

471 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

472 
	`íd_pushes
();

473 
	`ös_byã
(
ex¥
->
v
.
numbî
);

474 
	`ös_sh‹t
(
ex¥
->
l
.
numbî
);

476 
NODE_TWO_VALUES
:

477 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

478 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

480 
NODE_CONTROL_JUMP
:

482 
köd
 = 
ex¥
->
v
.
numbî
;

483 
	`íd_pushes
();

484 
	`ös_byã
(
F_BRANCH
);

485 
ex¥
->
v
.ex¥ = 
bønch_li°
[
köd
];

486 
ex¥
->
l
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

487 
	`ös_sh‹t
(0);

488 
bønch_li°
[
köd
] = 
ex¥
;

491 
NODE_PARAMETER
:

493 
which
 = 
ex¥
->
v
.
numbî
 + 
cuºít_num_vÆues
;

494 i‡(
	`åy_to_push
(
PUSH_LOCAL
, 
which
)) ;

495 
	`ös_byã
(
F_LOCAL
);

496 
	`ös_byã
(
which
);

499 
NODE_PARAMETER_LVALUE
:

500 
	`íd_pushes
();

501 
	`ös_byã
(
F_LOCAL_LVALUE
);

502 
	`ös_byã
(
ex¥
->
v
.
numbî
 + 
cuºít_num_vÆues
);

504 
NODE_IF
:

505 
	`i_gíî©e_if_bønch
(
ex¥
->
v
.expr, 0);

506 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

507 i‡(
ex¥
->
r
.expr) {

508 
	`i_gíî©e_ñ£
();

509 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

511 
	`i_upd©e_f‹w¨d_bønch
("if");

513 
NODE_LOOP
:

514 
	`i_gíî©e_lo›
(
ex¥
->
ty≥
,Éx¥->
v
.ex¥,Éx¥->
l
.ex¥,Éx¥->
r
.expr);

516 
NODE_FOREACH
:

518 
tmp
 = 0;

520 
	`i_gíî©e_node
(
ex¥
->
v
.expr);

521 
	`íd_pushes
();

522 
	`ös_byã
(
F_FOREACH
);

523 i‡(
ex¥
->
l
.ex¥->
v
.
numbî
 =
F_GLOBAL_LVALUE
)

524 
tmp
 |
FOREACH_RIGHT_GLOBAL
;

525 i‡(
ex¥
->
l
.ex¥->
v
.
numbî
 =
F_REF_LVALUE
)

526 
tmp
 |
FOREACH_REF
;

527 i‡(
ex¥
->
r
.expr) {

528 i‡(
tmp
 & 
FOREACH_RIGHT_GLOBAL
)

529 
tmp
 = (tm∞& ~
FOREACH_RIGHT_GLOBAL
Ë| 
FOREACH_LEFT_GLOBAL
;

531 
tmp
 |
FOREACH_MAPPING
;

532 i‡(
ex¥
->
r
.ex¥->
v
.
numbî
 =
F_GLOBAL_LVALUE
)

533 
tmp
 |
FOREACH_RIGHT_GLOBAL
;

534 i‡(
ex¥
->
r
.ex¥->
v
.
numbî
 =
F_REF_LVALUE
)

535 
tmp
 |
FOREACH_REF
;

537 
	`ös_byã
(
tmp
);

538 
	`ös_byã
(
ex¥
->
l
.ex¥->l.
numbî
);

539 i‡(
ex¥
->
r
.expr)

540 
	`ös_byã
(
ex¥
->
r
.ex¥->
l
.
numbî
);

543 
NODE_CASE_NUMBER
:

544 
NODE_CASE_STRING
:

545 i‡(
ex¥
->
v
.expr) {

546 
∑r£_node_t
 *
Ÿhî
 = 
ex¥
->
v
.expr;

547 
ex¥
->
v
.
numbî
 = 1;

548 
Ÿhî
->
l
.
ex¥
 =Éxpr->l.expr;

549 
Ÿhî
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

550 
ex¥
->
l
.ex¥ = 
Ÿhî
;

552 
ex¥
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

554 
	`íd_pushes
();

556 
NODE_DEFAULT
:

557 
ex¥
->
v
.
numbî
 = 
CURRENT_PROGRAM_SIZE
;

558 
	`íd_pushes
();

560 
NODE_SWITCH_STRINGS
:

561 
NODE_SWITCH_NUMBERS
:

562 
NODE_SWITCH_DIRECT
:

563 
NODE_SWITCH_RANGES
:

565 
addr
, 
œ°_bªak
;

566 
∑r£_node_t
 *
sub
 = 
ex¥
->
l
.expr;

567 
∑r£_node_t
 *
ßve_swôch_bªaks
 = 
bønch_li°
[
CJ_BREAK_SWITCH
];

569 
	`i_gíî©e_node
(
sub
);

570 
bønch_li°
[
CJ_BREAK_SWITCH
] = 0;

571 
	`íd_pushes
();

572 
	`ös_byã
(
F_SWITCH
);

573 
addr
 = 
CURRENT_PROGRAM_SIZE
;

578 
	`ös_byã
(0xff);

579 
	`ös_sh‹t
(0);

580 
	`ös_sh‹t
(0);

581 
	`ös_sh‹t
(0);

582 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

583 i‡(
ex¥
->
v
.ex¥ &&Éx¥->v.ex¥->
köd
 =
NODE_DEFAULT
) {

584 
	`upd_sh‹t
(
addr
 + 5, 
ex¥
->
v
.ex¥->v.
numbî
 -áddr,

586 
ex¥
->
v
.ex¥ =Éx¥->v.ex¥->
l
.expr;

588 
	`upd_sh‹t
(
addr
 + 5, 
CURRENT_PROGRAM_SIZE
 -áddr, "switch");

591 
	`íd_pushes
();

592 
	`ös_byã
(
F_BRANCH
);

593 
œ°_bªak
 = 
CURRENT_PROGRAM_SIZE
;

594 
	`ös_sh‹t
(0);

596 
	`upd_sh‹t
(
addr
 + 1, 
CURRENT_PROGRAM_SIZE
 -áddr, "switch");

597 #ifde‡
BINARIES


598 i‡(
¥agmas
 & 
PRAGMA_SAVE_BINARY
) {

599 i‡(
ex¥
->
köd
 =
NODE_SWITCH_STRINGS
) {

600 
sw
;

601 
sw
 = 
addr
 - 1;

602 
	`add_to_mem_block
(
A_PATCH
, (*)&
sw
,  sw);

606 i‡(
ex¥
->
köd
 =
NODE_SWITCH_DIRECT
) {

607 
∑r£_node_t
 *
≤
 = 
ex¥
->
v
.expr;

608 
≤
) {

609 
	`ös_ªl_sh‹t
(
≤
->
v
.
numbî
 - 
addr
);

610 
≤
 =Ön->
l
.
ex¥
;

612 
	`ös_öt
(
ex¥
->
v
.ex¥->
r
.
numbî
);

613 
mem_block
[
A_PROGRAM
].
block
[
addr
] = ()0xfe;

615 
èbÀ_size
 = 0;

616 
powî_of_two
 = 1;

617 
i
 = 0;

618 
∑r£_node_t
 *
≤
 = 
ex¥
->
v
.expr;

620 
≤
) {

621 i‡(
ex¥
->
köd
 =
NODE_SWITCH_STRINGS
) {

622 i‡(
≤
->
r
.
numbî
) {

623 
	`INS_POINTER
((
POINTER_INT
)

624 
	`PROG_STRING
(
≤
->
r
.
numbî
));

626 
	`INS_POINTER
((
POINTER_INT
)0);

628 
	`INS_POINTER
((
POINTER_INT
)
≤
->
r
.
ex¥
);

629 i‡(
≤
->
v
.
numbî
 == 1)

630 
	`ös_sh‹t
(1);

632 
	`ös_ªl_sh‹t
(
≤
->
v
.
numbî
 - 
addr
);

633 
≤
 =Ön->
l
.
ex¥
;

634 
èbÀ_size
 += 1;

636 (
powî_of_two
<<1Ë<
èbÀ_size
) {

637 
powî_of_two
 <<= 1;

638 
i
++;

640 i‡(
ex¥
->
köd
 !
NODE_SWITCH_STRINGS
)

641 
mem_block
[
A_PROGRAM
].
block
[
addr
] = ()(0xf0+
i
);

643 
mem_block
[
A_PROGRAM
].
block
[
addr
] = ()(
i
*0x10+0x0f);

645 
	`i_upd©e_bønch_li°
(
bønch_li°
[
CJ_BREAK_SWITCH
], "switch break");

646 
bønch_li°
[
CJ_BREAK_SWITCH
] = 
ßve_swôch_bªaks
;

647 
	`upd_sh‹t
(
œ°_bªak
, 
CURRENT_PROGRAM_SIZE
 -Üast_break, "switch break");

648 
	`upd_sh‹t
(
addr
+3, 
CURRENT_PROGRAM_SIZE
 -áddr, "switch");

651 
NODE_CATCH
:

653 
addr
;

655 
	`íd_pushes
();

656 
	`ös_byã
(
F_CATCH
);

657 
addr
 = 
CURRENT_PROGRAM_SIZE
;

658 
	`ös_sh‹t
(0);

659 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

660 
	`ös_byã
(
F_END_CATCH
);

661 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
 -áddr, "catch");

664 
NODE_TIME_EXPRESSION
:

666 
	`íd_pushes
();

667 
	`ös_byã
(
F_TIME_EXPRESSION
);

668 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

669 
	`ös_byã
(
F_END_TIME_EXPRESSION
);

672 
NODE_LVALUE_EFUN
:

673 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

674 
	`gíî©e_lvÆue_li°
(
ex¥
->
r
.expr);

676 
NODE_FUNCTION_CONSTRUCTOR
:

677 i‡(
ex¥
->
r
.expr) {

678 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

679 
	`íd_pushes
();

680 
	`ös_byã
(
F_AGGREGATE
);

681 
	`ös_sh‹t
(
ex¥
->
r
.ex¥->
köd
);

683 
	`íd_pushes
();

684 
	`ös_byã
(
F_CONST0
);

686 
	`íd_pushes
();

688 
	`ös_byã
(
F_FUNCTION_CONSTRUCTOR
);

689 
	`ös_byã
(
ex¥
->
v
.
numbî
 & 0xff);

691 
ex¥
->
v
.
numbî
 & 0xff) {

692 
FP_SIMUL
:

693 
	`ös_sh‹t
(
ex¥
->
v
.
numbî
 >> 8);

695 
FP_LOCAL
:

696 
	`ös_sh‹t
(
comp_def_ödex_m≠
[
ex¥
->
v
.
numbî
 >> 8]);

698 
FP_EFUN
:

699 
	`ös_sh‹t
(
¥edefs
[
ex¥
->
v
.
numbî
 >> 8].
tokí
);

701 
FP_FUNCTIONAL
:

702 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

704 
addr
, 
ßve_cuºít_num_vÆues
 = 
cuºít_num_vÆues
;

705 
	`ös_byã
(
ex¥
->
v
.
numbî
 >> 8);

706 
addr
 = 
CURRENT_PROGRAM_SIZE
;

707 
	`ös_sh‹t
(0);

708 
cuºít_num_vÆues
 = 
ex¥
->
r
.ex¥ ?Éx¥->r.ex¥->
köd
 : 0;

709 
	`i_gíî©e_node
(
ex¥
->
l
.expr);

710 
cuºít_num_vÆues
 = 
ßve_cuºít_num_vÆues
;

711 
	`íd_pushes
();

712 
	`ös_byã
(
F_RETURN
);

713 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
 -áddr - 2,

719 
NODE_ANON_FUNC
:

721 
addr
;

722 
ßve_fd
 = 
f‹óch_dïth
;

724 
f‹óch_dïth
 = 0;

725 
	`íd_pushes
();

726 
	`ös_byã
(
F_FUNCTION_CONSTRUCTOR
);

727 i‡(
ex¥
->
v
.
numbî
 & 0x10000)

728 
	`ös_byã
(
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
);

730 
	`ös_byã
(
FP_ANONYMOUS
);

731 
	`ös_byã
(
ex¥
->
v
.
numbî
 & 0xff);

732 
	`ös_byã
(
ex¥
->
l
.
numbî
);

733 
addr
 = 
CURRENT_PROGRAM_SIZE
;

734 
	`ös_sh‹t
(0);

735 
	`i_gíî©e_node
(
ex¥
->
r
.expr);

736 
	`upd_sh‹t
(
addr
, 
CURRENT_PROGRAM_SIZE
 -áddr - 2,

738 
f‹óch_dïth
 = 
ßve_fd
;

741 
NODE_EFUN
:

743 
novÆue_u£d
 = 
ex¥
->
v
.
numbî
 & 
NOVALUE_USED_FLAG
;

744 
f
 = 
ex¥
->
v
.
numbî
 & ~
NOVALUE_USED_FLAG
;

746 
	`gíî©e_ex¥_li°
(
ex¥
->
r
.expr);

747 
	`íd_pushes
();

748 i‡(
f
 < 
ONEARG_MAX
) {

749 
	`ös_byã
(
f
);

752 i‡(
ex¥
->
l
.
numbî
 < 4 && 
ö°rs
[
f
].
max_¨g
 != -1)

753 
	`ös_byã
(
F_EFUN0
 + 
ex¥
->
l
.
numbî
);

755 
	`ös_byã
(
F_EFUNV
);

756 
	`ös_byã
(
ex¥
->
l
.
numbî
);

758 
	`ös_byã
(
f
 - 
ONEARG_MAX
);

760 i‡(
novÆue_u£d
) {

762 
	`ös_byã
(
F_CONST0
);

766 
	`Áèl
("Unknow¿nodê%òö i_gíî©e_node.\n", 
ex¥
->
köd
);

769 
	}
}

771 
i_gíî©e_lo›
 
	$P4
(, 
ã°_fú°
, 
∑r£_node_t
 *, 
block
,

772 
∑r£_node_t
 *, 
öc
,Ö¨£_node_à*, 
ã°
) {

773 
∑r£_node_t
 *
ßve_bªaks
 = 
bønch_li°
[
CJ_BREAK
];

774 
∑r£_node_t
 *
ßve_c⁄töues
 = 
bønch_li°
[
CJ_CONTINUE
];

775 
f‹evî
 = 
	`node_Æways_åue
(
ã°
);

776 
pos
;

778 i‡(
ã°_fú°
 =2Ë
f‹óch_dïth
++;

779 
bønch_li°
[
CJ_BREAK
] = bønch_li°[
CJ_CONTINUE
] = 0;

780 
	`íd_pushes
();

781 i‡(!
f‹evî
 && 
ã°_fú°
)

782 
	`i_gíî©e_f‹w¨d_bønch
(
F_BRANCH
);

783 
pos
 = 
CURRENT_PROGRAM_SIZE
;

784 
	`i_gíî©e_node
(
block
);

785 
	`i_upd©e_bønch_li°
(
bønch_li°
[
CJ_CONTINUE
], "continue");

786 i‡(
öc
Ë
	`i_gíî©e_node
(inc);

787 i‡(!
f‹evî
 && 
ã°_fú°
Ë
	`i_upd©e_f‹w¨d_bønch
("loop");

788 i‡(
ã°
 && (ã°->
v
.
numbî
 =
F_LOOP_COND_LOCAL
 ||

789 
ã°
->
v
.
numbî
 =
F_LOOP_COND_NUMBER
 ||

790 
ã°
->
v
.
numbî
 =
F_NEXT_FOREACH
)) {

791 
	`i_gíî©e_node
(
ã°
);

792 
	`ös_sh‹t
(
CURRENT_PROGRAM_SIZE
 - 
pos
);

793 } 
	`i_bønch_backw¨ds
(
	`gíî©e_c⁄dôi⁄Æ_bønch
(
ã°
), 
pos
);

794 
	`i_upd©e_bønch_li°
(
bønch_li°
[
CJ_BREAK
], "break");

795 
bønch_li°
[
CJ_BREAK
] = 
ßve_bªaks
;

796 
bønch_li°
[
CJ_CONTINUE
] = 
ßve_c⁄töues
;

797 i‡(
ã°_fú°
 =2Ë
f‹óch_dïth
--;

798 
	}
}

801 
i_gíî©e_if_bønch
 
	$P2
(
∑r£_node_t
 *, 
node
, , 
övît
) {

802 
gíî©e_bŸh
 = 0;

803 
bønch
 = (
övît
 ? 
F_BRANCH_WHEN_NON_ZERO
 : 
F_BRANCH_WHEN_ZERO
);

805 
node
->
köd
) {

806 
NODE_UNARY_OP
:

807 i‡(
node
->
v
.
numbî
 =
F_NOT
) {

808 
	`i_gíî©e_if_bønch
(
node
->
r
.
ex¥
, !
övît
);

812 
NODE_BINARY_OP
:

813 
node
->
v
.
numbî
) {

814 
F_EQ
:

815 
gíî©e_bŸh
 = 1;

816 
bønch
 = (
övît
 ? 
F_BRANCH_EQ
 : 
F_BRANCH_NE
);

818 
F_GE
:

819 i‡(
övît
) {

820 
gíî©e_bŸh
 = 1;

821 
bønch
 = 
F_BRANCH_GE
;

824 
F_LE
:

825 i‡(
övît
) {

826 
gíî©e_bŸh
 = 1;

827 
bønch
 = 
F_BRANCH_LE
;

830 
F_LT
:

831 i‡(!
övît
) {

832 
gíî©e_bŸh
 = 1;

833 
bønch
 = 
F_BRANCH_GE
;

836 
F_GT
:

837 i‡(!
övît
) {

838 
gíî©e_bŸh
 = 1;

839 
bønch
 = 
F_BRANCH_LE
;

842 
F_NE
:

843 
gíî©e_bŸh
 = 1;

844 
bønch
 = (
övît
 ? 
F_BRANCH_NE
 : 
F_BRANCH_EQ
);

848 i‡(
gíî©e_bŸh
) {

849 
	`i_gíî©e_node
(
node
->
l
.
ex¥
);

850 
	`i_gíî©e_node
(
node
->
r
.
ex¥
);

852 
	`i_gíî©e_node
(
node
);

854 
	`i_gíî©e_f‹w¨d_bønch
(
bønch
);

855 
	}
}

858 
i_gíî©e_öhîôed_öô_ˇŒ
 
	$P2
(, 
ödex
, , 
f
) {

859 
	`íd_pushes
();

860 
	`ös_byã
(
F_CALL_INHERITED
);

861 
	`ös_byã
(
ödex
);

862 
	`ös_sh‹t
(
f
);

863 
	`ös_byã
(0);

864 
	`ös_byã
(
F_POP_VALUE
);

865 
	}
}

867 
i_gíî©e_f‹w¨d_bønch
 
	$P1
(, 
b
) {

868 
	`íd_pushes
();

869 
	`ös_byã
(
b
);

870 i‡(
nf‹w¨d_bønches
 =
nf‹w¨d_bønches_max
) {

871 
nf‹w¨d_bønches_max
 += 10;

872 
f‹w¨d_bønches
 = 
	`RESIZE
(f‹w¨d_bønches, 
nf‹w¨d_bønches_max
, ,

873 
TAG_COMPILER
, "forward_branches");

876 
f‹w¨d_bønches
[
nf‹w¨d_bønches
++] = 
CURRENT_PROGRAM_SIZE
;

877 
	`ös_sh‹t
(0);

878 
	}
}

881 
i_upd©e_f‹w¨d_bønch
 
	$P1
(*, 
wh©
) {

882 
	`íd_pushes
();

883 
nf‹w¨d_bønches
--;

884 
	`upd_sh‹t
(
f‹w¨d_bønches
[
nf‹w¨d_bønches
],

885 
CURRENT_PROGRAM_SIZE
 - 
f‹w¨d_bønches
[
nf‹w¨d_bønches
],

886 
wh©
);

887 
	}
}

889 
i_upd©e_f‹w¨d_bønch_löks
 
	$P2
(, 
köd
, 
∑r£_node_t
 *, 
lök_°¨t
) {

890 
i
;

892 
	`íd_pushes
();

893 
nf‹w¨d_bønches
--;

894 
	`upd_sh‹t
(
f‹w¨d_bønches
[
nf‹w¨d_bønches
],

895 
CURRENT_PROGRAM_SIZE
 - 
f‹w¨d_bønches
[
nf‹w¨d_bønches
],

898 
i
 = 
lök_°¨t
->
v
.
numbî
;

899 
	`upd_byã
(
i
-1, 
köd
);

900 
	`upd_sh‹t
(
i
, 
CURRENT_PROGRAM_SIZE
 - i, "&& or ||");

901 
lök_°¨t
 =Üök_°¨t->
l
.
ex¥
;

902 } 
lök_°¨t
->
köd
 =
NODE_BRANCH_LINK
);

903 
	}
}

906 
i_bønch_backw¨ds
 
	$P2
(, 
b
, , 
addr
) {

907 
	`íd_pushes
();

908 i‡(
b
) {

909 i‡(
b
 !
F_WHILE_DEC
)

910 
	`ös_byã
(
b
);

911 
	`ös_sh‹t
(
CURRENT_PROGRAM_SIZE
 - 
addr
);

913 
	}
}

916 
i_upd©e_bønch_li°
 
	$P2
(
∑r£_node_t
 *, 
bl
, *, 
wh©
) {

917 
cuºít_size
;

919 
	`íd_pushes
();

920 
cuºít_size
 = 
CURRENT_PROGRAM_SIZE
;

922 
bl
) {

923 
	`upd_sh‹t
(
bl
->
l
.
numbî
, 
cuºít_size
 - bl->l.numbî, 
wh©
);

924 
bl
 = bl->
v
.
ex¥
;

926 
	}
}

929 
	$i_gíî©e_ñ£
() {

930 
ﬁd
;

932 
ﬁd
 = 
f‹w¨d_bønches
[
nf‹w¨d_bønches
 - 1];

935 
	`íd_pushes
();

936 
	`ös_byã
(
F_BRANCH
);

937 
f‹w¨d_bønches
[
nf‹w¨d_bønches
-1] = 
CURRENT_PROGRAM_SIZE
;

938 
	`ös_sh‹t
(0);

941 
	`upd_sh‹t
(
ﬁd
, 
CURRENT_PROGRAM_SIZE
 - old, "if");

942 
	}
}

945 
	$i_öôülize_∑r£r
() {

946 
f‹óch_dïth
 = 0;

948 i‡(!
f‹w¨d_bønches
) {

949 
f‹w¨d_bønches
 = 
	`CALLOCATE
(10, , 
TAG_COMPILER
, "forward_branches");

950 
nf‹w¨d_bønches_max
 = 10;

952 
nf‹w¨d_bønches
 = 0;

954 
bønch_li°
[
CJ_BREAK
] = 0;

955 
bønch_li°
[
CJ_BREAK_SWITCH
] = 0;

956 
bønch_li°
[
CJ_CONTINUE
] = 0;

958 
¥og_code
 = 
mem_block
[
A_PROGRAM
].
block
;

959 
¥og_code_max
 = 
mem_block
[
A_PROGRAM
].
block
 + mem_block[A_PROGRAM].
max_size
;

961 
löe_beög_gíî©ed
 = 0;

962 
œ°_size_gíî©ed
 = 0;

963 
	}
}

966 
	$i_unöôülize_∑r£r
() {

967 #ifde‡
DEBUGMALLOC_EXTENSIONS


976 i‡(
f‹w¨d_bønches
) {

977 
	`FREE
(
f‹w¨d_bønches
);

978 
f‹w¨d_bønches
 = 0;

981 
	}
}

984 
i_gíî©e_föÆ_¥ogøm
 
	$P1
(, 
x
) {

985 i‡(!
x
) {

986 
UPDATE_PROGRAM_SIZE
;

991 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

992 
	`swôch_to_löe
(-1);

994 
	}
}

1000 
›timize_icode
 
	$P3
(*, 
°¨t
, *, 
pc
, *, 
íd
) {

1001 
ö°r
;

1002 i‡(
°¨t
 == 0) {

1006 
°¨t
 = 
mem_block
[
A_PROGRAM
].
block
;

1007 
pc
 = 
°¨t
;

1008 
íd
 = 
pc
 + 
mem_block
[
A_PROGRAM
].
cuºít_size
;

1009 i‡(*
pc
 == 0) {

1011 
pc
 += 3;

1014 
pc
 < 
íd
) {

1015 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++)) {

1016 
F_NUMBER
:

1017 
F_REAL
:

1018 
F_CALL_INHERITED
:

1019 
pc
 += 4;

1021 
F_SIMUL_EFUN
:

1022 
F_CALL_FUNCTION_BY_ADDRESS
:

1023 
pc
 += 3;

1025 
F_BRANCH
:

1026 
F_BRANCH_WHEN_ZERO
:

1027 
F_BRANCH_WHEN_NON_ZERO
:

1028 
F_BBRANCH
:

1029 
F_BBRANCH_WHEN_ZERO
:

1030 
F_BBRANCH_WHEN_NON_ZERO
:

1032 *
tmp
;

1033 
ßrg
;

1035 
	`COPY_SHORT
(&
ßrg
, 
pc
);

1036 i‡(
ö°r
 > 
F_BRANCH
)

1037 
tmp
 = 
pc
 - 
ßrg
;

1039 
tmp
 = 
pc
 + 
ßrg
;

1040 
ßrg
 = 0;

1042 i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BRANCH
) {

1043 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1044 
tmp
 +
ßrg
 + 1;

1045 } i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BBRANCH
) {

1046 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1047 
tmp
 -
ßrg
 - 1;

1050 i‡(!
ßrg
) {

1051 
pc
 += 2;

1057 i‡(
tmp
 > 
pc
) {

1058 i‡(
ö°r
 > 
F_BRANCH
) {

1059 
pc
[-1] -= 3;

1061 
ßrg
 = 
tmp
 - 
pc
;

1063 i‡(
ö°r
 <
F_BRANCH
) {

1064 
pc
[-1] += 3;

1066 
ßrg
 = 
pc
 - 
tmp
;

1068 
	`STORE_SHORT
(
pc
, 
ßrg
);

1071 #ifde‡
F_LOR


1072 
F_LOR
:

1073 
F_LAND
:

1075 *
tmp
;

1076 
ßrg
;

1078 
	`COPY_SHORT
(&
ßrg
, 
pc
);

1079 
tmp
 = 
pc
 + 
ßrg
;

1080 
ßrg
 = 0;

1082 i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BRANCH
) {

1083 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1084 
tmp
 +
ßrg
 + 1;

1085 } i‡(
	`EXTRACT_UCHAR
(
tmp
Ë=
F_BBRANCH
) {

1086 
	`COPY_SHORT
(&
ßrg
, 
tmp
 + 1);

1087 
tmp
 -
ßrg
 - 1;

1090 i‡(!
ßrg
) {

1091 
pc
 += 2;

1097 i‡(
tmp
 > 
pc
) {

1098 
ßrg
 = 
tmp
 - 
pc
;

1100 #ifde‡
DEBUG


1101 
	`Ârötf
(
°dîr
,"Optimization failed; can't || or && backwards.\n");

1103 
pc
 += 2;

1106 
	`STORE_SHORT
(
pc
, 
ßrg
);

1110 
F_CATCH
:

1111 
F_AGGREGATE
:

1112 
F_AGGREGATE_ASSOC
:

1113 
F_STRING
:

1114 #ifde‡
F_JUMP_WHEN_ZERO


1115 
F_JUMP_WHEN_ZERO
:

1116 
F_JUMP_WHEN_NON_ZERO
:

1118 #ifde‡
F_JUMP


1119 
F_JUMP
:

1121 
pc
 += 2;

1123 
F_GLOBAL_LVALUE
:

1124 
F_GLOBAL
:

1125 
F_SHORT_STRING
:

1126 
F_LOOP_INCR
:

1127 
F_WHILE_DEC
:

1128 
F_LOCAL
:

1129 
F_LOCAL_LVALUE
:

1130 
F_REF
:

1131 
F_REF_LVALUE
:

1132 
F_SSCANF
:

1133 
F_PARSE_COMMAND
:

1134 
F_BYTE
:

1135 
F_NBYTE
:

1136 
pc
++;

1138 
F_FUNCTION_CONSTRUCTOR
:

1139 
	`EXTRACT_UCHAR
(
pc
++)) {

1140 
FP_SIMUL
:

1141 
FP_LOCAL
:

1142 
pc
 += 2;

1144 
FP_FUNCTIONAL
:

1145 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

1146 
pc
 += 3;

1148 
FP_ANONYMOUS
:

1149 
FP_ANONYMOUS
 | 
FP_NOT_BINDABLE
:

1150 
pc
 += 4;

1152 
FP_EFUN
:

1153 
pc
 += 2;

1157 
F_SWITCH
:

1159 
°abÀ
, 
ëabÀ
;

1160 
pc
++;

1161 
	`LOAD_SHORT
(
°abÀ
, 
pc
);

1162 
	`LOAD_SHORT
(
ëabÀ
, 
pc
);

1163 
pc
 += 2;

1164 
	`DEBUG_CHECK
(
°abÀ
 < 
pc
 - 
°¨t
 || 
ëabÀ
 <Öc - start

1165 || 
ëabÀ
 < 
°abÀ
,

1168 
	`›timize_icode
(
°¨t
, 
pc
, sèπ + 
°abÀ
);

1169 
pc
 = 
°¨t
 + 
ëabÀ
;

1172 
F_EFUN0
:

1173 
F_EFUN1
:

1174 
F_EFUN2
:

1175 
F_EFUN3
:

1176 
F_EFUNV
:

1177 
ö°r
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
ONEARG_MAX
;

1179 i‡((
ö°r
 >
BASE
) &&

1180 (
ö°rs
[
ö°r
].
mö_¨g
 !ö°rs[ö°r].
max_¨g
))

1181 
pc
++;

1184 
	}
}

	@icode.h

5 #i‚de‡
_ICODE_H


6 
	#_ICODE_H


	)

7 
	~"åìs.h
"

9 
i_gíî©e___INIT
 
PROT
(());

10 
i_gíî©e_node
 
PROT
((
∑r£_node_t
 *));

11 
i_gíî©e_c⁄töue
 
PROT
(());

12 
i_gíî©e_f‹w¨d_jump
 
PROT
(());

13 
i_upd©e_f‹w¨d_jump
 
PROT
(());

14 
i_upd©e_c⁄töues
 
PROT
(());

15 
i_bønch_backw¨ds
 
PROT
((, ));

16 
i_upd©e_bªaks
 
PROT
(());

17 
i_ßve_lo›_öfo
 
PROT
((
∑r£_node_t
 *));

18 
i_ª°‹e_lo›_öfo
 
PROT
(());

19 
i_gíî©e_f‹w¨d_bønch
 
PROT
(());

20 
i_upd©e_f‹w¨d_bønch
 
PROT
((*));

21 
i_upd©e_f‹w¨d_bønch_löks
 
PROT
((, 
∑r£_node_t
 *));

22 
i_gíî©e_ñ£
 
PROT
(());

23 
i_öôülize_∑r£r
 
PROT
(());

24 
i_unöôülize_∑r£r
 
PROT
(());

25 
i_gíî©e_föÆ_¥ogøm
 
PROT
(());

26 
i_gíî©e_öhîôed_öô_ˇŒ
 
PROT
((, ));

28 
›timize_icode
 
PROT
((*, *, *));

	@include/function.h

3 
	#FP_LOCAL
 2

	)

4 
	#FP_EFUN
 3

	)

5 
	#FP_SIMUL
 4

	)

6 
	#FP_FUNCTIONAL
 5

	)

9 
	#FP_G_VAR
 6

	)

10 
	#FP_L_VAR
 7

	)

11 
	#FP_ANONYMOUS
 8

	)

14 
	#FP_MASK
 0x0f

	)

15 
	#FP_HAS_ARGUMENTS
 0x10

	)

16 
	#FP_OWNER_DESTED
 0x20

	)

17 
	#FP_NOT_BINDABLE
 0x40

	)

	@include/localtime.h

5 
	#LT_SEC
 0

	)

6 
	#LT_MIN
 1

	)

7 
	#LT_HOUR
 2

	)

8 
	#LT_MDAY
 3

	)

9 
	#LT_MON
 4

	)

10 
	#LT_YEAR
 5

	)

11 
	#LT_WDAY
 6

	)

12 
	#LT_YDAY
 7

	)

13 
	#LT_GMTOFF
 8

	)

14 
	#LT_ZONE
 9

	)

15 
	#LT_ISDST
 10

	)

	@include/origin.h

3 
	#ORIGIN_BACKEND
 "drivî"

	)

4 
	#ORIGIN_DRIVER
 "drivî"

	)

5 
	#ORIGIN_LOCAL
 "loˇl"

	)

6 
	#ORIGIN_CALL_OTHER
 "ˇŒ_Ÿhî"

	)

7 
	#ORIGIN_SIMUL_EFUN
 "simul"

	)

8 
	#ORIGIN_INTERNAL
 "öã∫Æ"

	)

9 
	#ORIGIN_EFUN
 "efun"

	)

11 
	#ORIGIN_FUNCTION_POINTER
 "fun˘i⁄_poöãr"

	)

13 
	#ORIGIN_FUNCTIONAL
 "fun˘i⁄Æ"

	)

	@include/parser_error.h

1 #i‚de‡
PARSER_ERROR_H


2 
	#PARSER_ERROR_H


	)

4 
	#ERR_IS_NOT
 1

	)

5 
	#ERR_NOT_LIVING
 2

	)

6 
	#ERR_NOT_ACCESSIBLE
 3

	)

7 
	#ERR_AMBIG
 4

	)

8 
	#ERR_ORDINAL
 5

	)

9 
	#ERR_ALLOCATED
 6

	)

10 
	#ERR_THERE_IS_NO
 7

	)

11 
	#ERR_BAD_MULTIPLE
 8

	)

12 
	#ERR_MANY_PATHS
 9

	)

	@include/runtime_config.h

16 #i‚de‡
RUNTIME_CONFIG_H


17 
	#RUNTIME_CONFIG_H


	)

19 
	#BASE_CONFIG_STR
 0

	)

20 
	#CFG_STR
(
x
Ë((xË+ 
BASE_CONFIG_STR
)

	)

25 
	#__MUD_NAME__
 
	`CFG_STR
(0)

	)

27 
	#__ADDR_SERVER_IP__
 
	`CFG_STR
(1)

	)

29 
	#__MUD_LIB_DIR__
 
	`CFG_STR
(2)

	)

30 
	#__BIN_DIR__
 
	`CFG_STR
(3)

	)

32 
	#__LOG_DIR__
 
	`CFG_STR
(4)

	)

33 
	#__INCLUDE_DIRS__
 
	`CFG_STR
(5)

	)

34 
	#__SAVE_BINARIES_DIR__
 
	`CFG_STR
(6)

	)

36 
	#__MASTER_FILE__
 
	`CFG_STR
(7)

	)

37 
	#__SIMUL_EFUN_FILE__
 
	`CFG_STR
(8)

	)

38 
	#__SWAP_FILE__
 
	`CFG_STR
(9)

	)

39 
	#__DEBUG_LOG_FILE__
 
	`CFG_STR
(10)

	)

41 
	#__DEFAULT_ERROR_MESSAGE__
 
	`CFG_STR
(11)

	)

42 
	#__DEFAULT_FAIL_MESSAGE__
 
	`CFG_STR
(12)

	)

43 
	#__GLOBAL_INCLUDE_FILE__
 
	`CFG_STR
(13)

	)

45 
	#__MUD_IP__
 
	`CFG_STR
(14)

	)

51 
	#BASE_CONFIG_INT
 (
BASE_CONFIG_STR
 + 15)

	)

52 
	#CFG_INT
(
x
Ë((xË+ 
BASE_CONFIG_INT
)

	)

54 
	#__MUD_PORT__
 
	`CFG_INT
(0)

	)

55 
	#__ADDR_SERVER_PORT__
 
	`CFG_INT
(1)

	)

57 
	#__TIME_TO_CLEAN_UP__
 
	`CFG_INT
(2)

	)

58 
	#__TIME_TO_RESET__
 
	`CFG_INT
(3)

	)

59 
	#__TIME_TO_SWAP__
 
	`CFG_INT
(4)

	)

61 
	#__COMPILER_STACK_SIZE__
 
	`CFG_INT
(5)

	)

62 
	#__EVALUATOR_STACK_SIZE__
 
	`CFG_INT
(6)

	)

63 
	#__INHERIT_CHAIN_SIZE__
 
	`CFG_INT
(7)

	)

64 
	#__MAX_EVAL_COST__
 
	`CFG_INT
(8)

	)

65 
	#__MAX_LOCAL_VARIABLES__
 
	`CFG_INT
(9)

	)

66 
	#__MAX_CALL_DEPTH__
 
	`CFG_INT
(10)

	)

67 
	#__MAX_ARRAY_SIZE__
 
	`CFG_INT
(11)

	)

68 
	#__MAX_BUFFER_SIZE__
 
	`CFG_INT
(12)

	)

69 
	#__MAX_MAPPING_SIZE__
 
	`CFG_INT
(13)

	)

70 
	#__MAX_STRING_LENGTH__
 
	`CFG_INT
(14)

	)

71 
	#__MAX_BITFIELD_BITS__
 
	`CFG_INT
(15)

	)

73 
	#__MAX_BYTE_TRANSFER__
 
	`CFG_INT
(16)

	)

74 
	#__MAX_READ_FILE_SIZE__
 
	`CFG_INT
(17)

	)

76 
	#__RESERVED_MEM_SIZE__
 
	`CFG_INT
(18)

	)

78 
	#__SHARED_STRING_HASH_TABLE_SIZE__
 
	`CFG_INT
(19)

	)

79 
	#__OBJECT_HASH_TABLE_SIZE__
 
	`CFG_INT
(20)

	)

80 
	#__LIVING_HASH_TABLE_SIZE__
 
	`CFG_INT
(21)

	)

82 
	#__FD6_PORT__
 
	`CFG_INT
(22)

	)

83 
	#__FD6_KIND__
 
	`CFG_INT
(23)

	)

85 
	#RUNTIME_CONFIG_NEXT
 
	`CFG_INT
(24)

	)

91 
	#NUM_CONFIG_STRS
 (
BASE_CONFIG_INT
 - 
BASE_CONFIG_STR
)

	)

92 
	#NUM_CONFIG_INTS
 (
RUNTIME_CONFIG_NEXT
 - 
BASE_CONFIG_INT
)

	)

	@include/socket_err.h

7 #i‚de‡
_SOCKET_ERRORS_H_


8 
	#_SOCKET_ERRORS_H_


	)

10 
	#EESUCCESS
 1

	)

11 
	#EESOCKET
 -1

	)

12 
	#EESETSOCKOPT
 -2

	)

13 
	#EENONBLOCK
 -3

	)

14 
	#EENOSOCKS
 -4

	)

15 
	#EEFDRANGE
 -5

	)

16 
	#EEBADF
 -6

	)

17 
	#EESECURITY
 -7

	)

18 
	#EEISBOUND
 -8

	)

19 
	#EEADDRINUSE
 -9

	)

20 
	#EEBIND
 -10

	)

21 
	#EEGETSOCKNAME
 -11

	)

22 
	#EEMODENOTSUPP
 -12

	)

23 
	#EENOADDR
 -13

	)

24 
	#EEISCONN
 -14

	)

25 
	#EELISTEN
 -15

	)

26 
	#EENOTLISTN
 -16

	)

27 
	#EEWOULDBLOCK
 -17

	)

28 
	#EEINTR
 -18

	)

29 
	#EEACCEPT
 -19

	)

30 
	#EEISLISTEN
 -20

	)

31 
	#EEBADADDR
 -21

	)

32 
	#EEALREADY
 -22

	)

33 
	#EECONNREFUSED
 -23

	)

34 
	#EECONNECT
 -24

	)

35 
	#EENOTCONN
 -25

	)

36 
	#EETYPENOTSUPP
 -26

	)

37 
	#EESENDTO
 -27

	)

38 
	#EESEND
 -28

	)

39 
	#EECALLBACK
 -29

	)

40 
	#EESOCKRLSD
 -30

	)

41 
	#EESOCKNOTRLSD
 -31

	)

42 
	#EEBADDATA
 -32

	)

44 
	#ERROR_STRINGS
 33

	)

	@include/type.h

3 #i‚de‡
_TYPE_H


4 
	#_TYPE_H


	)

6 
	#INT
 "öt"

	)

7 
	#STRING
 "°rög"

	)

8 
	#ARRAY
 "¨øy"

	)

9 
	#OBJECT
 "obje˘"

	)

10 
	#MAPPING
 "m≠pög"

	)

11 
	#FUNCTION
 "fun˘i⁄"

	)

12 
	#FLOAT
 "Êﬂt"

	)

13 
	#BUFFER
 "buf„r"

	)

14 
	#CLASS
 "˛ass"

	)

	@interface.h

1 
	~"Õc_to_c.h
"

3 #ifde‡
LPC_TO_C


5 *
	m‚ame
;

6 (**
	mjump_èbÀ
) ();

7 
°rög_swôch_íåy_t
 **
	m°rög_swôch_èbÀs
;

8 } 
	töãrÁ˚_t
;

10 
öãrÁ˚_t
 *
öãrÁ˚
[];

	@interpret.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"efuns_ö˛.h
"

5 
	~"fûe.h
"

6 
	~"fûe_ö˛.h
"

7 
	~"∑tchÀvñ.h
"

8 
	~"backíd.h
"

9 
	~"simul_efun.h
"

10 
	~"e›î©‹s.h
"

11 
	~"efun˘i⁄s.h
"

12 
	~"•rötf.h
"

13 
	~"sw≠.h
"

14 
	~"comm.h
"

15 
	~"p‹t.h
"

16 
	~"qs‹t.h
"

17 
	~"compûî.h
"

18 
	~"ªgexp.h
"

19 
	~"ma°î.h
"

21 #ifde‡
OPCPROF


22 
	~"›c.h
"

24 
	g›c_e›î
[
BASE
];

27 #ifde‡
OPCPROF_2D


29 
	g›c_e›î_2d
[
BASE
+1][BASE+1];

30 
	gœ°_e›
 = 0;

33 *
	gty≥_«mes
[] = {

44 
	#TYPE_CODES_END
 0x400

	)

45 
	#TYPE_CODES_START
 0x2

	)

47 #ifde‡
PACKAGE_UIDS


48 
u£rid_t
 *
backb⁄e_uid
;

50 
max_co°
;

51 
ˇŒ_‹igö
;

53 
INLINE
 
push_ödexed_lvÆue
 
PROT
(());

54 #ifde‡
TRACE


55 
do_åa˚_ˇŒ
 
PROT
(());

57 
bªak_poöt
 
PROT
(());

58 
INLINE_STATIC
 
do_lo›_c⁄d_numbî
 
PROT
(());

59 
INLINE_STATIC
 
do_lo›_c⁄d_loˇl
 
PROT
(());

60 
do_ˇtch
 
PROT
((*, ));

61 #ifde‡
DEBUG


62 
œ°_ö°ru˘i⁄s
 
PROT
(());

64 
_°πof
 
PROT
((*, **));

65 #ifde‡
TRACE_CODE


66 *
gë_¨g
 
PROT
((, ));

69 #ifde‡
DEBUG


70 
	g°ack_ö_u£_as_ãmp‹¨y
 = 0;

73 
öãr_ssˇnf
 
PROT
((
svÆue_t
 *, svalue_t *, svalue_t *, ));

74 
¥ogøm_t
 *
	gcuºít_¥og
;

75 
	gˇŒî_ty≥
;

76 
	gåa˚dïth
;

77 
	gnum_v¨¨gs
;

99 *
	gpc
;

100 
svÆue_t
 *
	gÂ
;

102 
svÆue_t
 *
	g•
;

103 
svÆue_t
 
	gc⁄°0
, 
	gc⁄°1
, 
	gc⁄°0u
;

105 
	gfun˘i⁄_ödex_off£t
;

106 
	gv¨übÀ_ödex_off£t
;

107 
	g°_num_¨g
;

109 
svÆue_t
 
	g°¨t_of_°ack
[
CFG_EVALUATOR_STACK_SIZE
];

110 
svÆue_t
 *
	gíd_of_°ack
 = 
°¨t_of_°ack
 + 
CFG_EVALUATOR_STACK_SIZE
 - 5;

113 
svÆue_t
 
	gˇtch_vÆue
 = {
T_NUMBER
};

116 
svÆue_t
 
	g≠∂y_ªt_vÆue
 = {
T_NUMBER
};

118 
c⁄åﬁ_°ack_t
 
	gc⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
];

119 
c⁄åﬁ_°ack_t
 *
	gc•
;

121 
	gtoo_dìp_îr‹
 = 0, 
	gmax_evÆ_îr‹
 = 0;

123 
ªf_t
 *
	gglobÆ_ªf_li°
 = 0;

125 
kûl_ªf
 
	$P1
(
ªf_t
 *, 
ªf
) {

126 i‡(
ªf
->
sv
.
ty≥
 =
T_MAPPING
 && (ªf->sv.
u
.
m≠
->
cou¡
 & 
MAP_LOCKED
)) {

127 
ªf_t
 *
r
 = 
globÆ_ªf_li°
;

131 
r
) {

132 i‡(
r
->
sv
.
u
.
m≠
 =
ªf
->sv.u.map)

134 
r
 =Ñ->
√xt
;

136 i‡(!
r
)

137 
	`u∆ock_m≠pög
(
ªf
->
sv
.
u
.
m≠
);

139 
	`‰ì_svÆue
(&
ªf
->
sv
, "kill_ref");

140 i‡(
ªf
->
√xt
)

141 
ªf
->
√xt
->
¥ev
 =Ñef->prev;

142 i‡(
ªf
->
¥ev
)

143 
ªf
->
¥ev
->
√xt
 =Ñef->next;

145 
globÆ_ªf_li°
 = 
ªf
->
√xt
;

146 i‡(
ªf
->ref > 0) {

148 
ªf
->
lvÆue
 = 0;

150 
	`FREE
(
ªf
);

152 
	}
}

154 
ªf_t
 *
make_ªf
 
PROT
(()) {

155 
ªf_t
 *
	gªf
 = 
ALLOCATE
‘ef_t, 
TAG_TEMPORARY
, "make_ref");

156 
	gªf
->
	g√xt
 = 
globÆ_ªf_li°
;

157 
	gªf
->
	g¥ev
 = 
NULL
;

158 i‡(
	gªf
->
	g√xt
)

159 
	gªf
->
	g√xt
->
	g¥ev
 = 
ªf
;

160 
	gglobÆ_ªf_li°
 = 
ªf
;

161 
	gªf
->
	gc•
 = 
c•
;

162 
	gªf
->ref = 1;

163  
	gªf
;

166 
gë_vîsi⁄
 
	$P1
(*, 
buff
)

168 
	`•rötf
(
buff
, "MudOS %s", 
PATCH_LEVEL
);

169 
	}
}

194 
INLINE


195 
push_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

197 
STACK_INC
;

199 i‡(!
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
)) {

200 *
•
 = 
c⁄°0u
;

204 
•
->
ty≥
 = 
T_OBJECT
;

205 
•
->
u
.
ob
 = ob;

206 
	`add_ªf
(
ob
, "push_object");

207 
	}
}

209 * 
ty≥_«me
 
	$P1
(, 
c
) {

210 
j
 = 0;

211 
limô
 = 
TYPE_CODES_START
;

214 i‡(
c
 & 
limô
Ë 
ty≥_«mes
[
j
];

215 
j
++;

216 } !((
limô
 <<1Ë& 
TYPE_CODES_END
));

218 
c
) {

219 
T_INVALID
:  "*invalid*";

220 
T_LVALUE
:  "*lvalue*";

221 
T_REF
:  "*ref*";

222 
T_LVALUE_BYTE
:  "*lvalue_byte*";

223 
T_LVALUE_RANGE
:  "*lvalue_range*";

224 
T_ERROR_HANDLER
:  "*error_handler*";

225 
	`IF_DEBUG
(
T_FREED
:  "*freed*");

228 
	}
}

235 
¥ogøm_t
 *
ffbn_ªcur£
 
PROT
((program_t *, *, *, *));

236 
¥ogøm_t
 *
ffbn_ªcur£2
 
PROT
((program_t *, *, *, *, *, *));

238 #i‚de‡
NO_SHADOWS


240 *
check_shadow_fun˘i⁄s
 
	$P2
(
¥ogøm_t
 *, 
shadow
,Örogøm_à*, 
vi˘im
) {

241 
i
;

242 
ödex
, 
ru¡ime_ödex
;

243 
¥ogøm_t
 *
¥og
;

245 
i
 = 0; i < 
shadow
->
num_fun˘i⁄s_deföed
; i++) {

246 
¥og
 = 
	`ffbn_ªcur£
(
vi˘im
, 
shadow
->
fun˘i⁄_èbÀ
[
i
].
«me
, &
ödex
, &
ru¡ime_ödex
);

247 i‡(
¥og
 && (
vi˘im
->
fun˘i⁄_Êags
[
ru¡ime_ödex
] & 
DECL_NOMASK
))

248  
¥og
->
fun˘i⁄_èbÀ
[
ödex
].
«me
;

251 
	}
}

253 
vÆid©e_shadowög
 
	$P1
(
obje˘_t
 *, 
ob
)

255 
¥ogøm_t
 *
shadow
 = 
cuºít_obje˘
->
¥og
, *
vi˘im
 = 
ob
->prog;

256 
svÆue_t
 *
ªt
;

257 *
fun
;

259 i‡(
cuºít_obje˘
->
shadowög
)

260 
	`îr‹
("shadow: Already shadowing.\n");

261 i‡(
cuºít_obje˘
->
shadowed
)

262 
	`îr‹
("shadow: Can't shadow when shadowed.\n");

263 #i‚de‡
NO_ENVIRONMENT


264 i‡(
cuºít_obje˘
->
su≥r
)

265 
	`îr‹
("shadow: The shadow mustÇotÑeside insideánother object.\n");

267 i‡(
ob
 =
ma°î_ob
)

268 
	`îr‹
("shadow: cannot shadowÅhe master object.\n");

269 i‡(
ob
->
shadowög
)

270 
	`îr‹
("shadow: Can't shadowá shadow.\n");

272 i‡((
fun
 = 
	`check_shadow_fun˘i⁄s
(
shadow
, 
vi˘im
)))

273 
	`îr‹
("IŒegÆÅÿshadow 'nomask' fun˘i⁄ \"%s\".\n", 
fun
);

275 
	`push_obje˘
(
ob
);

276 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_SHADOW
, 1);

277 i‡(!(
ob
->
Êags
 & 
O_DESTRUCTED
Ë&& 
	`MASTER_APPROVED
(
ªt
)) {

281 
	}
}

287 
INLINE
 

288 
push_numbî
 
	$P1
(, 
n
)

290 
STACK_INC
;

291 
•
->
ty≥
 = 
T_NUMBER
;

292 
•
->
subty≥
 = 0;

293 
•
->
u
.
numbî
 = 
n
;

294 
	}
}

296 
INLINE
 

297 
push_ªÆ
 
	$P1
(, 
n
)

299 
STACK_INC
;

300 
•
->
ty≥
 = 
T_REAL
;

301 
•
->
u
.
ªÆ
 = 
n
;

302 
	}
}

307 
INLINE


308 
	$push_undeföed
()

310 
STACK_INC
;

311 *
•
 = 
c⁄°0u
;

312 
	}
}

314 
INLINE_STATIC
 
push_undeföeds
 
	$P1
(, 
num
)

316 
	`CHECK_STACK_OVERFLOW
(
num
);

317 
num
--Ë*++
•
 = 
c⁄°0u
;

318 
	}
}

320 
INLINE


321 
c›y_™d_push_°rög
 
	$P1
(*, 
p
) {

322 
STACK_INC
;

323 
•
->
ty≥
 = 
T_STRING
;

324 
•
->
subty≥
 = 
STRING_MALLOC
;

325 
•
->
u
.
°rög
 = 
	`°rög_c›y
(
p
, "copy_and_push_string");

326 
	}
}

328 
INLINE


329 
sh¨e_™d_push_°rög
 
	$P1
(*, 
p
) {

330 
STACK_INC
;

331 
•
->
ty≥
 = 
T_STRING
;

332 
•
->
subty≥
 = 
STRING_SHARED
;

333 
•
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
p
);

334 
	}
}

339 #ifde‡
DEBUG


340 
INLINE_STATIC
 
svÆue_t
 *
föd_vÆue
 
	$P1
(, 
num
)

342 
	`DEBUG_CHECK2
(
num
 >(Ë
cuºít_obje˘
->
¥og
->
num_v¨übÀs_tŸÆ
,

344 
num
, 
cuºít_obje˘
->
¥og
->
num_v¨übÀs_tŸÆ
);

345  &
cuºít_obje˘
->
v¨übÀs
[
num
];

346 
	}
}

348 
	#föd_vÆue
(
num
Ë(&
cuºít_obje˘
->
v¨übÀs
[num])

	)

351 
INLINE
 

352 
‰ì_°rög_svÆue
 
	$P1
(
svÆue_t
 *, 
v
)

354 *
°r
 = 
v
->
u
.
°rög
;

356 i‡(
v
->
subty≥
 & 
STRING_COUNTED
) {

357 #ifde‡
STRING_STATS


358 
size
 = 
	`MSTR_SIZE
(
°r
);

360 i‡(
	`DEC_COUNTED_REF
(
°r
)) {

361 
	`SUB_STRING
(
size
);

362 
	`NDBG
(
	`BLOCK
(
°r
));

363 i‡(
v
->
subty≥
 & 
STRING_HASHED
) {

364 
	`SUB_NEW_STRING
(
size
, (
block_t
));

365 
	`dóŒoˇã_°rög
(
°r
);

366 
CHECK_STRING_STATS
;

368 
	`SUB_NEW_STRING
(
size
, (
mÆloc_block_t
));

369 
	`FREE
(
	`MSTR_BLOCK
(
°r
));

370 
CHECK_STRING_STATS
;

373 
	`SUB_STRING
(
size
);

374 
	`NDBG
(
	`BLOCK
(
°r
));

377 
	}
}

379 
u∆ök_°rög_svÆue
 
	$P1
(
svÆue_t
 *, 
s
) {

380 *
°r
;

382 
s
->
subty≥
) {

383 
STRING_MALLOC
:

384 i‡(
	`MSTR_REF
(
s
->
u
.
°rög
) > 1)

385 
s
->
u
.
°rög
 = 
	`°rög_u∆ök
(s->u.string, "unlink_string_svalue");

387 
STRING_SHARED
:

389 
l
 = 
	`SHARED_STRLEN
(
s
->
u
.
°rög
);

391 
°r
 = 
	`√w_°rög
(
l
, "unlink_string_svalue");

392 
	`°∫˝y
(
°r
, 
s
->
u
.
°rög
, 
l
 + 1);

393 
	`‰ì_°rög
(
s
->
u
.
°rög
);

394 
s
->
subty≥
 = 
STRING_MALLOC
;

395 
s
->
u
.
°rög
 = 
°r
;

398 
STRING_CONSTANT
:

399 
s
->
u
.
°rög
 = 
	`°rög_c›y
(s->u.string, "unlink_string_svalue");

400 
s
->
subty≥
 = 
STRING_MALLOC
;

403 
	}
}

410 #ifde‡
DEBUG


411 
INLINE
 
öt_‰ì_svÆue
 
	$P2
(
svÆue_t
 *, 
v
, *, 
èg
)

413 
INLINE
 
öt_‰ì_svÆue
 
	$P1
(
svÆue_t
 *, 
v
)

421 i‡(
v
->
ty≥
 =
T_STRING
) {

422 *
°r
 = 
v
->
u
.
°rög
;

424 i‡(
v
->
subty≥
 & 
STRING_COUNTED
) {

425 #ifde‡
STRING_STATS


426 
size
 = 
	`MSTR_SIZE
(
°r
);

428 i‡(
	`DEC_COUNTED_REF
(
°r
)) {

429 
	`SUB_STRING
(
size
);

430 
	`NDBG
(
	`BLOCK
(
°r
));

431 i‡(
v
->
subty≥
 & 
STRING_HASHED
) {

432 
	`SUB_NEW_STRING
(
size
, (
block_t
));

433 
	`dóŒoˇã_°rög
(
°r
);

434 
CHECK_STRING_STATS
;

436 
	`SUB_NEW_STRING
(
size
, (
mÆloc_block_t
));

437 
	`FREE
(
	`MSTR_BLOCK
(
°r
));

438 
CHECK_STRING_STATS
;

441 
	`SUB_STRING
(
size
);

442 
	`NDBG
(
	`BLOCK
(
°r
));

445 } i‡((
v
->
ty≥
 & 
T_REFED
Ë&& !(v->ty≥ & 
T_FREED
)) {

446 #ifde‡
DEBUG_MACRO


447 i‡(
v
->
ty≥
 =
T_OBJECT
)

448 
	`debug
(
d_Êag
, ("Fªe_svÆuê%†(%dË‰om %s\n", 
v
->
u
.
ob
->
«me
, v->u.ob->
ªf
 - 1, 
èg
));

450 i‡(!(--
v
->
u
.
ª„d
->
ªf
)) {

451 
v
->
ty≥
) {

452 
T_OBJECT
:

453 
	`dóŒoc_obje˘
(
v
->
u
.
ob
, "free_svalue");

455 
T_CLASS
:

456 
	`dóŒoc_˛ass
(
v
->
u
.
¨r
);

458 
T_ARRAY
:

459 i‡(
v
->
u
.
¨r
 !&
the_nuŒ_¨øy
)

460 
	`dóŒoc_¨øy
(
v
->
u
.
¨r
);

462 #i‚de‡
NO_BUFFER_TYPE


463 
T_BUFFER
:

464 i‡(
v
->
u
.
buf
 !&
nuŒ_buf
)

465 
	`FREE
((*)
v
->
u
.
buf
);

468 
T_MAPPING
:

469 
	`dóŒoc_m≠pög
(
v
->
u
.
m≠
);

471 
T_FUNCTION
:

472 
	`dóŒoc_fu≈
(
v
->
u
.
Â
);

474 
T_REF
:

475 i‡(!
v
->
u
.
ªf
->
lvÆue
)

476 
	`kûl_ªf
(
v
->
u
.
ªf
);

480 } i‡(
v
->
ty≥
 =
T_ERROR_HANDLER
) {

481 (*
v
->
u
.
îr‹_h™dÀr
)();

483 #ifde‡
DEBUG


484 i‡(
v
->
ty≥
 =
T_FREED
) {

485 
	`Áèl
("T_FREED svÆuê‰ìd. Pªviou¶y fªed by %s.\n", 
v
->
u
.
°rög
);

487 
v
->
ty≥
 = 
T_FREED
;

488 
v
->
u
.
°rög
 = 
èg
;

490 
	}
}

492 
¥o˚ss_efun_ˇŒback
 
	$P3
(, 
«rg
, 
fun˘i⁄_to_ˇŒ_t
 *, 
·c
, , 
f
) {

493 
¨gc
 = 
°_num_¨g
;

494 
svÆue_t
 *
¨g
 = 
•
 - 
¨gc
 + 1 + 
«rg
;

496 i‡(
¨g
->
ty≥
 =
T_FUNCTION
) {

497 
·c
->
f
.
Â
 = 
¨g
->
u
.fp;

498 
·c
->
ob
 = 0;

499 
·c
->
«rg
 = 
¨gc
 -Çarg - 1;

500 
·c
->
¨gs
 = 
¨g
 + 1;

502 
·c
->
f
.
°r
 = 
¨g
->
u
.
°rög
;

503 i‡(
¨gc
 < 
«rg
 + 2) {

504 
·c
->
ob
 = 
cuºít_obje˘
;

505 
·c
->
«rg
 = 0;

507 i‡((
¨g
+1)->
ty≥
 =
T_OBJECT
) {

508 
·c
->
ob
 = (
¨g
+1)->
u
.ob;

510 i‡((
¨g
+1)->
ty≥
 =
T_STRING
) {

511 i‡(!(
·c
->
ob
 = 
	`föd_obje˘
((
¨g
+1)->
u
.
°rög
)) ||

512 !
	`obje˘_visibÀ
(
·c
->
ob
))

513 
	`bad_¨gumít
(
¨g
+1, 
T_STRING
 | 
T_OBJECT
, 3, 
f
);

515 
	`bad_¨gumít
(
¨g
+1, 
T_STRING
 | 
T_OBJECT
, 3, 
f
);

517 
·c
->
«rg
 = 
¨gc
 -Çarg - 2;

518 
·c
->
¨gs
 = 
¨g
 + 2;

520 i‡(
·c
->
ob
->
Êags
 & 
O_DESTRUCTED
)

521 
	`bad_¨gumít
(
¨g
+1, 
T_STRING
 | 
T_OBJECT
, 3, 
f
);

524 
	}
}

526 
svÆue_t
 *
ˇŒ_efun_ˇŒback
 
	$P2
(
fun˘i⁄_to_ˇŒ_t
 *, 
·c
, , 
n
) {

527 
svÆue_t
 *
v
;

529 i‡(
·c
->
«rg
)

530 
	`push_some_svÆues
(
·c
->
¨gs
, ftc->
«rg
);

531 i‡(
·c
->
ob
) {

532 i‡(
·c
->
ob
->
Êags
 & 
O_DESTRUCTED
)

533 
	`îr‹
("Object destructed duringÉfun callback.\n");

534 
v
 = 
	`≠∂y
(
·c
->
f
.
°r
, ftc->
ob
, 
n
 + ftc->
«rg
, 
ORIGIN_EFUN
);

536 
v
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
·c
->
f
.
Â
, 
n
 + ftc->
«rg
);

537  
v
;

538 
	}
}

544 
INLINE
 
‰ì_some_svÆues
 
	$P2
(
svÆue_t
 *, 
v
, , 
num
)

546 
num
--)

547 
	`‰ì_svÆue
(
v
 + 
num
, "free_some_svalues");

548 
	`FREE
(
v
);

549 
	}
}

554 *
add_¶ash
 
	$P1
(*, 
°r
)

556 *
tmp
;

558 i‡(
°r
[0] ='<' && 
	`°rcmp
(str + 1, "function>") == 0)

559  
	`°rög_c›y
(
°r
, "add_slash");

560 
tmp
 = 
	`√w_°rög
(
	`°æí
(
°r
) + 1, "add_slash");

561 *
tmp
 = '/';

562 
	`°r˝y
(
tmp
 + 1, 
°r
);

563  
tmp
;

564 
	}
}

572 
INLINE
 
assign_svÆue_no_‰ì
 
	$P2
(
svÆue_t
 *, 
to
, svÆue_à*, 
‰om
)

574 
	`DEBUG_CHECK
(
‰om
 == 0, "AttemptÅoássign_svalue() fromáÇullÖtr.\n");

575 
	`DEBUG_CHECK
(
to
 == 0, "AttemptÅoássign_svalue()ÅoáÇullÖtr.\n");

576 
	`DEBUG_CHECK
((
‰om
->
ty≥
 & (‰om->ty≥ - 1)Ë& ~
T_FREED
, "from->type is corrupt; >1 bit set.\n");

578 i‡(
‰om
->
ty≥
 =
T_OBJECT
 && (!‰om->
u
.
ob
 || (‰om->u.ob->
Êags
 & 
O_DESTRUCTED
))) {

579 *
to
 = 
c⁄°0u
;

583 *
to
 = *
‰om
;

585 i‡((
to
->
ty≥
 & 
T_FREED
) &&Åo->type != T_FREED)

586 
to
->
ty≥
 &~
T_FREED
;

588 i‡(
‰om
->
ty≥
 =
T_STRING
) {

589 i‡(
‰om
->
subty≥
 & 
STRING_COUNTED
) {

590 
	`INC_COUNTED_REF
(
to
->
u
.
°rög
);

591 
	`ADD_STRING
(
	`MSTR_SIZE
(
to
->
u
.
°rög
));

592 
	`NDBG
(
	`BLOCK
(
to
->
u
.
°rög
));

594 } i‡(
‰om
->
ty≥
 & 
T_REFED
) {

595 #ifde‡
DEBUG_MACRO


596 i‡(
‰om
->
ty≥
 =
T_OBJECT
)

597 
	`add_ªf
(
‰om
->
u
.
ob
, "assign_svalue_no_free");

600 
‰om
->
u
.
ª„d
->
ªf
++;

602 
	}
}

604 
INLINE
 
assign_svÆue
 
	$P2
(
svÆue_t
 *, 
de°
, svÆue_à*, 
v
)

607 
	`‰ì_svÆue
(
de°
, "assign_svalue");

608 
	`assign_svÆue_no_‰ì
(
de°
, 
v
);

609 
	}
}

611 
INLINE
 
push_some_svÆues
 
	$P2
(
svÆue_t
 *, 
v
, , 
num
)

613 
num
--Ë
	`push_svÆue
(
v
++);

614 
	}
}

620 
INLINE
 
c›y_some_svÆues
 
	$P3
(
svÆue_t
 *, 
de°
, svÆue_à*, 
v
, , 
num
)

622 
num
--)

623 
	`assign_svÆue_no_‰ì
(
de°
+
num
, 
v
+num);

624 
	}
}

626 
INLINE
 
å™s„r_push_some_svÆues
 
	$P2
(
svÆue_t
 *, 
v
, , 
num
)

628 
	`CHECK_STACK_OVERFLOW
(
num
);

629 
	`mem˝y
(
•
 + 1, 
v
, 
num
 * (
svÆue_t
));

630 
•
 +
num
;

631 
	}
}

638 
INLINE
 
	$p›_°ack
()

640 
	`DEBUG_CHECK
(
•
 < 
°¨t_of_°ack
, "Stack underflow.\n");

641 
	`‰ì_svÆue
(
•
--, "pop_stack");

642 
	}
}

644 
svÆue_t
 
	gglobÆ_lvÆue_byã
 = { 
T_LVALUE_BYTE
 };

646 
	glv_ow√r_ty≥
;

647 
ª„d_t
 *
	glv_ow√r
;

652 
INLINE
 
push_ödexed_lvÆue
 
	$P1
(, 
code
)

654 
öd
;

655 
svÆue_t
 *
lv
;

657 i‡(
•
->
ty≥
 =
T_LVALUE
) {

658 
lv
 = 
•
->
u
.
lvÆue
;

659 i‡(!
code
 && 
lv
->
ty≥
 =
T_MAPPING
) {

660 
•
--;

661 i‡(!(
lv
 = 
	`föd_f‹_ö£π
÷v->
u
.
m≠
, 
•
, 0)))

662 
	`m≠pög_too_œrge
();

663 
	`‰ì_svÆue
(
•
, "push_indexed_lvalue: 1");

664 
•
->
ty≥
 = 
T_LVALUE
;

665 
•
->
u
.
lvÆue
 = 
lv
;

666 #ifde‡
REF_RESERVED_WORD


667 
lv_ow√r_ty≥
 = 
T_MAPPING
;

668 
lv_ow√r
 = (
ª„d_t
 *)
lv
->
u
.
m≠
;

673 i‡(!((--
•
)->
ty≥
 =
T_NUMBER
))

674 
	`îr‹
("IllegalÅype of index\n");

676 
öd
 = 
•
->
u
.
numbî
;

678 
lv
->
ty≥
) {

679 
T_STRING
:

681 
Àn
 = 
	`SVALUE_STRLEN
(
lv
);

683 i‡(
code
Ë
öd
 = 
Àn
 - ind;

684 i‡(
öd
 >
Àn
 || ind < 0)

685 
	`îr‹
("Index out of bounds in string indexÜvalue.\n");

686 
	`u∆ök_°rög_svÆue
(
lv
);

687 
•
->
ty≥
 = 
T_LVALUE
;

688 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_byã
;

689 
globÆ_lvÆue_byã
.
subty≥
 = 0;

690 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = (*)&
lv
->u.
°rög
[
öd
];

691 #ifde‡
REF_RESERVED_WORD


692 
lv_ow√r_ty≥
 = 
T_STRING
;

693 
lv_ow√r
 = (
ª„d_t
 *)
lv
->
u
.
°rög
;

698 #i‚de‡
NO_BUFFER_TYPE


699 
T_BUFFER
:

701 i‡(
code
Ë
öd
 = 
lv
->
u
.
buf
->
size
 - ind;

702 i‡(
öd
 >
lv
->
u
.
buf
->
size
 || ind < 0)

703 
	`îr‹
("Buffer index out of bounds.\n");

704 
•
->
ty≥
 = 
T_LVALUE
;

705 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_byã
;

706 
globÆ_lvÆue_byã
.
subty≥
 = 1;

707 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = &
lv
->u.
buf
->
ôem
[
öd
];

708 #ifde‡
REF_RESERVED_WORD


709 
lv_ow√r_ty≥
 = 
T_BUFFER
;

710 
lv_ow√r
 = (
ª„d_t
 *)
lv
->
u
.
buf
;

716 
T_ARRAY
:

718 i‡(
code
Ë
öd
 = 
lv
->
u
.
¨r
->
size
 - ind;

719 i‡(
öd
 >
lv
->
u
.
¨r
->
size
 || ind < 0)

720 
	`îr‹
("Array index out of bounds\n");

721 
•
->
ty≥
 = 
T_LVALUE
;

722 
•
->
u
.
lvÆue
 = 
lv
->u.
¨r
->
ôem
 + 
öd
;

723 #ifde‡
REF_RESERVED_WORD


724 
lv_ow√r_ty≥
 = 
T_ARRAY
;

725 
lv_ow√r
 = (
ª„d_t
 *)
lv
->
u
.
¨r
;

731 i‡(
lv
->
ty≥
 =
T_NUMBER
 && !lv->
u
.
numbî
)

732 
	`îr‹
("Value being indexed is zero.\n");

733 
	`îr‹
("C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
lv
->
ty≥
));

740 i‡(!
code
 && (
•
->
ty≥
 =
T_MAPPING
)) {

741 i‡(!(
lv
 = 
	`föd_f‹_ö£π
(
•
->
u
.
m≠
, sp-1, 0)))

742 
	`m≠pög_too_œrge
();

743 
•
->
u
.
m≠
->
ªf
--;

744 #ifde‡
REF_RESERVED_WORD


745 
lv_ow√r_ty≥
 = 
T_MAPPING
;

746 
lv_ow√r
 = (
ª„d_t
 *)
•
->
u
.
m≠
;

748 
	`‰ì_svÆue
(--
•
, "push_indexed_lvalue: 2");

749 
•
->
ty≥
 = 
T_LVALUE
;

750 
•
->
u
.
lvÆue
 = 
lv
;

754 i‡(!((
•
-1)->
ty≥
 =
T_NUMBER
))

755 
	`îr‹
("IllegalÅype of index\n");

757 
öd
 = (
•
-1)->
u
.
numbî
;

759 
•
->
ty≥
) {

760 
T_STRING
:

762 
	`îr‹
("IllegalÅo make charÜvalue fromássigned string\n");

766 #i‚de‡
NO_BUFFER_TYPE


767 
T_BUFFER
:

769 i‡(
code
Ë
öd
 = 
•
->
u
.
buf
->
size
 - ind;

770 i‡(
öd
 >
•
->
u
.
buf
->
size
 || ind < 0)

771 
	`îr‹
("Buffer index out of bounds.\n");

772 
•
->
u
.
buf
->
ªf
--;

773 #ifde‡
REF_RESERVED_WORD


774 
lv_ow√r_ty≥
 = 
T_BUFFER
;

775 
lv_ow√r
 = (
ª„d_t
 *)
•
->
u
.
buf
;

777 (--
•
)->
ty≥
 = 
T_LVALUE
;

778 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_byã
;

779 
globÆ_lvÆue_byã
.
subty≥
 = 1;

780 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = (
•
+1)->u.
buf
->
ôem
 + 
öd
;

785 
T_ARRAY
:

787 i‡(
code
Ë
öd
 = 
•
->
u
.
¨r
->
size
 - ind;

788 i‡(
öd
 >
•
->
u
.
¨r
->
size
 || ind < 0)

789 
	`îr‹
("Array index out of bounds.\n");

790 
•
->
u
.
¨r
->
ªf
--;

791 #ifde‡
REF_RESERVED_WORD


792 
lv_ow√r_ty≥
 = 
T_ARRAY
;

793 
lv_ow√r
 = (
ª„d_t
 *)
•
->
u
.
¨r
;

795 (--
•
)->
ty≥
 = 
T_LVALUE
;

796 
•
->
u
.
lvÆue
 = (•+1)->u.
¨r
->
ôem
 + 
öd
;

801 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

802 
	`îr‹
("Value being indexed is zero.\n");

803 
	`îr‹
("C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
•
->
ty≥
));

806 
	}
}

808 
	slvÆue_ønge
 {

809 
	möd1
, 
	möd2
, 
	msize
;

810 
svÆue_t
 *
	mow√r
;

811 } 
	gglobÆ_lvÆue_ønge
;

813 
svÆue_t
 
	gglobÆ_lvÆue_ønge_sv
 = { 
T_LVALUE_RANGE
 };

815 
INLINE_STATIC
 
push_lvÆue_ønge
 
	$P1
(, 
code
)

817 
öd1
, 
öd2
, 
size
;

818 
svÆue_t
 *
lv
;

820 i‡(
•
->
ty≥
 =
T_LVALUE
) {

821 (
lv
 = 
globÆ_lvÆue_ønge
.
ow√r
 = 
•
->
u
.
lvÆue
)->
ty≥
) {

822 
T_ARRAY
:

823 
size
 = 
lv
->
u
.
¨r
->size;

825 
T_STRING
: {

826 
size
 = 
	`SVALUE_STRLEN
(
lv
);

827 
	`u∆ök_°rög_svÆue
(
lv
);

830 #i‚de‡
NO_BUFFER_TYPE


831 
T_BUFFER
:

832 
size
 = 
lv
->
u
.
buf
->size;

836 
	`îr‹
("RangeÜvalue on illegalÅype\n");

837 
	`IF_DEBUG
(
size
 = 0);

840 
	`îr‹
("RangeÜvalue on illegalÅype\n");

842 i‡(!((--
•
)->
ty≥
 =
T_NUMBER
)Ë
	`îr‹
("Illegal 2nd indexÅypeÅoÑangeÜvalue\n");

844 
öd2
 = (
code
 & 0x01Ë? (
size
 - 
•
->
u
.
numbî
) : sp->u.number;

845 i‡(++
öd2
 < 0 || (öd2 > 
size
))

846 
	`îr‹
("The 2nd indexÅoÑangeÜvalue must be >= -1ánd < sizeof(indexed value)\n");

848 i‡(!((--
•
)->
ty≥
 =
T_NUMBER
)Ë
	`îr‹
("Illegal 1st indexÅypeÅoÑangeÜvalue\n");

849 
öd1
 = (
code
 & 0x10Ë? (
size
 - 
•
->
u
.
numbî
) : sp->u.number;

851 i‡(
öd1
 < 0 || ind1 > 
size
)

852 
	`îr‹
("The 1st indexÅoÑangeÜvalue must be >= 0ánd <= sizeof(indexed value)\n");

854 
globÆ_lvÆue_ønge
.
öd1
 = ind1;

855 
globÆ_lvÆue_ønge
.
öd2
 = ind2;

856 
globÆ_lvÆue_ønge
.
size
 = size;

857 
•
->
ty≥
 = 
T_LVALUE
;

858 
•
->
u
.
lvÆue
 = &
globÆ_lvÆue_ønge_sv
;

859 
	}
}

861 
INLINE
 
c›y_lvÆue_ønge
 
	$P1
(
svÆue_t
 *, 
‰om
)

863 
öd1
, 
öd2
, 
size
, 
fsize
;

864 
svÆue_t
 *
ow√r
;

866 
öd1
 = 
globÆ_lvÆue_ønge
.ind1;

867 
öd2
 = 
globÆ_lvÆue_ønge
.ind2;

868 
size
 = 
globÆ_lvÆue_ønge
.size;

869 
ow√r
 = 
globÆ_lvÆue_ønge
.owner;

871 
ow√r
->
ty≥
) {

872 
T_ARRAY
:

874 
¨øy_t
 *
fv
, *
dv
;

875 
svÆue_t
 *
Âå
, *
d±r
;

876 i‡(
‰om
->
ty≥
 !
T_ARRAY
Ë
	`îr‹
("IllegalÑhsÅoárrayÑangeÜvalue\n");

878 
fv
 = 
‰om
->
u
.
¨r
;

879 
Âå
 = 
fv
->
ôem
;

881 i‡((
fsize
 = 
fv
->
size
Ë=
öd2
 - 
öd1
) {

882 
d±r
 = (
ow√r
->
u
.
¨r
)->
ôem
 + 
öd1
;

884 i‡(
fv
->
ªf
 == 1) {

886 
fsize
--) {

887 
	`‰ì_svÆue
(
d±r
, "copy_lvalue_range : 1");

888 *
d±r
++ = *
Âå
++;

890 
	`‰ì_em±y_¨øy
(
fv
);

892 
fsize
--Ë
	`assign_svÆue
(
d±r
++, 
Âå
++);

893 
fv
->
ªf
--;

896 
¨øy_t
 *
ﬁd_dv
 = 
ow√r
->
u
.
¨r
;

897 
svÆue_t
 *
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
;

900 
dv
 = 
	`Æloˇã_em±y_¨øy
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

901 
d±r
 = 
dv
->
ôem
;

904 
öd1
--Ë
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

906 i‡(
fv
->
ªf
 == 1) {

907 
fsize
--Ë*
d±r
++ = *
Âå
++;

908 
	`‰ì_em±y_¨øy
(
fv
);

910 
fsize
--Ë
	`assign_svÆue_no_‰ì
(
d±r
++, 
Âå
++);

911 
fv
->
ªf
--;

915 
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
 + 
öd2
;

916 
size
 -
öd2
;

918 
size
--Ë
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

919 
	`‰ì_¨øy
(
ﬁd_dv
);

921 
ow√r
->
u
.
¨r
 = 
dv
;

926 
T_STRING
:

928 i‡(
‰om
->
ty≥
 !
T_STRING
Ë
	`îr‹
("IllegalÑhsÅo stringÑangeÜvalue.\n");

930 i‡((
fsize
 = 
	`SVALUE_STRLEN
(
‰om
)Ë=
öd2
 - 
öd1
) {

934 
	`°∫˝y
(
ow√r
->
u
.
°rög
 + 
öd1
, 
‰om
->u.°rög, 
fsize
);

936 *
tmp
, *
d°r
 = 
ow√r
->
u
.
°rög
;

938 
ow√r
->
u
.
°rög
 = 
tmp
 = 
	`√w_°rög
(
size
 - 
öd2
 + 
öd1
 + 
fsize
, "copy_lvalue_range");

939 i‡(
öd1
 >= 1) {

940 
	`°∫˝y
(
tmp
, 
d°r
, 
öd1
);

941 
tmp
 +
öd1
;

943 
	`°r˝y
(
tmp
, 
‰om
->
u
.
°rög
);

944 
tmp
 +
fsize
;

946 
size
 -
öd2
;

947 i‡(
size
 >= 1) {

948 
	`°∫˝y
(
tmp
, 
d°r
 + 
öd2
, 
size
);

949 *(
tmp
 + 
size
) = 0;

951 
	`FREE_MSTR
(
d°r
);

953 
	`‰ì_°rög_svÆue
(
‰om
);

957 #i‚de‡
NO_BUFFER_TYPE


958 
T_BUFFER
:

960 i‡(
‰om
->
ty≥
 !
T_BUFFER
Ë
	`îr‹
("IllegalÑhsÅo bufferÑangeÜvalue.\n");

962 i‡((
fsize
 = 
‰om
->
u
.
buf
->
size
Ë=
öd2
 - 
öd1
) {

963 
	`mem˝y
((
ow√r
->
u
.
buf
)->
ôem
 + 
öd1
, 
‰om
->u.buf->ôem, 
fsize
);

965 
buf„r_t
 *
b
;

966 *
ﬁd_ôem
 = (
ow√r
->
u
.
buf
)->
ôem
;

967 *
√w_ôem
;

969 
b
 = 
	`Æloˇã_buf„r
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

970 
√w_ôem
 = 
b
->
ôem
;

971 i‡(
öd1
 >= 1) {

972 
	`mem˝y
(
b
->
ôem
, 
ﬁd_ôem
, 
öd1
);

973 
√w_ôem
 +
öd1
;

975 
	`mem˝y
(
√w_ôem
, 
‰om
->
u
.
buf
, 
fsize
);

976 
√w_ôem
 +
fsize
;

978 i‡((
size
 -
öd2
) >= 1)

979 
	`mem˝y
(
√w_ôem
, 
ﬁd_ôem
 + 
öd2
, 
size
);

980 
	`‰ì_buf„r
(
ow√r
->
u
.
buf
);

981 
ow√r
->
u
.
buf
 = 
b
;

983 
	`‰ì_buf„r
(
‰om
->
u
.
buf
);

988 
	}
}

990 
INLINE
 
assign_lvÆue_ønge
 
	$P1
(
svÆue_t
 *, 
‰om
)

992 
öd1
, 
öd2
, 
size
, 
fsize
;

993 
svÆue_t
 *
ow√r
;

995 
öd1
 = 
globÆ_lvÆue_ønge
.ind1;

996 
öd2
 = 
globÆ_lvÆue_ønge
.ind2;

997 
size
 = 
globÆ_lvÆue_ønge
.size;

998 
ow√r
 = 
globÆ_lvÆue_ønge
.owner;

1000 
ow√r
->
ty≥
) {

1001 
T_ARRAY
:

1003 
¨øy_t
 *
fv
, *
dv
;

1004 
svÆue_t
 *
Âå
, *
d±r
;

1005 i‡(
‰om
->
ty≥
 !
T_ARRAY
Ë
	`îr‹
("IllegalÑhsÅoárrayÑangeÜvalue\n");

1007 
fv
 = 
‰om
->
u
.
¨r
;

1008 
Âå
 = 
fv
->
ôem
;

1010 i‡((
fsize
 = 
fv
->
size
Ë=
öd2
 - 
öd1
) {

1011 
d±r
 = (
ow√r
->
u
.
¨r
)->
ôem
 + 
öd1
;

1012 
fsize
--Ë
	`assign_svÆue
(
d±r
++, 
Âå
++);

1014 
¨øy_t
 *
ﬁd_dv
 = 
ow√r
->
u
.
¨r
;

1015 
svÆue_t
 *
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
;

1018 
dv
 = 
	`Æloˇã_em±y_¨øy
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

1019 
d±r
 = 
dv
->
ôem
;

1022 
öd1
--Ë
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

1024 
fsize
--Ë
	`assign_svÆue_no_‰ì
(
d±r
++, 
Âå
++);

1027 
ﬁd_d±r
 = 
ﬁd_dv
->
ôem
 + 
öd2
;

1028 
size
 -
öd2
;

1030 
size
--Ë
	`assign_svÆue_no_‰ì
(
d±r
++, 
ﬁd_d±r
++);

1031 
	`‰ì_¨øy
(
ﬁd_dv
);

1033 
ow√r
->
u
.
¨r
 = 
dv
;

1038 
T_STRING
:

1040 i‡(
‰om
->
ty≥
 !
T_STRING
Ë
	`îr‹
("IllegalÑhsÅo stringÑangeÜvalue.\n");

1042 i‡((
fsize
 = 
	`SVALUE_STRLEN
(
‰om
)Ë=
öd2
 - 
öd1
) {

1046 
	`°∫˝y
(
ow√r
->
u
.
°rög
 + 
öd1
, 
‰om
->u.°rög, 
fsize
);

1048 *
tmp
, *
d°r
 = 
ow√r
->
u
.
°rög
;

1050 
ow√r
->
u
.
°rög
 = 
tmp
 = 
	`√w_°rög
(
size
 - 
öd2
 + 
öd1
 + 
fsize
, "assign_lvalue_range");

1051 i‡(
öd1
 >= 1) {

1052 
	`°∫˝y
(
tmp
, 
d°r
, 
öd1
);

1053 
tmp
 +
öd1
;

1055 
	`°r˝y
(
tmp
, 
‰om
->
u
.
°rög
);

1056 
tmp
 +
fsize
;

1058 
size
 -
öd2
;

1059 i‡(
size
 >= 1) {

1060 
	`°∫˝y
(
tmp
, 
d°r
 + 
öd2
, 
size
);

1061 *(
tmp
 + 
size
) = 0;

1063 
	`FREE_MSTR
(
d°r
);

1068 #i‚de‡
NO_BUFFER_TYPE


1069 
T_BUFFER
:

1071 i‡(
‰om
->
ty≥
 !
T_BUFFER
Ë
	`îr‹
("IllegalÑhsÅo bufferÑangeÜvalue.\n");

1073 i‡((
fsize
 = 
‰om
->
u
.
buf
->
size
Ë=
öd2
 - 
öd1
) {

1074 
	`mem˝y
((
ow√r
->
u
.
buf
)->
ôem
 + 
öd1
, 
‰om
->u.buf->ôem, 
fsize
);

1076 
buf„r_t
 *
b
;

1077 *
ﬁd_ôem
 = (
ow√r
->
u
.
buf
)->
ôem
;

1078 *
√w_ôem
;

1080 
b
 = 
	`Æloˇã_buf„r
(
size
 - 
öd2
 + 
öd1
 + 
fsize
);

1081 
√w_ôem
 = 
b
->
ôem
;

1082 i‡(
öd1
 >= 1) {

1083 
	`mem˝y
(
b
->
ôem
, 
ﬁd_ôem
, 
öd1
);

1084 
√w_ôem
 +
öd1
;

1086 
	`mem˝y
(
√w_ôem
, 
‰om
->
u
.
buf
, 
fsize
);

1087 
√w_ôem
 +
fsize
;

1089 i‡((
size
 -
öd2
) >= 1)

1090 
	`mem˝y
(
√w_ôem
, 
ﬁd_ôem
 + 
öd2
, 
size
);

1091 
	`‰ì_buf„r
(
ow√r
->
u
.
buf
);

1092 
ow√r
->
u
.
buf
 = 
b
;

1098 
	}
}

1103 
INLINE
 

1104 
p›_n_ñems
 
	$P1
(, 
n
)

1106 
	`DEBUG_CHECK1
(
n
 < 0, "pop_n_elems: %dÉlements.\n",Ç);

1107 
n
--) {

1108 
	`p›_°ack
();

1110 
	}
}

1115 
INLINE
 

1116 
	$p›_2_ñems
()

1118 
	`‰ì_svÆue
(
•
--, "pop_2_elems");

1119 
	`DEBUG_CHECK
(
•
 < 
°¨t_of_°ack
, "Stack underflow.\n");

1120 
	`‰ì_svÆue
(
•
--, "pop_2_elems");

1121 
	}
}

1126 
INLINE
 

1127 
	$p›_3_ñems
()

1129 
	`‰ì_svÆue
(
•
--, "pop_3_elems");

1130 
	`‰ì_svÆue
(
•
--, "pop_3_elems");

1131 
	`DEBUG_CHECK
(
•
 < 
°¨t_of_°ack
, "Stack underflow.\n");

1132 
	`‰ì_svÆue
(
•
--, "pop_3_elems");

1133 
	}
}

1135 
bad_¨g
 
	$P2
(, 
¨g
, , 
ö°r
)

1137 
	`îr‹
("Bad Argumíà%dÅÿ%s()\n", 
¨g
, 
	`quîy_ö°r_«me
(
ö°r
));

1138 
	}
}

1140 
bad_¨gumít
 
	$P4
(
svÆue_t
 *, 
vÆ
, , 
ty≥
, , 
¨g
, , 
ö°r
)

1142 
outbuf„r_t
 
outbuf
;

1143 
Êag
 = 0;

1144 
j
 = 
TYPE_CODES_START
;

1145 
k
 = 0;

1147 
	`outbuf_zîo
(&
outbuf
);

1148 
	`outbuf_addv
(&
outbuf
, "Badárgumíà%dÅÿ%s%s\nEx≥˘ed: ", 
¨g
,

1149 
	`quîy_ö°r_«me
(
ö°r
), (ö°∏< 
BASE
 ? "" : "()"));

1152 i‡(
ty≥
 & 
j
) {

1153 i‡(
Êag
Ë
	`outbuf_add
(&
outbuf
, " or ");

1154 
Êag
 = 1;

1155 
	`outbuf_add
(&
outbuf
, 
ty≥_«mes
[
k
]);

1157 
k
++;

1158 } !((
j
 <<1Ë& 
TYPE_CODES_END
));

1160 
	`outbuf_add
(&
outbuf
, " Got: ");

1161 
	`svÆue_to_°rög
(
vÆ
, &
outbuf
, 0, 0, 0);

1162 
	`outbuf_add
(&
outbuf
, ".\n");

1163 
	`outbuf_fix
(&
outbuf
);

1164 
	`îr‹_√eds_‰ì
(
outbuf
.
buf„r
);

1165 
	}
}

1167 
INLINE
 

1168 
push_c⁄åﬁ_°ack
 
	$P1
(, 
‰köd
)

1170 i‡(
c•
 =&
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
 - 1]) {

1171 
too_dìp_îr‹
 = 1;

1172 
	`îr‹
("Too deepÑecursion.\n");

1174 
c•
++;

1175 
c•
->
ˇŒî_ty≥
 = caller_type;

1176 
c•
->
ob
 = 
cuºít_obje˘
;

1177 
c•
->
‰ameköd
 = 
‰köd
;

1178 
c•
->
¥ev_ob
 = 
¥evious_ob
;

1179 
c•
->
Â
 = fp;

1180 
c•
->
¥og
 = 
cuºít_¥og
;

1181 
c•
->
pc
 =Öc;

1182 
c•
->
fun˘i⁄_ödex_off£t
 = function_index_offset;

1183 
c•
->
v¨übÀ_ödex_off£t
 = variable_index_offset;

1184 
	}
}

1190 
	$p›_c⁄åﬁ_°ack
()

1192 
	`DEBUG_CHECK
(
c•
 =(
c⁄åﬁ_°ack
 - 1),

1194 #ifde‡
PROFILE_FUNCTIONS


1195 i‡((
c•
->
‰ameköd
 & 
FRAME_MASK
Ë=
FRAME_FUNCTION
) {

1196 
£cs
, 
u£cs
, 
d£cs
;

1197 
fun˘i⁄_t
 *
cÂ
 = &
cuºít_¥og
->
fun˘i⁄_èbÀ
[
c•
->
‰
.
èbÀ_ödex
];

1199 
	`gë_˝u_times
((*Ë&
£cs
, (*Ë&
u£cs
);

1200 
d£cs
 = (((
£cs
 - 
c•
->
íåy_£cs
) * 1000000)

1201 + (
u£cs
 - 
c•
->
íåy_u£cs
));

1202 
cÂ
->
£lf
 +
d£cs
;

1203 i‡(
c•
 !
c⁄åﬁ_°ack
) {

1204 i‡(((
c•
 - 1)->
‰ameköd
 & 
FRAME_MASK
Ë=
FRAME_FUNCTION
) {

1205 
c•
->
¥og
->
fun˘i⁄_èbÀ
[(c•-1)->
‰
.
èbÀ_ödex
].
chûdªn
 +
d£cs
;

1210 
cuºít_obje˘
 = 
c•
->
ob
;

1211 
cuºít_¥og
 = 
c•
->
¥og
;

1212 
¥evious_ob
 = 
c•
->
¥ev_ob
;

1213 
ˇŒî_ty≥
 = 
c•
->caller_type;

1214 
pc
 = 
c•
->pc;

1215 
Â
 = 
c•
->fp;

1216 
fun˘i⁄_ödex_off£t
 = 
c•
->function_index_offset;

1217 
v¨übÀ_ödex_off£t
 = 
c•
->variable_index_offset;

1218 
c•
--;

1219 
	}
}

1226 
INLINE
 
push_¨øy
 
	$P1
(
¨øy_t
 *, 
v
)

1228 
STACK_INC
;

1229 
v
->
ªf
++;

1230 
•
->
ty≥
 = 
T_ARRAY
;

1231 
•
->
u
.
¨r
 = 
v
;

1232 
	}
}

1234 
INLINE
 
push_ª„d_¨øy
 
	$P1
(
¨øy_t
 *, 
v
)

1236 
STACK_INC
;

1237 
•
->
ty≥
 = 
T_ARRAY
;

1238 
•
->
u
.
¨r
 = 
v
;

1239 
	}
}

1241 #i‚de‡
NO_BUFFER_TYPE


1242 
INLINE
 

1243 
push_buf„r
 
	$P1
(
buf„r_t
 *, 
b
)

1245 
STACK_INC
;

1246 
b
->
ªf
++;

1247 
•
->
ty≥
 = 
T_BUFFER
;

1248 
•
->
u
.
buf
 = 
b
;

1249 
	}
}

1251 
INLINE
 

1252 
push_ª„d_buf„r
 
	$P1
(
buf„r_t
 *, 
b
)

1254 
STACK_INC
;

1255 
•
->
ty≥
 = 
T_BUFFER
;

1256 
•
->
u
.
buf
 = 
b
;

1257 
	}
}

1263 
INLINE
 

1264 
push_m≠pög
 
	$P1
(
m≠pög_t
 *, 
m
)

1266 
STACK_INC
;

1267 
m
->
ªf
++;

1268 
•
->
ty≥
 = 
T_MAPPING
;

1269 
•
->
u
.
m≠
 = 
m
;

1270 
	}
}

1272 
INLINE
 

1273 
push_ª„d_m≠pög
 
	$P1
(
m≠pög_t
 *, 
m
)

1275 
STACK_INC
;

1276 
•
->
ty≥
 = 
T_MAPPING
;

1277 
•
->
u
.
m≠
 = 
m
;

1278 
	}
}

1283 
INLINE
 

1284 
push_˛ass
 
	$P1
(
¨øy_t
 *, 
v
)

1286 
STACK_INC
;

1287 
v
->
ªf
++;

1288 
•
->
ty≥
 = 
T_CLASS
;

1289 
•
->
u
.
¨r
 = 
v
;

1290 
	}
}

1292 
INLINE
 

1293 
push_ª„d_˛ass
 
	$P1
(
¨øy_t
 *, 
v
)

1295 
STACK_INC
;

1296 
•
->
ty≥
 = 
T_CLASS
;

1297 
•
->
u
.
¨r
 = 
v
;

1298 
	}
}

1303 
INLINE
 
push_mÆlo˚d_°rög
 
	$P1
(*, 
p
)

1305 
STACK_INC
;

1306 
•
->
ty≥
 = 
T_STRING
;

1307 
•
->
u
.
°rög
 = 
p
;

1308 
•
->
subty≥
 = 
STRING_MALLOC
;

1309 
	}
}

1315 
INLINE
 
push_sh¨ed_°rög
 
	$P1
(*, 
p
) {

1316 
STACK_INC
;

1317 
•
->
ty≥
 = 
T_STRING
;

1318 
•
->
u
.
°rög
 = 
p
;

1319 
•
->
subty≥
 = 
STRING_SHARED
;

1320 
	`ªf_°rög
(
p
);

1321 
	}
}

1326 
INLINE


1327 
push_c⁄°™t_°rög
 
	$P1
(*, 
p
)

1329 
STACK_INC
;

1330 
•
->
ty≥
 = 
T_STRING
;

1331 
•
->
subty≥
 = 
STRING_CONSTANT
;

1332 
•
->
u
.
°rög
 = 
p
;

1333 
	}
}

1335 #ifde‡
TRACE


1336 
do_åa˚_ˇŒ
 
	$P1
(, 
off£t
)

1338 
	`do_åa˚
("CÆ»dúe˘ ", 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
off£t
].
«me
, " ");

1339 i‡(
TRACEHB
) {

1340 i‡(
	`TRACETST
(
TRACE_ARGS
)) {

1341 
i
, 
n
;

1343 
n
 = 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
off£t
].
num_¨g
;

1345 
	`add_vmesßge
(
comm™d_givî
, " wôh %dárgumíts: ", 
n
);

1346 
i
 = 
n
 - 1; i >= 0; i--) {

1347 
	`¥öt_svÆue
(&
•
[-
i
]);

1348 
	`add_mesßge
(
comm™d_givî
, " ", 1);

1351 
	`add_mesßge
(
comm™d_givî
, "\n", 1);

1353 
	}
}

1362 
INLINE
 
£tup_v¨übÀs
 
	$P3
(, 
a˘uÆ
, , 
loˇl
, , 
num_¨g
) {

1363 
tmp
;

1365 i‡((
tmp
 = 
a˘uÆ
 - 
num_¨g
) > 0) {

1367 
	`p›_n_ñems
(
tmp
);

1368 
	`push_undeföeds
(
loˇl
);

1371 
	`push_undeföeds
(
loˇl
 - 
tmp
);

1373 
Â
 = 
•
 - (
c•
->
num_loˇl_v¨übÀs
 = 
loˇl
 + 
num_¨g
) + 1;

1374 
	}
}

1376 
INLINE_STATIC
 
£tup_v¨¨gs_v¨übÀs
 
	$P3
(, 
a˘uÆ
, , 
loˇl
, , 
num_¨g
) {

1377 
¨øy_t
 *
¨r
;

1378 i‡(
a˘uÆ
 >
num_¨g
) {

1379 
n
 = 
a˘uÆ
 - 
num_¨g
 + 1;

1381 
¨r
 = 
	`Æloˇã_em±y_¨øy
(
n
);

1382 
n
--)

1383 
¨r
->
ôem
[
n
] = *
•
--;

1386 
	`push_undeföeds
(
num_¨g
 - 1 - 
a˘uÆ
);

1387 
¨r
 = &
the_nuŒ_¨øy
;

1389 
	`push_ª„d_¨øy
(
¨r
);

1390 
	`push_undeföeds
(
loˇl
);

1391 
Â
 = 
•
 - (
c•
->
num_loˇl_v¨übÀs
 = 
loˇl
 + 
num_¨g
) + 1;

1392 
	}
}

1394 
INLINE
 
fun˘i⁄_t
 *

1395 
£tup_√w_‰ame
 
	$P1
(, 
ödex
)

1397 
fun˘i⁄_t
 *
func_íåy
;

1398 
low
, 
high
, 
mid
;

1399 
Êags
;

1401 
fun˘i⁄_ödex_off£t
 = 
v¨übÀ_ödex_off£t
 = 0;

1404 i‡(
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_ALIAS
) {

1405 
ödex
 = 
cuºít_¥og
->
fun˘i⁄_Êags
[ödex] & ~
FUNC_ALIAS
;

1408 
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_INHERITED
) {

1409 
low
 = 0;

1410 
high
 = 
cuºít_¥og
->
num_öhîôed
 -1;

1412 
high
 > 
low
) {

1413 
mid
 = (
low
 + 
high
 + 1) >> 1;

1414 i‡(
cuºít_¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ödex
)

1415 
high
 = 
mid
 -1;

1416 
low
 = 
mid
;

1418 
ödex
 -
cuºít_¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
;

1419 
fun˘i⁄_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
low
].function_index_offset;

1420 
v¨übÀ_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
low
].variable_index_offset;

1421 
cuºít_¥og
 = cuºít_¥og->
öhîô
[
low
].
¥og
;

1424 
Êags
 = 
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
];

1426 
ödex
 -
cuºít_¥og
->
œ°_öhîôed
;

1428 
func_íåy
 = 
cuºít_¥og
->
fun˘i⁄_èbÀ
 + 
ödex
;

1429 
c•
->
‰
.
èbÀ_ödex
 = 
ödex
;

1430 #ifde‡
PROFILE_FUNCTIONS


1431 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
));

1432 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
ödex
].
ˇŒs
++;

1436 i‡(
Êags
 & 
FUNC_TRUE_VARARGS
) {

1437 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

1438 
func_íåy
->
num_loˇl
,

1439 
func_íåy
->
num_¨g
);

1442 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

1443 
func_íåy
->
num_loˇl
,

1444 
func_íåy
->
num_¨g
);

1445 #ifde‡
TRACE


1446 
åa˚dïth
++;

1447 i‡(
	`TRACEP
(
TRACE_CALL
)) {

1448 
	`do_åa˚_ˇŒ
(
ödex
);

1451  &
cuºít_¥og
->
fun˘i⁄_èbÀ
[
ödex
];

1452 
	}
}

1454 
INLINE
 
fun˘i⁄_t
 *
£tup_öhîôed_‰ame
 
	$P1
(, 
ödex
)

1456 
fun˘i⁄_t
 *
func_íåy
;

1457 
low
, 
high
, 
mid
;

1458 
Êags
;

1461 i‡(
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_ALIAS
) {

1462 
ödex
 = 
cuºít_¥og
->
fun˘i⁄_Êags
[ödex] & ~
FUNC_ALIAS
;

1465 
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_INHERITED
) {

1466 
low
 = 0;

1467 
high
 = 
cuºít_¥og
->
num_öhîôed
 -1;

1469 
high
 > 
low
) {

1470 
mid
 = (
low
 + 
high
 + 1) >> 1;

1471 i‡(
cuºít_¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ödex
)

1472 
high
 = 
mid
 -1;

1473 
low
 = 
mid
;

1475 
ödex
 -
cuºít_¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
;

1476 
fun˘i⁄_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
low
].function_index_offset;

1477 
v¨übÀ_ödex_off£t
 +
cuºít_¥og
->
öhîô
[
low
].variable_index_offset;

1478 
cuºít_¥og
 = cuºít_¥og->
öhîô
[
low
].
¥og
;

1481 
Êags
 = 
cuºít_¥og
->
fun˘i⁄_Êags
[
ödex
];

1482 
ödex
 -
cuºít_¥og
->
œ°_öhîôed
;

1484 
func_íåy
 = 
cuºít_¥og
->
fun˘i⁄_èbÀ
 + 
ödex
;

1485 
c•
->
‰
.
èbÀ_ödex
 = 
ödex
;

1486 #ifde‡
PROFILE_FUNCTIONS


1487 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
));

1488 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
ödex
].
ˇŒs
++;

1492 i‡(
Êags
 & 
FUNC_TRUE_VARARGS
)

1493 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

1494 
func_íåy
->
num_loˇl
,

1495 
func_íåy
->
num_¨g
);

1497 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

1498 
func_íåy
->
num_loˇl
,

1499 
func_íåy
->
num_¨g
);

1500 #ifde‡
TRACE


1501 
åa˚dïth
++;

1502 i‡(
	`TRACEP
(
TRACE_CALL
)) {

1503 
	`do_åa˚_ˇŒ
(
ödex
);

1506  &
cuºít_¥og
->
fun˘i⁄_èbÀ
[
ödex
];

1507 
	}
}

1509 #ifde‡
DEBUG


1514 
	$bªak_poöt
()

1518 i‡(!
°ack_ö_u£_as_ãmp‹¨y
 && 
•
 - 
Â
 - 
c•
->
num_loˇl_v¨übÀs
 + 1 != 0)

1519 
	`Áèl
("Bad stackÖointer.\n");

1520 
	}
}

1523 
¥ogøm_t
 
	gÁke_¥og
 = { "<function>" };

1524 
	gÁke_¥ogøm
 = 
F_RETURN
;

1534 
£tup_Áke_‰ame
 
	$P1
(
fu≈å_t
 *, 
fun
) {

1535 i‡(
c•
 =&
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
-1]) {

1536 
too_dìp_îr‹
 = 1;

1537 
	`îr‹
("Too deepÑecursion.\n");

1539 
c•
++;

1540 
c•
->
ˇŒî_ty≥
 = caller_type;

1541 
c•
->
‰ameköd
 = 
FRAME_FAKE
 | 
FRAME_OB_CHANGE
;

1542 
c•
->
‰
.
fu≈
 = 
fun
;

1543 
c•
->
ob
 = 
cuºít_obje˘
;

1544 
c•
->
¥ev_ob
 = 
¥evious_ob
;

1545 
c•
->
Â
 = fp;

1546 
c•
->
¥og
 = 
cuºít_¥og
;

1547 
c•
->
pc
 =Öc;

1548 
pc
 = (*)&
Áke_¥ogøm
;

1549 
c•
->
fun˘i⁄_ödex_off£t
 = function_index_offset;

1550 
c•
->
v¨übÀ_ödex_off£t
 = variable_index_offset;

1551 
ˇŒî_ty≥
 = 
ORIGIN_FUNCTION_POINTER
;

1552 
c•
->
num_loˇl_v¨übÀs
 = 0;

1553 
cuºít_¥og
 = &
Áke_¥og
;

1554 
¥evious_ob
 = 
cuºít_obje˘
;

1555 
cuºít_obje˘
 = 
fun
->
hdr
.
ow√r
;

1556 
	}
}

1561 
	$ªmove_Áke_‰ame
() {

1562 
	`DEBUG_CHECK
(
c•
 =(
c⁄åﬁ_°ack
 - 1),

1564 
cuºít_obje˘
 = 
c•
->
ob
;

1565 
cuºít_¥og
 = 
c•
->
¥og
;

1566 
¥evious_ob
 = 
c•
->
¥ev_ob
;

1567 
ˇŒî_ty≥
 = 
c•
->caller_type;

1568 
pc
 = 
c•
->pc;

1569 
Â
 = 
c•
->fp;

1570 
fun˘i⁄_ödex_off£t
 = 
c•
->function_index_offset;

1571 
v¨übÀ_ödex_off£t
 = 
c•
->variable_index_offset;

1572 
c•
--;

1573 
	}
}

1590 
check_f‹_de°r
 
	$P1
(
¨øy_t
 *, 
v
)

1592 
i
 = 
v
->
size
;

1594 
i
--) {

1595 i‡((
v
->
ôem
[
i
].
ty≥
 =
T_OBJECT
Ë&& (v->ôem[i].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1596 
	`‰ì_svÆue
(&
v
->
ôem
[
i
], "check_for_destr");

1597 
v
->
ôem
[
i
] = 
c⁄°0u
;

1600 
	}
}

1612 
INLINE_STATIC
 
	$do_lo›_c⁄d_loˇl
()

1614 
svÆue_t
 *
s1
, *
s2
;

1615 
i
;

1617 
s1
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

1618 
s2
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

1619 
s1
->
ty≥
 | 
s2
->type) {

1620 
T_NUMBER
:

1621 
i
 = 
s1
->
u
.
numbî
 < 
s2
->u.number;

1623 
T_REAL
:

1624 
i
 = 
s1
->
u
.
ªÆ
 < 
s2
->u.real;

1626 
T_STRING
:

1627 
i
 = (
	`°rcmp
(
s1
->
u
.
°rög
, 
s2
->u.string) < 0);

1629 
T_NUMBER
|
T_REAL
:

1630 i‡(
s1
->
ty≥
 =
T_NUMBER
Ë
i
 = s1->
u
.
numbî
 < 
s2
->u.
ªÆ
;

1631 
i
 = 
s1
->
u
.
ªÆ
 < 
s2
->u.
numbî
;

1634 i‡(
s1
->
ty≥
 =
T_OBJECT
 && (s1->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1635 
	`‰ì_obje˘
(
s1
->
u
.
ob
, "do_loop_cond:1");

1636 *
s1
 = 
c⁄°0u
;

1638 i‡(
s2
->
ty≥
 =
T_OBJECT
 && (s2->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1639 
	`‰ì_obje˘
(
s2
->
u
.
ob
, "do_loop_cond:2");

1640 *
s2
 = 
c⁄°0u
;

1642 i‡(
s1
->
ty≥
 =
T_NUMBER
 && 
s2
->type == T_NUMBER) {

1643 
i
 = 
s1
->
u
.
numbî
 < 
s2
->u.number;

1646 
s1
->
ty≥
) {

1647 
T_NUMBER
:

1648 
T_REAL
:

1649 
	`îr‹
("2ndárgumentÅo < isÇotÇumeric whenÅhe 1st is.\n");

1650 
T_STRING
:

1651 
	`îr‹
("2ndárgumentÅo < isÇot string whenÅhe 1st is.\n");

1653 
	`îr‹
("Bad 1stárgumentÅo <.\n");

1655 
i
 = 0;

1657 i‡(
i
) {

1658 
off£t
;

1660 
	`COPY_SHORT
(&
off£t
, 
pc
);

1661 
pc
 -
off£t
;

1662 } 
pc
 += 2;

1663 
	}
}

1665 
INLINE_STATIC
 
	$do_lo›_c⁄d_numbî
()

1667 
svÆue_t
 *
s1
;

1668 
i
;

1670 
s1
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

1671 
	`LOAD_INT
(
i
, 
pc
);

1672 i‡(
s1
->
ty≥
 =
T_NUMBER
) {

1673 i‡(
s1
->
u
.
numbî
 < 
i
) {

1674 
off£t
;

1676 
	`COPY_SHORT
(&
off£t
, 
pc
);

1677 
pc
 -
off£t
;

1678 } 
pc
 += 2;

1679 } i‡(
s1
->
ty≥
 =
T_REAL
) {

1680 i‡(
s1
->
u
.
ªÆ
 < 
i
) {

1681 
off£t
;

1683 
	`COPY_SHORT
(&
off£t
, 
pc
);

1684 
pc
 -
off£t
;

1685 } 
pc
 += 2;

1686 } 
	`îr‹
("Right side of < isáÇumber,Üeft side isÇot.\n");

1687 
	}
}

1689 #ifde‡
LPC_TO_C


1691 
ˇŒ_¥ogøm
 
	$P2
(
¥ogøm_t
 *, 
¥og
, 
POINTER_INT
, 
off£t
) {

1692 i‡(
¥og
->
¥ogøm_size
)

1693 
	`evÆ_ö°ru˘i⁄
(
¥og
->
¥ogøm
 + 
off£t
);

1695 
	`DEBUG_CHECK
(!
off£t
, "Null functionÖointer in jump_table.\n");

1697 –(*Ë
	`PROT
(()ËË
off£t


1700 
	}
}

1703 #ifde‡
DEBUG_MACRO


1704 
show_Õc_löe
 
	$P2
(*, 
f
, , 
l
) {

1705 
FILE
 *
Â
 = 0;

1706 *
‚
 = 0;

1707 
œ°löe
, 
off£t
;

1708 
buf
[32768], *
p
;

1709 
n
;

1710 
dú
;

1711 *
q
;

1713 i‡(
‚
 =
f
 && 
l
 =
œ°löe
) ;

1714 
	`¥ötf
("LPC: %s:%i\n", 
f
, 
l
);

1715 i‡(!(
debug_Àvñ
 & 
DBG_LPC_löe
)) {

1716 
‚
 = 
f
;

1717 
œ°löe
 = 
l
;

1721 i‡(
‚
 !
f
) {

1722 i‡(
Â
Ë
	`f˛o£
(fp);

1723 
Â
 = 
	`f›í
(
f
, "r");

1724 i‡(!
Â
Ë
baû_h¨d
;

1725 
‚
 = 
f
;

1726 
œ°löe
 = 1;

1727 
off£t
 = 0;

1728 
n
 = 
	`‰ód
(
buf
, 1, 32767, 
Â
);

1729 
p
 = 
buf
;

1730 
buf
[
n
] = 0;

1733 
dú
 = (
œ°löe
 < 
l
 ? 1 : -1);

1734 
œ°löe
 - 
l
 != 0) {

1735 
p
 >
buf
 && *p && *p != '\n') {

1736 
p
 +
dú
;

1739 i‡(
p
 < 
buf
 || !*p) {

1740 i‡(
dú
 == -1) {

1741 i‡(
off£t
 =0Ë
baû_h¨d
;

1742 
n
 = 32767;

1743 i‡(
n
 > 
off£t
)Ç = offset;

1745 
n
 = 32767;

1747 
off£t
 +
dú
 * 
n
;

1748 i‡(
	`f£ek
(
Â
, 
off£t
, 
SEEK_SET
Ë=-1Ë
baû_h¨d
;

1749 
n
 = 
	`‰ód
(
buf
, 1,Ç, 
Â
);

1750 i‡(
n
 <0Ë
baû_h¨d
;

1751 
buf
[
n
] = 0;

1752 
p
 = (
dú
 =1 ? &
buf
[
n
-1] : buf);

1754 
p
 +
dú
;

1755 
œ°löe
 +
dú
;

1758 i‡(
dú
 == -1) {

1759 *
p
 != '\n') {

1760 
p
--;

1761 i‡(
p
 < 
buf
) {

1762 i‡(
off£t
 =0Ë{ 
p
++; ; }

1763 
n
 = 32767;

1764 i‡(
n
 > 
off£t
)Ç = offset;

1765 
off£t
 -
n
;

1766 i‡(
	`f£ek
(
Â
, 
off£t
, 
SEEK_SET
Ë=-1Ë
baû_h¨d
;

1767 
n
 = 
	`‰ód
(
buf
, 1, 32767, 
Â
);

1768 i‡(
n
 =-1Ë
baû_h¨d
;

1769 
buf
[
n
] = 0;

1770 
p
 = &
buf
[
n
-1];

1774 
q
 = 
p
;

1776 *
q
) {

1777 
	`putch¨
(*
q
);

1778 i‡(*
q
++ == '\n') ;

1780 
off£t
 += 32767;

1781 i‡(
	`f£ek
(
Â
, 
off£t
, 
SEEK_SET
Ë=-1Ë
baû_h¨d
;

1782 
n
 = 
	`‰ód
(
buf
, 1, 32767, 
Â
);

1783 i‡(
n
 =-1Ë
baû_h¨d
;

1784 
buf
[
n
] = 0;

1785 
p
 = 
buf
;

1789 
baû_h¨d
:

1790 
‚
 = 0;

1792 
	}
}

1805 #ifde‡
TRACE_CODE


1806 
	g¥evious_ö°ru˘i⁄
[60];

1807 
	g°ack_size
[60];

1808 *
	g¥evious_pc
[60];

1809 
	gœ°
;

1813 
evÆ_ö°ru˘i⁄
 
	$P1
(*, 
p
)

1815 #ifde‡
DEBUG


1816 
num_¨g
;

1818 
i
, 
n
;

1819 
ªÆ
;

1820 
svÆue_t
 *
lvÆ
;

1821 
ö°ru˘i⁄
;

1822 #i‡
	`deföed
(
TRACE_CODE
Ë|| deföed(
TRACE
Ë|| deföed(
OPCPROF
Ë|| deföed(
OPCPROF_2D
)

1823 
ªÆ_ö°ru˘i⁄
;

1825 
off£t
;

1826 
func_t
 *
€fun_èbÀ
 = 
efun_èbÀ
 - 
BASE
 + 
ONEARG_MAX
;

1827 #i‚de‡
DEBUG


1828 
func_t
 *
o€fun_èbÀ
 = 
efun_èbÀ
 - 
BASE
;

1830 
ö°r_t
 *
ö°rs2
 = 
ö°rs
 + 
ONEARG_MAX
;

1832 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_°ack
);

1835 
c•
->
‰ameköd
 |
FRAME_EXTERNAL
;

1836 
pc
 = 
p
;

1838 #ifde‡
DEBUG_MACRO


1839 i‡(
debug_Àvñ
 & 
DBG_LPC
) {

1840 *
f
;

1841 
l
;

1843 
	`gë_löe_numbî_öfo
(&
f
, &
l
);

1844 
	`show_Õc_löe
(
f
, 
l
);

1847 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

1848 #i‡
	`deföed
(
TRACE_CODE
Ë|| deföed(
TRACE
Ë|| deföed(
OPCPROF
Ë|| deföed(
OPCPROF_2D
)

1849 i‡(
ö°ru˘i⁄
 >
F_EFUN0
 && in°ru˘i⁄ <
F_EFUNV
)

1850 
ªÆ_ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
Ë+ 
ONEARG_MAX
;

1852 
ªÆ_ö°ru˘i⁄
 = 
ö°ru˘i⁄
;

1853 #ifde‡
TRACE_CODE


1854 
¥evious_ö°ru˘i⁄
[
œ°
] = 
ªÆ_ö°ru˘i⁄
;

1855 
¥evious_pc
[
œ°
] = 
pc
 - 1;

1856 
°ack_size
[
œ°
] = 
•
 - 
Â
 - 
c•
->
num_loˇl_v¨übÀs
;

1857 
œ°
 = (œ° + 1Ë% ( 
¥evious_ö°ru˘i⁄
 / ());

1859 #ifde‡
TRACE


1860 i‡(
	`TRACEP
(
TRACE_EXEC
)) {

1861 
	`do_åa˚
("Exe¯", 
	`quîy_ö°r_«me
(
ªÆ_ö°ru˘i⁄
), "\n");

1864 #ifde‡
OPCPROF


1865 i‡(
ªÆ_ö°ru˘i⁄
 < 
BASE
)

1866 
›c_e›î
[
ªÆ_ö°ru˘i⁄
]++;

1868 
›c_efun
[
ªÆ_ö°ru˘i⁄
-
BASE
].
cou¡
++;

1870 #ifde‡
OPCPROF_2D


1871 i‡(
ªÆ_ö°ru˘i⁄
 < 
BASE
) {

1872 i‡(
œ°_e›
Ë
›c_e›î_2d
[œ°_e›][
ªÆ_ö°ru˘i⁄
]++;

1873 
œ°_e›
 = 
ªÆ_ö°ru˘i⁄
;

1875 i‡(
œ°_e›
Ë
›c_e›î_2d
[œ°_e›][
BASE
]++;

1876 
œ°_e›
 = 
BASE
;

1880 i‡(!--
evÆ_co°
) {

1881 
	`debug_mesßge
("object /%s:Éval_costÅoo big %d\n",

1882 
cuºít_obje˘
->
«me
, 
max_co°
);

1883 
evÆ_co°
 = 
max_co°
;

1884 
max_evÆ_îr‹
 = 1;

1885 
	`îr‹
("TooÜongÉvaluation. Executionáborted.\n");

1893 
ö°ru˘i⁄
) {

1894 
F_PUSH
:

1895 
n
 = 
	`EXTRACT_UCHAR
(
pc
++);

1896 
n
--) {

1897 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

1898 
i
 & 
PUSH_WHAT
) {

1899 
PUSH_STRING
:

1900 
	`DEBUG_CHECK1
((
i
 & 
PUSH_MASK
Ë>
cuºít_¥og
->
num_°rögs
,

1902 
i
 & 
PUSH_MASK
);

1903 
	`push_sh¨ed_°rög
(
cuºít_¥og
->
°rögs
[
i
 & 
PUSH_MASK
]);

1905 
PUSH_LOCAL
:

1906 
lvÆ
 = 
Â
 + (
i
 & 
PUSH_MASK
);

1907 
	`DEBUG_CHECK
((
Â
 - 
lvÆ
Ë>
c•
->
num_loˇl_v¨übÀs
,

1909 i‡((
lvÆ
->
ty≥
 =
T_OBJECT
Ë&& (lvÆ->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

1910 
	`assign_svÆue
(
lvÆ
, &
c⁄°0u
);

1911 
	`push_svÆue
(
lvÆ
);

1913 
PUSH_GLOBAL
:

1914 
lvÆ
 = 
	`föd_vÆue
(()((
i
 & 
PUSH_MASK
Ë+ 
v¨übÀ_ödex_off£t
));

1915 i‡((
lvÆ
->
ty≥
 =
T_OBJECT
Ë&& (lvÆ->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

1916 
	`assign_svÆue
(
lvÆ
, &
c⁄°0u
);

1917 
	`push_svÆue
(
lvÆ
);

1919 
PUSH_NUMBER
:

1920 
	`push_numbî
(
i
 & 
PUSH_MASK
);

1925 
F_INC
:

1926 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

1928 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

1929 
lvÆ
->
ty≥
) {

1930 
T_NUMBER
:

1931 
lvÆ
->
u
.
numbî
++;

1933 
T_REAL
:

1934 
lvÆ
->
u
.
ªÆ
++;

1936 
T_LVALUE_BYTE
:

1937 i‡(
globÆ_lvÆue_byã
.
subty≥
 == 0 &&

1938 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 == ()255)

1939 
	`îr‹
("Strings cannot contain 0 bytes.\n");

1940 ++*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
;

1943 
	`îr‹
("++ ofÇon-numericárgument\n");

1946 
F_WHILE_DEC
:

1948 
svÆue_t
 *
s
;

1950 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

1951 i‡(
s
->
ty≥
 =
T_NUMBER
) {

1952 
i
 = 
s
->
u
.
numbî
--;

1953 } i‡(
s
->
ty≥
 =
T_REAL
) {

1954 
i
 = 
s
->
u
.
ªÆ
--;

1956 
	`îr‹
("-- ofÇon-numericárgument\n");

1958 i‡(
i
) {

1959 
	`COPY_SHORT
(&
off£t
, 
pc
);

1960 
pc
 -
off£t
;

1962 
pc
 += 2;

1966 
F_LOCAL_LVALUE
:

1967 
STACK_INC
;

1968 
•
->
ty≥
 = 
T_LVALUE
;

1969 
•
->
u
.
lvÆue
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

1971 #ifde‡
REF_RESERVED_WORD


1972 
F_MAKE_REF
:

1974 
ªf_t
 *
ªf
;

1975 
›
 = 
	`EXTRACT_UCHAR
(
pc
++);

1980 
ªf
 = 
	`make_ªf
();

1981 
ªf
->
lvÆue
 = 
•
->
u
.lvalue;

1982 i‡(
›
 !
F_GLOBAL_LVALUE
 && o∞!
F_LOCAL_LVALUE
 && o∞!
F_REF_LVALUE
) {

1983 
ªf
->
sv
.
ty≥
 = 
lv_ow√r_ty≥
;

1984 
ªf
->
sv
.
subty≥
 = 
STRING_MALLOC
;

1985 i‡(
lv_ow√r_ty≥
 =
T_STRING
) {

1986 
ªf
->
sv
.
u
.
°rög
 = (*)
lv_ow√r
;

1987 
	`INC_COUNTED_REF
(
lv_ow√r
);

1988 
	`ADD_STRING
(
	`MSTR_SIZE
(
lv_ow√r
));

1989 
	`NDBG
(
	`BLOCK
(
lv_ow√r
));

1991 
ªf
->
sv
.
u
.
ª„d
 = 
lv_ow√r
;

1992 
lv_ow√r
->
ªf
++;

1993 i‡(
lv_ow√r_ty≥
 =
T_MAPPING
)

1994 ((
m≠pög_t
 *)
lv_ow√r
)->
cou¡
 |
MAP_LOCKED
;

1997 
ªf
->
sv
.
ty≥
 = 
T_NUMBER
;

1998 
•
->
ty≥
 = 
T_REF
;

1999 
•
->
u
.
ªf
 =Ñef;

2002 
F_KILL_REFS
:

2004 
num
 = 
	`EXTRACT_UCHAR
(
pc
++);

2006 
num
--)

2007 
	`kûl_ªf
(
globÆ_ªf_li°
);

2010 
F_REF
:

2012 
svÆue_t
 *
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2013 
svÆue_t
 *
lvÆ
;

2015 i‡(
s
->
ty≥
 =
T_REF
) {

2016 
lvÆ
 = 
s
->
u
.
ªf
->
lvÆue
;

2017 i‡(!
lvÆ
)

2018 
	`îr‹
("Reference is invalid.\n");

2020 i‡(
lvÆ
->
ty≥
 =
T_LVALUE_BYTE
) {

2021 
	`push_numbî
(*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
);

2025 
	`îr‹
("Non-reference valueÖassedásÑeferenceárgument.\n");

2028 i‡(
lvÆ
->
ty≥
 =
T_OBJECT
 && (lvÆ->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

2029 
	`assign_svÆue
(
lvÆ
, &
c⁄°0u
);

2030 
	`push_svÆue
(
lvÆ
);

2034 
F_REF_LVALUE
:

2036 
svÆue_t
 *
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2038 i‡(
s
->
ty≥
 =
T_REF
) {

2039 i‡(
s
->
u
.
ªf
->
lvÆue
) {

2040 
STACK_INC
;

2041 
•
->
ty≥
 = 
T_LVALUE
;

2042 
•
->
u
.
lvÆue
 = 
s
->u.
ªf
->lvalue;

2044 
	`îr‹
("Reference is invalid.\n");

2046 
	`îr‹
("Non-reference valueÖassedásÑeferenceárgument.\n");

2050 
F_SHORT_INT
:

2052 
s
;

2054 
	`LOAD_SHORT
(
s
, 
pc
);

2055 
	`push_numbî
(
s
);

2058 
F_NUMBER
:

2059 
	`LOAD_INT
(
i
, 
pc
);

2060 
	`push_numbî
(
i
);

2062 
F_REAL
:

2063 
	`LOAD_FLOAT
(
ªÆ
, 
pc
);

2064 
	`push_ªÆ
(
ªÆ
);

2066 
F_BYTE
:

2067 
	`push_numbî
(
	`EXTRACT_UCHAR
(
pc
++));

2069 
F_NBYTE
:

2070 
	`push_numbî
(-(()
	`EXTRACT_UCHAR
(
pc
++)));

2072 #ifde‡
F_JUMP_WHEN_NON_ZERO


2073 
F_JUMP_WHEN_NON_ZERO
:

2074 i‡((
i
 = (
•
->
ty≥
 =
T_NUMBER
)Ë&& (•->
u
.
numbî
 == 0))

2075 
pc
 += 2;

2077 
	`COPY_SHORT
(&
off£t
, 
pc
);

2078 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

2080 i‡(
i
) {

2081 
•
--;

2084 
	`p›_°ack
();

2088 
F_BRANCH
:

2089 
	`COPY_SHORT
(&
off£t
, 
pc
);

2090 
pc
 +
off£t
;

2092 
F_BBRANCH
:

2093 
	`COPY_SHORT
(&
off£t
, 
pc
);

2094 
pc
 -
off£t
;

2096 
F_BRANCH_NE
:

2097 
	`f_√
();

2098 i‡((
•
--)->
u
.
numbî
) {

2099 
	`COPY_SHORT
(&
off£t
, 
pc
);

2100 
pc
 +
off£t
;

2102 
pc
 += 2;

2104 
F_BRANCH_GE
:

2105 
	`f_ge
();

2106 i‡((
•
--)->
u
.
numbî
) {

2107 
	`COPY_SHORT
(&
off£t
, 
pc
);

2108 
pc
 +
off£t
;

2110 
pc
 += 2;

2112 
F_BRANCH_LE
:

2113 
	`f_À
();

2114 i‡((
•
--)->
u
.
numbî
) {

2115 
	`COPY_SHORT
(&
off£t
, 
pc
);

2116 
pc
 +
off£t
;

2118 
pc
 += 2;

2120 
F_BRANCH_EQ
:

2121 
	`f_eq
();

2122 i‡((
•
--)->
u
.
numbî
) {

2123 
	`COPY_SHORT
(&
off£t
, 
pc
);

2124 
pc
 +
off£t
;

2126 
pc
 += 2;

2128 
F_BBRANCH_LT
:

2129 
	`f_…
();

2130 i‡((
•
--)->
u
.
numbî
) {

2131 
	`COPY_SHORT
(&
off£t
, 
pc
);

2132 
pc
 -
off£t
;

2134 
pc
 += 2;

2136 
F_BRANCH_WHEN_ZERO
:

2137 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2138 i‡(!((
•
--)->
u
.
numbî
)) {

2139 
	`COPY_SHORT
(&
off£t
, 
pc
);

2140 
pc
 +
off£t
;

2143 } 
	`p›_°ack
();

2144 
pc
 += 2;

2146 
F_BRANCH_WHEN_NON_ZERO
:

2147 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2148 i‡(!((
•
--)->
u
.
numbî
)) {

2149 
pc
 += 2;

2152 } 
	`p›_°ack
();

2153 
	`COPY_SHORT
(&
off£t
, 
pc
);

2154 
pc
 +
off£t
;

2156 
F_BBRANCH_WHEN_ZERO
:

2157 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2158 i‡(!((
•
--)->
u
.
numbî
)) {

2159 
	`COPY_SHORT
(&
off£t
, 
pc
);

2160 
pc
 -
off£t
;

2163 } 
	`p›_°ack
();

2164 
pc
 += 2;

2166 
F_BBRANCH_WHEN_NON_ZERO
:

2167 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2168 i‡(!((
•
--)->
u
.
numbî
)) {

2169 
pc
 += 2;

2172 } 
	`p›_°ack
();

2173 
	`COPY_SHORT
(&
off£t
, 
pc
);

2174 
pc
 -
off£t
;

2176 
F_LOR
:

2178 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2179 i‡(!
•
->
u
.
numbî
) {

2180 
pc
 += 2;

2181 
•
--;

2185 
	`COPY_SHORT
(&
off£t
, 
pc
);

2186 
pc
 +
off£t
;

2188 
F_LAND
:

2190 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2191 i‡(!
•
->
u
.
numbî
) {

2192 
	`COPY_SHORT
(&
off£t
, 
pc
);

2193 
pc
 +
off£t
;

2196 
•
--;

2197 } 
	`p›_°ack
();

2198 
pc
 += 2;

2200 
F_LOOP_INCR
:

2203 
svÆue_t
 *
s
;

2205 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2206 i‡(
s
->
ty≥
 =
T_NUMBER
) {

2207 
s
->
u
.
numbî
++;

2208 } i‡(
s
->
ty≥
 =
T_REAL
) {

2209 
s
->
u
.
ªÆ
++;

2211 
	`îr‹
("++ ofÇon-numericárgument\n");

2214 i‡(*
pc
 =
F_LOOP_COND_LOCAL
) {

2215 
pc
++;

2216 
	`do_lo›_c⁄d_loˇl
();

2217 } i‡(*
pc
 =
F_LOOP_COND_NUMBER
) {

2218 
pc
++;

2219 
	`do_lo›_c⁄d_numbî
();

2222 
F_LOOP_COND_LOCAL
:

2223 
	`do_lo›_c⁄d_loˇl
();

2225 
F_LOOP_COND_NUMBER
:

2226 
	`do_lo›_c⁄d_numbî
();

2228 
F_TRANSFER_LOCAL
:

2230 
svÆue_t
 *
s
;

2232 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2233 
	`DEBUG_CHECK
((
Â
-
s
Ë>
c•
->
num_loˇl_v¨übÀs
,

2235 i‡((
s
->
ty≥
 =
T_OBJECT
Ë&& (s->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

2236 
	`assign_svÆue
(
s
, &
c⁄°0u
);

2238 
STACK_INC
;

2239 *
•
 = *
s
;

2243 
s
->
ty≥
 |
T_FREED
;

2246 
F_LOCAL
:

2248 
svÆue_t
 *
s
;

2250 
s
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2251 
	`DEBUG_CHECK
((
Â
-
s
Ë>
c•
->
num_loˇl_v¨übÀs
,

2258 i‡((
s
->
ty≥
 =
T_OBJECT
Ë&& (s->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

2259 
	`assign_svÆue
(
s
, &
c⁄°0u
);

2260 
	`push_svÆue
(
s
);

2263 
F_LT
:

2264 
	`f_…
();

2266 
F_ADD
:

2268 
•
->
ty≥
) {

2269 #i‚de‡
NO_BUFFER_TYPE


2270 
T_BUFFER
:

2272 i‡(!((
•
-1)->
ty≥
 =
T_BUFFER
)) {

2273 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s.\n",

2274 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

2276 
buf„r_t
 *
b
;

2278 
b
 = 
	`Æloˇã_buf„r
(
•
->
u
.
buf
->
size
 + (sp - 1)->u.buf->size);

2279 
	`mem˝y
(
b
->
ôem
, (
•
 - 1)->
u
.
buf
->ôem, (• - 1)->u.buf->
size
);

2280 
	`mem˝y
(
b
->
ôem
 + (
•
 - 1)->
u
.
buf
->
size
, sp->u.buf->item,

2281 
•
->
u
.
buf
->
size
);

2282 
	`‰ì_buf„r
((
•
--)->
u
.
buf
);

2283 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2284 
•
->
u
.
buf
 = 
b
;

2289 
T_NUMBER
:

2291 (--
•
)->
ty≥
) {

2292 
T_NUMBER
:

2293 
•
->
u
.
numbî
 += (sp+1)->u.number;

2294 
•
->
subty≥
 = 0;

2296 
T_REAL
:

2297 
•
->
u
.
ªÆ
 +(•+1)->u.
numbî
;

2299 
T_STRING
:

2301 
buff
[20];

2303 
	`•rötf
(
buff
, "%d", (
•
+1)->
u
.
numbî
);

2304 
	`EXTEND_SVALUE_STRING
(
•
, 
buff
, "f_add: 2");

2308 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s.\n",

2309 
	`ty≥_«me
(
•
->
ty≥
),Åype_name((sp+1)->type));

2313 
T_REAL
:

2315 (--
•
)->
ty≥
) {

2316 
T_NUMBER
:

2317 
•
->
ty≥
 = 
T_REAL
;

2318 
•
->
u
.
ªÆ
 = sp->u.
numbî
 + (sp+1)->u.real;

2320 
T_REAL
:

2321 
•
->
u
.
ªÆ
 += (sp+1)->u.real;

2323 
T_STRING
:

2325 
buff
[40];

2327 
	`•rötf
(
buff
, "%f", (
•
+1)->
u
.
ªÆ
);

2328 
	`EXTEND_SVALUE_STRING
(
•
, 
buff
, "f_add: 2");

2332 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

2333 
	`ty≥_«me
(
•
->
ty≥
),Åype_name((sp+1)->type));

2337 
T_ARRAY
:

2339 i‡(!((
•
-1)->
ty≥
 =
T_ARRAY
)) {

2340 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

2341 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

2344 (
•
-1)->
u
.
¨r
 = 
	`add_¨øy
((sp - 1)->u.arr, sp->u.arr);

2345 
•
--;

2349 
T_MAPPING
:

2351 i‡((
•
-1)->
ty≥
 =
T_MAPPING
) {

2352 
m≠pög_t
 *
m≠
;

2354 
m≠
 = 
	`add_m≠pög
((
•
 - 1)->
u
.map, sp->u.map);

2355 
	`‰ì_m≠pög
((
•
--)->
u
.
m≠
);

2356 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

2357 
•
->
u
.
m≠
 = map;

2360 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

2361 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

2363 
T_STRING
:

2365 (
•
-1)->
ty≥
) {

2366 
T_NUMBER
:

2368 
buff
[20];

2370 
	`•rötf
(
buff
, "%d", (
•
-1)->
u
.
numbî
);

2371 
	`SVALUE_STRING_ADD_LEFT
(
buff
, "f_add: 3");

2374 
T_REAL
:

2376 
buff
[40];

2378 
	`•rötf
(
buff
, "%f", (
•
 - 1)->
u
.
ªÆ
);

2379 
	`SVALUE_STRING_ADD_LEFT
(
buff
, "f_add: 3");

2382 
T_STRING
:

2384 
	`SVALUE_STRING_JOIN
(
•
-1, sp, "f_add: 1");

2385 
•
--;

2389 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s\n",

2390 
	`ty≥_«me
((
•
 - 1)->
ty≥
),Åype_name(sp->type));

2396 
	`îr‹
("BadÅypeárgumentÅo +. Had %sánd %s.\n",

2397 
	`ty≥_«me
((
•
-1)->
ty≥
),Åype_name(sp->type));

2401 
F_VOID_ADD_EQ
:

2402 
F_ADD_EQ
:

2403 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

2405 
lvÆ
 = 
•
->
u
.
lvÆue
;

2406 
•
--;

2407 
lvÆ
->
ty≥
) {

2408 
T_STRING
:

2409 i‡(
•
->
ty≥
 =
T_STRING
) {

2410 
	`SVALUE_STRING_JOIN
(
lvÆ
, 
•
, "f_add_eq: 1");

2411 } i‡(
•
->
ty≥
 =
T_NUMBER
) {

2412 
buff
[20];

2414 
	`•rötf
(
buff
, "%d", 
•
->
u
.
numbî
);

2415 
	`EXTEND_SVALUE_STRING
(
lvÆ
, 
buff
, "f_add_eq: 2");

2416 } i‡(
•
->
ty≥
 =
T_REAL
) {

2417 
buff
[40];

2419 
	`•rötf
(
buff
, "%f", 
•
->
u
.
ªÆ
);

2420 
	`EXTEND_SVALUE_STRING
(
lvÆ
, 
buff
, "f_add_eq: 2");

2422 
	`bad_¨gumít
(
•
, 
T_STRING
 | 
T_NUMBER
 | 
T_REAL
, 2, 
ö°ru˘i⁄
);

2425 
T_NUMBER
:

2426 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2427 
lvÆ
->
u
.
numbî
 +
•
->u.number;

2428 
lvÆ
->
subty≥
 = 0;

2430 } i‡(
•
->
ty≥
 =
T_REAL
) {

2431 
lvÆ
->
u
.
numbî
 +
•
->u.
ªÆ
;

2432 
lvÆ
->
subty≥
 = 0;

2435 
	`îr‹
("Left hand side of += isáÇumber (or zero);Ñight side isÇotáÇumber.\n");

2438 
T_REAL
:

2439 i‡(
•
->
ty≥
 =
T_NUMBER
) {

2440 
lvÆ
->
u
.
ªÆ
 +
•
->u.
numbî
;

2442 } i‡(
•
->
ty≥
 =
T_REAL
) {

2443 
lvÆ
->
u
.
ªÆ
 +
•
->u.real;

2446 
	`îr‹
("Left hand side of += isáÇumber (or zero);Ñight side isÇotáÇumber.\n");

2449 #i‚de‡
NO_BUFFER_TYPE


2450 
T_BUFFER
:

2451 i‡(
•
->
ty≥
 !
T_BUFFER
) {

2452 
	`bad_¨gumít
(
•
, 
T_BUFFER
, 2, 
ö°ru˘i⁄
);

2454 
buf„r_t
 *
b
;

2456 
b
 = 
	`Æloˇã_buf„r
(
lvÆ
->
u
.
buf
->
size
 + 
•
->u.buf->size);

2457 
	`mem˝y
(
b
->
ôem
, 
lvÆ
->
u
.
buf
->ôem,ÜvÆ->u.buf->
size
);

2458 
	`mem˝y
(
b
->
ôem
 + 
lvÆ
->
u
.
buf
->
size
, 
•
->u.buf->item,

2459 
•
->
u
.
buf
->
size
);

2460 
	`‰ì_buf„r
(
•
->
u
.
buf
);

2461 
	`‰ì_buf„r
(
lvÆ
->
u
.
buf
);

2462 
lvÆ
->
u
.
buf
 = 
b
;

2466 
T_ARRAY
:

2467 i‡(
•
->
ty≥
 !
T_ARRAY
)

2468 
	`bad_¨gumít
(
•
, 
T_ARRAY
, 2, 
ö°ru˘i⁄
);

2471 
lvÆ
->
u
.
¨r
 = 
	`add_¨øy
÷vÆ->u.¨r, 
•
->u.arr);

2474 
T_MAPPING
:

2475 i‡(
•
->
ty≥
 !
T_MAPPING
)

2476 
	`bad_¨gumít
(
•
, 
T_MAPPING
, 2, 
ö°ru˘i⁄
);

2478 
	`abs‹b_m≠pög
(
lvÆ
->
u
.
m≠
, 
•
->u.map);

2479 
	`‰ì_m≠pög
(
•
->
u
.
m≠
);

2483 
T_LVALUE_BYTE
:

2485 
c
;

2487 i‡(
•
->
ty≥
 !
T_NUMBER
)

2488 
	`îr‹
("BadÑightÅypeÅo += of charÜvalue.\n");

2490 
c
 = *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 + 
•
->u.
numbî
;

2492 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

2493 
	`îr‹
("Strings cannot contain 0 bytes.\n");

2494 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

2498 
	`bad_¨g
(1, 
ö°ru˘i⁄
);

2501 i‡(
ö°ru˘i⁄
 =
F_ADD_EQ
) {

2502 
	`assign_svÆue_no_‰ì
(
•
, 
lvÆ
);

2508 
•
--;

2511 
F_AND
:

2512 
	`f_™d
();

2514 
F_AND_EQ
:

2515 
	`f_™d_eq
();

2517 
F_FUNCTION_CONSTRUCTOR
:

2518 
	`f_fun˘i⁄_c⁄°ru˘‹
();

2521 
F_FOREACH
:

2523 
Êags
 = 
	`EXTRACT_UCHAR
(
pc
++);

2525 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
++);

2526 i‡(
Êags
 & 
FOREACH_MAPPING
) {

2527 
	`CHECK_TYPES
(
•
, 
T_MAPPING
, 2, 
F_FOREACH
);

2529 
	`push_ª„d_¨øy
(
	`m≠pög_ödi˚s
(
•
->
u
.
m≠
));

2531 
STACK_INC
;

2532 
•
->
ty≥
 = 
T_NUMBER
;

2533 
•
->
u
.
lvÆue
 = (•-1)->u.
¨r
->
ôem
;

2534 
•
->
subty≥
 = (•-1)->
u
.
¨r
->
size
;

2536 
STACK_INC
;

2537 
•
->
ty≥
 = 
T_LVALUE
;

2538 i‡(
Êags
 & 
FOREACH_LEFT_GLOBAL
) {

2539 
•
->
u
.
lvÆue
 = 
	`föd_vÆue
(()(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
));

2541 
•
->
u
.
lvÆue
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2544 i‡(
•
->
ty≥
 =
T_STRING
) {

2545 
STACK_INC
;

2546 
•
->
ty≥
 = 
T_NUMBER
;

2547 
•
->
u
.
lvÆue_byã
 = (*)((•-1)->u.
°rög
);

2548 
•
->
subty≥
 = 
	`SVALUE_STRLEN
(sp - 1);

2550 
	`CHECK_TYPES
(
•
, 
T_ARRAY
, 2, 
F_FOREACH
);

2552 
STACK_INC
;

2553 
•
->
ty≥
 = 
T_NUMBER
;

2554 
•
->
u
.
lvÆue
 = (•-1)->u.
¨r
->
ôem
;

2555 
•
->
subty≥
 = (•-1)->
u
.
¨r
->
size
;

2558 i‡(
Êags
 & 
FOREACH_RIGHT_GLOBAL
) {

2559 
STACK_INC
;

2560 
•
->
ty≥
 = 
T_LVALUE
;

2561 
•
->
u
.
lvÆue
 = 
	`föd_vÆue
(()(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
));

2562 } i‡(
Êags
 & 
FOREACH_REF
) {

2563 
ªf_t
 *
ªf
 = 
	`make_ªf
();

2564 
svÆue_t
 *
loc
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2567 
ªf
->
lvÆue
 = 0;

2568 
ªf
->
sv
.
ty≥
 = 
T_NUMBER
;

2569 
STACK_INC
;

2570 
•
->
ty≥
 = 
T_REF
;

2571 
•
->
u
.
ªf
 =Ñef;

2572 
	`DEBUG_CHECK
(
loc
->
ty≥
 !
T_NUMBER
 &&Üoc->ty≥ !
T_REF
, "SomehowáÑeference in foreachácquiredá value before coming into scope");

2573 
loc
->
ty≥
 = 
T_REF
;

2574 
loc
->
u
.
ªf
 =Ñef;

2575 
ªf
->ref++;

2577 
STACK_INC
;

2578 
•
->
ty≥
 = 
T_LVALUE
;

2579 
•
->
u
.
lvÆue
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2583 
F_NEXT_FOREACH
:

2584 i‡((
•
-1)->
ty≥
 =
T_LVALUE
) {

2586 i‡((
•
-2)->
subty≥
--) {

2587 
svÆue_t
 *
key
 = (
•
-2)->
u
.
lvÆue
++;

2588 
svÆue_t
 *
vÆue
 = 
	`föd_ö_m≠pög
((
•
-4)->
u
.
m≠
, 
key
);

2590 
	`assign_svÆue
((
•
-1)->
u
.
lvÆue
, 
key
);

2591 i‡(
•
->
ty≥
 =
T_REF
) {

2592 i‡(
vÆue
 =&
c⁄°0u
)

2593 
•
->
u
.
ªf
->
lvÆue
 = 0;

2595 
•
->
u
.
ªf
->
lvÆue
 = 
vÆue
;

2597 
	`assign_svÆue
(
•
->
u
.
lvÆue
, 
vÆue
);

2598 
	`COPY_SHORT
(&
off£t
, 
pc
);

2599 
pc
 -
off£t
;

2604 i‡((
•
-1)->
subty≥
--) {

2605 i‡((
•
-2)->
ty≥
 =
T_STRING
) {

2606 i‡(
•
->
ty≥
 =
T_REF
) {

2607 
•
->
u
.
ªf
->
lvÆue
 = &
globÆ_lvÆue_byã
;

2608 
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = (*)((
•
-1)->u.lvalue_byte++);

2610 
	`‰ì_svÆue
(
•
->
u
.
lvÆue
, "foreach-string");

2611 
•
->
u
.
lvÆue
->
ty≥
 = 
T_NUMBER
;

2612 
•
->
u
.
lvÆue
->
subty≥
 = 0;

2613 
•
->
u
.
lvÆue
->u.
numbî
 = *((•-1)->u.
lvÆue_byã
)++;

2616 i‡(
•
->
ty≥
 =
T_REF
)

2617 
•
->
u
.
ªf
->
lvÆue
 = (sp-1)->u.lvalue++;

2619 
	`assign_svÆue
(
•
->
u
.
lvÆue
, (sp-1)->u.lvalue++);

2621 
	`COPY_SHORT
(&
off£t
, 
pc
);

2622 
pc
 -
off£t
;

2626 
pc
 += 2;

2628 
F_EXIT_FOREACH
:

2629 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
--);

2630 i‡(
•
->
ty≥
 =
T_REF
) {

2631 i‡(!(--
•
->
u
.
ªf
->ªfË&& sp->u.ªf->
lvÆue
 == 0)

2632 
	`FREE
(
•
->
u
.
ªf
);

2634 i‡((
•
-1)->
ty≥
 =
T_LVALUE
) {

2636 
•
 -= 3;

2637 
	`‰ì_¨øy
((
•
--)->
u
.
¨r
);

2638 
	`‰ì_m≠pög
((
•
--)->
u
.
m≠
);

2641 
•
 -= 2;

2642 i‡(
•
->
ty≥
 =
T_STRING
)

2643 
	`‰ì_°rög_svÆue
(
•
--);

2645 
	`‰ì_¨øy
((
•
--)->
u
.
¨r
);

2649 
F_EXPAND_VARARGS
:

2651 
svÆue_t
 *
s
, *
t
;

2652 
¨øy_t
 *
¨r
;

2654 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

2655 
s
 = 
•
 - 
i
;

2657 i‡(
s
->
ty≥
 !
T_ARRAY
)

2658 
	`îr‹
("Item beingÉxpanded with ... isÇotánárray\n");

2660 
¨r
 = 
s
->
u
.arr;

2661 
n
 = 
¨r
->
size
;

2662 
num_v¨¨gs
 +
n
 - 1;

2663 i‡(!
n
) {

2664 
t
 = 
s
;

2665 
t
 < 
•
) {

2666 *
t
 = *(t + 1);

2667 
t
++;

2669 
•
--;

2670 } i‡(
n
 == 1) {

2671 
	`assign_svÆue_no_‰ì
(
s
, &
¨r
->
ôem
[0]);

2673 
t
 = 
•
;

2674 
	`CHECK_STACK_OVERFLOW
(
n
 - 1);

2675 
•
 +
n
 - 1;

2676 
t
 > 
s
) {

2677 *(
t
 + 
n
 - 1) = *t;

2678 
t
--;

2680 
t
 = 
s
 + 
n
 - 1;

2681 i‡(
¨r
->
ªf
 == 1) {

2682 
	`mem˝y
(
s
, 
¨r
->
ôem
, 
n
 * (
svÆue_t
));

2683 
	`‰ì_em±y_¨øy
(
¨r
);

2686 
n
--)

2687 
	`assign_svÆue_no_‰ì
(
t
--, &
¨r
->
ôem
[
n
]);

2690 
	`‰ì_¨øy
(
¨r
);

2694 
F_NEW_CLASS
:

2696 
¨øy_t
 *
˛
;

2698 
˛
 = 
	`Æloˇã_˛ass
(&
cuºít_¥og
->
˛as£s
[
	`EXTRACT_UCHAR
(
pc
++)], 1);

2699 
	`push_ª„d_˛ass
(
˛
);

2702 
F_NEW_EMPTY_CLASS
:

2704 
¨øy_t
 *
˛
;

2706 
˛
 = 
	`Æloˇã_˛ass
(&
cuºít_¥og
->
˛as£s
[
	`EXTRACT_UCHAR
(
pc
++)], 0);

2707 
	`push_ª„d_˛ass
(
˛
);

2710 
F_AGGREGATE
:

2712 
¨øy_t
 *
v
;

2714 
	`LOAD_SHORT
(
off£t
, 
pc
);

2715 
off£t
 +
num_v¨¨gs
;

2716 
num_v¨¨gs
 = 0;

2717 
v
 = 
	`Æloˇã_em±y_¨øy
((Ë
off£t
);

2721 
off£t
--)

2722 
v
->
ôem
[
off£t
] = *
•
--;

2723 
	`push_ª„d_¨øy
(
v
);

2726 
F_AGGREGATE_ASSOC
:

2728 
m≠pög_t
 *
m
;

2730 
	`LOAD_SHORT
(
off£t
, 
pc
);

2732 
off£t
 +
num_v¨¨gs
;

2733 
num_v¨¨gs
 = 0;

2734 
m
 = 
	`lﬂd_m≠pög_‰om_aggªg©e
(
•
 -
off£t
, offset);

2735 
	`push_ª„d_m≠pög
(
m
);

2738 
F_ASSIGN
:

2739 #ifde‡
DEBUG


2740 i‡(
•
->
ty≥
 !
T_LVALUE
Ë
	`Áèl
("BadárgumentÅo F_ASSIGN\n");

2742 
•
->
u
.
lvÆue
->
ty≥
) {

2743 
T_LVALUE_BYTE
:

2745 
c
;

2747 i‡((
•
 - 1)->
ty≥
 !
T_NUMBER
) {

2748 
	`îr‹
("IllegalÑhsÅo charÜvalue\n");

2750 
c
 = ((
•
 - 1)->
u
.
numbî
 & 0xff);

2751 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

2752 
	`îr‹
("Strings cannot contain 0 bytes.\n");

2753 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

2758 
	`assign_svÆue
(
•
->
u
.
lvÆue
, sp - 1);

2760 
T_LVALUE_RANGE
:

2761 
	`assign_lvÆue_ønge
(
•
 - 1);

2764 
•
--;

2767 
F_VOID_ASSIGN_LOCAL
:

2768 i‡(
•
->
ty≥
 !
T_INVALID
) {

2769 
lvÆ
 = 
Â
 + 
	`EXTRACT_UCHAR
(
pc
++);

2770 
	`‰ì_svÆue
(
lvÆ
, "F_VOID_ASSIGN_LOCAL");

2771 *
lvÆ
 = *
•
--;

2773 
•
--;

2774 
pc
++;

2777 
F_VOID_ASSIGN
:

2778 #ifde‡
DEBUG


2779 i‡(
•
->
ty≥
 !
T_LVALUE
Ë
	`Áèl
("BadárgumentÅo F_VOID_ASSIGN\n");

2781 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

2782 i‡(
•
->
ty≥
 !
T_INVALID
) {

2783 
lvÆ
->
ty≥
) {

2784 
T_LVALUE_BYTE
:

2786 i‡(
•
->
ty≥
 !
T_NUMBER
) {

2787 
	`îr‹
("IllegalÑhsÅo charÜvalue\n");

2789 
c
 = (
•
--)->
u
.
numbî
 & 0xff;

2790 i‡(
globÆ_lvÆue_byã
.
subty≥
 =0 && 
c
 == '\0')

2791 
	`îr‹
("Strings cannot contain 0 bytes.\n");

2792 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 = 
c
;

2797 
T_LVALUE_RANGE
:

2799 
	`c›y_lvÆue_ønge
(
•
--);

2805 
	`‰ì_svÆue
(
lvÆ
, "F_VOID_ASSIGN : 3");

2806 *
lvÆ
 = *
•
--;

2809 } 
•
--;

2811 #ifde‡
DEBUG


2812 
F_BREAK_POINT
:

2813 
	`bªak_poöt
();

2816 
F_CALL_FUNCTION_BY_ADDRESS
:

2818 
fun˘i⁄_t
 *
fu≈
;

2820 
	`LOAD_SHORT
(
off£t
, 
pc
);

2822 
off£t
 +
fun˘i⁄_ödex_off£t
;

2829 
	`DEBUG_CHECK
(
off£t
 >
cuºít_obje˘
->
¥og
->
œ°_öhîôed
 +

2830 
cuºít_obje˘
->
¥og
->
num_fun˘i⁄s_deföed
,

2833 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
off£t
] & 
FUNC_ALIAS
) {

2834 
off£t
 = 
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[off£t] & ~
FUNC_ALIAS
;

2837 i‡(
cuºít_obje˘
->
¥og
->
fun˘i⁄_Êags
[
off£t
]

2838 & (
FUNC_PROTOTYPE
|
FUNC_UNDEFINED
)) {

2839 
	`îr‹
("Undeföed fun˘i⁄ cÆÀd: %s\n", 
	`fun˘i⁄_«me
(
cuºít_obje˘
->
¥og
, 
off£t
));

2843 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

2844 
cuºít_¥og
 = 
cuºít_obje˘
->
¥og
;

2846 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

2851 
c•
->
num_loˇl_v¨übÀs
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

2852 
num_v¨¨gs
 = 0;

2853 
fu≈
 = 
	`£tup_√w_‰ame
(
off£t
);

2854 
c•
->
pc
 =Öc;

2856 #ifde‡
LPC_TO_C


2857 i‡(
cuºít_¥og
->
¥ogøm_size
) {

2859 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
fu≈
->
addªss
;

2860 #ifde‡
LPC_TO_C


2862 
	`DEBUG_CHECK
(!(
fu≈
->
addªss
),

2865 –(*Ë
	`PROT
(()ËË(
fu≈
->
addªss
)

2871 
F_CALL_INHERITED
:

2873 
öhîô_t
 *
ù
 = 
cuºít_¥og
->
öhîô
 + 
	`EXTRACT_UCHAR
(
pc
++);

2874 
¥ogøm_t
 *
ãmp_¥og
 = 
ù
->
¥og
;

2875 
fun˘i⁄_t
 *
fu≈
;

2877 
	`LOAD_SHORT
(
off£t
, 
pc
);

2879 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
);

2880 
cuºít_¥og
 = 
ãmp_¥og
;

2882 
ˇŒî_ty≥
 = 
ORIGIN_LOCAL
;

2884 
c•
->
num_loˇl_v¨übÀs
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

2885 
num_v¨¨gs
 = 0;

2887 
fun˘i⁄_ödex_off£t
 +
ù
->function_index_offset;

2888 
v¨übÀ_ödex_off£t
 +
ù
->variable_index_offset;

2890 
fu≈
 = 
	`£tup_öhîôed_‰ame
(
off£t
);

2891 
c•
->
pc
 =Öc;

2892 #ifde‡
LPC_TO_C


2893 i‡(
cuºít_¥og
->
¥ogøm_size
) {

2895 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
fu≈
->
addªss
;

2896 #ifde‡
LPC_TO_C


2898 
	`DEBUG_CHECK
(!(
fu≈
->
addªss
),

2901 –(*Ë
	`PROT
(()ËË(
fu≈
->
addªss
)

2907 
F_COMPL
:

2908 i‡(
•
->
ty≥
 !
T_NUMBER
)

2909 
	`îr‹
("BadárgumentÅo ~\n");

2910 
•
->
u
.
numbî
 = ~sp->u.number;

2911 
•
->
subty≥
 = 0;

2913 
F_CONST0
:

2914 
	`push_numbî
(0);

2916 
F_CONST1
:

2917 
	`push_numbî
(1);

2919 
F_PRE_DEC
:

2920 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

2922 
lvÆ
 = 
•
->
u
.
lvÆue
;

2923 
lvÆ
->
ty≥
) {

2924 
T_NUMBER
:

2925 
•
->
ty≥
 = 
T_NUMBER
;

2926 
•
->
subty≥
 = 0;

2927 
•
->
u
.
numbî
 = --(
lvÆ
->u.number);

2929 
T_REAL
:

2930 
•
->
ty≥
 = 
T_REAL
;

2931 
•
->
u
.
ªÆ
 = --(
lvÆ
->u.real);

2933 
T_LVALUE_BYTE
:

2934 i‡(
globÆ_lvÆue_byã
.
subty≥
 == 0 &&

2935 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 == '\x1')

2936 
	`îr‹
("Strings cannot contain 0 bytes.\n");

2937 
•
->
ty≥
 = 
T_NUMBER
;

2938 
•
->
subty≥
 = 0;

2939 
•
->
u
.
numbî
 = --(*
globÆ_lvÆue_byã
.u.
lvÆue_byã
);

2942 
	`îr‹
("-- ofÇon-numericárgument\n");

2945 
F_DEC
:

2946 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

2948 
lvÆ
 = (
•
--)->
u
.
lvÆue
;

2949 
lvÆ
->
ty≥
) {

2950 
T_NUMBER
:

2951 
lvÆ
->
u
.
numbî
--;

2953 
T_REAL
:

2954 
lvÆ
->
u
.
ªÆ
--;

2956 
T_LVALUE_BYTE
:

2957 i‡(
globÆ_lvÆue_byã
.
subty≥
 == 0 &&

2958 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 == '\x1')

2959 
	`îr‹
("Strings cannot contain 0 bytes.\n");

2960 --(*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
);

2963 
	`îr‹
("-- ofÇon-numericárgument\n");

2966 
F_DIVIDE
:

2968 (
•
-1)->
ty≥
|sp->type) {

2970 
T_NUMBER
:

2972 i‡(!(
•
--)->
u
.
numbî
Ë
	`îr‹
("Division by zero\n");

2973 
•
->
u
.
numbî
 /= (sp+1)->u.number;

2977 
T_REAL
:

2979 i‡((
•
--)->
u
.
ªÆ
 =0.0Ë
	`îr‹
("Division by zero\n");

2980 
•
->
u
.
ªÆ
 /= (sp+1)->u.real;

2984 
T_NUMBER
|
T_REAL
:

2986 i‡((
•
--)->
ty≥
 =
T_NUMBER
) {

2987 i‡(!((
•
+1)->
u
.
numbî
)Ë
	`îr‹
("Division by zero\n");

2988 
•
->
u
.
ªÆ
 /(•+1)->u.
numbî
;

2990 i‡((
•
+1)->
u
.
ªÆ
 =0.0Ë
	`îr‹
("Division by 0.0\n");

2991 
•
->
ty≥
 = 
T_REAL
;

2992 
•
->
u
.
ªÆ
 = sp->u.
numbî
 / (sp+1)->u.real;

2999 i‡(!((
•
-1)->
ty≥
 & (
T_NUMBER
|
T_REAL
)))

3000 
	`bad_¨gumít
(
•
-1,
T_NUMBER
|
T_REAL
,1, 
ö°ru˘i⁄
);

3001 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
)))

3002 
	`bad_¨gumít
(
•
, 
T_NUMBER
|
T_REAL
,2, 
ö°ru˘i⁄
);

3007 
F_DIV_EQ
:

3008 
	`f_div_eq
();

3010 
F_EQ
:

3011 
	`f_eq
();

3013 
F_GE
:

3014 
	`f_ge
();

3016 
F_GT
:

3017 
	`f_gt
();

3019 
F_GLOBAL
:

3021 
svÆue_t
 *
s
;

3023 
s
 = 
	`föd_vÆue
((Ë(
	`EXTRACT_UCHAR
(
pc
++Ë+ 
v¨übÀ_ödex_off£t
));

3029 i‡((
s
->
ty≥
 =
T_OBJECT
Ë&& (s->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))

3030 
	`assign_svÆue
(
s
, &
c⁄°0u
);

3031 
	`push_svÆue
(
s
);

3034 
F_PRE_INC
:

3035 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

3037 
lvÆ
 = 
•
->
u
.
lvÆue
;

3038 
lvÆ
->
ty≥
) {

3039 
T_NUMBER
:

3040 
•
->
ty≥
 = 
T_NUMBER
;

3041 
•
->
subty≥
 = 0;

3042 
•
->
u
.
numbî
 = ++
lvÆ
->u.number;

3044 
T_REAL
:

3045 
•
->
ty≥
 = 
T_REAL
;

3046 
•
->
u
.
ªÆ
 = ++
lvÆ
->u.
numbî
;

3048 
T_LVALUE_BYTE
:

3049 i‡(
globÆ_lvÆue_byã
.
subty≥
 == 0 &&

3050 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 == ()255)

3051 
	`îr‹
("Strings cannot contain 0 bytes.\n");

3052 
•
->
ty≥
 = 
T_NUMBER
;

3053 
•
->
subty≥
 = 0;

3054 
•
->
u
.
numbî
 = ++*
globÆ_lvÆue_byã
.u.
lvÆue_byã
;

3057 
	`îr‹
("++ ofÇon-numericárgument\n");

3060 
F_MEMBER
:

3062 
¨øy_t
 *
¨r
;

3064 i‡(
•
->
ty≥
 !
T_CLASS
)

3065 
	`îr‹
("TriedÅoÅakeá member of somethingÅhat isn'tá class.\n");

3066 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

3067 
¨r
 = 
•
->
u
.arr;

3068 i‡(
i
 >
¨r
->
size
Ë
	`îr‹
("Class hasÇo corresponding member.\n");

3069 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_OBJECT
 &&

3070 (
¨r
->
ôem
[
i
].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

3071 
	`assign_svÆue
(&
¨r
->
ôem
[
i
], &
c⁄°0u
);

3073 
	`assign_svÆue_no_‰ì
(
•
, &
¨r
->
ôem
[
i
]);

3074 
	`‰ì_˛ass
(
¨r
);

3078 
F_MEMBER_LVALUE
:

3080 
¨øy_t
 *
¨r
;

3082 i‡(
•
->
ty≥
 !
T_CLASS
)

3083 
	`îr‹
("TriedÅoÅakeá member of somethingÅhat isn'tá class.\n");

3084 
i
 = 
	`EXTRACT_UCHAR
(
pc
++);

3085 
¨r
 = 
•
->
u
.arr;

3086 i‡(
i
 >
¨r
->
size
Ë
	`îr‹
("Class hasÇo corresponding member.\n");

3087 
•
->
ty≥
 = 
T_LVALUE
;

3088 
•
->
u
.
lvÆue
 = 
¨r
->
ôem
 + 
i
;

3089 #ifde‡
REF_RESERVED_WORD


3090 
lv_ow√r_ty≥
 = 
T_CLASS
;

3091 
lv_ow√r
 = (
ª„d_t
 *)
¨r
;

3093 
	`‰ì_˛ass
(
¨r
);

3096 
F_INDEX
:

3097 
•
->
ty≥
) {

3098 
T_MAPPING
:

3100 
svÆue_t
 *
v
;

3101 
m≠pög_t
 *
m
;

3103 
v
 = 
	`föd_ö_m≠pög
(
m
 = 
•
->
u
.
m≠
, sp - 1);

3104 i‡(
v
->
ty≥
 =
T_OBJECT
 && (v->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

3105 
	`assign_svÆue
(
v
, &
c⁄°0u
);

3107 
	`assign_svÆue
(--
•
, 
v
);

3108 
	`‰ì_m≠pög
(
m
);

3111 #i‚de‡
NO_BUFFER_TYPE


3112 
T_BUFFER
:

3114 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

3115 
	`îr‹
("Buffer indexes must be integers.\n");

3117 
i
 = (
•
 - 1)->
u
.
numbî
;

3118 i‡((
i
 > 
•
->
u
.
buf
->
size
) || (i < 0))

3119 
	`îr‹
("Buffer index out of bounds.\n");

3120 
i
 = 
•
->
u
.
buf
->
ôem
[i];

3121 
	`‰ì_buf„r
(
•
->
u
.
buf
);

3122 (--
•
)->
u
.
numbî
 = 
i
;

3123 
•
->
subty≥
 = 0;

3127 
T_STRING
:

3129 i‡((
•
-1)->
ty≥
 !
T_NUMBER
) {

3130 
	`îr‹
("String indexes must be integers.\n");

3132 
i
 = (
•
 - 1)->
u
.
numbî
;

3133 i‡((
i
 > 
	`SVALUE_STRLEN
(
•
)) || (i < 0))

3134 
	`îr‹
("String index out of bounds.\n");

3135 
i
 = (Ë
•
->
u
.
°rög
[i];

3136 
	`‰ì_°rög_svÆue
(
•
);

3137 (--
•
)->
u
.
numbî
 = 
i
;

3140 
T_ARRAY
:

3142 
¨øy_t
 *
¨r
;

3144 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

3145 
	`îr‹
("Array indexes must be integers.\n");

3146 
i
 = (
•
 - 1)->
u
.
numbî
;

3147 i‡(
i
<0Ë
	`îr‹
("Array index must beÖositive or zero.\n");

3148 
¨r
 = 
•
->
u
.arr;

3149 i‡(
i
 >
¨r
->
size
Ë
	`îr‹
("Array index out of bounds.\n");

3150 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_OBJECT
 &&

3151 (
¨r
->
ôem
[
i
].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

3152 
	`assign_svÆue
(&
¨r
->
ôem
[
i
], &
c⁄°0u
);

3154 
	`assign_svÆue_no_‰ì
(--
•
, &
¨r
->
ôem
[
i
]);

3155 
	`‰ì_¨øy
(
¨r
);

3159 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

3160 
	`îr‹
("Value being indexed is zero.\n");

3161 
	`îr‹
("C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
•
->
ty≥
));

3164 
F_RINDEX
:

3165 
•
->
ty≥
) {

3166 #i‚de‡
NO_BUFFER_TYPE


3167 
T_BUFFER
:

3169 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

3170 
	`îr‹
("Indexingá buffer withán illegalÅype.\n");

3172 
i
 = 
•
->
u
.
buf
->
size
 - (• - 1)->u.
numbî
;

3173 i‡((
i
 > 
•
->
u
.
buf
->
size
) || (i < 0))

3174 
	`îr‹
("Buffer index out of bounds.\n");

3176 
i
 = 
•
->
u
.
buf
->
ôem
[i];

3177 
	`‰ì_buf„r
(
•
->
u
.
buf
);

3178 (--
•
)->
u
.
numbî
 = 
i
;

3179 
•
->
subty≥
 = 0;

3183 
T_STRING
:

3185 
Àn
 = 
	`SVALUE_STRLEN
(
•
);

3186 i‡((
•
-1)->
ty≥
 !
T_NUMBER
) {

3187 
	`îr‹
("Indexingá string withán illegalÅype.\n");

3189 
i
 = 
Àn
 - (
•
 - 1)->
u
.
numbî
;

3190 i‡((
i
 > 
Àn
) || (i < 0))

3191 
	`îr‹
("String index out of bounds.\n");

3192 
i
 = (Ë
•
->
u
.
°rög
[i];

3193 
	`‰ì_°rög_svÆue
(
•
);

3194 (--
•
)->
u
.
numbî
 = 
i
;

3197 
T_ARRAY
:

3199 
¨øy_t
 *
¨r
 = 
•
->
u
.arr;

3201 i‡((
•
-1)->
ty≥
 !
T_NUMBER
)

3202 
	`îr‹
("Indexingánárray withán illegalÅype\n");

3203 
i
 = 
¨r
->
size
 - (
•
 - 1)->
u
.
numbî
;

3204 i‡(
i
 < 0 || i >
¨r
->
size
Ë
	`îr‹
("Array index out of bounds.\n");

3205 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_OBJECT
 &&

3206 (
¨r
->
ôem
[
i
].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

3207 
	`assign_svÆue
(&
¨r
->
ôem
[
i
], &
c⁄°0u
);

3209 
	`assign_svÆue_no_‰ì
(--
•
, &
¨r
->
ôem
[
i
]);

3210 
	`‰ì_¨øy
(
¨r
);

3214 i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)

3215 
	`îr‹
("Value being indexed is zero.\n");

3216 
	`îr‹
("C™nŸ index vÆuêo‡ty≥ '%s'.\n", 
	`ty≥_«me
(
•
->
ty≥
));

3219 #ifde‡
F_JUMP_WHEN_ZERO


3220 
F_JUMP_WHEN_ZERO
:

3221 i‡((
i
 = (
•
->
ty≥
 =
T_NUMBER
)Ë&& sp->
u
.
numbî
 == 0) {

3222 
	`COPY_SHORT
(&
off£t
, 
pc
);

3223 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

3225 
pc
 += 2;

3227 i‡(
i
) {

3228 
•
--;

3231 
	`p›_°ack
();

3235 #ifde‡
F_JUMP


3236 
F_JUMP
:

3237 
	`COPY_SHORT
(&
off£t
, 
pc
);

3238 
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
off£t
;

3241 
F_LE
:

3242 
	`f_À
();

3244 
F_LSH
:

3245 
	`f_lsh
();

3247 
F_LSH_EQ
:

3248 
	`f_lsh_eq
();

3250 
F_MOD
:

3252 
	`CHECK_TYPES
(
•
 - 1, 
T_NUMBER
, 1, 
ö°ru˘i⁄
);

3253 
	`CHECK_TYPES
(
•
, 
T_NUMBER
, 2, 
ö°ru˘i⁄
);

3254 i‡((
•
--)->
u
.
numbî
 == 0)

3255 
	`îr‹
("Modulus by zero.\n");

3256 
•
->
u
.
numbî
 %= (sp+1)->u.number;

3259 
F_MOD_EQ
:

3260 
	`f_mod_eq
();

3262 
F_MULTIPLY
:

3264 (
•
-1)->
ty≥
|sp->type) {

3265 
T_NUMBER
:

3267 
•
--;

3268 
•
->
u
.
numbî
 *= (sp+1)->u.number;

3272 
T_REAL
:

3274 
•
--;

3275 
•
->
u
.
ªÆ
 *= (sp+1)->u.real;

3279 
T_NUMBER
|
T_REAL
:

3281 i‡((--
•
)->
ty≥
 =
T_NUMBER
) {

3282 
•
->
ty≥
 = 
T_REAL
;

3283 
•
->
u
.
ªÆ
 = sp->u.
numbî
 * (sp+1)->u.real;

3285 
•
->
u
.
ªÆ
 *(•+1)->u.
numbî
;

3289 
T_MAPPING
:

3291 
m≠pög_t
 *
m
;

3292 
m
 = 
	`compo£_m≠pög
((
•
-1)->
u
.
m≠
, sp->u.map, 1);

3293 
	`p›_2_ñems
();

3294 
	`push_ª„d_m≠pög
(
m
);

3300 i‡(!((
•
-1)->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_MAPPING
)))

3301 
	`bad_¨gumít
(
•
-1, 
T_NUMBER
|
T_REAL
|
T_MAPPING
,1, 
ö°ru˘i⁄
);

3302 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_MAPPING
)))

3303 
	`bad_¨gumít
(
•
, 
T_NUMBER
|
T_REAL
|
T_MAPPING
,2, 
ö°ru˘i⁄
);

3304 
	`îr‹
("ArgsÅo *áreÇot compatible.\n");

3309 
F_MULT_EQ
:

3310 
	`f_mu…_eq
();

3312 
F_NE
:

3313 
	`f_√
();

3315 
F_NEGATE
:

3316 i‡(
•
->
ty≥
 =
T_NUMBER
) {

3317 
•
->
u
.
numbî
 = -sp->u.number;

3318 
•
->
subty≥
 = 0;

3319 } i‡(
•
->
ty≥
 =
T_REAL
)

3320 
•
->
u
.
ªÆ
 = -sp->u.real;

3322 
	`îr‹
("BadárgumentÅo unary minus\n");

3324 
F_NOT
:

3325 i‡(
•
->
ty≥
 =
T_NUMBER
) {

3326 
•
->
u
.
numbî
 = !sp->u.number;

3327 
•
->
subty≥
 = 0;

3329 
	`‰ì_svÆue
(
•
, "f_not");

3330 *
•
 = 
c⁄°0
;

3333 
F_OR
:

3334 
	`f_‹
();

3336 
F_OR_EQ
:

3337 
	`f_‹_eq
();

3339 
F_PARSE_COMMAND
:

3340 
	`f_∑r£_comm™d
();

3342 
F_POP_VALUE
:

3343 
	`p›_°ack
();

3345 
F_POST_DEC
:

3346 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

3348 
lvÆ
 = 
•
->
u
.
lvÆue
;

3349 
lvÆ
->
ty≥
) {

3350 
T_NUMBER
:

3351 
•
->
ty≥
 = 
T_NUMBER
;

3352 
•
->
u
.
numbî
 = 
lvÆ
->u.number--;

3353 
•
->
subty≥
 = 0;

3355 
T_REAL
:

3356 
•
->
ty≥
 = 
T_REAL
;

3357 
•
->
u
.
ªÆ
 = 
lvÆ
->u.real--;

3359 
T_LVALUE_BYTE
:

3360 
•
->
ty≥
 = 
T_NUMBER
;

3361 i‡(
globÆ_lvÆue_byã
.
subty≥
 == 0 &&

3362 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 == '\x1')

3363 
	`îr‹
("Strings cannot contain 0 bytes.\n");

3364 
•
->
u
.
numbî
 = (*
globÆ_lvÆue_byã
.u.
lvÆue_byã
)--;

3365 
•
->
subty≥
 = 0;

3368 
	`îr‹
("-- ofÇon-numericárgument\n");

3371 
F_POST_INC
:

3372 
	`DEBUG_CHECK
(
•
->
ty≥
 !
T_LVALUE
,

3374 
lvÆ
 = 
•
->
u
.
lvÆue
;

3375 
lvÆ
->
ty≥
) {

3376 
T_NUMBER
:

3377 
•
->
ty≥
 = 
T_NUMBER
;

3378 
•
->
u
.
numbî
 = 
lvÆ
->u.number++;

3379 
•
->
subty≥
 = 0;

3381 
T_REAL
:

3382 
•
->
ty≥
 = 
T_REAL
;

3383 
•
->
u
.
ªÆ
 = 
lvÆ
->u.real++;

3385 
T_LVALUE_BYTE
:

3386 i‡(
globÆ_lvÆue_byã
.
subty≥
 == 0 &&

3387 *
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
 == ()255)

3388 
	`îr‹
("Strings cannot contain 0 bytes.\n");

3389 
•
->
ty≥
 = 
T_NUMBER
;

3390 
•
->
u
.
numbî
 = (*
globÆ_lvÆue_byã
.u.
lvÆue_byã
)++;

3391 
•
->
subty≥
 = 0;

3394 
	`îr‹
("++ ofÇon-numericárgument\n");

3397 
F_GLOBAL_LVALUE
:

3398 
STACK_INC
;

3399 
•
->
ty≥
 = 
T_LVALUE
;

3400 
•
->
u
.
lvÆue
 = 
	`föd_vÆue
((Ë(
	`EXTRACT_UCHAR
(
pc
++) +

3401 
v¨übÀ_ödex_off£t
));

3403 
F_INDEX_LVALUE
:

3404 
	`push_ödexed_lvÆue
(0);

3406 
F_RINDEX_LVALUE
:

3407 
	`push_ödexed_lvÆue
(1);

3409 
F_NN_RANGE_LVALUE
:

3410 
	`push_lvÆue_ønge
(0x00);

3412 
F_RN_RANGE_LVALUE
:

3413 
	`push_lvÆue_ønge
(0x10);

3415 
F_RR_RANGE_LVALUE
:

3416 
	`push_lvÆue_ønge
(0x11);

3418 
F_NR_RANGE_LVALUE
:

3419 
	`push_lvÆue_ønge
(0x01);

3421 
F_NN_RANGE
:

3422 
	`f_ønge
(0x00);

3424 
F_RN_RANGE
:

3425 
	`f_ønge
(0x10);

3427 
F_NR_RANGE
:

3428 
	`f_ønge
(0x01);

3430 
F_RR_RANGE
:

3431 
	`f_ønge
(0x11);

3433 
F_NE_RANGE
:

3434 
	`f_exåa˘_ønge
(0);

3436 
F_RE_RANGE
:

3437 
	`f_exåa˘_ønge
(1);

3439 
F_RETURN_ZERO
:

3441 i‡(
c•
->
‰ameköd
 & 
FRAME_CATCH
) {

3442 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "F_RETURN_ZERO");

3443 
ˇtch_vÆue
 = 
c⁄°0
;

3444 
c•
->
‰ameköd
 & 
FRAME_CATCH
)

3445 
	`p›_c⁄åﬁ_°ack
();

3446 
c•
->
‰ameköd
 |
FRAME_RETURNED_FROM_CATCH
;

3452 
	`p›_n_ñems
(
•
 - 
Â
 + 1);

3453 
STACK_INC
;

3455 
	`DEBUG_CHECK
(
•
 !
Â
, "Bad stackát F_RETURN_ZERO\n");

3456 *
•
 = 
c⁄°0
;

3457 
	`p›_c⁄åﬁ_°ack
();

3458 #ifde‡
TRACE


3459 
åa˚dïth
--;

3460 i‡(
	`TRACEP
(
TRACE_RETURN
)) {

3461 
	`do_åa˚
("Return", "", "");

3462 i‡(
TRACEHB
) {

3463 i‡(
	`TRACETST
(
TRACE_ARGS
)) {

3464 
msg
[] = "with value: 0";

3466 
	`add_mesßge
(
comm™d_givî
, 
msg
, (msg)-1);

3468 
	`add_mesßge
(
comm™d_givî
, "\n", 1);

3473 i‡(
c•
[1].
‰ameköd
 & (
FRAME_EXTERNAL
 | 
FRAME_RETURNED_FROM_CATCH
))

3478 
F_RETURN
:

3480 
svÆue_t
 
sv
;

3482 i‡(
c•
->
‰ameköd
 & 
FRAME_CATCH
) {

3483 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "F_RETURN");

3484 
ˇtch_vÆue
 = 
c⁄°0
;

3485 
c•
->
‰ameköd
 & 
FRAME_CATCH
)

3486 
	`p›_c⁄åﬁ_°ack
();

3487 
c•
->
‰ameköd
 |
FRAME_RETURNED_FROM_CATCH
;

3490 i‡(
•
 - 
Â
 + 1) {

3491 
sv
 = *
•
--;

3495 
	`p›_n_ñems
(
•
 - 
Â
 + 1);

3496 
STACK_INC
;

3497 
	`DEBUG_CHECK
(
•
 !
Â
, "Bad stackát F_RETURN\n");

3498 *
•
 = 
sv
;

3501 
	`p›_c⁄åﬁ_°ack
();

3502 #ifde‡
TRACE


3503 
åa˚dïth
--;

3504 i‡(
	`TRACEP
(
TRACE_RETURN
)) {

3505 
	`do_åa˚
("Return", "", "");

3506 i‡(
TRACEHB
) {

3507 i‡(
	`TRACETST
(
TRACE_ARGS
)) {

3508 
msg
[] = " with value: ";

3510 
	`add_mesßge
(
comm™d_givî
, 
msg
, (msg)-1);

3511 
	`¥öt_svÆue
(
•
);

3513 
	`add_mesßge
(
comm™d_givî
, "\n", 1);

3518 i‡(
c•
[1].
‰ameköd
 & (
FRAME_EXTERNAL
 | 
FRAME_RETURNED_FROM_CATCH
))

3522 
F_RSH
:

3523 
	`f_rsh
();

3525 
F_RSH_EQ
:

3526 
	`f_rsh_eq
();

3528 
F_SSCANF
:

3529 
	`f_ssˇnf
();

3531 
F_STRING
:

3532 
	`LOAD_SHORT
(
off£t
, 
pc
);

3533 
	`DEBUG_CHECK1
(
off£t
 >
cuºít_¥og
->
num_°rögs
,

3535 
off£t
);

3536 
	`push_sh¨ed_°rög
(
cuºít_¥og
->
°rögs
[
off£t
]);

3538 
F_SHORT_STRING
:

3539 
	`DEBUG_CHECK1
(
	`EXTRACT_UCHAR
(
pc
Ë>
cuºít_¥og
->
num_°rögs
,

3541 
	`EXTRACT_UCHAR
(
pc
));

3542 
	`push_sh¨ed_°rög
(
cuºít_¥og
->
°rögs
[
	`EXTRACT_UCHAR
(
pc
++)]);

3544 
F_SUBTRACT
:

3546 
i
 = (
•
--)->
ty≥
;

3547 
i
 | 
•
->
ty≥
) {

3548 
T_NUMBER
:

3549 
•
->
u
.
numbî
 -= (sp+1)->u.number;

3552 
T_REAL
:

3553 
•
->
u
.
ªÆ
 -= (sp+1)->u.real;

3556 
T_NUMBER
 | 
T_REAL
:

3557 i‡(
•
->
ty≥
 =
T_REAL
Ë•->
u
.
ªÆ
 -(•+1)->u.
numbî
;

3559 
•
->
ty≥
 = 
T_REAL
;

3560 
•
->
u
.
ªÆ
 = sp->u.
numbî
 - (sp+1)->u.real;

3564 
T_ARRAY
:

3570 
•
->
u
.
¨r
 = 
	`subåa˘_¨øy
(sp->u.arr, (sp+1)->u.arr);

3575 i‡(!((
•
++)->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_ARRAY
)))

3576 
	`îr‹
("BadÜeftÅypeÅo -.\n");

3577 i‡(!(
•
->
ty≥
 & (
T_NUMBER
|
T_REAL
|
T_ARRAY
)))

3578 
	`îr‹
("BadÑightÅypeÅo -.\n");

3579 
	`îr‹
("ArgumentsÅo - doÇot have compatibleÅypes.\n");

3583 
F_SUB_EQ
:

3584 
	`f_sub_eq
();

3586 
F_SIMUL_EFUN
:

3588 
ödex
;

3589 
num_¨gs
;

3591 
	`LOAD_SHORT
(
ödex
, 
pc
);

3592 
num_¨gs
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

3593 
num_v¨¨gs
 = 0;

3594 
	`ˇŒ_simul_efun
(
ödex
, 
num_¨gs
);

3597 
F_SWITCH
:

3598 
	`f_swôch
();

3600 
F_XOR
:

3601 
	`f_x‹
();

3603 
F_XOR_EQ
:

3604 
	`f_x‹_eq
();

3606 
F_CATCH
:

3612 ((*Ë&
off£t
)[0] = 
pc
[0];

3613 ((*Ë&
off£t
)[1] = 
pc
[1];

3614 
off£t
 = 
pc
 + off£à- 
cuºít_¥og
->
¥ogøm
;

3615 
pc
 += 2;

3617 
	`do_ˇtch
(
pc
, 
off£t
);

3618 i‡((
c•
[1].
‰ameköd
 & (
FRAME_EXTERNAL
 | 
FRAME_RETURNED_FROM_CATCH
)) ==

3619 (
FRAME_EXTERNAL
 | 
FRAME_RETURNED_FROM_CATCH
)) {

3625 
F_END_CATCH
:

3627 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "F_END_CATCH");

3628 
ˇtch_vÆue
 = 
c⁄°0
;

3630 
	`p›_c⁄åﬁ_°ack
();

3631 
	`push_numbî
(0);

3634 
F_TIME_EXPRESSION
:

3636 
£c
, 
u£c
;

3638 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
++);

3639 
	`gë_u£c_˛ock
(&
£c
, &
u£c
);

3640 
	`push_numbî
(
£c
);

3641 
	`push_numbî
(
u£c
);

3644 
F_END_TIME_EXPRESSION
:

3646 
£c
, 
u£c
;

3648 
	`gë_u£c_˛ock
(&
£c
, &
u£c
);

3649 
u£c
 = (
£c
 - (
•
 - 1)->
u
.
numbî
) * 1000000 + (usec - sp->u.number);

3650 
•
 -= 2;

3651 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
--);

3652 
	`push_numbî
(
u£c
);

3655 
	#In°ru˘i⁄
 (
ö°ru˘i⁄
 + 
ONEARG_MAX
)

	)

3656 #ifde‡
DEBUG


3657 
	#CALL_THE_EFUN
 
ˇŒ_the_efun


	)

3659 
	#CALL_THE_EFUN
 (*
€fun_èbÀ
[
ö°ru˘i⁄
])(); 

	)

3661 
F_EFUN0
:

3662 
°_num_¨g
 = 0;

3663 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

3664 
CALL_THE_EFUN
;

3665 
F_EFUN1
:

3666 
°_num_¨g
 = 1;

3667 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

3668 
	`CHECK_TYPES
(
•
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[0], 1, 
In°ru˘i⁄
);

3669 
CALL_THE_EFUN
;

3670 
F_EFUN2
:

3671 
°_num_¨g
 = 2;

3672 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

3673 
	`CHECK_TYPES
(
•
 - 1, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[0], 1, 
In°ru˘i⁄
);

3674 
	`CHECK_TYPES
(
•
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[1], 2, 
In°ru˘i⁄
);

3675 
CALL_THE_EFUN
;

3676 
F_EFUN3
:

3677 
°_num_¨g
 = 3;

3678 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

3679 
	`CHECK_TYPES
(
•
 - 2, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[0], 1, 
In°ru˘i⁄
);

3680 
	`CHECK_TYPES
(
•
 - 1, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[1], 2, 
In°ru˘i⁄
);

3681 
	`CHECK_TYPES
(
•
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[2], 3, 
In°ru˘i⁄
);

3682 
CALL_THE_EFUN
;

3683 
F_EFUNV
:

3685 
i
, 
num
;

3686 
°_num_¨g
 = 
	`EXTRACT_UCHAR
(
pc
++Ë+ 
num_v¨¨gs
;

3687 
num_v¨¨gs
 = 0;

3688 
ö°ru˘i⁄
 = 
	`EXTRACT_UCHAR
(
pc
++);

3689 
num
 = 
ö°rs2
[
ö°ru˘i⁄
].
mö_¨g
;

3690 
i
 = 1; i <
num
; i++) {

3691 
	`CHECK_TYPES
(
•
 - 
°_num_¨g
 + 
i
, 
ö°rs2
[
ö°ru˘i⁄
].
ty≥
[i-1], i, 
In°ru˘i⁄
);

3693 
CALL_THE_EFUN
;

3697 
°_num_¨g
 = 1;

3698 
	`CHECK_TYPES
(
•
, 
ö°rs
[
ö°ru˘i⁄
].
ty≥
[0], 1, instruction);

3699 #i‚de‡
DEBUG


3700 (*
o€fun_èbÀ
[
ö°ru˘i⁄
])();

3703 
ö°ru˘i⁄
 -
ONEARG_MAX
;

3704 
ˇŒ_the_efun
:

3707 i‡(
In°ru˘i⁄
 > 
NUM_OPCODES
) {

3708 
	`Áèl
("Undefined instruction %s (%d)\n",

3709 
	`quîy_ö°r_«me
(
In°ru˘i⁄
), Instruction);

3711 i‡(
In°ru˘i⁄
 < 
BASE
) {

3712 
	`Áèl
("No case forÉoperator %s (%d)\n",

3713 
	`quîy_ö°r_«me
(
In°ru˘i⁄
), Instruction);

3715 i‡(
ö°rs2
[
ö°ru˘i⁄
].
ªt_ty≥
 =
TYPE_NOVALUE
)

3716 
ex≥˘ed_°ack
 = 
•
 - 
°_num_¨g
;

3718 
ex≥˘ed_°ack
 = 
•
 - 
°_num_¨g
 + 1;

3719 
num_¨g
 = 
°_num_¨g
;

3721 (*
€fun_èbÀ
[
ö°ru˘i⁄
]) ();

3723 i‡(
ex≥˘ed_°ack
 !
•
)

3724 
	`Áèl
("Bad stackáfterÉfun. Instruction %d,Çumárg %d\n",

3725 
ö°ru˘i⁄
, 
num_¨g
);

3728 
	`DEBUG_CHECK1
(
•
 < 
Â
 + 
c•
->
num_loˇl_v¨übÀs
 - 1,

3730 
ö°ru˘i⁄
);

3732 
	}
}

3735 
do_ˇtch
 
	$P2
(*, 
pc
, , 
√w_pc_off£t
)

3737 
îr‹_c⁄ãxt_t
 
ec⁄
;

3743 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
))

3744 
	`îr‹
("Can't catchÅoo deepÑecursionÉrror.\n");

3745 
	`push_c⁄åﬁ_°ack
(
FRAME_CATCH
);

3746 
c•
->
pc
 = 
cuºít_¥og
->
¥ogøm
 + 
√w_pc_off£t
;

3747 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
TRACE_CODE
)

3748 
c•
->
num_loˇl_v¨übÀs
 = (csp - 1)->num_local_variables;

3751 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

3756 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

3757 
STACK_INC
;

3758 *
•
 = 
ˇtch_vÆue
;

3759 
ˇtch_vÆue
 = 
c⁄°1
;

3762 i‡(
max_evÆ_îr‹
) {

3763 
	`p›_c⁄ãxt
(&
ec⁄
);

3764 
	`îr‹
("Can't catchÉval costÅoo bigÉrror.\n");

3766 i‡(
too_dìp_îr‹
) {

3767 
	`p›_c⁄ãxt
(&
ec⁄
);

3768 
	`îr‹
("Can't catchÅoo deepÑecursionÉrror.\n");

3771 
	`assign_svÆue
(&
ˇtch_vÆue
, &
c⁄°1
);

3773 
	`evÆ_ö°ru˘i⁄
(
pc
);

3775 
	`p›_c⁄ãxt
(&
ec⁄
);

3776 
	}
}

3778 
¥ogøm_t
 *
ffbn_ªcur£
 
	$P4
(
¥ogøm_t
 *, 
¥og
, *, 
«me
,

3779 *, 
ödex
, *, 
ru¡ime_ödex
) {

3780 
high
 = 
¥og
->
num_fun˘i⁄s_deföed
 - 1;

3781 
low
 = 0, 
mid
;

3782 
ri
;

3783 *
p
;

3786 
high
 >
low
) {

3787 
mid
 = (
high
 + 
low
) >> 1;

3788 
p
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
«me
;

3789 i‡(
«me
 < 
p
Ë
high
 = 
mid
 - 1;

3790 i‡(
«me
 > 
p
Ë
low
 = 
mid
 + 1;

3792 
ri
 = 
mid
 + 
¥og
->
œ°_öhîôed
;

3794 i‡(
¥og
->
fun˘i⁄_Êags
[
ri
] &

3795 (
FUNC_UNDEFINED
 | 
FUNC_PROTOTYPE
)) {

3799 *
ödex
 = 
mid
;

3800 *
ru¡ime_ödex
 = 
ri
;

3801  
¥og
;

3806 
mid
 = 
¥og
->
num_öhîôed
;

3807 
mid
--) {

3808 
¥ogøm_t
 *
ªt
 = 
	`ffbn_ªcur£
(
¥og
->
öhîô
[
mid
].¥og, 
«me
, 
ödex
,

3809 
ru¡ime_ödex
);

3810 i‡(
ªt
) {

3811 *
ru¡ime_ödex
 +
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
;

3812  
ªt
;

3816 
	}
}

3818 
¥ogøm_t
 *
ffbn_ªcur£2
 
	$P6
(
¥ogøm_t
 *, 
¥og
, *, 
«me
,

3819 *, 
ödex
, *, 
ru¡ime_ödex
,

3820 *, 
fio
, *, 
vio
) {

3821 
high
 = 
¥og
->
num_fun˘i⁄s_deföed
 - 1;

3822 
low
 = 0, 
mid
;

3823 
ri
;

3824 *
p
;

3827 
high
 >
low
) {

3828 
mid
 = (
high
 + 
low
) >> 1;

3829 
p
 = 
¥og
->
fun˘i⁄_èbÀ
[
mid
].
«me
;

3830 i‡(
«me
 < 
p
Ë
high
 = 
mid
 - 1;

3831 i‡(
«me
 > 
p
Ë
low
 = 
mid
 + 1;

3833 
ri
 = 
mid
 + 
¥og
->
œ°_öhîôed
;

3835 i‡(
¥og
->
fun˘i⁄_Êags
[
ri
] &

3836 (
FUNC_UNDEFINED
 | 
FUNC_PROTOTYPE
)) {

3840 *
ödex
 = 
mid
;

3841 *
ru¡ime_ödex
 = 
ri
;

3842 *
fio
 = *
vio
 = 0;

3843  
¥og
;

3848 
mid
 = 
¥og
->
num_öhîôed
;

3849 
mid
--) {

3850 
¥ogøm_t
 *
ªt
 = 
	`ffbn_ªcur£2
(
¥og
->
öhîô
[
mid
].¥og, 
«me
, 
ödex
,

3851 
ru¡ime_ödex
, 
fio
, 
vio
);

3852 i‡(
ªt
) {

3853 *
ru¡ime_ödex
 +
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
;

3854 *
fio
 +
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
;

3855 *
vio
 +
¥og
->
öhîô
[
mid
].
v¨übÀ_ödex_off£t
;

3856  
ªt
;

3860 
	}
}

3862 
INLINE
 
¥ogøm_t
 *

3863 
föd_fun˘i⁄_by_«me
 
	$P4
(
obje˘_t
 *, 
ob
, *, 
«me
,

3864 *, 
ödex
, *, 
ru¡ime_ödex
) {

3865 *
fu¬ame
 = 
	`föd°rög
(
«me
);

3867 i‡(!
fu¬ame
)  0;

3868  
	`ffbn_ªcur£
(
ob
->
¥og
, 
fu¬ame
, 
ödex
, 
ru¡ime_ödex
);

3869 
	}
}

3871 
INLINE_STATIC
 
¥ogøm_t
 *

3872 
föd_fun˘i⁄_by_«me2
 
	$P6
(
obje˘_t
 *, 
ob
, **, 
«me
,

3873 *, 
ödex
, *, 
ru¡ime_ödex
,

3874 *, 
fio
, *, 
vio
) {

3875 i‡(!(*
«me
 = 
	`föd°rög
(*name)))  0;

3876  
	`ffbn_ªcur£2
(
ob
->
¥og
, *
«me
, 
ödex
, 
ru¡ime_ödex
, 
fio
, 
vio
);

3877 
	}
}

3914 #ifde‡
DEBUG


3915 
	gdebug_≠∂y_fun
[30];

3918 #ifde‡
CACHE_STATS


3919 
	g≠∂y_low_ˇŒ_Ÿhîs
 = 0;

3920 
	g≠∂y_low_ˇche_hôs
 = 0;

3921 
	g≠∂y_low_¶Ÿs_u£d
 = 0;

3922 
	g≠∂y_low_cﬁlisi⁄s
 = 0;

3925 
	sˇche_íåy_s
 {

3926 
¥ogøm_t
 *
	m›rogp
;

3927 
¥ogøm_t
 *
	m¥ogp
;

3928 
fun˘i⁄_t
 *
	mfu≈
;

3929 
	mfun˘i⁄_ödex_off£t
;

3930 
	mv¨übÀ_ödex_off£t
;

3931 } 
	tˇche_íåy_t
;

3933 
ˇche_íåy_t
 
	gˇche
[
APPLY_CACHE_SIZE
];

3935 #ifde‡
DEBUGMALLOC_EXTENSIONS


3936 
	$m¨k_≠∂y_low_ˇche
() {

3937 
i
;

3938 
i
 = 0; i < 
APPLY_CACHE_SIZE
; i++) {

3939 i‡(
ˇche
[
i
].
fu≈
 && !ˇche[i].
¥ogp
)

3940 
	`EXTRA_REF
(
	`BLOCK
((*)
ˇche
[
i
].
fu≈
))++;

3941 i‡(
ˇche
[
i
].
›rogp
)

3942 
ˇche
[
i
].
›rogp
->
exåa_ªf
++;

3943 i‡(
ˇche
[
i
].
¥ogp
)

3944 
ˇche
[
i
].
¥ogp
->
exåa_ªf
++;

3946 
	}
}

3949 
≠∂y_low
 
	$P3
(*, 
fun
, 
obje˘_t
 *, 
ob
, , 
num_¨g
)

3955 *
sfun
;

3956 
ˇche_íåy_t
 *
íåy
;

3957 
¥ogøm_t
 *
¥ogp
, *
¥og
;

3958 
ix
;

3959 
POINTER_INT
 
pfun
, 
µrog
;

3960 
ˇche_mask
 = 
APPLY_CACHE_SIZE
 - 1;

3961 
loˇl_ˇŒ_‹igö
 = 
ˇŒ_‹igö
;

3962 
	`IF_DEBUG
(
c⁄åﬁ_°ack_t
 *
ßve_c•
);

3964 i‡(!
loˇl_ˇŒ_‹igö
)

3965 
loˇl_ˇŒ_‹igö
 = 
ORIGIN_DRIVER
;

3966 
ˇŒ_‹igö
 = 0;

3967 
ob
->
time_of_ªf
 = 
cuºít_time
;

3972 #i‡!
	`deföed
(
NO_RESETS
Ë&& deföed(
LAZY_RESETS
)

3973 
	`åy_ª£t
(
ob
);

3974 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) {

3975 
	`p›_n_ñems
(
num_¨g
);

3979 
ob
->
Êags
 &~
O_RESET_STATE
;

3980 #ifde‡
DEBUG


3981 
	`°∫˝y
(
debug_≠∂y_fun
, 
fun
, (debug_apply_fun));

3982 
debug_≠∂y_fun
[ debug_apply_fun - 1] = '\0';

3988 #i‚de‡
NO_SHADOWS


3989 
ob
->
shadowed
 && ob->shadowed !
cuºít_obje˘
)

3990 
ob
 = ob->
shadowed
;

3991 
ªåy_f‹_shadow
:

3993 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

3994 
	`lﬂd_ob_‰om_sw≠
(
ob
);

3996 
¥ogp
 = 
ob
->
¥og
;

3997 
	`DEBUG_CHECK
(
ob
->
Êags
 & 
O_DESTRUCTED
,"apply() on destructed object\n");

3998 #ifde‡
CACHE_STATS


3999 
≠∂y_low_ˇŒ_Ÿhîs
++;

4001 
pfun
 = (
POINTER_INT
)
fun
;

4002 
µrog
 = (
POINTER_INT
)
¥ogp
;

4003 
ix
 = (
pfun
 >> 2)^’fu¿>> (2 + 
APPLY_CACHE_BITS
))^(
µrog
 >> 2)^(pprog >> (2 + APPLY_CACHE_BITS));

4004 
íåy
 = &
ˇche
[
ix
 & 
ˇche_mask
];

4005 i‡(
íåy
->
›rogp
 =
¥ogp
 &&

4006 (
íåy
->
¥ogp
 ? (
	`°rcmp
”¡ry->
fu≈
->
«me
, 
fun
) == 0) :

4007 
	`°rcmp
((*)
íåy
->
fu≈
, 
fun
) == 0)) {

4008 #ifde‡
CACHE_STATS


4009 
≠∂y_low_ˇche_hôs
++;

4013 i‡(
íåy
->
¥ogp
) {

4014 
√ed
;

4015 
fun˘i⁄_t
 *
fu≈
 = 
íåy
->funp;

4016 
ödex
 = (
fu≈
 - 
íåy
->
¥ogp
->
fun˘i⁄_èbÀ
);

4017 
funÊags
, 
ru¡ime_ödex
;

4019 
ru¡ime_ödex
 = 
ödex
 + 
íåy
->
¥ogp
->
œ°_öhîôed
 +É¡ry->
fun˘i⁄_ödex_off£t
;

4020 
funÊags
 = 
íåy
->
›rogp
->
fun˘i⁄_Êags
[
ru¡ime_ödex
];

4022 
√ed
 = (
loˇl_ˇŒ_‹igö
 =
ORIGIN_DRIVER
 ? 
DECL_HIDDEN
 : ((
cuºít_obje˘
 =
ob
 ||Üoˇl_ˇŒ_‹igö =
ORIGIN_INTERNAL
Ë? 
DECL_PROTECTED
 : 
DECL_PUBLIC
));

4024 i‡((
funÊags
 & 
DECL_ACCESS
Ë>
√ed
) {

4029 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4030 
cuºít_¥og
 = 
íåy
->
¥ogp
;

4031 
ˇŒî_ty≥
 = 
loˇl_ˇŒ_‹igö
;

4032 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

4033 
fun˘i⁄_ödex_off£t
 = 
íåy
->function_index_offset;

4034 
v¨übÀ_ödex_off£t
 = 
íåy
->variable_index_offset;

4036 
c•
->
‰
.
èbÀ_ödex
 = 
ödex
;

4037 #ifde‡
PROFILE_FUNCTIONS


4038 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
));

4039 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
ödex
].
ˇŒs
++;

4042 i‡(
funÊags
 & 
FUNC_TRUE_VARARGS
)

4043 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

4044 
fu≈
->
num_loˇl
, fu≈->
num_¨g
);

4046 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

4047 
fu≈
->
num_loˇl
, fu≈->
num_¨g
);

4048 #ifde‡
TRACE


4049 
åa˚dïth
++;

4050 i‡(
	`TRACEP
(
TRACE_CALL
)) {

4051 
	`do_åa˚_ˇŒ
(
ödex
);

4055 
¥evious_ob
 = 
cuºít_obje˘
;

4056 
cuºít_obje˘
 = 
ob
;

4057 
	`IF_DEBUG
(
ßve_c•
 = 
c•
);

4058 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

4060 
	`DEBUG_CHECK
(
ßve_c•
 - 1 !
c•
,

4068 
ödex
, 
ru¡ime_ödex
, 
fio
, 
vio
;

4071 i‡(
íåy
->
›rogp
)

4072 
	`‰ì_¥og
(
íåy
->
›rogp
, 1);

4073 i‡(
íåy
->
¥ogp
) {

4074 
	`‰ì_¥og
(
íåy
->
¥ogp
, 1);

4076 i‡(
íåy
->
fu≈
)

4077 
	`‰ì_°rög
((*)
íåy
->
fu≈
);

4080 #ifde‡
CACHE_STATS


4081 i‡(!
íåy
->
fu≈
) {

4082 
≠∂y_low_¶Ÿs_u£d
++;

4084 
≠∂y_low_cﬁlisi⁄s
++;

4087 
sfun
 = 
fun
;

4088 
¥og
 = 
	`föd_fun˘i⁄_by_«me2
(
ob
, &
sfun
, &
ödex
, &
ru¡ime_ödex
,

4089 &
fio
, &
vio
);

4091 i‡(
¥og
) {

4092 
√ed
;

4093 
fun˘i⁄_t
 *
fu≈
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

4094 
funÊags
 = 
ob
->
¥og
->
fun˘i⁄_Êags
[
ru¡ime_ödex
];

4096 
√ed
 = (
loˇl_ˇŒ_‹igö
 =
ORIGIN_DRIVER
 ? 
DECL_HIDDEN
 : ((
cuºít_obje˘
 =
ob
 ||Üoˇl_ˇŒ_‹igö =
ORIGIN_INTERNAL
Ë? 
DECL_PROTECTED
 : 
DECL_PUBLIC
));

4098 i‡((
funÊags
 & 
DECL_ACCESS
Ë>
√ed
) {

4099 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4100 
cuºít_¥og
 = 
¥og
;

4101 
ˇŒî_ty≥
 = 
loˇl_ˇŒ_‹igö
;

4103 
íåy
->
›rogp
 = 
ob
->
¥og
;

4104 
íåy
->
fu≈
 = funp;

4105 
c•
->
‰
.
èbÀ_ödex
 = 
ödex
;

4106 #ifde‡
PROFILE_FUNCTIONS


4107 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
));

4108 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
ödex
].
ˇŒs
++;

4110 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

4111 
íåy
->
v¨übÀ_ödex_off£t
 = v¨übÀ_ödex_off£à
vio
;

4112 
íåy
->
fun˘i⁄_ödex_off£t
 = fun˘i⁄_ödex_off£à
fio
;

4113 i‡(
funÊags
 & 
FUNC_TRUE_VARARGS
)

4114 
	`£tup_v¨¨gs_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

4115 
fu≈
->
num_loˇl
,

4116 
fu≈
->
num_¨g
);

4118 
	`£tup_v¨übÀs
(
c•
->
num_loˇl_v¨übÀs
,

4119 
fu≈
->
num_loˇl
,

4120 
fu≈
->
num_¨g
);

4121 
íåy
->
¥ogp
 = 
cuºít_¥og
;

4139 
	`ª„ªn˚_¥og
(
íåy
->
›rogp
, "apply_low() cache [oprogp]");

4140 
	`ª„ªn˚_¥og
(
íåy
->
¥ogp
, "apply_low() cache [progp]");

4141 
¥evious_ob
 = 
cuºít_obje˘
;

4142 
cuºít_obje˘
 = 
ob
;

4143 
	`IF_DEBUG
(
ßve_c•
 = 
c•
);

4144 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

4146 
	`DEBUG_CHECK
(
ßve_c•
 - 1 !
c•
,

4157 
íåy
->
›rogp
 = 
¥ogp
;

4158 
	`ª„ªn˚_¥og
(
íåy
->
›rogp
, "apply_low() cache [oprogp miss]");

4159 i‡(
sfun
) {

4160 
	`ªf_°rög
(
sfun
);

4161 
íåy
->
fu≈
 = (
fun˘i⁄_t
 *)
sfun
;

4163 
íåy
->
fu≈
 = (
fun˘i⁄_t
 *)
	`make_sh¨ed_°rög
(
fun
);

4164 
íåy
->
¥ogp
 = 0;

4166 #i‚de‡
NO_SHADOWS


4167 i‡(
ob
->
shadowög
) {

4172 
ob
 = ob->
shadowög
;

4173 
ªåy_f‹_shadow
;

4177 
	`p›_n_ñems
(
num_¨g
);

4179 
	}
}

4191 
svÆue_t
 *
≠∂y
 
	$P4
(*, 
fun
, 
obje˘_t
 *, 
ob
, , 
num_¨g
,

4192 , 
whîe
)

4194 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_•
);

4196 
åa˚dïth
 = 0;

4197 
ˇŒ_‹igö
 = 
whîe
;

4199 #ifde‡
TRACE


4200 i‡(
	`TRACEP
(
TRACE_APPLY
)) {

4201 
	`do_åa˚
("Apply", "", "\n");

4205 
	`IF_DEBUG
(
ex≥˘ed_•
 = 
•
 - 
num_¨g
);

4206 i‡(
	`≠∂y_low
(
fun
, 
ob
, 
num_¨g
) == 0)

4208 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "sapply");

4209 
≠∂y_ªt_vÆue
 = *
•
--;

4210 
	`DEBUG_CHECK
(
ex≥˘ed_•
 !
•
,

4212  &
≠∂y_ªt_vÆue
;

4213 
	}
}

4219 
ˇŒ___INIT
 
	$P1
(
obje˘_t
 *, 
ob
)

4221 
¥ogøm_t
 *
¥ogp
;

4222 
fun˘i⁄_t
 *
cÂ
;

4223 
num_fun˘i⁄s
;

4224 
	`IF_DEBUG
(
svÆue_t
 *
ex≥˘ed_•
);

4225 
	`IF_DEBUG
(
c⁄åﬁ_°ack_t
 *
ßve_c•
);

4227 
åa˚dïth
 = 0;

4229 #ifde‡
TRACE


4230 i‡(
	`TRACEP
(
TRACE_APPLY
)) {

4231 
	`do_åa˚
("Apply", "", "\n");

4235 
	`IF_DEBUG
(
ex≥˘ed_•
 = 
•
);

4239 
ob
->
Êags
 &~
O_RESET_STATE
;

4241 
¥ogp
 = 
ob
->
¥og
;

4242 
num_fun˘i⁄s
 = 
¥ogp
->
num_fun˘i⁄s_deföed
;

4243 i‡(!
num_fun˘i⁄s
) ;

4246 
cÂ
 = &
¥ogp
->
fun˘i⁄_èbÀ
[
num_fun˘i⁄s
 - 1];

4247 i‡(
cÂ
->
«me
[0] !
APPLY___INIT_SPECIAL_CHAR
) ;

4248 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4249 
cuºít_¥og
 = 
¥ogp
;

4250 
c•
->
‰
.
èbÀ_ödex
 = 
num_fun˘i⁄s
 - 1;

4251 #ifde‡
PROFILE_FUNCTIONS


4252 
	`gë_˝u_times
(&(
c•
->
íåy_£cs
), &(c•->
íåy_u£cs
));

4253 
cuºít_¥og
->
fun˘i⁄_èbÀ
[
num_fun˘i⁄s
 - 1].
ˇŒs
++;

4255 
ˇŒî_ty≥
 = 
ORIGIN_DRIVER
;

4256 
c•
->
num_loˇl_v¨übÀs
 = 0;

4258 
	`£tup_√w_‰ame
(
num_fun˘i⁄s
 - 1 + 
¥ogp
->
œ°_öhîôed
);

4259 
¥evious_ob
 = 
cuºít_obje˘
;

4261 
cuºít_obje˘
 = 
ob
;

4262 
	`IF_DEBUG
(
ßve_c•
 = 
c•
);

4263 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
cÂ
->
addªss
);

4265 
	`DEBUG_CHECK
(
ßve_c•
 - 1 !
c•
,

4267 
•
--;

4268 
	`DEBUG_CHECK
(
ex≥˘ed_•
 !
•
,

4270 
	}
}

4282 
svÆue_t
 *

4283 
ß„_≠∂y
 
	$P4
(*, 
fun
, 
obje˘_t
 *, 
ob
, , 
num_¨g
, , 
whîe
)

4285 
svÆue_t
 *
ªt
;

4286 
îr‹_c⁄ãxt_t
 
ec⁄
;

4288 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
))

4290 i‡(!
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

4291 i‡(!(
ob
->
Êags
 & 
O_DESTRUCTED
)) {

4292 
ªt
 = 
	`≠∂y
(
fun
, 
ob
, 
num_¨g
, 
whîe
);

4293 } 
ªt
 = 0;

4295 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

4296 
	`p›_n_ñems
(
num_¨g
);

4297 
ªt
 = 0;

4299 
	`p›_c⁄ãxt
(&
ec⁄
);

4300  
ªt
;

4301 
	}
}

4306 
¨øy_t
 *
ˇŒ_Æl_Ÿhî
 
	$P3
(
¨øy_t
 *, 
v
, *, 
func
, , 
num¨gs
)

4308 
size
;

4309 
svÆue_t
 *
tmp
, *
v±r
, *
Ωå
;

4310 
¨øy_t
 *
ªt
;

4311 
obje˘_t
 *
ob
;

4312 
i
;

4314 
tmp
 = 
•
;

4315 
STACK_INC
;

4316 
•
->
ty≥
 = 
T_ARRAY
;

4317 
•
->
u
.
¨r
 = 
ªt
 = 
	`Æloˇã_¨øy
(
size
 = 
v
->size);

4318 
	`CHECK_STACK_OVERFLOW
(
num¨gs
);

4319 
v±r
 = 
v
->
ôem
, 
Ωå
 = 
ªt
->ôem; 
size
--; vptr++,Ñptr++) {

4320 i‡(
v±r
->
ty≥
 =
T_OBJECT
) {

4321 
ob
 = 
v±r
->
u
.ob;

4322 } i‡(
v±r
->
ty≥
 =
T_STRING
) {

4323 
ob
 = 
	`föd_obje˘
(
v±r
->
u
.
°rög
);

4324 i‡(!
ob
 || !
	`obje˘_visibÀ
(ob))

4327 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

4329 
i
 = 
num¨gs
;

4330 
i
--Ë
	`push_svÆue
(
tmp
 - i);

4331 
ˇŒ_‹igö
 = 
ORIGIN_CALL_OTHER
;

4332 i‡(
	`≠∂y_low
(
func
, 
ob
, 
num¨gs
)Ë*
Ωå
 = *
•
--;

4334 
•
--;

4335 
	`p›_n_ñems
(
num¨gs
);

4336  
ªt
;

4337 
	}
}

4339 *
fun˘i⁄_«me
 
	$P2
(
¥ogøm_t
 *, 
¥og
, , 
ödex
) {

4340 
low
, 
high
, 
mid
;

4343 i‡(
¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_ALIAS
) {

4344 
ödex
 = 
¥og
->
fun˘i⁄_Êags
[ödex] & ~
FUNC_ALIAS
;

4347 
¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_INHERITED
) {

4348 
low
 = 0;

4349 
high
 = 
¥og
->
num_öhîôed
 -1;

4351 
high
 > 
low
) {

4352 
mid
 = (
low
 + 
high
 + 1) >> 1;

4353 i‡(
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ödex
)

4354 
high
 = 
mid
 -1;

4355 
low
 = 
mid
;

4357 
ödex
 -
¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
;

4358 
¥og
 =Örog->
öhîô
[
low
].prog;

4361 
ödex
 -
¥og
->
œ°_öhîôed
;

4363  
¥og
->
fun˘i⁄_èbÀ
[
ödex
].
«me
;

4364 
	}
}

4366 
gë_åa˚_dëaûs
 
	$P5
(
¥ogøm_t
 *, 
¥og
, , 
ödex
,

4367 **, 
‚ame
, *, 
«
, *, 
∆
) {

4368 
fun˘i⁄_t
 *
cÂ
 = &
¥og
->
fun˘i⁄_èbÀ
[
ödex
];

4370 *
‚ame
 = 
cÂ
->
«me
;

4371 *
«
 = 
cÂ
->
num_¨g
;

4372 *
∆
 = 
cÂ
->
num_loˇl
;

4373 
	}
}

4382 *
fun˘i⁄_exi°s
 
	$P3
(*, 
fun
, 
obje˘_t
 *, 
ob
, , 
Êag
) {

4383 
ödex
, 
ru¡ime_ödex
;

4384 
¥ogøm_t
 *
¥og
;

4385 
Êags
;

4387 
	`DEBUG_CHECK
(
ob
->
Êags
 & 
O_DESTRUCTED
,

4390 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

4391 
	`lﬂd_ob_‰om_sw≠
(
ob
);

4393 i‡(
fun
[0] =
APPLY___INIT_SPECIAL_CHAR
)

4396 
¥og
 = 
	`föd_fun˘i⁄_by_«me
(
ob
, 
fun
, &
ödex
, &
ru¡ime_ödex
);

4397 i‡(!
¥og
)  0;

4399 
Êags
 = 
ob
->
¥og
->
fun˘i⁄_Êags
[
ru¡ime_ödex
];

4401 i‡((
Êags
 & 
FUNC_UNDEFINED
Ë|| (!
Êag
 && (Êag†& (
DECL_PROTECTED
|
DECL_PRIVATE
|
DECL_HIDDEN
))))

4404  
¥og
->
«me
;

4405 
	}
}

4407 #i‚de‡
NO_SHADOWS


4412 
is_°©ic
 
	$P2
(*, 
fun
, 
obje˘_t
 *, 
ob
)

4414 
ödex
;

4415 
ru¡ime_ödex
;

4416 
¥ogøm_t
 *
¥og
;

4417 
Êags
;

4419 
	`DEBUG_CHECK
(
ob
->
Êags
 & 
O_DESTRUCTED
,

4422 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

4423 
	`lﬂd_ob_‰om_sw≠
(
ob
);

4425 
¥og
 = 
	`föd_fun˘i⁄_by_«me
(
ob
, 
fun
, &
ödex
, &
ru¡ime_ödex
);

4426 i‡(!
¥og
)  0;

4428 
Êags
 = 
ob
->
¥og
->
fun˘i⁄_Êags
[
ru¡ime_ödex
];

4429 i‡(
Êags
 & (
FUNC_UNDEFINED
|
FUNC_PROTOTYPE
))

4431 i‡(
Êags
 & (
DECL_PROTECTED
|
DECL_PRIVATE
|
DECL_HIDDEN
))

4435 
	}
}

4444 
ˇŒ_dúe˘
 
	$P4
(
obje˘_t
 *, 
ob
, , 
off£t
, , 
‹igö
, , 
num_¨g
) {

4445 
fun˘i⁄_t
 *
fu≈
;

4446 
¥ogøm_t
 *
¥og
 = 
ob
->prog;

4448 
ob
->
time_of_ªf
 = 
cuºít_time
;

4449 
	`push_c⁄åﬁ_°ack
(
FRAME_FUNCTION
 | 
FRAME_OB_CHANGE
);

4450 
ˇŒî_ty≥
 = 
‹igö
;

4451 
c•
->
num_loˇl_v¨übÀs
 = 
num_¨g
;

4452 
cuºít_¥og
 = 
¥og
;

4453 
fu≈
 = 
	`£tup_√w_‰ame
(
off£t
);

4454 
¥evious_ob
 = 
cuºít_obje˘
;

4455 
cuºít_obje˘
 = 
ob
;

4456 
	`ˇŒ_¥ogøm
(
cuºít_¥og
, 
fu≈
->
addªss
);

4457 
	}
}

4459 
å™¶©e_absﬁuã_löe
 
	$P4
(, 
abs_löe
, *, 
fûe_öfo
,

4460 *, 
ªt_fûe
, *, 
ªt_löe
) {

4461 *
p1
, *
p2
;

4462 
fûe
;

4463 
löe_tmp
 = 
abs_löe
;

4466 
p1
 = 
fûe_öfo
;

4467 
löe_tmp
 > *
p1
) {

4468 
löe_tmp
 -*
p1
;

4469 
p1
 += 2;

4471 
fûe
 = 
p1
[1];

4474 
p2
 = 
fûe_öfo
;

4475 
p2
 < 
p1
) {

4476 i‡(
p2
[1] =
fûe
)

4477 
löe_tmp
 +*
p2
;

4478 
p2
 += 2;

4480 *
ªt_löe
 = 
löe_tmp
;

4481 *
ªt_fûe
 = 
fûe
;

4482 
	}
}

4484 
föd_löe
 
	$P4
(*, 
p
, 
¥ogøm_t
 *, 
¥ogp
,

4485 **, 
ªt_fûe
, *, 
ªt_löe
 )

4487 
off£t
;

4488 *
 s
;

4489 
ADDRESS_TYPE
 
abs_löe
;

4490 
fûe_idx
;

4492 *
ªt_fûe
 = "";

4493 *
ªt_löe
 = 0;

4495 i‡(!
¥ogp
)  1;

4496 i‡(
¥ogp
 =&
Áke_¥og
)  2;

4498 #i‡
	`deföed
(
LPC_TO_C
)

4500 i‡(
¥ogp
->
¥ogøm_size
 == 0)

4509 i‡(!
¥ogp
->
löe_öfo
) {

4510 
	`lﬂd_löe_numbîs
(
¥ogp
);

4511 i‡(!
¥ogp
->
löe_öfo
)

4514 
off£t
 = 
p
 - 
¥ogp
->
¥ogøm
;

4515 
	`DEBUG_CHECK2
(
off£t
 > (Ë
¥ogp
->
¥ogøm_size
,

4516 "IŒegÆ off£à%d i¿obje˘ /%s\n", 
off£t
, 
¥ogp
->
«me
);

4518 
 s
 = 
¥ogp
->
löe_öfo
;

4519 
off£t
 > *
 s
) {

4520 
off£t
 -*
 s
;

4521 
 s
 +((
ADDRESS_TYPE
) + 1);

4524 #i‡!
	`deföed
(
USE_32BIT_ADDRESSES
Ë&& !deföed(
LPC_TO_C
)

4525 
	`COPY_SHORT
(&
abs_löe
, 
 s
 + 1);

4527 
	`COPY_INT
(&
abs_löe
, 
 s
 + 1);

4530 
	`å™¶©e_absﬁuã_löe
(
abs_löe
, &
¥ogp
->
fûe_öfo
[2],

4531 &
fûe_idx
, 
ªt_löe
);

4533 *
ªt_fûe
 = 
¥ogp
->
°rögs
[
fûe_idx
 - 1];

4535 
	}
}

4537 
gë_ex∂icô_löe_numbî_öfo
 
	$P4
(*, 
p
, 
¥ogøm_t
 *, 
¥og
,

4538 **, 
ªt_fûe
, *, 
ªt_löe
) {

4539 
	`föd_löe
(
p
, 
¥og
, 
ªt_fûe
, 
ªt_löe
);

4540 i‡(!(*
ªt_fûe
))

4541 *
ªt_fûe
 = 
¥og
->
«me
;

4542 
	}
}

4544 
gë_löe_numbî_öfo
 
	$P2
(**, 
ªt_fûe
, *, 
ªt_löe
)

4546 
	`föd_löe
(
pc
, 
cuºít_¥og
, 
ªt_fûe
, 
ªt_löe
);

4547 i‡(!(*
ªt_fûe
))

4548 *
ªt_fûe
 = 
cuºít_¥og
->
«me
;

4549 
	}
}

4551 * 
gë_löe_numbî
 
	$P2
(*, 
p
, 
¥ogøm_t
 *, 
¥ogp
)

4553 
buf
[256];

4554 
i
;

4555 *
fûe
;

4556 
löe
;

4558 
i
 = 
	`föd_löe
(
p
, 
¥ogp
, &
fûe
, &
löe
);

4560 
i
) {

4562 
	`°r˝y
(
buf
, "(noÖrogram)");

4563  
buf
;

4565 *
buf
 = 0;

4566  
buf
;

4568 
	`°r˝y
(
buf
, "(compiledÖrogram)");

4569  
buf
;

4571 
	`°r˝y
(
buf
, "(noÜineÇumbers)");

4572  
buf
;

4574 
	`°r˝y
(
buf
, "(includesÅoo deep)");

4575  
buf
;

4577 i‡(!
fûe
)

4578 
fûe
 = 
¥ogp
->
«me
;

4579 
	`•rötf
(
buf
, "/%s:%d", 
fûe
, 
löe
);

4580  
buf
;

4581 
	}
}

4583 
dump_åa˚_löe
 
	$P4
(*, 
‚ame
, *, 
≤ame
,

4584 *, 
ob«me
, *, 
whîe
) {

4585 
löe
[256];

4586 *
íd
 = 
	`EndOf
(
löe
);

4587 *
p
;

4589 
p
 = 
	`°Ωut
(
löe
, 
íd
, "Object: ");

4590 i‡(
ob«me
[0] !'<' && 
p
 < 
íd
)

4591 *
p
++ = '/';

4592 
p
 = 
	`°Ωut
’, 
íd
, 
ob«me
);

4593 
p
 = 
	`°Ωut
’, 
íd
, ", Program: ");

4594 i‡(
≤ame
[0] !'<' && 
p
 < 
íd
)

4595 *
p
++ = '/';

4596 
p
 = 
	`°Ωut
’, 
íd
, 
≤ame
);

4597 
p
 = 
	`°Ωut
’, 
íd
, "\n in ");

4598 
p
 = 
	`°Ωut
’, 
íd
, 
‚ame
);

4599 
p
 = 
	`°Ωut
’, 
íd
, "()át ");

4600 
p
 = 
	`°Ωut
’, 
íd
, 
whîe
);

4601 
p
 = 
	`°Ωut
’, 
íd
, "\n");

4602 
	`debug_mesßge
(
löe
);

4603 
	}
}

4609 *
dump_åa˚
 
	$P1
(, 
how
)

4611 
c⁄åﬁ_°ack_t
 *
p
;

4612 *
ªt
 = 0;

4613 *
‚ame
;

4614 
num_¨g
 = -1, 
num_loˇl
 = -1;

4616 #i‡
	`deföed
(
ARGUMENTS_IN_TRACEBACK
Ë|| deföed(
LOCALS_IN_TRACEBACK
)

4617 
svÆue_t
 *
±r
;

4618 
i
, 
c⁄ãxt_ßved
 = 0;

4619 
îr‹_c⁄ãxt_t
 
ec⁄
;

4622 i‡(
cuºít_¥og
 == 0)

4624 i‡(
c•
 < &
c⁄åﬁ_°ack
[0]) {

4628 #i‡
	`deföed
(
ARGUMENTS_IN_TRACEBACK
Ë|| deföed(
LOCALS_IN_TRACEBACK
)

4637 i‡(!
max_evÆ_îr‹
 && !
too_dìp_îr‹
) {

4638 i‡(!
	`ßve_c⁄ãxt
(&
ec⁄
))

4640 
c⁄ãxt_ßved
 = 1;

4641 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

4642 
	`ª°‹e_c⁄ãxt
(&
ec⁄
);

4643 
	`p›_c⁄ãxt
(&
ec⁄
);

4649 #ifde‡
TRACE_CODE


4650 i‡(
how
)

4651 
	`œ°_ö°ru˘i⁄s
();

4653 
	`debug_mesßge
("---Årace ---\n");

4654 
p
 = &
c⁄åﬁ_°ack
[0];Ö < 
c•
;Ö++) {

4655 
p
[0].
‰ameköd
 & 
FRAME_MASK
) {

4656 
FRAME_FUNCTION
:

4657 
	`gë_åa˚_dëaûs
(
p
[1].
¥og
,Ö[0].
‰
.
èbÀ_ödex
,

4658 &
‚ame
, &
num_¨g
, &
num_loˇl
);

4659 
	`dump_åa˚_löe
(
‚ame
, 
p
[1].
¥og
->
«me
,Ö[1].
ob
->name,

4660 
	`gë_löe_numbî
(
p
[1].
pc
,Ö[1].
¥og
));

4661 i‡(
	`°rcmp
(
‚ame
, "heart_beat") == 0)

4662 
ªt
 = 
p
->
ob
 ?Ö->ob->
«me
 : 0;

4664 
FRAME_FUNP
:

4665 
	`dump_åa˚_löe
("<fun˘i⁄>", 
p
[1].
¥og
->
«me
,Ö[1].
ob
->name,

4666 
	`gë_löe_numbî
(
p
[1].
pc
,Ö[1].
¥og
));

4667 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

4668 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

4670 
FRAME_FAKE
:

4671 
	`dump_åa˚_löe
("<fun˘i⁄>", 
p
[1].
¥og
->
«me
,Ö[1].
ob
->name,

4672 
	`gë_löe_numbî
(
p
[1].
pc
,Ö[1].
¥og
));

4673 
num_¨g
 = -1;

4675 
FRAME_CATCH
:

4676 
	`dump_åa˚_löe
("<ˇtch>", 
p
[1].
¥og
->
«me
,Ö[1].
ob
->name,

4677 
	`gë_löe_numbî
(
p
[1].
pc
,Ö[1].
¥og
));

4678 
num_¨g
 = -1;

4680 #ifde‡
DEBUG


4682 
	`Áèl
("unknownÅype of frame\n");

4685 #ifde‡
ARGUMENTS_IN_TRACEBACK


4686 i‡(
num_¨g
 != -1) {

4687 
±r
 = 
p
[1].
Â
;

4688 
	`debug_mesßge
("arguments were (");

4689 
i
 = 0; i < 
num_¨g
; i++) {

4690 
outbuf„r_t
 
outbuf
;

4692 i‡(
i
) {

4693 
	`debug_mesßge
(",");

4695 
	`outbuf_zîo
(&
outbuf
);

4696 
	`svÆue_to_°rög
(&
±r
[
i
], &
outbuf
, 0, 0, 0);

4698 
	`debug_mesßge
("%s", 
outbuf
.
buf„r
);

4699 
	`FREE_MSTR
(
outbuf
.
buf„r
);

4701 
	`debug_mesßge
(")\n");

4704 #ifde‡
LOCALS_IN_TRACEBACK


4705 i‡(
num_loˇl
 > 0 && 
num_¨g
 != -1) {

4706 
±r
 = 
p
[1].
Â
 + 
num_¨g
;

4707 
	`debug_mesßge
("locals were: ");

4708 
i
 = 0; i < 
num_loˇl
; i++) {

4709 
outbuf„r_t
 
outbuf
;

4711 i‡(
i
) {

4712 
	`debug_mesßge
(",");

4714 
	`outbuf_zîo
(&
outbuf
);

4715 
	`svÆue_to_°rög
(&
±r
[
i
], &
outbuf
, 0, 0, 0);

4717 
	`debug_mesßge
("%s", 
outbuf
.
buf„r
);

4718 
	`FREE_MSTR
(
outbuf
.
buf„r
);

4720 
	`debug_mesßge
("\n");

4724 
p
[0].
‰ameköd
 & 
FRAME_MASK
) {

4725 
FRAME_FUNCTION
:

4726 
	`gë_åa˚_dëaûs
(
cuºít_¥og
, 
p
[0].
‰
.
èbÀ_ödex
,

4727 &
‚ame
, &
num_¨g
, &
num_loˇl
);

4728 
	`debug_mesßge
("'%15s' in '/%20s' ('/%20s') %s\n",

4729 
‚ame
, 
cuºít_¥og
->
«me
, 
cuºít_obje˘
->name,

4730 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
));

4732 
FRAME_FUNP
:

4733 
	`debug_mesßge
("' <function>' in '/%20s' ('/%20s') %s\n",

4734 
cuºít_¥og
->
«me
, 
cuºít_obje˘
->name,

4735 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
));

4736 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

4737 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

4739 
FRAME_FAKE
:

4740 
	`debug_mesßge
("' <function>' in '/%20s' ('/%20s') %s\n",

4741 
cuºít_¥og
->
«me
, 
cuºít_obje˘
->name,

4742 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
));

4743 
num_¨g
 = -1;

4745 
FRAME_CATCH
:

4746 
	`debug_mesßge
("' CATCH' in '/%20s' ('/%20s') %s\n",

4747 
cuºít_¥og
->
«me
, 
cuºít_obje˘
->name,

4748 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
));

4749 
num_¨g
 = -1;

4752 #ifde‡
ARGUMENTS_IN_TRACEBACK


4753 i‡(
num_¨g
 != -1) {

4754 
	`debug_mesßge
("arguments were (");

4755 
i
 = 0; i < 
num_¨g
; i++) {

4756 
outbuf„r_t
 
outbuf
;

4758 i‡(
i
) {

4759 
	`debug_mesßge
(",");

4761 
	`outbuf_zîo
(&
outbuf
);

4762 
	`svÆue_to_°rög
(&
Â
[
i
], &
outbuf
, 0, 0, 0);

4764 
	`debug_mesßge
("%s", 
outbuf
.
buf„r
);

4765 
	`FREE_MSTR
(
outbuf
.
buf„r
);

4767 
	`debug_mesßge
(")\n");

4770 #ifde‡
LOCALS_IN_TRACEBACK


4771 i‡(
num_loˇl
 > 0 && 
num_¨g
 != -1) {

4772 
±r
 = 
Â
 + 
num_¨g
;

4773 
	`debug_mesßge
("locals were: ");

4774 
i
 = 0; i < 
num_loˇl
; i++) {

4775 
outbuf„r_t
 
outbuf
;

4777 i‡(
i
) {

4778 
	`debug_mesßge
(",");

4780 
	`outbuf_zîo
(&
outbuf
);

4781 
	`svÆue_to_°rög
(&
±r
[
i
], &
outbuf
, 0, 0, 0);

4783 
	`debug_mesßge
("%s", 
outbuf
.
buf„r
);

4784 
	`FREE_MSTR
(
outbuf
.
buf„r
);

4786 
	`debug_mesßge
("\n");

4789 
	`debug_mesßge
("---ÉndÅrace ---\n");

4790 #i‡
	`deföed
(
ARGUMENTS_IN_TRACEBACK
Ë|| deföed(
LOCALS_IN_TRACEBACK
)

4791 i‡(
c⁄ãxt_ßved
)

4792 
	`p›_c⁄ãxt
(&
ec⁄
);

4794  
ªt
;

4795 
	}
}

4797 
¨øy_t
 *
	$gë_svÆue_åa˚
()

4799 
c⁄åﬁ_°ack_t
 *
p
;

4800 
¨øy_t
 *
v
;

4801 
m≠pög_t
 *
m
;

4802 *
fûe
;

4803 
löe
;

4804 *
‚ame
;

4805 
num_¨g
, 
num_loˇl
;

4807 #i‡
	`deföed
(
ARGUMENTS_IN_TRACEBACK
Ë|| deföed(
LOCALS_IN_TRACEBACK
)

4808 
svÆue_t
 *
±r
;

4809 
i
;

4812 i‡(
cuºít_¥og
 == 0)

4813  &
the_nuŒ_¨øy
;

4814 i‡(
c•
 < &
c⁄åﬁ_°ack
[0]) {

4815  &
the_nuŒ_¨øy
;

4817 
v
 = 
	`Æloˇã_em±y_¨øy
((
c•
 - &
c⁄åﬁ_°ack
[0]) + 1);

4818 
p
 = &
c⁄åﬁ_°ack
[0];Ö < 
c•
;Ö++) {

4819 
m
 = 
	`Æloˇã_m≠pög
(6);

4820 
p
[0].
‰ameköd
 & 
FRAME_MASK
) {

4821 
FRAME_FUNCTION
:

4822 
	`gë_åa˚_dëaûs
(
p
[1].
¥og
,Ö[0].
‰
.
èbÀ_ödex
,

4823 &
‚ame
, &
num_¨g
, &
num_loˇl
);

4824 
	`add_m≠pög_°rög
(
m
, "fun˘i⁄", 
‚ame
);

4826 
FRAME_CATCH
:

4827 
	`add_m≠pög_°rög
(
m
, "function", "CATCH");

4828 
num_¨g
 = -1;

4830 
FRAME_FAKE
:

4831 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

4832 
num_¨g
 = -1;

4834 
FRAME_FUNP
:

4835 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

4836 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

4837 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

4839 #ifde‡
DEBUG


4841 
	`Áèl
("unknownÅype of frame\n");

4844 
	`add_m≠pög_mÆlo˚d_°rög
(
m
, "¥ogøm", 
	`add_¶ash
(
p
[1].
¥og
->
«me
));

4845 
	`add_m≠pög_obje˘
(
m
, "obje˘", 
p
[1].
ob
);

4846 
	`gë_ex∂icô_löe_numbî_öfo
(
p
[1].
pc
,Ö[1].
¥og
, &
fûe
, &
löe
);

4847 
	`add_m≠pög_mÆlo˚d_°rög
(
m
, "fûe", 
	`add_¶ash
(
fûe
));

4848 
	`add_m≠pög_∑ú
(
m
, "löe", 
löe
);

4849 #ifde‡
ARGUMENTS_IN_TRACEBACK


4850 i‡(
num_¨g
 != -1) {

4851 
¨øy_t
 *
v2
;

4853 
±r
 = 
p
[1].
Â
;

4854 
v2
 = 
	`Æloˇã_em±y_¨øy
(
num_¨g
);

4855 
i
 = 0; i < 
num_¨g
; i++) {

4856 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
±r
[i]);

4858 
	`add_m≠pög_¨øy
(
m
, "¨gumíts", 
v2
);

4859 
v2
->
ªf
--;

4862 #ifde‡
LOCALS_IN_TRACEBACK


4863 i‡(
num_loˇl
 > 0 && 
num_¨g
 != -1) {

4864 
¨øy_t
 *
v2
;

4866 
±r
 = 
p
[1].
Â
 + 
num_¨g
;

4867 
v2
 = 
	`Æloˇã_em±y_¨øy
(
num_loˇl
);

4868 
i
 = 0; i < 
num_loˇl
; i++) {

4869 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
±r
[i]);

4871 
	`add_m≠pög_¨øy
(
m
, "loˇls", 
v2
);

4872 
v2
->
ªf
--;

4875 
v
->
ôem
[(
p
 - &
c⁄åﬁ_°ack
[0])].
ty≥
 = 
T_MAPPING
;

4876 
v
->
ôem
[(
p
 - &
c⁄åﬁ_°ack
[0])].
u
.
m≠
 = 
m
;

4878 
m
 = 
	`Æloˇã_m≠pög
(6);

4879 
p
[0].
‰ameköd
 & 
FRAME_MASK
) {

4880 
FRAME_FUNCTION
:

4881 
	`gë_åa˚_dëaûs
(
cuºít_¥og
, 
p
[0].
‰
.
èbÀ_ödex
,

4882 &
‚ame
, &
num_¨g
, &
num_loˇl
);

4883 
	`add_m≠pög_°rög
(
m
, "fun˘i⁄", 
‚ame
);

4885 
FRAME_CATCH
:

4886 
	`add_m≠pög_°rög
(
m
, "function", "CATCH");

4887 
num_¨g
 = -1;

4889 
FRAME_FAKE
:

4890 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

4891 
num_¨g
 = -1;

4893 
FRAME_FUNP
:

4894 
	`add_m≠pög_°rög
(
m
, "function", "<function>");

4895 
num_¨g
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_arg;

4896 
num_loˇl
 = 
p
[0].
‰
.
fu≈
->
f
.
fun˘i⁄Æ
.num_local;

4899 
	`add_m≠pög_mÆlo˚d_°rög
(
m
, "¥ogøm", 
	`add_¶ash
(
cuºít_¥og
->
«me
));

4900 
	`add_m≠pög_obje˘
(
m
, "obje˘", 
cuºít_obje˘
);

4901 
	`gë_löe_numbî_öfo
(&
fûe
, &
löe
);

4902 
	`add_m≠pög_mÆlo˚d_°rög
(
m
, "fûe", 
	`add_¶ash
(
fûe
));

4903 
	`add_m≠pög_∑ú
(
m
, "löe", 
löe
);

4904 #ifde‡
ARGUMENTS_IN_TRACEBACK


4905 i‡(
num_¨g
 != -1) {

4906 
¨øy_t
 *
v2
;

4908 
v2
 = 
	`Æloˇã_em±y_¨øy
(
num_¨g
);

4909 
i
 = 0; i < 
num_¨g
; i++) {

4910 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
Â
[i]);

4912 
	`add_m≠pög_¨øy
(
m
, "¨gumíts", 
v2
);

4913 
v2
->
ªf
--;

4916 #ifde‡
LOCALS_IN_TRACEBACK


4917 i‡(
num_loˇl
 > 0 && 
num_¨g
 != -1) {

4918 
¨øy_t
 *
v2
;

4920 
v2
 = 
	`Æloˇã_em±y_¨øy
(
num_loˇl
);

4921 
i
 = 0; i < 
num_loˇl
; i++) {

4922 
	`assign_svÆue_no_‰ì
(&
v2
->
ôem
[
i
], &
Â
[ò+ 
num_¨g
]);

4924 
	`add_m≠pög_¨øy
(
m
, "loˇls", 
v2
);

4925 
v2
->
ªf
--;

4928 
v
->
ôem
[(
c•
 - &
c⁄åﬁ_°ack
[0])].
ty≥
 = 
T_MAPPING
;

4929 
v
->
ôem
[(
c•
 - &
c⁄åﬁ_°ack
[0])].
u
.
m≠
 = 
m
;

4931 
v
->
ªf
--;

4932  
v
;

4933 
	}
}

4935 * 
	$gë_löe_numbî_if_™y
()

4937 i‡(
cuºít_¥og
)

4938  
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
);

4940 
	}
}

4942 
	#SSCANF_ASSIGN_SVALUE_STRING
(
S
) \

4943 
¨g
->
ty≥
 = 
T_STRING
; \

4944 
¨g
->
u
.
°rög
 = 
S
; \

4945 
¨g
->
subty≥
 = 
STRING_MALLOC
; \

4946 
¨g
--; \

4947 
num_¨g
--

	)

4949 
	#SSCANF_ASSIGN_SVALUE_NUMBER
(
N
) \

4950 
¨g
->
ty≥
 = 
T_NUMBER
; \

4951 
¨g
->
subty≥
 = 0; \

4952 
¨g
->
u
.
numbî
 = 
N
; \

4953 
¨g
--; \

4954 
num_¨g
--

	)

4956 
	#SSCANF_ASSIGN_SVALUE
(
T
,
U
,
V
) \

4957 
¨g
->
ty≥
 = 
T
; \

4958 
¨g
->
U
 = 
V
; \

4959 
¨g
--; \

4960 
num_¨g
--

	)

4963 
öãr_ssˇnf
 
	$P4
(
svÆue_t
 *, 
¨g
, svÆue_à*, 
s0
, svÆue_à*, 
s1
, , 
num_¨g
)

4965 *
fmt
;

4966 *
ö_°rög
;

4967 
numbî_of_m©ches
;

4968 
skùme
;

4969 
ba£
 = 10;

4970 
num
;

4971 *
m©ch
, 
ﬁd_ch¨
;

4972 *
tmp
;

4977 
	`CHECK_TYPES
(
s0
, 
T_STRING
, 1, 
F_SSCANF
);

4978 
ö_°rög
 = 
s0
->
u
.
°rög
;

4983 
	`CHECK_TYPES
(
s1
, 
T_STRING
, 2, 
F_SSCANF
);

4984 
fmt
 = 
s1
->
u
.
°rög
;

4989 
numbî_of_m©ches
 = 0; 
num_¨g
 >= 0;Çumber_of_matches++) {

4990 *
fmt
) {

4991 i‡(*
fmt
 == '%') {

4992 i‡(*++
fmt
 == '%') {

4993 i‡(*
ö_°rög
++ !'%'Ë 
numbî_of_m©ches
;

4994 
fmt
++;

4997 i‡(!*
fmt
)

4998 
	`îr‹
("Format string cannotÉnd in '%%' in sscanf()\n");

5001 i‡(*
fmt
++ !*
ö_°rög
++Ë 
numbî_of_m©ches
;

5004 i‡(!*
fmt
) {

5010 i‡(*
ö_°rög
 && 
num_¨g
) {

5011 
numbî_of_m©ches
++;

5012 
	`SSCANF_ASSIGN_SVALUE_STRING
(
	`°rög_c›y
(
ö_°rög
, "sscanf"));

5016 
	`DEBUG_CHECK
(
fmt
[-1] != '%', "In sscanf, should beá %%Çow!\n");

5018 i‡((
skùme
 = (*
fmt
 == '*'))) fmt++;

5019 i‡(
num_¨g
 < 1 && *
fmt
 != '%') {

5024 
	`îr‹
("Too fewárgumentsÅo sscanf()\n");

5027 *
fmt
++) {

5029 
ba£
 = 16;

5033 
tmp
 = 
ö_°rög
;

5034 
num
 = (Ë
	`°πﬁ
(
ö_°rög
, &ö_°rög, 
ba£
);

5035 i‡(
tmp
 =
ö_°rög
Ë 
numbî_of_m©ches
;

5036 i‡(!
skùme
) {

5037 
	`SSCANF_ASSIGN_SVALUE_NUMBER
(
num
);

5039 
ba£
 = 10;

5044 
tmp_num
;

5046 
tmp
 = 
ö_°rög
;

5047 
tmp_num
 = 
	`_°πof
(
ö_°rög
, &in_string);

5048 i‡(
tmp
 =
ö_°rög
) 
numbî_of_m©ches
;

5049 i‡(!
skùme
) {

5050 
	`SSCANF_ASSIGN_SVALUE
(
T_REAL
, 
u
.
ªÆ
, 
tmp_num
);

5056 
ªgexp
 *
ªg
;

5058 
tmp
 = 
fmt
;

5059 
num
 = 1;

5061 *
tmp
) {

5063 i‡(*++
tmp
) {

5064 
tmp
++;

5068 
	`îr‹
("BadÑegex∞f‹m©: '%%%s' i¿ssˇn‡f‹m© såög\n", 
fmt
);

5070 
num
++;

5073 
tmp
++;

5076 i‡(!--
num
) ;

5077 
tmp
++;

5081 
n
 = 
tmp
 - 
fmt
;

5082 *
buf
 = (*)
	`DXALLOC
(
n
 + 1, 
TAG_TEMPORARY
,

5084 
	`mem˝y
(
buf
, 
fmt
, 
n
);

5085 
buf
[
n
] = 0;

5086 
ªgexp_u£r
 = 
EFUN_REGEXP
;

5087 
ªg
 = 
	`ªgcomp
((*)
buf
, 0);

5088 
	`FREE
(
buf
);

5089 i‡(!
ªg
Ë
	`îr‹
(
ªgexp_îr‹
);

5090 i‡(!
	`ªgexec
(
ªg
, 
ö_°rög
Ë|| (ö_°rög !ªg->
°¨ç
[0])) {

5091 
	`FREE
(
ªg
);

5092  
numbî_of_m©ches
;

5094 i‡(!
skùme
) {

5095 
n
 = *
ªg
->
ídp
 - 
ö_°rög
;

5096 
buf
 = 
	`√w_°rög
(
n
, "sscanfÑegexpÑeturn");

5097 
	`mem˝y
(
buf
, 
ö_°rög
, 
n
);

5098 
buf
[
n
] = 0;

5099 
	`SSCANF_ASSIGN_SVALUE_STRING
(
buf
);

5101 
ö_°rög
 = *
ªg
->
ídp
;

5102 
	`FREE
((*)
ªg
);

5103 
fmt
 = ++
tmp
;

5112 
	`îr‹
("BadÅy≥ : '%%%c' i¿ssˇnf(Ëf‹m© såög\n", 
fmt
[-1]);

5123 i‡(!*
fmt
) {

5124 
numbî_of_m©ches
++;

5125 i‡(!
skùme
) {

5126 
	`SSCANF_ASSIGN_SVALUE_STRING
(
	`°rög_c›y
(
ö_°rög
, "sscanf"));

5135 i‡(*
fmt
++ == '%') {

5136 
skùme2
;

5138 
tmp
 = 
ö_°rög
;

5139 i‡((
skùme2
 = (*
fmt
 == '*'))) fmt++;

5140 i‡(
num_¨g
 < (!
skùme
 + !
skùme2
Ë&& *
fmt
 != '%')

5141 
	`îr‹
("Too fewárgumentsÅo sscanf().\n");

5143 
numbî_of_m©ches
++;

5145 *
fmt
++) {

5147 
	`îr‹
("IllegalÅo have 2ádjacent %%s's in format string in sscanf()\n");

5150 *
tmp
 && (*tmp != '0'))Åmp++;

5151 i‡(*
tmp
 == '0') {

5152 i‡((
tmp
[1] == 'x' ||Åmp[1] == 'X') &&

5153 
	`uisxdigô
(
tmp
[2])) ;

5154 
tmp
 += 2;

5156 } *
tmp
);

5159 *
tmp
 && !
	`uisdigô
(*tmp))Åmp++;

5162 *
tmp
 && !
	`uisdigô
(*tmp) &&

5163 (*
tmp
 !'.' || !
	`uisdigô
(tmp[1])))Åmp++;

5166 *
tmp
 && (*tmp != '%'))Åmp++;

5170 
ªgexp
 *
ªg
;

5172 
tmp
 = 
fmt
;

5173 
num
 = 1;

5175 *
tmp
) {

5177 i‡(*++
tmp
) {

5178 
tmp
++;

5182 
	`îr‹
("BadÑegex∞f‹m© : '%%%s' i¿ssˇn‡f‹m© såög\n", 
fmt
);

5184 
num
++;

5187 
tmp
++;

5191 i‡(!--
num
) ;

5192 
tmp
++;

5196 
n
 = 
tmp
 - 
fmt
;

5197 *
buf
 = (*)
	`DXALLOC
(
n
 + 1, 
TAG_TEMPORARY
,

5199 
	`mem˝y
(
buf
, 
fmt
, 
n
);

5200 
buf
[
n
] = 0;

5201 
ªgexp_u£r
 = 
EFUN_REGEXP
;

5202 
ªg
 = 
	`ªgcomp
((*)
buf
, 0);

5203 
	`FREE
(
buf
);

5204 i‡(!
ªg
Ë
	`îr‹
(
ªgexp_îr‹
);

5205 i‡(!
	`ªgexec
(
ªg
, 
ö_°rög
)) {

5206 i‡(!
skùme
) {

5207 
	`SSCANF_ASSIGN_SVALUE_STRING
(
	`°rög_c›y
(
ö_°rög
, "sscanf"));

5209 
	`FREE
((*)
ªg
);

5210  
numbî_of_m©ches
;

5212 i‡(!
skùme
) {

5213 
m©ch
 = 
	`√w_°rög
(
num
 = (*
ªg
->
°¨ç
 - 
ö_°rög
), "inter_sscanf");

5214 
	`mem˝y
(
m©ch
, 
ö_°rög
, 
num
);

5215 
m©ch
[
num
] = 0;

5216 
	`SSCANF_ASSIGN_SVALUE_STRING
(
m©ch
);

5218 
ö_°rög
 = *
ªg
->
ídp
;

5219 i‡(!
skùme2
) {

5220 
m©ch
 = 
	`√w_°rög
(
num
 = (*
ªg
->
ídp
 - *ªg->
°¨ç
), "inter_sscanf");

5221 
	`mem˝y
(
m©ch
, *
ªg
->
°¨ç
, 
num
);

5222 
m©ch
[
num
] = 0;

5223 
	`SSCANF_ASSIGN_SVALUE_STRING
(
m©ch
);

5225 
	`FREE
((*)
ªg
);

5227 
fmt
 = ++
tmp
;

5235 
	`îr‹
("Format string can'tÉnd in '%%'.\n");

5237 
	`îr‹
("BadÅy≥ : '%%%c' i¿ssˇnf(Ëf‹m© såög\n", 
fmt
[-1]);

5240 i‡(!
skùme
) {

5241 
m©ch
 = 
	`√w_°rög
(
num
 = (
tmp
 - 
ö_°rög
), "inter_sscanf");

5242 
	`mem˝y
(
m©ch
, 
ö_°rög
, 
num
);

5243 
m©ch
[
num
] = 0;

5244 
	`SSCANF_ASSIGN_SVALUE_STRING
(
m©ch
);

5246 i‡(!*(
ö_°rög
 = 
tmp
)Ë 
numbî_of_m©ches
;

5247 
fmt
[-1]) {

5249 
ba£
 = 16;

5252 
num
 = (Ë
	`°πﬁ
(
ö_°rög
, &ö_°rög, 
ba£
);

5254 i‡(!
skùme2
) {

5255 
	`SSCANF_ASSIGN_SVALUE_NUMBER
(
num
);

5257 
ba£
 = 10;

5262 
tmp_num
 = 
	`_°πof
(
ö_°rög
, &in_string);

5263 i‡(!
skùme2
) {

5264 
	`SSCANF_ASSIGN_SVALUE
(
T_REAL
, 
u
.
ªÆ
, 
tmp_num
);

5269 
ö_°rög
++;

5273 i‡((
tmp
 = 
	`°rchr
(
fmt
, '%')Ë!
NULL
Ë
num
 =Åmp - fmt + 1;

5275 
tmp
 = 
fmt
 + (
num
 = 
	`°æí
(fmt));

5276 
num
++;

5279 
ﬁd_ch¨
 = *--
fmt
;

5280 
m©ch
 = 
ö_°rög
;

5285 *
ö_°rög
) {

5286 i‡((*
ö_°rög
 =
ﬁd_ch¨
Ë&& !
	`°∫cmp
(ö_°rög, 
fmt
, 
num
)) {

5290 i‡(!
skùme
) {

5291 *
√wm©ch
;

5293 
√wm©ch
 = 
	`√w_°rög
(
skùme
 = (
ö_°rög
 - 
m©ch
), "inter_sscanf");

5294 
	`mem˝y
(
√wm©ch
, 
m©ch
, 
skùme
);

5295 
√wm©ch
[
skùme
] = 0;

5296 
	`SSCANF_ASSIGN_SVALUE_STRING
(
√wm©ch
);

5298 
ö_°rög
 +
num
;

5299 
fmt
 = 
tmp
;

5302 
ö_°rög
++;

5304 i‡(
fmt
 =
tmp
)

5313  
numbî_of_m©ches
;

5314 
	}
}

5317 #ifde‡
OPCPROF


5318 
›cdump
 
	$P1
(*, 
t‚
)

5320 
i
, 
Àn
, 
limô
;

5321 
tbuf
[
SMALL_STRING_SIZE
], *
‚
;

5322 
FILE
 *
Â
;

5324 i‡((
Àn
 = 
	`°æí
(
t‚
)Ë>(
SMALL_STRING_SIZE
 - 7)) {

5325 
	`îr‹
("P©h '%s'Åoÿl⁄g.\n", 
t‚
);

5328 
	`°r˝y
(
tbuf
, 
t‚
);

5329 
	`°r˝y
(
tbuf
 + 
Àn
, ".efun");

5330 
‚
 = 
	`check_vÆid_∑th
(
tbuf
, 
cuºít_obje˘
, "opcprof", 1);

5331 i‡(!
‚
) {

5332 
	`îr‹
("InvÆidÖ©h '%s' f‹ wrôög.\n", 
tbuf
);

5335 
Â
 = 
	`f›í
(
‚
, "w");

5336 i‡(!
Â
) {

5337 
	`îr‹
("U«bÀÅÿ›í %s.\n", 
‚
);

5340 
limô
 = (
›c_efun
Ë/ (
›c_t
);

5341 
i
 = 0; i < 
limô
; i++) {

5342 
	`Ârötf
(
Â
, "%-30s: %10d\n", 
›c_efun
[
i
].
«me
, opc_efun[i].
cou¡
);

5344 
	`f˛o£
(
Â
);

5346 
	`°r˝y
(
tbuf
, 
t‚
);

5347 
	`°r˝y
(
tbuf
 + 
Àn
, ".eoper");

5348 
‚
 = 
	`check_vÆid_∑th
(
tbuf
, 
cuºít_obje˘
, "opcprof", 1);

5349 i‡(!
‚
) {

5350 
	`îr‹
("InvÆidÖ©h '%s' f‹ wrôög.\n", 
tbuf
);

5353 
Â
 = 
	`f›í
(
‚
, "w");

5354 i‡(!
Â
) {

5355 
	`îr‹
("U«bÀÅÿ›í %†f‹ wrôög.\n", 
‚
);

5358 
i
 = 0; i < 
BASE
; i++) {

5359 
	`Ârötf
(
Â
, "%-30s: %10d\n",

5360 
	`quîy_ö°r_«me
(
i
), 
›c_e›î
[i]);

5362 
	`f˛o£
(
Â
);

5363 
	}
}

5367 #ifde‡
OPCPROF_2D


5369 
	m›1
, 
	m›2
;

5370 
	mnum_ˇŒs
;

5371 } 
	ts‹t_ñem_t
;

5373 
s‹t_ñem_cmp
 
	$P2
(
s‹t_ñem_t
 *, 
£1
, s‹t_ñem_à*, 
£2
) {

5374  
£2
->
num_ˇŒs
 - 
£1
->num_calls;

5375 
	}
}

5377 
›cdump
 
	$P1
(*, 
t‚
)

5379 
öd
, 
i
, 
j
, 
Àn
;

5380 
tbuf
[
SMALL_STRING_SIZE
], *
‚
;

5381 
FILE
 *
Â
;

5382 
s‹t_ñem_t
 
›s
[(
BASE
 + 1) * (BASE + 1)];

5384 i‡((
Àn
 = 
	`°æí
(
t‚
)Ë>(
SMALL_STRING_SIZE
 - 10)) {

5385 
	`îr‹
("P©h '%s'Åoÿl⁄g.\n", 
t‚
);

5388 
	`°r˝y
(
tbuf
, 
t‚
);

5389 
	`°r˝y
(
tbuf
 + 
Àn
, ".eop-2d");

5390 
‚
 = 
	`check_vÆid_∑th
(
tbuf
, 
cuºít_obje˘
, "opcprof", 1);

5391 i‡(!
‚
) {

5392 
	`îr‹
("InvÆidÖ©h '%s' f‹ wrôög.\n", 
tbuf
);

5395 
Â
 = 
	`f›í
(
‚
, "w");

5396 i‡(!
Â
) {

5397 
	`îr‹
("U«bÀÅÿ›í %†f‹ wrôög.\n", 
‚
);

5400 
i
 = 0; i <
BASE
; i++) {

5401 
j
 = 0; j <
BASE
; j++) {

5402 
öd
 = 
i
 * (
BASE
 + 1Ë+ 
j
;

5403 
›s
[
öd
].
num_ˇŒs
 = 
›c_e›î_2d
[
i
][
j
];

5404 
›s
[
öd
].
›1
 = 
i
;

5405 
›s
[
öd
].
›2
 = 
j
;

5408 
	`quickS‹t
((*Ë
›s
, (
BASE
 + 1Ë* (BASE + 1), (
s‹t_ñem_t
),

5409 
s‹t_ñem_cmp
);

5410 
i
 = 0; i < (
BASE
 + 1) * (BASE + 1); i++) {

5411 i‡(
›s
[
i
].
num_ˇŒs
)

5412 
	`Ârötf
(
Â
, "%-30†%-30s: %10d\n", 
	`quîy_ö°r_«me
(
›s
[
i
].
›1
),

5413 
	`quîy_ö°r_«me
(
›s
[
i
].
›2
), ops[i].
num_ˇŒs
);

5415 
	`f˛o£
(
Â
);

5416 
	}
}

5422 
ª£t_machöe
 
	$P1
(, 
fú°
)

5424 
c•
 = 
c⁄åﬁ_°ack
 - 1;

5425 i‡(
fú°
)

5426 
•
 = &
°¨t_of_°ack
[-1];

5428 
	`p›_n_ñems
(
•
 - 
°¨t_of_°ack
 + 1);

5429 
	`IF_DEBUG
(
°ack_ö_u£_as_ãmp‹¨y
 = 0);

5431 
	}
}

5433 #ifde‡
TRACE_CODE


5434 *
gë_¨g
 
	$P2
(, 
a
, , 
b
)

5436 
buff
[10];

5437 *
‰om
, *
to
;

5439 
‰om
 = 
¥evious_pc
[
a
];

5440 
to
 = 
¥evious_pc
[
b
];

5441 i‡(
to
 - 
‰om
 < 2)

5443 i‡(
to
 - 
‰om
 == 2) {

5444 
	`•rötf
(
buff
, "%d", 
‰om
[1]);

5445  
buff
;

5447 i‡(
to
 - 
‰om
 == 3) {

5448 
¨g
;

5450 
	`COPY_SHORT
(&
¨g
, 
‰om
 + 1);

5451 
	`•rötf
(
buff
, "%d", ()
¨g
);

5452  
buff
;

5454 i‡(
to
 - 
‰om
 == 5) {

5455 
¨g
;

5457 
	`COPY_INT
(&
¨g
, 
‰om
 + 1);

5458 
	`•rötf
(
buff
, "%d", 
¨g
);

5459  
buff
;

5462 
	}
}

5464 
	$œ°_ö°ru˘i⁄s
()

5466 
i
;

5468 
	`debug_mesßge
("Recent instructionÅrace:\n");

5469 
i
 = 
œ°
;

5471 i‡(
¥evious_ö°ru˘i⁄
[
i
] != 0)

5472 
	`debug_mesßge
("%6x: %3d %8†%-25†(%d)\n", 
¥evious_pc
[
i
],

5473 
¥evious_ö°ru˘i⁄
[
i
],

5474 
	`gë_¨g
(
i
, (i + 1) %

5475 ( 
¥evious_ö°ru˘i⁄
 / ())),

5476 
	`quîy_ö°r_«me
(
¥evious_ö°ru˘i⁄
[
i
]),

5477 
°ack_size
[
i
] + 1);

5478 
i
 = (ò+ 1Ë% ( 
¥evious_ö°ru˘i⁄
 / ());

5479 } 
i
 !
œ°
);

5480  
œ°
;

5481 
	}
}

5486 #ifde‡
TRACE


5488 
do_åa˚
 
	$P3
(*, 
msg
, *, 
‚ame
, *, 
po°
)

5490 *
obj«me
;

5492 i‡(!
TRACEHB
)

5494 
obj«me
 = 
	`TRACETST
(
TRACE_OBJNAME
Ë? (
cuºít_obje˘
 && cuºít_obje˘->
«me
 ? current_object->name : "??") : "";

5495 
	`add_vmesßge
(
comm™d_givî
, "*** %d %*†%†%†%s%s", 
åa˚dïth
,Åø˚dïth, "", 
msg
, 
obj«me
, 
‚ame
, 
po°
);

5496 
	}
}

5503 
ªmove_obje˘_‰om_°ack
 
	$P1
(
obje˘_t
 *, 
ob
)

5505 
svÆue_t
 *
svp
;

5507 
svp
 = 
°¨t_of_°ack
; sv∞<
•
; svp++) {

5508 i‡(
svp
->
ty≥
 !
T_OBJECT
)

5510 i‡(
svp
->
u
.
ob
 != ob)

5512 
	`‰ì_obje˘
(
svp
->
u
.
ob
, "remove_object_from_stack");

5513 
svp
->
ty≥
 = 
T_NUMBER
;

5514 
svp
->
u
.
numbî
 = 0;

5516 
	}
}

5518 
°Ωªf
 
	$P2
(*, 
p
, *, 
s
)

5520 *
p
)

5521 i‡(*
p
++ !*
s
++)

5524 
	}
}

5526 
_°πof
 
	$P2
(*, 
≈å
, **, 
íd±r
)

5528 *
s
 = 
≈å
;

5529 
acc
;

5530 
√g
, 
c
, 
™y
, 
div
;

5532 
div
 = 1;

5533 
√g
 = 0;

5538 
c
 = *
s
++;

5539 } 
	`is•a˚
(
c
));

5540 i‡(
c
 == '-') {

5541 
√g
 = 1;

5542 
c
 = *
s
++;

5543 } i‡(
c
 == '+')

5544 
c
 = *
s
++;

5546 
acc
 = 0, 
™y
 = 0;; 
c
 = *
s
++) {

5547 i‡(
	`isdigô
(
c
))

5548 
c
 -= '0';

5549 i‡((
div
 =1Ë&& (
c
 == '.')) {

5550 
div
 = 10;

5554 i‡(
div
 == 1) {

5555 
acc
 *= () 10;

5556 
acc
 +(Ë
c
;

5558 
acc
 +(Ë
c
 / (Ë
div
;

5559 
div
 *= 10;

5561 
™y
 = 1;

5564 i‡(
√g
)

5565 
acc
 = -acc;

5567 i‡(
íd±r
 != 0)

5568 *
íd±r
 = 
™y
 ? 
s
 - 1 : (*Ë
≈å
;

5570  
acc
;

5571 
	}
}

5573 #ifde‡
DEBUGMALLOC_EXTENSIONS


5574 
	$m¨k_°ack
() {

5575 
svÆue_t
 *
sv
;

5577 
sv
 = 
°¨t_of_°ack
; sv <
•
; sv++Ë
	`m¨k_svÆue
(sv);

5578 
	}
}

5583 
ßve_c⁄ãxt
 
	$P1
(
îr‹_c⁄ãxt_t
 *, 
ec⁄
) {

5584 i‡(
c•
 =&
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
 - 1]) {

5589 
ec⁄
->
ßve_•
 = 
•
;

5590 
ec⁄
->
ßve_c•
 = 
c•
;

5591 
ec⁄
->
ßve_cg•
 = 
cg•
;

5592 
ec⁄
->
ßve_c⁄ãxt
 = 
cuºít_îr‹_c⁄ãxt
;

5594 
cuºít_îr‹_c⁄ãxt
 = 
ec⁄
;

5596 
	}
}

5598 
p›_c⁄ãxt
 
	$P1
(
îr‹_c⁄ãxt_t
 *, 
ec⁄
) {

5599 
cuºít_îr‹_c⁄ãxt
 = 
ec⁄
->
ßve_c⁄ãxt
;

5600 
	}
}

5603 
ª°‹e_c⁄ãxt
 
	$P1
(
îr‹_c⁄ãxt_t
 *, 
ec⁄
) {

5604 
ªf_t
 **
ªÂ
;

5607 
cg•
 !
ec⁄
->
ßve_cg•
)

5608 
	`ª°‹e_comm™d_givî
();

5609 
	`DEBUG_CHECK
(
c•
 < 
ec⁄
->
ßve_c•
, "csp is belowÉcon->csp before unwinding.\n");

5610 i‡(
c•
 > 
ec⁄
->
ßve_c•
) {

5612 #ifde‡
PROFILE_FUNCTIONS


5615 i‡(
c•
 > 
ec⁄
->
ßve_c•
 + 1) {

5616 
c•
 = 
ec⁄
->
ßve_c•
 + 1;

5617 
cuºít_¥og
 = (
c•
+1)->
¥og
;

5620 
c•
 = 
ec⁄
->
ßve_c•
 + 1;

5621 
	`p›_c⁄åﬁ_°ack
();

5623 
	`p›_n_ñems
(
•
 - 
ec⁄
->
ßve_•
);

5624 
ªÂ
 = &
globÆ_ªf_li°
;

5625 *
ªÂ
) {

5626 i‡((*
ªÂ
)->
c•
 >= csp) {

5627 
ªf_t
 *
ªf
 = *
ªÂ
;

5628 *
ªÂ
 = (*ªÂ)->
√xt
;

5629 
	`kûl_ªf
(
ªf
);

5631 
ªÂ
 = &((*ªÂ)->
√xt
);

5633 
	}
}

	@interpret.h

6 #i‚de‡
INTERPRET_H


7 
	#INTERPRET_H


	)

9 
	#PUSH_STRING
 (0 << 6)

	)

10 
	#PUSH_NUMBER
 (1 << 6)

	)

11 
	#PUSH_GLOBAL
 (2 << 6)

	)

12 
	#PUSH_LOCAL
 (3 << 6)

	)

14 
	#PUSH_WHAT
 (3 << 6)

	)

15 
	#PUSH_MASK
 (0xf‡^ (
PUSH_WHAT
))

	)

17 
	#SWITCH_CASE_SIZE
 (()(2 + (*)))

	)

20 #ifde‡
TRACE


21 
	#TRACE_CALL
 1

	)

22 
	#TRACE_CALL_OTHER
 2

	)

23 
	#TRACE_RETURN
 4

	)

24 
	#TRACE_ARGS
 8

	)

25 
	#TRACE_EXEC
 16

	)

26 
	#TRACE_HEART_BEAT
 32

	)

27 
	#TRACE_APPLY
 64

	)

28 
	#TRACE_OBJNAME
 128

	)

29 #ifde‡
LPC_TO_C


30 
	#TRACE_COMPILED
 256

	)

31 
	#TRACE_LPC_EXEC
 512

	)

33 
	#TRACETST
(
b
Ë(
comm™d_givî
->
öãø˘ive
->
åa˚_Àvñ
 & (b))

	)

34 
	#TRACEP
(
b
) \

35 (
comm™d_givî
 && comm™d_givî->
öãø˘ive
 && 
	`TRACETST
(
b
) && \

36 (
comm™d_givî
->
öãø˘ive
->
åa˚_¥efix
 == 0 || \

37 (
cuºít_obje˘
 && 
	`°Ωªf
(
comm™d_givî
->
öãø˘ive
->
åa˚_¥efix
, \

38 
cuºít_obje˘
->
«me
))Ë)

	)

39 
	#TRACEHB
 (
cuºít_hóπ_bót
 =0 || (
comm™d_givî
->
öãø˘ive
->
åa˚_Àvñ
 & 
TRACE_HEART_BEAT
))

	)

42 
	#EXTRACT_UCHAR
(
p
Ë(*(*)’))

	)

50 
	#FRAME_FUNCTION
 0

	)

51 
	#FRAME_FUNP
 1

	)

52 
	#FRAME_CATCH
 2

	)

53 
	#FRAME_FAKE
 3

	)

54 
	#FRAME_MASK
 3

	)

56 
	#FRAME_OB_CHANGE
 4

	)

57 
	#FRAME_EXTERNAL
 8

	)

59 
	#FRAME_RETURNED_FROM_CATCH
 16

	)

61 
	sc⁄åﬁ_°ack_s
 {

62 #ifde‡
PROFILE_FUNCTIONS


63 
	míåy_£cs
, 
	míåy_u£cs
;

65 
	m‰ameköd
;

67 
	mèbÀ_ödex
;

68 
fu≈å_t
 *
	mfu≈
;

69 } 
	m‰
;

70 
obje˘_t
 *
	mob
;

71 
obje˘_t
 *
	m¥ev_ob
;

72 
¥ogøm_t
 *
	m¥og
;

73 
	mnum_loˇl_v¨übÀs
;

74 *
	mpc
;

75 
svÆue_t
 *
	mÂ
;

76 
	mfun˘i⁄_ödex_off£t
;

78 
	mv¨übÀ_ödex_off£t
;

79 
	mˇŒî_ty≥
;

80 } 
	tc⁄åﬁ_°ack_t
;

83 
obje˘_t
 *
	mob
;

85 
fu≈å_t
 *
	mÂ
;

86 *
	m°r
;

87 } 
	mf
;

88 
	m«rg
;

89 
svÆue_t
 *
	m¨gs
;

90 } 
	tfun˘i⁄_to_ˇŒ_t
;

92 
	sîr‹_c⁄ãxt_s
 {

93 
jmp_buf
 
	mc⁄ãxt
;

94 
c⁄åﬁ_°ack_t
 *
	mßve_c•
;

95 
svÆue_t
 *
	mßve_•
;

96 
obje˘_t
 **
	mßve_cg•
;

97 
îr‹_c⁄ãxt_s
 *
	mßve_c⁄ãxt
;

98 } 
	tîr‹_c⁄ãxt_t
;

101 
fun˘i⁄_t
 *
	mfunc
;

102 
	mödex
;

103 } 
	tfun˘i⁄_lookup_öfo_t
;

105 
	#IS_ZERO
(
x
Ë(!(xË|| (((x)->
ty≥
 =
T_NUMBER
Ë&& ((x)->
u
.
numbî
 =0)))

	)

106 
	#IS_UNDEFINED
(
x
Ë(!(xË|| (((x)->
ty≥
 =
T_NUMBER
) && \

107 ((
x
)->
subty≥
 =
T_UNDEFINED
Ë&& ((x)->
u
.
numbî
 =0)))

	)

109 
	#CHECK_TYPES
(
vÆ
, 
t
, 
¨g
, 
ö°
) \

110 i‡(!((
vÆ
)->
ty≥
 & (
t
))Ë
	`bad_¨gumít
(vÆ,Å, 
¨g
, 
ö°
);

	)

114 
	#EXTEND_SVALUE_STRING
(
x
, 
y
, 
z
) \

115 
	`SAFE
–*
ess_ªs
; \

116 
ess_Àn
; \

117 
ess_r
; \

118 
ess_Àn
 = (
ess_r
 = 
	`SVALUE_STRLEN
(
x
)Ë+ 
	`°æí
(
y
); \

119 i‡(
ess_Àn
 > 
MAX_STRING_LENGTH
) \

120 
	`îr‹
("Maximum stringÜengthÉxceeded in concatenation.\n"); \

121 i‡((
x
)->
subty≥
 =
STRING_MALLOC
 && 
	`MSTR_REF
((x)->
u
.
°rög
) == 1) { \

122 
ess_ªs
 = (*Ë
	`exãnd_°rög
((
x
)->
u
.
°rög
, 
ess_Àn
); \

123 i‡(!
ess_ªs
Ë
	`Áèl
("Out of memory!\n"); \

124 
	`°r˝y
(
ess_ªs
 + 
ess_r
, (
y
)); \

126 
ess_ªs
 = 
	`√w_°rög
(
ess_Àn
, 
z
); \

127 
	`°r˝y
(
ess_ªs
, (
x
)->
u
.
°rög
); \

128 
	`°r˝y
(
ess_ªs
 + 
ess_r
, (
y
)); \

129 
	`‰ì_°rög_svÆue
(
x
); \

130 (
x
)->
subty≥
 = 
STRING_MALLOC
; \

132 (
x
)->
u
.
°rög
 = 
ess_ªs
; \

133 )

	)

136 
	#SVALUE_STRING_ADD_LEFT
(
y
, 
z
) \

137 
	`SAFE
–*
pss_ªs
; 
pss_r
; 
pss_Àn
; \

138 
pss_Àn
 = 
	`SVALUE_STRLEN
(
•
Ë+ (
pss_r
 = 
	`°æí
(
y
)); \

139 i‡(
pss_Àn
 > 
MAX_STRING_LENGTH
) \

140 
	`îr‹
("Maximum stringÜengthÉxceeded in concatenation.\n"); \

141 
pss_ªs
 = 
	`√w_°rög
(
pss_Àn
, 
z
); \

142 
	`°r˝y
(
pss_ªs
, 
y
); \

143 
	`°r˝y
(
pss_ªs
 + 
pss_r
, 
•
->
u
.
°rög
); \

144 
	`‰ì_°rög_svÆue
(
•
--); \

145 
•
->
ty≥
 = 
T_STRING
; \

146 
•
->
u
.
°rög
 = 
pss_ªs
; \

147 
•
->
subty≥
 = 
STRING_MALLOC
; \

148 )

	)

151 
	#SVALUE_STRING_JOIN
(
x
, 
y
, 
z
) \

152 
	`SAFE
–*
ssj_ªs
; 
ssj_r
; 
ssj_Àn
; \

153 
ssj_r
 = 
	`SVALUE_STRLEN
(
x
); \

154 
ssj_Àn
 = 
ssj_r
 + 
	`SVALUE_STRLEN
(
y
); \

155 i‡(
ssj_Àn
 > 
MAX_STRING_LENGTH
) \

156 
	`îr‹
("Maximum stringÜengthÉxceeded in concatenation.\n"); \

157 i‡((
x
)->
subty≥
 =
STRING_MALLOC
 && 
	`MSTR_REF
((x)->
u
.
°rög
) == 1) { \

158 
ssj_ªs
 = (*Ë
	`exãnd_°rög
((
x
)->
u
.
°rög
, 
ssj_Àn
); \

159 i‡(!
ssj_ªs
Ë
	`Áèl
("Out of memory!\n"); \

160 (Ë
	`°r˝y
(
ssj_ªs
 + 
ssj_r
, (
y
)->
u
.
°rög
); \

161 
	`‰ì_°rög_svÆue
(
y
); \

163 
ssj_ªs
 = (*Ë
	`√w_°rög
(
ssj_Àn
, 
z
); \

164 
	`°r˝y
(
ssj_ªs
, (
x
)->
u
.
°rög
); \

165 
	`°r˝y
(
ssj_ªs
 + 
ssj_r
, (
y
)->
u
.
°rög
); \

166 
	`‰ì_°rög_svÆue
(
y
); \

167 
	`‰ì_°rög_svÆue
(
x
); \

168 (
x
)->
subty≥
 = 
STRING_MALLOC
; \

170 (
x
)->
u
.
°rög
 = 
ssj_ªs
; \

171 )

	)

174 #i‚de‡
LPC_TO_C


175 
	#ˇŒ_¥ogøm
(
¥og
, 
off£t
) \

176 
	`evÆ_ö°ru˘i⁄
(
¥og
->
¥ogøm
 + 
off£t
)

	)

179 #ifde‡
DEBUG


180 
	#‰ì_svÆue
(
x
,
y
Ë
	`öt_‰ì_svÆue
(x,y)

	)

182 
	#‰ì_svÆue
(
x
,
y
Ë
	`öt_‰ì_svÆue
(x)

	)

185 
	#CHECK_STACK_OVERFLOW
(
x
Ëi‡(
•
 + (xË>
íd_of_°ack
Ë
	`SAFE
–
too_dìp_îr‹
 = 1; 
	`îr‹
("°ack ovîÊow"); )

	)

186 
	#STACK_INC
 
	`SAFE
–
	`CHECK_STACK_OVERFLOW
(1); 
•
++; )

	)

188 
	#push_svÆue
(
x
Ë
	`SAFE
( \

189 
STACK_INC
;\

190 
	`assign_svÆue_no_‰ì
(
•
, 
x
);\

191 )

	)

192 
	#put_numbî
(
x
Ë
	`SAFE
( \

193 
•
->
ty≥
 = 
T_NUMBER
;\

194 
•
->
subty≥
 = 0;\

195 
•
->
u
.
numbî
 = (
x
);\

196 )

	)

197 
	#put_buf„r
(
x
Ë
	`SAFE
( \

198 
•
->
ty≥
 = 
T_BUFFER
;\

199 
•
->
u
.
buf
 = (
x
);\

200 )

	)

201 
	#put_unde°ed_obje˘
(
x
Ë
	`SAFE
(\

202 
•
->
ty≥
 = 
T_OBJECT
;\

203 
•
->
u
.
ob
 = (
x
);\

204 )

	)

205 
	#put_obje˘
(
x
Ë
	`SAFE
(\

206 i‡(!(
x
Ë|| (x)->
Êags
 & 
O_DESTRUCTED
Ë*
•
 = 
c⁄°0u
;\

207 
	`put_unde°ed_obje˘
(
x
);\

208 )

	)

209 
	#put_uƒe„d_unde°ed_obje˘
(
x
, 
y
Ë
	`SAFE
(\

210 
•
->
ty≥
 = 
T_OBJECT
;\

211 
•
->
u
.
ob
 = (
x
);\

212 
	`add_ªf
((
x
), 
y
);\

213 )

	)

214 
	#put_uƒe„d_obje˘
(
x
,
y
Ë
	`SAFE
(\

215 i‡(!(
x
Ë|| (x)->
Êags
 & 
O_DESTRUCTED
Ë*
•
 = 
c⁄°0u
;\

216 
	`put_uƒe„d_unde°ed_obje˘
(
x
,
y
);\

217 )

	)

219 
	#put_c⁄°™t_°rög
(
x
Ë
	`SAFE
(\

220 
•
->
ty≥
 = 
T_STRING
;\

221 
•
->
subty≥
 = 
STRING_SHARED
;\

222 
•
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
x
);\

223 )

	)

224 
	#put_mÆlo˚d_°rög
(
x
Ë
	`SAFE
(\

225 
•
->
ty≥
 = 
T_STRING
;\

226 
•
->
subty≥
 = 
STRING_MALLOC
;\

227 
•
->
u
.
°rög
 = (
x
);\

228 )

	)

229 
	#put_¨øy
(
x
Ë
	`SAFE
(\

230 
•
->
ty≥
 = 
T_ARRAY
;\

231 
•
->
u
.
¨r
 = (
x
);\

232 )

	)

233 
	#put_sh¨ed_°rög
(
x
Ë
	`SAFE
(\

234 
•
->
ty≥
 = 
T_STRING
;\

235 
•
->
subty≥
 = 
STRING_SHARED
;\

236 
•
->
u
.
°rög
 = (
x
);\

237 )

	)

239 
	#FOREACH_LEFT_GLOBAL
 1

	)

240 
	#FOREACH_RIGHT_GLOBAL
 2

	)

241 
	#FOREACH_REF
 4

	)

242 
	#FOREACH_MAPPING
 8

	)

244 
¥ogøm_t
 *
cuºít_¥og
;

245 
ˇŒî_ty≥
;

246 *
pc
;

247 
svÆue_t
 *
•
;

248 
svÆue_t
 *
Â
;

249 
svÆue_t
 *
íd_of_°ack
;

250 
svÆue_t
 
ˇtch_vÆue
;

251 
c⁄åﬁ_°ack_t
 
c⁄åﬁ_°ack
[
CFG_MAX_CALL_DEPTH
];

252 
c⁄åﬁ_°ack_t
 *
c•
;

253 
too_dìp_îr‹
;

254 
max_evÆ_îr‹
;

255 
fun˘i⁄_ödex_off£t
;

256 
v¨übÀ_ödex_off£t
;

257 
≠∂y_low_ˇŒ_Ÿhîs
;

258 
≠∂y_low_ˇche_hôs
;

259 
≠∂y_low_¶Ÿs_u£d
;

260 
≠∂y_low_cﬁlisi⁄s
;

261 
fun˘i⁄_ödex_off£t
;

262 
simul_efun_is_lﬂdög
;

263 
¥ogøm_t
 
Áke_¥og
;

264 
svÆue_t
 
globÆ_lvÆue_byã
;

265 
num_v¨¨gs
;

266 
°_num_¨g
;

267 
svÆue_t
 
c⁄°0
;

268 
svÆue_t
 
c⁄°1
;

269 
svÆue_t
 
c⁄°0u
;

270 
svÆue_t
 
≠∂y_ªt_vÆue
;

271 
ªf_t
 *
globÆ_ªf_li°
;

272 
lv_ow√r_ty≥
;

273 
ª„d_t
 *
lv_ow√r
;

275 
kûl_ªf
 
PROT
((
ªf_t
 *));

276 
ªf_t
 *
make_ªf
 
PROT
(());

279 #ifde‡
LPC_TO_C


280 
ˇŒ_¥ogøm
 
PROT
((
¥ogøm_t
 *, 
POINTER_INT
));

282 
öô_öãΩªãr
 
PROT
(());

283 
ˇŒ_dúe˘
 
PROT
((
obje˘_t
 *, , , ));

284 
evÆ_ö°ru˘i⁄
 
PROT
((*
p
));

285 
INLINE
 
assign_svÆue
 
PROT
((
svÆue_t
 *, svalue_t *));

286 
INLINE
 
assign_svÆue_no_‰ì
 
PROT
((
svÆue_t
 *, svalue_t *));

287 
INLINE
 
c›y_some_svÆues
 
PROT
((
svÆue_t
 *, svalue_t *, ));

288 
INLINE
 
å™s„r_push_some_svÆues
 
PROT
((
svÆue_t
 *, ));

289 
INLINE
 
push_some_svÆues
 
PROT
((
svÆue_t
 *, ));

290 #ifde‡
DEBUG


291 
INLINE
 
öt_‰ì_svÆue
 
PROT
((
svÆue_t
 *, *));

293 
INLINE
 
öt_‰ì_svÆue
 
PROT
((
svÆue_t
 *));

295 
INLINE
 
‰ì_°rög_svÆue
 
PROT
((
svÆue_t
 *));

296 
INLINE
 
‰ì_some_svÆues
 
PROT
((
svÆue_t
 *, ));

297 
INLINE
 
push_obje˘
 
PROT
((
obje˘_t
 *));

298 
INLINE
 
push_numbî
 
PROT
(());

299 
INLINE
 
push_ªÆ
 
PROT
(());

300 
INLINE
 
push_undeföed
 
PROT
(());

301 
INLINE
 
c›y_™d_push_°rög
 
PROT
((*));

302 
INLINE
 
sh¨e_™d_push_°rög
 
PROT
((*));

303 
INLINE
 
push_¨øy
 
PROT
((
¨øy_t
 *));

304 
INLINE
 
push_ª„d_¨øy
 
PROT
((
¨øy_t
 *));

305 #i‚de‡
NO_BUFFER_TYPE


306 
INLINE
 
push_buf„r
 
PROT
((
buf„r_t
 *));

307 
INLINE
 
push_ª„d_buf„r
 
PROT
((
buf„r_t
 *));

309 
INLINE
 
push_m≠pög
 
PROT
((
m≠pög_t
 *));

310 
INLINE
 
push_ª„d_m≠pög
 
PROT
((
m≠pög_t
 *));

311 
INLINE
 
push_˛ass
 
PROT
((
¨øy_t
 *));

312 
INLINE
 
push_ª„d_˛ass
 
PROT
((
¨øy_t
 *));

313 
INLINE
 
push_mÆlo˚d_°rög
 
PROT
((*));

314 
INLINE
 
push_sh¨ed_°rög
 
PROT
((*));

315 
INLINE
 
push_c⁄°™t_°rög
 
PROT
((*));

316 
INLINE
 
p›_°ack
 
PROT
(());

317 
INLINE
 
p›_n_ñems
 
PROT
(());

318 
INLINE
 
p›_2_ñems
 
PROT
(());

319 
INLINE
 
p›_3_ñems
 
PROT
(());

320 
INLINE
 
fun˘i⁄_t
 *
£tup_öhîôed_‰ame
 
PROT
(());

321 
INLINE
 
¥ogøm_t
 *
föd_fun˘i⁄_by_«me
 
PROT
((
obje˘_t
 *, *, *, *));

322 *
fun˘i⁄_«me
 
PROT
((
¥ogøm_t
 *, ));

323 
ªmove_obje˘_‰om_°ack
 
PROT
((
obje˘_t
 *));

324 
£tup_Áke_‰ame
 
PROT
((
fu≈å_t
 *));

325 
ªmove_Áke_‰ame
 
PROT
(());

326 
push_ödexed_lvÆue
 
PROT
(());

327 
£tup_v¨übÀs
 
PROT
((, , ));

329 
¥o˚ss_efun_ˇŒback
 
PROT
((, 
fun˘i⁄_to_ˇŒ_t
 *, ));

330 
svÆue_t
 *
ˇŒ_efun_ˇŒback
 
PROT
((
fun˘i⁄_to_ˇŒ_t
 *, ));

331 *
ty≥_«me
 
PROT
((
c
));

332 
bad_¨g
 
PROT
((, ));

333 
bad_¨gumít
 
PROT
((
svÆue_t
 *, , , ));

334 
check_f‹_de°r
 
PROT
((
¨øy_t
 *));

335 
is_°©ic
 
PROT
((*, 
obje˘_t
 *));

336 
≠∂y_low
 
PROT
((*, 
obje˘_t
 *, ));

337 
svÆue_t
 *
≠∂y
 
PROT
((*, 
obje˘_t
 *, , ));

338 
svÆue_t
 *
ˇŒ_fun˘i⁄_poöãr
 
PROT
((
fu≈å_t
 *, ));

339 
svÆue_t
 *
ß„_ˇŒ_fun˘i⁄_poöãr
 
PROT
((
fu≈å_t
 *, ));

340 
svÆue_t
 *
ß„_≠∂y
 
PROT
((*, 
obje˘_t
 *, , ));

341 
ˇŒ___INIT
 
PROT
((
obje˘_t
 *));

342 
¨øy_t
 *
ˇŒ_Æl_Ÿhî
 
PROT
((array_t *, *, ));

343 *
fun˘i⁄_exi°s
 
PROT
((*, 
obje˘_t
 *, ));

344 
ˇŒ_fun˘i⁄
 
PROT
((
¥ogøm_t
 *, ));

345 
m¨k_≠∂y_low_ˇche
 
PROT
(());

346 
å™¶©e_absﬁuã_löe
 
PROT
((, *, *, *));

347 *
add_¶ash
 
PROT
((*));

348 
°Ωªf
 
PROT
((*, *));

349 
¨øy_t
 *
gë_svÆue_åa˚
 
PROT
(());

350 
do_åa˚
 
PROT
((*, *, *));

351 *
dump_åa˚
 
PROT
(());

352 
›cdump
 
PROT
((*));

353 
öãr_ssˇnf
 
PROT
((
svÆue_t
 *, svalue_t *, svalue_t *, ));

354 * 
gë_löe_numbî_if_™y
 
PROT
(());

355 *
gë_löe_numbî
 
PROT
((*, 
¥ogøm_t
 *));

356 
gë_löe_numbî_öfo
 
PROT
((**, *));

357 
gë_vîsi⁄
 
PROT
((*));

358 
ª£t_machöe
 
PROT
(());

359 
u∆ök_°rög_svÆue
 
PROT
((
svÆue_t
 *));

360 
c›y_lvÆue_ønge
 
PROT
((
svÆue_t
 *));

361 
assign_lvÆue_ønge
 
PROT
((
svÆue_t
 *));

362 
debug_≥º‹
 
PROT
((*, *));

364 #i‚de‡
NO_SHADOWS


365 
vÆid©e_shadowög
 
PROT
((
obje˘_t
 *));

368 #i‡!
deföed
(
NO_RESETS
Ë&& deföed(
LAZY_RESETS
)

369 
åy_ª£t
 
PROT
((
obje˘_t
 *));

372 
p›_c⁄ãxt
 
PROT
((
îr‹_c⁄ãxt_t
 *));

373 
ª°‹e_c⁄ãxt
 
PROT
((
îr‹_c⁄ãxt_t
 *));

374 
ßve_c⁄ãxt
 
PROT
((
îr‹_c⁄ãxt_t
 *));

376 
p›_c⁄åﬁ_°ack
 
PROT
(());

377 
INLINE
 
fun˘i⁄_t
 *
£tup_√w_‰ame
 
PROT
(());

378 
INLINE
 
push_c⁄åﬁ_°ack
 
PROT
(());

380 
bªak_poöt
 
PROT
(());

382 #ifde‡
DEBUGMALLOC_EXTENSIONS


383 
m¨k_svÆue
 
PROT
((
svÆue_t
 *));

384 
m¨k_°ack
 
PROT
(());

	@lex.c

16 
	#SUPPRESS_COMPILER_INLINES


	)

17 
	~"°d.h
"

18 
	~"fûe_ö˛.h
"

19 
	~"Õc_ö˛.h
"

20 
	~"compûî.h
"

21 #ifde‡
WIN32


22 
	~"gømm¨_èb.h
"

24 
	~"gømm¨.èb.h
"

26 
	~"s¸©ch∑d.h
"

27 
	~"¥ïro˚ss.h
"

28 
	~"md.h
"

29 
	~"hash.h
"

30 
	~"fûe.h
"

31 
	~"maö.h
"

32 
	~"cc.h
"

34 
	#NELEM
(
a
Ë( (aË/ (◊)[0]))

	)

35 
	#LEX_EOF
 ((Ë
EOF
)

	)

37 
	gÀx_˘y≥
[256] = {0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,

50 
	#is_w•a˚
(
c
Ë
Àx_˘y≥
[()(c)]

	)

52 
	gcuºít_löe
;

53 
	gcuºít_löe_ba£
;

54 
	gcuºít_löe_ßved
;

56 
	gtŸÆ_löes
;

57 *
	gcuºít_fûe
;

58 
	gcuºít_fûe_id
;

61 
	g¥agmas
;

63 
	gnum_∑r£_îr‹
;

65 
Õc_¥edef_t
 *
	gÕc_¥edefs
 = 
NULL
;

67 
	gyyö_desc
;

68 
	gÀx_Áèl
;

69 **
	göc_li°
;

70 
	göc_li°_size
;

71 
	gdeföes_√ed_‰ìd
 = 0;

72 *
	gœ°_∆
;

73 
	g√x∑nds
 = 0;

75 
	#EXPANDMAX
 25000

	)

76 *
	gex∑nds
[
EXPANDMAX
];

77 
	gex∑nd_dïth
 = 0;

79 
	gyyãxt
[
MAXLINE
];

80 *
	gouç
;

82 
	söc°©e_s
 {

83 
öc°©e_s
 *
	m√xt
;

84 
	myyö_desc
;

85 
	mlöe
;

86 *
	mfûe
;

87 
	mfûe_id
;

88 *
	mœ°_∆
;

89 *
	mouç
;

90 } 
	töc°©e_t
;

92 
öc°©e_t
 *
	gö˘›
 = 0;

95 
	#MAX_INCLUDE_DEPTH
 32

	)

96 
	gö˙um
;

99 
	#MAX_FUNCTION_DEPTH
 10

	)

101 
fun˘i⁄_c⁄ãxt_t
 
	gfun˘i⁄_c⁄ãxt_°ack
[
MAX_FUNCTION_DEPTH
];

102 
	gœ°_fun˘i⁄_c⁄ãxt
;

103 
fun˘i⁄_c⁄ãxt_t
 *
	gcuºít_fun˘i⁄_c⁄ãxt
 = 0;

105 
	g¨row_efun
, 
	gevÆu©e_efun
, 
	gthis_efun
, 
	gto_Êﬂt_efun
, 
	gto_öt_efun
, 
	g√w_efun
;

121 
keyw‹d_t
 
	g¥edefs
[] =

122 
	~"efun_defs.c
"

124 *
›ti⁄_defs
[] =

125 
	~"›ti⁄_defs.c
"

127 
keyw‹d_t
 
ªsw‹ds
[] =

129 #ifde‡
DEBUG


130 {"__TREE__", 
L_TREE
, 0 },

132 #ifde‡
ARRAY_RESERVED_WORD


133 {"¨øy", 
L_ARRAY
, 0 },

136 {"bªak", 
L_BREAK
, 0},

137 #i‚de‡
NO_BUFFER_TYPE


138 {"buf„r", 
L_BASIC_TYPE
, 
TYPE_BUFFER
},

140 {"ˇ£", 
L_CASE
, 0},

141 {"ˇtch", 
L_CATCH
, 0},

142 {"˛ass", 
L_CLASS
, 0},

143 #ifde‡
COMPAT_32


144 {"˛osuª", 
L_BASIC_TYPE
, 
TYPE_FUNCTION
},

146 {"c⁄töue", 
L_CONTINUE
, 0},

147 {"deÁu…", 
L_DEFAULT
, 0},

148 {"do", 
L_DO
, 0},

149 {"efun", 
L_EFUN
, 0},

150 {"ñ£", 
L_ELSE
, 0},

151 {"Êﬂt", 
L_BASIC_TYPE
, 
TYPE_REAL
},

152 {"f‹", 
L_FOR
, 0},

153 {"f‹óch", 
L_FOREACH
, 0},

154 {"fun˘i⁄", 
L_BASIC_TYPE
, 
TYPE_FUNCTION
},

155 {"if", 
L_IF
, 0},

156 {"ö", 
L_IN
, 0},

157 {"öhîô", 
L_INHERIT
, 0},

158 {"öt", 
L_BASIC_TYPE
, 
TYPE_NUMBER
},

159 {"m≠pög", 
L_BASIC_TYPE
, 
TYPE_MAPPING
},

160 {"mixed", 
L_BASIC_TYPE
, 
TYPE_ANY
},

161 {"√w", 
L_NEW
, 0},

162 {"nomask", 
L_TYPE_MODIFIER
, 
DECL_NOMASK
},

163 #ifde‡
SENSIBLE_MODIFIERS


164 {"noßve", 
L_TYPE_MODIFIER
, 
DECL_NOSAVE
},

166 {"obje˘", 
L_BASIC_TYPE
, 
TYPE_OBJECT
},

167 {"∑r£_comm™d", 
L_PARSE_COMMAND
, 0},

168 {"¥iv©e", 
L_TYPE_MODIFIER
, 
DECL_PRIVATE
},

169 {"¥Ÿe˘ed", 
L_TYPE_MODIFIER
, 
DECL_PROTECTED
},

170 #ifde‡
SENSIBLE_MODIFIERS


171 {"public", 
L_TYPE_MODIFIER
, 
DECL_PUBLIC
},

173 {"public", 
L_TYPE_MODIFIER
, 
DECL_VISIBLE
},

175 #ifde‡
REF_RESERVED_WORD


176 {"ªf", 
L_REF
, 0 },

178 {"ªtu∫", 
L_RETURN
, 0},

179 {"ssˇnf", 
L_SSCANF
, 0},

180 #i‚de‡
SENSIBLE_MODIFIERS


181 {"°©ic", 
L_TYPE_MODIFIER
, 
DECL_NOSAVE
 | 
DECL_PROTECTED
 },

183 #ifde‡
HAS_STATUS_TYPE


184 {"°©us", 
L_BASIC_TYPE
, 
TYPE_NUMBER
},

186 {"°rög", 
L_BASIC_TYPE
, 
TYPE_STRING
},

187 {"swôch", 
L_SWITCH
, 0},

188 {"time_ex¥essi⁄", 
L_TIME_EXPRESSION
, 0},

189 {"v¨¨gs", 
L_TYPE_MODIFIER
, 
FUNC_VARARGS
 },

190 #ifde‡
VIRTUAL_RESERVED_WORD


191 {"vútuÆ", 
L_TYPE_MODIFIER
, 0 },

193 {"void", 
L_BASIC_TYPE
, 
TYPE_VOID
},

194 {"whûe", 
L_WHILE
, 0},

197 
idít_hash_ñem_t
 **
	gidít_hash_èbÀ
;

198 
idít_hash_ñem_t
 **
	gidít_hash_hód
;

199 
idít_hash_ñem_t
 **
	gidít_hash_èû
;

201 
idít_hash_ñem_t
 *
	gidít_dúty_li°
 = 0;

203 
ö°r_t
 
	gö°rs
[
MAX_INSTRS
];

205 
	#TERM_ADD_INPUT
 1

	)

206 
	#TERM_INCLUDE
 2

	)

207 
	#TERM_START
 4

	)

209 
	slöked_buf_s
 {

210 
löked_buf_s
 *
	m¥ev
;

211 
	mãrm_ty≥
;

212 
	mbuf
[
DEFMAX
];

213 *
	mbuf_íd
;

214 *
	mouç
;

215 *
	mœ°_∆
;

216 } 
	tlöked_buf_t
;

218 
löked_buf_t
 
	ghód_lbuf
 = { 
NULL
, 
TERM_START
 };

219 
löked_buf_t
 *
	gcur_lbuf
;

221 
h™dÀ_deföe
 
PROT
((*));

222 
‰ì_deföes
 
PROT
(());

223 
add_deföe
 
PROT
((*, , *));

224 
add_¥edeföe
 
PROT
((*, , *));

225 
ex∑nd_deföe
 
PROT
(());

226 
add_öput
 
PROT
((*));

227 
c⁄d_gë_exp
 
PROT
(());

228 
mîge
 
PROT
((*
«me
, *
de°
));

229 
add_quŸed_¥edeföe
 
PROT
((*, *));

230 
Àxîr‹
 
PROT
((*));

231 
skù_to
 
PROT
((*, *));

232 
h™dÀ_c⁄d
 
PROT
(());

233 
öc_›í
 
PROT
((*, *, ));

234 
ö˛ude_îr‹
 
PROT
((*, ));

235 
h™dÀ_ö˛ude
 
PROT
((*, ));

236 
gë_ãrmö©‹
 
PROT
((*));

237 
gë_¨øy_block
 
PROT
((*));

238 
gë_ãxt_block
 
PROT
((*));

239 
skù_löe
 
PROT
(());

240 
skù_commít
 
PROT
(());

241 
dñåaû
 
PROT
((*));

242 
h™dÀ_¥agma
 
PROT
((*));

243 
cmygëc
 
PROT
(());

244 
ªfûl
 
PROT
(());

245 
ªfûl_buf„r
 
PROT
(());

246 
exgëc
 
PROT
(());

247 
ﬁd_func
 
PROT
(());

248 
idít_hash_ñem_t
 *
quick_Æloc_idít_íåy
 
PROT
(());

249 
yyîr‹p
 
PROT
((*));

251 
	#LEXER


	)

252 
	~"¥ïro˚ss.c
"

254 
mîge
 
	$P2
(*, 
«me
, *, 
de°
)

256 *
‰om
;

258 
	`°r˝y
(
de°
, 
cuºít_fûe
);

259 i‡((
‰om
 = 
	`°ºchr
(
de°
, '/')))

260 *
‰om
 = 0;

264 *
de°
 = 0;

266 
‰om
 = 
«me
;

267 *
‰om
 == '/') {

268 
‰om
++;

269 *
de°
 = 0;

272 *
‰om
) {

273 i‡(!
	`°∫cmp
(
‰om
, "../", 3)) {

274 *
tmp
;

276 i‡(*
de°
 == 0)

278 
tmp
 = 
	`°ºchr
(
de°
, '/');

279 i‡(
tmp
 =
NULL
)

280 *
de°
 = 0;

282 *
tmp
 = 0;

283 
‰om
 += 3;

284 } i‡(!
	`°∫cmp
(
‰om
, "./", 2)) {

285 
‰om
 += 2;

287 *
q
;

289 i‡(*
de°
)

290 
	`°rˇt
(
de°
, "/");

291 
q
 = 
	`°rchr
(
‰om
, '/');

293 i‡(
q
) {

294 *
‰om
 == '/')

295 
‰om
++;

296 
	`°∫ˇt
(
de°
, 
‰om
, 
q
 - from);

297 
‰om
 = 
q
 + 1; *from == '/'; from++);

300 
	`°rˇt
(
de°
, 
‰om
);

305 
	}
}

308 
yyîr‹p
 
	$P1
(*, 
s
) {

309 
buf
[200];

310 
	`•rötf
(
buf
, 
s
, '#');

311 
	`yyîr‹
(
buf
);

312 
Àx_Áèl
++;

313 
	}
}

316 
Àxîr‹
 
	$P1
(*, 
s
)

318 
	`yyîr‹
(
s
);

319 
Àx_Áèl
++;

320 
	}
}

323 
skù_to
 
	$P2
(*, 
tokí
, *, 
©okí
)

325 
b
[20], *
p
;

326 
c
;

327 *
yyp
 = 
ouç
, *
°¨ç
;

328 *
b_íd
 = 
b
 + 19;

329 
√°
;

331 
√°
 = 0;;) {

332 i‡((
c
 = *
yyp
++) == '#') {

333 
	`is_w•a˚
(
c
 = *
yyp
++));

334 
°¨ç
 = 
yyp
 - 1;

335 
p
 = 
b
; !
	`is•a˚
(
c
Ë&& c !
LEX_EOF
; c = *
yyp
++) {

336 i‡(
p
 < 
b_íd
Ë*p++ = 
c
;

339 *
p
 = 0;

340 i‡(!
	`°rcmp
(
b
, "if") || !strcmp(b, "ifdef") || !strcmp(b, "ifndef")) {

341 
√°
++;

342 } i‡(
√°
 > 0) {

343 i‡(!
	`°rcmp
(
b
, "endif"))

344 
√°
--;

346 i‡(!
	`°rcmp
(
b
, 
tokí
)) {

347 
ouç
 = 
°¨ç
;

348 *--
ouç
 = '#';

350 } i‡(
©okí
 && !
	`°rcmp
(
b
,átoken)) {

351 
ouç
 = 
°¨ç
;

352 *--
ouç
 = '#';

354 } i‡(!
	`°rcmp
(
b
, "elif")) {

355 
ouç
 = 
°¨ç
;

356 *--
ouç
 = '#';

357  (
©okí
 == 0);

361 
c
 !'\n' && c !
LEX_EOF
Ë¯*
yyp
++;

362 i‡(
c
 =
LEX_EOF
) {

363 
	`Àxîr‹
("UnexpectedÉnd of file whileÜooking for #endif");

364 
ouç
 = 
yyp
 - 1;

367 
cuºít_löe
++;

368 
tŸÆ_löes
++;

369 i‡(
yyp
 =
œ°_∆
 + 1) {

370 
ouç
 = 
yyp
;

371 
	`ªfûl_buf„r
();

372 
yyp
 = 
ouç
;

375 
	}
}

378 
öc_›í
 
	$P3
(*, 
buf
, *, 
«me
, , 
check_loˇl
)

380 
i
, 
f
;

381 *
p
;

383 i‡(
check_loˇl
) {

384 
	`mîge
(
«me
, 
buf
);

385 i‡((
f
 = 
	`›í
(
buf
, 
O_RDONLY
)) != -1)

386  
f
;

391 
p
 = 
	`°rchr
(
«me
, '.');Ö;Ö = strchr(p + 1, '.')) {

392 i‡(
p
[1] == '.')

395 
i
 = 0; i < 
öc_li°_size
; i++) {

396 
	`•rötf
(
buf
, "%s/%s", 
öc_li°
[
i
], 
«me
);

397 i‡((
f
 = 
	`›í
(
buf
, 
O_RDONLY
)) != -1) {

398  
f
;

402 
	}
}

405 
ö˛ude_îr‹
 
	$P2
(*, 
msg
, , 
globÆ
)

407 
cuºít_löe
--;

409 i‡(
globÆ
) {

410 
ßved_¥agmas
 = 
¥agmas
;

412 
¥agmas
 &~
PRAGMA_ERROR_CONTEXT
;

413 
	`Àxîr‹
(
msg
);

414 
¥agmas
 = 
ßved_¥agmas
;

416 
	`yyîr‹
(
msg
);

419 
cuºít_löe
++;

420 
	}
}

423 
h™dÀ_ö˛ude
 
	$P2
(*, 
«me
, , 
globÆ
)

425 *
p
, *
«mïå
;

426 
buf
[1024];

427 
öc°©e_t
 *
is
;

428 
dñim
, 
f
;

430 i‡(*
«me
 != '"' && *name != '<') {

431 
de‚_t
 *
d
;

433 i‡((
d
 = 
	`lookup_deföe
(
«me
)Ë&& d->
«rgs
 == -1) {

434 *
q
;

436 
q
 = 
d
->
exps
;

437 
	`uis•a˚
(*
q
))

438 
q
++;

439 
	`h™dÀ_ö˛ude
(
q
, 
globÆ
);

441 
	`ö˛ude_îr‹
("MissögÜódög \" o∏< i¿#ö˛ude", 
globÆ
);

445 
«me
 = 
«mïå
 = 
	`°rög_c›y
(name, "handle_include");

446 
dñim
 = *
«me
++ == '"' ? '"' : '>';

447 
p
 = 
«me
; *∞&& *∞!
dñim
;Ö++);

448 i‡(!*
p
) {

449 
	`FREE_MSTR
(
«mïå
);

450 
	`ö˛ude_îr‹
("MissögÅøûög \" o∏> i¿#ö˛ude", 
globÆ
);

453 i‡(
	`°æí
(
«me
Ë> (
buf
) - 100) {

454 
	`FREE_MSTR
(
«mïå
);

455 
	`ö˛ude_îr‹
("In˛udê«mêtoÿl⁄g.", 
globÆ
);

458 *
p
 = 0;

459 i‡(++
ö˙um
 =
MAX_INCLUDE_DEPTH
) {

460 
	`ö˛ude_îr‹
("Maximum in˛udêdïthÉx˚eded.", 
globÆ
);

461 } i‡((
f
 = 
	`öc_›í
(
buf
, 
«me
, 
dñim
 == '"')) != -1) {

462 
is
 = 
	`ALLOCATE
(
öc°©e_t
, 
TAG_COMPILER
, "handle_include: 1");

463 
is
->
yyö_desc
 = yyin_desc;

464 
is
->
löe
 = 
cuºít_löe
;

465 
is
->
fûe
 = 
cuºít_fûe
;

466 
is
->
fûe_id
 = 
cuºít_fûe_id
;

467 
is
->
œ°_∆
 =Üast_nl;

468 
is
->
√xt
 = 
ö˘›
;

469 
is
->
ouç
 = outp;

470 
ö˘›
 = 
is
;

471 
cuºít_löe
--;

472 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

473 
cuºít_löe_ba£
 +
cuºít_löe
;

474 
cuºít_löe_ßved
 = 0;

475 
cuºít_löe
 = 1;

476 
cuºít_fûe
 = 
	`make_sh¨ed_°rög
(
buf
);

477 
cuºít_fûe_id
 = 
	`add_¥ogøm_fûe
(
buf
, 0);

478 
yyö_desc
 = 
f
;

479 
	`ªfûl_buf„r
();

481 
	`•rötf
(
buf
, "C™nŸ #ö˛udê%s", 
«me
);

482 
	`ö˛ude_îr‹
(
buf
, 
globÆ
);

484 
	`FREE_MSTR
(
«mïå
);

485 
	}
}

488 
gë_ãrmö©‹
 
	$P1
(*, 
ãrmö©‹
)

490 
c
;

491 
j
 = 0;

493 ((
c
 = *
ouç
++Ë!
LEX_EOF
Ë&& (
	`iß um
(c) || c == '_'))

494 
ãrmö©‹
[
j
++] = 
c
;

496 
ãrmö©‹
[
j
] = '\0';

498 
	`is_w•a˚
(
c
Ë&& c !
LEX_EOF
)

499 
c
 = *
ouç
++;

501 i‡(
c
 =
LEX_EOF
)

504 i‡(
c
 == '\n') {

505 
cuºít_löe
++;

506 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

508 
ouç
--;

511  
j
;

512 
	}
}

514 
	#MAXCHUNK
 (
MAXLINE
*4)

	)

515 
	#NUMCHUNKS
 (
DEFMAX
/
MAXCHUNK
)

	)

517 
	#NEWCHUNK
(
löe
) \

518 i‡(
Àn
 =
MAXCHUNK
 - 1) { \

519 
löe
[
curchunk
][
MAXCHUNK
 - 1] = '\0'; \

520 i‡(
curchunk
 =
NUMCHUNKS
 - 1) { \

521 
ªs
 = -2; \

524 
löe
[++
curchunk
] = \

525 (*)
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "array/text chunk"); \

526 
Àn
 = 0; \

527 }

	)

530 
gë_¨øy_block
 
	$P1
(*, 
ãrm
)

532 
ãrmÀn
;

533 *
¨øy_löe
[
NUMCHUNKS
];

534 
hódî
, 
Àn
;

535 
°¨ços
, 
°¨tchunk
;

536 
curchunk
, 
ªs
;

537 
i
;

538 
c
;

539 *
yyp
 = 
ouç
;

544 
ãrmÀn
 = 
	`°æí
(
ãrm
);

545 
¨øy_löe
[0] = (*Ë
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "array_block");

546 
¨øy_löe
[0][0] = '(';

547 
¨øy_löe
[0][1] = '{';

548 
¨øy_löe
[0][2] = '"';

549 
¨øy_löe
[0][3] = '\0';

550 
hódî
 = 1;

551 
Àn
 = 3;

552 
°¨ços
 = 3;

553 
°¨tchunk
 = 0;

554 
curchunk
 = 0;

555 
ªs
 = 0;

558 ((
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
LEX_EOF
)) {

559 
	`NEWCHUNK
(
¨øy_löe
);

560 i‡(
c
 == '"' || c == '\\') {

561 
¨øy_löe
[
curchunk
][
Àn
++] = '\\';

562 
	`NEWCHUNK
(
¨øy_löe
);

564 
¨øy_löe
[
curchunk
][
Àn
++] = 
c
;

567 i‡(
c
 ='\n' && (
yyp
 =
œ°_∆
 + 1)) {

568 
ouç
 = 
yyp
; 
	`ªfûl_buf„r
(); yyp = outp;

574 
¨øy_löe
[
curchunk
][
Àn
] = '\0';

576 i‡(
ªs
) {

577 
ouç
 = 
yyp
;

584 i‡((!
	`°∫cmp
(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
, 
ãrm
, 
ãrmÀn
)) &&

585 (!
	`uiß um
(*(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
))) &&

586 (*(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
) != '_')) {

590 i‡(
	`°æí
(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
Ë=
ãrmÀn
) {

591 
cuºít_löe
++;

592 
ouç
 = 
yyp
;

597 
ouç
 = --
yyp
;

599 
i
 = 
curchunk
; i > 
°¨tchunk
; i--)

600 
	`add_öput
(
¨øy_löe
[
i
]);

601 
	`add_öput
(
¨øy_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
);

607 
¨øy_löe
[
°¨tchunk
][
°¨ços
 - 
hódî
] = '\0';

612 *--
ouç
 = ')';

613 *--
ouç
 = '}';

614 
i
 = 
°¨tchunk
; i >= 0; i--)

615 
	`add_öput
(
¨øy_löe
[
i
]);

617 
ªs
 = 1;

623 i‡(
c
 =
LEX_EOF
 && 
ö˘›
 == 0) {

624 
ªs
 = -1;

625 
ouç
 = 
yyp
;

628 i‡(
c
 == '\n') {

629 
cuºít_löe
++;

637 i‡(
Àn
 + 
ãrmÀn
 + 5 > 
MAXCHUNK
) {

638 i‡(
curchunk
 =
NUMCHUNKS
 - 1) {

639 
ªs
 = -2;

640 
ouç
 = 
yyp
;

643 
¨øy_löe
[++
curchunk
] =

644 (*Ë
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "array_block");

645 
Àn
 = 0;

650 
¨øy_löe
[
curchunk
][
Àn
++] = '"';

651 
¨øy_löe
[
curchunk
][
Àn
++] = ',';

652 
¨øy_löe
[
curchunk
][
Àn
++] = '"';

653 
¨øy_löe
[
curchunk
][
Àn
] = '\0';

655 
°¨tchunk
 = 
curchunk
;

656 
°¨ços
 = 
Àn
;

657 
hódî
 = 2;

664 
i
 = 
curchunk
; i >= 0; i--)

665 
	`FREE
(
¨øy_löe
[
i
]);

667  
ªs
;

668 
	}
}

671 
gë_ãxt_block
 
	$P1
(*, 
ãrm
)

673 
ãrmÀn
;

674 *
ãxt_löe
[
NUMCHUNKS
];

675 
Àn
;

676 
°¨ços
, 
°¨tchunk
;

677 
curchunk
, 
ªs
;

678 
i
;

679 
c
;

680 *
yyp
 = 
ouç
;

685 
ãrmÀn
 = 
	`°æí
(
ãrm
);

686 
ãxt_löe
[0] = (*Ë
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "text_block");

687 
ãxt_löe
[0][0] = '"';

688 
ãxt_löe
[0][1] = '\0';

689 
Àn
 = 1;

690 
°¨ços
 = 1;

691 
°¨tchunk
 = 0;

692 
curchunk
 = 0;

693 
ªs
 = 0;

696 ((
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
LEX_EOF
)) {

697 
	`NEWCHUNK
(
ãxt_löe
);

698 i‡(
c
 == '"' || c == '\\') {

699 
ãxt_löe
[
curchunk
][
Àn
++] = '\\';

700 
	`NEWCHUNK
(
ãxt_löe
);

702 
ãxt_löe
[
curchunk
][
Àn
++] = 
c
;

705 i‡(
c
 ='\n' && 
yyp
 =
œ°_∆
 + 1) {

706 
ouç
 = 
yyp
;

707 
	`ªfûl_buf„r
();

708 
yyp
 = 
ouç
;

714 
ãxt_löe
[
curchunk
][
Àn
] = '\0';

716 i‡(
ªs
) {

717 
ouç
 = 
yyp
;

724 i‡((!
	`°∫cmp
(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
, 
ãrm
, 
ãrmÀn
)) &&

725 (!
	`uiß um
(*(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
))) &&

726 (*(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
) != '_')) {

727 i‡(
	`°æí
(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
Ë=
ãrmÀn
) {

728 
cuºít_löe
++;

729 
ouç
 = 
yyp
;

731 *
p
, *
q
;

735 
ouç
 = --
yyp
;

737 
i
 = 
curchunk
; i > 
°¨tchunk
; i--) {

739 
p
 = 
ãxt_löe
[
i
];

740 *
p
 && *p != '\\')

741 
p
++;

742 i‡(*
p
) {

743 
q
 = 
p
++;

745 *
q
++ = *
p
++;

746 i‡(*
p
 == '\\')Ö++;

747 } *
p
);

748 *
q
 = 0;

751 
	`add_öput
(
ãxt_löe
[
i
]);

753 
p
 = 
ãxt_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
;

754 *
p
 && *p != '\\')

755 
p
++;

756 i‡(*
p
) {

757 
q
 = 
p
++;

759 *
q
++ = *
p
++;

760 i‡(*
p
 == '\\')Ö++;

761 } *
p
);

762 *
q
 = 0;

764 
	`add_öput
(
ãxt_löe
[
°¨tchunk
] + 
°¨ços
 + 
ãrmÀn
);

770 
ãxt_löe
[
°¨tchunk
][
°¨ços
] = '\0';

775 *--
ouç
 = '\0';

776 *--
ouç
 = '"';

778 
i
 = 
°¨tchunk
; i >= 0; i--)

779 
	`add_öput
(
ãxt_löe
[
i
]);

781 
ªs
 = 1;

787 i‡(
c
 =
LEX_EOF
 && 
ö˘›
 == 0) {

788 
ªs
 = -1;

789 
ouç
 = 
yyp
;

792 i‡(
c
 == '\n') {

793 
cuºít_löe
++;

801 i‡(
Àn
 + 
ãrmÀn
 + 4 > 
MAXCHUNK
) {

802 i‡(
curchunk
 =
NUMCHUNKS
 - 1) {

803 
ªs
 = -2;

804 
ouç
 = 
yyp
;

807 
ãxt_löe
[++
curchunk
] =

808 (*Ë
	`DXALLOC
(
MAXCHUNK
, 
TAG_COMPILER
, "text_block");

809 
Àn
 = 0;

814 
ãxt_löe
[
curchunk
][
Àn
++] = '\\';

815 
ãxt_löe
[
curchunk
][
Àn
++] = 'n';

816 
ãxt_löe
[
curchunk
][
Àn
] = '\0';

818 
°¨tchunk
 = 
curchunk
;

819 
°¨ços
 = 
Àn
;

826 
i
 = 
curchunk
; i >= 0; i--)

827 
	`FREE
(
ãxt_löe
[
i
]);

829  
ªs
;

830 
	}
}

832 
	$skù_löe
()

834 
c
;

835 *
yyp
 = 
ouç
;

837 ((
c
 = *
yyp
++Ë!'\n'Ë&& (¯!
LEX_EOF
));

840 i‡(
c
 ='\n'Ë
yyp
--;

841 
ouç
 = 
yyp
;

842 
	}
}

844 
	$skù_commít
()

846 
c
 = '*';

847 *
yyp
 = 
ouç
;

850 (
c
 = *
yyp
++) != '*') {

851 i‡(
c
 =
LEX_EOF
) {

852 
ouç
 = --
yyp
;

853 
	`Àxîr‹
("End of file iná comment");

856 i‡(
c
 == '\n') {

857 
√x∑nds
 = 0;

858 
cuºít_löe
++;

859 i‡(
yyp
 =
œ°_∆
 + 1) {

860 
ouç
 = 
yyp
;

861 
	`ªfûl_buf„r
();

862 
yyp
 = 
ouç
;

866 i‡(*(
yyp
 - 2) == '/')

867 
	`yyw¨n
("/* found in comment.");

869 i‡((
c
 = *
yyp
++) == '/') {

870 
ouç
 = 
yyp
;

873 i‡(
c
 == '\n') {

874 
√x∑nds
 = 0;

875 
cuºít_löe
++;

876 i‡(
yyp
 =
œ°_∆
 + 1) {

877 
ouç
 = 
yyp
;

878 
	`ªfûl_buf„r
();

879 
yyp
 = 
ouç
;

882 } 
c
 == '*');

884 
	}
}

887 
dñåaû
 
	$P1
(*, 
•
)

889 *
p
;

891 
p
 = 
•
;

892 i‡(!*
p
) {

893 
	`Àxîr‹
("Illegal # command");

895 *
p
 && !
	`uis•a˚
(*p))

896 
p
++;

897 *
p
 = 0;

899 
	}
}

901 
	#SAVEC
 \

902 i‡(
yyp
 < 
yyãxt
+
MAXLINE
-5)\

903 *
yyp
++ = 
c
;\

905 
	`Àxîr‹
("LineÅooÜong");\

907 }

	)

910 *
	m«me
;

911 
	mvÆue
;

912 } 
	t¥agma_t
;

914 
¥agma_t
 
	gour_¥agmas
[] = {

915 { "°ri˘_ty≥s", 
PRAGMA_STRICT_TYPES
 },

916 { "ßve_ty≥s", 
PRAGMA_SAVE_TYPES
 },

917 #ifde‡
BINARIES


918 { "ßve_bö¨y", 
PRAGMA_SAVE_BINARY
 },

920 { "w¨nögs", 
PRAGMA_WARNINGS
 },

921 { "›timize", 
PRAGMA_OPTIMIZE
 },

922 { "show_îr‹_c⁄ãxt", 
PRAGMA_ERROR_CONTEXT
 },

926 
h™dÀ_¥agma
 
	$P1
(*, 
°r
)

928 
i
;

929 
no_Êag
;

931 i‡(
	`°∫cmp
(
°r
, "no_", 3) == 0) {

932 
°r
 += 3;

933 
no_Êag
 = 1;

935 
no_Êag
 = 0;

937 
i
 = 0; 
our_¥agmas
[i].
«me
; i++) {

938 i‡(
	`°rcmp
(
our_¥agmas
[
i
].
«me
, 
°r
) == 0) {

939 i‡(
no_Êag
) {

940 
¥agmas
 &~
our_¥agmas
[
i
].
vÆue
;

942 
¥agmas
 |
our_¥agmas
[
i
].
vÆue
;

947 
	`yyw¨n
("Unknown #pragma, ignored.");

948 
	}
}

950 *
	$show_îr‹_c⁄ãxt
() {

951 
buf
[60];

952 
yych¨
;

953 
sub_c⁄ãxt
[25];

954 *
yyp
, *
yyp2
;

955 
Àn
;

957 i‡(()
ouç
[-1] =
LEX_EOF
) {

958 
	`°r˝y
(
buf
, "átÅheÉnd ofÅhe file\n");

959  
buf
;

962 i‡(
yych¨
 =-1Ë
	`°r˝y
(
buf
, "áround ");

963 
	`°r˝y
(
buf
, " before ");

964 
yyp
 = 
ouç
;

965 
yyp2
 = 
sub_c⁄ãxt
;

966 
Àn
 = 20;

967 
Àn
--) {

968 i‡(*
yyp
 == '\n') {

969 i‡(
Àn
 =19Ë
	`°rˇt
(
buf
, "theÉnd ofÜine");

971 } i‡(()*
yyp
 =
LEX_EOF
) {

972 i‡(
Àn
 =19Ë
	`°rˇt
(
buf
, "theÉnd of file");

975 *
yyp2
++ = *
yyp
++;

977 *
yyp2
 = 0;

978 i‡(
yyp2
 !
sub_c⁄ãxt
Ë
	`°rˇt
(
buf
, sub_context);

979 
	`°rˇt
(
buf
, "\n");

980  
buf
;

981 
	}
}

983 #ifde‡
WIN32


984 
	$c‹ª˘_ªad
(
h™dÀ
, *
buf
, 
cou¡
)

986 
tmp
,
size
=0;

989 
tmp
=
	`ªad
(
h™dÀ
,
buf
,
cou¡
);

990 i‡(
tmp
 < 0) Åmp;

991 i‡(
tmp
 =0Ë 
size
;

992 
size
+=
tmp
;

993 
cou¡
-=
tmp
;

994 
buf
+=
tmp
;

995 } 
cou¡
>0);

996  
size
;

997 
	}
}

999 
	#c‹ª˘_ªad
 
ªad


	)

1002 
	$ªfûl_buf„r
() {

1003 i‡(
cur_lbuf
 !&
hód_lbuf
) {

1004 i‡(
ouç
 >
cur_lbuf
->
buf_íd
 &&

1005 
cur_lbuf
->
ãrm_ty≥
 =
TERM_ADD_INPUT
) {

1008 
löked_buf_t
 *
¥ev_lbuf
 = 
cur_lbuf
->
¥ev
;

1010 
	`FREE
(
cur_lbuf
);

1011 
cur_lbuf
 = 
¥ev_lbuf
;

1012 
ouç
 = 
cur_lbuf
->outp;

1013 
œ°_∆
 = 
cur_lbuf
->last_nl;

1014 i‡(
cur_lbuf
->
ãrm_ty≥
 =
TERM_ADD_INPUT


1015 || (
ouç
 !
œ°_∆
 + 1))

1025 *
íd
;

1026 *
p
;

1027 
size
;

1029 i‡(!
ö˘›
) {

1031 
íd
 = 
cur_lbuf
->
buf
 + 
DEFMAX
;

1032 i‡(
íd
 - 
cur_lbuf
->
buf_íd
 > 
MAXLINE
 + 5) {

1033 
p
 = 
cur_lbuf
->
buf_íd
;

1037 
size
 = 
cur_lbuf
->
buf_íd
 - 
ouç
 + 1;

1038 
	`mem˝y
(
ouç
 - 
MAXLINE
 - 1, ouç - 1, 
size
);

1039 
ouç
 -
MAXLINE
;

1040 
p
 = 
ouç
 + 
size
 - 1;

1043 
size
 = 
	`c‹ª˘_ªad
(
yyö_desc
, 
p
, 
MAXLINE
);

1044 
cur_lbuf
->
buf_íd
 = 
p
 +
size
;

1045 i‡(
size
 < 
MAXLINE
Ë{ *(
œ°_∆
 = 
p
Ë
LEX_EOF
; ; }

1046 *--
p
 != '\n');

1047 i‡(
p
 =
ouç
 - 1) {

1048 
	`Àxîr‹
("LineÅooÜong.");

1049 *(
œ°_∆
 = 
cur_lbuf
->
buf_íd
 - 1) = '\n';

1052 
œ°_∆
 = 
p
;

1055 
Êag
 = 0;

1059 
íd
 = 
ö˘›
->
ouç
;

1062 i‡(
cur_lbuf
->
ãrm_ty≥
 =
TERM_INCLUDE
 &&

1063 !(
íd
 >
cur_lbuf
->
buf
 &&Énd < cur_lbuf->bu‡+ 
DEFMAX
)) {

1064 
íd
 = 
cur_lbuf
->
buf_íd
;

1065 
Êag
 = 1;

1068 
size
 = 
íd
 - 
ouç
 + 1;

1069 i‡(
ouç
 - 
cur_lbuf
->
buf
 > 2 * 
MAXLINE
) {

1070 
	`mem˝y
(
ouç
 - 
MAXLINE
 - 1, ouç - 1, 
size
);

1071 
ouç
 -
MAXLINE
;

1072 
p
 = 
ouç
 + 
size
 - 1;

1074 
löked_buf_t
 *
√w_lbuf
;

1075 *
√w_ouç
;

1077 i‡(!(
√w_lbuf
 = 
	`ALLOCATE
(
löked_buf_t
, 
TAG_COMPILER
, "refill_bufer"))) {

1078 
	`Àxîr‹
("Out of memory whenállocatingÇew buffer.\n");

1081 
cur_lbuf
->
œ°_∆
 =Üast_nl;

1082 
cur_lbuf
->
ouç
 = outp;

1083 
√w_lbuf
->
¥ev
 = 
cur_lbuf
;

1084 
√w_lbuf
->
ãrm_ty≥
 = 
TERM_INCLUDE
;

1085 
√w_ouç
 = 
√w_lbuf
->
buf
 + 
DEFMAX
 - 
MAXLINE
 - 
size
 - 5;

1086 
	`mem˝y
(
√w_ouç
 - 1, 
ouç
 - 1, 
size
);

1087 
cur_lbuf
 = 
√w_lbuf
;

1088 
ouç
 = 
√w_ouç
;

1089 
p
 = 
ouç
 + 
size
 - 1;

1090 
Êag
 = 1;

1093 
size
 = 
	`c‹ª˘_ªad
(
yyö_desc
, 
p
, 
MAXLINE
);

1094 
íd
 = 
p
 +
size
;

1095 i‡(
Êag
Ë
cur_lbuf
->
buf_íd
 = 
p
;

1096 i‡(
size
 < 
MAXLINE
) {

1097 *(
œ°_∆
 = 
p
Ë
LEX_EOF
; ;

1099 *--
p
 != '\n');

1100 i‡(
p
 =
ouç
 - 1) {

1101 
	`Àxîr‹
("LineÅooÜong.");

1102 *(
œ°_∆
 = 
íd
 - 1) = '\n';

1105 
œ°_∆
 = 
p
;

1109 
	}
}

1111 
	gfun˘i⁄_Êag
 = 0;

1113 
INLINE
 
	$push_fun˘i⁄_c⁄ãxt
() {

1114 
fun˘i⁄_c⁄ãxt_t
 *
fc
;

1115 
∑r£_node_t
 *
node
;

1117 i‡(
œ°_fun˘i⁄_c⁄ãxt
 =
MAX_FUNCTION_DEPTH
 - 1) {

1118 
	`yyîr‹
("FunctionÖointersÇestedÅoo deep.");

1121 
fc
 = &
fun˘i⁄_c⁄ãxt_°ack
[++
œ°_fun˘i⁄_c⁄ãxt
];

1122 
fc
->
num_∑ømëîs
 = 0;

1123 
fc
->
num_loˇls
 = 0;

1124 
node
 = 
	`√w_node_no_löe
();

1125 
node
->
l
.
ex¥
 =Çode;

1126 
node
->
r
.
ex¥
 = 0;

1127 
node
->
köd
 = 0;

1128 
fc
->
vÆues_li°
 = 
node
;

1129 
fc
->
bödabÀ
 = 0;

1130 
fc
->
∑ª¡
 = 
cuºít_fun˘i⁄_c⁄ãxt
;

1132 
cuºít_fun˘i⁄_c⁄ãxt
 = 
fc
;

1133 
	}
}

1135 
	$p›_fun˘i⁄_c⁄ãxt
() {

1136 
cuºít_fun˘i⁄_c⁄ãxt
 = cuºít_fun˘i⁄_c⁄ãxt->
∑ª¡
;

1137 
œ°_fun˘i⁄_c⁄ãxt
--;

1138 
	}
}

1140 
	$ﬁd_func
() {

1141 
	`add_öput
(" ");

1142 
	`add_öput
(
yyãxt
);

1143 
	`push_fun˘i⁄_c⁄ãxt
();

1144  
L_FUNCTION_OPEN
;

1145 
	}
}

1147 
	#ªtu∫_assign
(
›code
Ë{ 
yylvÆ
.
numbî
 = opcode;  
L_ASSIGN
; }

	)

1148 
	#ªtu∫_‹dî
(
›code
Ë{ 
yylvÆ
.
numbî
 = opcode;  
L_ORDER
; }

	)

1152 
	$Àx_bªakpoöt
() {

1153 
	}
}

1155 
	$yyÀx
()

1157 
∑πül
[
MAXLINE
 + 5];

1158 
ãrmö©‹
[
MAXLINE
 + 5];

1159 
is_Êﬂt
;

1160 
myªÆ
;

1161 *
∑πp
;

1163 *
yyp
;

1164 
c
;

1166 
yyãxt
[0] = 0;

1168 
∑πp
 = 
∑πül
;

1169 
∑πül
[0] = 0;

1172 i‡(
Àx_Áèl
) {

1175 
c
 = *
ouç
++) {

1176 
LEX_EOF
:

1177 i‡(
ö˘›
) {

1178 
öc°©e_t
 *
p
;

1180 
p
 = 
ö˘›
;

1181 
	`˛o£
(
yyö_desc
);

1182 
	`ßve_fûe_öfo
(
cuºít_fûe_id
, 
cuºít_löe
 - 
cuºít_löe_ßved
);

1183 
cuºít_löe_ßved
 = 
p
->
löe
 - 1;

1186 
cuºít_löe_ba£
 +
cuºít_löe
 - 
cuºít_löe_ßved
;

1187 
	`‰ì_°rög
(
cuºít_fûe
);

1188 
√x∑nds
 = 0;

1189 i‡(
ouç
 >
cur_lbuf
->
buf_íd
) {

1190 
löked_buf_t
 *
¥ev_lbuf
;

1191 i‡((
¥ev_lbuf
 = 
cur_lbuf
->
¥ev
)) {

1192 
	`FREE
(
cur_lbuf
);

1193 
cur_lbuf
 = 
¥ev_lbuf
;

1197 
cuºít_fûe
 = 
p
->
fûe
;

1198 
cuºít_fûe_id
 = 
p
->
fûe_id
;

1199 
cuºít_löe
 = 
p
->
löe
;

1201 
yyö_desc
 = 
p
->yyin_desc;

1202 
œ°_∆
 = 
p
->last_nl;

1203 
ouç
 = 
p
->outp;

1204 
ö˘›
 = 
p
->
√xt
;

1205 
ö˙um
--;

1206 
	`FREE
((*Ë
p
);

1207 
ouç
[-1] = '\n';

1208 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1211 i‡(
i·›
) {

1212 
if°©e_t
 *
p
 = 
i·›
;

1214 
	`yyîr‹
(
p
->
°©e
 =
EXPECT_ENDIF
 ? "Missing #endif" : "Missing #else/#elif");

1215 
i·›
) {

1216 
p
 = 
i·›
;

1217 
i·›
 = 
p
->
√xt
;

1218 
	`FREE
((*Ë
p
);

1221 
ouç
--;

1225 
√x∑nds
 = 0;

1226 
cuºít_löe
++;

1227 
tŸÆ_löes
++;

1228 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1238 *
ouç
++) {

1239 '+':  
L_INC
;

1240 '=': 
	`ªtu∫_assign
(
F_ADD_EQ
);

1241 : 
ouç
--;  '+';

1246 *
ouç
++) {

1247 '>':  
L_ARROW
;

1248 '-':  
L_DEC
;

1249 '=': 
	`ªtu∫_assign
(
F_SUB_EQ
);

1250 : 
ouç
--;  '-';

1255 *
ouç
++) {

1256 '&':  
L_LAND
;

1257 '=': 
	`ªtu∫_assign
(
F_AND_EQ
);

1258 : 
ouç
--;  '&';

1263 *
ouç
++) {

1264 '|':  
L_LOR
;

1265 '=': 
	`ªtu∫_assign
(
F_OR_EQ
);

1266 : 
ouç
--;  '|';

1271 i‡(*
ouç
++ ='='Ë
	`ªtu∫_assign
(
F_XOR_EQ
);

1272 
ouç
--;

1277 *
ouç
++) {

1280 i‡(*
ouç
++ ='='Ë
	`ªtu∫_assign
(
F_LSH_EQ
);

1281 
ouç
--;

1282  
L_LSH
;

1284 '=': 
	`ªtu∫_‹dî
(
F_LE
);

1285 : 
ouç
--;  '<';

1290 *
ouç
++) {

1293 i‡(*
ouç
++ ='='Ë
	`ªtu∫_assign
(
F_RSH_EQ
);

1294 
ouç
--;

1295  
L_RSH
;

1297 '=': 
	`ªtu∫_‹dî
(
F_GE
);

1298 : 
ouç
--; 
	`ªtu∫_‹dî
(
F_GT
);

1303 i‡(*
ouç
++ ='='Ë
	`ªtu∫_assign
(
F_MULT_EQ
);

1304 
ouç
--;

1309 i‡(*
ouç
++ ='='Ë
	`ªtu∫_assign
(
F_MOD_EQ
);

1310 
ouç
--;

1314 *
ouç
++) {

1315 '*': 
	`skù_commít
(); ;

1316 '/': 
	`skù_löe
(); ;

1317 '=': 
	`ªtu∫_assign
(
F_DIV_EQ
);

1318 : 
ouç
--;  '/';

1322 i‡(*
ouç
++ ='='Ë 
L_EQ
;

1323 
ouç
--;

1324 
yylvÆ
.
numbî
 = 
F_ASSIGN
;

1325  
L_ASSIGN
;

1327 
yyp
 = 
ouç
;

1328 
	`is•a˚
(
c
 = *
yyp
++)) {

1329 i‡(
c
 == '\n') {

1330 
cuºít_löe
++;

1331 i‡(
yyp
 =
œ°_∆
 + 1) {

1332 
ouç
 = 
yyp
;

1333 
	`ªfûl_buf„r
();

1334 
yyp
 = 
ouç
;

1339 
c
) {

1340 '{' : { 
ouç
 = 
yyp
;  
L_ARRAY_OPEN
; }

1341 '[' : { 
ouç
 = 
yyp
;  
L_MAPPING_OPEN
; }

1344 i‡((
c
 = *
yyp
++) == ':') {

1345 
ouç
 = 
yyp
 -= 2;

1348 
	`is•a˚
(
c
)) {

1349 i‡(
c
 == '\n') {

1350 i‡((
yyp
 =
œ°_∆
 + 1)) {

1351 
ouç
 = 
yyp
;

1352 
	`ªfûl_buf„r
();

1353 
yyp
 = 
ouç
;

1355 
cuºít_löe
++;

1357 
c
 = *
yyp
++;

1360 
ouç
 = 
yyp
;

1362 i‡(
	`ißÕha
(
c
) || c == '_') {

1363 
fun˘i⁄_Êag
 = 1;

1364 
∑r£_idítifõr
;

1367 
ouç
--;

1368 
	`push_fun˘i⁄_c⁄ãxt
();

1369  
L_FUNCTION_OPEN
;

1375 
ouç
 = 
yyp
 - 1;

1381 i‡(!
cuºít_fun˘i⁄_c⁄ãxt
) {

1382 
	`yyîr‹
("$var illegal outside of functionÖointer.");

1385 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 == -2) {

1386 
	`yyîr‹
("$var illegal insideánonymous functionÖointer.");

1389 i‡(!
	`isdigô
(
c
 = *
ouç
++)) {

1390 
ouç
--;

1393 
yyp
 = 
yyãxt
;

1394 
SAVEC
;

1396 i‡(!
	`isdigô
(
c
 = *
ouç
++)) ;

1397 
SAVEC
;

1399 
ouç
--;

1400 *
yyp
 = 0;

1401 
yylvÆ
.
numbî
 = 
	`©oi
(
yyãxt
) - 1;

1402 i‡(
yylvÆ
.
numbî
 < 0)

1403 
	`yyîr‹
("In functionÖarameter $num,Çum must be >= 1.");

1404 i‡(
yylvÆ
.
numbî
 > 255)

1405 
	`yyîr‹
("only 256Öarametersállowed.");

1406 i‡(
yylvÆ
.
numbî
 >
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
)

1407 
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 = 
yylvÆ
.
numbî
 + 1;

1408  
L_PARAMETER
;

1418 #i‚de‡
USE_TRIGRAPHS


1420  
c
;

1422  
c
;

1435 i‡(*
ouç
++ != '?') { outp--;  '?'; }

1436 *
ouç
++) {

1447 
ouç
 -= 2;

1452 i‡(*
ouç
++ ='='Ë 
L_NE
;

1453 
ouç
--;

1454  
L_NOT
;

1456 i‡(*
ouç
++ =':'Ë 
L_COLON_COLON
;

1457 
ouç
--;

1460 i‡(*
ouç
++ == '.') {

1461 i‡(*
ouç
++ == '.')

1462  
L_DOT_DOT_DOT
;

1463 
ouç
--;

1464  
L_RANGE
;

1466 
ouç
--;

1467 
badÀx
;

1469 i‡(*(
ouç
 - 2) == '\n') {

1470 *
•
 = 0;

1471 
quŸe
;

1473 
	`is_w•a˚
(
c
 = *
ouç
++));

1475 
yyp
 = 
yyãxt
;

1477 
quŸe
 = 0;;) {

1479 i‡(
c
 == '"')

1480 
quŸe
 ^= 1;

1481 i‡(
c
 ='/' && !
quŸe
) {

1482 i‡(*
ouç
 == '*') {

1483 
ouç
++;

1484 
	`skù_commít
();

1485 
c
 = *
ouç
++;

1487 i‡(*
ouç
 == '/') {

1488 
ouç
++;

1489 
	`skù_löe
();

1490 
c
 = *
ouç
++;

1493 i‡(!
•
 && 
	`is•a˚
(
c
))

1494 
•
 = 
yyp
;

1495 i‡(
c
 ='\n' || c =
LEX_EOF
) ;

1496 
SAVEC
;

1497 
c
 = *
ouç
++;

1499 i‡(
•
) {

1500 *
•
++ = 0;

1501 
	`uis•a˚
(*
•
))

1502 
•
++;

1504 
•
 = 
yyp
;

1506 *
yyp
 = 0;

1507 i‡(!
	`°rcmp
("ö˛ude", 
yyãxt
)) {

1508 
cuºít_löe
++;

1509 i‡(
c
 =
LEX_EOF
) {

1510 *(
œ°_∆
 = --
ouç
Ë
LEX_EOF
;

1511 
ouç
[-1] = '\n';

1513 
	`h™dÀ_ö˛ude
(
•
, 0);

1516 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1518 i‡(
	`°rcmp
("deföe", 
yyãxt
) == 0) {

1519 
	`h™dÀ_deföe
(
•
);

1520 } i‡(
	`°rcmp
("if", 
yyãxt
) == 0) {

1521 
c⁄d
;

1523 *--
ouç
 = '\0';

1524 
	`add_öput
(
•
);

1525 
c⁄d
 = 
	`c⁄d_gë_exp
(0);

1526 i‡(*
ouç
++) {

1527 
	`yyîr‹
("ConditionÅoo complex in #if");

1528 *
ouç
++);

1530 
	`h™dÀ_c⁄d
(
c⁄d
);

1531 } i‡(
	`°rcmp
("ifdef", 
yyãxt
) == 0) {

1532 
	`dñåaû
(
•
);

1533 
	`h™dÀ_c⁄d
(
	`lookup_deföe
(
•
) != 0);

1534 } i‡(
	`°rcmp
("i‚def", 
yyãxt
) == 0) {

1535 
	`dñåaû
(
•
);

1536 
	`h™dÀ_c⁄d
(
	`lookup_deföe
(
•
) == 0);

1537 } i‡(
	`°rcmp
("ñif", 
yyãxt
) == 0) {

1538 
	`h™dÀ_ñif
(
•
);

1539 } i‡(
	`°rcmp
("ñ£", 
yyãxt
) == 0) {

1540 
	`h™dÀ_ñ£
();

1541 } i‡(
	`°rcmp
("ídif", 
yyãxt
) == 0) {

1542 
	`h™dÀ_ídif
();

1543 } i‡(
	`°rcmp
("undef", 
yyãxt
) == 0) {

1544 
de‚_t
 *
d
;

1546 
	`dñåaû
(
•
);

1547 i‡((
d
 = 
	`lookup_deföe
(
•
))) {

1548 i‡(
d
->
Êags
 & 
DEF_IS_PREDEF
)

1549 
	`yyîr‹
("IllegalÅo #undefáÖredefined value.");

1551 
d
->
Êags
 |
DEF_IS_UNDEFINED
;

1553 } i‡(
	`°rcmp
("echo", 
yyãxt
) == 0) {

1554 
	`debug_mesßge
("%s\n", 
•
);

1555 } i‡(
	`°rcmp
("îr‹", 
yyãxt
) == 0) {

1556 
buf
[
MAXLINE
+1];

1557 
	`°r˝y
(
buf
, 
yyãxt
);

1558 
	`°rˇt
(
buf
, "\n");

1559 
	`yyîr‹
(
buf
);

1560 } i‡(
	`°rcmp
("w¨n", 
yyãxt
) == 0) {

1561 
buf
[
MAXLINE
+1];

1562 
	`°r˝y
(
buf
, 
yyãxt
);

1563 
	`°rˇt
(
buf
, "\n");

1564 
	`yyw¨n
(
buf
);

1565 } i‡(
	`°rcmp
("¥agma", 
yyãxt
) == 0) {

1566 
	`h™dÀ_¥agma
(
•
);

1567 } i‡(
	`°rcmp
("bªakpoöt", 
yyãxt
) == 0) {

1568 
	`Àx_bªakpoöt
();

1570 
	`yyîr‹
("Unrecognised # directive");

1572 *--
ouç
 = '\n';

1576 #ifde‡
COMPAT_32


1577 i‡(*
ouç
 == '\'') {

1578 
ouç
++;

1579  
L_LAMBDA
;

1582 
badÀx
;

1586 i‡(*
ouç
++ == '\\') {

1587 *
ouç
++) {

1588 'n': 
yylvÆ
.
numbî
 = '\n'; ;

1589 't': 
yylvÆ
.
numbî
 = '\t'; ;

1590 'r': 
yylvÆ
.
numbî
 = '\r'; ;

1591 'b': 
yylvÆ
.
numbî
 = '\b'; ;

1592 'a': 
yylvÆ
.
numbî
 = '\x07'; ;

1593 'e': 
yylvÆ
.
numbî
 = '\x1b'; ;

1594 '\'': 
yylvÆ
.
numbî
 = '\''; ;

1595 '"': 
yylvÆ
.
numbî
 = '"'; ;

1596 '\\': 
yylvÆ
.
numbî
 = '\\'; ;

1599 
ouç
--;

1600 
yylvÆ
.
numbî
 = 
	`°πﬁ
(
ouç
, &outp, 8);

1601 i‡(
yylvÆ
.
numbî
 > 255) {

1602 
	`yyw¨n
("Illegal character constant.");

1603 
yylvÆ
.
numbî
 = 'x';

1607 i‡(!
	`isxdigô
(()*
ouç
)) {

1608 
yylvÆ
.
numbî
 = 'x';

1609 
	`yyw¨n
("\\x must be followed byá valid hex value; interpretingás 'x' instead.");

1611 
yylvÆ
.
numbî
 = 
	`°πﬁ
(
ouç
, &outp, 16);

1612 i‡(
yylvÆ
.
numbî
 > 255) {

1613 
	`yyw¨n
("Illegal character constant.");

1614 
yylvÆ
.
numbî
 = 'x';

1619 
yylvÆ
.
numbî
 = '\n';

1620 
cuºít_löe
++;

1621 
tŸÆ_löes
++;

1622 i‡((
ouç
 = 
œ°_∆
 + 1))

1623 
	`ªfûl_buf„r
();

1626 
	`yyw¨n
("Unknown \\Éscape.");

1627 
yylvÆ
.
numbî
 = *(
ouç
 - 1);

1631 
yylvÆ
.
numbî
 = *(
ouç
 - 1);

1634 i‡(*
ouç
++ != '\'') {

1635 
ouç
--;

1636 
	`yyîr‹
("Illegal character constant");

1637 
yylvÆ
.
numbî
 = 0;

1639  
L_NUMBER
;

1642 
rc
;

1643 
tmp
;

1645 i‡((
tmp
 = *
ouç
++) != '@') {

1647 
ouç
--;

1649 i‡(!
	`gë_ãrmö©‹
(
ãrmö©‹
)) {

1650 
	`Àxîr‹
("IllegalÅerminator");

1653 i‡(
tmp
 == '@') {

1654 
rc
 = 
	`gë_¨øy_block
(
ãrmö©‹
);

1656 i‡(
rc
 > 0) {

1658 
ouç
 += 2;

1659  
L_ARRAY_OPEN
;

1660 } i‡(
rc
 == -1) {

1661 
	`Àxîr‹
("End of file inárray block");

1662  
LEX_EOF
;

1664 
	`yyîr‹
("Array blockÉxceeded maximumÜength");

1667 
rc
 = 
	`gë_ãxt_block
(
ãrmö©‹
);

1669 i‡(
rc
 > 0) {

1670 
n
;

1675 
yylvÆ
.
°rög
 = 
	`s¸©ch_c›y_°rög
(
ouç
);

1677 
n
 = 
	`°æí
(
ouç
) + 1;

1678 
ouç
 +
n
;

1680  
L_STRING
;

1681 } i‡(
rc
 == -1) {

1682 
	`Àxîr‹
("End of file inÅext block");

1683  
LEX_EOF
;

1685 
	`yyîr‹
("Text blockÉxceeded maximumÜength");

1692 
l
;

1693 *
to
 = 
s¸_èû
 + 1;

1695 i‡((
l
 = 
s¸©ch_íd
 - 
to
) > 255)Ü = 255;

1696 
l
--) {

1697 
c
 = *
ouç
++) {

1698 
LEX_EOF
:

1699 
	`Àxîr‹
("End of file in string");

1700  
LEX_EOF
;

1703 *
to
++ = 0;

1704 i‡(!
l
 && (
to
 =
s¸©ch_íd
)) {

1705 *
ªs
 = 
	`s¸©ch_œrge_Æloc
(
to
 - 
s¸_èû
 - 1);

1706 
	`°r˝y
(
ªs
, (*Ë(
s¸_èû
 + 1));

1707 
yylvÆ
.
°rög
 = 
ªs
;

1708  
L_STRING
;

1711 
s¸_œ°
 = 
s¸_èû
 + 1;

1712 
s¸_èû
 = 
to
;

1713 *
to
 =Åÿ- 
s¸_œ°
;

1714 
yylvÆ
.
°rög
 = (*Ë
s¸_œ°
;

1715  
L_STRING
;

1718 
cuºít_löe
++;

1719 
tŸÆ_löes
++;

1720 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1721 *
to
++ = '\n';

1726 ()*
ouç
++) {

1728 
cuºít_löe
++;

1729 
tŸÆ_löes
++;

1730 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1731 
l
++;

1733 
LEX_EOF
:

1734 
	`Àxîr‹
("End of file in string");

1735  
LEX_EOF
;

1736 'n': *
to
++ = '\n'; ;

1737 't': *
to
++ = '\t'; ;

1738 'r': *
to
++ = '\r'; ;

1739 'b': *
to
++ = '\b'; ;

1740 'a': *
to
++ = '\x07'; ;

1741 'e': *
to
++ = '\x1b'; ;

1742 '"': *
to
++ = '"'; ;

1743 '\\': *
to
++ = '\\'; ;

1747 
tmp
;

1748 
ouç
--;

1749 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 8);

1750 i‡(
tmp
 > 255) {

1751 
	`yyw¨n
("Illegal character constant in string.");

1752 
tmp
 = 'x';

1754 *
to
++ = 
tmp
;

1759 
tmp
;

1760 i‡(!
	`isxdigô
(()*
ouç
)) {

1761 *
to
++ = 'x';

1762 
	`yyw¨n
("\\x must be followed byá valid hex value; interpretingás 'x' instead.");

1764 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 16);

1765 i‡(
tmp
 > 255) {

1766 
	`yyw¨n
("Illegal character constant.");

1767 
tmp
 = 'x';

1769 *
to
++ = 
tmp
;

1774 *
to
++ = *(
ouç
 - 1);

1775 
	`yyw¨n
("Unknown \\Éscape.");

1779 *
to
++ = 
c
;

1784 
l
 = 
MAXLINE
 - (
to
 - 
s¸_èû
);

1786 
yyp
 = 
yyãxt
;

1787 
l
--) {

1788 
c
 = *
ouç
++) {

1789 
LEX_EOF
:

1790 
	`Àxîr‹
("End of file in string");

1791  
LEX_EOF
;

1795 *
ªs
;

1796 *
yyp
++ = '\0';

1797 
ªs
 = 
	`s¸©ch_œrge_Æloc
((
yyp
 - 
yyãxt
Ë+ (
to
 - 
s¸_èû
) - 1);

1798 
	`°∫˝y
(
ªs
, (*Ë(
s¸_èû
 + 1), (
to
 - scr_tail) - 1);

1799 
	`°r˝y
(
ªs
 + (
to
 - 
s¸_èû
Ë- 1, 
yyãxt
);

1800 
yylvÆ
.
°rög
 = 
ªs
;

1801  
L_STRING
;

1805 
cuºít_löe
++;

1806 
tŸÆ_löes
++;

1807 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1808 *
yyp
++ = '\n';

1813 ()*
ouç
++) {

1815 
cuºít_löe
++;

1816 
tŸÆ_löes
++;

1817 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

1818 
l
++;

1820 
LEX_EOF
:

1821 
	`Àxîr‹
("End of file in string");

1822  
LEX_EOF
;

1823 'n': *
yyp
++ = '\n'; ;

1824 't': *
yyp
++ = '\t'; ;

1825 'r': *
yyp
++ = '\r'; ;

1826 'b': *
yyp
++ = '\b'; ;

1827 'a': *
yyp
++ = '\x07'; ;

1828 'e': *
yyp
++ = '\x1b'; ;

1829 '"': *
yyp
++ = '"'; ;

1830 '\\': *
yyp
++ = '\\'; ;

1834 
tmp
;

1835 
ouç
--;

1836 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 8);

1837 i‡(
tmp
 > 255) {

1838 
	`yyw¨n
("Illegal character constant in string.");

1839 
tmp
 = 'x';

1841 *
yyp
++ = 
tmp
;

1846 
tmp
;

1847 i‡(!
	`isxdigô
(()*
ouç
)) {

1848 *
yyp
++ = 'x';

1849 
	`yyw¨n
("\\x must be followed byá valid hex value; interpretingás 'x' instead.");

1851 
tmp
 = 
	`°πﬁ
(
ouç
, &outp, 16);

1852 i‡(
tmp
 > 255) {

1853 
	`yyw¨n
("Illegal character constant.");

1854 
tmp
 = 'x';

1856 *
yyp
++ = 
tmp
;

1861 *
yyp
++ = *(
ouç
 - 1);

1862 
	`yyw¨n
("Unknown \\Éscape.");

1866 : *
yyp
++ = 
c
;

1871 
	`Àxîr‹
("StringÅooÜong");

1872 *
yyp
++ = '\0';

1874 *
ªs
;

1875 
ªs
 = 
	`s¸©ch_œrge_Æloc
((
yyp
 - 
yyãxt
Ë+ (
to
 - 
s¸_èû
) - 1);

1876 
	`°∫˝y
(
ªs
, (*Ë(
s¸_èû
 + 1), (
to
 - scr_tail) - 1);

1877 
	`°r˝y
(
ªs
 + (
to
 - 
s¸_èû
Ë- 1, 
yyãxt
);

1878 
yylvÆ
.
°rög
 = 
ªs
;

1879  
L_STRING
;

1883 
c
 = *
ouç
++;

1884 i‡(
c
 == 'X' || c == 'x') {

1885 
yyp
 = 
yyãxt
;

1887 
c
 = *
ouç
++;

1888 
SAVEC
;

1889 i‡(!
	`isxdigô
(()
c
))

1892 
ouç
--;

1893 
yylvÆ
.
numbî
 = (Ë
	`°πﬁ
(
yyãxt
, (**Ë
NULL
, 0x10);

1894  
L_NUMBER
;

1896 
ouç
--;

1897 
c
 = '0';

1908 
is_Êﬂt
 = 0;

1909 
yyp
 = 
yyãxt
;

1910 *
yyp
++ = 
c
;

1912 
c
 = *
ouç
++;

1913 i‡(
c
 == '.') {

1914 i‡(!
is_Êﬂt
) {

1915 
is_Êﬂt
 = 1;

1917 
is_Êﬂt
 = 0;

1918 
ouç
--;

1921 } i‡(!
	`isdigô
(()
c
))

1923 
SAVEC
;

1925 
ouç
--;

1926 *
yyp
 = 0;

1927 i‡(
is_Êﬂt
) {

1928 
	`ssˇnf
(
yyãxt
, "%f", &
myªÆ
);

1929 
yylvÆ
.
ªÆ
 = ()
myªÆ
;

1930  
L_REAL
;

1932 
yylvÆ
.
numbî
 = 
	`©oi
(
yyãxt
);

1933  
L_NUMBER
;

1936 i‡(
	`ißÕha
(()
c
) || c == '_') {

1937 
r
;

1939 
∑r£_idítifõr
:

1940 
yyp
 = 
yyãxt
;

1941 *
yyp
++ = 
c
;

1943 
c
 = *
ouç
++;

1944 i‡(!
	`iß um
(()
c
) && (c != '_'))

1946 
SAVEC
;

1948 *
yyp
 = 0;

1949 i‡(
c
 == '#') {

1950 i‡(*
ouç
++ != '#')

1951 
	`Àxîr‹
("Single '#' in identifier -- use '##' forÅokenÖasting");

1952 
ouç
 -= 2;

1953 i‡(!
	`ex∑nd_deföe
()) {

1954 i‡(
∑πp
 + (
r
 = 
	`°æí
(
yyãxt
)Ë+ (
fun˘i⁄_Êag
 ? 3 : 0Ë- 
∑πül
 > 
MAXLINE
)

1955 
	`Àxîr‹
("PastedÅoken isÅooÜong");

1956 i‡(
fun˘i⁄_Êag
) {

1957 
	`°r˝y
(
∑πp
, "(: ");

1958 
∑πp
 += 3;

1960 
	`°r˝y
(
∑πp
, 
yyãxt
);

1961 
∑πp
 +
r
;

1962 
ouç
 += 2;

1964 } i‡(
∑πp
 !
∑πül
) {

1965 
ouç
--;

1966 i‡(!
	`ex∑nd_deföe
())

1967 
	`add_öput
(
yyãxt
);

1968 (
c
 = *
ouç
++) == ' ');

1969 
ouç
--;

1970 
	`add_öput
(
∑πül
);

1971 
∑πp
 = 
∑πül
;

1972 
∑πül
[0] = 0;

1974 
ouç
--;

1975 i‡(!
	`ex∑nd_deföe
()) {

1976 
idít_hash_ñem_t
 *
ihe
;

1977 i‡((
ihe
 = 
	`lookup_idít
(
yyãxt
))) {

1978 i‡(
ihe
->
tokí
 & 
IHE_RESWORD
) {

1979 i‡(
fun˘i⁄_Êag
) {

1980 
fun˘i⁄_Êag
 = 0;

1981 
	`add_öput
(
yyãxt
);

1982 
	`push_fun˘i⁄_c⁄ãxt
();

1983  
L_FUNCTION_OPEN
;

1985 
yylvÆ
.
numbî
 = 
ihe
->
£m_vÆue
;

1986  
ihe
->
tokí
 & 
TOKEN_MASK
;

1988 i‡(
fun˘i⁄_Êag
) {

1989 
vÆ
;

1991 
fun˘i⁄_Êag
 = 0;

1992 (
c
 = *
ouç
++) == ' ');

1993 
ouç
--;

2002 i‡(
c
 != ':' && c != ',')

2003  
	`ﬁd_func
();

2004 i‡((
vÆ
=
ihe
->
dn
.
loˇl_num
) >= 0) {

2005 i‡(
c
 =','Ë 
	`ﬁd_func
();

2006 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_L_VAR
;

2007 } i‡((
vÆ
=
ihe
->
dn
.
globÆ_num
) >= 0) {

2008 i‡(
c
 =','Ë 
	`ﬁd_func
();

2009 
yylvÆ
.
numbî
 = (
vÆ
 << 8Ë| 
FP_G_VAR
;

2010 } i‡((
vÆ
=
ihe
->
dn
.
fun˘i⁄_num
) >=0) {

2011 
yylvÆ
.
numbî
 = (
vÆ
 << 8)|
FP_LOCAL
;

2012 } i‡((
vÆ
=
ihe
->
dn
.
simul_num
) >=0) {

2013 
yylvÆ
.
numbî
 = (
vÆ
 << 8)|
FP_SIMUL
;

2014 } i‡((
vÆ
=
ihe
->
dn
.
efun_num
) >=0) {

2015 
yylvÆ
.
numbî
 = (
vÆ
 << 8)|
FP_EFUN
;

2016 }  
	`ﬁd_func
();

2017  
L_NEW_FUNCTION_OPEN
;

2019 
yylvÆ
.
ihe
 = ihe;

2020  
L_DEFINED_NAME
;

2022 
yylvÆ
.
°rög
 = 
	`s¸©ch_c›y
(
yyãxt
);

2023  
L_IDENTIFIER
;

2025 i‡(
fun˘i⁄_Êag
) {

2026 
fun˘i⁄_Êag
 = 0;

2027 
	`add_öput
("(:");

2032 
badÀx
;

2035 
badÀx
:

2037 #ifde‡
DEBUG


2038 
buff
[100];

2040 
	`•rötf
(
buff
, "IŒegÆ ch¨a˘î (hex %02xË'%c'", (Ë
c
, () c);

2041 
	`yyîr‹
(
buff
);

2045 
	}
}

2047 
YYSTYPE
 
yylvÆ
;

2049 
	$íd_√w_fûe
()

2051 
ö˘›
) {

2052 
öc°©e_t
 *
p
;

2054 
p
 = 
ö˘›
;

2055 
	`˛o£
(
yyö_desc
);

2056 
	`‰ì_°rög
(
cuºít_fûe
);

2057 
cuºít_fûe
 = 
p
->
fûe
;

2058 
yyö_desc
 = 
p
->yyin_desc;

2059 
ö˘›
 = 
p
->
√xt
;

2060 
	`FREE
((*Ë
p
);

2062 
ö˘›
 = 0;

2063 
i·›
) {

2064 
if°©e_t
 *
p
;

2066 
p
 = 
i·›
;

2067 
i·›
 = 
p
->
√xt
;

2068 
	`FREE
((*Ë
p
);

2070 i‡(
deföes_√ed_‰ìd
) {

2071 
	`‰ì_deföes
();

2072 
deföes_√ed_‰ìd
 = 0;

2074 i‡(
cur_lbuf
 !&
hód_lbuf
) {

2075 
löked_buf_t
 *
¥ev_lbuf
;

2077 
cur_lbuf
 !&
hód_lbuf
) {

2078 
¥ev_lbuf
 = 
cur_lbuf
->
¥ev
;

2079 
	`FREE
 ((*Ë
cur_lbuf
);

2080 
cur_lbuf
 = 
¥ev_lbuf
;

2083 
	}
}

2085 
add_quŸed_¥edeföe
 
	$P2
(*, 
def
, *, 
vÆ
)

2087 
ßve_buf
[1024];

2089 
	`°r˝y
(
ßve_buf
, "\"");

2090 
	`°rˇt
(
ßve_buf
, 
vÆ
);

2091 
	`°rˇt
(
ßve_buf
, "\"");

2092 
	`add_¥edeföe
(
def
, -1, 
ßve_buf
);

2093 
	}
}

2095 
	$add_¥edeföes
()

2097 
ßve_buf
[80];

2098 
i
;

2099 
Õc_¥edef_t
 *
tmpf
;

2101 
	`add_¥edeföe
("MUDOS", -1, "");

2102 
	`gë_vîsi⁄
(
ßve_buf
);

2103 
	`add_quŸed_¥edeföe
("__VERSION__", 
ßve_buf
);

2104 
	`•rötf
(
ßve_buf
, "%d", 
exã∫Æ_p‹t
[0].
p‹t
);

2105 
	`add_¥edeföe
("__PORT__", -1, 
ßve_buf
);

2106 
i
 = 0; i < 2 * 
NUM_OPTION_DEFS
; i += 2) {

2107 
	`add_¥edeföe
(
›ti⁄_defs
[
i
], -1, option_defs[i+1]);

2109 
	`add_quŸed_¥edeföe
("__ARCH__", 
ARCH
);

2110 
	`add_quŸed_¥edeföe
("__COMPILER__", 
COMPILER
);

2111 
	`add_quŸed_¥edeföe
("__OPTIMIZATION__", 
OPTIMIZE
);

2114 #i‚de‡
CDLIB


2115 
	`add_quŸed_¥edeföe
("MUD_NAME", 
MUD_NAME
);

2117 #ifde‡
F_ED


2118 
	`add_¥edeföe
("HAS_ED", -1, "");

2120 #ifde‡
F_PRINTF


2121 
	`add_¥edeföe
("HAS_PRINTF", -1, "");

2123 #i‡(
	`deföed
(
RUSAGE
Ë|| deföed(
GET_PROCESS_STATS
Ë|| deföed(
TIMES
)Ë|| deföed(
LATTICE
)

2124 
	`add_¥edeföe
("HAS_RUSAGE", -1, "");

2126 #ifde‡
DEBUG_MACRO


2127 
	`add_¥edeföe
("HAS_DEBUG_LEVEL", -1, "");

2129 
tmpf
 = 
Õc_¥edefs
;Åmpf;Åmp‡tmpf->
√xt
) {

2130 
«mebuf
[
NSIZE
];

2131 
mãxt
[
MLEN
];

2133 *
mãxt
 = '\0';

2134 
	`ssˇnf
(
tmpf
->
Êag
, "%[^=]=%[ -~=]", 
«mebuf
, 
mãxt
);

2135 i‡(
	`°æí
(
«mebuf
Ë>
NSIZE
)

2136 
	`Áèl
("NSIZEÉxceeded");

2137 i‡(
	`°æí
(
mãxt
Ë>
MLEN
)

2138 
	`Áèl
("MLENÉxceeded");

2139 
	`add_¥edeföe
(
«mebuf
, -1, 
mãxt
);

2141 
	}
}

2143 
°¨t_√w_fûe
 
	$P1
(, 
f
)

2145 i‡(
deföes_√ed_‰ìd
) {

2146 
	`‰ì_deföes
();

2148 
deföes_√ed_‰ìd
 = 1;

2149 i‡(
cuºít_fûe
) {

2150 *
dú
;

2151 *
tmp
;

2152 
 
;

2154 
 
 = 
	`°æí
(
cuºít_fûe
);

2155 
dú
 = (*Ë
	`DMALLOC
(
 
 + 4, 
TAG_COMPILER
, "start_new_file");

2156 
dú
[0] = '"';

2157 
dú
[1] = '/';

2158 
	`mem˝y
(
dú
 + 2, 
cuºít_fûe
, 
 
);

2159 
dú
[
 
 + 2] = '"';

2160 
dú
[
 
 + 3] = 0;

2161 
	`add_deföe
("__FILE__", -1, 
dú
);

2162 
tmp
 = 
	`°ºchr
(
dú
, '/');

2163 
tmp
[1] = '"';

2164 
tmp
[2] = 0;

2165 
	`add_deföe
("__DIR__", -1, 
dú
);

2166 
	`FREE
(
dú
);

2168 
yyö_desc
 = 
f
;

2169 
Àx_Áèl
 = 0;

2170 
œ°_fun˘i⁄_c⁄ãxt
 = -1;

2171 
cuºít_fun˘i⁄_c⁄ãxt
 = 0;

2172 
cur_lbuf
 = &
hód_lbuf
;

2173 
cur_lbuf
->
ouç
 = cur_lbuf->
buf_íd
 = ouç = cur_lbuf->
buf
 + (
DEFMAX
 >> 1);

2174 *(
œ°_∆
 = 
ouç
 - 1) = '\n';

2175 
¥agmas
 = 
DEFAULT_PRAGMAS
;

2176 
√x∑nds
 = 0;

2177 
ö˙um
 = 0;

2178 
cuºít_löe
 = 1;

2179 
cuºít_löe_ba£
 = 0;

2180 
cuºít_löe_ßved
 = 0;

2181 
fun˘i⁄_Êag
 = 0;

2182 i‡(*
GLOBAL_INCLUDE_FILE
) {

2183 *
gifûe
;

2186 
gifûe
 = 
	`Æloc_c°rög
(
GLOBAL_INCLUDE_FILE
, "global include");

2187 
	`h™dÀ_ö˛ude
(
gifûe
, 1);

2188 
	`FREE
(
gifûe
);

2189 } 
	`ªfûl_buf„r
();

2190 
	}
}

2192 *
quîy_ö°r_«me
 
	$P1
(, 
ö°r
)

2194 *
«me
;

2195 
num_buf
[20];

2197 
«me
 = 
ö°rs
[
ö°r
].name;

2199 i‡(
«me
) {

2200 i‡(
«me
[0] == '_')Çame++;

2201  
«me
;

2203 
	`•rötf
(
num_buf
, "efun%d", 
ö°r
);

2204  
num_buf
;

2206 
	}
}

2208 #ifde‡
LPC_TO_C


2209 
	#add_ö°r_«me
(
w
, 
x
, 
y
, 
z
Ë
	`öt_add_ö°r_«me
(w, x, y, z)

	)

2211 
öt_add_ö°r_«me
 
	$P4
(*, 
«me
, *, 
routöe
, , 
n
, , 
t
)

2213 
ö°rs
[
n
].
«me
 =Çame;

2214 i‡(
routöe
Ë
ö°rs
[
n
].routine =Ñoutine;

2215 
ö°rs
[
n
].
ªt_ty≥
 = 
t
;

2216 
	}
}

2218 
	#add_ö°r_«me
(
w
, 
x
, 
y
, 
z
Ë
	`öt_add_ö°r_«me
(w, y, z)

	)

2220 
öt_add_ö°r_«me
 
	$P3
(*, 
«me
, , 
n
, , 
t
)

2222 
ö°rs
[
n
].
«me
 =Çame;

2223 
ö°rs
[
n
].
ªt_ty≥
 = 
t
;

2224 
	}
}

2227 
	$öô_ö°rs
()

2229 
i
, 
n
;

2231 
i
 = 0; i < 
BASE
; i++) {

2232 
ö°rs
[
i
].
ªt_ty≥
 = -1;

2233 #ifde‡
LPC_TO_C


2234 
ö°rs
[
i
].
routöe
 = "???();\n";

2237 
i
 = 0; i < 
	`NELEM
(
¥edefs
); i++) {

2238 
n
 = 
¥edefs
[
i
].
tokí
;

2239 i‡(
n
 & 
F_ALIAS_FLAG
) {

2240 
¥edefs
[
i
].
tokí
 ^
F_ALIAS_FLAG
;

2242 
ö°rs
[
n
].
mö_¨g
 = 
¥edefs
[
i
].
mö_¨gs
;

2243 
ö°rs
[
n
].
max_¨g
 = 
¥edefs
[
i
].
max_¨gs
;

2244 
ö°rs
[
n
].
«me
 = 
¥edefs
[
i
].
w‹d
;

2245 
ö°rs
[
n
].
ty≥
[0] = 
¥edefs
[
i
].
¨g_ty≥1
;

2246 
ö°rs
[
n
].
ty≥
[1] = 
¥edefs
[
i
].
¨g_ty≥2
;

2247 
ö°rs
[
n
].
ty≥
[2] = 
¥edefs
[
i
].
¨g_ty≥3
;

2248 
ö°rs
[
n
].
ty≥
[3] = 
¥edefs
[
i
].
¨g_ty≥4
;

2249 
ö°rs
[
n
].
DeÁu…
 = 
¥edefs
[
i
].Default;

2250 
ö°rs
[
n
].
ªt_ty≥
 = 
¥edefs
[
i
].ret_type;

2251 
ö°rs
[
n
].
¨g_ödex
 = 
¥edefs
[
i
].arg_index;

2258 #ifde‡
NO_BUFFER_TYPE


2259 
	#OR_BUFFER


	)

2261 
	#OR_BUFFER
 | 
T_BUFFER


	)

2264 
	`add_ö°r_«me
("<", "c_…();\n", 
F_LT
, 
T_NUMBER
);

2265 
	`add_ö°r_«me
(">", "c_gt();\n", 
F_GT
, 
T_NUMBER
);

2266 
	`add_ö°r_«me
("<=", "c_À();\n", 
F_LE
, 
T_NUMBER
);

2267 
	`add_ö°r_«me
(">=", "c_ge();\n", 
F_GE
, 
T_NUMBER
);

2268 
	`add_ö°r_«me
("==", "f_eq();\n", 
F_EQ
, 
T_NUMBER
);

2269 
	`add_ö°r_«me
("+=", "c_add_eq(0);\n", 
F_ADD_EQ
, 
T_ANY
);

2270 
	`add_ö°r_«me
("(void)+=", "c_add_eq(1);\n", 
F_VOID_ADD_EQ
, 
T_NUMBER
);

2271 
	`add_ö°r_«me
("!", "c_nŸ();\n", 
F_NOT
, 
T_NUMBER
);

2272 
	`add_ö°r_«me
("&", "f_™d();\n", 
F_AND
, 
T_ARRAY
 | 
T_NUMBER
);

2273 
	`add_ö°r_«me
("&=", "f_™d_eq();\n", 
F_AND_EQ
, 
T_NUMBER
);

2274 
	`add_ö°r_«me
("ödex", "c_ödex();\n", 
F_INDEX
, 
T_ANY
);

2275 
	`add_ö°r_«me
("membî", "c_membî(%i);\n", 
F_MEMBER
, 
T_ANY
);

2276 
	`add_ö°r_«me
("√w_em±y_˛ass", "c_√w_˛ass(%i, 0);\n", 
F_NEW_EMPTY_CLASS
, 
T_ANY
);

2277 
	`add_ö°r_«me
("√w_˛ass", "c_√w_˛ass(%i, 1);\n", 
F_NEW_CLASS
, 
T_ANY
);

2278 
	`add_ö°r_«me
("rödex", "c_rödex();\n", 
F_RINDEX
, 
T_ANY
);

2279 
	`add_ö°r_«me
("lo›_c⁄d_loˇl", "C_LOOP_COND_LV(%i, %i); i‡÷pc_öt)\n", 
F_LOOP_COND_LOCAL
, -1);

2280 
	`add_ö°r_«me
("lo›_c⁄d_numbî", "C_LOOP_COND_NUM(%i, %i); i‡÷pc_öt)\n", 
F_LOOP_COND_NUMBER
, -1);

2281 
	`add_ö°r_«me
("lo›_ö¸", "C_LOOP_INCR(%i);\n", 
F_LOOP_INCR
, -1);

2282 
	`add_ö°r_«me
("f‹óch", 0, 
F_FOREACH
, -1);

2283 
	`add_ö°r_«me
("exô_f‹óch", "c_exô_f‹óch();\n", 
F_EXIT_FOREACH
, -1);

2284 
	`add_ö°r_«me
("ex∑nd_v¨¨gs", 0, 
F_EXPAND_VARARGS
, -1);

2285 
	`add_ö°r_«me
("√xt_f‹óch", "c_√xt_f‹óch();\n", 
F_NEXT_FOREACH
, -1);

2286 
	`add_ö°r_«me
("membî_lvÆue", "c_membî_lvÆue(%i);\n", 
F_MEMBER_LVALUE
, 
T_LVALUE
);

2287 
	`add_ö°r_«me
("index_lvalue", "push_indexed_lvalue(0);\n",

2288 
F_INDEX_LVALUE
, 
T_LVALUE
|
T_LVALUE_BYTE
);

2289 
	`add_ö°r_«me
("rindex_lvalue", "push_indexed_lvalue(1);\n",

2290 
F_RINDEX_LVALUE
, 
T_LVALUE
|
T_LVALUE_BYTE
);

2291 
	`add_ö°r_«me
("nn_range_lvalue", "push_lvalue_range(0x00);\n",

2292 
F_NN_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

2293 
	`add_ö°r_«me
("nr_range_lvalue", "push_lvalue_range(0x01);\n",

2294 
F_NR_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

2295 
	`add_ö°r_«me
("rr_range_lvalue", "push_lvalue_range(0x11);\n",

2296 
F_RR_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

2297 
	`add_ö°r_«me
("rn_range_lvalue", "push_lvalue_range(0x10);\n",

2298 
F_RN_RANGE_LVALUE
, 
T_LVALUE_RANGE
);

2299 
	`add_ö°r_«me
("nn_range", "f_range(0x00);\n",

2300 
F_NN_RANGE
, 
T_ARRAY
|
T_STRING
 
OR_BUFFER
);

2301 
	`add_ö°r_«me
("rr_range", "f_range(0x11);\n",

2302 
F_RR_RANGE
, 
T_ARRAY
|
T_STRING
 
OR_BUFFER
);

2303 
	`add_ö°r_«me
("nr_range", "f_range(0x01);\n",

2304 
F_NR_RANGE
, 
T_ARRAY
|
T_STRING
 
OR_BUFFER
);

2305 
	`add_ö°r_«me
("rn_range", "f_range(0x10);\n",

2306 
F_RN_RANGE
, 
T_ARRAY
|
T_STRING
 
OR_BUFFER
);

2307 
	`add_ö°r_«me
("re_range", "f_extract_range(1);\n",

2308 
F_RE_RANGE
, 
T_ARRAY
|
T_STRING
 
OR_BUFFER
);

2309 
	`add_ö°r_«me
("ne_range", "f_extract_range(0);\n",

2310 
F_NE_RANGE
, 
T_ARRAY
|
T_STRING
 
OR_BUFFER
);

2311 
	`add_ö°r_«me
("globÆ", "C_GLOBAL(%i);\n", 
F_GLOBAL
, 
T_ANY
);

2312 
	`add_ö°r_«me
("loˇl", "C_LOCAL(%i);\n", 
F_LOCAL
, 
T_ANY
);

2313 
	`add_ö°r_«me
("make_ªf", "c_make_ªf(%i);\n", 
F_MAKE_REF
, 
T_REF
);

2314 
	`add_ö°r_«me
("kûl_ªfs", "c_kûl_ªfs(%i);\n", 
F_KILL_REFS
, 
T_ANY
);

2315 
	`add_ö°r_«me
("ªf", "C_REF(%i);\n", 
F_REF
, 
T_ANY
);

2316 
	`add_ö°r_«me
("ªf_lvÆue", "C_REF_LVALUE(%i);\n", 
F_REF_LVALUE
, 
T_LVALUE
);

2317 
	`add_ö°r_«me
("å™s„r_loˇl", "C_TRANSFER_LOCAL(%i);\n", 
F_TRANSFER_LOCAL
, 
T_ANY
);

2318 
	`add_ö°r_«me
("numbî", 0, 
F_NUMBER
, 
T_NUMBER
);

2319 
	`add_ö°r_«me
("ªÆ", 0, 
F_REAL
, 
T_REAL
);

2320 
	`add_ö°r_«me
("loˇl_lvÆue", "C_LVALUE(Â + %i);\n", 
F_LOCAL_LVALUE
, 
T_LVALUE
);

2321 
	`add_ö°r_«me
("whûe_dec", "C_WHILE_DEC(%i); i‡÷pc_öt)\n", 
F_WHILE_DEC
, -1);

2322 
	`add_ö°r_«me
("c⁄°1", "push_numbî(1);\n", 
F_CONST1
, 
T_NUMBER
);

2323 
	`add_ö°r_«me
("subåa˘", "c_subåa˘();\n", 
F_SUBTRACT
, 
T_NUMBER
 | 
T_REAL
 | 
T_ARRAY
);

2324 
	`add_ö°r_«me
("(voidÔssign", "c_void_assign();\n", 
F_VOID_ASSIGN
, 
T_NUMBER
);

2325 
	`add_ö°r_«me
("(voidÔssign_loˇl", "c_void_assign_loˇl(Â + %i);\n", 
F_VOID_ASSIGN_LOCAL
, 
T_NUMBER
);

2326 
	`add_ö°r_«me
("assign", "c_assign();\n", 
F_ASSIGN
, 
T_ANY
);

2327 
	`add_ö°r_«me
("bønch", 0, 
F_BRANCH
, -1);

2328 
	`add_ö°r_«me
("bbønch", 0, 
F_BBRANCH
, -1);

2329 
	`add_ö°r_«me
("byã", 0, 
F_BYTE
, 
T_NUMBER
);

2330 
	`add_ö°r_«me
("-byã", 0, 
F_NBYTE
, 
T_NUMBER
);

2331 
	`add_ö°r_«me
("bønch_√", 0, 
F_BRANCH_NE
, -1);

2332 
	`add_ö°r_«me
("bønch_ge", 0, 
F_BRANCH_GE
, -1);

2333 
	`add_ö°r_«me
("bønch_À", 0, 
F_BRANCH_LE
, -1);

2334 
	`add_ö°r_«me
("bønch_eq", 0, 
F_BRANCH_EQ
, -1);

2335 
	`add_ö°r_«me
("bbønch_…", 0, 
F_BBRANCH_LT
, -1);

2336 
	`add_ö°r_«me
("bbønch_whí_zîo", 0, 
F_BBRANCH_WHEN_ZERO
, -1);

2337 
	`add_ö°r_«me
("bbønch_whí_n⁄_zîo", 0, 
F_BBRANCH_WHEN_NON_ZERO
, -1);

2338 
	`add_ö°r_«me
("bønch_whí_zîo", 0, 
F_BRANCH_WHEN_ZERO
, -1);

2339 
	`add_ö°r_«me
("bønch_whí_n⁄_zîo", 0, 
F_BRANCH_WHEN_NON_ZERO
, -1);

2340 
	`add_ö°r_«me
("p›", "p›_°ack();\n", 
F_POP_VALUE
, -1);

2341 
	`add_ö°r_«me
("c⁄°0", "push_numbî(0);\n", 
F_CONST0
, 
T_NUMBER
);

2342 #ifde‡
F_JUMP_WHEN_ZERO


2343 
	`add_ö°r_«me
("jump_whí_zîo", 
F_JUMP_WHEN_ZERO
, -1);

2344 
	`add_ö°r_«me
("jump_whí_n⁄_zîo", 
F_JUMP_WHEN_NON_ZERO
, -1);

2346 #ifde‡
F_LOR


2347 
	`add_ö°r_«me
("||", 0, 
F_LOR
, -1);

2348 
	`add_ö°r_«me
("&&", 0, 
F_LAND
, -1);

2350 
	`add_ö°r_«me
("-=", "f_sub_eq();\n", 
F_SUB_EQ
, 
T_ANY
);

2351 #ifde‡
F_JUMP


2352 
	`add_ö°r_«me
("jump", 
F_JUMP
, -1);

2354 
	`add_ö°r_«me
("ªtu∫_zîo", "c_ªtu∫_zîo();\ƒëu∫;\n", 
F_RETURN_ZERO
, -1);

2355 
	`add_ö°r_«me
("ªtu∫", "c_ªtu∫();\ƒëu∫;\n", 
F_RETURN
, -1);

2356 
	`add_ö°r_«me
("ssˇnf", "c_ssˇnf(%i);\n", 
F_SSCANF
, 
T_NUMBER
);

2357 
	`add_ö°r_«me
("∑r£_comm™d", "c_∑r£_comm™d(%i);\n", 
F_PARSE_COMMAND
, 
T_NUMBER
);

2358 
	`add_ö°r_«me
("°rög", 0, 
F_STRING
, 
T_STRING
);

2359 
	`add_ö°r_«me
("sh‹t_°rög", 0, 
F_SHORT_STRING
, 
T_STRING
);

2360 
	`add_ö°r_«me
("ˇŒ", "c_ˇŒ(%i, %i);\n", 
F_CALL_FUNCTION_BY_ADDRESS
, 
T_ANY
);

2361 
	`add_ö°r_«me
("ˇŒ_öhîôed", "c_ˇŒ_öhîôed(%i, %i, %i);\n", 
F_CALL_INHERITED
, 
T_ANY
);

2362 
	`add_ö°r_«me
("aggªg©e_assoc", "C_AGGREGATE_ASSOC(%i);\n", 
F_AGGREGATE_ASSOC
, 
T_MAPPING
);

2363 #ifde‡
DEBUG


2364 
	`add_ö°r_«me
("bªak_poöt", "bªak_poöt();\n", 
F_BREAK_POINT
, -1);

2366 
	`add_ö°r_«me
("aggªg©e", "C_AGGREGATE(%i);\n", 
F_AGGREGATE
, 
T_ARRAY
);

2367 
	`add_ö°r_«me
("(::)", 0, 
F_FUNCTION_CONSTRUCTOR
, 
T_FUNCTION
);

2369 
	`add_ö°r_«me
("simul_efun",

2371 
F_SIMUL_EFUN
, 
T_ANY
);

2372 
	`add_ö°r_«me
("globÆ_lvÆue", "C_LVALUE(&cuºít_obje˘->v¨übÀs[v¨übÀ_ödex_off£à+ %i]);\n", 
F_GLOBAL_LVALUE
, 
T_LVALUE
);

2373 
	`add_ö°r_«me
("|", "f_‹();\n", 
F_OR
, 
T_ARRAY
 | 
T_NUMBER
);

2374 
	`add_ö°r_«me
("<<", "f_lsh();\n", 
F_LSH
, 
T_NUMBER
);

2375 
	`add_ö°r_«me
(">>", "f_rsh();\n", 
F_RSH
, 
T_NUMBER
);

2376 
	`add_ö°r_«me
(">>=", "f_rsh_eq();\n", 
F_RSH_EQ
, 
T_NUMBER
);

2377 
	`add_ö°r_«me
("<<=", "f_lsh_eq();\n", 
F_LSH_EQ
, 
T_NUMBER
);

2378 
	`add_ö°r_«me
("^", "f_x‹();\n", 
F_XOR
, 
T_NUMBER
);

2379 
	`add_ö°r_«me
("^=", "f_x‹_eq();\n", 
F_XOR_EQ
, 
T_NUMBER
);

2380 
	`add_ö°r_«me
("|=", "f_‹_eq();\n", 
F_OR_EQ
, 
T_NUMBER
);

2381 
	`add_ö°r_«me
("+", "c_add();\n", 
F_ADD
, 
T_ANY
);

2382 
	`add_ö°r_«me
("!=", "f_√();\n", 
F_NE
, 
T_NUMBER
);

2383 
	`add_ö°r_«me
("ˇtch", 0, 
F_CATCH
, 
T_ANY
);

2384 
	`add_ö°r_«me
("íd_ˇtch", 0, 
F_END_CATCH
, -1);

2385 
	`add_ö°r_«me
("-", "c_√g©e();\n", 
F_NEGATE
, 
T_NUMBER
 | 
T_REAL
);

2386 
	`add_ö°r_«me
("~", "c_com∂();\n", 
F_COMPL
, 
T_NUMBER
);

2387 
	`add_ö°r_«me
("++x", "c_¥e_öc();\n", 
F_PRE_INC
, 
T_NUMBER
 | 
T_REAL
);

2388 
	`add_ö°r_«me
("--x", "c_¥e_dec();\n", 
F_PRE_DEC
, 
T_NUMBER
 | 
T_REAL
);

2389 
	`add_ö°r_«me
("*", "c_mu…ùly();\n", 
F_MULTIPLY
, 
T_REAL
 | 
T_NUMBER
 | 
T_MAPPING
);

2390 
	`add_ö°r_«me
("*=", "f_mu…_eq();\n", 
F_MULT_EQ
, 
T_REAL
 | 
T_NUMBER
 | 
T_MAPPING
);

2391 
	`add_ö°r_«me
("/", "c_divide();\n", 
F_DIVIDE
, 
T_REAL
 | 
T_NUMBER
);

2392 
	`add_ö°r_«me
("/=", "f_div_eq();\n", 
F_DIV_EQ
, 
T_NUMBER
 | 
T_REAL
);

2393 
	`add_ö°r_«me
("%", "c_mod();\n", 
F_MOD
, 
T_NUMBER
);

2394 
	`add_ö°r_«me
("%=", "f_mod_eq();\n", 
F_MOD_EQ
, 
T_NUMBER
);

2395 
	`add_ö°r_«me
("öc(x)", "c_öc();\n", 
F_INC
, -1);

2396 
	`add_ö°r_«me
("dec(x)", "c_dec();\n", 
F_DEC
, -1);

2397 
	`add_ö°r_«me
("x++", "c_po°_öc();\n", 
F_POST_INC
, 
T_NUMBER
 | 
T_REAL
);

2398 
	`add_ö°r_«me
("x--", "c_po°_dec();\n", 
F_POST_DEC
, 
T_NUMBER
 | 
T_REAL
);

2399 
	`add_ö°r_«me
("swôch", 0, 
F_SWITCH
, -1);

2400 
	`add_ö°r_«me
("time_ex¥essi⁄", 0, 
F_TIME_EXPRESSION
, -1);

2401 
	`add_ö°r_«me
("íd_time_ex¥essi⁄", 0, 
F_END_TIME_EXPRESSION
, 
T_NUMBER
);

2402 
	}
}

2404 
	#gë_√xt_ch¨
(
c
Ëi‡((¯*
ouç
++Ë='\n' && ouç =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
()

	)

2406 
	#GETALPHA
(
p
, 
q
, 
m
, 
e
) \

2407 i‡(*
p
 ='_' || 
	`uißÕha
(*p)) {\

2408 
	`ißlunum
(()*
p
)) {\

2409 *
q
 = *
p
++;\

2410 i‡(
q
 < (
m
))\

2411 
q
++;\

2413 
	`Àxîr‹
("NameÅooÜong");\

2417 } 
	`Àxîr‹
(
e
);\

2418 *
q
++ = 0

	)

2420 
	$cmygëc
()

2422 
c
;

2425 
	`gë_√xt_ch¨
(
c
);

2426 i‡(
c
 == '/') {

2427 *
ouç
++) {

2428 '*': 
	`skù_commít
(); ;

2429 '/': 
	`skù_löe
(); ;

2430 : 
ouç
--;  
c
;

2433  
c
;

2436 
	}
}

2438 
	$ªfûl
()

2440 *
p
;

2441 
c
;

2443 
p
 = 
yyãxt
;

2445 
c
 = *
ouç
++;

2446 i‡(
p
 < 
yyãxt
 + 
MAXLINE
 - 5)

2447 *
p
++ = 
c
;

2449 
	`Àxîr‹
("LineÅooÜong");

2452 } 
c
 !'\n' && c !
LEX_EOF
);

2453 i‡((
c
 ='\n'Ë&& (
ouç
 =
œ°_∆
 + 1)Ë
	`ªfûl_buf„r
();

2454 
p
[-1] = ' ';

2455 *
p
 = 0;

2456 
√x∑nds
 = 0;

2457 
cuºít_löe
++;

2458 
	}
}

2460 
h™dÀ_deföe
 
	$P1
(*, 
yyt
)

2462 
«mebuf
[
NSIZE
];

2463 
¨gs
[
NARGS
][
NSIZE
];

2464 
mãxt
[
MLEN
];

2465 *
p
, *
q
;

2467 
p
 = 
yyt
;

2468 
	`°rˇt
(
p
, " ");

2469 
q
 = 
«mebuf
;

2470 
	`GETALPHA
(
p
, 
q
, 
«mebuf
 + 
NSIZE
 - 1, "Invalid macroÇame");

2471 i‡(*
p
 == '(') {

2472 
squŸe
, 
dquŸe
;

2473 
¨g
;

2474 
öid
;

2475 *
ids
 = (*Ë
NULL
;

2477 
p
++;

2478 
SKIPWHITE
;

2479 i‡(*
p
 == ')') {

2480 
¨g
 = 0;

2482 
¨g
 = 0;árg < 
NARGS
;) {

2483 
q
 = 
¨gs
[
¨g
];

2484 
	`GETALPHA
(
p
, 
q
, 
¨gs
[
¨g
] + 
NSIZE
 - 1, "Invalid macroárgument");

2485 
¨g
++;

2486 
SKIPWHITE
;

2487 i‡(*
p
 == ')')

2489 i‡(*
p
++ != ',') {

2490 
	`yyîr‹
("Missing ',' in #defineÖarameterÜist");

2493 
SKIPWHITE
;

2495 i‡(
¨g
 =
NARGS
) {

2496 
	`Àxîr‹
("Too many macroárguments");

2500 
p
++;

2501 
q
 = 
mãxt
;

2502 *
q
++ = ' ';

2503 
squŸe
 = 
dquŸe
 = 0;

2504 
öid
 = 0; *
p
;) {

2505 i‡(
	`ißlunum
(()*
p
)) {

2506 i‡(!
öid
) {

2507 
öid
++;

2508 
ids
 = 
p
;

2511 i‡(!
squŸe
 && !
dquŸe
 && 
öid
) {

2512 
idÀn
 = 
p
 - 
ids
;

2513 
n
, 
l
;

2515 
n
 = 0;Ç < 
¨g
;Ç++) {

2516 
l
 = 
	`°æí
(
¨gs
[
n
]);

2517 i‡(
l
 =
idÀn
 && 
	`°∫cmp
(
¨gs
[
n
], 
ids
,Ü) == 0) {

2518 
q
 -
idÀn
;

2519 *
q
++ = 
MARKS
;

2520 *
q
++ = 
n
 + 
MARKS
 + 1;

2524 
öid
 = 0;

2527 *
q
 = *
p
;

2528 i‡(*
q
 ='\\' && *++
p
) {

2529 i‡(
q
 < 
mãxt
 + 
MLEN
 - 2)

2530 
q
++;

2532 
	`Àxîr‹
("MacroÅextÅooÜong");

2535 *
q
 = *
p
;

2538 i‡(*
q
 == '"') {

2539 
dquŸe
 ^!
squŸe
;

2540 } i‡(*
q
 == '\'') {

2541 
squŸe
 ^!
dquŸe
;

2544 i‡(*
p
++ =
MARKS
)

2545 *++
q
 = 
MARKS
;

2546 i‡(
q
 < 
mãxt
 + 
MLEN
 - 2)

2547 
q
++;

2549 
	`Àxîr‹
("MacroÅextÅooÜong");

2552 i‡(!*
p
 &&Ö[-2] == '\\') {

2553 
q
 -= 2;

2554 
	`ªfûl
();

2555 
p
 = 
yyãxt
;

2558 *--
q
 = 0;

2559 
	`add_deföe
(
«mebuf
, 
¨g
, 
mãxt
);

2560 } i‡(
	`is_w•a˚
(*
p
) || (*p == '\\')) {

2561 
q
 = 
mãxt
; *
p
;) {

2562 *
q
 = *
p
++;

2563 i‡(
q
 < 
mãxt
 + 
MLEN
 - 2)

2564 
q
++;

2566 
	`Àxîr‹
("MacroÅextÅooÜong");

2569 i‡(!*
p
 &&Ö[-2] == '\\') {

2570 
q
 -= 2;

2571 
	`ªfûl
();

2572 
p
 = 
yyãxt
;

2575 *--
q
 = 0;

2576 
	`add_deföe
(
«mebuf
, -1, 
mãxt
);

2578 
	`Àxîr‹
("Illegal macro symbol");

2581 
	}
}

2584 
add_öput
 
	$P1
(*, 
p
)

2586 
l
 = 
	`°æí
(
p
);

2588 i‡(
l
 >
DEFMAX
 - 10) {

2589 
	`Àxîr‹
("MacroÉxpansion buffer overflow");

2593 i‡(
ouç
 < 
l
 + 5 + 
cur_lbuf
->
buf
) {

2595 
löked_buf_t
 *
√w_lbuf
;

2596 *
q
, *
√w_ouç
, *
buf
;

2597 
size
;

2599 
q
 = 
ouç
;

2601 *
q
 !'\n' && ()*q !
LEX_EOF
) q++;

2603 i‡(*
q
 !'\n' || ((q - 
ouç
Ë+ 
l
Ë>
DEFMAX
 - 11) {

2604 
	`Àxîr‹
("MacroÉxpansion buffer overflow");

2607 
size
 = (
q
 - 
ouç
Ë+ 
l
 + 1;

2608 
cur_lbuf
->
ouç
 = 
q
 + 1;

2609 
cur_lbuf
->
œ°_∆
 =Üast_nl;

2611 
√w_lbuf
 = 
	`ALLOCATE
(
löked_buf_t
, 
TAG_COMPILER
, "add_input");

2612 
√w_lbuf
->
ãrm_ty≥
 = 
TERM_ADD_INPUT
;

2613 
√w_lbuf
->
¥ev
 = 
cur_lbuf
;

2614 
buf
 = 
√w_lbuf
->buf;

2615 
cur_lbuf
 = 
√w_lbuf
;

2616 
œ°_∆
 = (
√w_lbuf
->
buf_íd
 = 
buf
 + 
DEFMAX
 - 2) - 1;

2617 
√w_ouç
 = 
√w_lbuf
->
ouç
 = 
buf
 + 
DEFMAX
 - 2 - 
size
;

2618 
	`mem˝y
(
√w_ouç
, 
p
, 
l
);

2619 
	`mem˝y
(
√w_ouç
 + 
l
, 
ouç
, (
q
 - outp) + 1);

2620 
ouç
 = 
√w_ouç
;

2621 *(
œ°_∆
 + 1) = 0;

2625 
ouç
 -
l
;

2626 
	`°∫˝y
(
ouç
, 
p
, 
l
);

2627 
	}
}

2629 #ifde‡
DEBUGMALLOC_EXTENSIONS


2630 
	$m¨k_Æl_deföes
() {

2631 
i
;

2632 
de‚_t
 *
tmp
;

2634 
i
 = 0; i < 
öc_li°_size
; i++)

2635 
	`EXTRA_REF
(
	`BLOCK
(
öc_li°
[
i
]))++;

2637 
i
 = 0; i < 
DEFHASH
; i++) {

2638 
tmp
 = 
de‚s
[
i
];

2639 
tmp
) {

2640 
	`DO_MARK
(
tmp
, 
TAG_PREDEFINES
);

2641 
	`DO_MARK
(
tmp
->
«me
, 
TAG_PREDEFINES
);

2642 
	`DO_MARK
(
tmp
->
exps
, 
TAG_PREDEFINES
);

2643 
tmp
 =Åmp->
√xt
;

2646 
	}
}

2649 
add_¥edeföe
 
	$P3
(*, 
«me
, , 
«rgs
, *, 
exps
)

2651 
de‚_t
 *
p
;

2652 
h
;

2654 i‡((
p
 = 
	`lookup_deföe
(
«me
))) {

2655 i‡(
«rgs
 !
p
->«rg†|| 
	`°rcmp
(
exps
,Ö->exps)) {

2656 
buf
[200 + 
NSIZE
];

2658 
	`•rötf
(
buf
, "ªdeföôi⁄ o‡#deföê%s\n", 
«me
);

2659 
	`yyw¨n
(
buf
);

2661 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
	`°æí
”xpsË+ 1, 
TAG_PREDEFINES
, "add_define:Ñedef");

2662 
	`°r˝y
(
p
->
exps
,Éxps);

2663 
p
->
«rgs
 =Çargs;

2665 
p
 = 
	`ALLOCATE
(
de‚_t
, 
TAG_PREDEFINES
, "add_define: def");

2666 
p
->
«me
 = (*Ë
	`DXALLOC
(
	`°æí
“ameË+ 1, 
TAG_PREDEFINES
, "add_define: defÇame");

2667 
	`°r˝y
(
p
->
«me
,Çame);

2668 
p
->
exps
 = (*Ë
	`DXALLOC
(
	`°æí
”xpsË+ 1, 
TAG_PREDEFINES
, "add_define: defÉxps");

2669 
	`°r˝y
(
p
->
exps
,Éxps);

2670 
p
->
Êags
 = 
DEF_IS_PREDEF
;

2671 
p
->
«rgs
 =Çargs;

2672 
h
 = 
	`defhash
(
«me
);

2673 
p
->
√xt
 = 
de‚s
[
h
];

2674 
de‚s
[
h
] = 
p
;

2676 
	}
}

2678 
	$‰ì_deföes
()

2680 
de‚_t
 *
p
, *
q
;

2681 
i
;

2683 
i
 = 0; i < 
DEFHASH
; i++) {

2684 
p
 = 
de‚s
[
i
];Ö;Ö = 
q
) {

2686 i‡(
p
->
Êags
 & 
DEF_IS_PREDEF
) {

2689 
q
 = 
p
->
√xt
;

2690 
	`FREE
(
p
->
«me
);

2691 
	`FREE
(
p
->
exps
);

2692 
	`FREE
((*Ë
p
);

2694 
de‚s
[
i
] = 
p
;

2696 
p
) {

2697 
p
->
Êags
 &~
DEF_IS_UNDEFINED
;

2698 
p
 =Ö->
√xt
;

2701 
√x∑nds
 = 0;

2702 
	}
}

2704 
	#SKIPW
 \

2706 
c
 = 
	`cmygëc
();\

2707 } 
	`is_w•a˚
(
c
));

	)

2709 
exåa˘_¨gs
 
	$P2
(**, 
¨gv
, *, 
¨gb
)

2711 
¨gc
 = 0, 
dquŸe
 = 0, 
∑r˙t
 = 0, 
squŸe
 = 0;

2712 *
out
;

2713 
c
;

2715 
SKIPW
;

2716 i‡(
c
 != '(') {

2717 
	`yyîr‹
("Missing '(' in macro call");

2718 i‡(
c
 ='\n' && 
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

2722 
SKIPW
;

2723 i‡(
c
 == ')')

2726 
¨gv
[0] = 
out
 = 
¨gb
;

2727 
¨gc
 < 
NARGS
) {

2728 
c
) {

2730 i‡(!
squŸe
)

2731 
dquŸe
 ^= 1;

2734 i‡(!
dquŸe
)

2735 
squŸe
 ^= 1;

2738 i‡(
squŸe
 || 
dquŸe
) {

2739 *
out
++ = 
c
;

2740 
	`gë_√xt_ch¨
(
c
);

2744 i‡(!
squŸe
 && !
dquŸe
)

2745 
∑r˙t
++;

2748 i‡(!
squŸe
 && !
dquŸe
)

2749 
∑r˙t
--;

2752 i‡(
ouç
 =
œ°_∆
 + 1Ë
	`ªfûl_buf„r
();

2753 i‡(
squŸe
 || 
dquŸe
) {

2754 
	`Àxîr‹
("Newline in string");

2758 
cuºít_löe
++;

2759 
tŸÆ_löes
++;

2760 
c
 = ' ';

2762 
LEX_EOF
:

2763 
	`Àxîr‹
("UnexpectedÉnd of file");

2768 i‡(
∑r˙t
 < 0 || (
c
 =',' && !∑r˙à&& !
dquŸe
 && !
squŸe
)) {

2769 *
exp
;

2772 i‡(
	`uis•a˚
(*(
out
 - 1))) *(out - 1) = 0;

2773 *
out
++ = 0;

2774 i‡(
∑r˙t
 < 0)

2775  
¨gc
 + 1;

2776 
¨gv
[++
¨gc
] = 
out
;

2779 i‡(!
	`uis•a˚
(
c
Ë|| 
dquŸe
 || 
squŸe
 || (
out
 > 
¨gv
[
¨gc
] && !uisspace(*(out - 1)))) {

2780 i‡(
out
 >
¨gb
 + 
DEFMAX
 - 
NARGS
) {

2781 
	`Àxîr‹
("Macroárgument overflow");

2784 *
out
++ = 
c
;

2788 i‡(!
squŸe
 && !
dquŸe
Ë
c
 = 
	`cmygëc
();

2789 
	`gë_√xt_ch¨
(
c
);

2792 
	`Àxîr‹
("Maximum macroárgument countÉxceeded");

2794 
	}
}

2797 *
ex∑nd_deföe2
 
	$P1
(*, 
ãxt
)

2799 
¨gc
 = 0, 
i
, 
∑°e
 = 0, 
∑°ög
 = 0;

2800 
de‚_t
 *
ma¸o
;

2801 
expbuf
[
DEFMAX
], *
¨gv
[
NARGS
], *
ex∑nd_buf„r
, *
ö
, *
out
, *
‰ìme
 = 0;

2804 
i
 = 0; i < 
ex∑nd_dïth
; i++) {

2805 i‡(!
	`°rcmp
(
ex∑nds
[
i
], 
ãxt
))

2808 
ex∑nds
[
ex∑nd_dïth
++] = 
ãxt
;

2810 i‡(
√x∑nds
++ > 
EXPANDMAX
) {

2811 
ex∑nd_dïth
--;

2812 
	`Àxîr‹
("Too many macroÉxpansions");

2816 
ma¸o
 = 
	`lookup_deföe
(
ãxt
);

2817 i‡(!
ma¸o
) {

2818 
ex∑nd_dïth
--;

2822 i‡(
ma¸o
->
«rgs
 >= 0) {

2823 i‡((
¨gc
 = 
	`exåa˘_¨gs
(
¨gv
, 
expbuf
)) == -1) {

2824 
ex∑nd_dïth
--;

2827 i‡(
¨gc
 !
ma¸o
->
«rgs
) {

2828 
ex∑nd_dïth
--;

2829 
	`yyîr‹
("WrongÇumber of macroárguments");

2834 i‡(!
¨gc
) {

2835 
ex∑nd_buf„r
 = (*)
	`DXALLOC
(
	`°æí
(
ma¸o
->
exps
Ë+ 1, 
TAG_COMPILER
, "expand_define2");

2836 
	`°r˝y
(
ex∑nd_buf„r
, 
ma¸o
->
exps
);

2837 
ex∑nd_dïth
--;

2838  
ex∑nd_buf„r
;

2842 
ö
 = 
ma¸o
->
exps
;

2843 
out
 = 
ex∑nd_buf„r
 = (*)
	`DXALLOC
(
DEFMAX
, 
TAG_COMPILER
, "expand_define2");

2845 
	#SAVECHAR
(
x
Ë
	`SAFE
(\

2846 i‡(
out
 + 1 < 
ex∑nd_buf„r
 + 
DEFMAX
) {\

2847 *
out
++ = (
x
);\

2849 i‡(
‰ìme
Ë
	`FREE
(freeme);\

2850 
	`FREE
(
ex∑nd_buf„r
);\

2851 
	`Àxîr‹
("MacroÉxpansion overflow");\

2852 
ex∑nd_dïth
--;\

2854 })

	)

2856 
	#SAVESTR
(
x
, 
y
Ë
	`SAFE
(\

2857 i‡(
out
 + (
y
Ë< 
ex∑nd_buf„r
 + 
DEFMAX
) {\

2858 
	`mem˝y
(
out
, (
x
), (
y
));\

2859 
out
 +(
y
);\

2861 i‡(
‰ìme
Ë
	`FREE
(freeme);\

2862 
	`FREE
(
ex∑nd_buf„r
);\

2863 
	`Àxîr‹
("MacroÉxpansion overflow");\

2864 
ex∑nd_dïth
--;\

2867 i‡(
‰ìme
) {\

2868 
	`FREE
(
‰ìme
);\

2869 
‰ìme
 = 0;\

2870 })

	)

2872 *
ö
) {

2873 *
skù
 = 
ö
 + 1;

2875 i‡(*
ö
 =
MARKS
 && *++in != MARKS) {

2876 *
exp
;

2878 
exp
 = 
¨gv
[*
ö
++ - 
MARKS
 - 1];

2880 i‡(
∑°e
) {

2881 
∑°e
 = 0;

2882 *(
out
 - 1) = '\"';

2883 *
exp
) {

2884 *
exp
) {

2886 
	`SAVECHAR
('\\');

2889 
	`SAVECHAR
(*
exp
);

2890 
exp
++;

2893 
	`SAVECHAR
(*
exp
);

2894 
exp
++;

2896 
	`SAVECHAR
('\"');

2898 
Àn
;

2901 i‡(!
∑°ög
 && (
‰ìme
 = 
	`ex∑nd_deföe2
(
exp
)) != 0)

2902 
exp
 = 
‰ìme
;

2903 
Àn
 = 
	`°æí
(
exp
);

2904 
	`SAVESTR
(
exp
, 
Àn
);

2907 
∑°e
 = (*
ö
 == '#');

2913 
	`SAVECHAR
(*
ö
);

2914 
ö
++;

2922 
∑°ög
 = 0;

2923 *
skù
 && 
	`uis•a˚
(*skip)) skip++;

2924 i‡(*
skù
 == '#' && *(skip + 1) == '#') {

2925 
skù
 += 2;

2927 
	`uis•a˚
(*
skù
)) skip++;

2928 
ö
 = 
skù
;

2929 
∑°ög
 = (*
ö
 =
MARKS
 && *(in + 1) != MARKS);

2933 *
out
 = 0;

2934 
ex∑nd_dïth
--;

2935  
ex∑nd_buf„r
;

2936 
	}
}

2938 
ex∑nd_deföe
 
PROT
(())

2940 *
	gex∑nd_buf„r
;

2942 i‡((
	gex∑nd_buf„r
 = 
ex∑nd_deföe2
(
yyãxt
)) != 0) {

2943 
add_öput
(
ex∑nd_buf„r
);

2944 
FREE
(
ex∑nd_buf„r
);

2954 
	#SKPW
 dÿ
c
 = *
ouç
++; 
	`is_w•a˚
(c)); ouç--

	)

2956 
	$exgëc
()

2958 
c
;

2959 *
yyp
;

2961 
c
 = *
ouç
++;

2962 
	`ißÕha
(
c
) || c == '_') {

2963 
yyp
 = 
yyãxt
;

2965 
SAVEC
;

2966 
c
 = *
ouç
++;

2967 } 
	`ißlunum
(
c
));

2968 
ouç
--;

2969 *
yyp
 = '\0';

2970 i‡(
	`°rcmp
(
yyãxt
, "defined") == 0 ||

2971 
	`°rcmp
(
yyãxt
, "efun_defined") == 0) {

2972 
efund
 = (
yyãxt
[0] == 'e');

2973 
Êag
;

2977 
c
 = *
ouç
++;

2978 
	`is_w•a˚
(
c
));

2979 i‡(
c
 != '(') {

2980 
	`yyîr‹
("Missing ( in defined");

2984 
c
 = *
ouç
++;

2985 
	`is_w•a˚
(
c
));

2986 
yyp
 = 
yyãxt
;

2987 
	`ißlunum
(
c
)) {

2988 
SAVEC
;

2989 
c
 = *
ouç
++;

2991 *
yyp
 = '\0';

2992 
	`is_w•a˚
(
c
))

2993 
c
 = *
ouç
++;

2994 i‡(
c
 != ')') {

2995 
	`yyîr‹
("Missing ) in defined");

2998 
SKPW
;

2999 i‡(
efund
) {

3000 
idít_hash_ñem_t
 *
ihe
 = 
	`lookup_idít
(
yyãxt
);

3001 
Êag
 = (
ihe
 && ihe->
dn
.
efun_num
 != -1);

3003 
Êag
 = (
	`lookup_deföe
(
yyãxt
) != 0);

3005 i‡(
Êag
)

3006 
	`add_öput
(" 1 ");

3008 
	`add_öput
(" 0 ");

3010 i‡(!
	`ex∑nd_deföe
())

3011 
	`add_öput
(" 0 ");

3013 
c
 = *
ouç
++;

3015  
c
;

3016 
	}
}

3018 
£t_öc_li°
 
	$P1
(*, 
li°
)

3020 
i
, 
size
;

3021 *
p
;

3023 i‡(
li°
 == 0) {

3024 
	`Ârötf
(
°dîr
, "The config string 'include dirs' must bet set.\n");

3025 
	`Ârötf
(
°dîr
, "It should containáÜist ofáll directoriesÅo be searched\n");

3026 
	`Ârötf
(
°dîr
, "for include files, separated byá ':'.\n");

3027 
	`exô
(-1);

3029 
size
 = 1;

3030 
p
 = 
li°
;

3032 
p
 = 
	`°rchr
(p, ':');

3033 i‡(!
p
)

3035 
size
++;

3036 
p
++;

3038 
öc_li°
 = 
	`CALLOCATE
(
size
, *, 
TAG_INC_LIST
, "set_inc_list");

3039 
öc_li°_size
 = 
size
;

3040 
i
 = 
size
 - 1; i >= 0; i--) {

3041 
p
 = 
	`°ºchr
(
li°
, ':');

3042 i‡(
p
) {

3043 *
p
 = '\0';

3044 
p
++;

3046 i‡(
i
) {

3047 
	`Ârötf
(
°dîr
, "FatalÉrror in set_inc_list: bad state.\n");

3048 
	`exô
(1);

3050 
p
 = 
li°
;

3052 i‡(*
p
 == '/')

3053 
p
++;

3057 i‡(!
	`ÀgÆ_∑th
(
p
)) {

3058 
	`Ârötf
(
°dîr
, "'include dirs' must giveÖaths withoutány '..'\n");

3059 
	`exô
(-1);

3061 
öc_li°
[
i
] = 
	`make_sh¨ed_°rög
(
p
);

3063 
i
 = 0; i < 
size
 - 1; i++)

3064 
li°
[
	`°æí
(list)] = ':';

3065 
	}
}

3067 *
	$maö_fûe_«me
()

3069 
öc°©e_t
 *
is
;

3071 i‡(
ö˘›
 == 0)

3072  
cuºít_fûe
;

3073 
is
 = 
ö˘›
;

3074 
is
->
√xt
)

3075 
is
 = is->
√xt
;

3076  
is
->
fûe
;

3077 
	}
}

3080 
	#IDENT_HASH_SIZE
 1024

	)

3081 
	#IdítHash
(
s
Ë(
	`whash°r
((s), 20Ë& (
IDENT_HASH_SIZE
 - 1))

	)

3103 
	#CHECK_ELEM
(
x
, 
y
, 
z
Ëi‡(!
	`°rcmp
((x)->
«me
, (y))) { \

3104 i‡(((
x
)->
tokí
 & 
IHE_RESWORD
Ë|| ((x)->
£m_vÆue
)Ë{ 
z
 } \

3105  0; }

	)

3107 
idít_hash_ñem_t
 *
lookup_idít
 
	$P1
(*, 
«me
) {

3108 
h
 = 
	`IdítHash
(
«me
);

3109 
idít_hash_ñem_t
 *
h±r
, *
h±r2
;

3111 i‡((
h±r
 = 
idít_hash_èbÀ
[
h
])) {

3112 
	`CHECK_ELEM
(
h±r
, 
«me
,  hptr;);

3113 
h±r2
 = 
h±r
->
√xt
;

3114 
h±r2
 !
h±r
) {

3115 
	`CHECK_ELEM
(
h±r2
, 
«me
, 
idít_hash_èbÀ
[
h
] = hptr2;  hptr2;);

3116 
h±r2
 = h±r2->
√xt
;

3120 
	}
}

3122 
idít_hash_ñem_t
 *
föd_‹_add_≥rm_idít
 
	$P1
(*, 
«me
) {

3123 
h
 = 
	`IdítHash
(
«me
);

3124 
idít_hash_ñem_t
 *
h±r
, *
h±r2
;

3126 i‡((
h±r
 = 
idít_hash_èbÀ
[
h
])) {

3127 i‡(!
	`°rcmp
(
h±r
->
«me
,Çame))  hptr;

3128 
h±r2
 = 
h±r
->
√xt
;

3129 
h±r2
 !
h±r
) {

3130 i‡(!
	`°rcmp
(
h±r2
->
«me
,Çame))  hptr2;

3131 
h±r2
 = h±r2->
√xt
;

3133 
h±r
 = 
	`ALLOCATE
(
idít_hash_ñem_t
, 
TAG_PERM_IDENT
, "find_or_add_perm_ident:1");

3134 
h±r
->
√xt
 = 
idít_hash_hód
[
h
]->next;

3135 
idít_hash_hód
[
h
]->
√xt
 = 
h±r
;

3136 i‡(
idít_hash_hód
[
h
] =
idít_hash_èû
[h])

3137 
idít_hash_èû
[
h
] = 
h±r
;

3139 
h±r
 = (
idít_hash_èbÀ
[
h
] = 
	`ALLOCATE
(
idít_hash_ñem_t
, 
TAG_PERM_IDENT
,

3141 
idít_hash_hód
[
h
] = 
h±r
;

3142 
idít_hash_èû
[
h
] = 
h±r
;

3143 
h±r
->
√xt
 = hptr;

3145 
h±r
->
«me
 =Çame;

3146 
h±r
->
tokí
 = 0;

3147 
h±r
->
£m_vÆue
 = 0;

3148 
h±r
->
dn
.
simul_num
 = -1;

3149 
h±r
->
dn
.
loˇl_num
 = -1;

3150 
h±r
->
dn
.
globÆ_num
 = -1;

3151 
h±r
->
dn
.
efun_num
 = -1;

3152 
h±r
->
dn
.
fun˘i⁄_num
 = -1;

3153 
h±r
->
dn
.
˛ass_num
 = -1;

3154  
h±r
;

3155 
	}
}

3157 
	s ame_löked_buf_s
 {

3158 
 ame_löked_buf_s
 *
	m√xt
;

3159 
	mblock
[4096];

3160 } 
	t ame_löked_buf_t
;

3162 
 ame_löked_buf_t
 *
	g amebuf
 = 0;

3164 
	glb_ödex
 = 4096;

3166 *
Æloc_loˇl_«me
 
	$P1
(*, 
«me
) {

3167 
Àn
 = 
	`°æí
(
«me
)+1;

3168 *
ªs
;

3170 i‡(
lb_ödex
 + 
Àn
 > 4096) {

3171 
 ame_löked_buf_t
 *
√w_buf
;

3172 
√w_buf
 = 
	`ALLOCATE
(
 ame_löked_buf_t
, 
TAG_COMPILER
, "alloc_local_name");

3173 
√w_buf
->
√xt
 = 
 amebuf
;

3174 
 amebuf
 = 
√w_buf
;

3175 
lb_ödex
 = 0;

3177 
ªs
 = &(
 amebuf
->
block
[
lb_ödex
]);

3178 
	`°r˝y
(
ªs
, 
«me
);

3179 
lb_ödex
 +
Àn
;

3180  
ªs
;

3181 
	}
}

3183 
	gnum_‰ì
 = 0;

3185 
	sidít_hash_ñem_li°_s
 {

3186 
idít_hash_ñem_li°_s
 *
	m√xt
;

3187 
idít_hash_ñem_t
 
	môems
[128];

3188 } 
	tidít_hash_ñem_li°_t
;

3190 
idít_hash_ñem_li°_t
 *
	gihe_li°
 = 0;

3193 
dump_ihe
 
	$P2
(
idít_hash_ñem_t
 *, 
ihe
, , 
noisy
) {

3194 
sv
 = 0;

3195 i‡(
ihe
->
tokí
 & 
IHE_RESWORD
) {

3196 i‡(
noisy
Ë
	`¥ötf
("%†", 
ihe
->
«me
);

3198 i‡(
noisy
Ë
	`¥ötf
("%s[", 
ihe
->
«me
);

3199 i‡(
ihe
->
dn
.
fun˘i⁄_num
 != -1) {

3200 i‡(
noisy
Ë
	`¥ötf
("f");

3201 
sv
++;

3203 i‡(
ihe
->
dn
.
simul_num
 != -1) {

3204 i‡(
noisy
Ë
	`¥ötf
("s");

3205 
sv
++;

3207 i‡(
ihe
->
dn
.
efun_num
 != -1) {

3208 i‡(
noisy
Ë
	`¥ötf
("e");

3209 
sv
++;

3211 i‡(
ihe
->
dn
.
loˇl_num
 != -1) {

3212 i‡(
noisy
Ë
	`¥ötf
("l");

3213 
sv
++;

3215 i‡(
ihe
->
dn
.
globÆ_num
 != -1) {

3216 i‡(
noisy
Ë
	`¥ötf
("g");

3217 
sv
++;

3219 i‡(
ihe
->
£m_vÆue
 !
sv
) {

3220 i‡(
noisy
) {

3221 
	`¥ötf
("(*%i*)", 
ihe
->
£m_vÆue
 - 
sv
);

3222 } 
	`dump_ihe
(
ihe
, 1);

3224 i‡(
noisy
Ë
	`¥ötf
("] ");

3226 
	}
}

3228 
debug_dump_idít_hash_èbÀ
 
	$P1
(, 
noisy
) {

3229 
zîos
 = 0;

3230 
i
;

3231 
idít_hash_ñem_t
 *
ihe
, *
ihe2
;

3233 i‡(
noisy
Ë
	`¥ötf
("\n\nIdentifier Hash Table:\n");

3234 
i
 = 0; i < 
IDENT_HASH_SIZE
; i++) {

3235 
ihe
 = 
idít_hash_èbÀ
[
i
];

3236 i‡(!
ihe
)

3237 
zîos
++;

3239 i‡(
zîos
 && 
noisy
Ë
	`¥ötf
("<%i zeros>\n", zeros);

3240 
zîos
 = 0;

3241 
	`dump_ihe
(
ihe
, 
noisy
);

3242 
ihe2
 = 
ihe
->
√xt
;

3243 
ihe2
 !
ihe
) {

3244 
	`dump_ihe
(
ihe2
, 
noisy
);

3245 
ihe2
 = ihe2->
√xt
;

3247 i‡(
noisy
Ë
	`¥ötf
("\n");

3250 i‡(
zîos
 && 
noisy
Ë
	`¥ötf
("<%i zeros>\n", zeros);

3251 
	}
}

3254 
	$‰ì_unu£d_idítifõrs
() {

3255 
idít_hash_ñem_li°_t
 *
ihñ
, *
√xt
;

3256 
 ame_löked_buf_t
 *
 b
, *
 bn
;

3257 
i
;

3260 
idít_dúty_li°
) {

3261 i‡(
idít_dúty_li°
->
dn
.
fun˘i⁄_num
 != -1) {

3262 
idít_dúty_li°
->
dn
.
fun˘i⁄_num
 = -1;

3263 
idít_dúty_li°
->
£m_vÆue
--;

3265 i‡(
idít_dúty_li°
->
dn
.
globÆ_num
 != -1) {

3266 
idít_dúty_li°
->
dn
.
globÆ_num
 = -1;

3267 
idít_dúty_li°
->
£m_vÆue
--;

3269 i‡(
idít_dúty_li°
->
dn
.
˛ass_num
 != -1) {

3270 
idít_dúty_li°
->
dn
.
˛ass_num
 = -1;

3271 
idít_dúty_li°
->
£m_vÆue
--;

3273 
idít_dúty_li°
 = idít_dúty_li°->
√xt_dúty
;

3276 
i
 = 0; i < 
IDENT_HASH_SIZE
; i++)

3277 i‡((
idít_hash_èbÀ
[
i
] = 
idít_hash_hód
[i]))

3278 
idít_hash_èû
[
i
]->
√xt
 = 
idít_hash_hód
[i];

3280 
ihñ
 = 
ihe_li°
;

3281 
ihñ
) {

3282 
√xt
 = 
ihñ
->next;

3283 
	`FREE
(
ihñ
);

3284 
ihñ
 = 
√xt
;

3286 
ihe_li°
 = 0;

3287 
num_‰ì
 = 0;

3289 
 b
 = 
 amebuf
;

3290 
 b
) {

3291 
 bn
 = 
 b
->
√xt
;

3292 
	`FREE
(
 b
);

3293 
 b
 = 
 bn
;

3295 
 amebuf
 = 0;

3296 
lb_ödex
 = 4096;

3298 
	`debug_dump_idít_hash_èbÀ
(0);

3300 
	}
}

3302 
idít_hash_ñem_t
 *
	$quick_Æloc_idít_íåy
() {

3303 i‡(
num_‰ì
) {

3304 
num_‰ì
--;

3305  &(
ihe_li°
->
ôems
[
num_‰ì
]);

3307 
idít_hash_ñem_li°_t
 *
ihñ
;

3308 
ihñ
 = 
	`ALLOCATE
(
idít_hash_ñem_li°_t
, 
TAG_COMPILER
,

3310 
ihñ
->
√xt
 = 
ihe_li°
;

3311 
ihe_li°
 = 
ihñ
;

3312 
num_‰ì
 = 127;

3313  &(
ihe_li°
->
ôems
[127]);

3315 
	}
}

3317 
idít_hash_ñem_t
 *

3318 
föd_‹_add_idít
 
	$P2
(*, 
«me
, , 
Êags
) {

3319 
h
 = 
	`IdítHash
(
«me
);

3320 
idít_hash_ñem_t
 *
h±r
, *
h±r2
;

3322 i‡((
h±r
 = 
idít_hash_èbÀ
[
h
])) {

3323 i‡(!
	`°rcmp
(
h±r
->
«me
,Çame)) {

3324 i‡((
h±r
->
tokí
 & 
IHE_PERMANENT
Ë&& (
Êags
 & 
FOA_GLOBAL_SCOPE
)

3325 && (
h±r
->
dn
.
fun˘i⁄_num
==-1)&&(h±r->dn.
globÆ_num
==-1)

3326 && (
h±r
->
dn
.
˛ass_num
==-1)) {

3327 
h±r
->
√xt_dúty
 = 
idít_dúty_li°
;

3328 
idít_dúty_li°
 = 
h±r
;

3330  
h±r
;

3332 
h±r2
 = 
h±r
->
√xt
;

3333 
h±r2
 !
h±r
) {

3334 i‡(!
	`°rcmp
(
h±r2
->
«me
,Çame)) {

3335 i‡((
h±r2
->
tokí
 & 
IHE_PERMANENT
)&&(
Êags
 & 
FOA_GLOBAL_SCOPE
)

3336 && (
h±r2
->
dn
.
fun˘i⁄_num
==-1)&&(h±r2->dn.
globÆ_num
==-1)

3337 && (
h±r2
->
dn
.
˛ass_num
 == -1)) {

3338 
h±r2
->
√xt_dúty
 = 
idít_dúty_li°
;

3339 
idít_dúty_li°
 = 
h±r2
;

3341 
idít_hash_èbÀ
[
h
] = 
h±r2
;

3342  
h±r2
;

3344 
h±r2
 = h±r2->
√xt
;

3348 
h±r
 = 
	`quick_Æloc_idít_íåy
();

3349 i‡(!(
h±r2
 = 
idít_hash_èû
[
h
]Ë&& !(h±r2 = 
idít_hash_èbÀ
[h])) {

3350 
idít_hash_èbÀ
[
h
] = 
h±r
->
√xt
 = hptr;

3352 
h±r
->
√xt
 = 
h±r2
->next;

3353 
h±r2
->
√xt
 = 
h±r
;

3356 i‡(
Êags
 & 
FOA_NEEDS_MALLOC
) {

3357 
h±r
->
«me
 = 
	`Æloc_loˇl_«me
(name);

3359 
h±r
->
«me
 =Çame;

3361 
h±r
->
tokí
 = 0;

3362 
h±r
->
£m_vÆue
 = 0;

3363 
h±r
->
dn
.
simul_num
 = -1;

3364 
h±r
->
dn
.
loˇl_num
 = -1;

3365 
h±r
->
dn
.
globÆ_num
 = -1;

3366 
h±r
->
dn
.
efun_num
 = -1;

3367 
h±r
->
dn
.
fun˘i⁄_num
 = -1;

3368 
h±r
->
dn
.
˛ass_num
 = -1;

3369  
h±r
;

3370 
	}
}

3372 
add_keyw‹d_t
 
	$P2
(*, 
«me
, 
keyw‹d_t
 *, 
íåy
) {

3373 
h
 = 
	`IdítHash
(
«me
);

3375 i‡(
idít_hash_èbÀ
[
h
]) {

3376 
íåy
->
√xt
 = 
idít_hash_hód
[
h
]->next;

3377 
idít_hash_hód
[
h
]->
√xt
 = (
idít_hash_ñem_t
 *)
íåy
;

3378 i‡(
idít_hash_hód
[
h
] =
idít_hash_èû
[h])

3379 
idít_hash_èû
[
h
] = (
idít_hash_ñem_t
 *)
íåy
;

3381 
idít_hash_hód
[
h
] = (
idít_hash_ñem_t
 *)
íåy
;

3382 
idít_hash_èû
[
h
] = (
idít_hash_ñem_t
 *)
íåy
;

3383 
idít_hash_èbÀ
[
h
] = (
idít_hash_ñem_t
 *)
íåy
;

3384 
íåy
->
√xt
 = (
idít_hash_ñem_t
 *)entry;

3386 
íåy
->
tokí
 |
IHE_RESWORD
;

3387 
	}
}

3389 
	$öô_idítifõrs
() {

3390 
i
;

3391 
idít_hash_ñem_t
 *
ihe
;

3393 
	`öô_ö°rs
();

3396 
idít_hash_èbÀ
 = 
	`CALLOCATE
(
IDENT_HASH_SIZE
 * 3, 
idít_hash_ñem_t
 *,

3397 
TAG_IDENT_TABLE
, "init_identifiers");

3398 
idít_hash_hód
 = (
idít_hash_ñem_t
 **)&
idít_hash_èbÀ
[
IDENT_HASH_SIZE
];

3399 
idít_hash_èû
 = (
idít_hash_ñem_t
 **)&
idít_hash_èbÀ
[2*
IDENT_HASH_SIZE
];

3402 
i
=0; i<
IDENT_HASH_SIZE
 * 3; i++) {

3403 
idít_hash_èbÀ
[
i
]=0;

3406 
i
=0; i<
	`NELEM
(
ªsw‹ds
); i++) {

3407 
	`add_keyw‹d_t
(
ªsw‹ds
[
i
].
w‹d
, &reswords[i]);

3410 
i
=0; i<
	`NELEM
(
¥edefs
); i++) {

3411 i‡(
¥edefs
[
i
].
w‹d
[0] == '_') {

3412 
¥edefs
[
i
].
w‹d
++;

3413 i‡(
	`°rcmp
(
¥edefs
[
i
].
w‹d
, "call_other") == 0)

3414 
¨row_efun
 = 
i
;

3415 i‡(
	`°rcmp
(
¥edefs
[
i
].
w‹d
, "evaluate") == 0)

3416 
evÆu©e_efun
 = 
i
;

3417 i‡(
	`°rcmp
(
¥edefs
[
i
].
w‹d
, "this_object") == 0)

3418 
this_efun
 = 
i
;

3419 i‡(
	`°rcmp
(
¥edefs
[
i
].
w‹d
, "to_int") == 0)

3420 
to_öt_efun
 = 
i
;

3421 i‡(
	`°rcmp
(
¥edefs
[
i
].
w‹d
, "to_float") == 0)

3422 
to_Êﬂt_efun
 = 
i
;

3423 i‡(
	`°rcmp
(
¥edefs
[
i
].
w‹d
, "new") == 0)

3424 
√w_efun
 = 
i
;

3428 
ihe
 = 
	`föd_‹_add_≥rm_idít
(
¥edefs
[
i
].
w‹d
);

3429 
ihe
->
tokí
 |
IHE_EFUN
;

3430 
ihe
->
£m_vÆue
++;

3431 
ihe
->
dn
.
efun_num
 = 
i
;

3433 
	}
}

	@lex.h

1 #i‚de‡
_LEX_H_


2 
	#_LEX_H_


	)

4 
	#DEFMAX
 10000

	)

5 
	#MAXLINE
 1024

	)

6 
	#MLEN
 4096

	)

7 
	#NSIZE
 256

	)

8 
	#MAX_INSTRS
 512

	)

9 
	#EXPANDMAX
 25000

	)

10 
	#NARGS
 25

	)

11 
	#MARKS
 '@'

	)

13 
	#SKIPWHITE
 
	`is•a˚
(()*
p
Ë&& (*∞!'\n')Ëp++

	)

15 
	#DEFAULT_NONE
 0xff

	)

16 
	#DEFAULT_THIS_OBJECT
 0x„

	)

18 
	#PRAGMA_STRICT_TYPES
 1

	)

19 
	#PRAGMA_WARNINGS
 2

	)

20 
	#PRAGMA_SAVE_TYPES
 4

	)

21 
	#PRAGMA_SAVE_BINARY
 8

	)

22 
	#PRAGMA_OPTIMIZE
 16

	)

23 
	#PRAGMA_ERROR_CONTEXT
 32

	)

24 
	#PRAGMA_OPTIMIZE_HIGH
 64

	)

26 
	#FOA_GLOBAL_SCOPE
 0x1

	)

27 
	#FOA_NEEDS_MALLOC
 0x2

	)

30 
SIGNED
 
	mloˇl_num
, 
	mglobÆ_num
, 
	mefun_num
;

31 
SIGNED
 
	mfun˘i⁄_num
, 
	msimul_num
, 
	m˛ass_num
;

32 } 
	tdeföed_«me_t
;

34 
	sif°©e_s
 {

35 
if°©e_s
 *
	m√xt
;

36 
	m°©e
;

37 } 
	tif°©e_t
;

39 
	sde‚_s
 {

40 
de‚_s
 *
	m√xt
;

41 *
	m«me
;

42 *
	mexps
;

43 
	mÊags
;

44 
	m«rgs
;

45 } 
	tde‚_t
;

48 
	#DEFHASH
 64

	)

49 
	#defhash
(
s
Ë(
	`whash°r
((s), 10Ë& (
DEFHASH
 - 1))

	)

51 
	#DEF_IS_UNDEFINED
 1

	)

52 
	#DEF_IS_PREDEF
 2

	)

54 
	#DEF_IS_NOT_LOCAL
 4

	)

57 
	#IHE_RESWORD
 0x8000

	)

58 
	#IHE_EFUN
 0x4000

	)

59 
	#IHE_SIMUL
 0x2000

	)

60 
	#IHE_ORPHAN
 0x1000

	)

61 
	#IHE_PERMANENT
 (
IHE_RESWORD
 | 
IHE_EFUN
 | 
IHE_SIMUL
 | 
IHE_ORPHAN
)

	)

62 
	#TOKEN_MASK
 0x0fff

	)

64 
	#INDENT_HASH_SIZE
 1024

	)

66 
	sidít_hash_ñem_s
 {

67 *
	m«me
;

68 
	mtokí
;

69 
	m£m_vÆue
;

70 
idít_hash_ñem_s
 *
	m√xt
;

72 
idít_hash_ñem_s
 *
	m√xt_dúty
;

73 
deföed_«me_t
 
	mdn
;

74 } 
	tidít_hash_ñem_t
;

77 *
	mw‹d
;

78 
	mtokí
;

79 
	m£m_vÆue
;

80 
idít_hash_ñem_t
 *
	m√xt
;

82 
	mmö_¨gs
;

83 
	mmax_¨gs
;

84 
	mªt_ty≥
;

85 
	m¨g_ty≥1
;

86 
	m¨g_ty≥2
;

87 
	m¨g_ty≥3
;

88 
	m¨g_ty≥4
;

89 
	m¨g_ödex
;

90 
	mDeÁu…
;

92 } 
	tkeyw‹d_t
;

94 
	sÕc_¥edef_s
 {

95 *
	mÊag
;

96 
Õc_¥edef_s
 *
	m√xt
;

97 } 
	tÕc_¥edef_t
;

99 
	#EXPECT_ELSE
 1

	)

100 
	#EXPECT_ENDIF
 2

	)

102 
Õc_¥edef_t
 *
Õc_¥edefs
;

104 
	#ißlunum
(
c
Ë(
	`uiß um
(cË|| (cË='_')

	)

112 
	#F_ALIAS_FLAG
 1024

	)

115 
	mmax_¨g
, 
	mmö_¨g
;

116 
	mty≥
[4];

117 
	mDeÁu…
;

118 
	mªt_ty≥
;

119 *
	m«me
;

120 #ifde‡
LPC_TO_C


121 *
	mroutöe
;

123 
	m¨g_ödex
;

124 } 
	tö°r_t
;

129 
ö°r_t
 
ö°rs
[512];

130 
cuºít_löe
;

131 
cuºít_löe_ba£
;

132 
cuºít_löe_ßved
;

133 
tŸÆ_löes
;

134 *
cuºít_fûe
;

135 
cuºít_fûe_id
;

136 
¥agmas
;

137 
num_∑r£_îr‹
;

138 
Õc_¥edef_t
 *
Õc_¥edefs
;

139 
efun_¨g_ty≥s
[];

140 
yyãxt
[1024];

141 
keyw‹d_t
 
¥edefs
[];

142 
Àx_Áèl
;

143 
¨row_efun
, 
evÆu©e_efun
, 
this_efun
, 
to_Êﬂt_efun
, 
to_öt_efun
, 
√w_efun
;

145 
INLINE
 
push_fun˘i⁄_c⁄ãxt
 
PROT
(());

146 
p›_fun˘i⁄_c⁄ãxt
 
PROT
(());

147 
yyÀx
 
PROT
(());

148 
öô_num_¨gs
 
PROT
(());

149 *
quîy_ö°r_«me
 
PROT
(());

150 *
gë_f_«me
 
PROT
(());

151 
£t_öc_li°
 
PROT
((*));

152 
°¨t_√w_fûe
 
PROT
(());

153 
íd_√w_fûe
 
PROT
(());

154 
lookup_¥edef
 
PROT
((*));

155 
add_¥edeföes
 
PROT
(());

156 *
maö_fûe_«me
 
PROT
(());

157 *
gë_deföed_«me
 
PROT
((
deföed_«me_t
 *));

158 
idít_hash_ñem_t
 *
föd_‹_add_idít
 
PROT
((*, ));

159 
idít_hash_ñem_t
 *
föd_‹_add_≥rm_idít
 
PROT
((*));

160 
idít_hash_ñem_t
 *
lookup_idít
 
PROT
((*));

161 
‰ì_unu£d_idítifõrs
 
PROT
(());

162 
öô_idítifõrs
 
PROT
(());

163 *
show_îr‹_c⁄ãxt
 
PROT
(());

164 #ifde‡
DEBUGMALLOC_EXTENSIONS


165 
m¨k_Æl_deföes
 
PROT
(());

	@lint.h

10 #i‚de‡
LINT_H_


11 
	#LINT_H_


	)

13 
	~"°d.h
"

19 #ifde‡
USE_POSIX_SIGNALS


20 
p‹t_sigblock
();

21 
p‹t_sigmask
();

23 #i‚de‡
_M_UNIX


24 (*
p‹t_sig«l
()) ();

27 
p‹t_sig£tmask
();

30 #ifde‡
NeXT


31 
_£tjmp
();

32 
_l⁄gjmp
();

36 #i‡
deföed
(
sun
Ë&& !deföed(
SunOS_5
Ë&& deföed(
__STDC__
)

37 #ifde‡
BUFSIZ


38 
Âuts
(*, 
FILE
 *);

39 
fwrôe
(*, , , 
FILE
 *);

40 
‰ód
(*, , , 
FILE
 *);

42 
ssˇnf
(*, *,...);

43 
≥º‹
(*);

44 
sy°em
 
PROT
((*));

45 
©oi
 
PROT
((const *));

46 
£tsock›t
 
PROT
((, , , *, ));

47 
f£ek
 
PROT_STDIO
((
FILE
 *, , ));

48 
Æ¨m
 
PROT
(());

49 
io˘l
 
PROT
((,...));

50 
ª«me
 
PROT
((*, *));

51 
ªadlök
 
PROT
((*, *, ));

52 
symlök
 
PROT
((*, *));

53 
fchmod
 
PROT
((, ));

56 #i‡(
deföed
(
SVR4
Ë&& !deföed(
sgi
)Ë|| deföed(
__386BSD__
)

57 
exô
 
PROT
(());

60 #i‡!
deföed
(
SunOS_5
Ë&& !deföed(
NeXT
)

61 #ifde‡
sun


62 *
_¸y±
 
PROT
((*, *));

65 #ifde‡
DRAND48


66 #i‚de‡
sgi


67 
dønd48
 
PROT
(());

68 
§™d48
 
PROT
(());

71 #ifde‡
RANDOM


72 
øndom
 
PROT
(());

76 #ifde‡
PEDANTIC


77 #ifde‡
sgi


78 
uÆ¨m
 
PROT
((, ));

	@lpc.h

1 #i‚de‡
LPC_H


2 
	#LPC_H


	)

8 
	mªf
;

9 } 
	tª„d_t
;

11 
	uu
 {

12 *
	m°rög
;

13 
	mnumbî
;

14 
	mªÆ
;

16 
ª„d_t
 *
	mª„d
;

18 #i‚de‡
NO_BUFFER_TYPE


19 
buf„r_s
 *
	mbuf
;

21 
obje˘_s
 *
	mob
;

22 
¨øy_s
 *
	m¨r
;

23 
m≠pög_s
 *
	mm≠
;

24 
fu≈å_s
 *
	mÂ
;

26 
svÆue_s
 *
	mlvÆue
;

27 
ªf_s
 *
	mªf
;

28 *
	mlvÆue_byã
;

29 (*
	mîr‹_h™dÀr
Ë
PROT
(());

37 
	ssvÆue_s
 {

38 
	mty≥
;

39 
	msubty≥
;

40 
u
 
	mu
;

41 } 
	tsvÆue_t
;

43 
	sªf_s
 {

44 
	mªf
;

45 
ªf_s
 *
	m√xt
, *
	m¥ev
;

46 
c⁄åﬁ_°ack_s
 *
	mc•
;

47 
svÆue_t
 *
	mlvÆue
;

48 
svÆue_t
 
	msv
;

49 } 
	tªf_t
;

52 
	#T_INVALID
 0x0

	)

53 
	#T_LVALUE
 0x1

	)

55 
	#T_NUMBER
 0x2

	)

56 
	#T_STRING
 0x4

	)

57 
	#T_REAL
 0x80

	)

59 
	#T_ARRAY
 0x8

	)

60 
	#T_OBJECT
 0x10

	)

61 
	#T_MAPPING
 0x20

	)

62 
	#T_FUNCTION
 0x40

	)

63 #i‚de‡
NO_BUFFER_TYPE


64 
	#T_BUFFER
 0x100

	)

66 
	#T_CLASS
 0x200

	)

68 
	#T_LVALUE_BYTE
 0x400

	)

69 
	#T_LVALUE_RANGE
 0x800

	)

70 
	#T_ERROR_HANDLER
 0x1000

	)

71 
	#T_FREED
 0x2000

	)

72 
	#T_REF
 0x4000

	)

74 #ifde‡
NO_BUFFER_TYPE


75 
	#T_REFED
 (
T_ARRAY
|
T_OBJECT
|
T_MAPPING
|
T_FUNCTION
|
T_CLASS
|
T_REF
)

	)

77 
	#T_REFED
 (
T_ARRAY
|
T_OBJECT
|
T_MAPPING
|
T_FUNCTION
|
T_BUFFER
|
T_CLASS
|
T_REF
)

	)

79 
	#T_ANY
 (
T_REFED
|
T_STRING
|
T_NUMBER
|
T_REAL
)

	)

82 
	#STRING_COUNTED
 0x1

	)

83 
	#STRING_HASHED
 0x2

	)

85 
	#STRING_MALLOC
 
STRING_COUNTED


	)

86 
	#STRING_SHARED
 (
STRING_COUNTED
 | 
STRING_HASHED
)

	)

87 
	#STRING_CONSTANT
 0

	)

89 
	#T_UNDEFINED
 0x4

	)

	@lpc_incl.h

1 #i‚de‡
LPC_INCL_H


2 
	#LPC_INCL_H


	)

4 
	~"°d.h
"

5 
	~"ö˛ude/fun˘i⁄.h
"

6 
	~"‹igö.h
"

7 
	~"c⁄fig.h
"

8 
	~"≠∂õs.h
"

10 
	~"¥ogøm.h
"

11 
	~"Õc.h
"

12 
	~"fun˘i⁄.h
"

13 
	~"buf„r.h
"

14 
	~"obje˘.h
"

15 
	~"¨øy.h
"

16 
	~"m≠pög.h
"

17 
	~"˛ass.h
"

19 
	~"°øŒoc.h
"

20 
	~"simuœã.h
"

21 
	~"öãΩªt.h
"

22 
	~"rc.h
"

23 
	~"maö.h
"

	@lpc_to_c.h

1 #i‚de‡
LPC_TO_C_H


2 
	#LPC_TO_C_H


	)

4 
	~"Õc_ö˛.h
"

5 
	~"e›î©‹s.h
"

6 
	~"efun_¥Ÿos.h
"

8 #ifde‡
LPC_TO_C


10 
	~"cfuns.h
"

12 
	#C_STRING
(
x
Ë
	`SAFE
(\

13 (++
•
)->
ty≥
 = 
T_STRING
;\

14 
•
->
subty≥
 = 
STRING_SHARED
;\

15 
•
->
u
.
°rög
 = 
	`ªf_°rög
(
cuºít_¥og
->
°rögs
[
x
]);\

16 )

	)

17 
	#C_AGGREGATE
(
x
Ë
	`SAFE
(\

18 
Õc_¨r
 = 
	`Æloˇã_em±y_¨øy
(
x
 + 
num_v¨¨gs
);\

19 
num_v¨¨gs
 = 0;\

20 
Õc_öt
=
x
 + 
num_v¨¨gs
;Üpc_int--; )\

21 
Õc_¨r
->
ôem
[
Õc_öt
] = *
•
--;\

22 (++
•
)->
ty≥
 = 
T_ARRAY
;\

23 
•
->
u
.
¨r
 = 
Õc_¨r
;\

24 )

	)

25 
	#C_AGGREGATE_ASSOC
(
x
Ë
	`SAFE
(\

26 
Õc_m≠
 = 
	`lﬂd_m≠pög_‰om_aggªg©e
(
•
 -(
x
 + 
num_v¨¨gs
), (x+num_varargs));\

27 
num_v¨¨gs
 = 0;\

28 (++
•
)->
ty≥
 = 
T_MAPPING
;\

29 
•
->
u
.
m≠
 = 
Õc_m≠
;\

30 )

	)

31 
	#C_WHILE_DEC
(
x
Ë
	`SAFE
(\

32 i‡(
Â
[
x
].
ty≥
 =
T_NUMBER
) {\

33 
Õc_öt
 = 
Â
[
x
].
u
.
numbî
--;\

34 } i‡(
Â
[
x
].
ty≥
 =
T_REAL
) {\

35 
Õc_öt
 = 
Â
[
x
].
u
.
ªÆ
--;\

36 } 
	`îr‹
("-- ofÇon-numericárgument\n");\

37 )

	)

38 
	#C_LOOP_COND_LV
(
x
, 
y
Ë
Õc_öt
 = 
	`c_lo›_c⁄d_com∑ª
(&
Â
[x], &Â[y])

	)

39 
	#C_LOOP_COND_NUM
(
x
, 
y
Ë
	`SAFE
(\

40 i‡(
Â
[
x
].
ty≥
 =
T_NUMBER
) {\

41 
Õc_öt
 = 
Â
[
x
].
u
.
numbî
 < 
y
;\

42 } i‡(
Â
[
x
].
ty≥
 =
T_REAL
) {\

43 
Õc_öt
 = 
Â
[
x
].
u
.
ªÆ
 < 
y
;\

44 } 
	`îr‹
("Right side of < isáÇumber,Üeft side isÇot.\n");\

45 )

	)

46 
	#C_LOOP_INCR
(
x
Ë
	`SAFE
(\

47 i‡(
Â
[
x
].
ty≥
 =
T_NUMBER
Ë{ fp[x].
u
.
numbî
++; }\

48 i‡(
Â
[
x
].
ty≥
 =
T_REAL
Ë{ fp[x].
u
.
ªÆ
++; }\

49 { 
	`îr‹
("++ ofÇon-numericárgument\n"); }\

50 )

	)

51 
	#C_GLOBAL
(
x
Ë
	`SAFE
(\

52 
Õc_svp
 = &
cuºít_obje˘
->
v¨übÀs
[
v¨übÀ_ödex_off£t
 + 
x
];\

53 i‡((
Õc_svp
->
ty≥
 =
T_OBJECT
Ë&& (Õc_svp->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {\

54 *++
•
 = 
c⁄°0u
; 
	`assign_svÆue
(
Õc_svp
, &const0u);\

55 } 
	`assign_svÆue_no_‰ì
(++
•
, 
Õc_svp
);\

56 )

	)

57 
	#C_LOCAL
(
x
Ë
	`SAFE
(\

58 i‡((
Â
[
x
].
ty≥
 =
T_OBJECT
) &&\

59 (
Â
[
x
].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))\

60 
	`assign_svÆue
(
Â
 + 
x
, &
c⁄°0u
);\

61 
	`push_svÆue
(
Â
 + 
x
);\

62 )

	)

63 
	#C_TRANSFER_LOCAL
(
x
Ë
	`SAFE
(\

64 i‡((
Â
[
x
].
ty≥
 =
T_OBJECT
) &&\

65 (
Â
[
x
].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))\

66 
	`assign_svÆue
(
Â
 + 
x
, &
c⁄°0u
);\

67 *++
•
 = 
Â
[
x
];\

68 
Â
[
x
].
ty≥
 |
T_FREED
;\

69 )

	)

70 
	#C_LVALUE
(
x
Ë
	`SAFE
((++
•
)->
ty≥
 = 
T_LVALUE
; sp->
u
.
lvÆue
 = x;)

	)

71 
	#C_LAND
(
x
Ë
	`SAFE
(\

72 i‡(
•
->
ty≥
 =
T_NUMBER
) {\

73 i‡(!
•
->
u
.
numbî
Ë
x
; sp--;\

74 } 
	`p›_°ack
();\

75 )

	)

76 
	#C_LOR
(
x
Ë
	`SAFE
(i‡(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
Ë•--; x;)

	)

77 
	#C_BRANCH_WHEN_ZERO
(
x
Ë
	`SAFE
(\

78 i‡(
•
->
ty≥
 =
T_NUMBER
) {\

79 i‡(!((
•
--)->
u
.
numbî
)Ë
x
;\

80 } 
	`p›_°ack
();\

81 )

	)

82 
	#C_BRANCH_WHEN_NON_ZERO
(
x
Ë
	`SAFE
(\

83 i‡(
•
->
ty≥
 !
T_NUMBER
 \

84 || 
•
->
u
.
numbî
Ë{ 
	`p›_°ack
(); 
x
;\

85 } 
•
--;\

86 )

	)

87 
	#C_BBRANCH_LT
(
x
Ë
	`SAFE
(
	`f_…
(); i‡((
•
--)->
u
.
numbî
Ëx;)

	)

88 
	#BRANCH_LINK
(
x
, 
y
Ë
	`SAFE
(\

89 i‡(
	`x
(
•
->
ty≥
 =
T_NUMBER
 && !•->
u
.
numbî
)) {\

90 
y
; } 
	`p›_°ack
();\

91 )

	)

92 
	#C_REF
(
x
Ë
	`SAFE
(\

93 
svÆue_t
 *
lvÆ
;\

94 i‡(
Â
[
x
].
ty≥
 =
T_REF
) {\

95 
lvÆ
 = 
Â
[
x
].
u
.
ªf
->
lvÆue
;\

96 i‡(!
lvÆ
Ë
	`îr‹
("Reference is invalid.\n");\

97 i‡(
lvÆ
->
ty≥
 =
T_LVALUE_BYTE
)\

98 
	`push_numbî
(*
globÆ_lvÆue_byã
.
u
.
lvÆue_byã
);\

100 i‡(
lvÆ
->
ty≥
 =
T_OBJECT
 && (lvÆ->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
))\

101 
	`assign_svÆue
(
lvÆ
, &
c⁄°0
);\

102 
	`push_svÆue
(
lvÆ
);\

104 } 
	`îr‹
("Non-reference valueÖassedásÑeferenceárgument.\n");\

105 )

	)

106 
	#C_REF_LVALUE
(
x
Ë
	`SAFE
(\

107 i‡(
Â
[
x
].
ty≥
 =
T_REF
) {\

108 i‡(
Â
[
x
].
u
.
ªf
->
lvÆue
) {\

109 
STACK_INC
;\

110 
•
->
ty≥
 = 
T_LVALUE
;\

111 
•
->
u
.
lvÆue
 = 
Â
[
x
].u.
ªf
->lvalue;\

112 } 
	`îr‹
("Reference is invalid.\n");\

113 } 
	`îr‹
("Non-reference valueÖassedásÑeferenceárgument.\n");\

114 )

	)

116 
c_efun_ªtu∫
 
PROT
(());

	@macros.h

1 #i‚de‡
MACROS_H


2 
	#MACROS_H


	)

4 #ifde‡
__STDC__


5 
	#ANSI_STRING_HACK
(
x
Ë#x

	)

6 
	#DONT_ASK_WHY
(
x
Ë(x)

	)

7 
	#WHERE
 (
__FILE__
 ":" 
	`DONT_ASK_WHY
(
x
))

	)

9 
	#WHERE
 "n⁄-™sòcompûî†¨ê®∑ö"

	)

15 #ifde‡
BUFSIZ


16 
	#PROT_STDIO
(
x
Ë
	`PROT
(x)

	)

18 
	#PROT_STDIO
(
x
Ë()

	)

33 #i‡
deföed
(
__STDC__
Ë|| deföed(
WIN32
)

34 
	#PROT
(
x
Ë
	)
x

35 
	#P1
(
t1
, 
v1
Ë—1 v1)

	)

36 
	#P2
(
t1
, 
v1
, 
t2
, 
v2
Ë—1 v1,Å2 v2)

	)

37 
	#P3
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
Ë—1 v1,Å2 v2,Å3 v3)

	)

38 
	#P4
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
Ë—1 v1,Å2 v2,Å3 v3,Å4 v4)

	)

39 
	#P5
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
, 
t5
, 
v5
Ë—1 v1,Å2 v2,Å3 v3,Å4 v4,Å5 v5)

	)

40 
	#P6
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
, 
t5
, 
v5
, 
t6
, 
v6
Ë—1 v1,Å2 v2,Å3 v3,Å4 v4,Å5 v5,Å6 v6)

	)

41 
	#P7
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
, 
t5
, 
v5
, 
t6
, 
v6
, 
t7
, 
v7
Ë—1 v1,Å2 v2,Å3 v3,Å4 v4,Å5 v5,Å6 v6,Å7 v7)

	)

42 
	#VOLATILE
 vﬁ©ûe

	)

43 
	#SIGNED
 sig√d

	)

45 
	#PROT
(
x
Ë()

	)

46 
	#P1
(
t1
, 
v1
Ë(v1Ët1 v1;

	)

47 
	#P2
(
t1
, 
v1
, 
t2
, 
v2
Ë(v1, v2Ët1 v1;Å2 v2;

	)

48 
	#P3
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
Ë(v1, v2, v3Ët1 v1;Å2 v2;Å3 v3;

	)

49 
	#P4
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
Ë(v1, v2, v3, v4Ët1 v1;Å2 v2;Å3 v3;Å4 v4;

	)

50 
	#P5
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
, 
t5
, 
v5
Ë(v1, v2, v3, v4, v5Ët1 v1;Å2 v2;Å3 v3;Å4 v4;Å5 v5;

	)

51 
	#P6
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
, 
t5
, 
v5
, 
t6
, 
v6
Ë(v1, v2, v3, v4, v5, v6Ët1 v1;Å2 v2;Å3 v3;Å4 v4;Å5 v5;Å6 v6;

	)

52 
	#P7
(
t1
, 
v1
, 
t2
, 
v2
, 
t3
, 
v3
, 
t4
, 
v4
, 
t5
, 
v5
, 
t6
, 
v6
, 
t7
, 
v7
Ë(v1, v2, v3, v4, v5, v6, v7Ët1 v1;Å2 v2;Å3 v3;Å4 v4;Å5 v5;Å6 v6;Å7 v7;

	)

53 
	#VOLATILE


	)

54 
	#SIGNED


	)

58 #ifde‡
INCL_STDARG_H


59 
	#PROT1V
(
x
Ë(x, ...)

	)

60 
	#P1V
(
t1
, 
x1
Ë—1 x1, ...)

	)

61 
	#V_START
(
vli°
, 
œ°_¨g
Ë
	`va_°¨t
(vli°,Üa°_¨g)

	)

63 
	#PROT2V
(
x
, 
y
Ë(x, y, ...)

	)

64 
	#P2V
(
t1
, 
x1
, 
t2
, 
x2
Ë—1 x1,Å2 x2, ...)

	)

65 
	#V_START
(
vli°
, 
œ°_¨g
Ë
	`va_°¨t
(vli°,Üa°_¨g)

	)

67 
	#V_VAR
(
ty≥
, 
v¨
, 
vli°
)

	)

68 
	#V_DCL
(
x
)

	)

70 
	#PROT1V
(
x
Ë()

	)

71 
	#P1V
(
t1
, 
x
Ë(
va_Æi°
Ë
va_d˛


	)

72 
	#V_START
(
vli°
, 
œ°_¨g
Ë
	`va_°¨t
(vli°)

	)

74 
	#PROT2V
(
x
, 
y
Ë()

	)

75 
	#P2V
(
t1
, 
x1
, 
t2
, 
x2
Ë(
va_Æi°
Ë
va_d˛


	)

77 
	#V_VAR
(
ty≥
, 
v¨
, 
vli°
Ëv¨ = 
	`va_¨g
(vli°,Åy≥)

	)

78 
	#V_DCL
(
x
Ë
	)
x

81 
	#SAFE
(
x
Ëdÿ{ x } 0)

	)

93 #i‡(
deföed
(
SYSMALLOC
Ë+ deföed(
SMALLOC
Ë+ deföed(
BSDMALLOC
)) > 1

94 !
O∆y
 
⁄e
 
mÆloc
 
∑ckage
 
should
 
be
 
	gdeföed


97 #i‡(
deföed
(
WRAPPEDMALLOC
Ë+ deföed(
DEBUGMALLOC
)) > 1

98 !
O∆y
 
⁄e
 
	$wøµî
 (
©
 
mo°
Ë
should
 
be
 
deföed


101 #i‡
	`deföed
(
DO_MSTATS
Ë&& deföed(
SYSMALLOC
)

102 !'DO_MSTATS' 
nŸ
 
avaûabÀ
 
wôh
 'SYSMALLOC'

105 #i‡
	`deföed
 (
WRAPPEDMALLOC
Ë&& !deföed(
IN_MALLOC_WRAPPER
)

107 
	#MALLOC
(
x
Ë
	`wøµedmÆloc
(x)

	)

108 
	#FREE
(
x
Ë
	`wøµed‰ì
(x)

	)

109 
	#REALLOC
(
x
, 
y
Ë
	`wøµedªÆloc
(x, y)

	)

110 
	#CALLOC
(
x
, 
y
Ë
	`wøµedˇŒoc
(x, y)

	)

111 
	#DXALLOC
(
x
, 
t
, 
d
Ë
	`xÆloc
(x)

	)

112 
	#DMALLOC
(
x
, 
t
, 
d
Ë
	`MALLOC
(x)

	)

113 
	#DREALLOC
(
x
, 
y
, 
t
, 
d
Ë
	`REALLOC
(x,y)

	)

114 
	#DCALLOC
(
x
, 
y
, 
t
, 
d
Ë
	`CALLOC
(x,y)

	)

118 #i‡
	`deföed
(
DEBUGMALLOC
Ë&& !deföed(
IN_MALLOC_WRAPPER
)

120 
	#MALLOC
(
x
Ë
	`debugmÆloc
(x, 0, (*)0)

	)

121 
	#DMALLOC
(
x
, 
t
, 
d
Ë
	`debugmÆloc
(x,Å, d)

	)

122 
	#DXALLOC
(
x
, 
t
, 
d
Ë
	`debugmÆloc
(x,Å, d)

	)

123 
	#FREE
(
x
Ë
	`debug‰ì
(x)

	)

124 
	#REALLOC
(
x
,
y
Ë
	`debugªÆloc
(x,y,0,(*)0)

	)

125 
	#DREALLOC
(
x
,
y
,
èg
,
desc
Ë
	`debugªÆloc
(x,y,èg,desc)

	)

126 
	#CALLOC
(
x
,
y
Ë
	`debugˇŒoc
(x,y,0,(*)0)

	)

127 
	#DCALLOC
(
x
,
y
,
èg
,
desc
Ë
	`debugˇŒoc
(x,y,èg,desc)

	)

131 
	~"my_mÆloc.h
"

136 #i‡!
	`deföed
(
MALLOC
Ë&& !deföed(
EDIT_SOURCE
)

137 !
You
 
√ed
 
to
 
•ecify
 
a
 
mÆloc
 
∑ckage
 
ö
 
loˇl_›ti⁄s
/
›ti⁄s
.
h


140 
	#ALLOCATE
(
ty≥
, 
èg
, 
desc
Ë(—y≥ *)
	`DXALLOC
(—y≥),Åag, desc))

	)

141 
	#CALLOCATE
(
num
, 
ty≥
, 
èg
, 
desc
Ë(—y≥ *)
	`DXALLOC
(—y≥[1]Ë* (num),Åag, desc))

	)

142 
	#RESIZE
(
±r
, 
num
, 
ty≥
, 
èg
, 
desc
Ë(—y≥ *)
	`DREALLOC
((*Ìå, —y≥Ë* (num),Åag, desc))

	)

144 #ifde‡
DEBUG


145 
	#IF_DEBUG
(
x
Ë
	)
x

146 
	#DEBUG_CHECK
(
x
, 
y
Ëi‡(xË
	`Áèl
(y)

	)

147 
	#DEBUG_CHECK1
(
x
, 
y
, 
a
Ëi‡(xË
	`Áèl
(y,á)

	)

148 
	#DEBUG_CHECK2
(
x
, 
y
, 
a
, 
b
Ëi‡(xË
	`Áèl
(y,á, b)

	)

150 
	#IF_DEBUG
(
x
)

	)

151 
	#DEBUG_CHECK
(
x
, 
y
)

	)

152 
	#DEBUG_CHECK1
(
x
, 
y
, 
a
)

	)

153 
	#DEBUG_CHECK2
(
x
, 
y
, 
a
, 
b
)

	)

156 #i‡!
	`deföed
(
EDIT_SOURCE
Ë&& !deföed(
_FUNC_SPEC_
)

157 
	#COPY2
(
x
, 
y
) ((*)(x))[0] = ((*)(y))[0]; \

158 ((*)(
x
))[1] = ((*)(
y
))[1]

	)

159 
	#LOAD2
(
x
, 
y
) ((*)&(x))[0] = *y++; \

160 ((*)&(
x
))[1] = *
y
++

	)

161 
	#STORE2
(
x
, 
y
) *x++ = ((*)(&(y)))[0]; \

162 *
x
++ = ((*)(&(
y
)))[1]

	)

164 
	#COPY4
(
x
, 
y
) ((*)(x))[0] = ((*)(y))[0]; \

165 ((*)(
x
))[1] = ((*)(
y
))[1]; \

166 ((*)(
x
))[2] = ((*)(
y
))[2]; \

167 ((*)(
x
))[3] = ((*)(
y
))[3]

	)

168 
	#LOAD4
(
x
, 
y
) ((*)&(x))[0] = *y++; \

169 ((*)&(
x
))[1] = *
y
++; \

170 ((*)&(
x
))[2] = *
y
++; \

171 ((*)&(
x
))[3] = *
y
++

	)

172 
	#STORE4
(
x
, 
y
) *x++ = ((*)(&(y)))[0]; \

173 *
x
++ = ((*)(&(
y
)))[1]; \

174 *
x
++ = ((*)(&(
y
)))[2]; \

175 *
x
++ = ((*)(&(
y
)))[3]

	)

177 
	#COPY8
(
x
, 
y
) ((*)(x))[0] = ((*)(y))[0]; \

178 ((*)(
x
))[1] = ((*)(
y
))[1]; \

179 ((*)(
x
))[2] = ((*)(
y
))[2]; \

180 ((*)(
x
))[3] = ((*)(
y
))[3]; \

181 ((*)(
x
))[4] = ((*)(
y
))[4]; \

182 ((*)(
x
))[5] = ((*)(
y
))[5]; \

183 ((*)(
x
))[6] = ((*)(
y
))[6]; \

184 ((*)(
x
))[7] = ((*)(
y
))[7]

	)

185 
	#LOAD8
(
x
, 
y
) ((*)&(x))[0] = *y++; \

186 ((*)&(
x
))[1] = *
y
++; \

187 ((*)&(
x
))[2] = *
y
++; \

188 ((*)&(
x
))[3] = *
y
++; \

189 ((*)&(
x
))[4] = *
y
++; \

190 ((*)&(
x
))[5] = *
y
++; \

191 ((*)&(
x
))[6] = *
y
++; \

192 ((*)&(
x
))[7] = *
y
++;

	)

193 
	#STORE8
(
x
, 
y
) *x++ = ((*)(&(y)))[0]; \

194 *
x
++ = ((*)(&(
y
)))[1]; \

195 *
x
++ = ((*)(&(
y
)))[2]; \

196 *
x
++ = ((*)(&(
y
)))[3]; \

197 *
x
++ = ((*)(&(
y
)))[4]; \

198 *
x
++ = ((*)(&(
y
)))[5]; \

199 *
x
++ = ((*)(&(
y
)))[6]; \

200 *
x
++ = ((*)(&(
y
)))[7]

	)

202 #i‡
SIZEOF_SHORT
 == 2

203 
	#COPY_SHORT
(
x
, 
y
Ë
	`COPY2
(x,y)

	)

204 
	#LOAD_SHORT
(
x
, 
y
Ë
	`LOAD2
(x,y)

	)

205 
	#STORE_SHORT
(
x
, 
y
Ë
	`STORE2
(x,y)

	)

207 !
sh‹ts
 
of
 
size
 
Ÿhî
 
th™
 2 
nŸ
 
im∂emíãd


210 #i‡
SIZEOF_INT
 == 4

211 
	#COPY_INT
(
x
, 
y
Ë
	`COPY4
(x,y)

	)

212 
	#LOAD_INT
(
x
, 
y
Ë
	`LOAD4
(x,y)

	)

213 
	#STORE_INT
(
x
, 
y
Ë
	`STORE4
(x,y)

	)

214 
	#INT_32
 

	)

216 !
öts
 
of
 
size
 
Ÿhî
 
th™
 4 
nŸ
 
im∂emíãd


219 #i‡
SIZEOF_FLOAT
 == 4

220 
	#COPY_FLOAT
(
x
, 
y
Ë
	`COPY4
(x,y)

	)

221 
	#LOAD_FLOAT
(
x
, 
y
Ë
	`LOAD4
(x,y)

	)

222 
	#STORE_FLOAT
(
x
, 
y
Ë
	`STORE4
(x,y)

	)

224 !
Êﬂts
 
of
 
size
 
Ÿhî
 
th™
 4 
nŸ
 
im∂emíãd


227 #i‡
SIZEOF_PTR
 == 4

228 
	#COPY_PTR
(
x
, 
y
Ë
	`COPY4
(x,y)

	)

229 
	#LOAD_PTR
(
x
, 
y
Ë
	`LOAD4
(x,y)

	)

230 
	#STORE_PTR
(
x
, 
y
Ë
	`STORE4
(x,y)

	)

232 
	#POINTER_INT
 

	)

233 
	#INS_POINTER
 
ös_öt


	)

235 #i‡
SIZEOF_PTR
 == 8

236 
	#COPY_PTR
(
x
, 
y
Ë
	`COPY8
(x,y)

	)

237 
	#LOAD_PTR
(
x
, 
y
Ë
	`LOAD8
(x,y)

	)

238 
	#STORE_PTR
(
x
, 
y
Ë
	`STORE8
(x,y)

	)

240 
	#POINTER_INT
 

	)

241 
	#INS_POINTER
 
ös_l⁄g


	)

243 !
poöãrs
 
of
 
size
 
Ÿhî
 
th™
 4 
‹
 8 
nŸ
 
im∂emíãd


248 #i‚de‡
_FUNC_SPEC_


249 *
xÆloc
 
	`PROT
(());

250 #ifde‡
DEBUGMALLOC


251 *
öt_°rög_c›y
 
	`PROT
((*, *));

252 *
öt_°rög_u∆ök
 
	`PROT
((*, *));

253 *
öt_√w_°rög
 
	`PROT
((, *));

254 *
öt_Æloc_c°rög
 
	`PROT
((*, *));

256 *
öt_°rög_c›y
 
	`PROT
((*));

257 *
öt_°rög_u∆ök
 
	`PROT
((*));

258 *
öt_√w_°rög
 
	`PROT
(());

259 *
öt_Æloc_c°rög
 
	`PROT
((*));

263 #ifde‡
DEBUGMALLOC


264 
	#°rög_c›y
(
x
,
y
Ë
	`öt_°rög_c›y
(x, y)

	)

265 
	#°rög_u∆ök
(
x
,
y
Ë
	`öt_°rög_u∆ök
(x, y)

	)

266 
	#√w_°rög
(
x
,
y
Ë
	`öt_√w_°rög
(x, y)

	)

267 
	#Æloc_c°rög
(
x
,
y
Ë
	`öt_Æloc_c°rög
(x, y)

	)

269 
	#°rög_c›y
(
x
,
y
Ë
	`öt_°rög_c›y
(x)

	)

270 
	#°rög_u∆ök
(
x
,
y
Ë
	`öt_°rög_u∆ök
(x)

	)

271 
	#√w_°rög
(
x
,
y
Ë
	`öt_√w_°rög
(x)

	)

272 
	#Æloc_c°rög
(
x
,
y
Ë
	`öt_Æloc_c°rög
(x)

	)

275 #i‚de‡
INLINE


276 #ifde‡
WIN32


277 
	#INLINE
 
__ölöe


	)

278 
	#INLINE_STATIC
 
__ölöe


	)

280 
	#INLINE


	)

284 #i‚de‡
INLINE_STATIC


285 
	#INLINE_STATIC
 
INLINE


	)

294 
	#uisdigô
(
x
Ë
	`isdigô
(()x)

	)

295 
	#ui¶owî
(
x
Ë
	`i¶owî
(()x)

	)

296 
	#uis•a˚
(
x
Ë
	`is•a˚
(()x)

	)

297 
	#uiß um
(
x
Ë
	`iß um
(()x)

	)

298 
	#uisuµî
(
x
Ë
	`isuµî
(()x)

	)

299 
	#uißÕha
(
x
Ë
	`ißÕha
(()x)

	)

300 
	#uisxdigô
(
x
Ë
	`isxdigô
(()x)

	)

301 
	#uißscii
(
x
Ë
	`ißscii
(()x)

	)

302 
	#ui•röt
(
x
Ë
	`i•röt
(()x)

	)

	@main.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"fûe_ö˛.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"backíd.h
"

6 
	~"simul_efun.h
"

7 
	~"bö¨õs.h
"

8 
	~"maö.h
"

9 
	~"ŸabÀ.h
"

10 
	~"comm.h
"

11 
	~"compûî.h
"

12 
	~"p‹t.h
"

13 
	~"md.h
"

14 
	~"maö.h
"

15 
	~"compûe_fûe.h
"

16 
	~"sockë_efuns.h
"

17 
	~"ma°î.h
"

19 
p‹t_def_t
 
	gexã∫Æ_p‹t
[5];

21 
	ge_Êag
 = 0;

22 
	gt_Êag
 = 0;

23 
	gcomp_Êag
 = 0;

24 
	gmax_co°
;

25 
	gtime_to_sw≠
;

26 
	gtime_to_˛ón_up
;

27 *
	gdeÁu…_Áû_mesßge
;

28 
	gboŸ_time
;

29 
	gmax_¨øy_size
;

30 
	gmax_buf„r_size
;

31 
	gmax_°rög_Àngth
;

32 
	gª£rved_size
;

33 *
	gª£rved_¨ó
;

34 *
	gmud_lib
;

36 
	gc⁄°s
[
NUM_CONSTS
];

38 #i‚de‡
NO_IP_DEMON


39 
	gno_ù_dem⁄
 = 0;

40 
öô_addr_£rvî
();

43 #ifde‡
SIGNAL_FUNC_TAKES_INT


44 
	#SIGPROT
 
	`PROT
(())

	)

45 
	#PSIG
(
z
Ëz 
	`P1
(, 
sig
)

	)

47 
	#SIGPROT
 
	`PROT
(())

	)

48 
	#PSIG
(
z
Ë
	`z
()

	)

51 
CDECL
 
sig_Âe
 
	gSIGPROT
;

52 
CDECL
 
sig_˛d
 
	gSIGPROT
;

54 #ifde‡
TRAP_CRASHES


55 
CDECL
 
sig_u§1
 
	gSIGPROT
;

56 
CDECL
 
sig_u§2
 
	gSIGPROT
;

57 
CDECL
 
sig_ãrm
 
	gSIGPROT
;

58 
CDECL
 
sig_öt
 
	gSIGPROT
;

60 #i‚de‡
DEBUG


61 
CDECL
 
sig_hup
 
	gSIGPROT
,

62 
CDECL
 
sig_abπ
 
	gSIGPROT
,

63 
CDECL
 
sig_£gv
 
	gSIGPROT
,

64 
CDECL
 
sig_ûl
 
	gSIGPROT
,

65 
CDECL
 
sig_bus
 
	gSIGPROT
,

66 
CDECL
 
sig_iŸ
 
	gSIGPROT
;

70 #ifde‡
DEBUG_MACRO


74 
	gdebug_Àvñ
 = 0;

77 
maö
 
	$P2
(, 
¨gc
, **, 
¨gv
)

79 
time_t
 
tm
;

80 
i
, 
√w_mudlib
 = 0, 
gŸ_deÁu…s
 = 0;

81 *
p
;

82 
vîsi⁄_buf
[80];

84 
dèbÀsize
;

86 
îr‹_c⁄ãxt_t
 
ec⁄
;

88 #ifde‡
PROTO_TZSET


89 
	`tz£t
();

92 #ifde‡
INCL_LOCALE_H


93 
	`£éoˇÀ
(
LC_ALL
, "");

96 #i‡!
	`deföed
(
__SASC
Ë&& (deföed(
AMITCP
Ë|| deföed(
AS225
))

97 
	`amiga_socköô
();

98 
	`©exô
(
amiga_sockexô
);

100 #ifde‡
WRAPPEDMALLOC


101 
	`wøµedmÆloc_öô
();

103 #ifde‡
DEBUGMALLOC


104 
	`MDöô
();

107 #i‡(
	`deföed
(
PROFILING
Ë&& !deföed(
PROFILE_ON
Ë&& deföed(
HAS_MONCONTROL
))

108 
	`m⁄c⁄åﬁ
(0);

110 #ifde‡
USE_TZSET


111 
	`tz£t
();

113 
boŸ_time
 = 
	`gë_cuºít_time
();

115 
c⁄°0
.
ty≥
 = 
T_NUMBER
;

116 
c⁄°0
.
u
.
numbî
 = 0;

117 
c⁄°1
.
ty≥
 = 
T_NUMBER
;

118 
c⁄°1
.
u
.
numbî
 = 1;

121 
c⁄°0u
.
ty≥
 = 
T_NUMBER
;

122 
c⁄°0u
.
subty≥
 = 
T_UNDEFINED
;

123 
c⁄°0u
.
u
.
numbî
 = 0;

125 
Áke_¥og
.
¥ogøm_size
 = 0;

130 
p
 = (*Ë&
i
;

131 *
p
 = -10;

132 i‡(
	`EXTRACT_UCHAR
(
p
) != 0x100 - 10) {

133 
	`Ârötf
(
°dîr
, "Bad definition of EXTRACT_UCHAR() in interpret.h.\n");

134 
	`exô
(-1);

141 
p
 = (*Ë&
i
;

142 (Ë
	`EXTRACT_UCHAR
(
p
++);

143 i‡((
p
 - (*Ë&
i
) != 1) {

144 
	`Ârötf
(
°dîr
, "EXTRACT_UCHAR() in interpret.hÉvaluates itsárgument moreÅhan once.\n");

145 
	`exô
(-1);

151 i‡(
CFG_LIVING_HASH_SIZE
 != 4 && CFG_LIVING_HASH_SIZE != 16 &&

152 
CFG_LIVING_HASH_SIZE
 != 64 && CFG_LIVING_HASH_SIZE != 256 &&

153 
CFG_LIVING_HASH_SIZE
 != 1024 && CFG_LIVING_HASH_SIZE != 4096) {

154 
	`Ârötf
(
°dîr
, "CFG_LIVING_HASH_SIZE in options.h must be one of 4, 16, 64, 256, 1024, 4096, ...\n");

155 
	`exô
(-1);

158 #ifde‡
RAND


159 
	`§™d
(
	`gë_cuºít_time
());

161 #ifde‡
DRAND48


162 
	`§™d48
(
	`gë_cuºít_time
());

164 #ifde‡
RANDOM


165 
	`§™dom
(
	`gë_cuºít_time
());

167 
	`Ârötf
(
°dîr
, "Warning:ÇoÑandomÇumber generator specified!\n");

171 
cuºít_time
 = 
	`gë_cuºít_time
();

175 
	`öô_u£c_˛ock
();

179 
gŸ_deÁu…s
 = 0;

180 
i
 = 1; (ò< 
¨gc
Ë&& !
gŸ_deÁu…s
; i++) {

181 i‡(
¨gv
[
i
][0] != '-') {

182 
	`£t_deÁu…s
(
¨gv
[
i
]);

183 
gŸ_deÁu…s
 = 1;

186 
	`gë_vîsi⁄
(
vîsi⁄_buf
);

187 i‡(!
gŸ_deÁu…s
) {

188 
	`Ârötf
(
°dîr
, "%†f‹ %s.\n", 
vîsi⁄_buf
, 
ARCH
);

189 
	`Ârötf
(
°dîr
, "You must specifyÅhe configuration filenameásánárgument.\n");

190 
	`exô
(-1);

193 
	`¥ötf
("Initializing internalÅables....\n");

194 
	`öô_°rögs
();

195 
	`öô_ŸabÀ
();

196 
	`öô_idítifõrs
();

197 
	`öô_loˇls
();

209 i‡(
dèbÀsize
 > 
FD_SETSIZE
) {

210 
	`Ârötf
(
°dîr
, "Warning: File descriptorÑequirementsÉxceed system capacity!\n");

211 
	`Ârötf
(
°dîr
, " ConfigurationÉxceeds system capacity by %d descriptor(s).\n",

212 
dèbÀsize
 - 
FD_SETSIZE
);

214 #ifde‡
HAS_SETDTABLESIZE


223 i‡(
	`gëdèbÀsize
(Ë< 
dèbÀsize
)

224 i‡(
	`£tdèbÀsize
(
dèbÀsize
) < dtablesize) {

225 
	`Ârötf
(
°dîr
, "Warning: CouldÇotállocateÉnough file descriptors!\n");

226 
	`Ârötf
(
°dîr
, " setdtablesize() couldÇotállocate %d descriptor(s).\n",

227 
	`gëdèbÀsize
(Ë- 
dèbÀsize
);

232 
	`Ârötf
(
°dîr
, "%d file descriptors wereállocated, (%d wereÑequested).\n",

233 
	`gëdèbÀsize
(), 
dèbÀsize
);

236 
time_to_˛ón_up
 = 
TIME_TO_CLEAN_UP
;

237 
time_to_sw≠
 = 
TIME_TO_SWAP
;

238 
max_co°
 = 
MAX_COST
;

239 
ª£rved_size
 = 
RESERVED_SIZE
;

240 
max_¨øy_size
 = 
MAX_ARRAY_SIZE
;

241 
max_buf„r_size
 = 
MAX_BUFFER_SIZE
;

242 
max_°rög_Àngth
 = 
MAX_STRING_LENGTH
;

243 
mud_lib
 = (*Ë
MUD_LIB
;

244 
	`£t_öc_li°
(
INCLUDE_DIRS
);

245 i‡(
ª£rved_size
 > 0)

246 
ª£rved_¨ó
 = (*Ë
	`DMALLOC
(
ª£rved_size
, 
TAG_RESERVED
, "main.c:Ñeserved_area");

247 
i
 = 0; i <  
c⁄°s
 /  consts[0]; i++)

248 
c⁄°s
[
i
] = 
	`exp
(-i / 900.0);

249 
	`ª£t_machöe
(1);

255 
i
 = 1; i < 
¨gc
; i++) {

256 i‡(
¨gv
[
i
][0] != '-')

258 
¨gv
[
i
][1]) {

260 i‡(
¨gv
[
i
][2]) {

261 
Õc_¥edef_t
 *
tmp
 = 
	`ALLOCATE
÷pc_¥edef_t, 
TAG_PREDEFINES
,

263 
tmp
->
Êag
 = 
¨gv
[
i
] + 2;

264 
tmp
->
√xt
 = 
Õc_¥edefs
;

265 
Õc_¥edefs
 = 
tmp
;

268 
	`Ârötf
(
°dîr
, "IŒegÆ fœg sy¡ax: %s\n", 
¨gv
[
i
]);

269 
	`exô
(-1);

271 
no_ù_dem⁄
++;

273 #ifde‡
YYDEBUG


275 
yydebug
 = 1;

279 
mud_lib
 = 
	`Æloc_c°rög
(
¨gv
[
i
] + 2, "mudlib dir");

280 i‡(
	`chdú
(
mud_lib
) == -1) {

281 
	`Ârötf
(
°dîr
, "Bad mudlib dúe˘‹y: %s\n", 
mud_lib
);

282 
	`exô
(-1);

284 
√w_mudlib
 = 1;

288 i‡(!
√w_mudlib
 && 
	`chdú
(
mud_lib
) == -1) {

289 
	`Ârötf
(
°dîr
, "Bad mudlib dúe˘‹y: %s\n", 
mud_lib
);

290 
	`exô
(-1);

292 
	`time
(&
tm
);

293 
	`debug_mesßge
("----------------------------------------------------------------------------\n%†(%sË°¨tög u∞⁄ %†- %s\n\n", 
MUD_NAME
, 
vîsi⁄_buf
, 
ARCH
, 
	`˘ime
(&
tm
));

295 #ifde‡
BINARIES


296 
	`öô_bö¨õs
(
¨gc
, 
¨gv
);

298 #ifde‡
LPC_TO_C


299 
	`öô_Õc_to_c
();

301 
	`add_¥edeföes
();

302 #ifde‡
WIN32


303 
	`_tz£t
();

306 #i‚de‡
NO_IP_DEMON


307 i‡(!
no_ù_dem⁄
 && 
ADDR_SERVER_IP
)

308 
	`öô_addr_£rvî
(
ADDR_SERVER_IP
, 
ADDR_SERVER_PORT
);

311 
evÆ_co°
 = 
max_co°
;

313 
	`ßve_c⁄ãxt
(&
ec⁄
);

314 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

315 
	`debug_mesßge
("The simul_efun (%s)ánd master (%s) objects must beÜoadable.\n",

316 
SIMUL_EFUN
, 
MASTER_FILE
);

317 
	`exô
(-1);

319 
	`öô_simul_efun
(
SIMUL_EFUN
);

320 
	`öô_ma°î
();

322 
	`p›_c⁄ãxt
(&
ec⁄
);

324 
i
 = 1; i < 
¨gc
; i++) {

325 i‡(
¨gv
[
i
][0] != '-') {

331 
¨gv
[
i
][1]) {

338 
	`ßve_c⁄ãxt
(&
ec⁄
);

339 i‡(
	`SETJMP
(
ec⁄
.
c⁄ãxt
)) {

340 
	`debug_mesßge
("Eº‹ whûêˇŒög ma°î::Êag(\"%s\"),áb‹tög ...\n", 
¨gv
[
i
] + 2);

341 
	`exô
(-1);

343 
	`push_c⁄°™t_°rög
(
¨gv
[
i
] + 2);

344 
	`≠∂y_ma°î_ob
(
APPLY_FLAG
, 1);

345 i‡(
MudOS_is_beög_shut_down
) {

346 
	`debug_mesßge
("Shutdown by master object.\n");

347 
	`exô
(0);

349 
	`p›_c⁄ãxt
(&
ec⁄
);

352 
e_Êag
++;

355 
exã∫Æ_p‹t
[0].
p‹t
 = 
	`©oi
(
¨gv
[
i
] + 2);

358 #ifde‡
DEBUG_MACRO


359 i‡(
¨gv
[
i
][2])

360 
	`debug_Àvñ_£t
(&
¨gv
[
i
][2]);

362 
debug_Àvñ
 |
DBG_d_Êag
;

364 
	`debug_mesßge
("Driver must be compiled with DEBUG_MACRO onÅo use -d.\n");

368 
comp_Êag
++;

371 
t_Êag
++;

374 
	`debug_mesßge
("Unknow¿Êag: %s\n", 
¨gv
[
i
]);

375 
	`exô
(-1);

379 i‡(
MudOS_is_beög_shut_down
)

380 
	`exô
(1);

381 i‡(*(
DEFAULT_FAIL_MESSAGE
)) {

382 
buf
[8192];

384 
	`°r˝y
(
buf
, 
DEFAULT_FAIL_MESSAGE
);

385 
	`°rˇt
(
buf
, "\n");

386 
deÁu…_Áû_mesßge
 = 
	`make_sh¨ed_°rög
(
buf
);

388 
deÁu…_Áû_mesßge
 = "What?\n";

389 #ifde‡
PACKAGE_MUDLIB_STATS


390 
	`ª°‹e_°©_fûes
();

392 
	`¥ñﬂd_obje˘s
(
e_Êag
);

393 #ifde‡
SIGFPE


394 
	`sig«l
(
SIGFPE
, 
sig_Âe
);

396 #ifde‡
TRAP_CRASHES


397 #ifde‡
SIGUSR1


398 
	`sig«l
(
SIGUSR1
, 
sig_u§1
);

400 #ifde‡
SIGUSR2


401 
	`sig«l
(
SIGUSR2
, 
sig_u§2
);

403 
	`sig«l
(
SIGTERM
, 
sig_ãrm
);

404 
	`sig«l
(
SIGINT
, 
sig_öt
);

405 #i‚de‡
DEBUG


406 #i‡
	`deföed
(
SIGABRT
Ë&& !deföed(
LATTICE
)

407 
	`sig«l
(
SIGABRT
, 
sig_abπ
);

409 #ifde‡
SIGIOT


410 
	`sig«l
(
SIGIOT
, 
sig_iŸ
);

412 #ifde‡
SIGHUP


413 
	`sig«l
(
SIGHUP
, 
sig_hup
);

415 #ifde‡
SIGBUS


416 
	`sig«l
(
SIGBUS
, 
sig_bus
);

418 #i‚de‡
LATTICE


419 
	`sig«l
(
SIGSEGV
, 
sig_£gv
);

420 
	`sig«l
(
SIGILL
, 
sig_ûl
);

424 #i‚de‡
WIN32


425 #ifde‡
USE_BSD_SIGNALS


426 
	`sig«l
(
SIGCHLD
, 
sig_˛d
);

428 
	`sig«l
(
SIGCLD
, 
sig_˛d
);

431 
	`backíd
();

433 
	}
}

435 #ifde‡
DEBUGMALLOC


436 *
öt_°rög_c›y
 
	$P2
(*, 
°r
, *, 
desc
)

438 *
öt_°rög_c›y
 
	$P1
(*, 
°r
)

441 *
p
;

442 
Àn
;

444 
	`DEBUG_CHECK
(!
°r
, "Null stringÖassedÅo string_copy.\n");

445 
Àn
 = 
	`°æí
(
°r
);

446 i‡(
Àn
 > 
max_°rög_Àngth
) {

447 
Àn
 = 
max_°rög_Àngth
;

448 
p
 = 
	`√w_°rög
(
Àn
, 
desc
);

449 (Ë
	`°∫˝y
(
p
, 
°r
, 
Àn
);

450 
p
[
Àn
] = '\0';

452 
p
 = 
	`√w_°rög
(
Àn
, 
desc
);

453 (Ë
	`°∫˝y
(
p
, 
°r
, 
Àn
 + 1);

455  
p
;

456 
	}
}

458 #ifde‡
DEBUGMALLOC


459 *
öt_°rög_u∆ök
 
	$P2
(*, 
°r
, *, 
desc
)

461 *
öt_°rög_u∆ök
 
	$P1
(*, 
°r
)

464 
mÆloc_block_t
 *
mbt
, *
√wmbt
;

466 
mbt
 = ((
mÆloc_block_t
 *)
°r
) - 1;

467 
mbt
->
ªf
--;

469 i‡(
mbt
->
size
 =
USHRT_MAX
) {

470 
l
 = 
	`°æí
(
°r
 + 
USHRT_MAX
) + USHRT_MAX;

472 
√wmbt
 = (
mÆloc_block_t
 *)
	`DXALLOC
(
l
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, 
desc
);

473 
	`mem˝y
((*)(
√wmbt
 + 1), (*)(
mbt
 + 1), 
l
+1);

474 
√wmbt
->
size
 = 
USHRT_MAX
;

475 
	`ADD_NEW_STRING
(
USHRT_MAX
, (
mÆloc_block_t
));

477 
√wmbt
 = (
mÆloc_block_t
 *)
	`DXALLOC
(
mbt
->
size
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, 
desc
);

478 
	`mem˝y
((*)(
√wmbt
 + 1), (*)(
mbt
 + 1), mbt->
size
+1);

479 
√wmbt
->
size
 = 
mbt
->size;

480 
	`ADD_NEW_STRING
(
mbt
->
size
, (
mÆloc_block_t
));

482 
√wmbt
->
ªf
 = 1;

483 
CHECK_STRING_STATS
;

485  (*)(
√wmbt
 + 1);

486 
	}
}

488 
FILE
 *
	gdebug_mesßge_Â
 = 0;

490 
debug_mesßge
 
	$P1V
(*, 
fmt
)

492 
deb_buf
[100];

493 *
deb
 = 
deb_buf
;

494 
va_li°
 
¨gs
;

495 
	`V_DCL
(*
fmt
);

497 i‡(!
debug_mesßge_Â
) {

501 i‡(
	`°æí
(
DEBUG_LOG_FILE
))

502 
	`•rötf
(
deb
, "%s/%s", 
LOG_DIR
, 
DEBUG_LOG_FILE
);

504 
	`•rötf
(
deb
, "%s/debug.log", 
LOG_DIR
);

505 *
deb
 == '/')

506 
deb
++;

507 
debug_mesßge_Â
 = 
	`f›í
(
deb
, "w");

508 i‡(!
debug_mesßge_Â
) {

510 
	`≥º‹
(
deb
);

511 
	`ab‹t
();

515 
	`V_START
(
¨gs
, 
fmt
);

516 
	`V_VAR
(*, 
fmt
, 
¨gs
);

517 
	`vÂrötf
(
debug_mesßge_Â
, 
fmt
, 
¨gs
);

518 
	`fÊush
(
debug_mesßge_Â
);

519 
	`va_íd
(
¨gs
);

520 
	`V_START
(
¨gs
, 
fmt
);

521 
	`V_VAR
(*, 
fmt
, 
¨gs
);

522 
	`vÂrötf
(
°dîr
, 
fmt
, 
¨gs
);

523 
	`fÊush
(
°dîr
);

524 
	`va_íd
(
¨gs
);

525 
	}
}

527 
	g¶ow_shut_down_to_do
 = 0;

529 *
xÆloc
 
	$P1
(, 
size
)

531 *
p
;

532 
goög_to_exô
;

534 i‡(
goög_to_exô
)

535 
	`exô
(3);

536 #ifde‡
DEBUG


537 i‡(
size
 == 0)

538 
	`Áèl
("TriedÅoállocate 0 bytes.\n");

540 
p
 = (*Ë
	`DMALLOC
(
size
, 
TAG_MISC
, "main.c: xalloc");

541 i‡(
p
 == 0) {

542 i‡(
ª£rved_¨ó
) {

543 
	`FREE
(
ª£rved_¨ó
);

544 
p
 = "Temporarily out of MEMORY. FreeingÑeserve.\n";

545 
	`wrôe
(1, 
p
, 
	`°æí
(p));

546 
ª£rved_¨ó
 = 0;

547 
¶ow_shut_down_to_do
 = 6;

548  
	`xÆloc
(
size
);

550 
goög_to_exô
 = 1;

551 
	`Áèl
("Totally out of MEMORY.\n");

553  
p
;

554 
	}
}

556 
CDECL
 
	$PSIG
(
sig_˛d
)

558 #i‚de‡
WIN32


559 
°©us
;

560 #ifde‡
USE_BSD_SIGNALS


561 
	`waô3
(&
°©us
, 
WNOHANG
, 
NULL
) > 0)

564 
	`waô
(&
°©us
);

565 
	`sig«l
(
SIGCLD
, 
sig_˛d
);

568 
	}
}

571 
CDECL
 
	$PSIG
(
sig_Âe
)

573 
	`sig«l
(
SIGFPE
, 
sig_Âe
);

574 
	}
}

576 #ifde‡
TRAP_CRASHES


583 
CDECL
 
	$PSIG
(
sig_u§1
)

585 
	`push_c⁄°™t_°rög
("Host machine shutting down");

586 
	`push_undeföed
();

587 
	`push_undeföed
();

588 
	`≠∂y_ma°î_ob
(
APPLY_CRASH
, 3);

589 
	`debug_mesßge
("Received SIGUSR1, callingÉxit(-1)\n");

590 
	`exô
(-1);

591 
	}
}

594 
CDECL
 
	$PSIG
(
sig_u§2
)

596 
evÆ_co°
 = 1;

597 
	}
}

603 
CDECL
 
	$PSIG
(
sig_ãrm
)

605 
	`Áèl
("ProcessÅerminated");

606 
	}
}

608 
CDECL
 
	$PSIG
(
sig_öt
)

610 
	`Áèl
("Process interrupted");

611 
	}
}

613 #i‚de‡
DEBUG


614 
CDECL
 
	$PSIG
(
sig_£gv
)

616 
	`Áèl
("Segmentation fault");

617 
	}
}

619 
CDECL
 
	$PSIG
(
sig_bus
)

621 
	`Áèl
("BusÉrror");

622 
	}
}

624 
CDECL
 
	$PSIG
(
sig_ûl
)

626 
	`Áèl
("Illegal instruction");

627 
	}
}

629 
CDECL
 
	$PSIG
(
sig_hup
)

631 
	`Áèl
("Hangup!");

632 
	}
}

634 
CDECL
 
	$PSIG
(
sig_abπ
)

636 
	`Áèl
("Aborted");

637 
	}
}

639 
CDECL
 
	$PSIG
(
sig_iŸ
)

641 
	`Áèl
("Aborted(IOT)");

642 
	}
}

	@main.h

1 #i‚de‡
MAIN_H


2 
	#MAIN_H


	)

4 
	~"Õc_ö˛.h
"

10 
	#PORT_UNDEFINED
 0

	)

11 
	#PORT_TELNET
 1

	)

12 
	#PORT_BINARY
 2

	)

13 
	#PORT_ASCII
 3

	)

14 
	#PORT_MUD
 4

	)

17 
	mköd
;

18 
	mp‹t
;

19 
	mfd
;

20 #ifde‡
F_NETWORK_STATS


21 
	mö_∑ckës
;

22 
	mö_vﬁume
;

23 
	mout_∑ckës
;

24 
	mout_vﬁume
;

26 } 
	tp‹t_def_t
;

28 
p‹t_def_t
 
exã∫Æ_p‹t
[5];

29 #ifde‡
PACKAGE_EXTERNAL


30 *
exã∫Æ_cmd
[
NUM_EXTERNAL_CMDS
];

33 
t_Êag
;

34 
comp_Êag
;

35 
time_to_sw≠
;

36 
time_to_˛ón_up
;

37 *
deÁu…_Áû_mesßge
;

38 
boŸ_time
;

39 
max_co°
;

40 
max_¨øy_size
;

41 
max_buf„r_size
;

42 
max_°rög_Àngth
;

43 *
ª£rved_¨ó
;

44 
c⁄°s
[];

45 
¶ow_shut_down_to_do
;

47 
CDECL
 
debug_mesßge
 
PROT1V
(*);

	@make_func.h

1 #i‚de‡
MAKE_FUNC_H


2 
	#MAKE_FUNC_H


	)

4 
	#MAX_FUNC
 2048

	)

6 
	#VOID
 1

	)

7 
	#INT
 2

	)

8 
	#STRING
 3

	)

9 
	#OBJECT
 4

	)

10 
	#MAPPING
 5

	)

11 
	#MIXED
 6

	)

12 
	#UNKNOWN
 7

	)

13 
	#FLOAT
 8

	)

14 
	#FUNCTION
 9

	)

15 
	#BUFFER
 10

	)

17 
num_buff
;

18 
›_code
, 
efun_code
, 
efun1_code
;

19 *
›î_codes
[
MAX_FUNC
];

20 *
efun_codes
[
MAX_FUNC
], *
efun1_codes
[MAX_FUNC];

21 *
efun_«mes
[
MAX_FUNC
], *
efun1_«mes
[MAX_FUNC];

22 *
key
[
MAX_FUNC
], *
buf
[MAX_FUNC];

24 
¨g_ty≥s
[400], 
œ°_cuºít_ty≥
;

26 *
˘y≥
 
PROT
(());

27 *
ëy≥
 
PROT
(());

	@make_func.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

67 
	#EDIT_SOURCE


	)

68 
	#NO_OPCODES


	)

69 
	~"°d.h
"

70 
	~"make_func.h
"

71 
	~"Àx.h
"

72 
	~"¥ïro˚ss.h
"

73 
	~"edô_sour˚.h
"

75 #ifde‡
WIN32


76 
	#MSDOS


	)

77 
	~<¥o˚ss.h
>

80 
mf_Áèl
(*);

82 
	gnum_buff
 = 0;

83 
	g›_code
, 
	gefun_code
, 
	gefun1_code
;

84 *
	g›î_codes
[
MAX_FUNC
];

85 *
	gefun_codes
[
MAX_FUNC
], *
	gefun1_codes
[MAX_FUNC];

86 *
	gefun_«mes
[
MAX_FUNC
], *
	gefun1_«mes
[MAX_FUNC];

87 *
	gkey
[
MAX_FUNC
], *
	gbuf
[MAX_FUNC];

89 
	gmö_¨g
 = -1, 
	glimô_max
 = 0;

95 
	g¨g_ty≥s
[400], 
	gœ°_cuºít_ty≥
;

101 
	gcuº_¨g_ty≥s
[40], 
	gcuº_¨g_ty≥_size
;

103 
	sty≥
 {

104 *
	m«me
;

105 
	mnum
;

106 } 
	gty≥s
[] = {

107 { "void", 
VOID
 },

108 { "öt", 
INT
 },

109 { "°rög", 
STRING
 },

110 { "obje˘", 
OBJECT
 },

111 { "m≠pög", 
MAPPING
 },

112 { "mixed", 
MIXED
 },

113 { "unknown", 
UNKNOWN
 },

114 { "Êﬂt", 
FLOAT
},

115 { "fun˘i⁄", 
FUNCTION
},

116 { "buf„r", 
BUFFER
}

119 
	#NELEMS
(
¨r
Ë(áº / áº[0])

	)

123 #i‚de‡
YY_NULLPTR


124 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

125 
	#YY_NULLPTR
 
nuŒ±r


	)

127 
	#YY_NULLPTR
 0

	)

132 #ifde‡
YYERROR_VERBOSE


133 #unde‡
YYERROR_VERBOSE


134 
	#YYERROR_VERBOSE
 1

	)

136 
	#YYERROR_VERBOSE
 0

	)

141 #i‚de‡
YY_YY_Y_TAB_H_INCLUDED


142 
	#YY_YY_Y_TAB_H_INCLUDED


	)

144 #i‚de‡
YYDEBUG


145 
	#YYDEBUG
 0

	)

147 #i‡
YYDEBUG


148 
yydebug
;

152 #i‚de‡
YYTOKENTYPE


153 
	#YYTOKENTYPE


	)

154 
	eyytokíty≥


156 
	mID
 = 258,

157 
	mNUM
 = 259,

158 
	mDEFAULT
 = 260,

159 
	mOPERATOR
 = 261

163 
	#ID
 258

	)

164 
	#NUM
 259

	)

165 
	#DEFAULT
 260

	)

166 
	#OPERATOR
 261

	)

169 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


170 
YYSTYPE
 
	tYYSTYPE
;

171 
	uYYSTYPE


175 
	mnumbî
;

176 *
	m°rög
;

180 
	#YYSTYPE_IS_TRIVIAL
 1

	)

181 
	#YYSTYPE_IS_DECLARED
 1

	)

185 
YYSTYPE
 
yylvÆ
;

187 
yy∑r£
 ();

199 #ifde‡
YYTYPE_UINT8


200 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

202 
	tyyty≥_uöt8
;

205 #ifde‡
YYTYPE_INT8


206 
YYTYPE_INT8
 
	tyyty≥_öt8
;

208 sig√d 
	tyyty≥_öt8
;

211 #ifde‡
YYTYPE_UINT16


212 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

214 
	tyyty≥_uöt16
;

217 #ifde‡
YYTYPE_INT16


218 
YYTYPE_INT16
 
	tyyty≥_öt16
;

220 
	tyyty≥_öt16
;

223 #i‚de‡
YYSIZE_T


224 #ifde‡
__SIZE_TYPE__


225 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

226 #ñi‡
deföed
 
size_t


227 
	#YYSIZE_T
 
size_t


	)

228 #ñi‡! 
deföed
 
YYSIZE_T


229 
	~<°ddef.h
>

230 
	#YYSIZE_T
 
size_t


	)

232 
	#YYSIZE_T
 

	)

236 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

238 #i‚de‡
YY_


239 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

240 #i‡
ENABLE_NLS


241 
	~<liböé.h
>

242 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

245 #i‚de‡
YY_


246 
	#YY_
(
Msgid
Ë
	)
Msgid

250 #i‚de‡
YY_ATTRIBUTE


251 #i‡(
deföed
 
__GNUC__
 \

252 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

253 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

254 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

256 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

260 #i‚de‡
YY_ATTRIBUTE_PURE


261 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

264 #i‚de‡
YY_ATTRIBUTE_UNUSED


265 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

268 #i‡!
deföed
 
_N‹ëu∫
 \

269 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

270 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

271 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

273 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

278 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


279 
	#YYUSE
(
E
Ë((Ë(E))

	)

281 
	#YYUSE
(
E
Ë

	)

284 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


286 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

287 
	`_Pøgma
 ("GCC diagnosticÖush") \

288 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

289 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

290 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

291 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

293 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

295 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


296 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

297 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

299 #i‚de‡
YY_INITIAL_VALUE


300 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

304 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


308 #ifde‡
YYSTACK_USE_ALLOCA


309 #i‡
YYSTACK_USE_ALLOCA


310 #ifde‡
__GNUC__


311 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

312 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


313 
	~<Æloˇ.h
>

314 #ñi‡
deföed
 
_AIX


315 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

316 #ñi‡
deföed
 
_MSC_VER


317 
	~<mÆloc.h
>

318 
	#Æloˇ
 
_Æloˇ


	)

320 
	#YYSTACK_ALLOC
 
Æloˇ


	)

321 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


322 
	~<°dlib.h
>

324 #i‚de‡
EXIT_SUCCESS


325 
	#EXIT_SUCCESS
 0

	)

332 #ifde‡
YYSTACK_ALLOC


334 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

335 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


340 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

343 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

344 
	#YYSTACK_FREE
 
YYFREE


	)

345 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


346 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

348 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

349 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

350 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

351 
	~<°dlib.h
>

352 #i‚de‡
EXIT_SUCCESS


353 
	#EXIT_SUCCESS
 0

	)

356 #i‚de‡
YYMALLOC


357 
	#YYMALLOC
 
mÆloc


	)

358 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


359 *
mÆloc
 (
YYSIZE_T
);

362 #i‚de‡
YYFREE


363 
	#YYFREE
 
‰ì


	)

364 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


365 
‰ì
 (*);

372 #i‡(! 
deföed
 
yyovîÊow
 \

373 && (! 
deföed
 
	g__˝lu•lus
 \

374 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

377 
	uyyÆloc


379 
yyty≥_öt16
 
	myyss_Æloc
;

380 
YYSTYPE
 
	myyvs_Æloc
;

384 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

388 
	#YYSTACK_BYTES
(
N
) \

389 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

390 + 
YYSTACK_GAP_MAXIMUM
)

	)

392 
	#YYCOPY_NEEDED
 1

	)

399 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

402 
YYSIZE_T
 
yy√wbyãs
; \

403 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

404 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

405 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

406 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

408 0)

	)

412 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

415 #i‚de‡
YYCOPY


416 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

417 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

418 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

420 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

423 
YYSIZE_T
 
yyi
; \

424 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

425 (
D°
)[
yyi
] = (
Src
)[yyi]; \

427 0)

	)

433 
	#YYFINAL
 2

	)

435 
	#YYLAST
 29

	)

438 
	#YYNTOKENS
 15

	)

440 
	#YYNNTS
 15

	)

442 
	#YYNRULES
 26

	)

444 
	#YYNSTATES
 40

	)

448 
	#YYUNDEFTOK
 2

	)

449 
	#YYMAXUTOK
 261

	)

451 
	#YYTRANSLATE
(
YYX
) \

452 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

456 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

487 #i‡
YYDEBUG


489 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

497 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

500 c⁄° *c⁄° 
	gyyäame
[] =

506 "¨g_ty≥", "ty≥l", 
YY_NULLPTR


510 #ifde‡
YYPRINT


513 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

520 
	#YYPACT_NINF
 -8

	)

522 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

523 (!!((
Yy°©e
Ë=(-8)))

	)

525 
	#YYTABLE_NINF
 -1

	)

527 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

528 0

	)

532 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

543 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

552 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

559 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

568 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

575 c⁄° 
yyty≥_öt8
 
	gyycheck
[] =

584 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

593 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

601 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

609 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

610 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

611 
	#YYEMPTY
 (-2)

	)

612 
	#YYEOF
 0

	)

614 
	#YYACCEPT
 
yyac˚±œb


	)

615 
	#YYABORT
 
yyab‹éab


	)

616 
	#YYERROR
 
yyîr‹œb


	)

619 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

621 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

623 i‡(
yych¨
 =
YYEMPTY
) \

625 
yych¨
 = (
Tokí
); \

626 
yylvÆ
 = (
VÆue
); \

627 
	`YYPOPSTACK
 (
yyÀn
); \

628 
yy°©e
 = *
yys•
; \

629 
yybackup
; \

633 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

634 
YYERROR
; \

636 0)

	)

639 
	#YYTERROR
 1

	)

640 
	#YYERRCODE
 256

	)

645 #i‡
YYDEBUG


647 #i‚de‡
YYFPRINTF


648 
	~<°dio.h
>

649 
	#YYFPRINTF
 
Ârötf


	)

652 
	#YYDPRINTF
(
Args
) \

654 i‡(
yydebug
) \

655 
YYFPRINTF
 
Args
; \

656 } 0)

	)

659 #i‚de‡
YY_LOCATION_PRINT


660 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

664 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

666 i‡(
yydebug
) \

668 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

669 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

670 
Ty≥
, 
VÆue
); \

671 
	`YYFPRINTF
 (
°dîr
, "\n"); \

673 } 0)

	)

681 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

683 
FILE
 *
yyo
 = 
yyouçut
;

684 
	`YYUSE
 (
yyo
);

685 i‡(!
yyvÆuï
)

687 #ifde‡
YYPRINT


688 i‡(
yyty≥
 < 
YYNTOKENS
)

689 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

691 
	`YYUSE
 (
yyty≥
);

692 
	}
}

700 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

702 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

703 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

705 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

706 
	`YYFPRINTF
 (
yyouçut
, ")");

707 
	}
}

715 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

717 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

718 ; 
yybŸtom
 <
yyt›
; yybottom++)

720 
yybŸ
 = *
yybŸtom
;

721 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

723 
	`YYFPRINTF
 (
°dîr
, "\n");

724 
	}
}

726 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

728 i‡(
yydebug
) \

729 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

730 } 0)

	)

738 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

740 
yy o
 = 
yyæöe
[
yyruÀ
];

741 
yyƒhs
 = 
yyr2
[
yyruÀ
];

742 
yyi
;

743 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

744 
yyruÀ
 - 1, 
yy o
);

746 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

748 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

749 
	`yy_symbﬁ_¥öt
 (
°dîr
,

750 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

751 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

753 
	`YYFPRINTF
 (
°dîr
, "\n");

755 
	}
}

757 
	#YY_REDUCE_PRINT
(
RuÀ
) \

759 i‡(
yydebug
) \

760 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

761 } 0)

	)

765 
	gyydebug
;

767 
	#YYDPRINTF
(
Args
)

	)

768 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

769 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

770 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

775 #i‚de‡
YYINITDEPTH


776 
	#YYINITDEPTH
 200

	)

786 #i‚de‡
YYMAXDEPTH


787 
	#YYMAXDEPTH
 10000

	)

791 #i‡
YYERROR_VERBOSE


793 #i‚de‡
yy°æí


794 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


795 
	#yy°æí
 
°æí


	)

798 
YYSIZE_T


799 
	$yy°æí
 (c⁄° *
yy°r
)

801 
YYSIZE_T
 
yyÀn
;

802 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

804  
yyÀn
;

805 
	}
}

809 #i‚de‡
yy°p˝y


810 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


811 
	#yy°p˝y
 
°p˝y


	)

816 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

818 *
yyd
 = 
yyde°
;

819 c⁄° *
yys
 = 
yy§c
;

821 (*
yyd
++ = *
yys
++) != '\0')

824  
yyd
 - 1;

825 
	}
}

829 #i‚de‡
yyäamîr


837 
YYSIZE_T


838 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

840 i‡(*
yy°r
 == '"')

842 
YYSIZE_T
 
yyn
 = 0;

843 c⁄° *
yyp
 = 
yy°r
;

846 *++
yyp
)

850 
do_nŸ_°rù_quŸes
;

853 i‡(*++
yyp
 != '\\')

854 
do_nŸ_°rù_quŸes
;

857 i‡(
yyªs
)

858 
yyªs
[
yyn
] = *
yyp
;

859 
yyn
++;

863 i‡(
yyªs
)

864 
yyªs
[
yyn
] = '\0';

865  
yyn
;

867 
do_nŸ_°rù_quŸes
: ;

870 i‡(! 
yyªs
)

871  
	`yy°æí
 (
yy°r
);

873  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

874 
	}
}

886 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

887 
yyty≥_öt16
 *
yys•
, 
yytokí
)

889 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

890 
YYSIZE_T
 
yysize
 = 
yysize0
;

891 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

893 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

895 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

898 
yycou¡
 = 0;

923 i‡(
yytokí
 !
YYEMPTY
)

925 
yyn
 = 
yy∑˘
[*
yys•
];

926 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

927 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

932 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

934 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

935 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

936 
yyx
;

938 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

939 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


940 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

942 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

944 
yycou¡
 = 1;

945 
yysize
 = 
yysize0
;

948 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

950 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

951 i‡(! (
yysize
 <
yysize1


952 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

954 
yysize
 = 
yysize1
;

960 
yycou¡
)

962 
	#YYCASE_
(
N
, 
S
) \

963 
N
: \

964 
yyf‹m©
 = 
S
; \

965 

	)

966 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

967 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

968 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

969 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

970 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

971 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

972 #unde‡
YYCASE_


976 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

977 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

979 
yysize
 = 
yysize1
;

982 i‡(*
yymsg_Æloc
 < 
yysize
)

984 *
yymsg_Æloc
 = 2 * 
yysize
;

985 i‡(! (
yysize
 <*
yymsg_Æloc


986 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

987 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

995 *
yyp
 = *
yymsg
;

996 
yyi
 = 0;

997 (*
yyp
 = *
yyf‹m©
) != '\0')

998 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1000 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1001 
yyf‹m©
 += 2;

1005 
yyp
++;

1006 
yyf‹m©
++;

1010 
	}
}

1018 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1020 
	`YYUSE
 (
yyvÆuï
);

1021 i‡(!
yymsg
)

1022 
yymsg
 = "Deleting";

1023 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1025 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1026 
	`YYUSE
 (
yyty≥
);

1027 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1028 
	}
}

1034 
	gyych¨
;

1037 
YYSTYPE
 
	gyylvÆ
;

1039 
	gyy√ºs
;

1047 
	$yy∑r£
 ()

1049 
yy°©e
;

1051 
yyîr°©us
;

1061 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1062 
yyty≥_öt16
 *
yyss
;

1063 
yyty≥_öt16
 *
yys•
;

1066 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1067 
YYSTYPE
 *
yyvs
;

1068 
YYSTYPE
 *
yyv•
;

1070 
YYSIZE_T
 
yy°acksize
;

1072 
yyn
;

1073 
yyªsu…
;

1075 
yytokí
 = 0;

1078 
YYSTYPE
 
yyvÆ
;

1080 #i‡
YYERROR_VERBOSE


1082 
yymsgbuf
[128];

1083 *
yymsg
 = 
yymsgbuf
;

1084 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1087 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1091 
yyÀn
 = 0;

1093 
yys•
 = 
yyss
 = 
yysß
;

1094 
yyv•
 = 
yyvs
 = 
yyvß
;

1095 
yy°acksize
 = 
YYINITDEPTH
;

1097 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1099 
yy°©e
 = 0;

1100 
yyîr°©us
 = 0;

1101 
yy√ºs
 = 0;

1102 
yych¨
 = 
YYEMPTY
;

1103 
yy£t°©e
;

1108 
yy√w°©e
:

1111 
yys•
++;

1113 
yy£t°©e
:

1114 *
yys•
 = 
yy°©e
;

1116 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1119 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1121 #ifde‡
yyovîÊow


1126 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1127 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1133 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1134 &
yyss1
, 
yysize
 *  (*
yys•
),

1135 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1136 &
yy°acksize
);

1138 
yyss
 = 
yyss1
;

1139 
yyvs
 = 
yyvs1
;

1142 #i‚de‡
YYSTACK_RELOCATE


1143 
yyexhau°edœb
;

1146 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1147 
yyexhau°edœb
;

1148 
yy°acksize
 *= 2;

1149 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1150 
yy°acksize
 = 
YYMAXDEPTH
;

1153 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1154 
yyÆloc
 *
yy±r
 =

1155 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1156 i‡(! 
yy±r
)

1157 
yyexhau°edœb
;

1158 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1159 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1160 #unde‡
YYSTACK_RELOCATE


1161 i‡(
yyss1
 !
yysß
)

1162 
	`YYSTACK_FREE
 (
yyss1
);

1167 
yys•
 = 
yyss
 + 
yysize
 - 1;

1168 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1170 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1171 (Ë
yy°acksize
));

1173 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1174 
YYABORT
;

1177 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1179 i‡(
yy°©e
 =
YYFINAL
)

1180 
YYACCEPT
;

1182 
yybackup
;

1187 
yybackup
:

1193 
yyn
 = 
yy∑˘
[
yy°©e
];

1194 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1195 
yydeÁu…
;

1200 i‡(
yych¨
 =
YYEMPTY
)

1202 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1203 
yych¨
 = 
	`yyÀx
 ();

1206 i‡(
yych¨
 <
YYEOF
)

1208 
yych¨
 = 
yytokí
 = 
YYEOF
;

1209 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1213 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1214 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1219 
yyn
 +
yytokí
;

1220 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1221 
yydeÁu…
;

1222 
yyn
 = 
yyèbÀ
[yyn];

1223 i‡(
yyn
 <= 0)

1225 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1226 
yyîæab
;

1227 
yyn
 = -yyn;

1228 
yyªdu˚
;

1233 i‡(
yyîr°©us
)

1234 
yyîr°©us
--;

1237 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1240 
yych¨
 = 
YYEMPTY
;

1242 
yy°©e
 = 
yyn
;

1243 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1244 *++
yyv•
 = 
yylvÆ
;

1245 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1247 
yy√w°©e
;

1253 
yydeÁu…
:

1254 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1255 i‡(
yyn
 == 0)

1256 
yyîæab
;

1257 
yyªdu˚
;

1263 
yyªdu˚
:

1265 
yyÀn
 = 
yyr2
[
yyn
];

1275 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1278 
	`YY_REDUCE_PRINT
 (
yyn
);

1279 
yyn
)

1284 
f_«me
[500],
c
;

1285 
i
 = 2;

1286 
	`•rötf
(
f_«me
, "F_%s", (
yyv•
[0].
°rög
));

1287 (
c
 = 
f_«me
[
i
])) {

1288 i‡(
	`i¶owî
(
c
)Ë
f_«me
[
i
++] = 
	`touµî
(c);

1289 
i
++;

1291 
›î_codes
[
›_code
] = (*Ë
	`mÆloc
(
i
+1);

1292 
	`°r˝y
(
›î_codes
[
›_code
], 
f_«me
);

1293 
	`‰ì
((
yyv•
[0].
°rög
));

1295 
›_code
++;

1302 { (
yyvÆ
.
°rög
) = ""; }

1308 { (
yyvÆ
.
°rög
)="DEFAULT_NONE"; }

1315 
buf
[40];

1316 
	`•rötf
(
buf
, "%i", (
yyv•
[0].
numbî
));

1317 (
yyvÆ
.
°rög
Ë
buf
;

1325 i‡(
	`°rcmp
((
yyv•
[0].
°rög
), "F__THIS_OBJECT"))

1326 
	`yyîr‹
("Illegal default");

1327 (
yyvÆ
.
°rög
) = "DEFAULT_THIS_OBJECT";

1335 
buff
[500];

1336 
f_«me
[500];

1337 
i
, 
Àn
;

1338 i‡(
mö_¨g
 == -1)

1339 
mö_¨g
 = (
yyv•
[-3].
numbî
);

1340 i‡(
mö_¨g
 > 4Ë
	`mf_Áèl
("min_arg > 4\n");

1341 i‡((
yyv•
[-5].
°rög
)[0] == '\0') {

1342 i‡(
	`°æí
((
yyv•
[-6].
°rög
)Ë+ 1 + 2 >  
f_«me
)

1343 
	`mf_Áèl
("AÜocal buffer wasÅoo small!(1)\n");

1344 
	`•rötf
(
f_«me
, "F_%s", (
yyv•
[-6].
°rög
));

1345 
Àn
 = 
	`°æí
(
f_«me
);

1346 
i
=0; i < 
Àn
; i++) {

1347 i‡(
	`i¶owî
(
f_«me
[
i
]))

1348 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

1350 i‡(
mö_¨g
 =1 && !
limô_max
 && (
yyv•
[-3].
numbî
) == 1) {

1351 
efun1_codes
[
efun1_code
] = (*Ë
	`mÆloc
(
Àn
 + 1);

1352 
	`°r˝y
(
efun1_codes
[
efun1_code
], 
f_«me
);

1353 
efun1_«mes
[
efun1_code
] = (*Ë
	`mÆloc
(
Àn
 - 1);

1354 
	`°r˝y
(
efun1_«mes
[
efun1_code
], (
yyv•
[-6].
°rög
));

1355 
efun1_code
++;

1357 
efun_codes
[
efun_code
] = (*Ë
	`mÆloc
(
Àn
 + 1);

1358 
	`°r˝y
(
efun_codes
[
efun_code
], 
f_«me
);

1359 
efun_«mes
[
efun_code
] = (*Ë
	`mÆloc
(
Àn
 - 1);

1360 
	`°r˝y
(
efun_«mes
[
efun_code
], (
yyv•
[-6].
°rög
));

1361 
efun_code
++;

1364 i‡(
	`°æí
((
yyv•
[-5].
°rög
)Ë+ 1 + 17 >  
f_«me
)

1365 
	`mf_Áèl
("AÜocal buffer wasÅoo small(2)!\n");

1366 
	`•rötf
(
f_«me
, "F_%†| F_ALIAS_FLAG", (
yyv•
[-5].
°rög
));

1367 
Àn
 = 
	`°æí
(
f_«me
);

1368 
i
=0; i < 
Àn
; i++) {

1369 i‡(
	`i¶owî
(
f_«me
[
i
]))

1370 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

1372 
	`‰ì
((
yyv•
[-5].
°rög
));

1374 
i
=0; i < 
œ°_cuºít_ty≥
; i++) {

1375 
j
;

1376 
j
 = 0; j+
i
<
œ°_cuºít_ty≥
 && j < 
cuº_¨g_ty≥_size
; j++)

1378 i‡(
cuº_¨g_ty≥s
[
j
] !
¨g_ty≥s
[
i
+j])

1381 i‡(
j
 =
cuº_¨g_ty≥_size
)

1384 i‡(
i
 =
œ°_cuºít_ty≥
) {

1385 
j
;

1386 
j
=0; j < 
cuº_¨g_ty≥_size
; j++) {

1387 
¨g_ty≥s
[
œ°_cuºít_ty≥
++] = 
cuº_¨g_ty≥s
[
j
];

1388 i‡(
œ°_cuºít_ty≥
 =
	`NELEMS
(
¨g_ty≥s
))

1389 
	`yyîr‹
("Array 'arg_types' isÅoo small");

1392 i‡(!
	`°rcmp
((
yyv•
[-6].
°rög
), "ˇŒ_Ÿhî"Ë&& !
	`lookup_deföe
("CAST_CALL_OTHERS")) {

1393 (
yyv•
[-7].
numbî
Ë
MIXED
;

1395 
	`•rötf
(
buff
, "{\"%s\",%s,0,0,%d,%d,%s,%s,%s,%s,%s,%d,%s},\n",

1396 (
yyv•
[-6].
°rög
), 
f_«me
, 
mö_¨g
, 
limô_max
 ? -1 : (yyv•[-3].
numbî
),

1397 (
yyv•
[-7].
numbî
Ë!
VOID
 ? 
	`˘y≥
((yyvsp[-7].number)) : "TYPE_NOVALUE",

1398 
	`ëy≥
(0),Éty≥(1),Éty≥(2),Éty≥(3), 
i
, (
yyv•
[-2].
°rög
));

1399 i‡(
	`°æí
(
buff
) >  buff)

1400 
	`mf_Áèl
("Local buffer overwritten !\n");

1402 
key
[
num_buff
] = (
yyv•
[-6].
°rög
);

1403 
buf
[
num_buff
] = (*Ë
	`mÆloc
(
	`°æí
(
buff
) + 1);

1404 
	`°r˝y
(
buf
[
num_buff
], 
buff
);

1405 
num_buff
++;

1406 
mö_¨g
 = -1;

1407 
limô_max
 = 0;

1408 
cuº_¨g_ty≥_size
 = 0;

1415 { (
yyvÆ
.
numbî
Ë(
yyv•
[-1].number) | 0x10000; }

1422 
i
 = 
	`NELEMS
(
ty≥s
);

1423 (
yyvÆ
.
numbî
) = 0;

1424 
i
--){

1425 i‡(
	`°rcmp
((
yyv•
[0].
°rög
), 
ty≥s
[
i
].
«me
) == 0) {

1426 (
yyvÆ
.
numbî
Ë
ty≥s
[
i
].
num
;

1430 i‡(!(
yyvÆ
.
numbî
)) {

1431 
buf
[256];

1432 
	`•rötf
(
buf
, "InvÆidÅy≥: %s", (
yyv•
[0].
°rög
));

1433 
	`yyîr‹
(
buf
);

1435 
	`‰ì
((
yyv•
[0].
°rög
));

1442 { (
yyvÆ
.
numbî
) = 0; }

1448 { (
yyvÆ
.
numbî
Ë1; i‡((
yyv•
[0].numbî)Ë
mö_¨g
 = 0; }

1454 { (
yyvÆ
.
numbî
Ë(
yyv•
[-2].numbîË+ 1; i‡((yyv•[0].numbî)Ë
mö_¨g
 = (yyval.number) - 1; }

1461 (
yyvÆ
.
numbî
Ë(
yyv•
[0].number);

1462 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = 0;

1463 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
))

1464 
	`yyîr‹
("Too manyárguments");

1472 i‡((
yyv•
[0].
numbî
Ë!
VOID
) {

1473 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = (
yyv•
[0].
numbî
);

1474 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
))

1475 
	`yyîr‹
("Too manyárguments");

1477 (
yyvÆ
.
numbî
Ë(
yyv•
[0].number);

1484 { (
yyvÆ
.
numbî
Ë((
yyv•
[0].numbîË=
VOID
 && 
mö_¨g
 == -1); }

1490 { (
yyvÆ
.
numbî
Ë(
mö_¨g
 =-1 && ((
yyv•
[-2].numbîË|| (yyv•[0].numbîË=
VOID
));}

1496 { (
yyvÆ
.
numbî
Ë
mö_¨g
 =-1 ; 
limô_max
 = 1; }

1515 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1517 
	`YYPOPSTACK
 (
yyÀn
);

1518 
yyÀn
 = 0;

1519 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1521 *++
yyv•
 = 
yyvÆ
;

1527 
yyn
 = 
yyr1
[yyn];

1529 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1530 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1531 
yy°©e
 = 
yyèbÀ
[yystate];

1533 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1535 
yy√w°©e
;

1541 
yyîæab
:

1544 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

1547 i‡(!
yyîr°©us
)

1549 ++
yy√ºs
;

1550 #i‡! 
YYERROR_VERBOSE


1551 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1553 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

1554 
yys•
, 
yytokí
)

	)

1556 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

1557 
yysy¡ax_îr‹_°©us
;

1558 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1559 i‡(
yysy¡ax_îr‹_°©us
 == 0)

1560 
yymsgp
 = 
yymsg
;

1561 i‡(
yysy¡ax_îr‹_°©us
 == 1)

1563 i‡(
yymsg
 !
yymsgbuf
)

1564 
	`YYSTACK_FREE
 (
yymsg
);

1565 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

1566 i‡(!
yymsg
)

1568 
yymsg
 = 
yymsgbuf
;

1569 
yymsg_Æloc
 =  
yymsgbuf
;

1570 
yysy¡ax_îr‹_°©us
 = 2;

1574 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

1575 
yymsgp
 = 
yymsg
;

1578 
	`yyîr‹
 (
yymsgp
);

1579 i‡(
yysy¡ax_îr‹_°©us
 == 2)

1580 
yyexhau°edœb
;

1582 #unde‡
YYSYNTAX_ERROR


1588 i‡(
yyîr°©us
 == 3)

1593 i‡(
yych¨
 <
YYEOF
)

1596 i‡(
yych¨
 =
YYEOF
)

1597 
YYABORT
;

1601 
	`yyde°ru˘
 ("Error: discarding",

1602 
yytokí
, &
yylvÆ
);

1603 
yych¨
 = 
YYEMPTY
;

1609 
yyîæab1
;

1615 
yyîr‹œb
:

1621 
yyîr‹œb
;

1625 
	`YYPOPSTACK
 (
yyÀn
);

1626 
yyÀn
 = 0;

1627 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1628 
yy°©e
 = *
yys•
;

1629 
yyîæab1
;

1635 
yyîæab1
:

1636 
yyîr°©us
 = 3;

1640 
yyn
 = 
yy∑˘
[
yy°©e
];

1641 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1643 
yyn
 +
YYTERROR
;

1644 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1646 
yyn
 = 
yyèbÀ
[yyn];

1647 i‡(0 < 
yyn
)

1653 i‡(
yys•
 =
yyss
)

1654 
YYABORT
;

1657 
	`yyde°ru˘
 ("Error:Öopping",

1658 
yy°os
[
yy°©e
], 
yyv•
);

1659 
	`YYPOPSTACK
 (1);

1660 
yy°©e
 = *
yys•
;

1661 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1664 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1665 *++
yyv•
 = 
yylvÆ
;

1666 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1670 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1672 
yy°©e
 = 
yyn
;

1673 
yy√w°©e
;

1679 
yyac˚±œb
:

1680 
yyªsu…
 = 0;

1681 
yyªtu∫
;

1686 
yyab‹éab
:

1687 
yyªsu…
 = 1;

1688 
yyªtu∫
;

1690 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


1694 
yyexhau°edœb
:

1695 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1696 
yyªsu…
 = 2;

1700 
yyªtu∫
:

1701 i‡(
yych¨
 !
YYEMPTY
)

1705 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1706 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1707 
yytokí
, &
yylvÆ
);

1711 
	`YYPOPSTACK
 (
yyÀn
);

1712 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1713 
yys•
 !
yyss
)

1715 
	`yyde°ru˘
 ("Cleanup:Öopping",

1716 
yy°os
[*
yys•
], 
yyv•
);

1717 
	`YYPOPSTACK
 (1);

1719 #i‚de‡
yyovîÊow


1720 i‡(
yyss
 !
yysß
)

1721 
	`YYSTACK_FREE
 (
yyss
);

1723 #i‡
YYERROR_VERBOSE


1724 i‡(
yymsg
 !
yymsgbuf
)

1725 
	`YYSTACK_FREE
 (
yymsg
);

1727  
yyªsu…
;

1728 
	}
}

1732 *
˘y≥
 
	$P1
(, 
n
)

1734 
buff
[100];

1735 *
p
 = (*)
NULL
;

1737 i‡(
n
 & 0x10000)

1738 
	`°r˝y
(
buff
, "TYPE_MOD_ARRAY|");

1740 
buff
[0] = '\0';

1741 
n
 &= ~0x10000;

1742 
n
) {

1743 
FLOAT
: 
p
 = "TYPE_REAL"; ;

1744 
FUNCTION
: 
p
 = "TYPE_FUNCTION"; ;

1745 
VOID
: 
p
 = "TYPE_VOID"; ;

1746 
STRING
: 
p
 = "TYPE_STRING"; ;

1747 
INT
: 
p
 = "TYPE_NUMBER"; ;

1748 
OBJECT
: 
p
 = "TYPE_OBJECT"; ;

1749 
MAPPING
: 
p
 = "TYPE_MAPPING"; ;

1750 
BUFFER
: 
p
 = "TYPE_BUFFER"; ;

1751 
MIXED
: 
p
 = "TYPE_ANY"; ;

1752 
UNKNOWN
: 
p
 = "TYPE_UNKNOWN"; ;

1753 : 
	`yyîr‹
("BadÅype!");

1755 
	`°rˇt
(
buff
, 
p
);

1756 i‡(
	`°æí
(
buff
) + 1 >  buff)

1757 
	`mf_Áèl
("Local buffer overwritten in ctype()");

1758  
buff
;

1759 
	}
}

1761 *
ëy≥1
 
	$P1
(, 
n
)

1763 i‡(
n
 & 0x10000)

1765 
n
) {

1766 
FLOAT
:

1768 
FUNCTION
:

1770 
INT
:

1772 
OBJECT
:

1774 
MAPPING
:

1776 
STRING
:

1778 
BUFFER
:

1780 
MIXED
:

1783 
	`yyîr‹
("IllegalÅype forárgument");

1786 
	}
}

1788 *
ëy≥
 
	$P1
(, 
n
)

1790 
i
;

1791 
loˇl_size
 = 100;

1792 *
buff
 = (*)
	`mÆloc
(
loˇl_size
);

1794 
i
=0; i < 
cuº_¨g_ty≥_size
; i++) {

1795 i‡(
n
 == 0)

1797 i‡(
cuº_¨g_ty≥s
[
i
] == 0)

1798 
n
--;

1800 i‡(
i
 =
cuº_¨g_ty≥_size
)

1802 
buff
[0] = '\0';

1803 ; 
cuº_¨g_ty≥s
[
i
] != 0; i++) {

1804 *
p
;

1805 i‡(
cuº_¨g_ty≥s
[
i
] =
VOID
)

1807 i‡(
buff
[0] != '\0')

1808 
	`°rˇt
(
buff
, "|");

1809 
p
 = 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]);

1814 i‡(
	`°æí
(
p
Ë+ såÀn(
buff
Ë+ 2 > 
loˇl_size
) {

1815 
	`Ârötf
(
°dîr
, "Buffer overflow!\n");

1816 
	`exô
(1);

1818 
	`°rˇt
(
buff
, 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]));

1820 i‡(!
	`°rcmp
(
buff
, ""))

1821 
	`°r˝y
(
buff
, "T_ANY");

1822  
buff
;

1823 
	}
}

1825 
idít
 
PROT
(());

1827 
	$yyÀx
() {

1828 
c
;

1831 
c
 = 
	`gëc
(
yyö
)){

1836 
cuºít_löe
++;

1840 
buff
[2048];

1841 
	`fgës
(
buff
, 2047, 
yyö
);

1842 
	`Ârötf
(
°dîr
, "C⁄figuøti⁄ÖrobÀm: %s\n", 
buff
);

1843 
	`exô
(-1);

1847 
löe
;

1849 
aBuf
[2048], 
‚ame
[2048];

1850 
	`fgës
(
aBuf
, 2047, 
yyö
);

1851 i‡(
	`ssˇnf
(
aBuf
, "%d \"%[^\"]\"", &
löe
, 
‚ame
)) {

1852 
cuºít_löe
 = 
löe
;

1853 i‡(
cuºít_fûe
Ë
	`‰ì
(current_file);

1854 
cuºít_fûe
 = (*)
	`mÆloc
(
	`°æí
(
‚ame
) + 1);

1855 
	`°r˝y
(
cuºít_fûe
, 
‚ame
);

1857 i‡(
	`ssˇnf
(
aBuf
, "%d", &
löe
)Ë
cuºít_löe
 =Üine;

1858 
cuºít_löe
++;

1861 
EOF
:

1862 
	`f˛o£
(
yyö
);

1865 i‡((
c
 >= '0' && c <= '9') || c == '-') {

1866 
v
;

1867 
√g
 = 0;

1868 
v
 = 0;

1869 i‡(
c
 == '-') {

1870 
√g
 = 1;

1871 
c
 = '0';

1874 
v
 = v * 10 + (
c
 - '0');

1875 
c
 = 
	`gëc
(
yyö
);

1876 } 
c
 >= '0' && c <= '9');

1877 
	`ungëc
(
c
, 
yyö
);

1878 
yylvÆ
.
numbî
 = (
√g
 ? -
v
 : v);

1879  
NUM
;

1881 i‡(
	`ißlunum
(
c
))

1882  
	`idít
(
c
);

1883  
c
;

1886 
	}
}

1888 
idít
 
	$P1
(, 
c
)

1890 
buff
[100];

1891 
Àn
;

1893 
Àn
 = 0; 
	`ißlunum
(
c
); c = 
	`gëc
(
yyö
)) {

1894 
buff
[
Àn
++] = 
c
;

1895 i‡(
Àn
 = 
buff
 - 1) {

1896 
	`yyîr‹
("TooÜong indentifier");

1900 ()
	`ungëc
(
c
, 
yyö
);

1901 
buff
[
Àn
] = '\0';

1902 i‡(!
	`°rcmp
(
buff
, "default"))

1903  
DEFAULT
;

1904 i‡(!
	`°rcmp
(
buff
, "operator"))

1905  
OPERATOR
;

1907 
yylvÆ
.
°rög
 = (*)
	`mÆloc
(
	`°æí
(
buff
)+1);

1908 
	`°r˝y
(
yylvÆ
.
°rög
, 
buff
);

1909  
ID
;

1910 
	}
}

	@make_func.y

2 
	#EDIT_SOURCE


	)

3 
	#NO_OPCODES


	)

4 
	~"°d.h
"

5 
	~"make_func.h
"

6 
	~"Àx.h
"

7 
	~"¥ïro˚ss.h
"

8 
	~"edô_sour˚.h
"

10 #ifde‡
WIN32


11 
	#MSDOS


	)

12 
	~<¥o˚ss.h
>

15 
mf_Áèl
(*);

17 
	gnum_buff
 = 0;

18 
	g›_code
, 
	gefun_code
, 
	gefun1_code
;

19 *
	g›î_codes
[
MAX_FUNC
];

20 *
	gefun_codes
[
MAX_FUNC
], *
	gefun1_codes
[MAX_FUNC];

21 *
	gefun_«mes
[
MAX_FUNC
], *
	gefun1_«mes
[MAX_FUNC];

22 *
	gkey
[
MAX_FUNC
], *
	gbuf
[MAX_FUNC];

24 
	gmö_¨g
 = -1, 
	glimô_max
 = 0;

30 
	g¨g_ty≥s
[400], 
	gœ°_cuºít_ty≥
;

36 
	gcuº_¨g_ty≥s
[40], 
	gcuº_¨g_ty≥_size
;

38 
	sty≥
 {

39 *
	m«me
;

40 
	mnum
;

41 } 
	gty≥s
[] = {

42 { "void", 
VOID
 },

43 { "öt", 
INT
 },

44 { "°rög", 
STRING
 },

45 { "obje˘", 
OBJECT
 },

46 { "m≠pög", 
MAPPING
 },

47 { "mixed", 
MIXED
 },

48 { "unknown", 
UNKNOWN
 },

49 { "Êﬂt", 
FLOAT
},

50 { "fun˘i⁄", 
FUNCTION
},

51 { "buf„r", 
BUFFER
}

54 
	#NELEMS
(
¨r
Ë(áº / áº[0])

	)

58 
numbî
;

59 *
°rög
;

62 %
tokí
 
ID
 
NUM
 
DEFAULT
 
OPERATOR


64 %
ty≥
 <
numbî
>Åy≥ 
¨g_li°
 
basic
 
ty≥l
 
¨g_ty≥
 
ty≥l2
 
NUM


66 %
ty≥
 <
°rög
> 
ID
 
›ti⁄Æ_ID
 
›ti⁄Æ_deÁu…


68 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

70 
•ecs
: | s≥c†
•ec
 ;

72 
•ec
: 
›î©‹
 | 
func
;

74 
›î©‹
: 
OPERATOR
 
›_li°
 ';' ;

76 
›_li°
: 
›
 | op_list ',' op ;

78 
›
: 
ID


80 
f_«me
[500],
c
;

81 
i
 = 2;

82 
	`•rötf
(
f_«me
, "F_%s", 
$1
);

83 (
c
 = 
f_«me
[
i
])) {

84 i‡(
	`i¶owî
(
c
)Ë
f_«me
[
i
++] = 
	`touµî
(c);

85 
i
++;

87 
›î_codes
[
›_code
] = (*Ë
	`mÆloc
(
i
+1);

88 
	`°r˝y
(
›î_codes
[
›_code
], 
f_«me
);

89 
	`‰ì
(
$1
);

91 
›_code
++;

94 
›ti⁄Æ_ID
: 
ID
 | { 
$$
 = ""; } ;

96 
›ti⁄Æ_deÁu…
: { 
$$
="DEFAULT_NONE"; }

97 | 
DEFAULT
 ':' 
NUM


99 
buf
[40];

100 
	`•rötf
(
buf
, "%i", 
$3
);

101 
$$
 = 
buf
;

103 | 
DEFAULT
 ':' 
ID


105 i‡(
	`°rcmp
(
$3
, "F__THIS_OBJECT"))

106 
	`yyîr‹
("Illegal default");

107 
$$
 = "DEFAULT_THIS_OBJECT";

110 
func
: 
ty≥
 
ID
 
›ti⁄Æ_ID
 '(' 
¨g_li°
 
›ti⁄Æ_deÁu…
 ')' ';'

112 
buff
[500];

113 
f_«me
[500];

114 
i
, 
Àn
;

115 i‡(
mö_¨g
 == -1)

116 
mö_¨g
 = 
$5
;

117 i‡(
mö_¨g
 > 4Ë
	`mf_Áèl
("min_arg > 4\n");

118 i‡(
$3
[0] == '\0') {

119 i‡(
	`°æí
(
$2
Ë+ 1 + 2 >  
f_«me
)

120 
	`mf_Áèl
("AÜocal buffer wasÅoo small!(1)\n");

121 
	`•rötf
(
f_«me
, "F_%s", 
$2
);

122 
Àn
 = 
	`°æí
(
f_«me
);

123 
i
=0; i < 
Àn
; i++) {

124 i‡(
	`i¶owî
(
f_«me
[
i
]))

125 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

127 i‡(
mö_¨g
 =1 && !
limô_max
 && 
$5
 == 1) {

128 
efun1_codes
[
efun1_code
] = (*Ë
	`mÆloc
(
Àn
 + 1);

129 
	`°r˝y
(
efun1_codes
[
efun1_code
], 
f_«me
);

130 
efun1_«mes
[
efun1_code
] = (*Ë
	`mÆloc
(
Àn
 - 1);

131 
	`°r˝y
(
efun1_«mes
[
efun1_code
], 
$2
);

132 
efun1_code
++;

134 
efun_codes
[
efun_code
] = (*Ë
	`mÆloc
(
Àn
 + 1);

135 
	`°r˝y
(
efun_codes
[
efun_code
], 
f_«me
);

136 
efun_«mes
[
efun_code
] = (*Ë
	`mÆloc
(
Àn
 - 1);

137 
	`°r˝y
(
efun_«mes
[
efun_code
], 
$2
);

138 
efun_code
++;

141 i‡(
	`°æí
(
$3
Ë+ 1 + 17 >  
f_«me
)

142 
	`mf_Áèl
("AÜocal buffer wasÅoo small(2)!\n");

143 
	`•rötf
(
f_«me
, "F_%†| F_ALIAS_FLAG", 
$3
);

144 
Àn
 = 
	`°æí
(
f_«me
);

145 
i
=0; i < 
Àn
; i++) {

146 i‡(
	`i¶owî
(
f_«me
[
i
]))

147 
f_«me
[
i
] = 
	`touµî
(f_name[i]);

149 
	`‰ì
(
$3
);

151 
i
=0; i < 
œ°_cuºít_ty≥
; i++) {

152 
j
;

153 
j
 = 0; j+
i
<
œ°_cuºít_ty≥
 && j < 
cuº_¨g_ty≥_size
; j++)

155 i‡(
cuº_¨g_ty≥s
[
j
] !
¨g_ty≥s
[
i
+j])

158 i‡(
j
 =
cuº_¨g_ty≥_size
)

161 i‡(
i
 =
œ°_cuºít_ty≥
) {

162 
j
;

163 
j
=0; j < 
cuº_¨g_ty≥_size
; j++) {

164 
¨g_ty≥s
[
œ°_cuºít_ty≥
++] = 
cuº_¨g_ty≥s
[
j
];

165 i‡(
œ°_cuºít_ty≥
 =
	`NELEMS
(
¨g_ty≥s
))

166 
	`yyîr‹
("Array 'arg_types' isÅoo small");

169 i‡(!
	`°rcmp
(
$2
, "ˇŒ_Ÿhî"Ë&& !
	`lookup_deföe
("CAST_CALL_OTHERS")) {

170 
$1
 = 
MIXED
;

172 
	`•rötf
(
buff
, "{\"%s\",%s,0,0,%d,%d,%s,%s,%s,%s,%s,%d,%s},\n",

173 
$2
, 
f_«me
, 
mö_¨g
, 
limô_max
 ? -1 : 
$5
,

174 
$1
 !
VOID
 ? 
	`˘y≥
($1) : "TYPE_NOVALUE",

175 
	`ëy≥
(0),Éty≥(1),Éty≥(2),Éty≥(3), 
i
, 
$6
);

176 i‡(
	`°æí
(
buff
) >  buff)

177 
	`mf_Áèl
("Local buffer overwritten !\n");

179 
key
[
num_buff
] = 
$2
;

180 
buf
[
num_buff
] = (*Ë
	`mÆloc
(
	`°æí
(
buff
) + 1);

181 
	`°r˝y
(
buf
[
num_buff
], 
buff
);

182 
num_buff
++;

183 
mö_¨g
 = -1;

184 
limô_max
 = 0;

185 
cuº_¨g_ty≥_size
 = 0;

188 
ty≥
: 
basic
 | basi¯'*' { 
$$
 = 
$1
 | 0x10000; };

190 
basic
: 
ID


192 
i
 = 
	`NELEMS
(
ty≥s
);

193 
$$
 = 0;

194 
i
--){

195 i‡(
	`°rcmp
(
$1
, 
ty≥s
[
i
].
«me
) == 0) {

196 
$$
 = 
ty≥s
[
i
].
num
;

200 i‡(!
$$
) {

201 
buf
[256];

202 
	`•rötf
(
buf
, "InvÆidÅy≥: %s", 
$1
);

203 
	`yyîr‹
(
buf
);

205 
	`‰ì
(
$1
);

208 
¨g_li°
: { 
$$
 = 0; }

209 | 
ty≥l2
 { 
$$
 = 1; i‡(
$1
Ë
mö_¨g
 = 0; }

210 | 
¨g_li°
 ',' 
ty≥l2
 { 
$$
 = 
$1
 + 1; i‡(
$3
Ë
mö_¨g
 = $$ - 1; } ;

212 
ty≥l2
: 
ty≥l


214 
$$
 = 
$1
;

215 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = 0;

216 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
))

217 
	`yyîr‹
("Too manyárguments");

220 
¨g_ty≥
: 
ty≥


222 i‡(
$1
 !
VOID
) {

223 
cuº_¨g_ty≥s
[
cuº_¨g_ty≥_size
++] = 
$1
;

224 i‡(
cuº_¨g_ty≥_size
 =
	`NELEMS
(
cuº_¨g_ty≥s
))

225 
	`yyîr‹
("Too manyárguments");

227 
$$
 = 
$1
;

230 
ty≥l
: 
¨g_ty≥
 { 
$$
 = (
$1
 =
VOID
 && 
mö_¨g
 == -1); }

231 | 
ty≥l
 '|' 
¨g_ty≥
 { 
$$
 = (
mö_¨g
 =-1 && (
$1
 || 
$3
 =
VOID
));}

232 | '.' '.' '.' { 
$$
 = 
mö_¨g
 =-1 ; 
limô_max
 = 1; } ;

234 
	}
%%

236 *
˘y≥
 
	$P1
(, 
n
)

238 
buff
[100];

239 *
p
 = (*)
NULL
;

241 i‡(
n
 & 0x10000)

242 
	`°r˝y
(
buff
, "TYPE_MOD_ARRAY|");

244 
buff
[0] = '\0';

245 
n
 &= ~0x10000;

246 
n
) {

247 
FLOAT
: 
p
 = "TYPE_REAL"; ;

248 
FUNCTION
: 
p
 = "TYPE_FUNCTION"; ;

249 
VOID
: 
p
 = "TYPE_VOID"; ;

250 
STRING
: 
p
 = "TYPE_STRING"; ;

251 
INT
: 
p
 = "TYPE_NUMBER"; ;

252 
OBJECT
: 
p
 = "TYPE_OBJECT"; ;

253 
MAPPING
: 
p
 = "TYPE_MAPPING"; ;

254 
BUFFER
: 
p
 = "TYPE_BUFFER"; ;

255 
MIXED
: 
p
 = "TYPE_ANY"; ;

256 
UNKNOWN
: 
p
 = "TYPE_UNKNOWN"; ;

257 : 
	`yyîr‹
("BadÅype!");

259 
	`°rˇt
(
buff
, 
p
);

260 i‡(
	`°æí
(
buff
) + 1 >  buff)

261 
	`mf_Áèl
("Local buffer overwritten in ctype()");

262  
buff
;

263 
	}
}

265 *
ëy≥1
 
	$P1
(, 
n
)

267 i‡(
n
 & 0x10000)

269 
n
) {

270 
FLOAT
:

272 
FUNCTION
:

274 
INT
:

276 
OBJECT
:

278 
MAPPING
:

280 
STRING
:

282 
BUFFER
:

284 
MIXED
:

287 
	`yyîr‹
("IllegalÅype forárgument");

290 
	}
}

292 *
ëy≥
 
	$P1
(, 
n
)

294 
i
;

295 
loˇl_size
 = 100;

296 *
buff
 = (*)
	`mÆloc
(
loˇl_size
);

298 
i
=0; i < 
cuº_¨g_ty≥_size
; i++) {

299 i‡(
n
 == 0)

301 i‡(
cuº_¨g_ty≥s
[
i
] == 0)

302 
n
--;

304 i‡(
i
 =
cuº_¨g_ty≥_size
)

306 
buff
[0] = '\0';

307 ; 
cuº_¨g_ty≥s
[
i
] != 0; i++) {

308 *
p
;

309 i‡(
cuº_¨g_ty≥s
[
i
] =
VOID
)

311 i‡(
buff
[0] != '\0')

312 
	`°rˇt
(
buff
, "|");

313 
p
 = 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]);

318 i‡(
	`°æí
(
p
Ë+ såÀn(
buff
Ë+ 2 > 
loˇl_size
) {

319 
	`Ârötf
(
°dîr
, "Buffer overflow!\n");

320 
	`exô
(1);

322 
	`°rˇt
(
buff
, 
	`ëy≥1
(
cuº_¨g_ty≥s
[
i
]));

324 i‡(!
	`°rcmp
(
buff
, ""))

325 
	`°r˝y
(
buff
, "T_ANY");

326  
buff
;

327 
	}
}

329 
idít
 
PROT
(());

331 
	$yyÀx
() {

332 
c
;

335 
c
 = 
	`gëc
(
yyö
)){

340 
cuºít_löe
++;

344 
buff
[2048];

345 
	`fgës
(
buff
, 2047, 
yyö
);

346 
	`Ârötf
(
°dîr
, "C⁄figuøti⁄ÖrobÀm: %s\n", 
buff
);

347 
	`exô
(-1);

351 
löe
;

353 
aBuf
[2048], 
‚ame
[2048];

354 
	`fgës
(
aBuf
, 2047, 
yyö
);

355 i‡(
	`ssˇnf
(
aBuf
, "%d \"%[^\"]\"", &
löe
, 
‚ame
)) {

356 
cuºít_löe
 = 
löe
;

357 i‡(
cuºít_fûe
Ë
	`‰ì
(current_file);

358 
cuºít_fûe
 = (*)
	`mÆloc
(
	`°æí
(
‚ame
) + 1);

359 
	`°r˝y
(
cuºít_fûe
, 
‚ame
);

361 i‡(
	`ssˇnf
(
aBuf
, "%d", &
löe
)Ë
cuºít_löe
 =Üine;

362 
cuºít_löe
++;

365 
EOF
:

366 
	`f˛o£
(
yyö
);

369 i‡((
c
 >= '0' && c <= '9') || c == '-') {

370 
v
;

371 
√g
 = 0;

372 
v
 = 0;

373 i‡(
c
 == '-') {

374 
√g
 = 1;

375 
c
 = '0';

378 
v
 = v * 10 + (
c
 - '0');

379 
c
 = 
	`gëc
(
yyö
);

380 } 
c
 >= '0' && c <= '9');

381 
	`ungëc
(
c
, 
yyö
);

382 
yylvÆ
.
numbî
 = (
√g
 ? -
v
 : v);

383  
NUM
;

385 i‡(
	`ißlunum
(
c
))

386  
	`idít
(
c
);

387  
c
;

390 
	}
}

392 
idít
 
	$P1
(, 
c
)

394 
buff
[100];

395 
Àn
;

397 
Àn
 = 0; 
	`ißlunum
(
c
); c = 
	`gëc
(
yyö
)) {

398 
buff
[
Àn
++] = 
c
;

399 i‡(
Àn
 = 
buff
 - 1) {

400 
	`yyîr‹
("TooÜong indentifier");

404 ()
	`ungëc
(
c
, 
yyö
);

405 
buff
[
Àn
] = '\0';

406 i‡(!
	`°rcmp
(
buff
, "default"))

407  
DEFAULT
;

408 i‡(!
	`°rcmp
(
buff
, "operator"))

409  
OPERATOR
;

411 
yylvÆ
.
°rög
 = (*)
	`mÆloc
(
	`°æí
(
buff
)+1);

412 
	`°r˝y
(
yylvÆ
.
°rög
, 
buff
);

413  
ID
;

414 
	}
}

	@make_malloc.c

4 
	#NO_SOCKETS


	)

5 
	#NO_OPCODES


	)

6 
	~"°d.h
"

8 #i‡!
deföed
(
THE_MALLOC
Ë&& !deföed(
THE_WRAPPER
)

9 
	$maö
() {

10 
	`puts
("MemoryÖackageánd/or malloc wrapper incorrectly specified in options.h\n");

11 
	}
}

13 
	$maö
() {

14 
	`u∆ök
("malloc.c");

15 
	`u∆ök
("mallocwrapper.c");

17 
	}
}

	@malloc.c

1 
	#IN_MALLOC_WRAPPER


	)

2 
	#NO_OPCODES


	)

3 
	~"°d.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"simuœã.h
"

6 
	~"comm.h
"

8 #ifde‡
DO_MSTATS


9 
show_m°©s
 
	$P2
(
outbuf„r_t
 *, 
ob
, *, 
s
) {

10 
	`outbuf_add
(
ob
, "No malloc statisticsávailable with SYSMALLOC\n");

11 
	}
}

	@malloc.h

1 #i‚de‡
MY_MALLOC_H


2 
	#MY_MALLOC_H


	)

7 #i‡
deföed
(
SYSMALLOC
) || \

8 (
deföed
(
SMALLOC
Ë&& deföed(
SBRK_OK
)) || \

9 
	$deföed
(
BSDMALLOC
)

10 
	#MALLOC
(
x
Ë
	`mÆloc
(x)

	)

11 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

12 
	#REALLOC
(
x
,
y
Ë
	`ªÆloc
(x,y)

	)

13 
	#CALLOC
(
x
,
y
Ë
	`ˇŒoc
(x,y)

	)

18 #i‡
	`deföed
(
SMALLOC
Ë&& !deföed(
SYSMALLOC
)

19 #ifde‡
SBRK_OK


20 
	#smÆloc_mÆloc
 
mÆloc


	)

21 
	#smÆloc_‰ì
 
‰ì


	)

22 
	#smÆloc_ªÆloc
 
ªÆloc


	)

23 
	#smÆloc_ˇŒoc
 
ˇŒoc


	)

25 
	#MALLOC
(
x
Ë
	`smÆloc_mÆloc
(x)

	)

26 
	#FREE
(
x
Ë
	`smÆloc_‰ì
(x)

	)

27 
	#REALLOC
(
x
,
y
Ë
	`smÆloc_ªÆloc
(x,y)

	)

28 
	#CALLOC
(
x
,
y
Ë
	`smÆloc_ˇŒoc
(x,y)

	)

33 #i‡
	`deföed
(
BSDMALLOC
Ë&& !deföed(
SYSMALLOC
)

34 
	#bsdmÆloc_mÆloc
 
mÆloc


	)

35 
	#bsdmÆloc_‰ì
 
‰ì


	)

36 
	#bsdmÆloc_ªÆloc
 
ªÆloc


	)

37 
	#bsdmÆloc_ˇŒoc
 
ˇŒoc


	)

40 
	#DXALLOC
(
x
,
èg
,
desc
Ë
	`xÆloc
(x)

	)

41 
	#DMALLOC
(
x
,
èg
,
desc
Ë
	`MALLOC
(x)

	)

42 
	#DREALLOC
(
x
,
y
,
èg
,
desc
Ë
	`REALLOC
(x,y)

	)

43 
	#DCALLOC
(
x
,
y
,
èg
,
desc
Ë
	`CALLOC
(x,y)

	)

	@malloc_incl.h

1 #i‚de‡
MALLOC_INCL_H


2 
	#MALLOC_INCL_H


	)

5 
	mªÆ_size
;

6 *
	mbuf„r
;

7 } 
	toutbuf„r_t
;

9 
outbuf_zîo
 
PROT
((
outbuf„r_t
 *));

10 
outbuf_add
 
PROT
((
outbuf„r_t
 *, *));

11 
outbuf_addch¨
 
PROT
((
outbuf„r_t
 *, ));

12 
CDECL
 
outbuf_addv
 
PROT2V
(
outbuf„r_t
 *, *);

13 
outbuf_fix
 
PROT
((
outbuf„r_t
 *));

14 
outbuf_push
 
PROT
((
outbuf„r_t
 *));

15 
outbuf_exãnd
 
PROT
((
outbuf„r_t
 *, ));

17 
	~"bsdmÆloc.h
"

18 
	~"smÆloc.h
"

19 
	~"wøµedmÆloc.h
"

20 
	~"debugmÆloc.h
"

22 #ifde‡
DEBUGMALLOC


24 
	#TAG_TEMPORARY
 (1 << 8)

	)

25 
	#TAG_PERMANENT
 (2 << 8)

	)

26 
	#TAG_COMPILER
 (3 << 8)

	)

27 
	#TAG_DATA
 (4 << 8)

	)

28 
	#TAG_MISC
 (5 << 8)

	)

29 
	#TAG_MARKED
 (1 << 12)

	)

31 
	#TAG_PROGRAM
 (
TAG_PERMANENT
 + 11)

	)

32 
	#TAG_CALL_OUT
 (
TAG_PERMANENT
 + 12)

	)

33 
	#TAG_INTERACTIVE
 (
TAG_PERMANENT
 + 13)

	)

34 
	#TAG_ED
 (
TAG_PERMANENT
 + 14)

	)

36 
	#TAG_INC_LIST
 (
TAG_PERMANENT
 + 16)

	)

37 
	#TAG_PERM_IDENT
 (
TAG_PERMANENT
 + 17)

	)

38 
	#TAG_IDENT_TABLE
 (
TAG_PERMANENT
 + 18)

	)

39 
	#TAG_RESERVED
 (
TAG_PERMANENT
 + 19)

	)

40 
	#TAG_MUDLIB_STATS
 (
TAG_PERMANENT
 + 20)

	)

41 
	#TAG_OBJECT
 (
TAG_PERMANENT
 + 21)

	)

42 
	#TAG_OBJ_TBL
 (
TAG_PERMANENT
 + 22)

	)

43 
	#TAG_CONFIG
 (
TAG_PERMANENT
 + 23)

	)

44 
	#TAG_SIMULS
 (
TAG_PERMANENT
 + 24)

	)

45 
	#TAG_SENTENCE
 (
TAG_PERMANENT
 + 25)

	)

46 
	#TAG_STR_TBL
 (
TAG_PERMANENT
 + 26)

	)

47 
	#TAG_SWAP
 (
TAG_PERMANENT
 + 27)

	)

48 
	#TAG_UID
 (
TAG_PERMANENT
 + 28)

	)

49 
	#TAG_OBJ_NAME
 (
TAG_PERMANENT
 + 29)

	)

50 
	#TAG_PREDEFINES
 (
TAG_PERMANENT
 + 30)

	)

51 
	#TAG_LINENUMBERS
 (
TAG_PERMANENT
 + 31)

	)

52 
	#TAG_LOCALS
 (
TAG_PERMANENT
 + 32)

	)

53 
	#TAG_LPC_OBJECT
 (
TAG_PERMANENT
 + 33)

	)

54 
	#TAG_USERS
 (
TAG_PERMANENT
 + 34)

	)

55 
	#TAG_DEBUGMALLOC
 (
TAG_PERMANENT
 + 35)

	)

56 
	#TAG_HEART_BEAT
 (
TAG_PERMANENT
 + 36)

	)

57 #ifde‡
PACKAGE_PARSER


58 
	#TAG_PARSER
 (
TAG_PERMANENT
 + 37)

	)

60 
	#TAG_INPUT_TO
 (
TAG_PERMANENT
 + 38)

	)

61 
	#TAG_SOCKETS
 (
TAG_PERMANENT
 + 39)

	)

62 #ifde‡
PACKAGE_DB


63 
	#TAG_DB
 (
TAG_PERMANENT
 + 40)

	)

65 
	#TAG_INTERPRETER
 (
TAG_PERMANENT
 + 41)

	)

67 
	#TAG_STRING
 (
TAG_DATA
 + 40)

	)

68 
	#TAG_MALLOC_STRING
 (
TAG_DATA
 + 41)

	)

69 
	#TAG_SHARED_STRING
 (
TAG_DATA
 + 42)

	)

70 
	#TAG_FUNP
 (
TAG_DATA
 + 43)

	)

71 
	#TAG_ARRAY
 (
TAG_DATA
 + 44)

	)

72 
	#TAG_MAPPING
 (
TAG_DATA
 + 45)

	)

73 
	#TAG_MAP_NODE_BLOCK
 (
TAG_DATA
 + 46)

	)

74 
	#TAG_MAP_TBL
 (
TAG_DATA
 + 47)

	)

75 
	#TAG_BUFFER
 (
TAG_DATA
 + 48)

	)

76 
	#TAG_CLASS
 (
TAG_DATA
 + 49)

	)

	@mallocwrapper.c

	@mallowrapper.c

	@mapping.c

3 
	~"°d.h
"

4 
	~"c⁄fig.h
"

5 
	~"Õc_ö˛.h
"

6 
	~"md.h
"

7 
	~"efun_¥Ÿos.h
"

9 
	gnum_m≠pögs
 = 0;

10 
	gtŸÆ_m≠pög_size
 = 0;

11 
	gtŸÆ_m≠pög_nodes
 = 0;

13 
m≠pög_node_t
 *
	glocked_m≠_nodes
 = 0;

38 
INLINE_STATIC
 
node_hash
 
	$P1
(
m≠pög_node_t
 *, 
mn
) {

39  
	`MAP_POINTER_HASH
(
mn
->
vÆues
[0].
u
.
numbî
);

40 
	}
}

42 
INLINE
 
growM≠
 
	$P1
(
m≠pög_t
 *, 
m
)

44 
ﬁdsize
 = 
m
->
èbÀ_size
 + 1;

45 
√wsize
 = 
ﬁdsize
 << 1;

46 
i
;

47 
m≠pög_node_t
 **
a
, **
b
, **
ñç
, *
ñt
;

49 i‡(
√wsize
 > 
MAX_TABLE_SIZE
)

52 
m
->
èbÀ
 = 
a
 = 
	`RESIZE
(m->èbÀ, 
√wsize
, 
m≠pög_node_t
 *, 
TAG_MAP_TBL
, "growMap");

53 i‡(!
a
) {

60 
m
->
unfûÀd
 = m->
èbÀ_size
;

64 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
 *Ë* 
ﬁdsize
;

65 
	`debug
(
m≠pög
,("m≠pög.c: growM≠Öå = %p, sizê%d\n", 
m
, 
√wsize
));

66 
m
->
unfûÀd
 = 
ﬁdsize
 * ()
FILL_PERCENT
 / ()100;

67 
m
->
èbÀ_size
 = 
√wsize
 - 1;

69 
	`mem£t
(
a
 +
ﬁdsize
, 0, oldsizê* (
m≠pög_node_t
 *));

70 
i
 = 
ﬁdsize
;

71 
a
--, 
i
--) {

72 i‡((
ñt
 = *
a
)) {

73 
ñç
 = 
a
, 
b
 =á + 
ﬁdsize
;

75 i‡(
	`node_hash
(
ñt
Ë& 
ﬁdsize
) {

76 *
ñç
 = 
ñt
->
√xt
;

77 i‡(!(
ñt
->
√xt
 = *
b
)Ë
m
->
unfûÀd
--;

78 *
b
 = 
ñt
;

79 
ñt
 = *
ñç
;

81 
ñt
 = *(
ñç
 = &ñt->
√xt
);

82 } 
ñt
);

83 i‡(!*
a
Ë
m
->
unfûÀd
++;

87 
	}
}

97 
INLINE
 
m≠pög_t
 *

98 
	$m≠Tøvî£
 (
m
, 
func
, 
exåa
)

99 
m≠pög_t
 *
m
;

100 (*
func
Ë
	`PROT
((
m≠pög_t
 *, 
m≠pög_node_t
 *, *));

101 *
exåa
;

103 
m≠pög_node_t
 *
ñt
, *
√…
;

104 
j
 = (Ë
m
->
èbÀ_size
;

106 
	`debug
(
m≠pög
,("m≠Tøvî£ %p\n", 
m
));

108 
ñt
 = 
m
->
èbÀ
[
j
];É…;É… = 
√…
) {

109 
√…
 = 
ñt
->
√xt
;

110 i‡((*
func
)(
m
, 
ñt
, 
exåa
))  m;

112 } 
j
--);

113  
m
;

114 
	}
}

118 
INLINE
 

119 
dóŒoc_m≠pög
 
	$P1
(
m≠pög_t
 *, 
m
)

121 
	`debug
(
m≠pög
,("m≠pög.c:á˘uÆ fªêo‡%p\n", 
m
));

122 
num_m≠pögs
--;

124 
j
 = 
m
->
èbÀ_size
, 
c
 = 
	`MAP_COUNT
(m);

125 
m≠pög_node_t
 *
ñt
, *
√…
, **
a
 = 
m
->
èbÀ
;

127 
tŸÆ_m≠pög_size
 -((
m≠pög_t
) +

128 (
m≠pög_node_t
 *Ë* (
j
+1) +

129 (
m≠pög_node_t
Ë* 
c
);

130 
tŸÆ_m≠pög_nodes
 -
c
;

131 #ifde‡
PACKAGE_MUDLIB_STATS


132 
	`add_¨øy_size
 (&
m
->
°©s
, - (
c
 << 1));

136 
ñt
 = 
a
[
j
];É…;É… = 
√…
) {

137 
√…
 = 
ñt
->
√xt
;

138 
	`‰ì_svÆue
(
ñt
->
vÆues
, "free_mapping");

139 
	`‰ì_node
(
m
, 
ñt
);

141 } 
j
--);

144 
	`debug
(
m≠pög
, ("in free_mapping: beforeÅable\n"));

145 
	`FREE
((*)
a
);

148 
	`debug
(
m≠pög
, ("in free_mapping:áfterÅable\n"));

149 
	`FREE
((*Ë
m
);

150 
	`debug
(
m≠pög
, ("in free_mapping:áfter m\n"));

151 
	`debug
(
m≠pög
,("mapping.c: free_mappingÉnd\n"));

152 
	}
}

154 
INLINE
 

155 
‰ì_m≠pög
 
	$P1
(
m≠pög_t
 *, 
m
)

157 
	`debug
(
m≠pög
,("m≠pög.c: fªe_m≠pög begö,Öå = %p\n", 
m
));

159 i‡(--
m
->
ªf
 > 0)

161 
	`dóŒoc_m≠pög
(
m
);

162 
	}
}

164 
m≠pög_node_t
 *
	g‰ì_nodes
 = 0;

165 
m≠pög_node_block_t
 *
	gm≠pög_node_blocks
 = 0;

167 #ifde‡
DEBUGMALLOC_EXTENSIONS


168 
	$m¨k_m≠pög_node_blocks
() {

169 
m≠pög_node_block_t
 *
mnb
 = 
m≠pög_node_blocks
;

171 
mnb
) {

172 
	`DO_MARK
(
mnb
, 
TAG_MAP_NODE_BLOCK
);

173 
mnb
 = mnb->
√xt
;

175 
	}
}

178 
m≠pög_node_t
 *
	$√w_m≠_node
() {

179 
m≠pög_node_block_t
 *
mnb
;

180 
m≠pög_node_t
 *
ªt
;

181 
i
;

183 i‡((
ªt
 = 
‰ì_nodes
)) {

184 
‰ì_nodes
 = 
ªt
->
√xt
;

186 
mnb
 = 
	`ALLOCATE
(
m≠pög_node_block_t
, 
TAG_MAP_NODE_BLOCK
, "new_map_node");

187 
mnb
->
√xt
 = 
m≠pög_node_blocks
;

188 
m≠pög_node_blocks
 = 
mnb
;

189 
mnb
->
nodes
[
MNB_SIZE
 - 1].
√xt
 = 0;

190 
i
 = 
MNB_SIZE
 - 1; i--; )

191 
mnb
->
nodes
[
i
].
√xt
 = &mnb->nodes[i+1];

192 
ªt
 = &
mnb
->
nodes
[0];

193 
‰ì_nodes
 = &
mnb
->
nodes
[1];

195  
ªt
;

196 
	}
}

198 
u∆ock_m≠pög
 
	$P1
(
m≠pög_t
 *, 
m
) {

199 
m≠pög_node_t
 **
mn
 = &
locked_m≠_nodes
;

200 
m≠pög_node_t
 *
tmp
;

202 *
mn
) {

203 i‡((*
mn
)->
vÆues
[0].
u
.
m≠
 =
m
) {

204 
	`‰ì_svÆue
((*
mn
)->
vÆues
 + 1, "free_locked_nodes");

206 
tmp
 = *
mn
;

207 *
mn
 = (*mn)->
√xt
;

209 
tmp
->
√xt
 = 
‰ì_nodes
;

210 
‰ì_nodes
 = 
tmp
;

212 
mn
 = &((*mn)->
√xt
);

214 
m
->
cou¡
 &~
MAP_LOCKED
;

215 
	}
}

217 
‰ì_node
 
	$P2
(
m≠pög_t
 *, 
m
, 
m≠pög_node_t
 *, 
mn
) {

218 i‡(
m
->
cou¡
 & 
MAP_LOCKED
) {

219 
mn
->
√xt
 = 
locked_m≠_nodes
;

220 
locked_m≠_nodes
 = 
mn
;

221 
mn
->
vÆues
[0].
u
.
m≠
 = 
m
;

223 
	`‰ì_svÆue
(
mn
->
vÆues
 + 1, "free_node");

224 
mn
->
√xt
 = 
‰ì_nodes
;

225 
‰ì_nodes
 = 
mn
;

227 
	}
}

236 
INLINE
 
m≠pög_t
 *

237 
Æloˇã_m≠pög
 
	$P1
(, 
n
)

239 
m≠pög_t
 *
√wm≠
;

240 
m≠pög_node_t
 **
a
;

242 i‡(
n
 > 
MAX_MAPPING_SIZE
)Ç = MAX_MAPPING_SIZE;

243 
√wm≠
 = 
	`ALLOCATE
(
m≠pög_t
, 
TAG_MAPPING
, "allocate_mapping: 1");

244 
	`debug
(
m≠pög
,("m≠pög.c:áŒoˇã_m≠pög begö,Çewm≠ = %p\n", 
√wm≠
));

245 i‡(
√wm≠
 =
NULL
)

246 
	`îr‹
("Allocate_mapping - out of memory.\n");

248 i‡(
n
 > 
MAP_HASH_TABLE_SIZE
) {

249 
n
 |=Ç >> 1;

250 
n
 |=Ç >> 2;

251 
n
 |=Ç >> 4;

252 i‡(
n
 & 0xff00)Ç |=Ç >> 8;

253 
√wm≠
->
èbÀ_size
 = 
n
++;

255 
√wm≠
->
èbÀ_size
 = (
n
 = 
MAP_HASH_TABLE_SIZE
) - 1;

257 
√wm≠
->
unfûÀd
 = 
n
 * ()
FILL_PERCENT
 /()100;

258 
a
 = 
√wm≠
->
èbÀ
 =

259 (
m≠pög_node_t
 **)
	`DXALLOC
(
n
 *= (mapping_node_t *),

260 
TAG_MAP_TBL
, "allocate_mapping: 3");

261 i‡(!
a
)

262 
	`îr‹
("Allocate_mapping 2 - out of memory.\n");

264 
	`mem£t
(
a
, 0, 
n
);

265 
tŸÆ_m≠pög_size
 +(
m≠pög_t
Ë+ 
n
;

266 
√wm≠
->
ªf
 = 1;

267 
√wm≠
->
cou¡
 = 0;

268 #ifde‡
PACKAGE_MUDLIB_STATS


269 i‡(
cuºít_obje˘
) {

270 
	`assign_°©s
 (&
√wm≠
->
°©s
, 
cuºít_obje˘
);

271 
	`add_¨øy_size
 (&
√wm≠
->
°©s
, 
n
 << 1);

273 
	`nuŒ_°©s
 (&
√wm≠
->
°©s
);

276 
num_m≠pögs
++;

277 
	`debug
(
m≠pög
,("mapping.c:állocate_mappingÉnd\n"));

278  
√wm≠
;

279 
	}
}

281 
INLINE
 
m≠pög_t
 *

282 
Æloˇã_m≠pög2
 
	$P2
(
¨øy_t
 *, 
¨r
, 
svÆue_t
 *, 
sv
)

284 
m≠pög_t
 *
√wm≠
;

285 
i
;

287 
√wm≠
 = 
	`Æloˇã_m≠pög
(
¨r
->
size
);

288 
	`push_ª„d_m≠pög
(
√wm≠
);

290 
i
 = 0; i < 
¨r
->
size
; i++) {

291 
svÆue_t
 *
svp
, *
ªt
;

293 
svp
 = 
	`föd_f‹_ö£π
(
√wm≠
, 
¨r
->
ôem
 + 
i
, 1);

294 i‡(
sv
->
ty≥
 =
T_FUNCTION
) {

295 
	`push_svÆue
(
¨r
->
ôem
 + 
i
);

296 
ªt
 = 
	`ˇŒ_fun˘i⁄_poöãr
(
sv
->
u
.
Â
, 1);

297 *
svp
 = *
ªt
;

298 
ªt
->
ty≥
 = 
T_NUMBER
;

300 
	`assign_svÆue_no_‰ì
(
svp
, 
sv
);

304 
•
--;

305  
√wm≠
;

306 
	}
}

308 
INLINE
 
m≠pög_t
 *

309 
mkm≠pög
 
	$P2
(
¨øy_t
 *, 
k
,áºay_à*, 
v
) {

310 
m≠pög_t
 *
√wm≠
;

311 
i
;

313 
√wm≠
 = 
	`Æloˇã_m≠pög
(
k
->
size
);

314 
i
 = 0; i < 
k
->
size
; i++) {

315 
svÆue_t
 *
svp
;

317 
svp
 = 
	`föd_f‹_ö£π
(
√wm≠
, 
k
->
ôem
 + 
i
, 1);

318 
	`assign_svÆue_no_‰ì
(
svp
, 
v
->
ôem
 + 
i
);

321  
√wm≠
;

322 
	}
}

328 
INLINE_STATIC
 
m≠pög_t
 *

329 
c›yM≠pög
 
	$P1
(
m≠pög_t
 *,
m
)

331 
m≠pög_t
 *
√wm≠
;

332 
k
 = 
m
->
èbÀ_size
;

333 
m≠pög_node_t
 *
ñt
, *
√…
, **
a
, **
b
 = 
m
->
èbÀ
, **
c
;

335 
√wm≠
 = 
	`ALLOCATE
(
m≠pög_t
, 
TAG_MAPPING
, "copy_mapping: 1");

336 i‡(
√wm≠
 =
NULL
Ë
	`îr‹
("copyMapping - out of memory.\n");

337 
√wm≠
->
èbÀ_size
 = 
k
++;

338 
√wm≠
->
unfûÀd
 = 
m
->unfilled;

339 
√wm≠
->
ªf
 = 1;

340 
c
 = 
√wm≠
->
èbÀ
 = 
	`CALLOCATE
(
k
, 
m≠pög_node_t
 *, 
TAG_MAP_TBL
, "copy_mapping: 2");

341 i‡(!
c
) {

342 
	`FREE
((*Ë
√wm≠
);

343 
	`îr‹
("copyMapping 2 - out of memory.\n");

345 
√wm≠
->
cou¡
 = 
m
->count;

346 
tŸÆ_m≠pög_nodes
 +
	`MAP_COUNT
(
m
);

347 
	`mem£t
(
c
, 0, 
k
 * (
m≠pög_node_t
 *));

348 
tŸÆ_m≠pög_size
 +((
m≠pög_t
) +

349 (
m≠pög_node_t
 *Ë* 
k
 +

350 (
m≠pög_node_t
Ë* 
	`MAP_COUNT
(
m
));

352 #ifde‡
PACKAGE_MUDLIB_STATS


353 i‡(
cuºít_obje˘
) {

354 
	`assign_°©s
 (&
√wm≠
->
°©s
, 
cuºít_obje˘
);

355 
	`add_¨øy_size
 (&
√wm≠
->
°©s
, 
	`MAP_COUNT
(
m
) << 1);

357 
	`nuŒ_°©s
 (&
√wm≠
->
°©s
);

359 
num_m≠pögs
++;

360 
k
--) {

361 i‡((
ñt
 = 
b
[
k
])) {

362 
a
 = 
c
 + 
k
;

364 
√…
 = 
	`√w_m≠_node
();

366 
	`assign_svÆue_no_‰ì
(
√…
->
vÆues
, 
ñt
->values);

367 
	`assign_svÆue_no_‰ì
(
√…
->
vÆues
 + 1, 
ñt
->values + 1);

368 
√…
->
√xt
 = *
a
;

369 *
a
 = 
√…
;

370 } (
ñt
 =É…->
√xt
));

373  
√wm≠
;

374 
	}
}

376 
INLINE
 

377 
ª°‹e_hash_°rög
 
	$P2
(**, 
vÆ
, 
svÆue_t
 *, 
sv
)

379 *
˝
 = *
vÆ
;

380 
c
, *
°¨t
 = 
˝
;

382 (
c
 = *
˝
++) != '"') {

383 
c
) {

385 *(
˝
-1) = '\n';

390 *
√w
 = 
˝
 - 1;

392 i‡((
c
 = *
√w
++ = *
˝
++)) {

393 (
c
 = *
˝
++) != '"') {

394 i‡(
c
 == '\\') {

395 i‡(!(
c
 = *
√w
++ = *
˝
++)Ë 
ROB_STRING_ERROR
;

398 i‡(
c
 == '\r')

399 
c
 = *
√w
++ = '\n';

400 *
√w
++ = 
c
;

403 i‡(!
c
Ë 
ROB_STRING_ERROR
;

404 *
√w
 = '\0';

405 *
vÆ
 = 
˝
;

406 
sv
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
°¨t
);

407 
sv
->
ty≥
 = 
T_STRING
;

408 
sv
->
subty≥
 = 
STRING_SHARED
;

411  
ROB_STRING_ERROR
;

415  
ROB_STRING_ERROR
;

418 *
vÆ
 = 
˝
;

419 *--
˝
 = '\0';

420 
sv
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
°¨t
);

421 
sv
->
ty≥
 = 
T_STRING
;

422 
sv
->
subty≥
 = 
STRING_SHARED
;

424 
	}
}

430 
INLINE_STATIC
 

431 
svÆue_to_öt
 
	$P1
(
svÆue_t
 *, 
v
)

433 i‡(
v
->
ty≥
 =
T_STRING
 && v->
subty≥
 !
STRING_SHARED
) {

434 *
p
 = 
	`make_sh¨ed_°rög
(
v
->
u
.
°rög
);

435 
	`‰ì_°rög_svÆue
(
v
);

436 
v
->
subty≥
 = 
STRING_SHARED
;

437 
v
->
u
.
°rög
 = 
p
;

443  
	`MAP_POINTER_HASH
(
v
->
u
.
numbî
);

444 
	}
}

446 
mßmevÆ
 
	$P2
(
svÆue_t
 *, 
¨g1
, svÆue_à*, 
¨g2
) {

447 
¨g1
->
ty≥
 | 
¨g2
->type) {

448 
T_NUMBER
:

449  
¨g1
->
u
.
numbî
 =
¨g2
->u.number;

450 
T_REAL
:

451  
¨g1
->
u
.
ªÆ
 =
¨g2
->u.real;

453  
¨g1
->
u
.
¨r
 =
¨g2
->u.arr;

455 
	}
}

463 
INLINE_STATIC
 
m≠pög_node_t
 *

464 
node_föd_ö_m≠pög
 
	$P2
(
m≠pög_t
 *, 
m
, 
svÆue_t
 *, 
lv
)

466 
i
;

467 
m≠pög_node_t
 *
ñt
, **
a
 = 
m
->
èbÀ
;

469 
	`debug
(
m≠pög
,("mapping.c: find_in_mapping\n"));

471 
i
 = 
	`svÆue_to_öt
(
lv
Ë& 
m
->
èbÀ_size
;

472 
ñt
 = 
a
[
i
];É…;É… =É…->
√xt
) {

473 i‡(
	`mßmevÆ
(
ñt
->
vÆues
, 
lv
))

474  
ñt
;

476  (
m≠pög_node_t
 *)0;

477 
	}
}

484 
INLINE
 
m≠pög_dñëe
 
	$P2
(
m≠pög_t
 *,
m
, 
svÆue_t
 *,
lv
)

486 
i
 = 
	`svÆue_to_öt
(
lv
Ë& 
m
->
èbÀ_size
;

487 
m≠pög_node_t
 **
¥ev
 = 
m
->
èbÀ
 + 
i
, *
ñt
;

489 i‡((
ñt
 = *
¥ev
)) {

491 i‡(
	`mßmevÆ
(
ñt
->
vÆues
, 
lv
)) {

492 i‡(!(*
¥ev
 = 
ñt
->
√xt
Ë&& !
m
->
èbÀ
[
i
]) {

493 
m
->
unfûÀd
++;

494 
	`debug
(
m≠pög
,("mapping delete: bucketÉmpty, unfilled = %i",

495 
m
->
unfûÀd
));

497 
m
->
cou¡
--;

498 
tŸÆ_m≠pög_nodes
--;

499 
tŸÆ_m≠pög_size
 -(
m≠pög_node_t
);

500 
	`debug
(
m≠pög
,("m≠pög dñëe: cou¡ = %i", 
	`MAP_COUNT
(
m
)));

501 
	`‰ì_svÆue
(
ñt
->
vÆues
, "mapping_delete");

502 
	`‰ì_node
(
m
, 
ñt
);

506 
¥ev
 = &(
ñt
->
√xt
);

507 } (
ñt
 =É…->
√xt
));

510 
	}
}

519 
INLINE
 
svÆue_t
 *

520 
föd_f‹_ö£π
 
	$P3
(
m≠pög_t
 *, 
m
, 
svÆue_t
 *, 
lv
, , 
doTheFªe
)

522 
oi
 = 
	`svÆue_to_öt
(
lv
);

523 
i
 = 
oi
 & 
m
->
èbÀ_size
;

524 
m≠pög_node_t
 *
n
, *
√wnode
, **
a
 = 
m
->
èbÀ
 + 
i
;

526 
	`debug
(
m≠pög
,("m≠pög.c: hashedÅÿ%d\n", 
i
));

527 i‡((
n
 = *
a
)) {

529 i‡(
	`mßmevÆ
(
lv
, 
n
->
vÆues
)) {

531 
	`debug
(
m≠pög
,("m≠pög.c: found %p\n", 
n
->
vÆues
));

532 i‡(
doTheFªe
Ë
	`‰ì_svÆue
(
n
->
vÆues
 + 1, "find_for_insert");

533  
n
->
vÆues
 + 1;

535 } (
n
 =Ç->
√xt
));

536 
	`debug
(
m≠pög
,("m≠pög.c: didn'àföd %p\n", 
lv
));

537 
n
 = *
a
;

539 i‡(!(--
m
->
unfûÀd
)) {

540 
size
 = 
m
->
èbÀ_size
 + 1;

542 i‡(
	`growM≠
(
m
)) {

543 i‡(
oi
 & 
size
Ë
i
 |= size;

544 
n
 = *(
a
 = 
m
->
èbÀ
 + 
i
);

546 
	`îr‹
("Out of memory\n");

550 
m
->
cou¡
++;

551 i‡(
	`MAP_COUNT
(
m
Ë> 
MAX_MAPPING_SIZE
) {

552 
m
->
cou¡
--;

553 
	`debug
(
m≠pög
,("mapping.c:Åoo full"));

554 
	`m≠pög_too_œrge
();

556 #ifde‡
PACKAGE_MUDLIB_STATS


557 
	`add_¨øy_size
 (&
m
->
°©s
, 2);

559 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
);

560 
	`debug
(
m≠pög
,("mapping.c:állocatedáÇode\n"));

561 
√wnode
 = 
	`√w_m≠_node
();

562 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
lv
);

564 (*
a
 = 
√wnode
)->
√xt
 = 
n
;

565 
lv
 = 
√wnode
->
vÆues
 + 1;

566 *
lv
 = 
c⁄°0u
;

567 
tŸÆ_m≠pög_nodes
++;

568  
lv
;

569 
	}
}

571 #ifde‡
F_UNIQUE_MAPPING


573 
	sunique_node_s
 {

574 
svÆue_t
 
	mkey
;

575 
	mcou¡
;

576 
unique_node_s
 *
	m√xt
;

577 *
	mödi˚s
;

578 } 
	tunique_node_t
;

580 
	sunique_m_li°_s
 {

581 
unique_node_t
 **
	muèbÀ
;

582 
unique_m_li°_s
 *
	m√xt
;

583 
	mmask
;

584 } 
	tunique_m_li°_t
;

586 
unique_m_li°_t
 *
	gg_u_m_li°
 = 0;

588 
unique_m≠pög_îr‹_h™dÀr
 
PROT
(())

590 
unique_m_li°_t
 *
	g∆i°
 = 
g_u_m_li°
;

591 
unique_node_t
 **
	gèbÀ
 = 
∆i°
->
uèbÀ
;

592 
unique_node_t
 *
	gu±r
, *
	g≈å
;

593 
	gmask
 = 
∆i°
->
mask
;

595 
	gg_u_m_li°
 = 
g_u_m_li°
->
√xt
;

598 i‡((
	gu±r
 = 
èbÀ
[
mask
])) {

600 
≈å
 = 
u±r
->
√xt
;

601 
‰ì_svÆue
(&
u±r
->
key
, "unique_mapping_error_handler");

602 
FREE
((*Ë
u±r
->
ödi˚s
);

603 
FREE
((*Ë
u±r
);

604 } (
	gu±r
 = 
≈å
));

606 } 
	gmask
--);

607 
FREE
((*Ë
èbÀ
);

608 
FREE
((*Ë
∆i°
);

611 
f_unique_m≠pög
 
PROT
(())

613 
unique_m_li°_t
 *
	g∆i°
;

614 
svÆue_t
 *
	g¨g
 = 
•
 - 
°_num_¨g
 + 1, *
	gsv
;

615 
unique_node_t
 **
	gèbÀ
, *
	gu±r
, *
	g≈å
;

616 
¨øy_t
 *
	gv
 = 
¨g
->
u
.
¨r
, *
	gªt
;

617 
	goi
, 
	gi
, 
	gnumkeys
 = 0, 
	gmask
, 
	gsize
;

618 
	gnum_¨g
 = 
°_num_¨g
;

619 
	gnmask
;

620 
m≠pög_t
 *
	gm
;

621 
m≠pög_node_t
 **
	gmèbÀ
, *
	gñt
;

622 *
	göd
, 
	gj
;

623 
fun˘i⁄_to_ˇŒ_t
 
	g·c
;

625 
¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_UNIQUE_MAPPING
);

627 
	gsize
 = 
v
->
size
;

628 i‡(!
	gsize
) {

629 
p›_n_ñems
(
num_¨g
 - 1);

630 
‰ì_¨øy
(
v
);

631 
	g•
->
	gty≥
 = 
T_MAPPING
;

632 
	g•
->
	gu
.
	gm≠
 = 
Æloˇã_m≠pög
(0);

636 i‡(
	gsize
 > 
	gMAP_HASH_TABLE_SIZE
) {

637 
	gsize
 |
size
 >> 1;

638 
	gsize
 |
size
 >> 2;

639 
	gsize
 |
size
 >> 4;

640 i‡(
	gsize
 & 0xff00Ësizê|
size
 >> 8;

641 
	gmask
 = 
size
++;

642 } 
	gmask
 = (
size
 = 
MAP_HASH_TABLE_SIZE
) - 1;

644 
	gèbÀ
 = (
unique_node_t
 **Ë
DXALLOC
(
size
 *= (unique_node_t *),

646 i‡(!
	gèbÀ
Ë
îr‹
("Unique_mapping - Out of memory.\n");

647 
mem£t
(
èbÀ
, 0, 
size
);

649 
	g∆i°
 = 
ALLOCATE
(
unique_m_li°_t
, 101, "f_unique_mapping:2");

650 
	g∆i°
->
	g√xt
 = 
g_u_m_li°
;

651 
	g∆i°
->
	guèbÀ
 = 
èbÀ
;

652 
	g∆i°
->
	gmask
 = 
mask
;

653 
	gg_u_m_li°
 = 
∆i°
;

655 
	gSTACK_INC
;

656 
	g•
->
	gty≥
 = 
T_ERROR_HANDLER
;

657 
	g•
->
	gu
.
	gîr‹_h™dÀr
 = 
unique_m≠pög_îr‹_h™dÀr
;

659 
	gsize
 = 
v
->
size
;

660 
	gsize
--) {

661 
push_svÆue
(
v
->
ôem
 + 
size
);

662 
	gsv
 = 
ˇŒ_efun_ˇŒback
(&
·c
, 1);

663 
	gi
 = (
oi
 = 
svÆue_to_öt
(
sv
)Ë& 
mask
;

664 i‡((
	gu±r
 = 
èbÀ
[
i
])) {

666 i‡(
mßmevÆ
(&
u±r
->
key
, 
sv
)) {

667 
öd
 = 
u±r
->
ödi˚s
 = 
RESIZE
(u±r->ödi˚s, u±r->
cou¡
+1,

669 
	göd
[
u±r
->
cou¡
++] = 
size
;

672 } (
	gu±r
 = 
u±r
->
√xt
));

674 i‡(!
	gu±r
) {

675 
	gu±r
 = 
ALLOCATE
(
unique_node_t
, 103, "f_unique_mapping:4");

676 
assign_svÆue_no_‰ì
(&
u±r
->
key
, 
sv
);

677 
	gu±r
->
	gcou¡
 = 1;

678 
	gu±r
->
	gödi˚s
 = 
ALLOCATE
(, 104, "f_unique_mapping:5");

679 
	gu±r
->
	gödi˚s
[0] = 
size
;

680 
	gu±r
->
	g√xt
 = 
èbÀ
[
i
];

681 
	gèbÀ
[
i
] = 
u±r
;

682 
	gnumkeys
++;

686 
	gm
 = 
Æloˇã_m≠pög
(
nmask
 = 
numkeys
 << 1);

687 
	gmèbÀ
 = 
m
->
èbÀ
;

688 
	gnumkeys
 = 0;

690 i‡(
	gnmask
 > 
	gMAP_HASH_TABLE_SIZE
) {

691 
	gnmask
 |
nmask
 >> 1;

692 
	gnmask
 |
nmask
 >> 2;

693 
	gnmask
 |
nmask
 >> 4;

694 i‡(
	gsize
 & 0xff00Ë
	gnmask
 |
nmask
 >> 8;

695 } 
	gnmask
 = 
MAP_HASH_TABLE_SIZE
 - 1;

696 
	gj
 = 
mask
;

697 
	gsv
 = 
v
->
ôem
;

700 i‡((
	gu±r
 = 
èbÀ
[
j
])) {

702 
≈å
 = 
u±r
->
√xt
;

703 
	goi
 = 
MAP_POINTER_HASH
(
u±r
->
key
.
u
.
numbî
);

704 
	gi
 = 
oi
 & 
nmask
;

705 i‡(!
	gmèbÀ
[
i
] && !(--
	gm
->
	gunfûÀd
)) {

706 i‡(
growM≠
(
m
)) {

707 
	gmèbÀ
 = 
m
->
èbÀ
;

708 
	gnmask
 <<= 1;

709 
	gnmask
--;

713 
	g≈å
 = 
u±r
->
√xt
;

714 
‰ì_svÆue
(&
u±r
->
key
, "f_unique_mapping");

715 
FREE
((*Ë
u±r
->
ödi˚s
);

716 
FREE
((*Ë
u±r
);

717 } (
	gu±r
 = 
≈å
));

718 
	gu±r
 = 
èbÀ
[--
j
];

719 } 
	gj
 >= 0);

720 #ifde‡
PACKAGE_MUDLIB_STATS


721 
add_¨øy_size
(&
m
->
°©s
, 
numkeys
 << 1);

723 
	gtŸÆ_m≠pög_size
 +(
m≠pög_node_t
Ë* (
m
->
cou¡
 = 
numkeys
);

724 
	gtŸÆ_m≠pög_nodes
 +
numkeys
;

725 
‰ì_m≠pög
(
m
);

726 
îr‹
("Out of memory\n");

730 
	gñt
 = 
ALLOCATE
(
m≠pög_node_t
, 105,"f_unique_mapping:6");

731 *
	gñt
->
	gvÆues
 = 
u±r
->
key
;

732 (
	gñt
->
	gvÆues
 + 1)->
	gty≥
 = 
T_ARRAY
;

733 
	gªt
 = (
ñt
->
vÆues
 + 1)->
u
.
¨r
 = 
Æloˇã_em±y_¨øy
(
size
 = 
u±r
->
cou¡
);

734 
	göd
 = 
u±r
->
ödi˚s
;

735 
	gsize
--) {

736 
assign_svÆue_no_‰ì
(
ªt
->
ôem
 + 
size
, 
sv
 + 
öd
[size]);

738 
	gñt
->
	g√xt
 = 
mèbÀ
[
i
];

739 
	gmèbÀ
[
i
] = 
ñt
;

740 
FREE
((*Ë
öd
);

741 
FREE
((*Ë
u±r
);

742 
	gnumkeys
++;

743 } (
	gu±r
 = 
≈å
));

745 } 
	gj
--);

747 #ifde‡
PACKAGE_MUDLIB_STATS


748 
add_¨øy_size
(&
m
->
°©s
, 
numkeys
 << 1);

750 
	gtŸÆ_m≠pög_size
 +(
m≠pög_node_t
Ë* (
m
->
cou¡
 = 
numkeys
);

751 
	gtŸÆ_m≠pög_nodes
 +
numkeys
;

752 
FREE
((*Ë
èbÀ
);

753 
	gg_u_m_li°
 = 
g_u_m_li°
->
√xt
;

754 
FREE
((*Ë
∆i°
);

755 
	g•
--;

756 
p›_n_ñems
(
num_¨g
 - 1);

757 
‰ì_¨øy
(
v
);

758 
	g•
->
	gty≥
 = 
T_MAPPING
;

759 
	g•
->
	gu
.
	gm≠
 = 
m
;

768 
INLINE
 
m≠pög_t
 *

769 
lﬂd_m≠pög_‰om_aggªg©e
 
	$P2
(
svÆue_t
 *,
•
, , 
n
)

771 
m≠pög_t
 *
m
;

772 
mask
, 
i
, 
oi
, 
cou¡
 = 0;

773 
m≠pög_node_t
 **
a
, *
ñt
, *
ñt2
;

775 
	`debug
(
m≠pög
,("m≠pög.c:Üﬂd_m≠pög_‰om_aggªg©êbegö, sizê%d\n", 
n
));

776 
m
 = 
	`Æloˇã_m≠pög
(
n
 >> 1);

777 i‡(!
n
Ë 
m
;

778 
mask
 = 
m
->
èbÀ_size
;

779 
a
 = 
m
->
èbÀ
;

781 
i
 = (
oi
 = 
	`svÆue_to_öt
(++
•
)Ë& 
mask
;

782 i‡((
ñt2
 = 
ñt
 = 
a
[
i
])) {

784 i‡(
	`mßmevÆ
(
•
, 
ñt
->
vÆues
)) {

785 
	`‰ì_svÆue
(
•
++, "load_mapping_from_aggregate: duplicate key");

786 
	`‰ì_svÆue
(
ñt
->
vÆues
+1, "load_mapping_from_aggregate");

787 *(
ñt
->
vÆues
+1Ë*
•
;

790 } (
ñt
 =É…->
√xt
));

791 i‡(
ñt
) ;

793 i‡(!(--
m
->
unfûÀd
)) {

794 i‡(
	`growM≠
(
m
)) {

795 
a
 = 
m
->
èbÀ
;

796 i‡(
oi
 & ++
mask
Ë
ñt2
 = 
a
[
i
 |= mask];

797 
mask
 <<= 1;

798 
mask
--;

800 #ifde‡
PACKAGE_MUDLIB_STATS


801 
	`add_¨øy_size
(&
m
->
°©s
, 
cou¡
 << 1);

803 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
Ë* (
m
->
cou¡
 = count);

804 
tŸÆ_m≠pög_nodes
 +
cou¡
;

805 
	`‰ì_m≠pög
(
m
);

806 
	`îr‹
("Out of memory\n");

810 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
) {

811 #ifde‡
PACKAGE_MUDLIB_STATS


812 
	`add_¨øy_size
(&
m
->
°©s
, (--
cou¡
) << 1);

814 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
Ë* (
m
->
cou¡
 = count);

815 
tŸÆ_m≠pög_nodes
 +
cou¡
;

817 
	`‰ì_m≠pög
(
m
);

818 
	`m≠pög_too_œrge
();

821 
ñt
 = 
	`√w_m≠_node
();

822 *
ñt
->
vÆues
 = *
•
++;

823 *(
ñt
->
vÆues
 + 1Ë*
•
;

824 (
a
[
i
] = 
ñt
)->
√xt
 = 
ñt2
;

825 } 
n
 -= 2);

826 #ifde‡
PACKAGE_MUDLIB_STATS


827 
	`add_¨øy_size
(&
m
->
°©s
, 
cou¡
 << 1);

829 
tŸÆ_m≠pög_size
 +(
m≠pög_node_t
Ë* (
m
->
cou¡
 = count);

830 
tŸÆ_m≠pög_nodes
 +
cou¡
;

831 
	`debug
(
m≠pög
,("mapping.c:Üoad_mapping_from_aggregateÉnd\n"));

832  
m
;

833 
	}
}

837 
INLINE
 
svÆue_t
 *

838 
föd_ö_m≠pög
 
	$P2
(
m≠pög_t
 *, 
m
, 
svÆue_t
 *,
lv
)

840 
i
 = 
	`svÆue_to_öt
(
lv
Ë& 
m
->
èbÀ_size
;

841 
m≠pög_node_t
 *
n
 = 
m
->
èbÀ
[
i
];

843 
n
) {

844 i‡(
	`mßmevÆ
(
n
->
vÆues
, 
lv
)) Ç->values + 1;

845 
n
 =Ç->
√xt
;

848  &
c⁄°0u
;

849 
	}
}

851 
svÆue_t
 *

852 
föd_°rög_ö_m≠pög
 
	$P2
(
m≠pög_t
 *, 
m
, *, 
p
)

854 *
ss
 = 
	`föd°rög
(
p
);

855 
i
;

856 
m≠pög_node_t
 *
n
;

858 i‡(!
ss
Ë &
c⁄°0u
;

859 
i
 = 
	`MAP_POINTER_HASH
(
ss
);

860 
n
 = 
m
->
èbÀ
[
i
 & m->
èbÀ_size
];

862 
n
) {

863 i‡(
n
->
vÆues
->
ty≥
 =
T_STRING
 &&Ç->vÆues->
u
.
°rög
 =
ss
)

864  
n
->
vÆues
 + 1;

865 
n
 =Ç->
√xt
;

867  &
c⁄°0u
;

868 
	}
}

874 
INLINE_STATIC
 

875 
add_to_m≠pög
 
	$P3
(
m≠pög_t
 *,
m1
, m≠pög_à*,
m2
, , 
‰ì_Êag
)

877 
mask
 = 
m1
->
èbÀ_size
, 
j
 = 
m2
->table_size;

878 
cou¡
 = 
	`MAP_COUNT
(
m1
);

879 
i
, 
oi
;

880 
m≠pög_node_t
 *
ñt1
, *
ñt2
, *
√wnode
, *
n
;

881 
m≠pög_node_t
 **
a1
 = 
m1
->
èbÀ
, **
a2
 = 
m2
->table;

882 
svÆue_t
 *
sv
;

885 
ñt2
 = 
a2
[
j
];É…2;É…2 =É…2->
√xt
) {

886 
i
 = (
oi
 = 
	`node_hash
(
ñt2
)Ë& 
mask
;

887 
sv
 = 
ñt2
->
vÆues
;

888 i‡((
n
 = 
ñt1
 = 
a1
[
i
])) {

890 i‡(
	`mßmevÆ
(
sv
, 
ñt1
->
vÆues
)) {

891 
	`assign_svÆue
(
ñt1
->
vÆues
 + 1, 
sv
 + 1);

894 } (
ñt1
 =É…1->
√xt
));

895 i‡(
ñt1
) ;

896 } i‡(!(--
m1
->
unfûÀd
)) {

897 i‡(
	`growM≠
(
m1
)) {

898 
a1
 = 
m1
->
èbÀ
;

899 i‡(
oi
 & ++
mask
Ë
n
 = 
a1
[
i
 |= mask];

900 
mask
 <<= 1;

901 
mask
--;

903 
cou¡
 -
	`MAP_COUNT
(
m1
);

904 #ifde‡
PACKAGE_MUDLIB_STATS


905 
	`add_¨øy_size
(&
m1
->
°©s
, 
cou¡
 << 1);

907 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

908 
tŸÆ_m≠pög_nodes
 +
cou¡
;

909 
m1
->
cou¡
 += count;

910 i‡(
‰ì_Êag
Ë
	`‰ì_m≠pög
(
m1
);

911 
	`îr‹
("Out of memory\n");

914 
cou¡
++;

915 i‡(
cou¡
 > 
MAX_MAPPING_SIZE
) {

916 i‡(
cou¡
 -
	`MAP_COUNT
(
m1
) + 1) {

917 #ifde‡
PACKAGE_MUDLIB_STATS


918 
	`add_¨øy_size
(&
m1
->
°©s
, 
cou¡
 << 1);

920 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

921 
tŸÆ_m≠pög_nodes
 +
cou¡
;

923 
m1
->
cou¡
 += count;

924 
	`m≠pög_too_œrge
();

927 
√wnode
 = 
	`√w_m≠_node
();

928 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
ñt2
->values);

929 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
+1,
ñt2
->values+1);

930 (
a1
[
i
] = 
√wnode
)->
√xt
 = 
n
;

932 } 
j
--);

934 i‡(
cou¡
 -
	`MAP_COUNT
(
m1
)) {

935 #ifde‡
PACKAGE_MUDLIB_STATS


936 
	`add_¨øy_size
(&
m1
->
°©s
, 
cou¡
 << 1);

938 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

939 
tŸÆ_m≠pög_nodes
 +
cou¡
;

942 
m1
->
cou¡
 += count;

943 
	}
}

950 
INLINE_STATIC
 

951 
unique_add_to_m≠pög
 
	$P3
(
m≠pög_t
 *,
m1
, m≠pög_à*,
m2
, ,
‰ì_Êag
)

953 
mask
 = 
m1
->
èbÀ_size
, 
j
 = 
m2
->table_size;

954 
cou¡
 = 
	`MAP_COUNT
(
m1
);

955 
i
, 
oi
;

956 
m≠pög_node_t
 *
ñt1
, *
ñt2
, *
√wnode
, *
n
;

957 
m≠pög_node_t
 **
a1
 = 
m1
->
èbÀ
, **
a2
 = 
m2
->table;

958 
svÆue_t
 *
sv
;

961 
ñt2
 = 
a2
[
j
];É…2;É…2 =É…2->
√xt
) {

962 
i
 = (
oi
 = 
	`node_hash
(
ñt2
)Ë& 
mask
;

963 
sv
 = 
ñt2
->
vÆues
;

964 i‡((
n
 = 
ñt1
 = 
a1
[
i
])) {

966 i‡(
	`mßmevÆ
(
sv
, 
ñt1
->
vÆues
)) ;

967 } (
ñt1
 =É…1->
√xt
));

968 i‡(
ñt1
) ;

970 i‡(!(--
m1
->
unfûÀd
)) {

971 i‡(
	`growM≠
(
m1
)) {

972 
a1
 = 
m1
->
èbÀ
;

973 i‡(
oi
 & ++
mask
Ë
n
 = 
a1
[
i
 |= mask];

974 
mask
 <<= 1;

975 
mask
--;

977 ++
m1
->
unfûÀd
;

978 
cou¡
 -
	`MAP_COUNT
(
m1
);

979 #ifde‡
PACKAGE_MUDLIB_STATS


980 
	`add_¨øy_size
(&
m1
->
°©s
, 
cou¡
 << 1);

982 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

983 
tŸÆ_m≠pög_nodes
 +
cou¡
;

984 
m1
->
cou¡
 += count;

985 i‡(
‰ì_Êag
Ë
	`‰ì_m≠pög
(
m1
);

987 
	`îr‹
("Out of memory\n");

991 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
) {

992 i‡(
cou¡
 -
	`MAP_COUNT
(
m1
) + 1) {

993 #ifde‡
PACKAGE_MUDLIB_STATS


994 
	`add_¨øy_size
(&
m1
->
°©s
, 
cou¡
 << 1);

996 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

997 
tŸÆ_m≠pög_nodes
 +
cou¡
;

999 
m1
->
cou¡
 += count;

1000 
	`m≠pög_too_œrge
();

1003 
√wnode
 = 
	`√w_m≠_node
();

1004 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
ñt2
->values);

1005 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
+1,
ñt2
->values+1);

1006 (
a1
[
i
] = 
√wnode
)->
√xt
 = 
n
;

1008 } 
j
--);

1010 i‡(
cou¡
 -
	`MAP_COUNT
(
m1
)) {

1011 #ifde‡
PACKAGE_MUDLIB_STATS


1012 
	`add_¨øy_size
(&
m1
->
°©s
, 
cou¡
 << 1);

1014 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1015 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1018 
m1
->
cou¡
 += count;

1019 
	}
}

1021 
INLINE
 

1022 
	$abs‹b_m≠pög
(
m1
, 
m2
)

1023 
m≠pög_t
 *
m1
, *
m2
;

1025 i‡(
	`MAP_COUNT
(
m2
)) {

1026 i‡(
m1
 !
m2
)

1027 
	`add_to_m≠pög
(
m1
, 
m2
, 0);

1029 
	}
}

1036 
INLINE
 
m≠pög_t
 *

1037 
add_m≠pög
 
	$P2
(
m≠pög_t
 *,
m1
, m≠pög_à*,
m2
)

1039 
m≠pög_t
 *
√wm≠
;

1041 
	`debug
(
m≠pög
,("m≠pög.c:ádd_m≠pög begö: %p, %p", 
m1
, 
m2
));

1042 i‡(
	`MAP_COUNT
(
m1
Ë>MAP_COUNT(
m2
)) {

1043 i‡(
	`MAP_COUNT
(
m2
)) {

1044 
	`add_to_m≠pög
(
√wm≠
 = 
	`c›yM≠pög
(
m1
), 
m2
, 1);

1045  
√wm≠
;

1047  
	`c›yM≠pög
(
m1
);

1049 i‡(
	`MAP_COUNT
(
m1
)) {

1050 
	`unique_add_to_m≠pög
(
√wm≠
 = 
	`c›yM≠pög
(
m2
), 
m1
, 1);

1051  
√wm≠
;

1053  
	`c›yM≠pög
(
m2
);

1054 
	`debug
(
m≠pög
,("mapping.c:ádd_mappingÉnd\n"));

1055 
	}
}

1062 #ifde‡
F_MAP


1064 
m≠_m≠pög
 
	$P2
(
svÆue_t
 *, 
¨g
, , 
num_¨g
)

1066 
m≠pög_t
 *
m
;

1067 
m≠pög_node_t
 **
a
, *
ñt
;

1068 
j
;

1069 
svÆue_t
 *
ªt
;

1070 
fun˘i⁄_to_ˇŒ_t
 
·c
;

1072 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_MAP
);

1074 i‡(
¨g
->
u
.
m≠
->
ªf
 > 1) {

1075 
m
 = 
	`c›yM≠pög
(
¨g
->
u
.
m≠
);

1076 
	`‰ì_m≠pög
(
¨g
->
u
.
m≠
);

1077 
¨g
->
u
.
m≠
 = 
m
;

1079 
m
 = 
¨g
->
u
.
m≠
;

1082 
j
 = 
m
->
èbÀ_size
;

1083 
a
 = 
m
->
èbÀ
;

1084 
	`debug
(
m≠pög
,("mapping.c: map_mapping\n"));

1086 
ñt
 = 
a
[
j
];É… ;É… =É…->
√xt
) {

1087 
	`push_svÆue
(
ñt
->
vÆues
);

1088 
	`push_svÆue
(
ñt
->
vÆues
+1);

1089 
ªt
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 2);

1090 i‡(
ªt
Ë
	`assign_svÆue
(
ñt
->
vÆues
+1,Ñet);

1093 } 
j
--);

1095 
	`p›_n_ñems
(
num_¨g
-1);

1096 
	}
}

1099 #ifde‡
F_FILTER


1101 
fûãr_m≠pög
 
	$P2
(
svÆue_t
 *, 
¨g
, , 
num_¨g
)

1103 
m≠pög_t
 *
m
, *
√wm≠
;

1104 
m≠pög_node_t
 **
a
, *
ñt
;

1105 
m≠pög_node_t
 **
b
, *
√wnode
, *
n
;

1106 
j
, 
cou¡
 = 0, 
size
;

1107 
svÆue_t
 *
ªt
;

1108 
tb_ödex
;

1109 
fun˘i⁄_to_ˇŒ_t
 
·c
;

1111 
	`¥o˚ss_efun_ˇŒback
(1, &
·c
, 
F_FILTER
);

1113 i‡(
¨g
->
u
.
m≠
->
ªf
 > 1) {

1114 
m
 = 
	`c›yM≠pög
(
¨g
->
u
.
m≠
);

1115 
	`‰ì_m≠pög
(
¨g
->
u
.
m≠
);

1116 
¨g
->
u
.
m≠
 = 
m
;

1118 
m
 = 
¨g
->
u
.
m≠
;

1121 
√wm≠
 = 
	`Æloˇã_m≠pög
(0);

1122 
	`push_ª„d_m≠pög
(
√wm≠
);

1123 
b
 = 
√wm≠
->
èbÀ
;

1124 
size
 = 
√wm≠
->
èbÀ_size
;

1126 
a
 = 
m
->
èbÀ
;

1127 
j
 = 
m
->
èbÀ_size
;

1128 
	`debug
(
m≠pög
,("mapping.c: filter_mapping\n"));

1130 
ñt
 = 
a
[
j
];É… ;É… =É…->
√xt
) {

1131 
	`push_svÆue
(
ñt
->
vÆues
);

1132 
	`push_svÆue
(
ñt
->
vÆues
+1);

1133 
ªt
 = 
	`ˇŒ_efun_ˇŒback
(&
·c
, 2);

1134 i‡(!
ªt
) ;

1135 i‡(
ªt
->
ty≥
 !
T_NUMBER
 ||Ñë->
u
.
numbî
) {

1136 
tb_ödex
 = 
	`node_hash
(
ñt
Ë& 
size
;

1137 
b
 = 
√wm≠
->
èbÀ
 + 
tb_ödex
;

1138 i‡(!(
n
 = *
b
Ë&& !(--
√wm≠
->
unfûÀd
)) {

1139 i‡(
	`growM≠
(
√wm≠
)) {

1140 
size
 = 
√wm≠
->
èbÀ_size
;

1141 
tb_ödex
 = 
	`node_hash
(
ñt
Ë& 
size
;

1142 
n
 = *(
b
 = 
√wm≠
->
èbÀ
 + 
tb_ödex
);

1144 #ifde‡
PACKAGE_MUDLIB_STATS


1145 
	`add_¨øy_size
(&
√wm≠
->
°©s
, 
cou¡
 << 1);

1147 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1148 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1149 
√wm≠
->
cou¡
 = count;

1150 
	`îr‹
("Out of memory in filter_mapping\n");

1153 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
) {

1154 
cou¡
--;

1155 #ifde‡
PACKAGE_MUDLIB_STATS


1156 
	`add_¨øy_size
(&
√wm≠
->
°©s
, 
cou¡
 << 1);

1158 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1159 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1160 
√wm≠
->
cou¡
 = count;

1161 
	`m≠pög_too_œrge
();

1164 
√wnode
 = 
	`√w_m≠_node
();

1165 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
, 
ñt
->values);

1166 
	`assign_svÆue_no_‰ì
(
√wnode
->
vÆues
+1, 
ñt
->values+1);

1167 (*
b
 = 
√wnode
)->
√xt
 = 
n
;

1170 } 
j
--);

1172 i‡(
cou¡
) {

1173 #ifde‡
PACKAGE_MUDLIB_STATS


1174 
	`add_¨øy_size
(&
√wm≠
->
°©s
, 
cou¡
 << 1);

1176 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

1177 
tŸÆ_m≠pög_nodes
 +
cou¡
;

1178 
√wm≠
->
cou¡
 += count;

1181 
•
--;

1182 
	`p›_n_ñems
(
num_¨g
);

1183 
	`push_ª„d_m≠pög
(
√wm≠
);

1184 
	}
}

1189 
INLINE
 
m≠pög_t
 *

1190 
compo£_m≠pög
 
	$P3
(
m≠pög_t
 *,
m1
, m≠pög_à*,
m2
, ,
Êag
)

1192 
m≠pög_node_t
 *
ñt
, *
ñt2
, **
a
, **
b
 = 
m2
->
èbÀ
, **
¥ev
;

1193 
j
 = 
m1
->
èbÀ_size
, 
dñëed
 = 0;

1194 
mask
 = 
m2
->
èbÀ_size
;

1195 
svÆue_t
 *
sv
;

1197 
	`debug
(
m≠pög
,("mapping.c: compose_mapping\n"));

1198 i‡(
Êag
)

1199 
m1
 = 
	`c›yM≠pög
(m1);

1200 
a
 = 
m1
->
èbÀ
;

1203 i‡((
ñt
 = *(
¥ev
 = 
a
))) {

1205 
sv
 = 
ñt
->
vÆues
 + 1;

1206 i‡((
ñt2
 = 
b
[
	`svÆue_to_öt
(
sv
Ë& 
mask
])) {

1208 i‡(
	`mßmevÆ
(
sv
, 
ñt2
->
vÆues
)) {

1209 i‡(
sv
 !
ñt2
->
vÆues
 + 1)

1210 
	`assign_svÆue
(
sv
, 
ñt2
->
vÆues
 + 1);

1213 } (
ñt2
 =É…2->
√xt
));

1215 i‡(!
ñt2
) {

1216 i‡(!(*
¥ev
 = 
ñt
->
√xt
Ë&& !(*
a
)Ë
m1
->
unfûÀd
++;

1217 
dñëed
++;

1218 
	`‰ì_node
(
m1
, 
ñt
);

1220 
¥ev
 = &(
ñt
->
√xt
);

1222 } (
ñt
 = *
¥ev
));

1224 } 
a
++, 
j
--);

1226 i‡(
dñëed
) {

1227 
m1
->
cou¡
 -
dñëed
;

1228 
tŸÆ_m≠pög_nodes
 -
dñëed
;

1229 
tŸÆ_m≠pög_size
 -
dñëed
 * (
m≠pög_node_t
);

1232  
m1
;

1233 
	}
}

1237 
¨øy_t
 *

1238 
m≠pög_ödi˚s
 
	$P1
(
m≠pög_t
 *,
m
)

1240 
¨øy_t
 *
v
;

1241 
j
 = 
m
->
èbÀ_size
;

1242 
m≠pög_node_t
 *
ñt
, **
a
 = 
m
->
èbÀ
;

1243 
svÆue_t
 *
sv
;

1245 
	`debug
(
m≠pög
,("m≠pög_ödi˚s: sizê%d\n", 
	`MAP_COUNT
(
m
)));

1247 
v
 = 
	`Æloˇã_em±y_¨øy
(
	`MAP_COUNT
(
m
));

1248 
sv
 = 
v
->
ôem
;

1250 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

1251 
	`assign_svÆue_no_‰ì
(
sv
++, 
ñt
->
vÆues
);

1252 } 
j
--);

1253  
v
;

1254 
	}
}

1258 
¨øy_t
 *

1259 
m≠pög_vÆues
 
	$P1
(
m≠pög_t
 *,
m
)

1261 
¨øy_t
 *
v
;

1262 
j
 = 
m
->
èbÀ_size
;

1263 
m≠pög_node_t
 *
ñt
, **
a
 = 
m
->
èbÀ
;

1264 
svÆue_t
 *
sv
;

1266 
	`debug
(
m≠pög
,("m≠pög_vÆues: sizê%d\n",
	`MAP_COUNT
(
m
)));

1268 
v
 = 
	`Æloˇã_em±y_¨øy
(
	`MAP_COUNT
(
m
));

1269 
sv
 = 
v
->
ôem
;

1271 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
)

1272 
	`assign_svÆue_no_‰ì
(
sv
++, 
ñt
->
vÆues
 + 1);

1273 } 
j
--);

1274  
v
;

1275 
	}
}

1279 
svÆue_t
 *
ö£π_ö_m≠pög
 
	$P2
(
m≠pög_t
 *, 
m
, *, 
key
) {

1280 
svÆue_t
 
lv
;

1281 
svÆue_t
 *
ªt
;

1283 
lv
.
ty≥
 = 
T_STRING
;

1284 
lv
.
subty≥
 = 
STRING_CONSTANT
;

1285 
lv
.
u
.
°rög
 = 
key
;

1286 
ªt
 = 
	`föd_f‹_ö£π
(
m
, &
lv
, 1);

1288 
	`‰ì_°rög
(
lv
.
u
.
°rög
);

1289  
ªt
;

1290 
	}
}

1292 
add_m≠pög_∑ú
 
	$P3
(
m≠pög_t
 *, 
m
, *, 
key
, , 
vÆue
)

1294 
svÆue_t
 *
s
;

1296 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1297 
s
->
ty≥
 = 
T_NUMBER
;

1298 
s
->
subty≥
 = 0;

1299 
s
->
u
.
numbî
 = 
vÆue
;

1300 
	}
}

1302 
add_m≠pög_°rög
 
	$P3
(
m≠pög_t
 *, 
m
, *, 
key
, *, 
vÆue
)

1304 
svÆue_t
 *
s
;

1306 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1307 
s
->
ty≥
 = 
T_STRING
;

1308 
s
->
subty≥
 = 
STRING_SHARED
;

1309 
s
->
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
vÆue
);

1310 
	}
}

1312 
add_m≠pög_mÆlo˚d_°rög
 
	$P3
(
m≠pög_t
 *, 
m
, *, 
key
, *, 
vÆue
)

1314 
svÆue_t
 *
s
;

1316 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1317 
s
->
ty≥
 = 
T_STRING
;

1318 
s
->
subty≥
 = 
STRING_MALLOC
;

1319 
s
->
u
.
°rög
 = 
vÆue
;

1320 
	}
}

1322 
add_m≠pög_obje˘
 
	$P3
(
m≠pög_t
 *, 
m
, *, 
key
, 
obje˘_t
 *, 
vÆue
)

1324 
svÆue_t
 *
s
;

1326 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1327 
s
->
ty≥
 = 
T_OBJECT
;

1328 
s
->
subty≥
 = 0;

1329 
s
->
u
.
ob
 = 
vÆue
;

1330 
	`add_ªf
(
vÆue
, "add_mapping_object");

1331 
	}
}

1333 
add_m≠pög_¨øy
 
	$P3
(
m≠pög_t
 *, 
m
, *, 
key
, 
¨øy_t
 *, 
vÆue
)

1335 
svÆue_t
 *
s
;

1337 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1338 
s
->
ty≥
 = 
T_ARRAY
;

1339 
s
->
subty≥
 = 0;

1340 
s
->
u
.
¨r
 = 
vÆue
;

1341 
vÆue
->
ªf
++;

1342 
	}
}

1344 
add_m≠pög_sh¨ed_°rög
 
	$P3
(
m≠pög_t
 *, 
m
, *, 
key
, *, 
vÆue
)

1346 
svÆue_t
 *
s
;

1348 
s
 = 
	`ö£π_ö_m≠pög
(
m
, 
key
);

1349 
s
->
ty≥
 = 
T_STRING
;

1350 
s
->
subty≥
 = 
STRING_SHARED
;

1351 
s
->
u
.
°rög
 = 
	`ªf_°rög
(
vÆue
);

1352 
	}
}

	@mapping.h

6 #i‚de‡
_MAPPING_H


7 
	#_MAPPING_H


	)

9 
	#MAP_POINTER_HASH
(
x
Ë(((
POINTER_INT
)xË>> 4)

	)

11 
	sm≠pög_node_s
 {

12 
m≠pög_node_s
 *
	m√xt
;

13 
svÆue_t
 
	mvÆues
[2];

14 } 
	tm≠pög_node_t
;

16 
	#MNB_SIZE
 256

	)

18 
	sm≠pög_node_block_s
 {

19 
m≠pög_node_block_s
 *
	m√xt
;

20 
m≠pög_node_t
 
	mnodes
[
MNB_SIZE
];

21 } 
	tm≠pög_node_block_t
;

23 
	#MAX_TABLE_SIZE
 32768

	)

24 
	#MAP_HASH_TABLE_SIZE
 8

	)

25 
	#FILL_PERCENT
 80

	)

27 
	#MAPSIZE
(
size
Ë(
m≠pög_t
)

	)

29 
	#MAP_LOCKED
 0x80000000

	)

30 
	#MAP_COUNT
(
m
Ë((m)->
cou¡
 & ~
MAP_LOCKED
)

	)

32 
	sm≠pög_s
 {

33 
	mªf
;

35 #ifde‡
DEBUG


36 
	mexåa_ªf
;

38 
m≠pög_node_t
 **
	mèbÀ
;

39 
	mèbÀ_size
;

40 
	munfûÀd
;

41 
	mcou¡
;

42 #ifde‡
PACKAGE_MUDLIB_STATS


43 
°©group_t
 
	m°©s
;

45 } 
	tm≠pög_t
;

47 
	sföfo_s
 {

48 *
	mfunc
;

49 
obje˘_t
 *
	mobj
;

50 
svÆue_t
 *
	mexåa
;

51 
fu≈å_t
 *
	mÂ
;

52 } 
	tföfo_t
;

54 
	svöfo_s
 {

55 
¨øy_t
 *
	mv
;

56 
	mpos
, 
	msize
, 
	mw
;

57 } 
	tvöfo_t
;

59 
	smöfo_s
 {

60 
m≠pög_t
 *
	mm≠
, *
	m√wm≠
;

61 } 
	tmöfo_t
;

63 
	#m≠pög_too_œrge
() \

64 
	`îr‹
("M≠pögÉx˚eded maximumáŒowed sizêo‡%d.\n",
MAX_MAPPING_SIZE
);

	)

66 #i‚de‡
max


67 
	#max
(
x
,
y
Ë((xË> (y)Ë? (xË: (y)

	)

73 
num_m≠pögs
;

74 
tŸÆ_m≠pög_size
;

75 
tŸÆ_m≠pög_nodes
;

76 
m≠pög_node_t
 *
locked_m≠_nodes
;

78 
mßmevÆ
 
PROT
((
svÆue_t
 *, svalue_t *));

79 
m≠pög_ßve_size
 
PROT
((
m≠pög_t
 *));

80 
INLINE
 
m≠pög_t
 *
m≠Tøvî£
 
PROT
((m≠pög_à*, (*Ë(m≠pög_à*, 
m≠pög_node_t
 *, *), *));

81 
INLINE
 
m≠pög_t
 *
lﬂd_m≠pög_‰om_aggªg©e
 
	`PROT
((
svÆue_t
 *, ));

82 
INLINE
 
m≠pög_t
 *
Æloˇã_m≠pög
 
	`PROT
(());

83 
INLINE
 
m≠pög_t
 *
Æloˇã_m≠pög2
 
	`PROT
((
¨øy_t
 *, 
svÆue_t
 *));

84 
INLINE
 
‰ì_m≠pög
 
	`PROT
((
m≠pög_t
 *));

85 
INLINE
 
svÆue_t
 *
föd_ö_m≠pög
 
	`PROT
((
m≠pög_t
 *, svalue_t *));

86 
svÆue_t
 *
föd_°rög_ö_m≠pög
 
	`PROT
((
m≠pög_t
 *, *));

87 
INLINE
 
svÆue_t
 *
föd_f‹_ö£π
 
	`PROT
((
m≠pög_t
 *, svalue_t *, ));

88 
INLINE
 
abs‹b_m≠pög
 
	`PROT
((
m≠pög_t
 *, mapping_t *));

89 
INLINE
 
m≠pög_dñëe
 
	`PROT
((
m≠pög_t
 *, 
svÆue_t
 *));

90 
INLINE
 
m≠pög_t
 *
add_m≠pög
 
	`PROT
((mapping_t *, mapping_t *));

91 
m≠pög_node_t
 *
√w_m≠_node
 
	`PROT
(());

92 
ª°‹e_hash_°rög
 
	`PROT
((**
°r
, 
svÆue_t
 *));

93 
growM≠
 
	`PROT
((
m≠pög_t
 *));

94 
‰ì_node
 
	`PROT
((
m≠pög_t
 *, 
m≠pög_node_t
 *));

95 
u∆ock_m≠pög
 
	`PROT
((
m≠pög_t
 *));

96 
m≠_m≠pög
 
	`PROT
((
svÆue_t
 *, ));

97 
fûãr_m≠pög
 
	`PROT
((
svÆue_t
 *, ));

98 
INLINE
 
m≠pög_t
 *
compo£_m≠pög
 
	`PROT
((mapping_t *, mapping_t *, ));

99 
¨øy_t
 *
m≠pög_ödi˚s
 
	`PROT
((
m≠pög_t
 *));

100 
¨øy_t
 *
m≠pög_vÆues
 
	`PROT
((
m≠pög_t
 *));

101 
¨øy_t
 *
m≠pög_óch
 
	`PROT
((
m≠pög_t
 *));

102 *
ßve_m≠pög
 
	`PROT
((
m≠pög_t
 *));

103 
dóŒoc_m≠pög
 
	`PROT
((
m≠pög_t
 *));

104 
m¨k_m≠pög_node_blocks
 
	`PROT
(());

105 
m≠pög_t
 *
mkm≠pög
 
	`PROT
((
¨øy_t
 *,árray_t *));

107 
add_m≠pög_∑ú
 
	`PROT
((
m≠pög_t
 *, *, ));

108 
add_m≠pög_°rög
 
	`PROT
((
m≠pög_t
 *, *, *));

109 
add_m≠pög_mÆlo˚d_°rög
 
	`PROT
((
m≠pög_t
 *, *, *));

110 
add_m≠pög_obje˘
 
	`PROT
((
m≠pög_t
 *, *, 
obje˘_t
 *));

111 
add_m≠pög_¨øy
 
	`PROT
((
m≠pög_t
 *, *, 
¨øy_t
 *));

112 
add_m≠pög_sh¨ed_°rög
 
	`PROT
((
m≠pög_t
 *, *, *));

	@master.c

1 
	~"°d.h
"

2 
	~"comm.h
"

3 
	~"ma°î.h
"

4 
	~"efuns_maö.h
"

5 
	~"ŸabÀ.h
"

7 
obje˘_t
 *
	gma°î_ob
 = 0;

8 
fun˘i⁄_lookup_öfo_t
 *
	gma°î_≠∂õs
 = 0;

15 
svÆue_t
 *
≠∂y_ma°î_ob
 
	$P2
(, 
fun
, , 
num_¨g
)

17 i‡(!
ma°î_ob
) {

18 
	`p›_n_ñems
(
num_¨g
);

19  (
svÆue_t
 *)-1;

22 i‡(
ma°î_≠∂õs
[
fun
].
func
) {

23 #ifde‡
TRACE


24 i‡(
	`TRACEP
(
TRACE_APPLY
)) {

25 
	`do_åa˚
("ma°îáµly", 
ma°î_≠∂õs
[
fun
].
func
->
«me
, "\n");

28 
	`DEBUG_CHECK
(
ma°î_ob
->
Êags
 & 
O_SWAPPED
, "Master object swapped!\n");

30 
	`ˇŒ_dúe˘
(
ma°î_ob
, 
ma°î_≠∂õs
[
fun
].
ödex
,

31 
ORIGIN_DRIVER
, 
num_¨g
);

32 
	`‰ì_svÆue
(&
≠∂y_ªt_vÆue
, "apply_master_ob");

33 
≠∂y_ªt_vÆue
 = *
•
--;

34  &
≠∂y_ªt_vÆue
;

36 
	`p›_n_ñems
(
num_¨g
);

39 
	}
}

42 
svÆue_t
 *
ß„_≠∂y_ma°î_ob
 
	$P2
(, 
fun
, , 
num_¨g
)

44 i‡(!
ma°î_ob
) {

45 
	`p›_n_ñems
(
num_¨g
);

46  (
svÆue_t
 *)-1;

48  
	`ß„_≠∂y
(
≠∂õs_èbÀ
[
fun
], 
ma°î_ob
, 
num_¨g
, 
ORIGIN_DRIVER
);

49 
	}
}

51 
	$öô_ma°î
() {

52 
buf
[512];

53 #ifde‡
LPC_TO_C


54 
Õc_obje˘_t
 *
compûed_vîsi⁄
;

56 
obje˘_t
 *
√w_ob
;

58 i‡(!
	`°rù_«me
(
MASTER_FILE
, 
buf
,  buf))

59 
	`îr‹
("IŒegÆ ma°î fûê«mê'%s'\n", 
MASTER_FILE
);

61 #ifde‡
LPC_TO_C


62 
compûed_vîsi⁄
 = (
Õc_obje˘_t
 *)
	`lookup_obje˘_hash
(
buf
);

65 
√w_ob
 = 
	`lﬂd_obje˘
(
buf
, 
compûed_vîsi⁄
);

66 i‡(
√w_ob
 == 0) {

67 
	`Ârötf
(
°dîr
, "The master file %s wasÇotÜoaded.\n",

68 
MASTER_FILE
);

69 
	`exô
(-1);

71 
	`£t_ma°î
(
√w_ob
);

72 
	}
}

74 
gë_ma°î_≠∂õs
 
	$P1
(
obje˘_t
 *, 
ob
) {

75 
i
;

78 i‡(
ma°î_≠∂õs
)

79 
	`FREE
(
ma°î_≠∂õs
);

80 
ma°î_≠∂õs
 = 
	`CALLOCATE
(
NUM_MASTER_APPLIES
, 
fun˘i⁄_lookup_öfo_t
,

81 
TAG_SIMULS
, "get_master_applies");

83 
i
 = 0; i < 
NUM_MASTER_APPLIES
; i++) {

84 *
«me
 = 
≠∂õs_èbÀ
[
i
];

85 
öd
, 
ri
;

87 i‡(
	`föd_fun˘i⁄_by_«me
(
ob
, 
«me
, &
öd
, &
ri
)) {

88 
ma°î_≠∂õs
[
i
].
func
 = 
	`föd_func_íåy
(
ob
->
¥og
, 
ri
);

89 
ma°î_≠∂õs
[
i
].
ödex
 = 
ri
;

91 
ma°î_≠∂õs
[
i
].
func
 = 0;

94 
	}
}

96 
£t_ma°î
 
	$P1
(
obje˘_t
 *, 
ob
) {

97 #i‡
	`deföed
(
PACKAGE_UIDS
Ë|| deföed(
PACKAGE_MUDLIB_STATS
)

98 
fú°_lﬂd
 = (!
ma°î_ob
);

100 #ifde‡
PACKAGE_UIDS


101 
svÆue_t
 *
ªt
;

104 
	`gë_ma°î_≠∂õs
(
ob
);

105 
ma°î_ob
 = 
ob
;

107 
	`add_ªf
(
ma°î_ob
, "set_master");

108 #i‚de‡
PACKAGE_UIDS


109 #ifde‡
PACKAGE_MUDLIB_STATS


110 i‡(
fú°_lﬂd
) {

111 
	`£t_backb⁄e_domaö
("BACKBONE");

112 
	`£t_ma°î_auth‹
("NONAME");

116 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_GET_ROOT_UID
, 0);

118 i‡(!
ªt
) {

119 
	`debug_mesßge
("No function %s() in master object;ÖossiblyÅhe mudlib doesn't want PACKAGE_UIDSÅo be defined.\n",

120 
≠∂õs_èbÀ
[
APPLY_GET_ROOT_UID
]);

121 
	`exô
(-1);

123 i‡(
ªt
->
ty≥
 !
T_STRING
) {

124 
	`debug_mesßge
("%s() in master object doesÇot work.\n",

125 
≠∂õs_èbÀ
[
APPLY_GET_ROOT_UID
]);

126 
	`exô
(-1);

128 i‡(
fú°_lﬂd
) {

129 
ma°î_ob
->
uid
 = 
	`£t_roŸ_uid
(
ªt
->
u
.
°rög
);

130 
ma°î_ob
->
euid
 = ma°î_ob->
uid
;

131 #ifde‡
PACKAGE_MUDLIB_STATS


132 
	`£t_ma°î_auth‹
(
ªt
->
u
.
°rög
);

134 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_GET_BACKBONE_UID
, 0);

135 i‡(
ªt
 =0 ||Ñë->
ty≥
 !
T_STRING
) {

136 
	`debug_mesßge
("%s() inÅhe master file doesÇot work\n",

137 
≠∂õs_èbÀ
[
APPLY_GET_BACKBONE_UID
]);

138 
	`exô
(-1);

140 
	`£t_backb⁄e_uid
(
ªt
->
u
.
°rög
);

141 #ifde‡
PACKAGE_MUDLIB_STATS


142 
	`£t_backb⁄e_domaö
(
ªt
->
u
.
°rög
);

145 
ma°î_ob
->
uid
 = 
	`add_uid
(
ªt
->
u
.
°rög
);

146 
ma°î_ob
->
euid
 = ma°î_ob->
uid
;

149 
	}
}

	@master.h

1 #i‚de‡
MASTER_H


2 
	#MASTER_H


	)

4 
	~"Õc_ö˛.h
"

7 
	#MASTER_APPROVED
(
x
Ë(((x)==(
svÆue_t
 *)-1Ë|| ((xË&& (((x)->
ty≥
 !
T_NUMBER
Ë|| (x)->
u
.
numbî
)))

	)

9 
obje˘_t
 *
ma°î_ob
;

11 
svÆue_t
 *
≠∂y_ma°î_ob
 
PROT
((, ));

12 
svÆue_t
 *
ß„_≠∂y_ma°î_ob
 
PROT
((, ));

13 
öô_ma°î
 
PROT
(());

14 
£t_ma°î
 
PROT
((
obje˘_t
 *));

	@md.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"fûe.h
"

4 
	~"md.h
"

5 #ifde‡
DEBUGMALLOC_EXTENSIONS


6 
	~"comm.h
"

7 
	~"Àx.h
"

8 
	~"simul_efun.h
"

9 
	~"sw≠.h
"

10 
	~"ˇŒ_out.h
"

11 
	~"m≠pög.h
"

12 #i‡
deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

13 
	~"sockë_efuns.h
"

15 
	~"cfuns.h
"

17 
	~"ma°î.h
"

19 #ifde‡
PACKAGE_PARSER


20 
	~"∑ckages/∑r£r.h
"

33 #ifde‡
DEBUGMALLOC


35 
	#LEFT_MAGIC
(
node
Ë(“ode)->
magic
)

	)

36 
	#RIGHT_MAGIC_ADDR
(
node
Ë((*)“odeË+ (
md_node_t
Ë+ (node)->
size
)

	)

37 
	#STORE_RIGHT_MAGIC
(
node
) \

38 *(
	`RIGHT_MAGIC_ADDR
(
node
)Ë()(
MD_MAGIC
 >> 24) & 0xff; \

39 *(
	`RIGHT_MAGIC_ADDR
(
node
)+1Ë()(
MD_MAGIC
 >> 16) & 0xff; \

40 *(
	`RIGHT_MAGIC_ADDR
(
node
)+2Ë()(
MD_MAGIC
 >> 8) & 0xff; \

41 *(
	`RIGHT_MAGIC_ADDR
(
node
)+3Ë()
MD_MAGIC
 & 0xff

	)

42 
	#FETCH_RIGHT_MAGIC
(
l
, 
node
) \

43 
l
 = (*(
	`RIGHT_MAGIC_ADDR
(
node
)) << 24) + \

44 (*(
	`RIGHT_MAGIC_ADDR
(
node
) + 1) << 16) + \

45 (*(
	`RIGHT_MAGIC_ADDR
(
node
) + 2) << 8) + \

46 (*(
	`RIGHT_MAGIC_ADDR
(
node
Ë+ 3))

	)

48 
	gtŸÆs
[
MAX_CATEGORY
];

49 
	gblocks
[
MAX_CATEGORY
];

51 *
	gsour˚s
[] = {

65 
	gmÆloc_mask
 = 121;

67 
md_node_t
 **
	gèbÀ
;

68 
	gtŸÆ_mÆlo˚d
 = 0L;

69 
	ghiw©î
 = 0L;

71 #ifde‡
DEBUGMALLOC_EXTENSIONS


72 
check_Æl_blocks
 
PROT
(());

74 
outbuf„r_t
 
	gout
;

76 
MDmemcheck
();

78 
	$MDmemcheck
() {

79 
	`check_Æl_blocks
(2);

80 i‡(
out
.
buf„r
)

81 
	`Áèl
("I¡î«»mem‹y check faûed: %s\n", 
out
.
buf„r
);

82 
	}
}

85 
	$MDöô
()

87 
j
;

89 
èbÀ
 = (
md_node_t
 **Ë
	`ˇŒoc
(
MD_TABLE_SIZE
, (md_node_t *));

90 
j
 = 0; j < 
MAX_CATEGORY
; j++) {

91 
tŸÆs
[
j
] = 0;

93 
	}
}

96 
MDmÆloc
 
	$P4
(
md_node_t
 *, 
node
, , 
size
, , 
èg
, *, 
desc
)

98 
h
;

99 
cou¡
 = 0;

101 i‡(!
size
) {

102 
	`debug_mesßge
("md: debugmalloc:áttemptedÅoállocate zero bytes\n");

103 #ifde‡
DEBUG


104 
	`ab‹t
();

108 
tŸÆ_mÆlo˚d
 +
size
;

109 i‡(
tŸÆ_mÆlo˚d
 > 
hiw©î
) {

110 
hiw©î
 = 
tŸÆ_mÆlo˚d
;

112 
h
 = 
	`MD_HASH
(
node
);

113 
node
->
size
 = size;

114 
node
->
√xt
 = 
èbÀ
[
h
];

115 #ifde‡
CHECK_MEMORY


116 
	`LEFT_MAGIC
(
node
Ë
MD_MAGIC
;

117 
	`STORE_RIGHT_MAGIC
(
node
);

119 #ifde‡
DEBUGMALLOC_EXTENSIONS


120 i‡((
èg
 & 0xffË< 
MAX_CATEGORY
) {

121 
tŸÆs
[
èg
 & 0xff] +
size
;

122 
blocks
[
èg
 & 0xff]++;

124 i‡(((
èg
 >> 8Ë& 0xffË< 
MAX_CATEGORY
) {

125 
tŸÆs
[(
èg
 >> 8Ë& 0xff] +
size
;

126 
blocks
[(
èg
 >> 8) & 0xff]++;

128 
node
->
èg
 =Åag;

129 
node
->
id
 = 
cou¡
++;

130 
node
->
desc
 = desc ? desc : "default";

131 i‡(
mÆloc_mask
 =
node
->
èg
) {

132 
	`debug_mesßge
("MDmalloc: %5d, [%-25s], %8x:(%d)\n",

133 
node
->
èg
,Çode->
desc
, (Ë
	`PTR
“ode),Çode->
size
);

136 
èbÀ
[
h
] = 
node
;

137 
	}
}

139 #ifde‡
DEBUGMALLOC_EXTENSIONS


140 
£t_èg
 
	$P2
(*, 
±r
, , 
èg
) {

141 
md_node_t
 *
node
 = 
	`PTR_TO_NODET
(
±r
);

143 i‡((
node
->
èg
 & 0xffË< 
MAX_CATEGORY
) {

144 
tŸÆs
[
node
->
èg
 & 0xff] -node->
size
;

145 
blocks
[
node
->
èg
 & 0xff]--;

147 i‡(((
node
->
èg
 >> 8Ë& 0xffË< 
MAX_CATEGORY
) {

148 
tŸÆs
[(
node
->
èg
 >> 8Ë& 0xff] -node->
size
;

149 
blocks
[(
node
->
èg
 >> 8) & 0xff]--;

151 
node
->
èg
 =Åag;

152 i‡((
node
->
èg
 & 0xffË< 
MAX_CATEGORY
) {

153 
tŸÆs
[
node
->
èg
 & 0xff] +node->
size
;

154 
blocks
[
node
->
èg
 & 0xff]++;

156 i‡(((
node
->
èg
 >> 8Ë& 0xffË< 
MAX_CATEGORY
) {

157 
tŸÆs
[(
node
->
èg
 >> 8Ë& 0xff] +node->
size
;

158 
blocks
[(
node
->
èg
 >> 8) & 0xff]++;

160 
	}
}

164 
MD‰ì
 
	$P1
(*, 
±r
)

166 
h
;

167 
tmp
;

168 
md_node_t
 *
íåy
, **
€¡ry
;

170 
h
 = 
	`MD_HASH
(
±r
);

171 
€¡ry
 = &
èbÀ
[
h
];

172 
íåy
 = *
€¡ry
;É¡ry; oíåy = &íåy->
√xt
,Éntry = *oentry) {

173 i‡(
íåy
 =
±r
) {

174 *
€¡ry
 = 
íåy
->
√xt
;

175 
tŸÆ_mÆlo˚d
 -
íåy
->
size
;

179 i‡(
íåy
) {

180 #ifde‡
CHECK_MEMORY


181 i‡(
	`LEFT_MAGIC
(
íåy
Ë!
MD_MAGIC
) {

182 
	`debug_mesßge
("MD‰ì:Üe· sidêo‡íåy c‹ru±: %†%04xáà%x\n", 
íåy
->
desc
, (Î¡ry->
èg
, ()entry);

184 
	`FETCH_RIGHT_MAGIC
(
tmp
, 
íåy
);

185 i‡(
tmp
 !
MD_MAGIC
) {

186 
	`debug_mesßge
("MD‰ì:Ñighàsidêo‡íåy c‹ru±: %†%04xáà%x\n", 
íåy
->
desc
, (Î¡ry->
èg
, ()entry);

189 #ifde‡
DEBUGMALLOC_EXTENSIONS


190 i‡((
íåy
->
èg
 & 0xffË< 
MAX_CATEGORY
) {

191 
tŸÆs
[
íåy
->
èg
 & 0xff] -íåy->
size
;

192 
blocks
[
íåy
->
èg
 & 0xff]--;

194 i‡(((
íåy
->
èg
 >> 8Ë& 0xffË< 
MAX_CATEGORY
) {

195 
tŸÆs
[(
íåy
->
èg
 >> 8Ë& 0xff] -íåy->
size
;

196 
blocks
[(
íåy
->
èg
 >> 8) & 0xff]--;

198 i‡(
mÆloc_mask
 =
íåy
->
èg
) {

199 
	`debug_mesßge
("MDfree: %5d, [%-25s], %8x:(%d)\n",

200 
íåy
->
èg
,É¡ry->
desc
, (Ë
	`PTR
”¡ry),É¡ry->
size
);

204 
	`debug_mesßge
("md: debugmalloc:áttemptedÅo freeÇon-malloc'dÖointer %04x\n",

205 (Ë
±r
);

206 #ifde‡
DEBUG


207 
	`ab‹t
();

212 
	}
}

214 #ifde‡
DEBUGMALLOC_EXTENSIONS


215 *
dump_debugmÆloc
 
	$P2
(*, 
t‚
, , 
mask
)

217 
j
, 
tŸÆ
 = 0, 
chunks
 = 0, 
tŸÆ2
 = 0;

218 *
‚
;

219 
md_node_t
 *
íåy
;

220 
FILE
 *
Â
;

222 
	`outbuf_zîo
(&
out
);

223 
‚
 = 
	`check_vÆid_∑th
(
t‚
, 
cuºít_obje˘
, "debugmalloc", 1);

224 i‡(!
‚
) {

225 
	`îr‹
("InvÆidÖ©h '%s' f‹ wrôög.\n", 
t‚
);

227 
Â
 = 
	`f›í
(
‚
, "w");

228 i‡(!
Â
) {

229 
	`îr‹
("U«bÀÅÿ›í %†f‹ wrôög.\n", 
‚
);

231 
j
 = 0; j < 
MD_TABLE_SIZE
; j++) {

232 
íåy
 = 
èbÀ
[
j
];É¡ry;É¡ry =É¡ry->
√xt
) {

233 i‡(!
mask
 || (
íåy
->
èg
 == mask)) {

234 
	`Ârötf
(
Â
, "%-30s: sz %7d: id %6d:Åag %08x,á %8x\n",

235 
íåy
->
desc
,É¡ry->
size
,É¡ry->
id
,É¡ry->
èg
,

236 (Ë
	`PTR
(
íåy
));

237 
tŸÆ
 +
íåy
->
size
;

238 
chunks
++;

242 
	`Ârötf
(
Â
, "tŸÆ = %8d\n", 
tŸÆ
);

243 
	`Ârötf
(
Â
, "# chunk†%8d\n", 
chunks
);

244 
	`Ârötf
(
Â
, "ave. byã†≥∏chunk = %7.2f\n\n", (Ë
tŸÆ
 / 
chunks
);

245 
	`Ârötf
(
Â
, "categories:\n\n");

246 
j
 = 0; j < 
MAX_CATEGORY
; j++) {

247 
	`Ârötf
(
Â
, "%4d: %10d\n", 
j
, 
tŸÆs
[j]);

248 
tŸÆ2
 +
tŸÆs
[
j
];

250 
	`Ârötf
(
Â
, "\¡ŸÆ = %11d\n", 
tŸÆ2
);

251 
	`f˛o£
(
Â
);

252 
	`outbuf_addv
(&
out
, "tŸÆ = %8d\n", 
tŸÆ
);

253 
	`outbuf_addv
(&
out
, "# chunk†%8d\n", 
chunks
);

254 i‡(
chunks
) {

255 
	`outbuf_addv
(&
out
, "ave. byã†≥∏chunk = %7.2f\n", (Ë
tŸÆ
 / 
chunks
);

257 
	`outbuf_fix
(&
out
);

258  
out
.
buf„r
;

259 
	}
}

262 
£t_mÆloc_mask
 
	$P1
(, 
mask
)

264 
mÆloc_mask
 = 
mask
;

265 
	}
}

267 #ifde‡
DEBUGMALLOC_EXTENSIONS


268 
m¨k_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
) {

269 #i‚de‡
NO_ADD_ACTION


270 
£¡í˚_t
 *
£¡
;

272 
i
;

274 i‡(
ob
->
¥og
)

275 
ob
->
¥og
->
exåa_ªf
++;

277 i‡(
ob
->
«me
) {

278 
	`DO_MARK
(
ob
->
«me
, 
TAG_OBJ_NAME
);

281 i‡(
ob
->
ª∂a˚d_¥ogøm
)

282 
	`EXTRA_REF
(
	`BLOCK
(
ob
->
ª∂a˚d_¥ogøm
))++;

284 #ifde‡
PRIVS


285 i‡(
ob
->
¥ivs
)

286 
	`EXTRA_REF
(
	`BLOCK
(
ob
->
¥ivs
))++;

289 #i‚de‡
NO_ADD_ACTION


290 i‡(
ob
->
livög_«me
)

291 
	`EXTRA_REF
(
	`BLOCK
(
ob
->
livög_«me
))++;

293 
£¡
 = 
ob
->sent;

295 
£¡
) {

296 
	`DO_MARK
(
£¡
, 
TAG_SENTENCE
);

297 i‡(
£¡
->
Êags
 & 
V_FUNCTION
)

298 
£¡
->
fun˘i⁄
.
f
->
hdr
.
exåa_ªf
++;

300 i‡(
£¡
->
fun˘i⁄
.
s
)

301 
	`EXTRA_REF
(
	`BLOCK
(
£¡
->
fun˘i⁄
.
s
))++;

303 i‡(
£¡
->
vîb
)

304 
	`EXTRA_REF
(
	`BLOCK
(
£¡
->
vîb
))++;

305 
£¡
 = sít->
√xt
;

309 #ifde‡
PACKAGE_PARSER


310 i‡(
ob
->
pöfo
)

311 
	`∑r£r_m¨k
(
ob
->
pöfo
);

314 i‡(
ob
->
¥og
)

315 
i
 = 0; i < 
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++)

316 
	`m¨k_svÆue
(&
ob
->
v¨übÀs
[
i
]);

318 
	`outbuf_addv
(&
out
, "can't mark variables; %s is swapped.\n",

319 
ob
->
«me
);

320 
	}
}

322 
m¨k_svÆue
 
	$P1
(
svÆue_t
 *, 
sv
) {

323 
sv
->
ty≥
) {

324 
T_OBJECT
:

325 
sv
->
u
.
ob
->
exåa_ªf
++;

327 
T_ARRAY
:

328 
sv
->
u
.
¨r
->
exåa_ªf
++;

330 
T_CLASS
:

331 
sv
->
u
.
¨r
->
exåa_ªf
++;

333 
T_MAPPING
:

334 
sv
->
u
.
m≠
->
exåa_ªf
++;

336 
T_FUNCTION
:

337 
sv
->
u
.
Â
->
hdr
.
exåa_ªf
++;

339 #i‚de‡
NO_BUFFER_TYPE


340 
T_BUFFER
:

341 
sv
->
u
.
buf
->
exåa_ªf
++;

344 
T_STRING
:

345 
sv
->
subty≥
) {

346 
STRING_MALLOC
:

347 
	`MSTR_EXTRA_REF
(
sv
->
u
.
°rög
)++;

349 
STRING_SHARED
:

350 
	`EXTRA_REF
(
	`BLOCK
(
sv
->
u
.
°rög
))++;

354 
	}
}

356 
m¨k_fu≈
 
	$P1
(
fu≈å_t
*, 
Â
) {

357 i‡(
Â
->
hdr
.
¨gs
)

358 
Â
->
hdr
.
¨gs
->
exåa_ªf
++;

360 i‡(
Â
->
hdr
.
ow√r
)

361 
Â
->
hdr
.
ow√r
->
exåa_ªf
++;

362 
Â
->
hdr
.
ty≥
) {

363 
FP_LOCAL
 | 
FP_NOT_BINDABLE
:

364 i‡(
Â
->
hdr
.
ow√r
)

365 
Â
->
hdr
.
ow√r
->
¥og
->
exåa_func_ªf
++;

367 
FP_FUNCTIONAL
:

368 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

369 
Â
->
f
.
fun˘i⁄Æ
.
¥og
->
exåa_func_ªf
++;

372 
	}
}

374 
m¨k_£¡í˚
 
	$P1
(
£¡í˚_t
 *, 
£¡
) {

375 i‡(
£¡
->
Êags
 & 
V_FUNCTION
) {

376 i‡(
£¡
->
fun˘i⁄
.
f
)

377 
£¡
->
fun˘i⁄
.
f
->
hdr
.
exåa_ªf
++;

379 i‡(
£¡
->
fun˘i⁄
.
s
)

380 
	`EXTRA_REF
(
	`BLOCK
(
£¡
->
fun˘i⁄
.
s
))++;

382 #i‚de‡
NO_ADD_ACTION


383 i‡(
£¡
->
vîb
)

384 
	`EXTRA_REF
(
	`BLOCK
(
£¡
->
vîb
))++;

386 
	}
}

388 
	g¥öt_dïth
 = 0;

390 
md_¥öt_¨øy
 
	$P1
(
¨øy_t
 *, 
vec
) {

391 
i
;

393 
	`outbuf_add
(&
out
, "({ ");

394 
i
=0; i < 
vec
->
size
; i++) {

395 
vec
->
ôem
[
i
].
ty≥
) {

396 
T_INVALID
:

397 
	`outbuf_add
(&
out
, "INVALID");

399 
T_NUMBER
:

400 
	`outbuf_addv
(&
out
, "%d", 
vec
->
ôem
[
i
].
u
.
numbî
);

402 
T_REAL
:

403 
	`outbuf_addv
(&
out
, "%f", 
vec
->
ôem
[
i
].
u
.
ªÆ
);

405 
T_STRING
:

406 
	`outbuf_addv
(&
out
, "\"%s\"", 
vec
->
ôem
[
i
].
u
.
°rög
);

408 
T_ARRAY
:

409 i‡(
¥öt_dïth
 < 2) {

410 
¥öt_dïth
++;

411 
	`md_¥öt_¨øy
(
vec
->
ôem
[
i
].
u
.
¨r
);

413 
	`outbuf_add
(&
out
, "({ ... })");

416 
T_CLASS
:

417 
	`outbuf_add
(&
out
, "<class>");

419 #i‚de‡
NO_BUFFER_TYPE


420 
T_BUFFER
:

421 
	`outbuf_add
(&
out
, "<buffer>");

424 
T_FUNCTION
:

425 
	`outbuf_add
(&
out
, "<function>");

427 
T_MAPPING
:

428 
	`outbuf_add
(&
out
, "<mapping>");

430 
T_OBJECT
:

431 
	`outbuf_addv
(&
out
, "OBJ(%s)", 
vec
->
ôem
[
i
].
u
.
ob
->
«me
);

434 i‡(
i
 !
vec
->
size
 - 1Ë
	`outbuf_add
(&
out
, ", ");

436 
	`outbuf_add
(&
out
, " })\n");

437 
¥öt_dïth
--;

438 
	}
}

440 
m¨k_c⁄fig
 
PROT
(()) {

441 
	gi
;

443 
	gi
 = 0; i < 
	gNUM_CONFIG_STRS
; i++) {

444 
DO_MARK
(
c⁄fig_°r
[
i
], 
TAG_STRING
);

448 #i‡
deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

449 
m¨k_sockës
 
PROT
(()) {

450 
	gi
;

451 *
	gs
;

453 
	gi
 = 0; i < 
	gmax_Õc_socks
; i++) {

454 i‡(
	gÕc_socks
[
i
].
	gÊags
 & 
	gS_READ_FP
) {

455 
	gÕc_socks
[
i
].
	gªad_ˇŒback
.
	gf
->
	ghdr
.
	gexåa_ªf
++;

457 i‡((
	gs
 = 
Õc_socks
[
i
].
ªad_ˇŒback
.
s
)) {

458 
EXTRA_REF
(
BLOCK
(
s
))++;

460 i‡(
	gÕc_socks
[
i
].
	gÊags
 & 
	gS_WRITE_FP
) {

461 
	gÕc_socks
[
i
].
	gwrôe_ˇŒback
.
	gf
->
	ghdr
.
	gexåa_ªf
++;

463 i‡((
	gs
 = 
Õc_socks
[
i
].
wrôe_ˇŒback
.
s
)) {

464 
EXTRA_REF
(
BLOCK
(
s
))++;

466 i‡(
	gÕc_socks
[
i
].
	gÊags
 & 
	gS_CLOSE_FP
) {

467 
	gÕc_socks
[
i
].
	g˛o£_ˇŒback
.
	gf
->
	ghdr
.
	gexåa_ªf
++;

469 i‡((
	gs
 = 
Õc_socks
[
i
].
˛o£_ˇŒback
.
s
)) {

470 
EXTRA_REF
(
BLOCK
(
s
))++;

476 #ifde‡
STRING_STATS


477 
	gba£_ovîhód
 = 0;

482 
compuã_°rög_tŸÆs
 
	$P3
(*, 
a•
, *, 
abp
, *, 
bp
) {

483 
hsh
;

484 
md_node_t
 *
íåy
;

485 
mÆloc_block_t
 *
msbl
;

486 
block_t
 *
ssbl
;

488 *
a•
 = 0;

489 *
abp
 = 0;

490 *
bp
 = 0;

492 
hsh
 = 0; hsh < 
MD_TABLE_SIZE
; hsh++) {

493 
íåy
 = 
èbÀ
[
hsh
];É¡ry;É¡ry =É¡ry->
√xt
) {

494 i‡(
íåy
->
èg
 =
TAG_MALLOC_STRING
) {

495 
msbl
 = 
	`NODET_TO_PTR
(
íåy
, 
mÆloc_block_t
*);

496 *
bp
 +
msbl
->
size
 + 1;

497 *
a•
 +
msbl
->
ªf
;

498 *
abp
 +
msbl
->
ªf
 * (msbl->
size
 + 1);

500 i‡(
íåy
->
èg
 =
TAG_SHARED_STRING
) {

501 
ssbl
 = 
	`NODET_TO_PTR
(
íåy
, 
block_t
*);

502 *
bp
 +
ssbl
->
size
 + 1;

503 *
a•
 +
ssbl
->
ªfs
;

504 *
abp
 +
ssbl
->
ªfs
 * (ssbl->
size
 + 1);

508 
	}
}

515 
check_°rög_°©s
 
	$P1
(
outbuf„r_t
 *, 
out
) {

516 
ovîhód
 = 
blocks
[
TAG_SHARED_STRING
 & 0xff] * (
block_t
)

517 + 
blocks
[
TAG_MALLOC_STRING
 & 0xff] * (
mÆloc_block_t
);

518 
num
 = 
blocks
[
TAG_SHARED_STRING
 & 0xff] + blocks[
TAG_MALLOC_STRING
 & 0xff];

519 
byãs
, 
as
, 
ab
;

521 
	`compuã_°rög_tŸÆs
(&
as
, &
ab
, &
byãs
);

523 i‡(!
ba£_ovîhód
)

524 
ba£_ovîhód
 = 
ovîhód_byãs
 - 
ovîhód
;

525 
ovîhód
 +
ba£_ovîhód
;

527 i‡(
num
 !
num_di°ö˘_°rögs
) {

528 i‡(
out
) {

529 
	`outbuf_addv
(
out
, "WARNING:Çum_distinct_strings is: %i should be: %i\n",

530 
num_di°ö˘_°rögs
, 
num
);

532 
	`¥ötf
("WARNING:Çum_distinct_strings is: %i should be: %i\n",

533 
num_di°ö˘_°rögs
, 
num
);

534 
	`ab‹t
();

537 i‡(
ovîhód
 !
ovîhód_byãs
) {

538 i‡(
out
) {

539 
	`outbuf_addv
(
out
, "WARNING: overhead_bytes is: %i should be: %i\n",

540 
ovîhód_byãs
, 
ovîhód
);

542 
	`¥ötf
("WARNING: overhead_bytes is: %i should be: %i\n",

543 
ovîhód_byãs
, 
ovîhód
);

544 
	`ab‹t
();

547 i‡(
byãs
 !
byãs_di°ö˘_°rögs
) {

548 i‡(
out
) {

549 
	`outbuf_addv
(
out
, "WARNING: bytes_distinct_strings is: %i should be: %i\n",

550 
byãs_di°ö˘_°rögs
, 
byãs
 - (
ovîhód
 - 
ba£_ovîhód
));

552 
	`¥ötf
("WARNING: bytes_distinct_strings is: %i should be: %i\n",

553 
byãs_di°ö˘_°rögs
, 
byãs
 - (
ovîhód
 - 
ba£_ovîhód
));

554 
	`ab‹t
();

557 i‡(
Ælocd_°rögs
 !
as
) {

558 i‡(
out
) {

559 
	`outbuf_addv
(
out
, "WARNING:állocd_strings is: %i should be: %i\n",

560 
Ælocd_°rögs
, 
as
);

562 
	`¥ötf
("WARNING:állocd_strings is: %i should be: %i\n",

563 
Ælocd_°rögs
, 
as
);

564 
	`ab‹t
();

567 i‡(
Ælocd_byãs
 !
ab
) {

568 i‡(
out
) {

569 
	`outbuf_addv
(
out
, "WARNING:állocd_bytes is: %i should be: %i\n",

570 
Ælocd_byãs
, 
ab
);

572 
	`¥ötf
("WARNING:állocd_bytes is: %i should be: %i\n",

573 
Ælocd_byãs
, 
ab
);

574 
	`ab‹t
();

577 
	}
}

581 
check_Æl_blocks
 
	$P1
(, 
Êag
) {

582 
i
, 
j
, 
hsh
;

583 
tmp
;

584 
md_node_t
 *
íåy
;

585 
obje˘_t
 *
ob
;

586 
¨øy_t
 *
vec
;

587 
m≠pög_t
 *
m≠
;

588 #i‚de‡
NO_BUFFER_TYPE


589 
buf„r_t
 *
buf
;

591 
fu≈å_t
 *
Â
;

592 
m≠pög_node_t
 *
node
;

593 
¥ogøm_t
 *
¥og
;

594 
£¡í˚_t
 *
£¡
;

595 *
±r
;

596 
block_t
 *
ssbl
;

597 
mÆloc_block_t
 *
msbl
;

598 
svÆue_t
 
≠∂y_ªt_vÆue
;

601 
num
 = 0, 
tŸÆ
 = 0;

605 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
) {

606 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

607 
	`lﬂd_ob_‰om_sw≠
(
ob
);

610 
	`outbuf_zîo
(&
out
);

611 i‡(!(
Êag
 & 2))

612 
	`outbuf_add
(&
out
, "Performing memoryÅests ...\n");

614 
hsh
 = 0; hsh < 
MD_TABLE_SIZE
; hsh++) {

615 
íåy
 = 
èbÀ
[
hsh
];É¡ry;É¡ry =É¡ry->
√xt
) {

616 
íåy
->
èg
 &~
TAG_MARKED
;

617 #ifde‡
CHECK_MEMORY


618 i‡(
	`LEFT_MAGIC
(
íåy
Ë!
MD_MAGIC
) {

619 
	`outbuf_addv
(&
out
, "WARNING:Üe· sidêo‡íåy c‹ru±: %†%04xáà%x\n", 
íåy
->
desc
, (Î¡ry->
èg
, ()entry);

621 
	`FETCH_RIGHT_MAGIC
(
tmp
, 
íåy
);

622 i‡(
tmp
 !
MD_MAGIC
) {

623 
	`outbuf_addv
(&
out
, "WARNING:Ñighàsidêo‡íåy c‹ru±: %†%04xáà%x\n", 
íåy
->
desc
, (Î¡ry->
èg
, ()entry);

626 
íåy
->
èg
 & 0xff00) {

627 
TAG_TEMPORARY
:

628 i‡(!(
Êag
 & 2))

629 
	`outbuf_addv
(&
out
, "WARNING: FoundÅemp‹¨y block: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

631 
TAG_COMPILER
:

632 i‡(!(
Êag
 & 2))

633 
	`outbuf_addv
(&
out
, "Found compûî block: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

635 
TAG_MISC
:

636 
	`outbuf_addv
(&
out
, "Found mis˚Œ™eou†block: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

639 
íåy
->
èg
) {

640 
TAG_OBJECT
:

641 
ob
 = 
	`NODET_TO_PTR
(
íåy
, 
obje˘_t
 *);

642 
ob
->
exåa_ªf
 = 0;

644 
TAG_PROGRAM
:

645 
¥og
 = 
	`NODET_TO_PTR
(
íåy
, 
¥ogøm_t
 *);

646 
¥og
->
exåa_ªf
 = 0;

647 
¥og
->
exåa_func_ªf
 = 0;

649 
TAG_MALLOC_STRING
:

651 *
°r
;

653 
msbl
 = 
	`NODET_TO_PTR
(
íåy
, 
mÆloc_block_t
 *);

656 i‡(
msbl
 =
	`MSTR_BLOCK
(
out
.
buf„r
))

659 
°r
 = (*)(
msbl
 + 1);

660 
msbl
->
exåa_ªf
 = 0;

661 i‡(
msbl
->
size
 !
USHRT_MAX
 && msbl->sizê!
	`°æí
(
°r
)) {

662 
	`outbuf_addv
(&
out
, "MÆloc'ed såögÜígth i†öc‹ª˘: %†%04x '%s': is: %òshould be: %i\n", 
íåy
->
desc
, (Î¡ry->
èg
, 
°r
, 
msbl
->
size
, 
	`°æí
(str));

666 
TAG_SHARED_STRING
:

667 
ssbl
 = 
	`NODET_TO_PTR
(
íåy
, 
block_t
 *);

668 
	`EXTRA_REF
(
ssbl
) = 0;

670 
TAG_ARRAY
:

671 
vec
 = 
	`NODET_TO_PTR
(
íåy
, 
¨øy_t
 *);

672 
vec
->
exåa_ªf
 = 0;

674 
TAG_CLASS
:

675 
vec
 = 
	`NODET_TO_PTR
(
íåy
, 
¨øy_t
 *);

676 
vec
->
exåa_ªf
 = 0;

678 
TAG_MAPPING
:

679 
m≠
 = 
	`NODET_TO_PTR
(
íåy
, 
m≠pög_t
 *);

680 
m≠
->
exåa_ªf
 = 0;

682 
TAG_FUNP
:

683 
Â
 = 
	`NODET_TO_PTR
(
íåy
, 
fu≈å_t
 *);

684 
Â
->
hdr
.
exåa_ªf
 = 0;

686 #i‚de‡
NO_BUFFER_TYPE


687 
TAG_BUFFER
:

688 
buf
 = 
	`NODET_TO_PTR
(
íåy
, 
buf„r_t
 *);

689 
buf
->
exåa_ªf
 = 0;

696 i‡(!(
Êag
 & 2)) {

698 i‡(
blocks
[
TAG_SIMULS
 & 0xff] > 3)

699 
	`outbuf_add
(&
out
, "WARNING: moreÅhanÅhree simul_efunÅablesállocated.\n");

700 i‡(
blocks
[
TAG_INC_LIST
 & 0xff] > 1)

701 
	`outbuf_add
(&
out
, "WARNING: moreÅhan one includeÜistállocated.\n");

702 i‡(
blocks
[
TAG_IDENT_TABLE
 & 0xff] > 1)

703 
	`outbuf_add
(&
out
, "WARNING: moreÅhan one identifier hashÅableállocated.\n");

704 i‡(
blocks
[
TAG_RESERVED
 & 0xff] > 1)

705 
	`outbuf_add
(&
out
, "WARNING: moreÅhan oneÑeserved blockállocated.\n");

706 i‡(
blocks
[
TAG_OBJ_TBL
 & 0xff] > 1)

707 
	`outbuf_add
(&
out
, "WARNING: moreÅhan objectÅableállocated.\n");

708 i‡(
blocks
[
TAG_CONFIG
 & 0xff] > 1)

709 
	`outbuf_add
(&
out
, "WARNING: moreÅhan config fileÅableállocated.\n");

710 i‡(
blocks
[
TAG_STR_TBL
 & 0xff] > 1)

711 
	`outbuf_add
(&
out
, "WARNING: moreÅhan stringÅableállocated.\n");

712 i‡(
tŸÆs
[
TAG_CALL_OUT
 & 0xff] !
	`¥öt_ˇŒ_out_ußge
(&
out
, -1))

713 
	`outbuf_add
(&
out
, "WARNING: wrongÇumber of call_out blocksállocated.\n");

714 i‡(
blocks
[
TAG_LOCALS
 & 0xff] > 3)

715 
	`outbuf_add
(&
out
, "WARNING: moreÅhan 3Üocal blocksállocated.\n");

717 i‡(
blocks
[
TAG_SENTENCE
 & 0xff] !
tŸ_Æloc_£¡í˚
)

718 
	`outbuf_addv
(&
out
, "WARNING:Åot_alloc_sentence is: %i should be: %i\n",

719 
tŸ_Æloc_£¡í˚
, 
blocks
[
TAG_SENTENCE
 & 0xff]);

720 i‡(
blocks
[
TAG_OBJECT
 & 0xff] !
tŸ_Æloc_obje˘
)

721 
	`outbuf_addv
(&
out
, "WARNING:Åot_alloc_object is: %i should be: %i\n",

722 
tŸ_Æloc_obje˘
, 
blocks
[
TAG_OBJECT
 & 0xff]);

723 i‡(
blocks
[
TAG_PROGRAM
 & 0xff] !
tŸÆ_num_¥og_blocks
)

724 
	`outbuf_addv
(&
out
, "WARNING:Åotal_num_prog_blocks is: %i should be: %i\n",

725 
tŸÆ_num_¥og_blocks
, 
blocks
[
TAG_PROGRAM
 & 0xff]);

726 #ifde‡
ARRAY_STATS


727 i‡(
blocks
[
TAG_ARRAY
 & 0xff] !
num_¨øys
)

728 
	`outbuf_addv
(&
out
, "WARNING:Çum_arrays is: %i should be: %i\n",

729 
num_¨øys
, 
blocks
[
TAG_ARRAY
 & 0xff]);

730 i‡(
tŸÆs
[
TAG_ARRAY
 & 0xff] !
tŸÆ_¨øy_size
)

731 
	`outbuf_addv
(&
out
, "WARNING:Åotal_array_size is: %i should be: %i\n",

732 
tŸÆ_¨øy_size
, 
tŸÆs
[
TAG_ARRAY
 & 0xff]);

734 i‡(
blocks
[
TAG_MAPPING
 & 0xff] !
num_m≠pögs
)

735 
	`outbuf_addv
(&
out
, "WARNING:Çum_mappings is: %i should be: %i\n",

736 
num_m≠pögs
, 
blocks
[
TAG_MAPPING
 & 0xff]);

737 i‡(
blocks
[
TAG_MAP_TBL
 & 0xff] !
num_m≠pögs
)

738 
	`outbuf_addv
(&
out
, "WARNING: %iÅables for %i mappings\n",

739 
blocks
[
TAG_MAP_TBL
 & 0xff], 
num_m≠pögs
);

740 i‡(
blocks
[
TAG_INTERACTIVE
 & 0xff] !
num_u£r
)

741 
	`outbuf_addv
(&
out
, "WATNING:Çum_user is: %i should be: %i\n",

742 
num_u£r
, 
blocks
[
TAG_INTERACTIVE
 & 0xff]);

743 #ifde‡
STRING_STATS


744 
	`check_°rög_°©s
(&
out
);

747 #ifde‡
PACKAGE_EXTERNAL


748 
i
 = 0; i < 
NUM_EXTERNAL_CMDS
; i++) {

749 i‡(
exã∫Æ_cmd
[
i
]) {

750 
	`DO_MARK
(
exã∫Æ_cmd
[
i
], 
TAG_STRING
);

756 
i
 = 0; i < 
max_u£rs
; i++)

757 i‡(
Æl_u£rs
[
i
]) {

758 
	`DO_MARK
(
Æl_u£rs
[
i
], 
TAG_INTERACTIVE
);

759 
Æl_u£rs
[
i
]->
ob
->
exåa_ªf
++;

760 i‡(
Æl_u£rs
[
i
]->
öput_to
) {

761 
Æl_u£rs
[
i
]->
öput_to
->
ob
->
exåa_ªf
++;

762 
	`DO_MARK
(
Æl_u£rs
[
i
]->
öput_to
, 
TAG_SENTENCE
);

763 
	`m¨k_£¡í˚
(
Æl_u£rs
[
i
]->
öput_to
);

764 i‡(
Æl_u£rs
[
i
]->
num_ˇºy
) {

765 
j
 = 0; j < 
Æl_u£rs
[
i
]->
num_ˇºy
; j++)

766 
	`m¨k_svÆue
(
Æl_u£rs
[
i
]->
ˇºyovî
 + 
j
);

770 #i‚de‡
NO_ADD_ACTION


771 i‡(
Æl_u£rs
[
i
]->
iÊags
 & 
NOTIFY_FAIL_FUNC
)

772 
Æl_u£rs
[
i
]->
deÁu…_îr_mesßge
.
f
->
hdr
.
exåa_ªf
++;

773 i‡(
Æl_u£rs
[
i
]->
deÁu…_îr_mesßge
.
s
)

774 
	`EXTRA_REF
(
	`BLOCK
(
Æl_u£rs
[
i
]->
deÁu…_îr_mesßge
.
s
))++;

778 i‡(*(
DEFAULT_FAIL_MESSAGE
)) {

779 
buf
[8192];

781 
	`°r˝y
(
buf
, 
DEFAULT_FAIL_MESSAGE
);

782 
	`°rˇt
(
buf
, "\n");

783 
	`EXTRA_REF
(
	`BLOCK
(
	`föd°rög
(
buf
)))++;

786 #ifde‡
PACKAGE_UIDS


787 
	`m¨k_Æl_uid_nodes
();

789 #ifde‡
PACKAGE_MUDLIB_STATS


790 
	`m¨k_mudlib_°©s
();

792 #i‡
	`deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

793 
	`m¨k_sockës
();

795 #ifde‡
PACKAGE_PARSER


796 
	`∑r£r_m¨k_vîbs
();

798 #ifde‡
LPC_TO_C


799 
	`m¨k_swôch_li°s
();

801 
	`m¨k_fûe_sv
();

802 
	`m¨k_Æl_deföes
();

803 
	`m¨k_‰ì_£¡í˚s
();

804 
	`m¨k_ùèbÀ
();

805 
	`m¨k_°ack
();

806 
	`m¨k_comm™d_givî_°ack
();

807 
	`m¨k_ˇŒ_outs
();

808 
	`m¨k_simuls
();

809 
	`m¨k_≠∂y_low_ˇche
();

810 
	`m¨k_m≠pög_node_blocks
();

811 
	`m¨k_c⁄fig
();

813 
	`m¨k_svÆue
(&
≠∂y_ªt_vÆue
);

815 i‡(
ma°î_ob
)

816 
ma°î_ob
->
exåa_ªf
++;

817 i‡(
simul_efun_ob
)

818 
simul_efun_ob
->
exåa_ªf
++;

819 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
) {

820 
ob
->
exåa_ªf
++;

823 
ob
 = 
obj_li°_de°ru˘
; ob; ob = ob->
√xt_Æl
) {

824 
ob
->
exåa_ªf
++;

827 
hsh
 = 0; hsh < 
MD_TABLE_SIZE
; hsh++) {

828 
íåy
 = 
èbÀ
[
hsh
];É¡ry;É¡ry =É¡ry->
√xt
) {

829 
íåy
->
èg
 & ~
TAG_MARKED
) {

830 
TAG_IDENT_TABLE
: {

831 
idít_hash_ñem_t
 *
h±r
, *
fú°
;

832 
idít_hash_ñem_t
 **
èbÀ
;

833 
size
;

835 
èbÀ
 = 
	`NODET_TO_PTR
(
íåy
, 
idít_hash_ñem_t
 **);

836 
size
 = (
íåy
->sizê/ 3Ë/ (
idít_hash_ñem_t
 *);

837 
i
 = 0; i < 
size
; i++) {

838 
fú°
 = 
èbÀ
[
i
];

839 i‡(
fú°
) {

840 
h±r
 = 
fú°
;

842 i‡(
h±r
->
tokí
 & (
IHE_SIMUL
 | 
IHE_EFUN
)) {

843 
	`DO_MARK
(
h±r
, 
TAG_PERM_IDENT
);

845 
h±r
 = h±r->
√xt
;

846 } 
h±r
 !
fú°
);

851 
TAG_FUNP
:

852 
Â
 = 
	`NODET_TO_PTR
(
íåy
, 
fu≈å_t
 *);

853 
	`m¨k_fu≈
(
Â
);

855 
TAG_ARRAY
:

856 
vec
 = 
	`NODET_TO_PTR
(
íåy
, 
¨øy_t
 *);

857 i‡(
íåy
->
size
 !(
¨øy_t
Ë+ (
svÆue_t
[1]Ë* (
vec
->size - 1))

858 
	`outbuf_addv
(&
out
, "¨øy sizêd€¢'àm©ch block size: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

859 
i
 = 0; i < 
vec
->
size
; i++Ë
	`m¨k_svÆue
(&vec->
ôem
[i]);

861 
TAG_CLASS
:

862 
vec
 = 
	`NODET_TO_PTR
(
íåy
, 
¨øy_t
 *);

863 i‡(
íåy
->
size
 !(
¨øy_t
Ë+ (
svÆue_t
[1]Ë* (
vec
->size - 1))

864 
	`outbuf_addv
(&
out
, "˛as†sizêd€¢'àm©ch block size: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

865 
i
 = 0; i < 
vec
->
size
; i++Ë
	`m¨k_svÆue
(&vec->
ôem
[i]);

867 
TAG_MAPPING
:

868 
m≠
 = 
	`NODET_TO_PTR
(
íåy
, 
m≠pög_t
 *);

869 
	`DO_MARK
(
m≠
->
èbÀ
, 
TAG_MAP_TBL
);

871 
i
 = 
m≠
->
èbÀ_size
;

873 
node
 = 
m≠
->
èbÀ
[
i
];Çode;Çodênode->
√xt
) {

874 
	`m¨k_svÆue
(
node
->
vÆues
);

875 
	`m¨k_svÆue
(
node
->
vÆues
 + 1);

877 } 
i
--);

879 
TAG_OBJECT
:

880 
ob
 = 
	`NODET_TO_PTR
(
íåy
, 
obje˘_t
 *);

881 
	`m¨k_obje˘
(
ob
);

883 
obje˘_t
 *
tmp
 = 
obj_li°
;

884 
tmp
 &&Åm∞!
ob
)

885 
tmp
 =Åmp->
√xt_Æl
;

886 i‡(!
tmp
) {

887 
tmp
 = 
obj_li°_de°ru˘
;

888 
tmp
 &&Åm∞!
ob
)

889 
tmp
 =Åmp->
√xt_Æl
;

891 i‡(!
tmp
) {

892 
tmp
 = 
obj_li°_d™glög
;

893 
tmp
 &&Åm∞!
ob
)

894 
tmp
 =Åmp->
√xt_Æl
;

895 i‡(
tmp
)

896 
	`outbuf_addv
(&
out
,

898 
ob
->
«me
);

900 i‡(!
tmp
)

901 
	`outbuf_addv
(&
out
,

903 
ob
->
«me
);

906 
TAG_LPC_OBJECT
:

907 
ob
 = 
	`NODET_TO_PTR
(
íåy
, 
obje˘_t
 *);

908 i‡(
ob
->
«me
) {

909 
	`DO_MARK
(
ob
->
«me
, 
TAG_OBJ_NAME
);

912 
TAG_PROGRAM
:

913 
¥og
 = 
	`NODET_TO_PTR
(
íåy
, 
¥ogøm_t
 *);

915 i‡(
¥og
->
löe_öfo
) {

916 
	`DO_MARK
(
¥og
->
fûe_öfo
, 
TAG_LINENUMBERS
);

919 
i
 = 0; i < (Ë
¥og
->
num_öhîôed
; i++)

920 
¥og
->
öhîô
[
i
].¥og->
exåa_ªf
++;

922 
i
 = 0; i < (Ë
¥og
->
num_fun˘i⁄s_deföed
; i++)

923 i‡(
¥og
->
fun˘i⁄_èbÀ
[
i
].
«me
)

924 
	`EXTRA_REF
(
	`BLOCK
(
¥og
->
fun˘i⁄_èbÀ
[
i
].
«me
))++;

926 
i
 = 0; i < (Ë
¥og
->
num_°rögs
; i++)

927 
	`EXTRA_REF
(
	`BLOCK
(
¥og
->
°rögs
[
i
]))++;

929 
i
 = 0; i < (Ë
¥og
->
num_v¨übÀs_deföed
; i++)

930 
	`EXTRA_REF
(
	`BLOCK
(
¥og
->
v¨übÀ_èbÀ
[
i
]))++;

932 
	`EXTRA_REF
(
	`BLOCK
(
¥og
->
«me
))++;

938 
hsh
 = 0; hsh < 
MD_TABLE_SIZE
; hsh++) {

939 
íåy
 = 
èbÀ
[
hsh
];É¡ry;É¡ry =É¡ry->
√xt
) {

940 
íåy
->
èg
) {

941 
TAG_MUDLIB_STATS
:

942 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ mudlib sèàblock: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

944 
TAG_PROGRAM
:

945 
¥og
 = 
	`NODET_TO_PTR
(
íåy
, 
¥ogøm_t
 *);

946 i‡(
¥og
->
ªf
 !¥og->
exåa_ªf
)

947 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹Örogøm %s, i†%d - should bê%d\n", 
¥og
->
«me
,Örog->
ªf
,Örog->
exåa_ªf
);

948 i‡(
¥og
->
func_ªf
 !¥og->
exåa_func_ªf
)

949 
	`outbuf_addv
(&
out
, "Bad fun˘i⁄Ñe‡cou¡ f‹Örogøm %s, i†%d - should bê%d\n", 
¥og
->
«me
,Örog->
func_ªf
,Örog->
exåa_func_ªf
);

951 
TAG_OBJECT
:

952 
ob
 = 
	`NODET_TO_PTR
(
íåy
, 
obje˘_t
 *);

953 i‡(
ob
->
ªf
 !ob->
exåa_ªf
)

954 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ obje˘ %s, i†%d - should bê%d\n", 
ob
->
«me
, ob->
ªf
, ob->
exåa_ªf
);

956 
TAG_ARRAY
:

957 
vec
 = 
	`NODET_TO_PTR
(
íåy
, 
¨øy_t
 *);

958 i‡(
vec
->
ªf
 !vec->
exåa_ªf
) {

959 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹áºay, i†%d - should bê%d\n", 
vec
->
ªf
, vec->
exåa_ªf
);

960 
¥öt_dïth
 = 0;

961 
	`md_¥öt_¨øy
(
vec
);

964 
TAG_CLASS
:

965 
vec
 = 
	`NODET_TO_PTR
(
íåy
, 
¨øy_t
 *);

966 i‡(
vec
->
ªf
 !vec->
exåa_ªf
)

967 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ cœss, i†%d - should bê%d\n", 
vec
->
ªf
, vec->
exåa_ªf
);

969 
TAG_MAPPING
:

970 
m≠
 = 
	`NODET_TO_PTR
(
íåy
, 
m≠pög_t
 *);

971 i‡(
m≠
->
ªf
 !m≠->
exåa_ªf
)

972 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ m≠pög, i†%d - should bê%d\n", 
m≠
->
ªf
, m≠->
exåa_ªf
);

974 
TAG_FUNP
:

975 
Â
 = 
	`NODET_TO_PTR
(
íåy
, 
fu≈å_t
 *);

976 i‡(
Â
->
hdr
.
ªf
 !Â->hdr.
exåa_ªf
)

977 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ fun˘i⁄Öoöã∏(ow√d by %s), i†%d - should bê%d\n", (
Â
->
hdr
.
ow√r
 ? fp->hdr.ow√r->
«me
 : "“uŒ)"), fp->hdr.
ªf
, fp->hdr.
exåa_ªf
);

979 #i‚de‡
NO_BUFFER_TYPE


980 
TAG_BUFFER
:

981 
buf
 = 
	`NODET_TO_PTR
(
íåy
, 
buf„r_t
 *);

982 i‡(
buf
->
ªf
 !buf->
exåa_ªf
)

983 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ buf„r, i†%d - should bê%d\n", 
buf
->
ªf
, buf->
exåa_ªf
);

986 
TAG_PREDEFINES
:

987 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™Öªdeföe: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

989 
TAG_LINENUMBERS
:

990 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™Üöênumbî block: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

992 
TAG_OBJ_NAME
:

993 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ obje˘Çame: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

995 
TAG_INTERACTIVE
:

996 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ i¡îa˘ive: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

998 
TAG_UID
:

999 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ uidÇode: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

1001 
TAG_SENTENCE
:

1002 
£¡
 = 
	`NODET_TO_PTR
(
íåy
, 
£¡í˚_t
 *);

1003 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ síãn˚: %s:%†- %†%04x\n", 
£¡
->
ob
->
«me
, sít->
fun˘i⁄
, 
íåy
->
desc
, (Î¡ry->
èg
);

1005 
TAG_PERM_IDENT
:

1006 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™Öîm™íàidítifõr: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

1008 
TAG_STRING
:

1009 
±r
 = 
	`NODET_TO_PTR
(
íåy
, *);

1010 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ mÆloc'ed såög: \"%s\" - %†%04x\n", 
±r
, 
íåy
->
desc
, (Î¡ry->
èg
);

1012 
TAG_MALLOC_STRING
:

1013 
msbl
 = 
	`NODET_TO_PTR
(
íåy
, 
mÆloc_block_t
 *);

1016 i‡(
msbl
 =
	`MSTR_BLOCK
(
out
.
buf„r
))

1019 i‡(
msbl
->
ªf
 !msbl->
exåa_ªf
)

1020 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ mÆlo¯°rög \"%s\" %†%04x, i†%d - should bê%d\n", (*)(
msbl
 + 1), 
íåy
->
desc
, (Î¡ry->
èg
, msbl->
ªf
, msbl->
exåa_ªf
);

1022 
TAG_SHARED_STRING
:

1023 
ssbl
 = 
	`NODET_TO_PTR
(
íåy
, 
block_t
 *);

1024 i‡(
	`REFS
(
ssbl
Ë!
	`EXTRA_REF
(ssbl))

1025 
	`outbuf_addv
(&
out
, "BadÑe‡cou¡ f‹ sh¨ed såög \"%s\", i†%d - should bê%d\n", 
	`STRING
(
ssbl
), 
	`REFS
(ssbl), 
	`EXTRA_REF
(ssbl));

1027 
TAG_ED
:

1028 
	`outbuf_addv
(&
out
, "FoundáŒoˇãdÉd block: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

1030 
TAG_MAP_TBL
:

1031 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ m≠pögÅabÀ: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

1033 
TAG_MAP_NODE_BLOCK
:

1034 
	`outbuf_addv
(&
out
, "WARNING: Found oΩh™ m≠pögÇodêblock: %†%04x\n", 
íåy
->
desc
, (Î¡ry->
èg
);

1037 
íåy
->
èg
 &~
TAG_MARKED
;

1042 i‡(
Êag
 & 1) {

1043 
	`outbuf_add
(&
out
, "\n\n");

1044 
	`outbuf_add
(&
out
, " source blksÅotal\n");

1045 
	`outbuf_add
(&
out
, "------------------------------ ------ --------\n");

1046 
i
 = 1; i < 
MAX_CATEGORY
; i++) {

1047 i‡(
tŸÆs
[
i
])

1048 
	`outbuf_addv
(&
out
, "%-30†%6d %8d\n", 
sour˚s
[
i
], 
blocks
[i], 
tŸÆs
[i]);

1049 i‡(
i
 =5Ë
	`outbuf_add
(&
out
, "\n");

1052 i‡(!(
Êag
 & 2))

1053 
	`outbuf_push
(&
out
);

1055 
	`FREE_MSTR
(
out
.
buf„r
);

1056 
	`push_numbî
(0);

1058 
	}
}

	@md.h

3 #i‡
deföed
(
CHECK_MEMORY
Ë&& !deföed(
DEBUGMALLOC_EXTENSIONS
)

4 #unde‡
CHECK_MEMORY


7 
	smd_node_s
 {

8 
	msize
;

9 
md_node_s
 *
	m√xt
;

10 #ifde‡
DEBUGMALLOC_EXTENSIONS


11 
	mid
;

12 
	mèg
;

13 *
	mdesc
;

15 #ifde‡
CHECK_MEMORY


16 
	mmagic
;

18 } 
	tmd_node_t
;

20 #ifde‡
CHECK_MEMORY


21 
	#MD_OVERHEAD
 ((
md_node_t
Ë+ ())

	)

22 
	#MD_MAGIC
 0x4bì4bì

	)

24 
check_Æl_blocks
 
PROT
(());

26 
	#MD_OVERHEAD
 ((
md_node_t
))

	)

29 
	#MD_TABLE_BITS
 14

	)

30 
	#MD_TABLE_SIZE
 (1 << 
MD_TABLE_BITS
)

	)

31 
	#MD_HASH
(
x
Ë((()x >> 3Ë& (
MD_TABLE_SIZE
 - 1))

	)

33 
	#PTR
(
x
Ë((*)(x + 1))

	)

34 
	#NODET_TO_PTR
(
x
, 
y
Ë((y)(x + 1))

	)

35 
	#PTR_TO_NODET
(
x
Ë((
md_node_t
 *)(xË- 1)

	)

37 
	#DO_MARK
(
±r
, 
köd
Ëi‡(
	`PTR_TO_NODET
’å)->
èg
 != kind) \

38 
	`Ârötf
(
°dîr
, "ExpectedÇode ofÅype %04x: got %s %04x\n", \

39 
köd
, 
	`PTR_TO_NODET
(
±r
)->
desc
, PTR_TO_NODET’å)->
èg
); \

40 
	`PTR_TO_NODET
(
±r
)->
èg
 |
TAG_MARKED


	)

42 #ifde‡
DEBUGMALLOC_EXTENSIONS


43 
	#SET_TAG
(
x
, 
y
Ë
	`£t_èg
(x, y)

	)

45 
	#SET_TAG
(
x
, 
y
)

	)

48 
mÆloc_mask
;

49 
tŸÆ_mÆlo˚d
;

50 
hiw©î
;

51 
MDöô
 
PROT
(());

52 
MDmÆloc
 
PROT
((
md_node_t
 *, , , *));

53 
MD‰ì
 
PROT
((*));

55 #ifde‡
DEBUGMALLOC_EXTENSIONS


56 
	gsvÆue_s
;

58 
m¨k_svÆue
 
PROT
((
svÆue_s
 *));

59 
£t_èg
 
PROT
((*, ));

60 
check_°rög_°©s
 
PROT
((
outbuf„r_t
 *));

63 
	#MAX_CATEGORY
 130

	)

	@mudlib/interface.c

1 
	~"../°d.h
"

2 
	~"../öãrÁ˚.h
"

3 
	~"../Õc_to_c.h
"

5 
	gSGI_should_be_shŸ_f‹_ö˛udög_°upid_bugs_ö_¨___evidíèŒy_Sﬁ¨is_i¢t_so_hŸ_eôhî___do_Æl_SYSV_vîsi⁄s_of_¨_dõ_⁄_fûes_wôh_no_symbﬁs_QUESTION_MARK
;

7 #ifde‡
LPC_TO_C


8 
öãrÁ˚_t
 *
	göãrÁ˚
[] = {

	@my_malloc.h

1 #i‚de‡
MY_MALLOC_H


2 
	#MY_MALLOC_H


	)

7 #i‡
deföed
(
SYSMALLOC
) || \

8 (
deföed
(
SMALLOC
Ë&& deföed(
SBRK_OK
)) || \

9 
	$deföed
(
BSDMALLOC
)

10 
	#MALLOC
(
x
Ë
	`mÆloc
(x)

	)

11 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

12 
	#REALLOC
(
x
,
y
Ë
	`ªÆloc
(x,y)

	)

13 
	#CALLOC
(
x
,
y
Ë
	`ˇŒoc
(x,y)

	)

18 #i‡
	`deföed
(
SMALLOC
Ë&& !deföed(
SYSMALLOC
)

19 #ifde‡
SBRK_OK


20 
	#smÆloc_mÆloc
 
mÆloc


	)

21 
	#smÆloc_‰ì
 
‰ì


	)

22 
	#smÆloc_ªÆloc
 
ªÆloc


	)

23 
	#smÆloc_ˇŒoc
 
ˇŒoc


	)

25 
	#MALLOC
(
x
Ë
	`smÆloc_mÆloc
(x)

	)

26 
	#FREE
(
x
Ë
	`smÆloc_‰ì
(x)

	)

27 
	#REALLOC
(
x
,
y
Ë
	`smÆloc_ªÆloc
(x,y)

	)

28 
	#CALLOC
(
x
,
y
Ë
	`smÆloc_ˇŒoc
(x,y)

	)

33 #i‡
	`deföed
(
BSDMALLOC
Ë&& !deföed(
SYSMALLOC
)

34 
	#bsdmÆloc_mÆloc
 
mÆloc


	)

35 
	#bsdmÆloc_‰ì
 
‰ì


	)

36 
	#bsdmÆloc_ªÆloc
 
ªÆloc


	)

37 
	#bsdmÆloc_ˇŒoc
 
ˇŒoc


	)

40 
	#DXALLOC
(
x
,
èg
,
desc
Ë
	`xÆloc
(x)

	)

41 
	#DMALLOC
(
x
,
èg
,
desc
Ë
	`MALLOC
(x)

	)

42 
	#DREALLOC
(
x
,
y
,
èg
,
desc
Ë
	`REALLOC
(x,y)

	)

43 
	#DCALLOC
(
x
,
y
,
èg
,
desc
Ë
	`CALLOC
(x,y)

	)

	@network_incl.h

1 #i‚de‡
NETWORK_INCL_H


2 
	#NETWORK_INCL_H


	)

4 #ifde‡
INCL_SYS_TYPES_H


5 
	~<sys/ty≥s.h
>

7 #ifde‡
INCL_SYS_IOCTL_H


8 
	~<sys/io˘l.h
>

10 #ifde‡
INCL_SYS_SOCKET_H


11 
	~<sys/sockë.h
>

13 #ifde‡
INCL_NETDB_H


14 
	~<√tdb.h
>

16 #ifde‡
INCL_SYS_SEMA_H


17 
	~<sys/£ma.h
>

21 #unde‡
SE


23 #ifde‡
INCL_ARPA_TELNET_H


24 
	~<¨∑/ã ë.h
>

26 
	~"ã ë.h
"

28 #ifde‡
INCL_SYS_SOCKETVAR_H


29 
	~<sys/sockëv¨.h
>

31 #ifde‡
INCL_SOCKET_H


32 
	~<sockë.h
>

34 #ifde‡
INCL_RESOLVE_H


35 
	~<ªsﬁv.h
>

38 #ifde‡
WINSOCK


39 
	~<wösock.h
>

	@object.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"fûe_ö˛.h
"

4 
	~"ŸabÀ.h
"

5 
	~"backíd.h
"

6 
	~"comm.h
"

7 
	~"sw≠.h
"

8 
	~"sockë_efuns.h
"

9 
	~"ˇŒ_out.h
"

10 
	~"p‹t.h
"

11 
	~"fûe.h
"

12 
	~"hash.h
"

13 
	~"ma°î.h
"

14 
	~"add_a˘i⁄.h
"

16 
	#too_dìp_ßve_îr‹
() \

17 
	`îr‹
("Mappingsánd/orárraysÇestedÅoo deep (%d) for save_object\n",\

18 
MAX_SAVE_SVALUE_DEPTH
);

	)

20 
obje˘_t
 *
	g¥evious_ob
;

21 
	gtŸ_Æloc_obje˘
, 
	gtŸ_Æloc_obje˘_size
;

23 *
ßve_m≠pög
 
PROT
 ((
m≠pög_t
 *
m
));

24 
INLINE_STATIC
 
ª°‹e_¨øy
 
PROT
((**
°r
, 
svÆue_t
 *));

25 
INLINE_STATIC
 
ª°‹e_˛ass
 
PROT
((**
°r
, 
svÆue_t
 *));

27 #ifde‡
F_SET_HIDE


28 
	gnum_hiddí
 = 0;

30 
INLINE
 

31 
vÆid_hide
 
	$P1
(
obje˘_t
 *, 
obj
)

33 
svÆue_t
 *
ªt
;

35 i‡(!
obj
) {

38 
	`push_obje˘
(
obj
);

39 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_HIDE
, 1);

40  (!
	`IS_ZERO
(
ªt
));

41 
	}
}

44 
	gßve_svÆue_dïth
 = 0, 
	gmax_dïth
;

45 *
	gsizes
 = 0;

47 
INLINE
 
svÆue_ßve_size
 
	$P1
(
svÆue_t
 *, 
v
)

49 
v
->
ty≥
) {

50 
T_STRING
:

52 *
˝
 = 
v
->
u
.
°rög
;

53 
c
;

54 
size
 = 0;

56 (
c
 = *
˝
++)) {

57 i‡(
c
 ='\\' || c ='"'Ë
size
++;

58 
size
++;

60  3 + 
size
;

63 
T_ARRAY
:

65 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

66 
i
 = 
v
->
u
.
¨r
->
size
, size = 0;

68 i‡(++
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

69 
	`too_dìp_ßve_îr‹
();

71 
i
--Ë
size
 +
	`svÆue_ßve_size
(
sv
++);

72 
ßve_svÆue_dïth
--;

73  
size
 + 5;

76 
T_CLASS
:

78 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

79 
i
 = 
v
->
u
.
¨r
->
size
, size = 0;

81 i‡(++
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

82 
	`too_dìp_ßve_îr‹
();

84 
i
--Ë
size
 +
	`svÆue_ßve_size
(
sv
++);

85 
ßve_svÆue_dïth
--;

86  
size
 + 5;

89 
T_MAPPING
:

91 
m≠pög_node_t
 **
a
 = 
v
->
u
.
m≠
->
èbÀ
, *
ñt
;

92 
j
 = 
v
->
u
.
m≠
->
èbÀ_size
, 
size
 = 0;

94 i‡(++
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

95 
	`too_dìp_ßve_îr‹
();

98 
ñt
 = 
a
[
j
];É…;É… =É…->
√xt
) {

99 
size
 +
	`svÆue_ßve_size
(
ñt
->
vÆues
) +

100 
	`svÆue_ßve_size
(
ñt
->
vÆues
+1);

102 } 
j
--);

103 
ßve_svÆue_dïth
--;

104  
size
 + 5;

107 
T_NUMBER
:

109 
ªs
 = 
v
->
u
.
numbî
, 
Àn
;

110 
Àn
 = 
ªs
 < 0 ? (res = (-res) & 0x7fffffff,3) : 2;

111 
ªs
>9Ë{Ñe†/10; 
Àn
++; }

112  
Àn
;

115 
T_REAL
:

117 
buf
[256];

118 
	`•rötf
(
buf
, "%f", 
v
->
u
.
ªÆ
);

119  ()(
	`°æí
(
buf
)+1);

127 
	}
}

129 
INLINE
 
ßve_svÆue
 
	$P2
(
svÆue_t
 *, 
v
, **, 
buf
)

131 
v
->
ty≥
) {

132 
T_STRING
:

134 *
˝
 = *
buf
, *
°r
 = 
v
->
u
.
°rög
;

135 
c
;

137 *
˝
++ = '"';

138 (
c
 = *
°r
++)) {

139 i‡(
c
 == '"' || c == '\\') {

140 *
˝
++ = '\\';

141 *
˝
++ = 
c
;

143 *
˝
++ = (
c
 == '\n') ? '\r' : c;

146 *
˝
++ = '"';

147 *(*
buf
 = 
˝
) = '\0';

151 
T_ARRAY
:

153 
i
 = 
v
->
u
.
¨r
->
size
;

154 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

156 *(*
buf
)++ = '(';

157 *(*
buf
)++ = '{';

158 
i
--) {

159 
	`ßve_svÆue
(
sv
++, 
buf
);

160 *(*
buf
)++ = ',';

162 *(*
buf
)++ = '}';

163 *(*
buf
)++ = ')';

164 *(*
buf
) = '\0';

168 
T_CLASS
:

170 
i
 = 
v
->
u
.
¨r
->
size
;

171 
svÆue_t
 *
sv
 = 
v
->
u
.
¨r
->
ôem
;

173 *(*
buf
)++ = '(';

174 *(*
buf
)++ = '/';

175 
i
--) {

176 
	`ßve_svÆue
(
sv
++, 
buf
);

177 *(*
buf
)++ = ',';

179 *(*
buf
)++ = '/';

180 *(*
buf
)++ = ')';

181 *(*
buf
) = '\0';

185 
T_NUMBER
:

187 
ªs
 = 
v
->
u
.
numbî
, 
Á˘
, 
Àn
 = 1, 
√g
 = 0;

188 *
˝
;

190 i‡(
ªs
 < 0Ë{ 
Àn
++, 
√g
 = 1,Ñes = (-res) & 0x7fffffff; }

191 
Á˘
 = 
ªs
;

192 
Á˘
 > 9Ë{ fa˘ /10; 
Àn
++; }

193 *(
˝
 = (*
buf
 +
Àn
)) = '\0';

195 *--
˝
 = 
ªs
 % 10 + '0';

196 
ªs
 /= 10;

197 } 
ªs
);

198 i‡(
√g
Ë*(
˝
-1) = '-';

202 
T_REAL
:

204 
	`•rötf
(*
buf
, "%f", 
v
->
u
.
ªÆ
);

205 (*
buf
Ë+
	`°æí
(*buf);

209 
T_MAPPING
:

211 
j
 = 
v
->
u
.
m≠
->
èbÀ_size
;

212 
m≠pög_node_t
 **
a
 = 
v
->
u
.
m≠
->
èbÀ
, *
ñt
;

214 *(*
buf
)++ = '(';

215 *(*
buf
)++ = '[';

217 
ñt
 = 
a
[
j
];É…;É… =É… =É…->
√xt
) {

218 
	`ßve_svÆue
(
ñt
->
vÆues
, 
buf
);

219 *(*
buf
)++ = ':';

220 
	`ßve_svÆue
(
ñt
->
vÆues
 + 1, 
buf
);

221 *(*
buf
)++ = ',';

223 } 
j
--);

225 *(*
buf
)++ = ']';

226 *(*
buf
)++ = ')';

227 *(*
buf
) = '\0';

231 
	}
}

233 
INLINE_STATIC
 

234 
ª°‹e_öã∫Æ_size
 
	$P3
(**, 
°r
, , 
is_m≠pög
, , 
dïth
)

236 *
˝
 = *
°r
;

237 
size
 = 0;

238 
c
, 
dñim
, 
ödex
 = 0;

240 
dñim
 = 
is_m≠pög
 ? ':' : ',';

241 (
c
 = *
˝
++)) {

242 
c
) {

245 (
c
 = *
˝
++) != '"')

246 i‡((
c
 ='\0'Ë|| (¯='\\' && !*
˝
++)) {

249 i‡(*
˝
++ !
dñim
)  0;

250 
size
++;

256 i‡(*
˝
 == '{') {

257 *
°r
 = ++
˝
;

258 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++)) {

262 i‡(*
˝
 == '[') {

263 *
°r
 = ++
˝
;

264 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 1, 
ßve_svÆue_dïth
++)) {  0;}

266 i‡(*
˝
 == '/') {

267 *
°r
 = ++
˝
;

268 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++))

272 i‡(*(
˝
 = *
°r
Ë!
dñim
) {  0;}

273 
˝
++;

274 
size
++;

280 i‡(*
˝
++ =')' && 
is_m≠pög
) {

281 *
°r
 = 
˝
;

282 i‡(!
sizes
) {

283 
max_dïth
 = 128;

284 
max_dïth
 <
dïth
) max_depth <<= 1;

285 
sizes
 = 
	`CALLOCATE
(
max_dïth
, , 
TAG_TEMPORARY
,

288 i‡(
dïth
 >
max_dïth
) {

289 (
max_dïth
 <<1Ë<
dïth
);

290 
sizes
 = 
	`RESIZE
(sizes, 
max_dïth
, , 
TAG_TEMPORARY
,

293 
sizes
[
dïth
] = 
size
;

302 i‡(*
˝
++ =')' && !
is_m≠pög
) {

303 *
°r
 = 
˝
;

304 i‡(!
sizes
) {

305 
max_dïth
 = 128;

306 
max_dïth
 <
dïth
) max_depth <<= 1;

307 
sizes
 = 
	`CALLOCATE
(
max_dïth
, , 
TAG_TEMPORARY
,

310 i‡(
dïth
 >
max_dïth
) {

311 (
max_dïth
 <<1Ë<
dïth
);

312 
sizes
 = 
	`RESIZE
(sizes, 
max_dïth
, , 
TAG_TEMPORARY
,

315 
sizes
[
dïth
] = 
size
;

324 i‡(
c
 !
dñim
)  0;

325 
size
++;

331 i‡(!(
˝
 = 
	`°rchr
(˝, 
dñim
)))  0;

332 
˝
++;

333 
size
++;

336 i‡(
is_m≠pög
Ë
dñim
 = (
ödex
 ^= 1) ? ',' : ':';

339 
	}
}

343 
INLINE_STATIC
 

344 
ª°‹e_size
 
	$P2
(**, 
°r
, , 
is_m≠pög
)

346 *
˝
 = *
°r
;

347 
size
 = 0;

348 
c
, 
dñim
, 
ödex
 = 0;

350 
dñim
 = 
is_m≠pög
 ? ':' : ',';

352 (
c
 = *
˝
++)) {

353 
c
) {

356 (
c
 = *
˝
++) != '"')

357 i‡((
c
 ='\0'Ë|| (¯='\\' && !*
˝
++))  0;

359 i‡(*
˝
++ !
dñim
) {  -1; }

360 
size
++;

366 i‡(*
˝
 == '{') {

367 *
°r
 = ++
˝
;

368 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++))  -1;

370 i‡(*
˝
 == '[') {

371 *
°r
 = ++
˝
;

372 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 1, 
ßve_svÆue_dïth
++))  -1;

374 i‡(*
˝
 == '/') {

375 *
°r
 = ++
˝
;

376 i‡(!
	`ª°‹e_öã∫Æ_size
(
°r
, 0, 
ßve_svÆue_dïth
++))  -1;

379 i‡(*(
˝
 = *
°r
Ë!
dñim
) {  -1;}

380 
˝
++;

381 
size
++;

387 
ßve_svÆue_dïth
 = 0;

388 i‡(*
˝
++ =')' && 
is_m≠pög
) {

389 *
°r
 = 
˝
;

390  
size
;

398 
ßve_svÆue_dïth
 = 0;

399 i‡(*
˝
++ =')' && !
is_m≠pög
) {

400 *
°r
 = 
˝
;

401  
size
;

409 i‡(
c
 !
dñim
)  -1;

410 
size
++;

416 i‡(!(
˝
 = 
	`°rchr
(˝, 
dñim
))) {  -1;}

417 
˝
++;

418 
size
++;

421 i‡(
is_m≠pög
Ë
dñim
 = (
ödex
 ^= 1) ? ',' : ':';

424 
	}
}

426 
INLINE_STATIC
 

427 
ª°‹e_öãri‹_°rög
 
	$P2
(**, 
vÆ
, 
svÆue_t
 *, 
sv
)

429 *
˝
 = *
vÆ
;

430 *
°¨t
 = 
˝
;

431 
c
;

432 
Àn
;

434 (
c
 = *
˝
++) != '"') {

435 
c
) {

438 *(
˝
-1) = '\n';

444 *
√w
 = 
˝
 - 1;

446 i‡((*
√w
++ = *
˝
++)) {

447 (
c
 = *
˝
++) != '"') {

448 i‡(
c
 == '\\') {

449 i‡(!(*
√w
++ = *
˝
++)Ë 
ROB_STRING_ERROR
;

452 i‡(
c
 == '\r')

453 *
√w
++ = '\n';

454 *
√w
++ = 
c
;

457 i‡(
c
 ='\0'Ë 
ROB_STRING_ERROR
;

458 *
√w
 = '\0';

459 *
vÆ
 = 
˝
;

460 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
Àn
 = (
√w
 - 
°¨t
),

462 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

463 
sv
->
ty≥
 = 
T_STRING
;

464 
sv
->
subty≥
 = 
STRING_MALLOC
;

467  
ROB_STRING_ERROR
;

472  
ROB_STRING_ERROR
;

478 *
vÆ
 = 
˝
;

479 *--
˝
 = '\0';

480 
Àn
 = 
˝
 - 
°¨t
;

481 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
Àn
, "restore_string");

482 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

483 
sv
->
ty≥
 = 
T_STRING
;

484 
sv
->
subty≥
 = 
STRING_MALLOC
;

486 
	}
}

488 
∑r£_numîic
 
	$P3
(**, 
˝p
, , 
c
, 
svÆue_t
 *, 
de°
)

490 *
˝
 = *
˝p
;

491 
ªs
, 
√g
;

493 i‡(
c
 == '-') {

494 
√g
 = 1;

495 
ªs
 = 0;

496 
c
 = *
˝
++;

497 i‡(!
	`isdigô
(
c
))

500 
√g
 = 0;

501 
ªs
 = 
c
 - '0';

503 (
c
 = *
˝
++Ë&& 
	`isdigô
(c)) {

504 
ªs
 *= 10;

505 
ªs
 +
c
 - '0';

507 i‡(
c
 == '.') {

508 
f1
 = 0.0, 
f2
 = 10.0;

510 
c
 = *
˝
++;

511 i‡(!
c
) {

512 
˝
--;

513 
c
 = '0';

515 i‡(!
	`isdigô
(
c
))  0;

518 
f1
 +(
c
 - '0')/
f2
;

519 
f2
 *= 10;

520 } (
c
 = *
˝
++Ë&& 
	`isdigô
(c));

522 
f1
 +
ªs
;

523 i‡(
c
 == 'e') {

524 
expo
 = 0;

526 i‡((
c
 = *
˝
++) == '+') {

527 (
c
 = *
˝
++Ë&& 
	`isdigô
(c)) {

528 
expo
 *= 10;

529 
expo
 +(
c
 - '0');

531 
f1
 *
	`pow
(10.0, 
expo
);

532 } i‡(
c
 == '-') {

533 (
c
 = *
˝
++Ë&& 
	`isdigô
(c)) {

534 
expo
 *= 10;

535 
expo
 +(
c
 - '0');

537 
f1
 *
	`pow
(10.0, -
expo
);

542 
de°
->
ty≥
 = 
T_REAL
;

543 
de°
->
u
.
ªÆ
 = (
√g
 ? -
f1
 : f1);

544 *
˝p
 = 
˝
;

546 } i‡(
c
 == 'e') {

547 
expo
 = 0;

548 
f1
;

550 i‡((
c
 = *
˝
++) == '+') {

551 (
c
 = *
˝
++Ë&& 
	`isdigô
(c)) {

552 
expo
 *= 10;

553 
expo
 +(
c
 - '0');

555 
f1
 = 
ªs
 * 
	`pow
(10.0, 
expo
);

556 } i‡(
c
 == '-') {

557 (
c
 = *
˝
++Ë&& 
	`isdigô
(c)) {

558 
expo
 *= 10;

559 
expo
 +(
c
 - '0');

561 
f1
 = 
ªs
 * 
	`pow
(10.0, -
expo
);

565 
de°
->
ty≥
 = 
T_REAL
;

566 
de°
->
u
.
ªÆ
 = (
√g
 ? -
f1
 : f1);

567 *
˝p
 = 
˝
;

570 
de°
->
ty≥
 = 
T_NUMBER
;

571 
de°
->
u
.
numbî
 = (
√g
 ? -
ªs
 :Ñes);

572 *
˝p
 = 
˝
;

575 
	}
}

577 
INLINE_STATIC
 
add_m≠_°©s
 
	$P2
(
m≠pög_t
 *, 
m
, , 
cou¡
)

579 
tŸÆ_m≠pög_nodes
 +
cou¡
;

580 
tŸÆ_m≠pög_size
 +
cou¡
 * (
m≠pög_node_t
);

581 #ifde‡
PACKAGE_MUDLIB_STATS


582 
	`add_¨øy_size
(&
m
->
°©s
, 
cou¡
 << 1);

584 
m
->
cou¡
 = count;

585 
	}
}

588 
ª°‹e_m≠pög
 
	$P2
(**,
°r
, 
svÆue_t
 *, 
sv
)

590 
size
, 
i
, 
mask
, 
oi
, 
cou¡
 = 0;

591 
c
;

592 
m≠pög_t
 *
m
;

593 
svÆue_t
 
key
, 
vÆue
;

594 
m≠pög_node_t
 **
a
, *
ñt
, *
ñt2
;

595 *
˝
 = *
°r
;

596 
îr
;

598 i‡(
ßve_svÆue_dïth
Ë
size
 = 
sizes
[save_svalue_depth-1];

599 i‡((
size
 = 
	`ª°‹e_size
(
°r
, 1)) < 0)  0;

601 i‡(!
size
) {

602 *
°r
 += 2;

603 
sv
->
u
.
m≠
 = 
	`Æloˇã_m≠pög
(0);

604 
sv
->
ty≥
 = 
T_MAPPING
;

607 
m
 = 
	`Æloˇã_m≠pög
(
size
 >> 1);

608 
a
 = 
m
->
èbÀ
;

609 
mask
 = 
m
->
èbÀ_size
;

612 
c
 = *
˝
++) {

615 *
°r
 = 
˝
;

616 i‡((
îr
 = 
	`ª°‹e_hash_°rög
(
°r
, &
key
)))

617 
key_îr‹
;

618 
˝
 = *
°r
;

619 
˝
++;

625 
ßve_svÆue_dïth
++;

626 i‡(*
˝
 == '[') {

627 *
°r
 = ++
˝
;

628 i‡((
îr
 = 
	`ª°‹e_m≠pög
(
°r
, &
key
)))

629 
key_îr‹
;

631 i‡(*
˝
 == '{') {

632 *
°r
 = ++
˝
;

633 i‡((
îr
 = 
	`ª°‹e_¨øy
(
°r
, &
key
)))

634 
key_îr‹
;

636 i‡(*
˝
 == '/') {

637 *
°r
 = ++
˝
;

638 i‡((
îr
 = 
	`ª°‹e_˛ass
(
°r
, &
key
)))

639 
key_îr‹
;

641 
gíîic_key_îr‹
;

642 
˝
 = *
°r
;

643 
˝
++;

649 
key
.
u
.
numbî
 = 0;

650 
key
.
ty≥
 = 
T_NUMBER
;

655 *
°r
 = ++
˝
;

656 
	`add_m≠_°©s
(
m
, 
cou¡
);

657 
sv
->
ty≥
 = 
T_MAPPING
;

658 
sv
->
u
.
m≠
 = 
m
;

664 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, &
key
))

665 
key_numîÆ_îr‹
;

669 
gíîic_key_îr‹
;

675 
c
 = *
˝
++) {

678 *
°r
 = 
˝
;

679 i‡((
îr
 = 
	`ª°‹e_öãri‹_°rög
(
°r
, &
vÆue
)))

680 
vÆue_îr‹
;

681 
˝
 = *
°r
;

682 
˝
++;

688 
ßve_svÆue_dïth
++;

689 i‡(*
˝
 == '[') {

690 *
°r
 = ++
˝
;

691 i‡((
îr
 = 
	`ª°‹e_m≠pög
(
°r
, &
vÆue
)))

692 
vÆue_îr‹
;

694 i‡(*
˝
 == '{') {

695 *
°r
 = ++
˝
;

696 i‡((
îr
 = 
	`ª°‹e_¨øy
(
°r
, &
vÆue
)))

697 
vÆue_îr‹
;

698 } i‡(*
˝
 == '/') {

699 *
°r
 = ++
˝
;

700 i‡((
îr
 = 
	`ª°‹e_˛ass
(
°r
, &
vÆue
)))

701 
vÆue_îr‹
;

703 
gíîic_vÆue_îr‹
;

704 
˝
 = *
°r
;

705 
˝
++;

712 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, &
vÆue
))

713 
vÆue_numîÆ_îr‹
;

718 
vÆue
.
u
.
numbî
 = 0;

719 
vÆue
.
ty≥
 = 
T_NUMBER
;

724 
gíîic_vÆue_îr‹
;

729 
oi
 = 
	`MAP_POINTER_HASH
(
key
.
u
.
numbî
);

730 
i
 = 
oi
 & 
mask
;

731 i‡((
ñt2
 = 
ñt
 = 
a
[
i
])) {

734 i‡(
	`mßmevÆ
(&
key
, 
ñt
->
vÆues
)) {

735 
	`‰ì_svÆue
(&
key
, "restore_mapping: duplicate key");

736 
	`‰ì_svÆue
(
ñt
->
vÆues
+1, "restore_mapping:Ñeplaced value");

737 *(
ñt
->
vÆues
+1Ë
vÆue
;

740 } (
ñt
 =É…->
√xt
));

741 i‡(
ñt
)

743 } i‡(!(--
m
->
unfûÀd
)) {

744 i‡(
	`growM≠
(
m
)) {

745 
a
 = 
m
->
èbÀ
;

746 i‡(
oi
 & ++
mask
Ë
ñt2
 = 
a
[
i
 |= mask];

747 
mask
 <<= 1;

748 
mask
--;

750 
	`add_m≠_°©s
(
m
, 
cou¡
);

751 
	`‰ì_m≠pög
(
m
);

752 
	`‰ì_svÆue
(&
key
, "restore_mapping: out of memory");

753 
	`‰ì_svÆue
(&
vÆue
, "restore_mapping: out of memory");

754 
	`îr‹
("Out of memory\n");

758 i‡(++
cou¡
 > 
MAX_MAPPING_SIZE
) {

759 
	`add_m≠_°©s
(
m
, 
cou¡
 -1);

760 
	`‰ì_m≠pög
(
m
);

761 
	`‰ì_svÆue
(&
key
, "restore_mapping: mappingÅooÜarge");

762 
	`‰ì_svÆue
(&
vÆue
, "restore_mapping: mappingÅooÜarge");

763 
	`m≠pög_too_œrge
();

766 
ñt
 = 
	`√w_m≠_node
();

767 *
ñt
->
vÆues
 = 
key
;

768 *(
ñt
->
vÆues
 + 1Ë
vÆue
;

769 (
a
[
i
] = 
ñt
)->
√xt
 = 
ñt2
;

773 
vÆue_numîÆ_îr‹
:

774 
	`‰ì_svÆue
(&
key
, "restore_mapping:Çumeral valueÉrror");

775 
key_numîÆ_îr‹
:

776 
	`add_m≠_°©s
(
m
, 
cou¡
);

777 
	`‰ì_m≠pög
(
m
);

778  
ROB_NUMERAL_ERROR
;

779 
gíîic_vÆue_îr‹
:

780 
	`‰ì_svÆue
(&
key
, "restore_mapping: generic valueÉrror");

781 
gíîic_key_îr‹
:

782 
	`add_m≠_°©s
(
m
, 
cou¡
);

783 
	`‰ì_m≠pög
(
m
);

784  
ROB_MAPPING_ERROR
;

785 
vÆue_îr‹
:

786 
	`‰ì_svÆue
(&
key
, "restore_mapping: valueÉrror");

787 
key_îr‹
:

788 
	`add_m≠_°©s
(
m
, 
cou¡
);

789 
	`‰ì_m≠pög
(
m
);

790  
îr
;

791 
	}
}

794 
INLINE_STATIC
 

795 
ª°‹e_˛ass
 
	$P2
(**, 
°r
, 
svÆue_t
 *, 
ªt
)

797 
size
;

798 
c
;

799 
¨øy_t
 *
v
;

800 
svÆue_t
 *
sv
;

801 *
˝
 = *
°r
;

802 
îr
;

804 i‡(
ßve_svÆue_dïth
Ë
size
 = 
sizes
[save_svalue_depth-1];

805 i‡((
size
 = 
	`ª°‹e_size
(
°r
,0)Ë< 0Ë 
ROB_CLASS_ERROR
;

807 
v
 = 
	`Æloˇã_˛ass_by_size
(
size
);

809 
sv
 = 
v
->
ôem
;

811 
size
--) {

812 
c
 = *
˝
++) {

814 *
°r
 = 
˝
;

815 i‡((
îr
 = 
	`ª°‹e_öãri‹_°rög
(
°r
, 
sv
)))

816 
gíîic_îr‹
;

817 
˝
 = *
°r
;

818 
˝
++;

819 
sv
++;

823 
sv
++;

828 
ßve_svÆue_dïth
++;

829 i‡(*
˝
 == '[') {

830 *
°r
 = ++
˝
;

831 i‡((
îr
 = 
	`ª°‹e_m≠pög
(
°r
, 
sv
)))

832 
îr‹
;

834 i‡(*
˝
 == '{') {

835 *
°r
 = ++
˝
;

836 i‡((
îr
 = 
	`ª°‹e_¨øy
(
°r
, 
sv
)))

837 
îr‹
;

839 i‡(*
˝
 == '/') {

840 *
°r
 = ++
˝
;

841 i‡((
îr
 = 
	`ª°‹e_˛ass
(
°r
, 
sv
)))

842 
îr‹
;

844 
gíîic_îr‹
;

845 
sv
++;

846 
˝
 = *
°r
;

847 
˝
++;

854 i‡(
	`∑r£_numîic
(&
˝
, 
c
, 
sv
))

855 
sv
++;

857 
numîÆ_îr‹
;

861 
gíîic_îr‹
;

865 
˝
 += 2;

866 *
°r
 = 
˝
;

867 
ªt
->
u
.
¨r
 = 
v
;

868 
ªt
->
ty≥
 = 
T_CLASS
;

871 
numîÆ_îr‹
:

872 
îr
 = 
ROB_NUMERAL_ERROR
;

873 
îr‹
;

874 
gíîic_îr‹
:

875 
îr
 = 
ROB_CLASS_ERROR
;

876 
îr‹
:

877 
	`‰ì_˛ass
(
v
);

878  
îr
;

879 
	}
}

881 
INLINE_STATIC
 

882 
ª°‹e_¨øy
 
	$P2
(**, 
°r
, 
svÆue_t
 *, 
ªt
)

884 
size
;

885 
c
;

886 
¨øy_t
 *
v
;

887 
svÆue_t
 *
sv
;

888 *
˝
 = *
°r
;

889 
îr
;

891 i‡(
ßve_svÆue_dïth
Ë
size
 = 
sizes
[save_svalue_depth-1];

892 i‡((
size
 = 
	`ª°‹e_size
(
°r
,0)Ë< 0Ë 
ROB_ARRAY_ERROR
;

894 
v
 = 
	`Æloˇã_¨øy
(
size
);

896 
sv
 = 
v
->
ôem
;

898 
size
--) {

899 
c
 = *
˝
++) {

901 *
°r
 = 
˝
;

902 i‡((
îr
 = 
	`ª°‹e_öãri‹_°rög
(
°r
, 
sv
)))

903 
gíîic_îr‹
;

904 
˝
 = *
°r
;

905 
˝
++;

906 
sv
++;

910 
sv
++;

915 
ßve_svÆue_dïth
++;

916 i‡(*
˝
 == '[') {

917 *
°r
 = ++
˝
;

918 i‡((
îr
 = 
	`ª°‹e_m≠pög
(
°r
, 
sv
)))

919 
îr‹
;

921 i‡(*
˝
 == '{') {

922 *
°r
 = ++
˝
;

923 i‡((
îr
 = 
	`ª°‹e_¨øy
(
°r
, 
sv
)))

924 
îr‹
;

926 i‡(*
˝
 == '/') {

927 *
°r
 = ++
˝
;

928 i‡((
îr
 = 
	`ª°‹e_˛ass
(
°r
, 
sv
)))

929 
îr‹
;

931 
gíîic_îr‹
;

932 
sv
++;

933 
˝
 = *
°r
;

934 
˝
++;

941 i‡(
	`∑r£_numîic
(&
˝
, 
c
, 
sv
))

942 
sv
++;

944 
numîÆ_îr‹
;

948 
gíîic_îr‹
;

952 
˝
 += 2;

953 *
°r
 = 
˝
;

954 
ªt
->
u
.
¨r
 = 
v
;

955 
ªt
->
ty≥
 = 
T_ARRAY
;

958 
numîÆ_îr‹
:

959 
îr
 = 
ROB_NUMERAL_ERROR
;

960 
îr‹
;

961 
gíîic_îr‹
:

962 
îr
 = 
ROB_ARRAY_ERROR
;

963 
îr‹
:

964 
	`‰ì_¨øy
(
v
);

965  
îr
;

966 
	}
}

968 
INLINE_STATIC
 

969 
ª°‹e_°rög
 
	$P2
(*, 
vÆ
, 
svÆue_t
 *, 
sv
)

971 *
˝
 = 
vÆ
;

972 *
°¨t
 = 
˝
;

973 
c
;

974 
Àn
;

976 (
c
 = *
˝
++) != '"') {

977 
c
) {

980 *(
˝
-1) = '\n';

986 *
√w
 = 
˝
 - 1;

988 i‡((*
√w
++ = *
˝
++)) {

989 (
c
 = *
˝
++) != '"') {

990 i‡(
c
 == '\\') {

991 i‡(!(*
√w
++ = *
˝
++)Ë 
ROB_STRING_ERROR
;

994 i‡(
c
 == '\r')

995 *
√w
++ = '\n';

996 *
√w
++ = 
c
;

999 i‡((
c
 ='\0'Ë|| (*
˝
 !'\0')Ë 
ROB_STRING_ERROR
;

1000 *
√w
 = '\0';

1001 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
√w
 - 
°¨t
,

1003 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

1004 
sv
->
ty≥
 = 
T_STRING
;

1005 
sv
->
subty≥
 = 
STRING_MALLOC
;

1008  
ROB_STRING_ERROR
;

1013  
ROB_STRING_ERROR
;

1019 i‡(*
˝
--Ë 
ROB_STRING_ERROR
;

1020 *
˝
 = '\0';

1021 
Àn
 = 
˝
 - 
°¨t
;

1022 
sv
->
u
.
°rög
 = 
	`√w_°rög
(
Àn
, "restore_string");

1023 
	`°r˝y
(
sv
->
u
.
°rög
, 
°¨t
);

1024 
sv
->
ty≥
 = 
T_STRING
;

1025 
sv
->
subty≥
 = 
STRING_MALLOC
;

1027 
	}
}

1031 
INLINE
 

1032 
ª°‹e_svÆue
 
	$P2
(*, 
˝
, 
svÆue_t
 *, 
v
)

1034 
ªt
;

1035 
c
;

1037 
c
 = *
˝
++) {

1039  
	`ª°‹e_°rög
(
˝
, 
v
);

1041 i‡(*
˝
 == '{') {

1042 
˝
++;

1043 
ªt
 = 
	`ª°‹e_¨øy
(&
˝
, 
v
);

1044 } i‡(*
˝
 == '[') {

1045 
˝
++;

1046 
ªt
 = 
	`ª°‹e_m≠pög
(&
˝
, 
v
);

1047 } i‡(*
˝
++ == '/') {

1048 
ªt
 = 
	`ª°‹e_˛ass
(&
˝
, 
v
);

1050 
ªt
 = 
ROB_GENERAL_ERROR
;

1052 i‡(
ßve_svÆue_dïth
) {

1053 
ßve_svÆue_dïth
 = 
max_dïth
 = 0;

1054 i‡(
sizes
)

1055 
	`FREE
((*Ë
sizes
);

1056 
sizes
 = (*) 0;

1058  
ªt
;

1063 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, 
v
))

1064  
ROB_NUMERAL_ERROR
;

1068 
v
->
ty≥
 = 
T_NUMBER
;

1069 
v
->
u
.
numbî
 = 0;

1073 
	}
}

1077 
INLINE_STATIC
 

1078 
ß„_ª°‹e_svÆue
 
	$P2
(*, 
˝
, 
svÆue_t
 *, 
v
)

1080 
ªt
;

1081 
svÆue_t
 
vÆ
;

1082 
c
;

1084 
vÆ
.
ty≥
 = 
T_NUMBER
;

1085 
c
 = *
˝
++) {

1087 i‡((
ªt
 = 
	`ª°‹e_°rög
(
˝
, &
vÆ
))) Ñet;

1091 i‡(*
˝
 == '{') {

1092 
˝
++;

1093 
ªt
 = 
	`ª°‹e_¨øy
(&
˝
, &
vÆ
);

1094 } i‡(*
˝
 == '[') {

1095 
˝
++;

1096 
ªt
 = 
	`ª°‹e_m≠pög
(&
˝
, &
vÆ
);

1097 } i‡(*
˝
++ == '/') {

1098 
ªt
 = 
	`ª°‹e_˛ass
(&
˝
, &
vÆ
);

1100  
ROB_GENERAL_ERROR
;

1102 i‡(
ßve_svÆue_dïth
) {

1103 
ßve_svÆue_dïth
 = 
max_dïth
 = 0;

1104 i‡(
sizes
)

1105 
	`FREE
((*Ë
sizes
);

1106 
sizes
 = (*) 0;

1108 i‡(
ªt
)

1109  
ªt
;

1116 i‡(!
	`∑r£_numîic
(&
˝
, 
c
, &
vÆ
))

1117  
ROB_NUMERAL_ERROR
;

1121 
vÆ
.
ty≥
 = 
T_NUMBER
;

1122 
vÆ
.
u
.
numbî
 = 0;

1124 
	`‰ì_svÆue
(
v
, "safe_restore_svalue");

1125 *
v
 = 
vÆ
;

1127 
	}
}

1129 
fgv_ªcur£
 
	$P5
(
¥ogøm_t
 *, 
¥og
, *, 
idx
,

1130 *, 
«me
, *, 
ty≥
,

1131 , 
check_noßve
) {

1132 
i
;

1133 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++) {

1134 i‡(
	`fgv_ªcur£
(
¥og
->
öhîô
[
i
].¥og, 
idx
, 
«me
, 
ty≥
, 
check_noßve
)) {

1135 *
ty≥
 = 
	`DECL_MODIFY
(
¥og
->
öhîô
[
i
].
ty≥_mod
, *type);

1140 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++) {

1141 i‡(
¥og
->
v¨übÀ_èbÀ
[
i
] =
«me
 &&

1142 (!
check_noßve
 || !(
¥og
->
v¨übÀ_ty≥s
[
i
] & 
DECL_NOSAVE
))) {

1143 *
idx
 +
i
;

1144 *
ty≥
 = 
¥og
->
v¨übÀ_ty≥s
[
i
];

1148 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

1150 
	}
}

1152 
föd_globÆ_v¨übÀ
 
	$P4
(
¥ogøm_t
 *, 
¥og
, *, 
«me
,

1153 *, 
ty≥
, , 
check_noßve
) {

1154 
idx
 = 0;

1155 *
°r
 = 
	`föd°rög
(
«me
);

1157 i‡(
°r
 && 
	`fgv_ªcur£
(
¥og
, &
idx
, så, 
ty≥
, 
check_noßve
))

1158  
idx
;

1161 
	}
}

1164 
ª°‹e_obje˘_‰om_buff
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
theBuff
,

1165 , 
no˛ór
)

1167 *
buff
, *
√xtBuff
, *
tmp
, *
•a˚
;

1168 
v¨
[100];

1169 
idx
;

1170 
svÆue_t
 *
sv
 = 
ob
->
v¨übÀs
;

1171 
rc
;

1172 
t
;

1174 
√xtBuff
 = 
theBuff
;

1175 (
buff
 = 
√xtBuff
) && *buff) {

1176 
svÆue_t
 *
v
;

1178 i‡((
tmp
 = 
	`°rchr
(
buff
, '\n'))) {

1179 *
tmp
 = '\0';

1180 i‡(
tmp
 > 
buff
 &&Åmp[-1] == '\r')

1181 *(--
tmp
) = '\0';

1182 
√xtBuff
 = 
tmp
 + 1;

1184 
√xtBuff
 = 0;

1186 i‡(
buff
[0] == '#')

1188 
•a˚
 = 
	`°rchr
(
buff
, ' ');

1189 i‡(!
•a˚
 || ((•a˚ - 
buff
Ë>(
v¨
))) {

1190 
	`FREE
(
theBuff
);

1191 
	`îr‹
("restore_object(): Illegal file format.\n");

1193 ()
	`°∫˝y
(
v¨
, 
buff
, 
•a˚
 - buff);

1194 
v¨
[
•a˚
 - 
buff
] = '\0';

1195 
idx
 = 
	`föd_globÆ_v¨übÀ
(
cuºít_obje˘
->
¥og
, 
v¨
, &
t
, 1);

1196 i‡(
idx
 == -1)

1199 
v
 = &
sv
[
idx
];

1200 i‡(
no˛ór
)

1201 
rc
 = 
	`ß„_ª°‹e_svÆue
(
•a˚
+1, 
v
);

1203 
rc
 = 
	`ª°‹e_svÆue
(
•a˚
+1, 
v
);

1204 i‡(
rc
 & 
ROB_ERROR
) {

1205 
	`FREE
(
theBuff
);

1207 i‡(
rc
 & 
ROB_GENERAL_ERROR
)

1208 
	`îr‹
("ª°‹e_obje˘(): IŒegÆ gíîÆ f‹m© whûêª°‹ög %s.\n", 
v¨
);

1209 i‡(
rc
 & 
ROB_NUMERAL_ERROR
)

1210 
	`îr‹
("ª°‹e_obje˘(): IŒegÆÇumîi¯f‹m© whûêª°‹ög %s.\n", 
v¨
);

1211 i‡(
rc
 & 
ROB_ARRAY_ERROR
)

1212 
	`îr‹
("ª°‹e_obje˘(): IŒegÆáºay f‹m© whûêª°‹ög %s.\n", 
v¨
);

1213 i‡(
rc
 & 
ROB_MAPPING_ERROR
)

1214 
	`îr‹
("ª°‹e_obje˘(): IŒegÆ m≠pög f‹m© whûêª°‹ög %s.\n", 
v¨
);

1215 i‡(
rc
 & 
ROB_STRING_ERROR
)

1216 
	`îr‹
("ª°‹e_obje˘(): IŒegÆ såög f‹m© whûêª°‹ög %s.\n", 
v¨
);

1217 i‡(
rc
 & 
ROB_CLASS_ERROR
)

1218 
	`îr‹
("ª°‹e_obje˘(): IŒegÆ cœs†f‹m© whûêª°‹ög %s.\n", 
v¨
);

1221 
	}
}

1229 
ßve_obje˘_ªcur£
 
	$P5
(
¥ogøm_t
 *, 
¥og
, 
svÆue_t
 **,

1230 
svp
, , 
ty≥
, , 
ßve_zîos
,

1231 
FILE
 *, 
f
) {

1232 
i
;

1233 
theSize
;

1234 *
√w_°r
, *
p
;

1236 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++) {

1237 i‡(!
	`ßve_obje˘_ªcur£
(
¥og
->
öhîô
[
i
].¥og, 
svp
,

1238 
¥og
->
öhîô
[
i
].
ty≥_mod
 | 
ty≥
,

1239 
ßve_zîos
, 
f
))

1242 i‡(
ty≥
 & 
DECL_NOSAVE
) {

1243 (*
svp
Ë+
¥og
->
num_v¨übÀs_deföed
;

1246 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++) {

1247 i‡(
¥og
->
v¨übÀ_ty≥s
[
i
] & 
DECL_NOSAVE
) {

1248 (*
svp
)++;

1251 
ßve_svÆue_dïth
 = 0;

1252 
theSize
 = 
	`svÆue_ßve_size
(*
svp
);

1253 
√w_°r
 = (*)
	`DXALLOC
(
theSize
, 
TAG_TEMPORARY
, "save_object: 2");

1254 *
√w_°r
 = '\0';

1255 
p
 = 
√w_°r
;

1256 
	`ßve_svÆue
((*
svp
)++, &
p
);

1257 
	`DEBUG_CHECK
(
p
 - 
√w_°r
 !
theSize
 - 1, "Length miscalculated in save_object!");

1259 i‡(
ßve_zîos
 || 
√w_°r
[0] != '0' ||Çew_str[1] != 0)

1260 i‡(
	`Ârötf
(
f
, "%†%s\n", 
¥og
->
v¨übÀ_èbÀ
[
i
], 
√w_°r
) < 0) {

1261 
	`debug_≥º‹
("save_object: fprintf", 0);

1262 
	`FREE
(
√w_°r
);

1265 
	`FREE
(
√w_°r
);

1268 
	}
}

1270 
	g£l
 = -1;

1273 
ßve_obje˘
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
fûe
, , 
ßve_zîos
)

1275 *
«me
, *
p
;

1276 
ßve_«me
[256], 
tmp_«me
[256];

1277 
Àn
;

1278 
FILE
 *
f
;

1279 
suc˚ss
;

1280 
svÆue_t
 *
v
;

1282 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1285 
Àn
 = 
	`°æí
(
fûe
);

1286 i‡(
fûe
[
Àn
-2] == '.' && file[len - 1] == 'c')

1287 
Àn
 -= 2;

1289 i‡(
£l
 =-1Ë£»
	`°æí
(
SAVE_EXTENSION
);

1290 i‡(
	`°rcmp
(
fûe
 + 
Àn
 - 
£l
, 
SAVE_EXTENSION
) == 0)

1291 
Àn
 -
£l
;

1293 
«me
 = 
	`√w_°rög
(
Àn
 + 
	`°æí
(
SAVE_EXTENSION
), "save_object");

1294 
	`°r˝y
(
«me
, 
fûe
);

1295 
	`°r˝y
(
«me
 + 
Àn
, 
SAVE_EXTENSION
);

1297 
	`push_mÆlo˚d_°rög
(
«me
);

1299 
fûe
 = 
	`check_vÆid_∑th
(
«me
, 
ob
, "save_object", 1);

1300 
	`‰ì_°rög_svÆue
(
•
--);

1301 i‡(!
fûe
)

1302 
	`îr‹
("Denied writeÖermission in save_object().\n");

1304 
	`°r˝y
(
ßve_«me
, 
ob
->
«me
);

1305 i‡((
p
 = 
	`°ºchr
(
ßve_«me
, '#')) != 0)

1306 *
p
 = '\0';

1307 
p
 = 
ßve_«me
 + 
	`°æí
(save_name) - 1;

1308 i‡(*
p
 != 'c' && *(p - 1) != '.')

1309 
	`°rˇt
(
p
, ".c");

1315 
	`•rötf
(
tmp_«me
, "%.250s.tmp", 
fûe
);

1317 i‡(!(
f
 = 
	`f›í
(
tmp_«me
, "w")Ë|| 
	`Ârötf
(f, "#/%s\n", 
ßve_«me
) < 0) {

1318 
	`îr‹
("CouldÇŸ o≥¿/%†f‹á save.\n", 
tmp_«me
);

1321 
v
 = 
ob
->
v¨übÀs
;

1322 
suc˚ss
 = 
	`ßve_obje˘_ªcur£
(
ob
->
¥og
, &
v
, 0, 
ßve_zîos
, 
f
);

1324 i‡(
	`f˛o£
(
f
) < 0) {

1325 
	`debug_≥º‹
("ßve_obje˘", 
fûe
);

1326 
suc˚ss
 = 0;

1329 i‡(!
suc˚ss
) {

1330 
	`debug_mesßge
("FailedÅo completely save file. Disk could be full.\n");

1331 
	`u∆ök
(
tmp_«me
);

1333 #ifde‡
WIN32


1335 
	`u∆ök
(
fûe
);

1337 i‡(
	`ª«me
(
tmp_«me
, 
fûe
) < 0) {

1338 #ifde‡
LATTICE


1340 i‡(
î∫o
 =
EEXIST
) {

1341 
	`u∆ök
(
fûe
);

1342 i‡(
	`ª«me
(
tmp_«me
, 
fûe
) >= 0) {

1347 
	`debug_≥º‹
("ßve_obje˘", 
fûe
);

1348 
	`debug_mesßge
("FaûedÅÿª«mê/%†tÿ/%s\n", 
tmp_«me
, 
fûe
);

1349 
	`debug_mesßge
("FailedÅo save object!\n");

1350 
	`u∆ök
(
tmp_«me
);

1355 
	}
}

1363 
ßve_v¨übÀ
 
	$P1
(
svÆue_t
 *, 
v¨
)

1365 
theSize
;

1366 *
√w_°r
, *
p
;

1368 
ßve_svÆue_dïth
 = 0;

1369 
theSize
 = 
	`svÆue_ßve_size
(
v¨
);

1370 
√w_°r
 = 
	`√w_°rög
(
theSize
 - 1, "save_variable");

1371 *
√w_°r
 = '\0';

1372 
p
 = 
√w_°r
;

1373 
	`ßve_svÆue
(
v¨
, &
p
);

1374 
	`DEBUG_CHECK
(
p
 - 
√w_°r
 !
theSize
 - 1, "Length miscalculated in save_variable");

1375  
√w_°r
;

1376 
	}
}

1378 
˙s_ju°_cou¡
 
	$P2
(*, 
idx
, 
¥ogøm_t
 *, 
¥og
) {

1379 
i
;

1381 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

1382 
	`˙s_ju°_cou¡
(
idx
, 
¥og
->
öhîô
[
i
].prog);

1383 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

1384 
	}
}

1386 
˙s_ªcur£
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
idx
, 
¥ogøm_t
 *, 
¥og
) {

1387 
i
;

1389 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++) {

1390 i‡(
¥og
->
öhîô
[
i
].
ty≥_mod
 & 
DECL_NOSAVE
)

1391 
	`˙s_ju°_cou¡
(
idx
, 
¥og
->
öhîô
[
i
].prog);

1393 
	`˙s_ªcur£
(
ob
, 
idx
, 
¥og
->
öhîô
[
i
].prog);

1395 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++) {

1396 i‡(!(
¥og
->
v¨übÀ_ty≥s
[
i
] & 
DECL_NOSAVE
)) {

1397 
	`‰ì_svÆue
(&
ob
->
v¨übÀs
[*
idx
 + 
i
], "cns_recurse");

1398 
ob
->
v¨übÀs
[*
idx
 + 
i
] = 
c⁄°0u
;

1401 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

1402 
	}
}

1404 
˛ór_n⁄_°©ics
 
	$P1
(
obje˘_t
 *, 
ob
) {

1405 
idx
 = 0;

1406 
	`˙s_ªcur£
(
ob
, &
idx
, ob->
¥og
);

1407 
	}
}

1409 
ª°‹e_obje˘
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
fûe
, , 
no˛ór
)

1411 *
«me
, *
theBuff
;

1412 
Àn
, 
i
;

1413 
FILE
 *
f
;

1414 
obje˘_t
 *
ßve
 = 
cuºít_obje˘
;

1415 
°©
 
°
;

1417 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1420 
Àn
 = 
	`°æí
(
fûe
);

1421 i‡(
fûe
[
Àn
-2] == '.' && file[len - 1] == 'c')

1422 
Àn
 -= 2;

1424 i‡(
£l
 =-1Ë£»
	`°æí
(
SAVE_EXTENSION
);

1425 i‡(
	`°rcmp
(
fûe
 + 
Àn
 - 
£l
, 
SAVE_EXTENSION
) == 0)

1426 
Àn
 -
£l
;

1428 
«me
 = 
	`√w_°rög
(
Àn
 + 
	`°æí
(
SAVE_EXTENSION
), "restore_object");

1429 
	`°∫˝y
(
«me
, 
fûe
, 
Àn
);

1430 
	`°r˝y
(
«me
 + 
Àn
, 
SAVE_EXTENSION
);

1432 
	`push_mÆlo˚d_°rög
(
«me
);

1434 
fûe
 = 
	`check_vÆid_∑th
(
«me
, 
ob
, "restore_object", 0);

1435 
	`‰ì_°rög_svÆue
(
•
--);

1436 i‡(!
fûe
Ë
	`îr‹
("DeniedÑeadÖermission inÑestore_object().\n");

1438 #ifde‡
LATTICE


1439 
f
 = 
NULL
;

1440 i‡((
	`°©
(
fûe
, &
°
Ë=-1Ë|| !(
f
 = 
	`f›í
(file, "r"))) {

1442 
f
 = 
	`f›í
(
fûe
, "r");

1443 i‡(!
f
 || 
	`f°©
(
	`fûío
(f), &
°
) == -1) {

1445 i‡(
f
)

1446 ()
	`f˛o£
(
f
);

1450 i‡(!(
i
 = 
°
.
°_size
)) {

1451 ()
	`f˛o£
(
f
);

1454 
theBuff
 = 
	`DXALLOC
(
i
 + 1, 
TAG_TEMPORARY
, "restore_object: 4");

1455 #ifde‡
WIN32


1456 
i
 = 
	`ªad
(
	`_fûío
(
f
), 
theBuff
, i);

1458 
	`‰ód
(
theBuff
, 1, 
i
, 
f
);

1460 
	`f˛o£
(
f
);

1461 
theBuff
[
i
] = '\0';

1462 
cuºít_obje˘
 = 
ob
;

1468 i‡(!
no˛ór
)

1469 
	`˛ór_n⁄_°©ics
(
ob
);

1471 
	`ª°‹e_obje˘_‰om_buff
(
ob
, 
theBuff
, 
no˛ór
);

1472 
cuºít_obje˘
 = 
ßve
;

1473 
	`debug
(
d_Êag
, ("Obje˘ /%†ª°‹ed from /%s.\n", 
ob
->
«me
, 
fûe
));

1475 
	`FREE
(
theBuff
);

1477 
	}
}

1479 
ª°‹e_v¨übÀ
 
	$P2
(
svÆue_t
 *, 
v¨
, *, 
°r
)

1481 
rc
;

1483 
rc
 = 
	`ª°‹e_svÆue
(
°r
, 
v¨
);

1484 i‡(
rc
 & 
ROB_ERROR
) {

1485 *
v¨
 = 
c⁄°0
;

1486 i‡(
rc
 & 
ROB_GENERAL_ERROR
)

1487 
	`îr‹
("restore_object(): Illegal general format.\n");

1488 i‡(
rc
 & 
ROB_NUMERAL_ERROR
)

1489 
	`îr‹
("restore_object(): IllegalÇumeric format.\n");

1490 i‡(
rc
 & 
ROB_ARRAY_ERROR
)

1491 
	`îr‹
("restore_object(): Illegalárray format.\n");

1492 i‡(
rc
 & 
ROB_MAPPING_ERROR
)

1493 
	`îr‹
("restore_object(): Illegal mapping format.\n");

1494 i‡(
rc
 & 
ROB_STRING_ERROR
)

1495 
	`îr‹
("restore_object(): Illegal string format.\n");

1497 
	}
}

1499 
ãŒ_≈c
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
°r
)

1501 
	`c›y_™d_push_°rög
(
°r
);

1502 
	`≠∂y
(
APPLY_CATCH_TELL
, 
ob
, 1, 
ORIGIN_DRIVER
);

1503 
	}
}

1515 
ãŒ_obje˘
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
°r
, , 
Àn
)

1517 i‡(!
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
)) {

1518 
	`add_mesßge
(0, 
°r
, 
Àn
);

1522 #i‚de‡
INTERACTIVE_CATCH_TELL


1523 i‡(
ob
->
öãø˘ive
)

1524 
	`add_mesßge
(
ob
, 
°r
, 
Àn
);

1527 
	`ãŒ_≈c
(
ob
, 
°r
);

1528 
	}
}

1530 
dóŒoc_obje˘
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
‰om
)

1532 #ifde‡
DEBUG


1533 
obje˘_t
 *
tmp
, *
¥ev_Æl
 = 0;

1536 
	`debug
(
d_Êag
, ("‰ì_obje˘: /%s.\n", 
ob
->
«me
));

1538 i‡(!(
ob
->
Êags
 & 
O_DESTRUCTED
)) {

1540 
	`Áèl
("FATAL: Object 0x%x /%sÑef count 0, butÇot destructed (from %s).\n",

1541 
ob
, ob->
«me
, 
‰om
);

1543 
	`DEBUG_CHECK
(
ob
->
öãø˘ive
, "TriedÅo freeán interactive object.\n");

1548 i‡(
ob
->
sw≠_num
 != -1)

1549 
	`ªmove_sw≠_fûe
(
ob
);

1550 i‡(
ob
->
¥og
) {

1551 
tŸ_Æloc_obje˘_size
 -=

1552 (
ob
->
¥og
->
num_v¨übÀs_tŸÆ
 - 1Ë* (
svÆue_t
) +

1553 (
obje˘_t
);

1554 
	`‰ì_¥og
(
ob
->
¥og
, 1);

1555 
ob
->
¥og
 = 0;

1557 i‡(
ob
->
ª∂a˚d_¥ogøm
) {

1558 
	`FREE_MSTR
(
ob
->
ª∂a˚d_¥ogøm
);

1559 
ob
->
ª∂a˚d_¥ogøm
 = 0;

1561 #ifde‡
PRIVS


1562 i‡(
ob
->
¥ivs
)

1563 
	`‰ì_°rög
(
ob
->
¥ivs
);

1565 i‡(
ob
->
«me
) {

1566 
	`debug
(
d_Êag
, ("Fªêobje˘ /%s\n", 
ob
->
«me
));

1568 
	`DEBUG_CHECK1
(
	`lookup_obje˘_hash
(
ob
->
«me
) == ob,

1569 "Fªeög obje˘ /%†buà«mê°û»öÇamêèbÀ", 
ob
->
«me
);

1570 
	`FREE
(
ob
->
«me
);

1571 
ob
->
«me
 = 0;

1573 #ifde‡
DEBUG


1574 
tmp
 = 
obj_li°_d™glög
;Åm∞!
ob
;Åm∞tmp->
√xt_Æl
)

1575 
¥ev_Æl
 = 
tmp
;

1576 i‡(
¥ev_Æl
Ë¥ev_Æl->
√xt_Æl
 = 
ob
->next_all;

1577 
obj_li°_d™glög
 = 
ob
->
√xt_Æl
;

1578 
ob
->
√xt_Æl
 = 0;

1579 
tŸ_d™glög_obje˘
--;

1581 
tŸ_Æloc_obje˘
--;

1582 
	`FREE
((*Ë
ob
);

1583 
	}
}

1585 
‰ì_obje˘
 
	$P2
(
obje˘_t
 *, 
ob
, *, 
‰om
)

1587 
ob
->
ªf
--;

1589 i‡(
ob
->
ªf
 > 0)

1591 
	`dóŒoc_obje˘
(
ob
, 
‰om
);

1592 
	}
}

1600 
obje˘_t
 *
gë_em±y_obje˘
 
	$P1
(, 
num_v¨
)

1602 
obje˘_t
 
NULL_obje˘
;

1603 
obje˘_t
 *
ob
;

1604 
size
 = (
obje˘_t
) +

1605 (
num_v¨
 - !!num_v¨Ë* (
svÆue_t
);

1606 
i
;

1608 
tŸ_Æloc_obje˘
++;

1609 
tŸ_Æloc_obje˘_size
 +
size
;

1610 
ob
 = (
obje˘_t
 *Ë
	`DXALLOC
(
size
, 
TAG_OBJECT
, "get_empty_object");

1616 *
ob
 = 
NULL_obje˘
;

1617 
ob
->
ªf
 = 1;

1618 
ob
->
sw≠_num
 = -1;

1619 
i
 = 0; i < 
num_v¨
; i++)

1620 
ob
->
v¨übÀs
[
i
] = 
c⁄°0u
;

1621  
ob
;

1622 
	}
}

1624 
ª£t_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

1627 
ob
->
√xt_ª£t
 = 
cuºít_time
 + 
TIME_TO_RESET
 / 2 +

1628 
	`øndom_numbî
(
TIME_TO_RESET
 / 2);

1630 
	`ßve_comm™d_givî
(0);

1631 i‡(!
	`≠∂y
(
APPLY_RESET
, 
ob
, 0, 
ORIGIN_DRIVER
)) {

1633 
ob
->
Êags
 &~
O_WILL_RESET
;

1635 
	`ª°‹e_comm™d_givî
();

1636 
ob
->
Êags
 |
O_RESET_STATE
;

1637 
	}
}

1639 
ˇŒ_¸óã
 
	$P2
(
obje˘_t
 *, 
ob
, , 
num_¨g
)

1642 
ob
->
√xt_ª£t
 = 
cuºít_time
 + 
TIME_TO_RESET
 / 2 +

1643 
	`øndom_numbî
(
TIME_TO_RESET
 / 2);

1645 
	`ˇŒ___INIT
(
ob
);

1647 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) {

1648 
	`p›_n_ñems
(
num_¨g
);

1652 
	`≠∂y
(
APPLY_CREATE
, 
ob
, 
num_¨g
, 
ORIGIN_DRIVER
);

1654 
ob
->
Êags
 |
O_RESET_STATE
;

1655 
	}
}

1657 #ifde‡
F_SET_HIDE


1658 
INLINE
 
obje˘_visibÀ
 
	$P1
(
obje˘_t
 *, 
ob
)

1660 i‡(
ob
->
Êags
 & 
O_HIDDEN
) {

1661 i‡(
cuºít_obje˘
->
Êags
 & 
O_HIDDEN
)

1664  
	`vÆid_hide
(
cuºít_obje˘
);

1667 
	}
}

1670 
ªlﬂd_obje˘
 
	$P1
(
obje˘_t
 *, 
obj
)

1672 
i
;

1674 i‡(!
obj
->
¥og
)

1676 
i
 = 0; i < (Ë
obj
->
¥og
->
num_v¨übÀs_tŸÆ
; i++) {

1677 
	`‰ì_svÆue
(&
obj
->
v¨übÀs
[
i
], "reload_object");

1678 
obj
->
v¨übÀs
[
i
] = 
c⁄°0u
;

1680 #i‡
	`deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

1681 i‡(
obj
->
Êags
 & 
O_EFUN_SOCKET
) {

1682 
	`˛o£_ª„ªncög_sockës
(
obj
);

1686 i‡(
obj
->
Êags
 & 
O_SWAPPED
)

1687 
	`lﬂd_ob_‰om_sw≠
(
obj
);

1693 #i‚de‡
NO_SHADOWS


1694 i‡(
obj
->
shadowed
 && !obj->
shadowög
) {

1695 
obje˘_t
 *
ob2
;

1696 
obje˘_t
 *
Ÿmp
;

1698 
ob2
 = 
obj
->
shadowed
; ob2;) {

1699 
Ÿmp
 = 
ob2
;

1700 
ob2
 = ob2->
shadowed
;

1701 
Ÿmp
->
shadowed
 = 0;

1702 
Ÿmp
->
shadowög
 = 0;

1703 
	`de°ru˘_obje˘
(
Ÿmp
);

1710 i‡(
obj
->
shadowög
)

1711 
obj
->
shadowög
->
shadowed
 = obj->shadowed;

1712 i‡(
obj
->
shadowed
)

1713 
obj
->
shadowed
->
shadowög
 = obj->shadowing;

1714 
obj
->
shadowög
 = 0;

1715 
obj
->
shadowed
 = 0;

1717 
	`ªmove_livög_«me
(
obj
);

1718 
	`£t_hóπ_bót
(
obj
, 0);

1719 
	`ªmove_Æl_ˇŒ_out
(
obj
);

1720 #i‚de‡
NO_LIGHT


1721 
	`add_light
(
obj
, -(obj->
tŸÆ_light
));

1723 #ifde‡
PACKAGE_UIDS


1724 #ifde‡
AUTO_SETEUID


1725 
obj
->
euid
 = obj->
uid
;

1727 
obj
->
euid
 = 
NULL
;

1730 
	`ˇŒ_¸óã
(
obj
, 0);

1731 
	}
}

1733 
gë_obje˘s
 
	$P4
(
obje˘_t
 ***, 
li°
, *, 
size
, 
gë_obje˘s‚_t
, 
ˇŒback
, *, 
d©a
)

1735 
obje˘_t
 *
ob
;

1736 #ifde‡
F_SET_HIDE


1737 
di•œy_hiddí
 = 0;

1739 i‡(
num_hiddí
 > 0) {

1740 i‡(
cuºít_obje˘
->
Êags
 & 
O_HIDDEN
) {

1741 
di•œy_hiddí
 = 1;

1743 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

1746 *
li°
 = (
obje˘_t
 **)
	`√w_°rög
(((
tŸ_Æloc_obje˘
 - (
di•œy_hiddí
 ? 0 : 
num_hiddí
)) * (object_t *)) - 1, "get_objects");

1748 *
li°
 = (
obje˘_t
 **)
	`√w_°rög
((
tŸ_Æloc_obje˘
 * (object_t *)) - 1, "get_objects");

1751 i‡(!*
li°
)

1752 
	`Áèl
("Out of memory!\n");

1753 
	`push_mÆlo˚d_°rög
((*)*
li°
);

1755 *
size
 = 0, 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
) {

1756 #ifde‡
F_SET_HIDE


1757 i‡(!
di•œy_hiddí
 && (
ob
->
Êags
 & 
O_HIDDEN
))

1760 i‡(!
ˇŒback
 || 
	`ˇŒback
(
ob
, 
d©a
))

1761 (*
li°
)[(*
size
)++] = 
ob
;

1763 
	}
}

1765 
obje˘_t
 *
	gcomm™d_givî_°ack
[
CFG_MAX_CALL_DEPTH
];

1766 
obje˘_t
 **
	gcg•
 = 
comm™d_givî_°ack
;

1768 #ifde‡
DEBUGMALLOC_EXTENSIONS


1769 
m¨k_comm™d_givî_°ack
 
PROT
(())

1771 
obje˘_t
 **
	gob
;

1773 
	gob
 = &
comm™d_givî_°ack
[0]; ob < 
	gcg•
; ob++) {

1774 i‡(*
	gob
)

1775 (*
	gob
)->
	gexåa_ªf
++;

1777 i‡(
	gcomm™d_givî
)

1778 
	gcomm™d_givî
->
	gexåa_ªf
++;

1783 
ßve_comm™d_givî
 
	$P1
(
obje˘_t
 *, 
ob
)

1785 
	`DEBUG_CHECK
(
cg•
 =&
comm™d_givî_°ack
[
CFG_MAX_CALL_DEPTH
], "command_giver stack overflow");

1786 *(++
cg•
Ë
comm™d_givî
;

1788 
comm™d_givî
 = 
ob
;

1789 i‡(
comm™d_givî
)

1790 
	`add_ªf
(
comm™d_givî
, "save_command_giver");

1791 
	}
}

1794 
ª°‹e_comm™d_givî
 
PROT
(())

1796 i‡(
	gcomm™d_givî
)

1797 
‰ì_obje˘
(
comm™d_givî
, "command_giver_error_handler");

1798 
DEBUG_CHECK
(
cg•
 =
comm™d_givî_°ack
, "command_giver stack underflow");

1799 
	gcomm™d_givî
 = *(
cg•
--);

1803 
£t_comm™d_givî
 
	$P1
(
obje˘_t
 *, 
ob
)

1805 i‡(
comm™d_givî
)

1806 
	`‰ì_obje˘
(
comm™d_givî
, "set_command_giver");

1808 
comm™d_givî
 = 
ob
;

1809 i‡(
comm™d_givî
 != 0)

1810 
	`add_ªf
(
comm™d_givî
, "set_command_giver");

1811 
	}
}

	@object.h

1 #i‚de‡
OBJECT_H


2 
	#OBJECT_H


	)

18 
	~"∑ckages/uids.h
"

19 
	~"∑ckages/mudlib_°©s.h
"

21 
	#MAX_OBJECT_NAME_SIZE
 2048

	)

23 
	#O_HEART_BEAT
 0x01

	)

24 #i‚de‡
NO_WIZARDS


25 
	#O_IS_WIZARD
 0x02

	)

28 
	#O_LISTENER
 0x04

	)

29 #i‚de‡
NO_ADD_ACTION


30 
	#O_ENABLE_COMMANDS
 0x04

	)

32 
	#O_CATCH_TELL
 0x04

	)

35 
	#O_CLONE
 0x08

	)

36 
	#O_DESTRUCTED
 0x10

	)

37 
	#O_SWAPPED
 0x20

	)

38 
	#O_ONCE_INTERACTIVE
 0x40

	)

39 
	#O_RESET_STATE
 0x80

	)

40 
	#O_WILL_CLEAN_UP
 0x100

	)

41 
	#O_VIRTUAL
 0x200

	)

42 #ifde‡
F_SET_HIDE


43 
	#O_HIDDEN
 0x400

	)

45 #i‡
deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

46 
	#O_EFUN_SOCKET
 0x800

	)

48 
	#O_WILL_RESET
 0x1000

	)

49 #i‚de‡
OLD_ED


50 
	#O_IN_EDIT
 0x2000

	)

52 #ifde‡
LPC_TO_C


53 
	#O_COMPILED_PROGRAM
 0x4000

	)

56 #i‚de‡
NO_SNOOP


57 
	#O_SNOOP
 0x8000

	)

64 
	s£¡í˚_s
 {

65 #i‚de‡
NO_ADD_ACTION


66 *
	mvîb
;

68 
£¡í˚_s
 *
	m√xt
;

69 
obje˘_s
 *
	mob
;

70 
°rög_‹_func
 
	mfun˘i⁄
;

71 
	mÊags
;

72 } 
	t£¡í˚_t
;

74 #ifde‡
LPC_TO_C


76 
	mªf
;

77 
	mÊags
;

78 #ifde‡
DEBUG


79 
	mexåa_ªf
;

81 *
	m«me
;

82 
obje˘_s
 *
	m√xt_hash
;

83 (**
	mjump_èbÀ
)();

84 
°rög_swôch_íåy_s
 **
	m°rög_swôch_èbÀs
;

85 } 
	tÕc_obje˘_t
;

88 
	sobje˘_s
 {

89 
	mªf
;

90 
	mÊags
;

91 #ifde‡
DEBUG


92 
	mexåa_ªf
;

94 *
	m«me
;

95 
obje˘_s
 *
	m√xt_hash
;

97 
	mlﬂd_time
;

98 #i‚de‡
NO_RESET


99 
	m√xt_ª£t
;

101 
	mtime_of_ªf
;

102 
	msw≠_num
;

103 
¥ogøm_t
 *
	m¥og
;

104 
obje˘_s
 *
	m√xt_Æl
;

105 #i‚de‡
NO_ENVIRONMENT


106 
obje˘_s
 *
	m√xt_öv
;

107 
obje˘_s
 *
	mc⁄èös
;

108 
obje˘_s
 *
	msu≥r
;

110 
öãø˘ive_s
 *
	möãø˘ive
;

111 *
	mª∂a˚d_¥ogøm
;

112 #i‚de‡
NO_LIGHT


113 
	mtŸÆ_light
;

115 #i‚de‡
NO_SHADOWS


116 
obje˘_s
 *
	mshadowög
;

117 
obje˘_s
 *
	mshadowed
;

119 #i‚de‡
NO_ADD_ACTION


120 
£¡í˚_t
 *
	m£¡
;

121 
obje˘_s
 *
	m√xt_hashed_livög
;

122 *
	mlivög_«me
;

124 #ifde‡
PACKAGE_UIDS


125 
u£rid_t
 *
	muid
;

126 
u£rid_t
 *
	meuid
;

128 #ifde‡
PRIVS


129 *
	m¥ivs
;

131 #ifde‡
PACKAGE_MUDLIB_STATS


132 
°©group_t
 
	m°©s
;

134 #ifde‡
PACKAGE_PARSER


135 
∑r£_öfo_s
 *
	mpöfo
;

137 
svÆue_t
 
	mv¨übÀs
[1];

139 } 
	tobje˘_t
;

141 (* 
	tgë_obje˘s‚_t
Ë
	tPROT
((
	tobje˘_t
 *, *));

143 #ifde‡
DEBUG


144 
	#add_ªf
(
ob
, 
°r
Ë
	`SAFE
(\

145 
ob
->
ªf
++; \

146 
	`debug
(
d_Êag
, \

148 
ob
->
«me
, ob->
ªf
, 
°r
));\

149 )

	)

151 
	#add_ªf
(
ob
, 
°r
Ëob->
ªf
++

	)

154 
	#ROB_STRING_ERROR
 1

	)

155 
	#ROB_ARRAY_ERROR
 2

	)

156 
	#ROB_MAPPING_ERROR
 4

	)

157 
	#ROB_NUMERAL_ERROR
 8

	)

158 
	#ROB_GENERAL_ERROR
 16

	)

159 
	#ROB_CLASS_ERROR
 32

	)

160 
	#ROB_ERROR
 63

	)

162 
obje˘_t
 *
¥evious_ob
;

163 
tŸ_Æloc_obje˘
;

164 
tŸ_Æloc_obje˘_size
;

165 
ßve_svÆue_dïth
;

166 
obje˘_t
 **
cg•
;

167 #ifde‡
F_SET_HIDE


168 
num_hiddí
;

171 
bufˇt
 
	`PROT
((**, *));

172 
INLINE
 
svÆue_ßve_size
 
	`PROT
((
svÆue_t
 *));

173 
INLINE
 
ßve_svÆue
 
	`PROT
((
svÆue_t
 *, **));

174 
INLINE
 
ª°‹e_svÆue
 
	`PROT
((*, 
svÆue_t
 *));

175 
ßve_obje˘
 
	`PROT
((
obje˘_t
 *, *, ));

176 *
ßve_v¨übÀ
 
	`PROT
((
svÆue_t
 *));

177 
ª°‹e_obje˘
 
	`PROT
((
obje˘_t
 *, *, ));

178 
ª°‹e_v¨übÀ
 
	`PROT
((
svÆue_t
 *, *));

179 
obje˘_t
 *
gë_em±y_obje˘
 
	`PROT
(());

180 
ª£t_obje˘
 
	`PROT
((
obje˘_t
 *));

181 
ˇŒ_¸óã
 
	`PROT
((
obje˘_t
 *, ));

182 
ªlﬂd_obje˘
 
	`PROT
((
obje˘_t
 *));

183 
‰ì_obje˘
 
	`PROT
((
obje˘_t
 *, *));

184 #ifde‡
F_SET_HIDE


185 
INLINE
 
vÆid_hide
 
	`PROT
((
obje˘_t
 *));

186 
INLINE
 
obje˘_visibÀ
 
	`PROT
((
obje˘_t
 *));

188 
	#obje˘_visibÀ
(
x
Ë1

	)

190 
ãŒ_≈c
 
	`PROT
((
obje˘_t
 *, *));

191 
ãŒ_obje˘
 
	`PROT
((
obje˘_t
 *, *, ));

192 
föd_globÆ_v¨übÀ
 
	`PROT
((
¥ogøm_t
 *, *, *, ));

193 
dóŒoc_obje˘
 
	`PROT
((
obje˘_t
 *, *));

194 
gë_obje˘s
 
	`PROT
((
obje˘_t
 ***, *, 
gë_obje˘s‚_t
, *));

195 #ifde‡
DEBUGMALLOC_EXTENSIONS


196 
m¨k_comm™d_givî_°ack
 
	`PROT
(());

198 
ßve_comm™d_givî
 
	`PROT
((
obje˘_t
 *));

199 
ª°‹e_comm™d_givî
 
	`PROT
(());

200 
£t_comm™d_givî
 
	`PROT
((
obje˘_t
 *));

	@op_spec.c

6 
›î©‹
 
	gp›_vÆue
, 
	gpush
, 
	gefun0
, 
	gefun1
, 
	gefun2
, 
	gefun3
, 
	gefunv
;

8 
›î©‹
 
	gsh‹t_öt
, 
	gnumbî
, 
	gªÆ
, 
	gbyã
, 
	gnbyã
, 
	g°rög
, 
	gsh‹t_°rög
, 
	gc⁄°0
, 
	gc⁄°1
;

10 
›î©‹
 
	gaggªg©e
, 
	gaggªg©e_assoc
;

11 #ifde‡
DEBUG


12 
›î©‹
 
	gbªak_poöt
;

18 
›î©‹
 
	gbønch_whí_zîo
, 
	gbønch_whí_n⁄_zîo
, 
	gbønch
;

19 
›î©‹
 
	gbbønch_whí_zîo
, 
	gbbønch_whí_n⁄_zîo
, 
	gbbønch
;

21 
›î©‹
 
	gbønch_√
, 
	gbønch_ge
, 
	gbønch_À
, 
	gbønch_eq
, 
	gbbønch_…
;

23 
›î©‹
 
	gf‹óch
, 
	g√xt_f‹óch
, 
	gexô_f‹óch
;

24 
›î©‹
 
	glo›_c⁄d_loˇl
, 
	glo›_c⁄d_numbî
;

25 
›î©‹
 
	glo›_ö¸
;

26 
›î©‹
 
	gwhûe_dec
;

28 
›î©‹
 
	gl‹
, 
	gœnd
;

30 
›î©‹
 
	gˇtch
, 
	gíd_ˇtch
;

31 
›î©‹
 
	gtime_ex¥essi⁄
, 
	gíd_time_ex¥essi⁄
;

33 
›î©‹
 ;

35 
›î©‹
 
	gˇŒ_fun˘i⁄_by_addªss
, 
	gˇŒ_öhîôed
, , 
	gªtu∫_zîo
;

38 
›î©‹
 
	geq
, 
	g√
, 
	gÀ
, 
	g…
, 
	gge
, 
	ggt
;

40 
›î©‹
 
	göc
, 
	gdec
, 
	g¥e_öc
, 
	gpo°_öc
, 
	g¥e_dec
, 
	gpo°_dec
;

42 
›î©‹
 
	gå™s„r_loˇl
;

44 
›î©‹
 
	gmake_ªf
, 
	gkûl_ªfs
;

47 
›î©‹
 
	gloˇl
, 
	gloˇl_lvÆue
;

48 
›î©‹
 
	gªf
, 
	gªf_lvÆue
;

49 
›î©‹
 
	gglobÆ
, 
	gglobÆ_lvÆue
;

50 
›î©‹
 
	gmembî
, 
	gmembî_lvÆue
;

51 
›î©‹
 
	gödex
, 
	gödex_lvÆue
;

52 
›î©‹
 
	grödex
, 
	grödex_lvÆue
;

53 
›î©‹
 
	g¬_ønge
, 
	g¬_ønge_lvÆue
, 
	g∫_ønge
, 
	g∫_ønge_lvÆue
;

54 
›î©‹
 
	gº_ønge
, 
	gº_ønge_lvÆue
, 
	gƒ_ønge
, 
	gƒ_ønge_lvÆue
;

55 
›î©‹
 
	g√_ønge
, 
	gª_ønge
;

58 
›î©‹
 
	gadd_eq
, 
	gsub_eq
, 
	g™d_eq
, 
	g‹_eq
, 
	gx‹_eq
, 
	glsh_eq
, 
	grsh_eq
, 
	gmu…_eq
;

59 
›î©‹
 
	gdiv_eq
, 
	gmod_eq
, 
	gassign
;

61 
›î©‹
 
	gvoid_add_eq
, 
	gvoid_assign
, 
	gvoid_assign_loˇl
;

63 
›î©‹
 
	gadd
, 
	gsubåa˘
, 
	gmu…ùly
, 
	gdivide
, 
	gmod
, 
	g™d
, 
	g‹
, 
	gx‹
, 
	glsh
, 
	grsh
;

64 
›î©‹
 
	gnŸ
, 
	g√g©e
, 
	gcom∂
;

66 
›î©‹
 
	gfun˘i⁄_c⁄°ru˘‹
;

67 
›î©‹
 
	gsimul_efun
;

69 
›î©‹
 
	gssˇnf
;

70 
›î©‹
 
	g∑r£_comm™d
;

72 
›î©‹
 
	g√w_˛ass
, 
	g√w_em±y_˛ass
;

73 
›î©‹
 
	gex∑nd_v¨¨gs
;

	@opc.h

7 
	s›c_s
 { *
	m«me
; 
	mcou¡
; } 
	t›c_t
;

9 
›c_t
 
	g›c_efun
[] = {

	@opcodes.h

9 
	#F_POP_VALUE
 1

	)

10 
	#F_PUSH
 2

	)

11 
	#F_EFUN0
 3

	)

12 
	#F_EFUN1
 4

	)

13 
	#F_EFUN2
 5

	)

14 
	#F_EFUN3
 6

	)

15 
	#F_EFUNV
 7

	)

16 
	#F_SHORT_INT
 8

	)

17 
	#F_NUMBER
 9

	)

18 
	#F_REAL
 10

	)

19 
	#F_BYTE
 11

	)

20 
	#F_NBYTE
 12

	)

21 
	#F_STRING
 13

	)

22 
	#F_SHORT_STRING
 14

	)

23 
	#F_CONST0
 15

	)

24 
	#F_CONST1
 16

	)

25 
	#F_AGGREGATE
 17

	)

26 
	#F_AGGREGATE_ASSOC
 18

	)

27 
	#F_BRANCH_WHEN_ZERO
 19

	)

28 
	#F_BRANCH_WHEN_NON_ZERO
 20

	)

29 
	#F_BRANCH
 21

	)

30 
	#F_BBRANCH_WHEN_ZERO
 22

	)

31 
	#F_BBRANCH_WHEN_NON_ZERO
 23

	)

32 
	#F_BBRANCH
 24

	)

33 
	#F_BRANCH_NE
 25

	)

34 
	#F_BRANCH_GE
 26

	)

35 
	#F_BRANCH_LE
 27

	)

36 
	#F_BRANCH_EQ
 28

	)

37 
	#F_BBRANCH_LT
 29

	)

38 
	#F_FOREACH
 30

	)

39 
	#F_NEXT_FOREACH
 31

	)

40 
	#F_EXIT_FOREACH
 32

	)

41 
	#F_LOOP_COND_LOCAL
 33

	)

42 
	#F_LOOP_COND_NUMBER
 34

	)

43 
	#F_LOOP_INCR
 35

	)

44 
	#F_WHILE_DEC
 36

	)

45 
	#F_LOR
 37

	)

46 
	#F_LAND
 38

	)

47 
	#F_CATCH
 39

	)

48 
	#F_END_CATCH
 40

	)

49 
	#F_TIME_EXPRESSION
 41

	)

50 
	#F_END_TIME_EXPRESSION
 42

	)

51 
	#F_SWITCH
 43

	)

52 
	#F_CALL_FUNCTION_BY_ADDRESS
 44

	)

53 
	#F_CALL_INHERITED
 45

	)

54 
	#F_RETURN
 46

	)

55 
	#F_RETURN_ZERO
 47

	)

56 
	#F_EQ
 48

	)

57 
	#F_NE
 49

	)

58 
	#F_LE
 50

	)

59 
	#F_LT
 51

	)

60 
	#F_GE
 52

	)

61 
	#F_GT
 53

	)

62 
	#F_INC
 54

	)

63 
	#F_DEC
 55

	)

64 
	#F_PRE_INC
 56

	)

65 
	#F_POST_INC
 57

	)

66 
	#F_PRE_DEC
 58

	)

67 
	#F_POST_DEC
 59

	)

68 
	#F_TRANSFER_LOCAL
 60

	)

69 
	#F_MAKE_REF
 61

	)

70 
	#F_KILL_REFS
 62

	)

71 
	#F_LOCAL
 63

	)

72 
	#F_LOCAL_LVALUE
 64

	)

73 
	#F_REF
 65

	)

74 
	#F_REF_LVALUE
 66

	)

75 
	#F_GLOBAL
 67

	)

76 
	#F_GLOBAL_LVALUE
 68

	)

77 
	#F_MEMBER
 69

	)

78 
	#F_MEMBER_LVALUE
 70

	)

79 
	#F_INDEX
 71

	)

80 
	#F_INDEX_LVALUE
 72

	)

81 
	#F_RINDEX
 73

	)

82 
	#F_RINDEX_LVALUE
 74

	)

83 
	#F_NN_RANGE
 75

	)

84 
	#F_NN_RANGE_LVALUE
 76

	)

85 
	#F_RN_RANGE
 77

	)

86 
	#F_RN_RANGE_LVALUE
 78

	)

87 
	#F_RR_RANGE
 79

	)

88 
	#F_RR_RANGE_LVALUE
 80

	)

89 
	#F_NR_RANGE
 81

	)

90 
	#F_NR_RANGE_LVALUE
 82

	)

91 
	#F_NE_RANGE
 83

	)

92 
	#F_RE_RANGE
 84

	)

93 
	#F_ADD_EQ
 85

	)

94 
	#F_SUB_EQ
 86

	)

95 
	#F_AND_EQ
 87

	)

96 
	#F_OR_EQ
 88

	)

97 
	#F_XOR_EQ
 89

	)

98 
	#F_LSH_EQ
 90

	)

99 
	#F_RSH_EQ
 91

	)

100 
	#F_MULT_EQ
 92

	)

101 
	#F_DIV_EQ
 93

	)

102 
	#F_MOD_EQ
 94

	)

103 
	#F_ASSIGN
 95

	)

104 
	#F_VOID_ADD_EQ
 96

	)

105 
	#F_VOID_ASSIGN
 97

	)

106 
	#F_VOID_ASSIGN_LOCAL
 98

	)

107 
	#F_ADD
 99

	)

108 
	#F_SUBTRACT
 100

	)

109 
	#F_MULTIPLY
 101

	)

110 
	#F_DIVIDE
 102

	)

111 
	#F_MOD
 103

	)

112 
	#F_AND
 104

	)

113 
	#F_OR
 105

	)

114 
	#F_XOR
 106

	)

115 
	#F_LSH
 107

	)

116 
	#F_RSH
 108

	)

117 
	#F_NOT
 109

	)

118 
	#F_NEGATE
 110

	)

119 
	#F_COMPL
 111

	)

120 
	#F_FUNCTION_CONSTRUCTOR
 112

	)

121 
	#F_SIMUL_EFUN
 113

	)

122 
	#F_SSCANF
 114

	)

123 
	#F_PARSE_COMMAND
 115

	)

124 
	#F_NEW_CLASS
 116

	)

125 
	#F_NEW_EMPTY_CLASS
 117

	)

126 
	#F_EXPAND_VARARGS
 118

	)

129 
	#BASE
 119

	)

131 
	#F__TO_INT
 119

	)

132 
	#F__TO_FLOAT
 120

	)

133 
	#F_THIS_PLAYER
 121

	)

134 
	#F_PREVIOUS_OBJECT
 122

	)

135 
	#F_CALL_STACK
 123

	)

136 
	#F_SIZEOF
 124

	)

137 
	#F_DESTRUCT
 125

	)

138 
	#F_FILE_NAME
 126

	)

139 
	#F_CAPITALIZE
 127

	)

140 
	#F_RANDOM
 128

	)

141 
	#F_ALL_INVENTORY
 129

	)

142 
	#F_DEEP_INVENTORY
 130

	)

143 
	#F_FIRST_INVENTORY
 131

	)

144 
	#F_NEXT_INVENTORY
 132

	)

145 
	#F_MOVE_OBJECT
 133

	)

146 
	#F_COMMAND
 134

	)

147 
	#F_LIVING
 135

	)

148 
	#F_SET_LIVING_NAME
 136

	)

149 
	#F_FIND_LIVING
 137

	)

150 
	#F_FIND_PLAYER
 138

	)

151 
	#F_NOTIFY_FAIL
 139

	)

152 
	#F_LOWER_CASE
 140

	)

153 
	#F_SAVE_VARIABLE
 141

	)

154 
	#F_RESTORE_VARIABLE
 142

	)

155 
	#F_WRITE
 143

	)

156 
	#F_SHOUT
 144

	)

157 
	#F_RECEIVE
 145

	)

158 
	#F_FIND_CALL_OUT
 146

	)

159 
	#F_VALUES
 147

	)

160 
	#F_KEYS
 148

	)

161 
	#F_CLONEP
 149

	)

162 
	#F_INTP
 150

	)

163 
	#F_UNDEFINEDP
 151

	)

164 
	#F_FLOATP
 152

	)

165 
	#F_STRINGP
 153

	)

166 
	#F_VIRTUALP
 154

	)

167 
	#F_FUNCTIONP
 155

	)

168 
	#F_POINTERP
 156

	)

169 
	#F_OBJECTP
 157

	)

170 
	#F_CLASSP
 158

	)

171 
	#F_TYPEOF
 159

	)

172 
	#F_BUFFERP
 160

	)

173 
	#F_ALLOCATE_BUFFER
 161

	)

174 
	#F_REPLACE_PROGRAM
 162

	)

175 
	#F_CRC32
 163

	)

176 
	#F_FILE_SIZE
 164

	)

177 
	#F_MKDIR
 165

	)

178 
	#F_RM
 166

	)

179 
	#F_RMDIR
 167

	)

180 
	#F_CTIME
 168

	)

181 
	#F_LOCALTIME
 169

	)

182 
	#F_QUERY_IDLE
 170

	)

183 
	#F_QUERY_SNOOP
 171

	)

184 
	#F_QUERY_SNOOPING
 172

	)

185 
	#F_SET_HEART_BEAT
 173

	)

186 
	#F_QUERY_HEART_BEAT
 174

	)

187 
	#F_SET_HIDE
 175

	)

188 
	#F_QUERY_SHADOWING
 176

	)

189 
	#F_THROW
 177

	)

190 
	#F_DEEP_INHERIT_LIST
 178

	)

191 
	#F_SHALLOW_INHERIT_LIST
 179

	)

192 
	#F_MAPP
 180

	)

193 
	#F_INTERACTIVE
 181

	)

194 
	#F_IN_EDIT
 182

	)

195 
	#F_IN_INPUT
 183

	)

196 
	#F_USERP
 184

	)

197 
	#F_GET_CONFIG
 185

	)

198 
	#F_CHILDREN
 186

	)

199 
	#F_RELOAD_OBJECT
 187

	)

200 
	#F_ERROR
 188

	)

201 
	#F_MUD_STATUS
 189

	)

202 
	#F_SET_EVAL_LIMIT
 190

	)

203 
	#F_REMOVE_SHADOW
 191

	)

204 
	#F_COPY
 192

	)

205 
	#F_PLURALIZE
 193

	)

206 
	#F_FILE_LENGTH
 194

	)

207 
	#F_UPPER_CASE
 195

	)

208 
	#F_FETCH_VARIABLE
 196

	)

209 
	#F_REMOVE_INTERACTIVE
 197

	)

210 
	#F_DEBUG_MESSAGE
 198

	)

211 
	#F_FUNCTION_OWNER
 199

	)

212 
	#F_SOCKET_CLOSE
 200

	)

213 
	#F_SOCKET_ERROR
 201

	)

214 
	#F_REFS
 202

	)

215 
	#F_COS
 203

	)

216 
	#F_SIN
 204

	)

217 
	#F_TAN
 205

	)

218 
	#F_ASIN
 206

	)

219 
	#F_ACOS
 207

	)

220 
	#F_ATAN
 208

	)

221 
	#F_SQRT
 209

	)

222 
	#F_LOG
 210

	)

223 
	#F_LOG10
 211

	)

224 
	#F_EXP
 212

	)

225 
	#F_FLOOR
 213

	)

226 
	#F_CEIL
 214

	)

229 
	#ONEARG_MAX
 215

	)

231 
	#F__CALL_OTHER
 215

	)

232 
	#F__EVALUATE
 216

	)

233 
	#F__THIS_OBJECT
 217

	)

234 
	#F__NEW
 218

	)

235 
	#F_BIND
 219

	)

236 
	#F_EXPLODE
 220

	)

237 
	#F_IMPLODE
 221

	)

238 
	#F_CALL_OUT
 222

	)

239 
	#F_MEMBER_ARRAY
 223

	)

240 
	#F_INPUT_TO
 224

	)

241 
	#F_ENVIRONMENT
 225

	)

242 
	#F_SAY
 226

	)

243 
	#F_TELL_ROOM
 227

	)

244 
	#F_PRESENT
 228

	)

245 
	#F_ADD_ACTION
 229

	)

246 
	#F_QUERY_VERB
 230

	)

247 
	#F_REMOVE_ACTION
 231

	)

248 
	#F_COMMANDS
 232

	)

249 
	#F_DISABLE_COMMANDS
 233

	)

250 
	#F_ENABLE_COMMANDS
 234

	)

251 
	#F_LIVINGS
 235

	)

252 
	#F_REPLACE_STRING
 236

	)

253 
	#F_RESTORE_OBJECT
 237

	)

254 
	#F_SAVE_OBJECT
 238

	)

255 
	#F_USERS
 239

	)

256 
	#F_GET_DIR
 240

	)

257 
	#F_STRSRCH
 241

	)

258 
	#F_TELL_OBJECT
 242

	)

259 
	#F_MESSAGE
 243

	)

260 
	#F_FIND_OBJECT
 244

	)

261 
	#F_ALLOCATE_MAPPING
 245

	)

262 
	#F_MAP_DELETE
 246

	)

263 
	#F_MATCH_PATH
 247

	)

264 
	#F_INHERITS
 248

	)

265 
	#F_REGEXP
 249

	)

266 
	#F_REG_ASSOC
 250

	)

267 
	#F_ALLOCATE
 251

	)

268 
	#F_CALL_OUT_INFO
 252

	)

269 
	#F_READ_BUFFER
 253

	)

270 
	#F_WRITE_BUFFER
 254

	)

271 
	#F_WRITE_FILE
 255

	)

272 
	#F_RENAME
 256

	)

273 
	#F_WRITE_BYTES
 257

	)

274 
	#F_READ_BYTES
 258

	)

275 
	#F_READ_FILE
 259

	)

276 
	#F_CP
 260

	)

277 
	#F_LINK
 261

	)

278 
	#F_CLEAR_BIT
 262

	)

279 
	#F_TEST_BIT
 263

	)

280 
	#F_SET_BIT
 264

	)

281 
	#F_NEXT_BIT
 265

	)

282 
	#F_CRYPT
 266

	)

283 
	#F_OLDCRYPT
 267

	)

284 
	#F_EXEC
 268

	)

285 
	#F_FUNCTION_EXISTS
 269

	)

286 
	#F_OBJECTS
 270

	)

287 
	#F_QUERY_HOST_NAME
 271

	)

288 
	#F_QUERY_IP_NAME
 272

	)

289 
	#F_QUERY_IP_NUMBER
 273

	)

290 
	#F_SNOOP
 274

	)

291 
	#F_REMOVE_CALL_OUT
 275

	)

292 
	#F_GENERATE_SOURCE
 276

	)

293 
	#F_LPC_INFO
 277

	)

294 
	#F_SET_RESET
 278

	)

295 
	#F_SHADOW
 279

	)

296 
	#F_SORT_ARRAY
 280

	)

297 
	#F_TIME
 281

	)

298 
	#F_UNIQUE_ARRAY
 282

	)

299 
	#F_UNIQUE_MAPPING
 283

	)

300 
	#F_PRINTF
 284

	)

301 
	#F_SPRINTF
 285

	)

302 
	#F_STAT
 286

	)

303 
	#F_MASTER
 287

	)

304 
	#F_MEMORY_INFO
 288

	)

305 
	#F_GET_CHAR
 289

	)

306 
	#F_UPTIME
 290

	)

307 
	#F_STRCMP
 291

	)

308 
	#F_RUSAGE
 292

	)

309 
	#F_FLUSH_MESSAGES
 293

	)

310 
	#F_ED
 294

	)

311 
	#F_CACHE_STATS
 295

	)

312 
	#F_FILTER
 296

	)

313 
	#F_MAP
 297

	)

314 
	#F_MALLOC_STATUS
 298

	)

315 
	#F_DUMPALLOBJ
 299

	)

316 
	#F_DUMP_FILE_DESCRIPTORS
 300

	)

317 
	#F_QUERY_LOAD_AVERAGE
 301

	)

318 
	#F_ORIGIN
 302

	)

319 
	#F_RECLAIM_OBJECTS
 303

	)

320 
	#F_RESOLVE
 304

	)

321 
	#F_SHUTDOWN
 305

	)

322 
	#F_QUERY_NOTIFY_FAIL
 306

	)

323 
	#F_NAMED_LIVINGS
 307

	)

324 
	#F_FUNCTIONS
 308

	)

325 
	#F_VARIABLES
 309

	)

326 
	#F_HEART_BEATS
 310

	)

327 
	#F_TERMINAL_COLOUR
 311

	)

328 
	#F_REPLACEABLE
 312

	)

329 
	#F_PROGRAM_INFO
 313

	)

330 
	#F_STORE_VARIABLE
 314

	)

331 
	#F_QUERY_IP_PORT
 315

	)

332 
	#F_REPEAT_STRING
 316

	)

333 
	#F_MEMORY_SUMMARY
 317

	)

334 
	#F_QUERY_REPLACED_PROGRAM
 318

	)

335 
	#F_NETWORK_STATS
 319

	)

336 
	#F_SOCKET_CREATE
 320

	)

337 
	#F_SOCKET_BIND
 321

	)

338 
	#F_SOCKET_LISTEN
 322

	)

339 
	#F_SOCKET_ACCEPT
 323

	)

340 
	#F_SOCKET_CONNECT
 324

	)

341 
	#F_SOCKET_WRITE
 325

	)

342 
	#F_SOCKET_RELEASE
 326

	)

343 
	#F_SOCKET_ACQUIRE
 327

	)

344 
	#F_SOCKET_ADDRESS
 328

	)

345 
	#F_SOCKET_STATUS
 329

	)

346 
	#F_DEBUG_INFO
 330

	)

347 
	#F_DUMP_PROG
 331

	)

348 
	#F_POW
 332

	)

351 
	#NUM_OPCODES
 332

	)

	@option_defs.c

52 
	#NUM_OPTION_DEFS
 48

	)

	@options.h

5 #i‚de‡
_OPTIONS_H_


6 
	#_OPTIONS_H_


	)

68 
	#SYSMALLOC


	)

69 #unde‡
SMALLOC


70 #unde‡
BSDMALLOC


84 #unde‡
WRAPPEDMALLOC


85 #unde‡
DEBUGMALLOC


99 #unde‡
SBRK_OK


106 #unde‡
DO_MSTATS


117 #unde‡
DEBUGMALLOC_EXTENSIONS


125 #unde‡
CHECK_MEMORY


152 #unde‡
HAS_STATUS_TYPE


169 
	#SANE_EXPLODE_STRING


	)

170 #unde‡
REVERSIBLE_EXPLODE_STRING


178 #unde‡
CAST_CALL_OTHERS


187 
	#NONINTERACTIVE_STDERR_WRITE


	)

194 
	#NO_LIGHT


	)

202 #unde‡
NO_ADD_ACTION


206 #unde‡
NO_SNOOP


213 #unde‡
NO_ENVIRONMENT


225 
	#NO_WIZARDS


	)

234 #unde‡
OLD_TYPE_BEHAVIOR


244 #unde‡
OLD_RANGE_BEHAVIOR


251 
	#OLD_ED


	)

266 
	#SENSIBLE_MODIFIERS


	)

283 #unde‡
CUSTOM_CRYPT


295 #unde‡
COMPAT_32


302 
	#STRING_STATS


	)

307 
	#ARRAY_STATS


	)

315 
	#LOG_CATCHES


	)

331 
	#ARGUMENTS_IN_TRACEBACK


	)

341 
	#LOCALS_IN_TRACEBACK


	)

353 
	#MUDLIB_ERROR_HANDLER


	)

359 #i‚de‡
LATTICE


360 
	#CONFIG_FILE_DIR
 "/u/tim/COMP/bö"

	)

362 
	#CONFIG_FILE_DIR
 "ëc:"

	)

393 
	#DEFAULT_PRAGMAS
 
PRAGMA_WARNINGS
 + 
PRAGMA_STRICT_TYPES
 + 
PRAGMA_ERROR_CONTEXT


	)

399 
	#SUPPRESS_ARGUMENT_WARNINGS


	)

402 #unde‡
NO_RESETS


413 #unde‡
LAZY_RESETS


420 
	#SAVE_EXTENSION
 ".o"

	)

437 
	#NO_ANSI


	)

438 
	#STRIP_BEFORE_PROCESS_INPUT


	)

443 #unde‡
OPCPROF


450 #unde‡
OPCPROF_2D


456 
	#TRAP_CRASHES


	)

461 
	#THIS_PLAYER_IN_CALL_OUT


	)

469 
	#CALLOUT_HANDLES


	)

474 #unde‡
FLUSH_OUTPUT_IMMEDIATELY


486 #unde‡
PRIVS


492 #unde‡
INTERACTIVE_CATCH_TELL


496 
	#RESTRICTED_ED


	)

500 #unde‡
NO_SHADOWS


507 #unde‡
SNOOP_SHADOWED


514 #unde‡
RECEIVE_SNOOP


525 #unde‡
PROFILE_FUNCTIONS


531 #unde‡
NO_BUFFER_TYPE


548 
	#BINARIES


	)

557 
	#ARRAY_RESERVED_WORD


	)

575 
	#REF_RESERVED_WORD


	)

588 
	#PACKAGE_CONTRIB


	)

592 
	#PACKAGE_DEVELOP


	)

597 
	#PACKAGE_MATH


	)

602 #unde‡
PACKAGE_MATRIX


608 #unde‡
PACKAGE_MUDLIB_STATS


613 
	#PACKAGE_SOCKETS


	)

618 #unde‡
PACKAGE_PARSER


623 #unde‡
PACKAGE_EXTERNAL


626 #ifde‡
PACKAGE_EXTERNAL


627 
	#NUM_EXTERNAL_CMDS


	)

631 #unde‡
PACKAGE_DB


636 #ifde‡
PACKAGE_DB


637 
	#USE_MSQL
 1

	)

638 #unde‡
USE_MYSQL
 2

639 
	#DEFAULT_DB
 
USE_MSQL


	)

659 #unde‡
PACKAGE_UIDS


665 #unde‡
AUTO_SETEUID


671 
	#AUTO_TRUST_BACKBONE


	)

690 #unde‡
USE_32BIT_ADDRESSES


702 
	#HEARTBEAT_INTERVAL
 2000000

	)

711 
	#CALLOUT_CYCLE_SIZE
 32

	)

717 
	#LARGEST_PRINTABLE_STRING
 8192

	)

722 
	#MESSAGE_BUFFER_SIZE
 4096

	)

738 
	#APPLY_CACHE_BITS
 12

	)

743 
	#CACHE_STATS


	)

748 #unde‡
TRACE


755 
	#LPC_TO_C


	)

764 #unde‡
RUNTIME_LOADING


770 #unde‡
TRACE_CODE


777 
	#HEART_BEAT_CHUNK
 32

	)

787 #unde‡
GET_CHAR_IS_BUFFERED


791 
	#SMALL_STRING_SIZE
 100

	)

792 
	#LARGE_STRING_SIZE
 1000

	)

798 
	#MAX_SAVE_SVALUE_DEPTH
 25

	)

804 
	#CFG_MAX_LOCAL_VARIABLES
 25

	)

806 
	#CFG_EVALUATOR_STACK_SIZE
 1000

	)

807 
	#CFG_MAX_CALL_DEPTH
 50

	)

809 
	#CFG_LIVING_HASH_SIZE
 256

	)

836 
	#NEXT_MALLOC_DEBUG


	)

	@options_incl.h

1 
	~"›ti⁄s.h
"

	@origin.h

1 #i‚de‡
ORIGIN_H


2 
	#ORIGIN_H


	)

4 
	e‹igö
 {

5 
	mORIGIN_DRIVER
 = 0x01,

6 
	mORIGIN_LOCAL
 = 0x02,

7 
	mORIGIN_CALL_OTHER
 = 0x04,

8 
	mORIGIN_SIMUL_EFUN
 = 0x08,

9 
	mORIGIN_INTERNAL
 = 0x10,

10 
	mORIGIN_EFUN
 = 0x20,

12 
	mORIGIN_FUNCTION_POINTER
 = 0x40,

14 
	mORIGIN_FUNCTIONAL
 = 0x80

	@otable.c

1 
	~"°d.h
"

2 
	~"ŸabÀ.h
"

3 
	~"comm.h
"

4 
	~"hash.h
"

5 
	~"simul_efun.h
"

6 
	~"ma°î.h
"

17 
	gŸabÀ_size
;

18 
	gŸabÀ_size_möus_⁄e
;

20 
obje˘_t
 *
föd_obj_n
 
PROT
((*));

25 
	#ObjHash
(
s
Ë
	`whash°r
(s, 40Ë& 
ŸabÀ_size_möus_⁄e


	)

32 
obje˘_t
 **
	gobj_èbÀ
 = 0;

34 
	$öô_ŸabÀ
()

36 
x
, 
y
;

39 
y
 = 
OTABLE_SIZE
;

40 
ŸabÀ_size
 = 1; oèbÀ_sizê< 
y
; otable_size *= 2)

42 
ŸabÀ_size_möus_⁄e
 = 
ŸabÀ_size
 - 1;

43 
obj_èbÀ
 = 
	`CALLOCATE
(
ŸabÀ_size
, 
obje˘_t
 *,

44 
TAG_OBJ_TBL
, "init_otable");

46 
x
 = 0; x < 
ŸabÀ_size
; x++)

47 
obj_èbÀ
[
x
] = 0;

48 
	}
}

54 
	gobj_£¨ches
 = 0, 
	gobj_¥obes
 = 0, 
	gobjs_found
 = 0;

57 
	gh
;

59 
obje˘_t
 *
föd_obj_n
 
	$P1
(*, 
s
)

61 
obje˘_t
 *
cuº
, *
¥ev
;

63 
h
 = 
	`ObjHash
(
s
);

64 
cuº
 = 
obj_èbÀ
[
h
];

65 
¥ev
 = 0;

67 
obj_£¨ches
++;

69 
cuº
) {

70 
obj_¥obes
++;

71 i‡(!
	`°rcmp
(
cuº
->
«me
, 
s
)) {

72 i‡(
¥ev
) {

73 
¥ev
->
√xt_hash
 = 
cuº
->next_hash;

74 
cuº
->
√xt_hash
 = 
obj_èbÀ
[
h
];

75 
obj_èbÀ
[
h
] = 
cuº
;

77 
objs_found
++;

78  (
cuº
);

80 
¥ev
 = 
cuº
;

81 
cuº
 = cuº->
√xt_hash
;

85 
	}
}

94 
	gobjs_ö_èbÀ
 = 0;

96 
íãr_obje˘_hash
 
	$P1
(
obje˘_t
 *, 
ob
)

98 
obje˘_t
 *
s
;

100 
s
 = 
	`föd_obj_n
(
ob
->
«me
);

102 #ifde‡
DEBUG


104 i‡(
s
 !
ma°î_ob
 && s !
simul_efun_ob
) {

105 #ifde‡
LPC_TO_C


106 
	`DEBUG_CHECK1
(
s
 && s !
ob
 && (!(s->
Êags
 & 
O_COMPILED_PROGRAM
)),

108 
ob
->
«me
);

110 
	`DEBUG_CHECK1
(
s
 && s !
ob
,

112 
ob
->
«me
);

117 
ob
->
√xt_hash
 = 
obj_èbÀ
[
h
];

118 
obj_èbÀ
[
h
] = 
ob
;

119 
objs_ö_èbÀ
++;

121 
	}
}

126 
íãr_obje˘_hash_©_íd
 
	$P1
(
obje˘_t
 *, 
ob
)

128 
obje˘_t
 *
s
;

129 
obje˘_t
 **
›
;

131 
s
 = 
	`föd_obj_n
(
ob
->
«me
);

133 
ob
->
√xt_hash
 = 0;

135 
›
 = &
obj_èbÀ
[
h
];

136 *
›
)

137 
›
 = &((*›)->
√xt_hash
);

138 *
›
 = 
ob
;

139 
objs_ö_èbÀ
++;

141 
	}
}

148 
ªmove_obje˘_hash
 
	$P1
(
obje˘_t
 *, 
ob
)

150 
obje˘_t
 *
s
;

152 
s
 = 
	`föd_obj_n
(
ob
->
«me
);

154 
	`DEBUG_CHECK1
(
s
 !
ob
, "Remove object \"/%s\": foundá different object!",

155 
ob
->
«me
);

157 
obj_èbÀ
[
h
] = 
ob
->
√xt_hash
;

158 
ob
->
√xt_hash
 = 0;

159 
objs_ö_èbÀ
--;

161 
	}
}

163 #ifde‡
LPC_TO_C


164 
ªmove_¥ecompûed_hashes
 
	$P1
(*, 
«me
) {

165 
h
 = 
	`ObjHash
(
«me
);

166 
obje˘_t
 **
p
;

167 
obje˘_t
 *
cuº
;

169 
p
 = &
obj_èbÀ
[
h
];

171 *
p
) {

172 i‡(((*
p
)->
Êags
 & 
O_COMPILED_PROGRAM
Ë&& !
	`°rcmp
((*p)->
«me
,Çame)) {

173 
cuº
 = *
p
;

174 
	`FREE
(
cuº
->
«me
);

175 
	`FREE
(
cuº
);

176 (*
p
Ë(*p)->
√xt_hash
;

178 
p
 = &((*p)->
√xt_hash
);

180 
	}
}

189 
	gu£r_obj_lookups
 = 0, 
	gu£r_obj_found
 = 0;

191 
obje˘_t
 *
lookup_obje˘_hash
 
	$P1
(*, 
s
)

193 
obje˘_t
 *
ob
 = 
	`föd_obj_n
(
s
);

195 
u£r_obj_lookups
++;

196 i‡(
ob
)

197 
u£r_obj_found
++;

198  (
ob
);

199 
	}
}

206 
	gsbuf
[100];

208 
show_ŸabÀ_°©us
 
	$P2
(
outbuf„r_t
 *, 
out
, , 
vîbo£
)

210 
°¨ts
;

212 i‡(
vîbo£
 == 1) {

213 
	`outbuf_add
(
out
, "ObjectÇame hashÅable status:\n");

214 
	`outbuf_add
(
out
, "------------------------------\n");

215 
	`•rötf
(
sbuf
, "%10.2f", 
objs_ö_èbÀ
 / (Ë
OTABLE_SIZE
);

216 
	`outbuf_addv
(
out
, "Avîagêhash chaöÜígth: %s\n", 
sbuf
);

217 
	`•rötf
(
sbuf
, "%10.2f", (Ë
obj_¥obes
 / 
obj_£¨ches
);

218 
	`outbuf_addv
(
out
, "Avîagê£¨chÜígth: %s\n", 
sbuf
);

219 
	`outbuf_addv
(
out
, "InternalÜookups (succeeded): %lu (%lu)\n",

220 
obj_£¨ches
 - 
u£r_obj_lookups
, 
objs_found
 - 
u£r_obj_found
);

221 
	`outbuf_addv
(
out
, "ExternalÜookups (succeeded): %lu (%lu)\n",

222 
u£r_obj_lookups
, 
u£r_obj_found
);

224 
°¨ts
 = (Ë
OTABLE_SIZE
 *(
obje˘_t
 *) +

225 
objs_ö_èbÀ
 * (
obje˘_t
);

227 i‡(!
vîbo£
) {

228 
	`outbuf_addv
(
out
, "ObjÅable overhead:\t\t%8d %8d\n",

229 
OTABLE_SIZE
 * (
obje˘_t
 *), 
°¨ts
);

231  
°¨ts
;

232 
	}
}

	@otable.h

1 #i‚de‡
OTABLE_H


2 
	#OTABLE_H


	)

4 
	~"Õc_ö˛.h
"

9 
öô_ŸabÀ
 
PROT
(());

10 
íãr_obje˘_hash
 
PROT
((
obje˘_t
 *));

11 
íãr_obje˘_hash_©_íd
 
PROT
((
obje˘_t
 *));

12 
ªmove_obje˘_hash
 
PROT
((
obje˘_t
 *));

13 
ªmove_¥ecompûed_hashes
 
PROT
((*));

14 
obje˘_t
 *
lookup_obje˘_hash
 
PROT
((*));

15 
show_ŸabÀ_°©us
 
PROT
((
outbuf„r_t
 *, ));

	@packages/contrib.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 #ifde‡
LATTICE


3 
	~"/Õc_ö˛.h
"

4 
	~"/comm.h
"

5 
	~"/fûe_ö˛.h
"

6 
	~"/fûe.h
"

7 
	~"/backíd.h
"

8 
	~"/sw≠.h
"

9 
	~"/compûî.h
"

10 
	~"/maö.h
"

11 
	~"/e›î©‹s.h
"

12 
	~"/simul_efun.h
"

13 
	~"/add_a˘i⁄.h
"

15 
	~"../Õc_ö˛.h
"

16 
	~"../comm.h
"

17 
	~"../fûe_ö˛.h
"

18 
	~"../fûe.h
"

19 
	~"../backíd.h
"

20 
	~"../sw≠.h
"

21 
	~"../compûî.h
"

22 
	~"../maö.h
"

23 
	~"../e›î©‹s.h
"

24 
	~"../efun_¥Ÿos.h
"

25 
	~"../simul_efun.h
"

26 
	~"../add_a˘i⁄.h
"

30 #ifde‡
WIN32


31 
	#°rˇ£cmp
(
X
, 
Y
Ë
	`°ricmp
(X, Y)

	)

40 #ifde‡
F_NAMED_LIVINGS


41 
	$f_«med_livögs
() {

42 
i
;

43 
nob
;

44 #ifde‡
F_SET_HIDE


45 
≠∂y_vÆid_hide
, 
di•œy_hiddí
 = 0;

47 
obje˘_t
 *
ob
, **
obèb
;

48 
¨øy_t
 *
vec
;

50 
nob
 = 0;

51 #ifde‡
F_SET_HIDE


52 
≠∂y_vÆid_hide
 = 1;

55 
obèb
 = 
	`CALLOCATE
(
max_¨øy_size
, 
obje˘_t
 *, 
TAG_TEMPORARY
, "named_livings");

57 
i
 = 0; i < 
CFG_LIVING_HASH_SIZE
; i++) {

58 
ob
 = 
hashed_livög
[
i
]; ob; ob = ob->
√xt_hashed_livög
) {

59 i‡(!(
ob
->
Êags
 & 
O_ENABLE_COMMANDS
))

61 #ifde‡
F_SET_HIDE


62 i‡(
ob
->
Êags
 & 
O_HIDDEN
) {

63 i‡(
≠∂y_vÆid_hide
) {

64 
≠∂y_vÆid_hide
 = 0;

65 
di•œy_hiddí
 = 
	`vÆid_hide
(
cuºít_obje˘
);

67 i‡(!
di•œy_hiddí
)

71 i‡(
nob
 =
max_¨øy_size
)

73 
obèb
[
nob
++] = 
ob
;

77 
vec
 = 
	`Æloˇã_em±y_¨øy
(
nob
);

78 --
nob
 >= 0) {

79 
vec
->
ôem
[
nob
].
ty≥
 = 
T_OBJECT
;

80 
vec
->
ôem
[
nob
].
u
.
ob
 = 
obèb
[nob];

81 
	`add_ªf
(
obèb
[
nob
], "livings");

84 
	`FREE
(
obèb
);

86 
	`push_ª„d_¨øy
(
vec
);

87 
	}
}

91 #ifde‡
F_REMOVE_SHADOW


93 
f_ªmove_shadow
 
PROT
(())

95 
obje˘_t
 *
	gob
;

97 
	gob
 = 
cuºít_obje˘
;

98 i‡(
	g°_num_¨g
) {

99 
	gob
 = 
•
->
u
.
ob
;

100 
p›_°ack
();

102 i‡(
	gob
 =0 || (
ob
->
shadowög
 =0 && ob->
shadowed
 == 0))

103 
push_numbî
(0);

105 i‡(
	gob
->
	gshadowed
)

106 
	gob
->
	gshadowed
->
	gshadowög
 = 
ob
->
shadowög
;

107 i‡(
	gob
->
	gshadowög
)

108 
	gob
->
	gshadowög
->
	gshadowed
 = 
ob
->
shadowed
;

109 
	gob
->
	gshadowög
 = 
ob
->
shadowed
 = 0;

110 
push_numbî
(1);

117 #ifde‡
F_QUERY_NOTIFY_FAIL


119 
f_quîy_nŸify_Áû
 
PROT
(()) {

120 *
	gp
;

122 i‡(
	gcomm™d_givî
 && comm™d_givî->
	göãø˘ive
) {

123 i‡(
	gcomm™d_givî
->
	göãø˘ive
->
	giÊags
 & 
	gNOTIFY_FAIL_FUNC
) {

124 
push_fu≈
(
comm™d_givî
->
öãø˘ive
->
deÁu…_îr_mesßge
.
f
);

126 } i‡((
	gp
 = 
comm™d_givî
->
öãø˘ive
->
deÁu…_îr_mesßge
.
s
)) {

127 
STACK_INC
;

128 
	g•
->
	gty≥
 = 
T_STRING
;

129 
	g•
->
	gsubty≥
 = 
STRING_SHARED
;

130 
	g•
->
	gu
.
	g°rög
 = 
p
;

131 
ªf_°rög
(
p
);

135 
push_numbî
(0);

140 #ifde‡
F_STORE_VARIABLE


142 
f_°‹e_v¨übÀ
 
PROT
(()) {

143 
	gidx
;

144 
svÆue_t
 *
	gsv
;

145 
	gty≥
;

147 
	gidx
 = 
föd_globÆ_v¨übÀ
(
cuºít_obje˘
->
¥og
, (
•
-1)->
u
.
°rög
, &
ty≥
, 0);

148 i‡(
	gidx
 == -1)

149 
îr‹
("Nÿv¨übÀÇamed '%s'!\n", (
•
-1)->
u
.
°rög
);

150 
	gsv
 = &
cuºít_obje˘
->
v¨übÀs
[
idx
];

151 
‰ì_svÆue
(
sv
, "f_store_variable");

152 *
	gsv
 = *
•
--;

153 
‰ì_°rög_svÆue
(
•
--);

157 #ifde‡
F_FETCH_VARIABLE


159 
f_„tch_v¨übÀ
 
PROT
(()) {

160 
	gidx
;

161 
svÆue_t
 *
	gsv
;

162 
	gty≥
;

164 
	gidx
 = 
föd_globÆ_v¨übÀ
(
cuºít_obje˘
->
¥og
, 
•
->
u
.
°rög
, &
ty≥
, 0);

165 i‡(
	gidx
 == -1)

166 
îr‹
("Nÿv¨übÀÇamed '%s'!\n", 
•
->
u
.
°rög
);

167 
	gsv
 = &
cuºít_obje˘
->
v¨übÀs
[
idx
];

168 
‰ì_°rög_svÆue
(
•
--);

169 
push_svÆue
(
sv
);

174 #ifde‡
F_SET_PROMPT


176 
f_£t_¥om±
 
PROT
(()) {

177 
obje˘_t
 *
	gwho
;

178 i‡(
	g°_num_¨g
 == 2) {

179 
who
 = 
•
->
u
.
ob
;

180 
p›_°ack
();

181 } 
	gwho
 = 
comm™d_givî
;

183 i‡(!
	gwho
 || who->
	gÊags
 & 
	gO_DESTRUCTED
 || !who->
	göãø˘ive
)

184 
îr‹
("Prompts can only be set for interactives.\n");

196 #ifde‡
F_COPY


197 
	gdïth
;

199 
dìp_c›y_svÆue
 
PROT
((
svÆue_t
 *, svalue_t *));

201 
¨øy_t
 *
dìp_c›y_¨øy
 
	$P1
–
¨øy_t
 *, 
¨g
 ) {

202 
¨øy_t
 *
vec
;

203 
i
;

205 
vec
 = 
	`Æloˇã_em±y_¨øy
(
¨g
->
size
);

206 
i
 = 0; i < 
¨g
->
size
; i++)

207 
	`dìp_c›y_svÆue
(&
¨g
->
ôem
[
i
], &
vec
->item[i]);

209  
vec
;

210 
	}
}

212 
¨øy_t
 *
dìp_c›y_˛ass
 
	$P1
(
¨øy_t
 *, 
¨g
) {

213 
¨øy_t
 *
vec
;

214 
i
;

216 
vec
 = 
	`Æloˇã_em±y_˛ass_by_size
(
¨g
->
size
);

217 
i
 = 0; i < 
¨g
->
size
; i++)

218 
	`dìp_c›y_svÆue
(&
¨g
->
ôem
[
i
], &
vec
->item[i]);

220  
vec
;

221 
	}
}

223 
doC›y
 
	$P3
–
m≠pög_t
 *, 
m≠
, 
m≠pög_node_t
 *, 
ñt
, m≠pög_à*, 
de°
) {

224 
svÆue_t
 *
sv
;

226 
sv
 = 
	`föd_f‹_ö£π
(
de°
, &
ñt
->
vÆues
[0], 1);

227 i‡(!
sv
) {

228 
	`m≠pög_too_œrge
();

232 
	`dìp_c›y_svÆue
(&
ñt
->
vÆues
[1], 
sv
);

234 
	}
}

236 
m≠pög_t
 *
dìp_c›y_m≠pög
 
	$P1
–
m≠pög_t
 *, 
¨g
 ) {

237 
m≠pög_t
 *
m≠
;

239 
m≠
 = 
	`Æloˇã_m≠pög
( 0 );

240 
	`m≠Tøvî£
–
¨g
, ((*)()Ë
doC›y
, 
m≠
);

241  
m≠
;

242 
	}
}

244 
dìp_c›y_svÆue
 
	$P2
(
svÆue_t
 *, 
‰om
, svÆue_à*, 
to
) {

245 
‰om
->
ty≥
) {

246 
T_ARRAY
:

247 
dïth
++;

248 i‡(
dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

249 
dïth
 = 0;

250 
	`îr‹
("Mappings,árraysánd/or classesÇestedÅoo deep (%d) for copy()\n",

251 
MAX_SAVE_SVALUE_DEPTH
);

253 *
to
 = *
‰om
;

254 
to
->
u
.
¨r
 = 
	`dìp_c›y_¨øy
–
‰om
->u.arr );

255 
dïth
--;

257 
T_CLASS
:

258 
dïth
++;

259 i‡(
dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

260 
dïth
 = 0;

261 
	`îr‹
("Mappings,árraysánd/or classesÇestedÅoo deep (%d) for copy()\n",

262 
MAX_SAVE_SVALUE_DEPTH
);

264 *
to
 = *
‰om
;

265 
to
->
u
.
¨r
 = 
	`dìp_c›y_˛ass
–
‰om
->u.arr );

266 
dïth
--;

268 
T_MAPPING
:

269 
dïth
++;

270 i‡(
dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

271 
dïth
 = 0;

272 
	`îr‹
("Mappings,árraysánd/or classesÇestedÅoo deep (%d) for copy()\n",

273 
MAX_SAVE_SVALUE_DEPTH
);

275 *
to
 = *
‰om
;

276 
to
->
u
.
m≠
 = 
	`dìp_c›y_m≠pög
–
‰om
->u.map );

277 
dïth
--;

279 #i‚de‡
NO_BUFFER_TYPE


280 
T_BUFFER
:

281 *
to
 = *
‰om
;

282 
to
->
u
.
buf
 = 
	`Æloˇã_buf„r
(
‰om
->u.buf->
size
);

283 
	`mem˝y
(
to
->
u
.
buf
->
ôem
,Åo->u.buf->ôem, 
‰om
->u.buf->
size
);

287 
	`assign_svÆue_no_‰ì
–
to
, 
‰om
 );

289 
	}
}

291 
f_c›y
 
PROT
(())

293 
svÆue_t
 
	gªt
;

295 
	gdïth
 = 0;

296 
dìp_c›y_svÆue
(
•
, &
ªt
);

297 
‰ì_svÆue
(
•
, "f_copy");

298 *
	g•
 = 
ªt
;

304 #ifde‡
F_FUNCTIONS


305 
f_fun˘i⁄s
 
PROT
(()) {

306 
	gi
, 
	gj
, 
	gnum
, 
	gödex
;

307 
¨øy_t
 *
	gvec
, *
	gsubvec
;

308 
fun˘i⁄_t
 *
	gfu≈
;

309 
¥ogøm_t
 *
	g¥og
;

310 
	gÊag
 = (
•
--)->
u
.
numbî
;

311 *
	gty≥s
;

312 
	gbuf
[256];

313 *
	gíd
 = 
EndOf
(
buf
);

314 
¥ogøm_t
 *
	g¥ogp
;

316 i‡(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_SWAPPED
)

317 
lﬂd_ob_‰om_sw≠
(
•
->
u
.
ob
);

319 
	g¥ogp
 = 
•
->
u
.
ob
->
¥og
;

320 
	gnum
 = 
¥ogp
->
num_fun˘i⁄s_deföed
 +Örogp->
œ°_öhîôed
;

321 i‡(
	g¥ogp
->
	gnum_fun˘i⁄s_deföed
 &&

322 
	g¥ogp
->
	gfun˘i⁄_èbÀ
[
¥ogp
->
num_fun˘i⁄s_deföed
-1].
	g«me
[0]

323 =
APPLY___INIT_SPECIAL_CHAR
)

324 
num
--;

326 
	gvec
 = 
Æloˇã_em±y_¨øy
(
num
);

327 
	gi
 = 
num
;

329 
	gi
--) {

330 
	glow
, 
	ghigh
, 
	gmid
;

332 
	g¥og
 = 
•
->
u
.
ob
->
¥og
;

333 
	gödex
 = 
i
;

336 i‡(
	g¥og
->
	gfun˘i⁄_Êags
[
ödex
] & 
	gFUNC_ALIAS
) {

337 
	gödex
 = 
¥og
->
fun˘i⁄_Êags
[
ödex
] & ~
FUNC_ALIAS
;

340 
	g¥og
->
	gfun˘i⁄_Êags
[
ödex
] & 
	gFUNC_INHERITED
) {

341 
	glow
 = 0;

342 
	ghigh
 = 
¥og
->
num_öhîôed
 -1;

344 
	ghigh
 > 
	glow
) {

345 
	gmid
 = (
low
 + 
high
 + 1) >> 1;

346 i‡(
	g¥og
->
	göhîô
[
mid
].
	gfun˘i⁄_ödex_off£t
 > 
	gödex
)

347 
	ghigh
 = 
mid
 -1;

348 
	glow
 = 
mid
;

350 
	gödex
 -
¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
;

351 
	g¥og
 = 
¥og
->
öhîô
[
low
].prog;

354 
	gödex
 -
¥og
->
œ°_öhîôed
;

356 
	gfu≈
 = 
¥og
->
fun˘i⁄_èbÀ
 + 
ödex
;

358 i‡(
	gÊag
) {

359 i‡(
	g¥og
->
	gty≥_°¨t
 &&Örog->ty≥_°¨t[
ödex
] !
INDEX_START_NONE
)

360 
ty≥s
 = &
¥og
->
¨gumít_ty≥s
[¥og->
ty≥_°¨t
[
ödex
]];

362 
	gty≥s
 = 0;

364 
	gvec
->
	gôem
[
i
].
	gty≥
 = 
T_ARRAY
;

365 
	gsubvec
 = 
vec
->
ôem
[
i
].
u
.
¨r
 = 
Æloˇã_em±y_¨øy
(3 + 
fu≈
->
num_¨g
);

367 
	gsubvec
->
	gôem
[0].
	gty≥
 = 
T_STRING
;

368 
	gsubvec
->
	gôem
[0].
	gsubty≥
 = 
STRING_SHARED
;

369 
	gsubvec
->
	gôem
[0].
	gu
.
	g°rög
 = 
ªf_°rög
(
fu≈
->
«me
);

371 
	gsubvec
->
	gôem
[1].
	gty≥
 = 
T_NUMBER
;

372 
	gsubvec
->
	gôem
[1].
	gsubty≥
 = 0;

373 
	gsubvec
->
	gôem
[1].
	gu
.
	gnumbî
 = 
fu≈
->
num_¨g
;

375 
gë_ty≥_«me
(
buf
, 
íd
, 
fu≈
->
ty≥
);

376 
	gsubvec
->
	gôem
[2].
	gty≥
 = 
T_STRING
;

377 
	gsubvec
->
	gôem
[2].
	gsubty≥
 = 
STRING_SHARED
;

378 
	gsubvec
->
	gôem
[2].
	gu
.
	g°rög
 = 
make_sh¨ed_°rög
(
buf
);

380 
	gj
 = 0; j < 
	gfu≈
->
	gnum_¨g
; j++) {

381 i‡(
	gty≥s
) {

382 
gë_ty≥_«me
(
buf
, 
íd
, 
ty≥s
[
j
]);

383 
	gsubvec
->
	gôem
[3 + 
j
].
	gty≥
 = 
T_STRING
;

384 
	gsubvec
->
	gôem
[3 + 
j
].
	gsubty≥
 = 
STRING_SHARED
;

385 
	gsubvec
->
	gôem
[3 + 
j
].
	gu
.
	g°rög
 = 
make_sh¨ed_°rög
(
buf
);

387 
	gsubvec
->
	gôem
[3 + 
j
].
	gty≥
 = 
T_NUMBER
;

388 
	gsubvec
->
	gôem
[3 + 
j
].
	gu
.
	gnumbî
 = 0;

392 
	gvec
->
	gôem
[
i
].
	gty≥
 = 
T_STRING
;

393 
	gvec
->
	gôem
[
i
].
	gsubty≥
 = 
STRING_SHARED
;

394 
	gvec
->
	gôem
[
i
].
	gu
.
	g°rög
 = 
ªf_°rög
(
fu≈
->
«me
);

398 
p›_°ack
();

399 
push_ª„d_¨øy
(
vec
);

404 #ifde‡
F_VARIABLES


405 
fv_ªcur£
 
	$P5
(
¨øy_t
 *, 
¨r
, *, 
idx
, 
¥ogøm_t
 *, 
¥og
, , 
ty≥
, , 
Êag
) {

406 
i
;

407 
¨øy_t
 *
sub¨r
;

408 
buf
[256];

409 *
íd
 = 
	`EndOf
(
buf
);

411 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++) {

412 
	`fv_ªcur£
(
¨r
, 
idx
, 
¥og
->
öhîô
[
i
].prog,

413 
ty≥
 | 
¥og
->
öhîô
[
i
].
ty≥_mod
, 
Êag
);

415 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++) {

416 i‡(
Êag
) {

417 
¨r
->
ôem
[*
idx
 + 
i
].
ty≥
 = 
T_ARRAY
;

418 
sub¨r
 = 
¨r
->
ôem
[*
idx
 + 
i
].
u
.¨∏
	`Æloˇã_em±y_¨øy
(2);

419 
sub¨r
->
ôem
[0].
ty≥
 = 
T_STRING
;

420 
sub¨r
->
ôem
[0].
subty≥
 = 
STRING_SHARED
;

421 
sub¨r
->
ôem
[0].
u
.
°rög
 = 
	`ªf_°rög
(
¥og
->
v¨übÀ_èbÀ
[
i
]);

422 
	`gë_ty≥_«me
(
buf
, 
íd
, 
¥og
->
v¨übÀ_ty≥s
[
i
]);

423 
sub¨r
->
ôem
[1].
ty≥
 = 
T_STRING
;

424 
sub¨r
->
ôem
[1].
subty≥
 = 
STRING_SHARED
;

425 
sub¨r
->
ôem
[1].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
buf
);

427 
¨r
->
ôem
[*
idx
 + 
i
].
ty≥
 = 
T_STRING
;

428 
¨r
->
ôem
[*
idx
 + 
i
].
subty≥
 = 
STRING_SHARED
;

429 
¨r
->
ôem
[*
idx
 + 
i
].
u
.
°rög
 = 
	`ªf_°rög
(
¥og
->
v¨übÀ_èbÀ
[i]);

432 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

433 
	}
}

435 
f_v¨übÀs
 
PROT
(()) {

436 
	gidx
 = 0;

437 
¨øy_t
 *
	g¨r
;

438 
	gÊag
 = (
•
--)->
u
.
numbî
;

439 
¥ogøm_t
 *
	g¥og
 = 
•
->
u
.
ob
->
¥og
;

441 i‡(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_SWAPPED
)

442 
lﬂd_ob_‰om_sw≠
(
•
->
u
.
ob
);

444 
	g¨r
 = 
Æloˇã_em±y_¨øy
(
¥og
->
num_v¨übÀs_tŸÆ
);

445 
fv_ªcur£
(
¨r
, &
idx
, 
¥og
, 0, 
Êag
);

447 
p›_°ack
();

448 
push_ª„d_¨øy
(
¨r
);

453 #ifde‡
F_HEART_BEATS


454 
f_hóπ_bóts
 
PROT
(()) {

455 
push_ª„d_¨øy
(
gë_hóπ_bóts
());

460 #ifde‡
F_TERMINAL_COLOUR


494 
	#NSTRSEGS
 32

	)

495 
	#TC_FIRST_CHAR
 '%'

	)

496 
	#TC_SECOND_CHAR
 '^'

	)

498 
	$©_íd
(
i
, 
imax
, 
z
, *
Àns
) {

499 i‡(
z
 + 1 !
Àns
[
i
])

501 
i
++; i < 
imax
; i++) {

502 i‡(
Àns
[
i
] > 0)

506 
	}
}

509 
f_ãrmöÆ_cﬁour
 
PROT
(())

511 *
	gö°r
, *
	g˝
, *
	gßve°r
, *
	gde°°r
, **
	g∑πs
;

512 
	gnum
, 
	gi
, 
	gj
, 
	gk
, 
	gcﬁ
, 
	g°¨t
, 
	g•a˚
, *
	gÀns
, 
	gmaybe_©_íd
;

513 
	g•a˚_g¨bage
 = 0;

514 
m≠pög_node_t
 *
	gñt
, **
	gmèb
;

515 
	gbuÊí
, 
	gmax_buÊí
, 
	g•a˚_buÊí
;

516 
	gwøp
 = 0;

517 
	gödít
 = 0;

519 i‡(
	g°_num_¨g
 >= 3) {

520 i‡(
°_num_¨g
 == 4)

521 
ödít
 = (
•
--)->
u
.
numbî
;

522 
	gwøp
 = (
•
--)->
u
.
numbî
;

523 i‡(
	gwøp
 < 2 && wø∞!0Ë
wøp
 = 2;

524 i‡(
	gödít
 < 0 || indíà>
wøp
 - 1)

525 
ödít
 = 
wøp
 - 2;

528 
	g˝
 = 
ö°r
 = (
•
-1)->
u
.
°rög
;

530 
	g˝
 = 
°rchr
(
˝
, 
TC_FIRST_CHAR
);

531 i‡(
	g˝
)

533 i‡(
	g˝
[1] =
TC_SECOND_CHAR
)

535 
ßve°r
 = 
°rög_c›y
(
ö°r
, "f_terminal_colour");

536 
	g˝
 = 
ßve°r
 + ( 
˝
 - 
ö°r
 );

537 
	gö°r
 = 
ßve°r
;

540 
	g˝
++;

542 } 
	g˝
);

543 i‡(
	g˝
 =
NULL
) {

544 i‡(
wøp
) {

545 
num
 = 1;

546 
	g∑πs
 = 
CALLOCATE
(1, *, 
TAG_TEMPORARY
, "f_terminal_colour:Öarts");

547 
	g∑πs
[0] = 
ö°r
;

548 
	gßve°r
 = 0;

550 
p›_°ack
();

556 
	g∑πs
 = 
CALLOCATE
(
NSTRSEGS
, *, 
TAG_TEMPORARY
, "f_terminal_colour:Öarts");

557 i‡(
	g˝
 - 
	gö°r
) {

558 
	gnum
 = 1;

559 
	g∑πs
[0] = 
ö°r
;

560 *
	g˝
 = 0;

562 
	gnum
 = 0;

563 
	g˝
) {

564 
	g˝
 += 2;

565 
	gö°r
 = 
˝
;

567 
	g˝
 = 
°rchr
(
˝
,
TC_FIRST_CHAR
);

568 i‡(
	g˝
) {

569 i‡(
	g˝
[1] =
TC_SECOND_CHAR
)

571 
	g˝
++;

573 } 
	g˝
);

574 i‡(
	g˝
) {

575 *
	g˝
 = 0;

576 i‡(
	g˝
 > 
	gö°r
) {

577 i‡(
	gnum
 &&Çum % 
	gNSTRSEGS
 == 0) {

578 
∑πs
 = 
RESIZE
’¨ts, 
num
 + 
NSTRSEGS
, *,

579 
TAG_TEMPORARY
, "f_terminal_colour:ÖartsÑealloc");

581 
	g∑πs
[
num
++] = 
ö°r
;

585 i‡(*
	gö°r
) {

586 i‡(
	gnum
 &&Çum % 
	gNSTRSEGS
 == 0) {

587 
∑πs
 = 
RESIZE
’¨ts, 
num
 + 
NSTRSEGS
, *,

588 
TAG_TEMPORARY
, "f_terminal_colour:ÖartsÑealloc");

590 
	g∑πs
[
num
++] = 
ö°r
;

594 i‡(
	gnum
 == 0) {

596 
FREE
(
∑πs
);

597 i‡(
	gßve°r
)

598 
FREE_MSTR
(
ßve°r
);

599 
p›_°ack
();

600 
‰ì_°rög_svÆue
(
•
);

601 
	g•
->
	gty≥
 = 
T_STRING
;

602 
	g•
->
	gsubty≥
 = 
STRING_CONSTANT
;

603 
	g•
->
	gu
.
	g°rög
 = "";

609 
	gÀns
 = 
CALLOCATE
(
num
, , 
TAG_TEMPORARY
, "f_terminal_colour:Üens");

610 
	gmèb
 = 
•
->
u
.
m≠
->
èbÀ
;

613 
	gcﬁ
 = 0;

614 
	g°¨t
 = -1;

615 
	g•a˚
 = 0;

616 
	gmaybe_©_íd
 = 0;

617 
	gbuÊí
 = 
max_buÊí
 = 
•a˚_buÊí
 = 0;

618 
	gj
 = 
i
 = 0, 
	gk
 = 
•
->
u
.
m≠
->
èbÀ_size
; 
	gi
 < 
	gnum
; i++) {

619 i‡((
	g˝
 = 
föd°rög
(
∑πs
[
i
]))) {

620 
tmp
 = 
MAP_POINTER_HASH
(
˝
);

621 
	gñt
 = 
mèb
[
tmp
 & 
k
];É…;É… = 
ñt
->
√xt
)

622 i‡–
ñt
->
vÆues
->
ty≥
 =
T_STRING
 &&

623 (
ñt
->
vÆues
 + 1)->
ty≥
 =
T_STRING
 &&

624 
˝
 =
ñt
->
vÆues
->
u
.
°rög
) {

625 
∑πs
[
i
] = (
ñt
->
vÆues
 + 1)->
u
.
°rög
;

627 
	gÀns
[
i
] = 
SVALUE_STRLEN
(
ñt
->
vÆues
 + 1);

628 i‡(
	gwøp
Ë
	gÀns
[
i
] = -
Àns
[i];

631 i‡(!
	gñt
)

632 
	gÀns
[
i
] = 
SHARED_STRLEN
(
˝
);

634 
	gÀns
[
i
] = 
°æí
(
∑πs
[i]);

637 i‡(
	gÀns
[
i
] <= 0) {

638 i‡(
j
 + -
Àns
[
i
] > 
max_°rög_Àngth
)

639 
Àns
[
i
] = -(-÷ís[i]Ë- (
j
 + -Àns[i] - 
max_°rög_Àngth
));

640 
	gj
 +-
Àns
[
i
];

641 
	gbuÊí
 +-
Àns
[
i
];

645 i‡(
	gmaybe_©_íd
) {

646 i‡(
	gj
 + 
	gödít
 > 
	gmax_°rög_Àngth
) {

651 
	gÀns
[
i
] = 0;

653 
	gj
 +
ödít
;

654 
	gcﬁ
 +
ödít
;

655 
	gmaybe_©_íd
 = 0;

659 
	gj
 +
Àns
[
i
];

660 i‡(
	gj
 > 
	gmax_°rög_Àngth
) {

661 
	gÀns
[
i
] -
j
 - 
max_°rög_Àngth
;

662 
	gj
 = 
max_°rög_Àngth
;

665 i‡(
	gwøp
) {

666 
	gz
;

667 *
	gp
 = 
∑πs
[
i
];

668 
	gz
 = 0; z < 
	gÀns
[
i
]; z++) {

669 
	gc
 = 
p
[
z
];

670 
	gbuÊí
++;

671 i‡(
	gc
 == '\n') {

672 
cﬁ
 = 0;

673 
	g•a˚
 = 
•a˚_buÊí
 = 0;

674 
	g°¨t
 = -1;

675 
	gmax_buÊí
 = (
buÊí
 > 
max_buÊí
 ? buflen : max_buflen);

676 
	gbuÊí
 = 0;

678 i‡(
	gcﬁ
 > 
	g°¨t
 || (
	gc
 !' ' && 
c
 != '\t'))

679 
cﬁ
++;

681 
	gj
--;

682 
	gbuÊí
--;

685 i‡(
	gcﬁ
 > 
	g°¨t
 && 
	gc
 == '\t')

686 
cﬁ
 += (8 - ((col - 1) % 8));

687 i‡(
	gc
 =' ' || 
c
 == '\t') {

688 
•a˚
 = 
cﬁ
;

689 
	g•a˚_buÊí
 = 
buÊí
;

691 i‡(
	gcﬁ
 =
wøp
+1) {

692 i‡(
•a˚
) {

693 
cﬁ
 -
•a˚
;

694 
	g•a˚
 = 0;

695 
	gmax_buÊí
 = (
buÊí
 > 
max_buÊí
 ? buflen : max_buflen);

696 
	gbuÊí
 -
•a˚_buÊí
;

697 
	g•a˚_buÊí
 = 0;

699 
	gj
++;

700 
	gcﬁ
 = 1;

701 
	gmax_buÊí
 = (
buÊí
 > 
max_buÊí
 ? buflen : max_buflen);

702 
	gbuÊí
 = 1;

704 
	g°¨t
 = 
ödít
;

710 i‡(
	gz
 + 1 !
Àns
[
i
] || 
cﬁ
) {

711 
j
 +
ödít
;

712 
	gcﬁ
 +
ödít
;

714 
	gmaybe_©_íd
 = 1;

716 i‡(
	gj
 > 
	gmax_°rög_Àngth
) {

717 
	gÀns
[
i
] -(
j
 - 
max_°rög_Àngth
);

718 
	gj
 = 
max_°rög_Àngth
;

719 i‡(
	gÀns
[
i
] < 
	gz
) {

721 
	gÀns
[
i
] = 
z
;

729 i‡(
	gwøp
 && 
	gbuÊí
 > 
	gmax_buÊí
)

730 
	gmax_buÊí
 = 
buÊí
;

734 
	g˝
 = 
de°°r
 = 
√w_°rög
(
j
, "f_terminal_colour: deststr");

735 i‡(
	gwøp
) {

736 *
	gtmp
 = 
√w_°rög
(
max_buÊí
, "f_terminal_colour: wrap");

737 *
	g±
 = 
tmp
;

739 
	gcﬁ
 = 0;

740 
	g°¨t
 = -1;

741 
	g•a˚
 = 0;

742 
	gbuÊí
 = 
•a˚_buÊí
 = 0;

743 
	gi
 = 0; i < 
	gnum
; i++) {

744 
	gköd
;

745 *
	gp
 = 
∑πs
[
i
];

746 i‡(
	gÀns
[
i
] < 0) {

747 
mem˝y
(
±
, 
p
, -
Àns
[
i
]);

748 
	g±
 +-
Àns
[
i
];

749 
	gbuÊí
 +-
Àns
[
i
];

750 
	g•a˚_g¨bage
 +-
Àns
[
i
];

754 
	gk
 = 0; k < 
	gÀns
[
i
]; k++) {

755 
	gn
;

756 
	gc
 = 
p
[
k
];

757 *
	g±
++ = 
c
;

758 
	gbuÊí
++;

759 i‡(
	gc
 == '\n') {

760 
cﬁ
 = 0;

761 
	gköd
 = 0;

762 
	g•a˚
 = 
•a˚_g¨bage
 = 0;

763 
	g°¨t
 = -1;

764 
	gbuÊí
 = 0;

766 i‡(
	gcﬁ
 > 
	g°¨t
 || (
	gc
 !' ' && 
c
 != '\t'))

767 
cﬁ
++;

769 
	g±
--;

770 
	gbuÊí
--;

773 i‡(
	gcﬁ
 > 
	g°¨t
 && 
	gc
 == '\t')

774 
cﬁ
 += (8 - ((col - 1) % 8));

775 i‡(
	gc
 =' ' || 
c
 == '\t') {

776 
•a˚
 = 
cﬁ
;

777 
	g•a˚_g¨bage
 = 0;

778 
	g•a˚_buÊí
 = 
buÊí
;

780 i‡(
	gcﬁ
 =
wøp
+1) {

781 i‡(
•a˚
) {

782 
cﬁ
 -
•a˚
;

783 
	g•a˚
 = 0;

784 
	gköd
 = 1;

785 
	gbuÊí
 -
•a˚_buÊí
;

786 
	g•a˚_buÊí
 = 0;

788 
	gcﬁ
 = 1;

789 
	gköd
 = 2;

790 
	gbuÊí
 = 1;

792 
	g°¨t
 = 
ödít
;

797 
	gn
 = (
±
 - 
tmp
Ë- 
buÊí
;

798 
mem˝y
(
˝
, 
tmp
, 
n
);

799 
	g˝
 +
n
;

800 i‡(
	gköd
 == 1) {

802 
˝
[-1] = '\n';

804 i‡(
	gköd
 == 2) {

806 *
˝
++ = '\n';

808 
memmove
(
tmp
,Åm∞+ 
n
, 
buÊí
);

809 
	g±
 = 
tmp
 + 
buÊí
;

810 i‡(
	gcﬁ
 || !
©_íd
(
i
, 
num
, 
k
, 
Àns
)) {

811 
mem£t
(
˝
, ' ', 
ödít
);

812 
	g˝
 +
ödít
;

813 
	gcﬁ
 +
ödít
;

817 
mem˝y
(
˝
, 
tmp
, 
±
 -Åmp);

818 
	g˝
 +
±
 - 
tmp
;

819 
FREE_MSTR
(
tmp
);

821 
	gi
 = 0; i < 
	gnum
; i++) {

822 
mem˝y
(
˝
, 
∑πs
[
i
], 
Àns
[i]);

823 
	g˝
 +
Àns
[
i
];

826 *
	g˝
 = 0;

827 
FREE
(
Àns
);

828 
FREE
(
∑πs
);

829 i‡(
	gßve°r
)

830 
FREE_MSTR
(
ßve°r
);

832 
p›_°ack
();

833 #ifde‡
DEBUG


834 i‡(
	g˝
 - 
	gde°°r
 !
j
) {

835 
Áèl
("Lígth misˇlcuœãd i¿ãrmöÆ_cﬁour()\¿ Ex≥˘ed: %òWas: %i\¿ Såög: %s\¿ Indít: %òWøp: %i\n", 
j
, 
˝
 - 
de°°r
, 
•
->
u
.
°rög
, 
ödít
, 
wøp
);

838 
‰ì_°rög_svÆue
(
•
);

839 
	g•
->
	gty≥
 = 
T_STRING
;

840 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

841 
	g•
->
	gu
.
	g°rög
 = 
de°°r
;

845 #ifde‡
F_PLURALIZE


847 
	#PLURAL_SUFFIX
 1

	)

848 
	#PLURAL_SAME
 2

	)

850 
	#PLURAL_CHOP
 2

	)

852 *
∂uølize
 
	$P1
(*, 
°r
) {

853 *
¥e
, *
ªl
, *
íd
;

854 *
p
, *
of_buf
;

855 
of_Àn
 = 0, 
∂í
, 
¶í
;

856 
sz
;

859 
found
 = 0;

860 *
suffix
 = "s";

862 
sz
 = 
	`°æí
(
°r
);

863 i‡(
sz
 == 0)  0;

866 i‡((
p
 = 
	`°r°r
(
°r
, " of "))) {

867 
of_buf
 = 
	`Æloc_c°rög
(
p
, "pluralize: of");

868 
of_Àn
 = 
	`°æí
(
of_buf
);

869 
sz
 = 
p
 - 
°r
;

876 i‡(
°r
[0] == 'a' || str[0] == 'A') {

877 i‡(
°r
[1] == ' ') {

878 
∂í
 = 
sz
 - 2;

879 
¥e
 = 
	`DXALLOC
(
∂í
 + 1, 
TAG_TEMPORARY
, "pluralize:Öre");

880 
	`°∫˝y
(
¥e
, 
°r
 + 2, 
∂í
);

881 } i‡(
°r
[1] == 'n' && str[2] == ' ') {

882 
∂í
 = 
sz
 - 3;

883 
¥e
 = 
	`DXALLOC
(
∂í
 + 1, 
TAG_TEMPORARY
, "pluralize:Öre");

884 
	`°∫˝y
(
¥e
, 
°r
 + 3, 
∂í
);

886 
∂í
 = 
sz
;

887 
¥e
 = 
	`DXALLOC
(
∂í
 + 1, 
TAG_TEMPORARY
, "pluralize:Öre");

888 
	`°∫˝y
(
¥e
, 
°r
, 
∂í
);

891 
∂í
 = 
sz
;

892 
¥e
 = 
	`DXALLOC
(
∂í
 + 1, 
TAG_TEMPORARY
, "pluralize:Öre");

893 
	`°∫˝y
(
¥e
, 
°r
, 
∂í
);

895 
¥e
[
∂í
] = 0;

900 i‡((
p
 = 
	`°ºchr
(
¥e
, ' ')))

901 
ªl
 = 
p
 + 1;

903 
ªl
 = 
¥e
;

905 
íd
 = 
ªl
 + 
	`°æí
(rel);

913 
ªl
[0]) {

916 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "re")) {

917 
found
 = 
PLURAL_CHOP
 + 3;

918 
suffix
 = "is";

923 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "us")) {

924 
found
 = 
PLURAL_SUFFIX
;

925 
suffix
 = "es";

927 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "onus")) {

928 
found
 = 
PLURAL_SUFFIX
;

929 
suffix
 = "es";

934 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "hild")) {

935 
found
 = 
PLURAL_SUFFIX
;

936 
suffix
 = "ren";

941 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "datum")) {

942 
found
 = 
PLURAL_CHOP
 + 2;

943 
suffix
 = "a";

945 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ie")) {

946 
found
 = 
PLURAL_CHOP
 + 1;

947 
suffix
 = "ce";

949 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "eer")) {

950 
found
 = 
PLURAL_SAME
;

952 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "o")) {

953 
found
 = 
PLURAL_SUFFIX
;

954 
suffix
 = "es";

956 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ynamo"))

957 
found
 = 
PLURAL_SUFFIX
;

961 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "oot")) {

962 
found
 = 
PLURAL_CHOP
 + 3;

963 
suffix
 = "eet";

966 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ish")) {

967 
found
 = 
PLURAL_SAME
;

970 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "forum")) {

971 
found
 = 
PLURAL_CHOP
 + 2;

972 
suffix
 = "a";

975 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ife"))

976 
found
 = 
PLURAL_SUFFIX
;

980 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "oose")) {

981 
found
 = 
PLURAL_CHOP
 + 4;

982 
suffix
 = "eese";

984 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "o")) {

985 
found
 = 
PLURAL_SUFFIX
;

986 
suffix
 = "es";

988 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "um")) {

989 
found
 = 
PLURAL_SUFFIX
;

994 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "uman"))

995 
found
 = 
PLURAL_SUFFIX
;

996 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ave")) {

997 
found
 = 
PLURAL_CHOP
 + 2;

998 
suffix
 = "s";

1003 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ndex")) {

1004 
found
 = 
PLURAL_CHOP
 + 2;

1005 
suffix
 = "ices";

1010 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ouse")) {

1011 
found
 = 
PLURAL_CHOP
 + 4;

1012 
suffix
 = "ice";

1014 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "otus")) {

1015 
found
 = 
PLURAL_SUFFIX
;

1021 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ackerel")) {

1022 
found
 = 
PLURAL_SAME
;

1025 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "oose")) {

1026 
found
 = 
PLURAL_SAME
;

1029 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ouse")) {

1030 
found
 = 
PLURAL_CHOP
 + 4;

1031 
suffix
 = "ice";

1034 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "atrix")) {

1035 
found
 = 
PLURAL_CHOP
 + 1;

1036 
suffix
 = "ces";

1041 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "x")) {

1042 
found
 = 
PLURAL_SUFFIX
;

1043 
suffix
 = "en";

1048 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ants"))

1049 
found
 = 
PLURAL_SAME
;

1053 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "oof"))

1054 
found
 = 
PLURAL_SUFFIX
;

1058 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "niff")) {

1059 
found
 = 
PLURAL_SUFFIX
;

1062 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "heep")) {

1063 
found
 = 
PLURAL_SAME
;

1066 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "phinx")) {

1067 
found
 = 
PLURAL_CHOP
 + 1;

1068 
suffix
 = "ges";

1071 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "taff")) {

1072 
found
 = 
PLURAL_CHOP
 + 2;

1073 
suffix
 = "ves";

1076 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "afe")) {

1077 
found
 = 
PLURAL_SUFFIX
;

1080 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "haman"))

1081 
found
 = 
PLURAL_SUFFIX
;

1085 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "hief")) {

1086 
found
 = 
PLURAL_CHOP
 + 1;

1087 
suffix
 = "ves";

1090 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ooth")) {

1091 
found
 = 
PLURAL_CHOP
 + 4;

1092 
suffix
 = "eeth";

1097 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "ax")) {

1098 
found
 = 
PLURAL_SUFFIX
;

1099 
suffix
 = "en";

1101 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "irus")) {

1102 
found
 = 
PLURAL_SUFFIX
;

1103 
suffix
 = "es";

1108 i‡(!
	`°rˇ£cmp
(
ªl
 + 1, "as")) {

1109 
found
 = 
PLURAL_CHOP
 + 2;

1110 
suffix
 = "ere";

1148 i‡(!
found
)

1149 
íd
[-1]) {

1151 i‡(
íd
[-2] == 'f' ||Énd[-2] == 'F') {

1152 
found
 = 
PLURAL_CHOP
 + 2;

1153 
suffix
 = "ves";

1157 i‡(
íd
[-2] == 'e' ||Énd[-2] == 'E')

1159 i‡(
íd
[-2] == 'f' ||Énd[-2] == 'F')

1160 
found
 = 
PLURAL_CHOP
 + 2;

1162 
found
 = 
PLURAL_CHOP
 + 1;

1163 
suffix
 = "ves";

1166 i‡(
íd
[-2] == 'c' ||Énd[-2]=='s')

1167 
suffix
 = "es";

1180 i‡(
íd
[-2] == 'u') {

1181 
found
 = 
PLURAL_CHOP
 + 2;

1182 
suffix
 = "a";

1187 i‡(
íd
[-2] == 'a' &&Énd[-3] == 'm') {

1188 
found
 = 
PLURAL_CHOP
 + 3;

1189 
suffix
 = "men";

1193 i‡(
íd
[-2] != 'o')

1194 
suffix
 = "es";

1197 i‡(
íd
[-2] == 'i') {

1198 
found
 = 
PLURAL_CHOP
 + 2;

1199 
suffix
 = "es";

1202 i‡(
íd
[-2] == 'u') {

1203 
found
 = 
PLURAL_CHOP
 + 2;

1204 
suffix
 = "i";

1207 i‡(
íd
[-2] == 'a' ||Énd[-2] == 'e' ||Énd[-2] == 'o')

1208 
suffix
 = "ses";

1210 
suffix
 = "es";

1213 
suffix
 = "es";

1216 i‡(
íd
[-2] != 'a' &&Énd[-2] != 'e' &&Énd[-2] != 'i'

1217 && 
íd
[-2] != 'o' &&Énd[-2] != 'u') {

1218 
found
 = 
PLURAL_CHOP
 + 1;

1219 
suffix
 = "ies";

1223 i‡(
íd
[-2] == 'a' ||Énd[-2] == 'e' ||Énd[-2] == 'o'

1224 || 
íd
[-2] == 'i' ||Énd[-2] == 'u')

1225 
suffix
 = "zes";

1227 
suffix
 = "es";

1230 
found
) {

1231 
PLURAL_SAME
:

1232 
¶í
 = 0;

1233 
sz
 = 
∂í
 + 
of_Àn
;

1236 
∂í
 -(
found
 - 
PLURAL_CHOP
);

1239 
PLURAL_SUFFIX
:

1240 
¶í
 = 
	`°æí
(
suffix
);

1241 
sz
 = 
∂í
 + 
¶í
 + 
of_Àn
;

1245 
p
 = 
	`√w_°rög
(
sz
, "pluralize");

1246 
p
[
sz
] = 0;

1248 
	`°∫˝y
(
p
, 
¥e
, 
∂í
);

1249 i‡(
¶í
)

1250 
	`°∫˝y
(
p
 + 
∂í
, 
suffix
, 
¶í
);

1251 i‡(
of_Àn
) {

1252 
	`°r˝y
(
p
 + 
∂í
 + 
¶í
, 
of_buf
);

1253 
	`FREE
(
of_buf
);

1256 
	`FREE
(
¥e
);

1257  
p
;

1258 
	}
}

1261 
f_∂uølize
 
PROT
(())

1263 *
	gs
;

1265 
	gs
 = 
∂uølize
(
•
->
u
.
°rög
);

1266 
p›_°ack
();

1267 i‡(!
	gs
)

1268 
push_numbî
(0);

1270 
push_mÆlo˚d_°rög
(
s
);

1274 #ifde‡
F_FILE_LENGTH


1279 
fûe_Àngth
 
	$P1
(*, 
fûe
)

1281 
°©
 
°
;

1282 
FILE
 *
f
;

1283 
ªt
 = 0;

1284 
num
;

1285 
buf
[2049];

1286 *
p
, *
√wp
;

1288 
fûe
 = 
	`check_vÆid_∑th
(fûe, 
cuºít_obje˘
, "file_size", 0);

1290 i‡(!
fûe
)  -1;

1291 i‡(
	`°©
(
fûe
, &
°
) == -1)

1293 i‡(
°
.
°_mode
 & 
S_IFDIR
)

1295 i‡(!(
f
 = 
	`f›í
(
fûe
, "r")))

1299 
num
 = 
	`‰ód
(
buf
, 1, 2048, 
f
);

1300 
p
 = 
buf
 - 1;

1301 (
√wp
 = 
	`memchr
(
p
 + 1, '\n', 
num
))) {

1302 
num
 -(
√wp
 - 
p
);

1303 
p
 = 
√wp
;

1304 
ªt
++;

1306 } !
	`„of
(
f
));

1308 
	`f˛o£
(
f
);

1309  
ªt
;

1310 
	}
}

1313 
f_fûe_Àngth
 
PROT
(())

1315 
	gl
;

1317 
	gl
 = 
fûe_Àngth
(
•
->
u
.
°rög
);

1318 
p›_°ack
();

1319 
push_numbî
(
l
);

1323 #ifde‡
F_UPPER_CASE


1325 
f_uµî_ˇ£
 
PROT
(())

1327 *
	g°r
;

1329 
	g°r
 = 
•
->
u
.
°rög
;

1331 ; *
	g°r
; str++) {

1332 i‡(
ui¶owî
(*
°r
)) {

1333 
	gl
 = 
°r
 - 
•
->
u
.
°rög
;

1334 
u∆ök_°rög_svÆue
(
•
);

1335 
	g°r
 = 
•
->
u
.
°rög
 + 
l
;

1336 *
	g°r
 = 
touµî
(()*
°r
);

1337 
	g°r
++; *str; str++) {

1338 i‡(
ui¶owî
(()*
°r
))

1339 *
	g°r
 = 
touµî
(()*
°r
);

1347 #ifde‡
F_REPLACEABLE


1348 
f_ª∂a˚abÀ
 
PROT
(()) {

1349 
obje˘_t
 *
	gobj
;

1350 
¥ogøm_t
 *
	g¥og
;

1351 
	gi
, 
	gj
, 
	gnum
, 
	gnumign‹e
, 
	gª∂a˚abÀ
;

1352 **
	gign‹e
;

1354 i‡(
	g°_num_¨g
 == 2) {

1355 
numign‹e
 = 
•
->
u
.
¨r
->
size
;

1356 i‡(
	gnumign‹e
)

1357 
	gign‹e
 = 
CALLOCATE
(
numign‹e
 + 2, *, 
TAG_TEMPORARY
, "replaceable");

1359 
	gign‹e
 = 0;

1360 
	gign‹e
[0] = 
föd°rög
(
APPLY_CREATE
);

1361 
	gign‹e
[1] = 
föd°rög
(
APPLY___INIT
);

1362 
	gi
 = 0; i < 
	gnumign‹e
; i++) {

1363 i‡(
	g•
->
	gu
.
	g¨r
->
	gôem
[
i
].
	gty≥
 =
T_STRING
)

1364 
ign‹e
[
i
 + 2] = 
föd°rög
(
•
->
u
.
¨r
->
ôem
[i].u.
°rög
);

1366 
	gign‹e
[
i
 + 2] = 0;

1368 
	gnumign‹e
 += 2;

1369 
	gobj
 = (
•
-1)->
u
.
ob
;

1371 
	gnumign‹e
 = 2;

1372 
	gign‹e
 = 
CALLOCATE
(2, *, 
TAG_TEMPORARY
, "replaceable");

1373 
	gign‹e
[0] = 
föd°rög
(
APPLY_CREATE
);

1374 
	gign‹e
[1] = 
föd°rög
(
APPLY___INIT
);

1375 
	gobj
 = 
•
->
u
.
ob
;

1378 
	g¥og
 = 
obj
->
¥og
;

1379 
	gnum
 = 
¥og
->
num_fun˘i⁄s_deföed
 +Örog->
œ°_öhîôed
;

1381 
	gi
 = 0; i < 
	gnum
; i++) {

1382 i‡(
	g¥og
->
	gfun˘i⁄_Êags
[
i
] & (
	gFUNC_INHERITED
 | 
	gFUNC_NO_CODE
)) ;

1383 
	gj
 = 0; j < 
	gnumign‹e
; j++)

1384 i‡(
	gign‹e
[
j
] =
föd_func_íåy
(
¥og
, 
i
)->
	g«me
)

1386 i‡(
	gj
 =
numign‹e
)

1390 
	gª∂a˚abÀ
 = (
i
 =
num
);

1391 i‡(
	gobj
 =
simul_efun_ob
 || 
¥og
->
func_ªf
)

1392 
ª∂a˚abÀ
 = 0;

1394 i‡(
	g°_num_¨g
 == 2)

1395 
‰ì_¨øy
((
•
--)->
u
.
¨r
);

1396 
FREE
(
ign‹e
);

1397 
‰ì_svÆue
(
•
, "f_replaceable");

1398 
put_numbî
(
ª∂a˚abÀ
);

1402 #ifde‡
F_PROGRAM_INFO


1403 
f_¥ogøm_öfo
 
PROT
(()) {

1404 
	gfunc_size
 = 0;

1405 
	g°rög_size
 = 0;

1406 
	gv¨_size
 = 0;

1407 
	göhîô_size
 = 0;

1408 
	g¥og_size
 = 0;

1409 
	ghdr_size
 = 0;

1410 
	g˛ass_size
 = 0;

1411 
	gty≥_size
 = 0;

1412 
	gtŸÆ_size
 = 0;

1413 
obje˘_t
 *
	gob
;

1414 
m≠pög_t
 *
	gm
;

1415 
¥ogøm_t
 *
	g¥og
;

1416 
	gi
, 
	gn
;

1418 i‡(
	g°_num_¨g
 == 1) {

1419 
ob
 = 
•
->
u
.ob;

1420 
	g¥og
 = 
ob
->
¥og
;

1421 i‡(!(
	gob
->
	gÊags
 & (
	gO_CLONE
|
	gO_SWAPPED
))) {

1422 
	ghdr_size
 +(
¥ogøm_t
);

1423 
	g¥og_size
 +
¥og
->
¥ogøm_size
;

1426 
	gfunc_size
 +(
¥og
->
œ°_öhîôed
 +

1427 
¥og
->
num_fun˘i⁄s_deföed
) *();

1430 
	gfunc_size
 +
¥og
->
num_fun˘i⁄s_deföed
 *

1431 (
fun˘i⁄_t
);

1433 
	g°rög_size
 +
¥og
->
num_°rögs
 * (*);

1434 
	gv¨_size
 +
¥og
->
num_v¨übÀs_deföed
 * ((*) + ());

1435 
	göhîô_size
 +
¥og
->
num_öhîôed
 * (
öhîô_t
);

1436 i‡(
	g¥og
->
	gnum_˛as£s
)

1437 
	g˛ass_size
 +
¥og
->
num_˛as£s
 * (
˛ass_def_t
Ë+ (¥og->
˛as£s
[¥og->num_˛as£†- 1].
ödex
 +Örog->˛as£s[¥og->num_˛as£†- 1].
size
Ë* (
˛ass_membî_íåy_t
);

1438 
	gty≥_size
 +
¥og
->
num_fun˘i⁄s_deföed
 * ();

1439 
	gn
 = 0;

1440 i‡(
	g¥og
->
	gty≥_°¨t
) {

1441 *
	gts
 = 
¥og
->
ty≥_°¨t
;

1442 
	gnfd
 = 
¥og
->
num_fun˘i⁄s_deföed
;

1444 
	gi
 = 0; i < 
	gnfd
; i++) {

1445 i‡(
	gts
[
i
] =
INDEX_START_NONE
)

1447 
	gn
 +
¥og
->
fun˘i⁄_èbÀ
[
i
].
num_¨g
;

1450 
	gty≥_size
 +
n
 * ();

1451 
	gtŸÆ_size
 +
¥og
->
tŸÆ_size
;

1453 
p›_°ack
();

1455 
	gob
 = 
obj_li°
; ob; ob = 
ob
->
√xt_Æl
) {

1456 i‡(
ob
->
Êags
 & (
O_CLONE
|
O_SWAPPED
)) ;

1457 
	g¥og
 = 
ob
->
¥og
;

1458 
	ghdr_size
 +(
¥ogøm_t
);

1459 
	g¥og_size
 +
¥og
->
¥ogøm_size
;

1462 
	gfunc_size
 +(
¥og
->
œ°_öhîôed
 +

1463 
¥og
->
num_fun˘i⁄s_deföed
) << 1;

1466 
	gfunc_size
 +
¥og
->
num_fun˘i⁄s_deföed
 *

1467 (
fun˘i⁄_t
);

1470 
	g°rög_size
 +
¥og
->
num_°rögs
 * (*);

1471 
	gv¨_size
 +
¥og
->
num_v¨übÀs_deföed
 * ((*) + ());

1472 
	göhîô_size
 +
¥og
->
num_öhîôed
 * (
öhîô_t
);

1473 i‡(
	g¥og
->
	gnum_˛as£s
)

1474 
	g˛ass_size
 +
¥og
->
num_˛as£s
 * (
˛ass_def_t
Ë+ (¥og->
˛as£s
[¥og->num_˛as£†- 1].
ödex
 +Örog->˛as£s[¥og->num_˛as£†- 1].
size
Ë* (
˛ass_membî_íåy_t
);

1475 
	gty≥_size
 +
¥og
->
num_fun˘i⁄s_deföed
 * ();

1476 
	gn
 = 0;

1477 i‡(
	g¥og
->
	gty≥_°¨t
) {

1478 *
	gts
 = 
¥og
->
ty≥_°¨t
;

1479 
	gnfd
 = 
¥og
->
num_fun˘i⁄s_deföed
;

1481 
	gi
 = 0; i < 
	gnfd
; i++) {

1482 i‡(
	gts
[
i
] =
INDEX_START_NONE
)

1484 
	gn
 +
¥og
->
fun˘i⁄_èbÀ
[
i
].
num_¨g
;

1487 
	gty≥_size
 +
n
 * ();

1488 
	gtŸÆ_size
 +
¥og
->
tŸÆ_size
;

1492 
	gm
 = 
Æloˇã_m≠pög
(0);

1493 
add_m≠pög_∑ú
(
m
, "hódî size", 
hdr_size
);

1494 
add_m≠pög_∑ú
(
m
, "codêsize", 
¥og_size
);

1495 
add_m≠pög_∑ú
(
m
, "fun˘i⁄ size", 
func_size
);

1496 
add_m≠pög_∑ú
(
m
, "°rög size", 
°rög_size
);

1497 
add_m≠pög_∑ú
(
m
, "v¨ size", 
v¨_size
);

1498 
add_m≠pög_∑ú
(
m
, "˛as†size", 
˛ass_size
);

1499 
add_m≠pög_∑ú
(
m
, "öhîô size", 
öhîô_size
);

1500 
add_m≠pög_∑ú
(
m
, "ßvedÅy≥ size", 
ty≥_size
);

1502 
add_m≠pög_∑ú
(
m
, "tŸÆ size", 
tŸÆ_size
);

1504 
push_ª„d_m≠pög
(
m
);

1515 #ifde‡
F_REMOVE_INTERACTIVE


1516 
f_ªmove_öãø˘ive
 
PROT
(()) {

1517 if–(
	g•
->
	gu
.
	gob
->
	gÊags
 & 
	gO_DESTRUCTED
Ë|| !(•->u.ob->
	göãø˘ive
) ) {

1518 
‰ì_obje˘
(
•
->
u
.
ob
, "f_remove_interactive");

1519 *
	g•
 = 
c⁄°0
;

1521 
ªmove_öãø˘ive
(
•
->
u
.
ob
, 0);

1523 i‡(
	g•
->
	gty≥
 =
T_OBJECT
)

1524 
‰ì_obje˘
(
•
->
u
.
ob
, "f_remove_interactive");

1525 *
	g•
 = 
c⁄°1
;

1534 #ifde‡
F_QUERY_IP_PORT


1535 
quîy_ù_p‹t
 
	$P1
(
obje˘_t
 *, 
ob
)

1537 i‡(!
ob
 || ob->
öãø˘ive
 == 0)

1539  
ob
->
öãø˘ive
->
loˇl_p‹t
;

1540 
	}
}

1543 
f_quîy_ù_p‹t
 
PROT
(())

1545 
	gtmp
;

1547 i‡(
	g°_num_¨g
) {

1548 
	gtmp
 = 
quîy_ù_p‹t
(
•
->
u
.
ob
);

1549 
‰ì_obje˘
(
•
->
u
.
ob
, "f_query_ip_port");

1551 
	gtmp
 = 
quîy_ù_p‹t
(
comm™d_givî
);

1552 
	gSTACK_INC
;

1554 
put_numbî
(
tmp
);

1566 #ifde‡
F_ZONETIME


1569 
	$£t_timez⁄e
 (* 
timez⁄e
)

1571 
put_tz
[20];

1572 *
ﬁd_tz
;

1574 
ﬁd_tz
 = 
	`gëív
("TZ");

1575 
	`•rötf
 (
put_tz
, "TZ=%s", 
timez⁄e
);

1576 
	`puãnv
 (
put_tz
);

1577 
	`tz£t
 ();

1578  
ﬁd_tz
;

1579 
	}
}

1582 
	$ª£t_timez⁄e
 (*
ﬁd_tz
)

1584 
i
 = 0;

1585 
ív_size
 = 0;

1586 
put_tz
[20];

1588 i‡(!
ﬁd_tz
)

1590 
ívú⁄
[
ív_size
] !
NULL
)

1592 i‡(
	`°æí
 (
ívú⁄
[
ív_size
]) > 3 &&Énviron[env_size][2] == '='

1593 && 
ívú⁄
[
ív_size
][1] == 'Z' &&Énviron[env_size][0] == 'T')

1595 
i
 = 
ív_size
;

1597 
ív_size
++;

1599 i‡((
i
+1Ë=
ív_size
)

1601 
ívú⁄
[
i
] = 
NULL
;

1605 
ívú⁄
[
i
] =Énvú⁄[
ív_size
-1];

1606 
ívú⁄
[
ív_size
-1] = 
NULL
;

1611 
	`•rötf
 (
put_tz
, "TZ=%s", 
ﬁd_tz
);

1612 
	`puãnv
 (
put_tz
);

1614 
	`tz£t
 ();

1615 
	}
}

1618 
f_z⁄ëime
 
PROT
(())

1620 *
	gtimez⁄e
, *
	gﬁd_tz
;

1621 *
	gªtv
;

1622 
	gtime_vÆ
;

1623 
	gÀn
;

1625 
	gtime_vÆ
 = 
•
->
u
.
numbî
;

1626 
p›_°ack
 ();

1627 
	gtimez⁄e
 = 
•
->
u
.
°rög
;

1628 
p›_°ack
 ();

1630 
	gﬁd_tz
 = 
£t_timez⁄e
 (
timez⁄e
);

1631 
	gªtv
 = 
˘ime
 ((
time_t
 *)&
time_vÆ
);

1632 
	gÀn
 = 
°æí
 (
ªtv
);

1633 
	gªtv
[
Àn
-1] = '\0';

1634 
ª£t_timez⁄e
 (
ﬁd_tz
);

1635 
push_mÆlo˚d_°rög
 (
°rög_c›y
(
ªtv
, "zonetime"));

1640 #ifde‡
F_IS_DAYLIGHT_SAVINGS_TIME


1642 
f_is_daylight_ßvögs_time
 
PROT
(())

1644 
tm
 *
	gt
;

1645 
	gtime_to_check
;

1646 *
	gtimez⁄e
;

1647 *
	gﬁd_tz
;

1649 
	gtime_to_check
 = 
•
->
u
.
numbî
;

1650 
p›_°ack
 ();

1651 
	gtimez⁄e
 = 
•
->
u
.
°rög
;

1652 
p›_°ack
 ();

1654 
	gﬁd_tz
 = 
£t_timez⁄e
 (
timez⁄e
);

1656 
	gt
 = 
loˇ…ime
 ((
time_t
 *)&
time_to_check
);

1658 
push_numbî
 ((
t
->
tm_isd°
) > 0);

1660 
ª£t_timez⁄e
 (
ﬁd_tz
);

1664 #ifde‡
F_DEBUG_MESSAGE


1665 
f_debug_mesßge
 
PROT
(()) {

1666 
debug_mesßge
("%s\n", 
•
->
u
.
°rög
);

1667 
‰ì_°rög_svÆue
(
•
--);

1671 #ifde‡
F_FUNCTION_OWNER


1672 
f_fun˘i⁄_ow√r
 
PROT
(()) {

1673 
obje˘_t
 *
	gow√r
 = 
•
->
u
.
Â
->
hdr
.
ow√r
;

1675 
‰ì_fu≈
(
•
->
u
.
Â
);

1676 
put_uƒe„d_obje˘
(
ow√r
, "f_function_owner");

1680 #ifde‡
F_REPEAT_STRING


1681 
f_ª≥©_°rög
 
PROT
(()) {

1682 *
	g°r
;

1683 
	gª≥©
, 
	gÀn
, 
	g√wÀn
;

1684 *
	gªt
, *
	gp
;

1685 
	gi
;

1687 
	gª≥©
 = (
•
--)->
u
.
numbî
;

1688 i‡(
	gª≥©
 > 0) {

1689 
	g°r
 = 
•
->
u
.
°rög
;

1690 
	gÀn
 = 
SVALUE_STRLEN
(
•
);

1691 i‡((
	g√wÀn
 = 
Àn
 * 
ª≥©
Ë> 
max_°rög_Àngth
)

1692 
ª≥©
 = 
max_°rög_Àngth
 / 
Àn
;

1694 i‡(
	gª≥©
 <= 0) {

1695 
‰ì_°rög_svÆue
(
•
);

1696 
	g•
->
	gty≥
 = 
T_STRING
;

1697 
	g•
->
	gsubty≥
 = 
STRING_CONSTANT
;

1698 
	g•
->
	gu
.
	g°rög
 = "";

1699 } i‡(
	gª≥©
 != 1) {

1700 
p
 = 
ªt
 = 
√w_°rög
(
√wÀn
, "f_repeat_string");

1701 
	gi
 = 0; i < 
	gª≥©
; i++) {

1702 
mem˝y
(
p
, 
°r
, 
Àn
);

1703 
	gp
 +
Àn
;

1705 *
	gp
 = 0;

1706 
‰ì_°rög_svÆue
(
•
);

1707 
	g•
->
	gty≥
 = 
T_STRING
;

1708 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

1709 
	g•
->
	gu
.
	g°rög
 = 
ªt
;

1714 #ifde‡
F_MEMORY_SUMMARY


1715 
mem‹y_sh¨e
 
PROT
((
svÆue_t
 *));

1717 
node_sh¨e
 
	$P3
(
m≠pög_t
 *, 
m
, 
m≠pög_node_t
 *, 
ñt
, *, 
ç
) {

1718 *
t
 = (*)
ç
;

1720 *
t
 +(
m≠pög_node_t
Ë- 2*(
svÆue_t
);

1721 *
t
 +
	`mem‹y_sh¨e
(&
ñt
->
vÆues
[0]);

1722 *
t
 +
	`mem‹y_sh¨e
(&
ñt
->
vÆues
[1]);

1725 
	}
}

1727 
mem‹y_sh¨e
 
	$P1
(
svÆue_t
 *, 
sv
) {

1728 
i
, 
tŸÆ
 = (
svÆue_t
);

1729 
subtŸÆ
;

1730 
dïth
 = 0;

1732 
sv
->
ty≥
) {

1733 
T_STRING
:

1734 
sv
->
subty≥
) {

1735 
STRING_MALLOC
:

1736  
tŸÆ
 +

1737 (1 + 
	`COUNTED_STRLEN
(
sv
->
u
.
°rög
Ë+ (
mÆloc_block_t
))/

1738 (
	`COUNTED_REF
(
sv
->
u
.
°rög
));

1739 
STRING_SHARED
:

1740  
tŸÆ
 +

1741 (1 + 
	`COUNTED_STRLEN
(
sv
->
u
.
°rög
Ë+ (
block_t
))/

1742 (
	`COUNTED_REF
(
sv
->
u
.
°rög
));

1745 
T_ARRAY
:

1746 
T_CLASS
:

1747 i‡(++
dïth
 > 100)

1753 
subtŸÆ
 = (
¨øy_t
Ë- (
svÆue_t
);

1754 
i
 = 0; i < 
sv
->
u
.
¨r
->
size
; i++)

1755 
subtŸÆ
 +
	`mem‹y_sh¨e
(&
sv
->
u
.
¨r
->
ôem
[
i
]);

1756 
dïth
--;

1757  
tŸÆ
 + 
subtŸÆ
/
sv
->
u
.
¨r
->
ªf
;

1758 
T_MAPPING
:

1759 i‡(++
dïth
 > 100)

1761 
subtŸÆ
 = (
m≠pög_t
);

1762 
	`m≠Tøvî£
(
sv
->
u
.
m≠
, 
node_sh¨e
, &
subtŸÆ
);

1763 
dïth
--;

1764  
tŸÆ
 + 
subtŸÆ
/
sv
->
u
.
m≠
->
ªf
;

1765 
T_FUNCTION
:

1767 
svÆue_t
 
tmp
;

1768 
tmp
.
ty≥
 = 
T_ARRAY
;

1769 
tmp
.
u
.
¨r
 = 
sv
->u.
Â
->
hdr
.
¨gs
;

1771 i‡(++
dïth
 > 100)

1774 i‡(
tmp
.
u
.
¨r
)

1775 
subtŸÆ
 = (
fu≈å_hdr_t
Ë+ 
	`mem‹y_sh¨e
(&
tmp
Ë- (
svÆue_t
);

1777 
subtŸÆ
 = (
fu≈å_hdr_t
);

1778 
sv
->
u
.
Â
->
hdr
.
ty≥
) {

1779 
FP_EFUN
:

1780 
subtŸÆ
 +(
efun_±r_t
);

1782 
FP_LOCAL
 | 
FP_NOT_BINDABLE
:

1783 
subtŸÆ
 +(
loˇl_±r_t
);

1785 
FP_SIMUL
:

1786 
subtŸÆ
 +(
simul_±r_t
);

1788 
FP_FUNCTIONAL
:

1789 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

1790 
subtŸÆ
 +(
fun˘i⁄Æ_t
);

1793 
dïth
--;

1794  
tŸÆ
 + 
subtŸÆ
/
sv
->
u
.
Â
->
hdr
.
ªf
;

1796 #i‚de‡
NO_BUFFER_TYPE


1797 
T_BUFFER
:

1799  
tŸÆ
 + ((
buf„r_t
Ë+ 
sv
->
u
.
buf
->
size
 - 1)/sv->u.buf->
ªf
;

1802  
tŸÆ
;

1803 
	}
}

1811 #ifde‡
F_MEMORY_SUMMARY


1812 
fms_ªcur£
 
	$P4
(
m≠pög_t
 *, 
m≠
, 
obje˘_t
 *, 
ob
,

1813 *, 
idx
, 
¥ogøm_t
 *, 
¥og
) {

1814 
i
;

1815 
svÆue_t
 *
íåy
;

1816 
svÆue_t
 
sv
;

1818 
sv
.
ty≥
 = 
T_STRING
;

1819 
sv
.
subty≥
 = 
STRING_SHARED
;

1821 
i
 = 0; i < 
¥og
->
num_öhîôed
; i++)

1822 
	`fms_ªcur£
(
m≠
, 
ob
, 
idx
, 
¥og
->
öhîô
[
i
].prog);

1824 
i
 = 0; i < 
¥og
->
num_v¨übÀs_deföed
; i++) {

1825 
size
 = 
	`mem‹y_sh¨e
(
ob
->
v¨übÀs
 + *
idx
 + 
i
);

1827 
sv
.
u
.
°rög
 = 
¥og
->
v¨übÀ_èbÀ
[
i
];

1828 
íåy
 = 
	`föd_f‹_ö£π
(
m≠
, &
sv
, 0);

1829 
íåy
->
u
.
numbî
 +
size
;

1831 *
idx
 +
¥og
->
num_v¨übÀs_deföed
;

1832 
	}
}

1834 
f_mem‹y_summ¨y
 
PROT
(()) {

1835 
m≠pög_t
 *
	gªsu…
 = 
Æloˇã_m≠pög
(8);

1836 
obje˘_t
 *
	gob
;

1837 
	gidx
;

1838 
svÆue_t
 
	gsv
;

1840 
	gsv
.
	gty≥
 = 
T_STRING
;

1841 
	gsv
.
	gsubty≥
 = 
STRING_SHARED
;

1843 
	gob
 = 
obj_li°
; ob; ob = 
ob
->
√xt_Æl
) {

1844 
svÆue_t
 *
íåy
;

1846 i‡(
	gob
->
	gÊags
 & 
	gO_SWAPPED
)

1847 
lﬂd_ob_‰om_sw≠
(
ob
);

1849 
	gsv
.
	gu
.
	g°rög
 = 
ob
->
¥og
->
«me
;

1850 
	gíåy
 = 
föd_f‹_ö£π
(
ªsu…
, &
sv
, 0);

1851 i‡(
	gíåy
->
	gty≥
 =
T_NUMBER
) {

1852 
íåy
->
ty≥
 = 
T_MAPPING
;

1853 
	gíåy
->
	gu
.
	gm≠
 = 
Æloˇã_m≠pög
(8);

1855 
	gidx
 = 0;

1856 
fms_ªcur£
(
íåy
->
u
.
m≠
, 
ob
, &
idx
, ob->
¥og
);

1858 
push_ª„d_m≠pög
(
ªsu…
);

1865 #ifde‡
F_QUERY_REPLACED_PROGRAM


1866 
f_quîy_ª∂a˚d_¥ogøm
 
PROT
(())

1868 *
	gªs
 = 0;

1870 i‡(
	g°_num_¨g
)

1872 i‡(
	g•
->
	gu
.
	gob
->
	gª∂a˚d_¥ogøm
)

1873 
	gªs
 = 
add_¶ash
(
•
->
u
.
ob
->
ª∂a˚d_¥ogøm
);

1874 
‰ì_obje˘
(
•
->
u
.
ob
, "f_query_replaced_program");

1878 i‡(
	gcuºít_obje˘
->
	gª∂a˚d_¥ogøm
)

1879 
	gªs
 = 
add_¶ash
(
•
->
u
.
ob
->
ª∂a˚d_¥ogøm
);

1880 
	gSTACK_INC
;

1883 i‡(
	gªs
) {

1884 
put_mÆlo˚d_°rög
(
ªs
);

1886 
put_numbî
(0);

1892 #ifde‡
F_NETWORK_STATS


1893 
f_√tw‹k_°©s
 
PROT
(())

1895 
m≠pög_t
 *
	gm
;

1896 
	gi
, 
	gp‹ts
 = 0;

1898 
	gi
 = 0; i < 5; i++)

1899 i‡(
	gexã∫Æ_p‹t
[
i
].
	gp‹t
)

1900 
	gp‹ts
 += 4;

1902 #i‚de‡
PACKAGE_SOCKETS


1903 
	gm
 = 
Æloˇã_m≠pög
(
p‹ts
 + 4);

1905 
	gm
 = 
Æloˇã_m≠pög
(
p‹ts
 + 8);

1908 
add_m≠pög_∑ú
(
m
, "öcomögÖackë†tŸÆ", 
öë_ö_∑ckës
);

1909 
add_m≠pög_∑ú
(
m
, "öcomög vﬁumêtŸÆ", 
öë_ö_vﬁume
);

1910 
add_m≠pög_∑ú
(
m
, "outgoögÖackë†tŸÆ", 
öë_out_∑ckës
);

1911 
add_m≠pög_∑ú
(
m
, "outgoög vﬁumêtŸÆ", 
öë_out_vﬁume
);

1913 #ifde‡
PACKAGE_SOCKETS


1914 
add_m≠pög_∑ú
(
m
, "öcomögÖackë†sockës", 
öë_sockë_ö_∑ckës
);

1915 
add_m≠pög_∑ú
(
m
, "öcomög vﬁumêsockës", 
öë_sockë_ö_vﬁume
);

1916 
add_m≠pög_∑ú
(
m
, "outgoögÖackë†sockës", 
öë_sockë_out_∑ckës
);

1917 
add_m≠pög_∑ú
(
m
, "outgoög vﬁumêsockës", 
öë_sockë_out_vﬁume
);

1920 i‡(
	gp‹ts
) {

1921 
	gi
 = 0; i < 5; i++) {

1922 i‡(
	gexã∫Æ_p‹t
[
i
].
	gp‹t
) {

1923 
	gbuf
[30];

1925 
•rötf
(
buf
, "öcomögÖackë†p‹à%d", 
exã∫Æ_p‹t
[
i
].
p‹t
);

1926 
add_m≠pög_∑ú
(
m
, 
buf
, 
exã∫Æ_p‹t
[
i
].
ö_∑ckës
);

1927 
•rötf
(
buf
, "öcomög vﬁumêp‹à%d", 
exã∫Æ_p‹t
[
i
].
p‹t
);

1928 
add_m≠pög_∑ú
(
m
, 
buf
, 
exã∫Æ_p‹t
[
i
].
ö_vﬁume
);

1929 
•rötf
(
buf
, "outgoögÖackë†p‹à%d", 
exã∫Æ_p‹t
[
i
].
p‹t
);

1930 
add_m≠pög_∑ú
(
m
, 
buf
, 
exã∫Æ_p‹t
[
i
].
out_∑ckës
);

1931 
•rötf
(
buf
, "outgoög vﬁumêp‹à%d", 
exã∫Æ_p‹t
[
i
].
p‹t
);

1932 
add_m≠pög_∑ú
(
m
, 
buf
, 
exã∫Æ_p‹t
[
i
].
out_vﬁume
);

1937 
push_ª„d_m≠pög
(
m
);

	@packages/contrib_spec.c

1 
	~"•ec.h
"

3 #i‚de‡
NO_SHADOWS


4 
ªmove_shadow
(
obje˘
);

6 #i‚de‡
NO_ADD_ACTION


7 
mixed
 
quîy_nŸify_Áû
();

8 
obje˘
 *
«med_livögs
();

11 
£t_¥om±
(
°rög
, |
obje˘
);

13 
mixed
 
c›y
(mixed);

14 
°rög
 *
fun˘i⁄s
(
obje˘
, : 0);

15 
°rög
 *
v¨übÀs
(
obje˘
, : 0);

16 
obje˘
 *
hóπ_bóts
();

17 #ifde‡
COMPAT_32


18 
obje˘
 *
hóπ_bót_öfo
 
hóπ_bóts
();

20 
°rög
 
ãrmöÆ_cﬁour
(°rög, 
m≠pög
, | , | );

21 
°rög
 
∂uølize
(string);

22 
fûe_Àngth
(
°rög
);

23 
°rög
 
uµî_ˇ£
(string);

24 
ª∂a˚abÀ
(
obje˘
, | 
°rög
 *);

25 
m≠pög
 
¥ogøm_öfo
(| 
obje˘
);

26 
°‹e_v¨übÀ
(
°rög
, 
mixed
);

27 
mixed
 
„tch_v¨übÀ
(
°rög
);

28 
ªmove_öãø˘ive
(
obje˘
);

29 
quîy_ù_p‹t
(| 
obje˘
);

31 
°rög
 
z⁄ëime
(string, );

32 
is_daylight_ßvögs_time
(
°rög
, );

34 
debug_mesßge
(
°rög
);

35 
obje˘
 
fun˘i⁄_ow√r
(
fun˘i⁄
);

36 
°rög
 
ª≥©_°rög
(string, );

37 
m≠pög
 
mem‹y_summ¨y
();

38 
°rög
 
quîy_ª∂a˚d_¥ogøm
(|
obje˘
);

39 
m≠pög
 
√tw‹k_°©s
();

	@packages/db.c

58 
	~"../°d.h
"

59 
	~"../md.h
"

60 
	~"../ma°î.h
"

61 
	~"../Õc_ö˛.h
"

62 
	~"../m≠pög.h
"

63 
	~"../comm.h
"

64 
	~"../fûe_ö˛.h
"

65 
	~"../fûe.h
"

66 
	~"../obje˘.h
"

67 
	~"../e›î©‹s.h
"

68 
	~"../backíd.h
"

69 
	~"../sw≠.h
"

71 
	~"db.h
"

73 
	gdbC⁄nAŒoc
, 
	gdbC⁄nU£d
;

74 
db_t
 *
	gdbC⁄nLi°
;

76 
db_t
 * 
föd_db_c⁄n
 
PROT
(());

77 
¸óã_db_c⁄n
 
PROT
(());

78 
‰ì_db_c⁄n
 
PROT
((
db_t
 *));

80 #ifde‡
USE_MSQL


81 
msql_c⁄√˘
 
PROT
((
dbc⁄n_t
 *, *, *, *, *));

82 
msql_˛o£
 
PROT
((
dbc⁄n_t
 *));

83 
msql_execuã
 
PROT
((
dbc⁄n_t
 *, *));

84 
¨øy_t
 *
msql_„tch
 
PROT
((
dbc⁄n_t
 *, ));

85 
msql_˛ónup
 
PROT
((
dbc⁄n_t
 *));

86 * 
msql_îr‹msg
 
PROT
((
dbc⁄n_t
 *));

88 
db_de‚_t
 
	gmsql
 = {

89 "mSQL", 
msql_c⁄√˘
, 
msql_˛o£
, 
msql_execuã
, 
msql_„tch
, 
NULL
, NULL, 
msql_˛ónup
, NULL, 
msql_îr‹msg


93 #ifde‡
USE_MYSQL


94 
MySQL_c⁄√˘
 
PROT
((
dbc⁄n_t
 *, *, *, *, *));

95 
MySQL_˛o£
 
PROT
((
dbc⁄n_t
 *));

96 
MySQL_execuã
 
PROT
((
dbc⁄n_t
 *, *));

97 
¨øy_t
 *
MySQL_„tch
 
PROT
((
dbc⁄n_t
 *, ));

98 
MySQL_˛ónup
 
PROT
((
dbc⁄n_t
 *));

99 * 
MySQL_îr‹msg
 
PROT
((
dbc⁄n_t
 *));

101 
db_de‚_t
 
	gmysql
 = {

102 "MySQL", 
MySQL_c⁄√˘
, 
MySQL_˛o£
, 
MySQL_execuã
, 
MySQL_„tch
, 
NULL
, NULL, 
MySQL_˛ónup
, NULL, 
MySQL_îr‹msg


106 
db_de‚_t
 
	gno_db
 = {

107 "N⁄e", 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL

116 
svÆue_t
 *
vÆid_d©aba£
 
	$P2
(*, 
a˘i⁄
, 
¨øy_t
 *, 
öfo
)

118 
svÆue_t
 *
ªt
;

126 
	`push_obje˘
(
cuºít_obje˘
);

127 
	`push_c⁄°™t_°rög
(
a˘i⁄
);

128 
	`push_ª„d_¨øy
(
öfo
);

130 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_DATABASE
, 3);

131 i‡(
ªt
 && (ªà=(
svÆue_t
 *)-1 || (ªt->
ty≥
 =
T_STRING
 || (ªt->ty≥ =
T_NUMBER
 &&Ñë->
u
.
numbî
))))

132  
ªt
;

134 
	`îr‹
("Database security violationáttempted\n");

135 
	}
}

143 #ifde‡
F_DB_CLOSE


144 
f_db_˛o£
 
PROT
(())

146 
	gªt
 = 0;

147 
db_t
 *
	gdb
;

149 
vÆid_d©aba£
("˛o£", &
the_nuŒ_¨øy
);

151 
	gdb
 = 
föd_db_c⁄n
(
•
->
u
.
numbî
);

152 i‡(!
	gdb
) {

153 
îr‹
("AttemptÅo closeán invalid database handle\n");

157 i‡(
	gdb
->
	gty≥
->
	g˛ónup
) {

158 
	gdb
->
	gty≥
->
˛ónup
(&(
db
->
c
));

161 i‡(
	gdb
->
	gty≥
->
	g˛o£
) {

162 
	gªt
 = 
db
->
ty≥
->
˛o£
(&(db->
c
));

166 
‰ì_db_c⁄n
(
db
);

168 
	g•
->
	gu
.
	gnumbî
 = 
ªt
;

182 #ifde‡
F_DB_COMMIT


183 
f_db_commô
 
PROT
(())

185 
	gªt
 = 0;

186 
db_t
 *
	gdb
;

188 
vÆid_d©aba£
("commô", &
the_nuŒ_¨øy
);

190 
	gdb
 = 
föd_db_c⁄n
(
•
->
u
.
numbî
);

191 i‡(!
	gdb
) {

192 
îr‹
("AttemptÅo commitán invalid database handle\n");

195 i‡(
	gdb
->
	gty≥
->
	gcommô
) {

196 
	gªt
 = 
db
->
ty≥
->
commô
(&(db->
c
));

199 
	g•
->
	gu
.
	gnumbî
 = 
ªt
;

214 #ifde‡
F_DB_CONNECT


215 
f_db_c⁄√˘
 
PROT
(())

217 *
	gd©aba£
, *
	gho°
, *
	gu£r
 = "", *
	gîr‹msg
 = 0;

218 
db_t
 *
	gdb
;

219 
¨øy_t
 *
	göfo
;

220 
svÆue_t
 *
	gmªt
;

221 
	gh™dÀ
, 
	gªt
 = 0, 
	g¨gs
 = 0, 
	gty≥
;

223 #ifde‡
DEFAULT_DB


224 
	gty≥
 = 
DEFAULT_DB
;

226 
	gty≥
 = 0;

229 
	g°_num_¨g
) {

230 4: 
ty≥
 = (
•
 - (
¨gs
++))->
u
.
numbî
;

231 3: 
u£r
 = (
•
 - (
¨gs
++))->
u
.
°rög
;

232 2: 
d©aba£
 = (
•
 - (
¨gs
++))->
u
.
°rög
;

233 1: 
ho°
 = (
•
 - (
¨gs
++))->
u
.
°rög
;

236 
	göfo
 = 
Æloˇã_em±y_¨øy
(3);

237 
	göfo
->
	gôem
[0].
	gty≥
 = 
öfo
->
ôem
[1].
ty≥
 = info->ôem[2].ty≥ = 
T_STRING
;

238 
	göfo
->
	gôem
[0].
	gsubty≥
 = 
öfo
->
ôem
[1].
subty≥
 = info->ôem[2].subty≥ = 
STRING_MALLOC
;

239 
	göfo
->
	gôem
[0].
	gu
.
	g°rög
 = 
°rög_c›y
(
d©aba£
, "f_db_connect:1");

240 i‡(*
	gho°
)

241 
	göfo
->
	gôem
[1].
	gu
.
	g°rög
 = 
°rög_c›y
(
ho°
, "f_db_connect:2");

243 
	göfo
->
	gôem
[1] = 
c⁄°0
;

244 
	göfo
->
	gôem
[2].
	gu
.
	g°rög
 = 
°rög_c›y
(
u£r
, "f_db_connect:3");

246 
	gmªt
 = 
vÆid_d©aba£
("c⁄√˘", 
öfo
);

248 
	gh™dÀ
 = 
¸óã_db_c⁄n
();

249 i‡(!
	gh™dÀ
) {

250 
p›_n_ñems
(
¨gs
);

251 
push_numbî
(0);

254 
	gdb
 = 
föd_db_c⁄n
(
h™dÀ
);

256 
	gty≥
) {

259 #ifde‡
USE_MSQL


260 #i‡
USE_MSQL
 - 0

261 
USE_MSQL
:

263 
db
->
ty≥
 = &
msql
;

266 #ifde‡
USE_MYSQL


267 #i‡
USE_MYSQL
 - 0

268 
	gUSE_MYSQL
:

270 
db
->
ty≥
 = &
mysql
;

275 i‡(
	gdb
->
	gty≥
->
	gc⁄√˘
) {

276 
	gªt
 = 
db
->
ty≥
->
c⁄√˘
(&(db->
c
), 
ho°
, 
d©aba£
, 
u£r
,

277 (
mªt
 !(
svÆue_t
 *)-1 && mªt->
ty≥
 =
T_STRING
 ? mªt->
u
.
°rög
 : 0));

280 
p›_n_ñems
(
¨gs
);

282 i‡(!
	gªt
) {

283 i‡(
	gdb
->
	gty≥
->
	gîr‹
) {

284 
	gîr‹msg
 = 
db
->
ty≥
->
îr‹
(&(db->
c
));

285 
push_mÆlo˚d_°rög
(
îr‹msg
);

287 
push_numbî
(0);

289 
‰ì_db_c⁄n
(
db
);

291 
push_numbî
(
h™dÀ
);

306 #ifde‡
F_DB_EXEC


307 
f_db_exec
 
PROT
(())

309 
	gªt
 = 0;

310 *
	gîr‹msg
;

311 
db_t
 *
	gdb
;

312 
¨øy_t
 *
	göfo
;

314 
	göfo
 = 
Æloˇã_em±y_¨øy
(1);

315 
	göfo
->
	gôem
[0].
	gty≥
 = 
T_STRING
;

316 
	göfo
->
	gôem
[0].
	gsubty≥
 = 
STRING_MALLOC
;

317 
	göfo
->
	gôem
[0].
	gu
.
	g°rög
 = 
°rög_c›y
(
•
->
u
.
°rög
, "f_db_exec");

318 
vÆid_d©aba£
("exec", 
öfo
);

320 
	gdb
 = 
föd_db_c⁄n
((
•
-1)->
u
.
numbî
);

321 i‡(!
	gdb
) {

322 
îr‹
("AttemptÅoÉxec onán invalid database handle\n");

325 i‡(
	gdb
->
	gty≥
->
	g˛ónup
) {

326 
	gdb
->
	gty≥
->
˛ónup
(&(
db
->
c
));

329 i‡(
	gdb
->
	gty≥
->
	gexecuã
) {

330 
	gªt
 = 
db
->
ty≥
->
execuã
(&(db->
c
), 
•
->
u
.
°rög
);

333 
p›_°ack
();

334 i‡(
	gªt
 == -1) {

335 i‡(
db
->
ty≥
->
îr‹
) {

336 *
îr‹msg
;

338 
	gîr‹msg
 = 
db
->
ty≥
->
îr‹
(&(db->
c
));

339 
put_mÆlo˚d_°rög
(
îr‹msg
);

341 
put_c⁄°™t_°rög
("UnknownÉrror");

344 
	g•
->
	gu
.
	gnumbî
 = 
ªt
;

373 #ifde‡
F_DB_FETCH


374 
f_db_„tch
 
PROT
(())

376 
db_t
 *
	gdb
;

377 
¨øy_t
 *
	gªt
;

379 
vÆid_d©aba£
("„tch", &
the_nuŒ_¨øy
);

381 
	gdb
 = 
föd_db_c⁄n
((
•
-1)->
u
.
numbî
);

382 i‡(!
	gdb
) {

383 
îr‹
("AttemptÅo fetch fromán invalid database handle\n");

386 i‡(
	gdb
->
	gty≥
->
	g„tch
) {

387 
	gªt
 = 
db
->
ty≥
->
„tch
(&(db->
c
), 
•
->
u
.
numbî
);

389 
	gªt
 = &
the_nuŒ_¨øy
;

392 
p›_°ack
();

393 i‡(!
	gªt
) {

394 i‡(
	gdb
->
	gty≥
->
	gîr‹
) {

395 *
	gîr‹msg
;

397 
	gîr‹msg
 = 
db
->
ty≥
->
îr‹
(&(db->
c
));

398 
put_mÆlo˚d_°rög
(
îr‹msg
);

400 
	g•
->
	gu
.
	gnumbî
 = 0;

403 
put_¨øy
(
ªt
);

416 #ifde‡
F_DB_ROLLBACK


417 
f_db_rﬁlback
 
PROT
(())

419 
	gªt
 = 0;

420 
db_t
 *
	gdb
;

422 
vÆid_d©aba£
("rﬁlback", &
the_nuŒ_¨øy
);

424 
	gdb
 = 
föd_db_c⁄n
(
•
->
u
.
numbî
);

425 i‡(!
	gdb
) {

426 
îr‹
("AttemptÅoÑollbackán invalid database handle\n");

429 i‡(
	gdb
->
	gty≥
->
	grﬁlback
) {

430 
	gªt
 = 
db
->
ty≥
->
rﬁlback
(&(db->
c
));

433 i‡(
	gªt
 > 0) {

434 i‡(
	gdb
->
	gty≥
->
	g˛ónup
) {

435 
	gdb
->
	gty≥
->
˛ónup
(&(
db
->
c
));

439 
	g•
->
	gu
.
	gnumbî
 = 
ªt
;

447 #ifde‡
F_DB_STATUS


448 
f_db_°©us
 
PROT
(())

450 
	gi
;

451 
outbuf„r_t
 
	gout
;

453 
outbuf_zîo
(&
out
);

455 
	gi
 = 0; i < 
	gdbC⁄nAŒoc
; i++) {

456 i‡(
	gdbC⁄nLi°
[
i
].
	gÊags
 & 
	gDB_FLAG_EMPTY
) {

460 
outbuf_addv
(&
out
, "H™dÀ: %d (%s)\n", 
i
 + 1, 
dbC⁄nLi°
[i].
ty≥
->
«me
);

461 i‡(
	gdbC⁄nLi°
[
i
].
	gty≥
->
	g°©us
 !
NULL
) {

462 
dbC⁄nLi°
[
i
].
ty≥
->
°©us
(&(dbC⁄nLi°[i].
c
), &
out
);

466 
outbuf_push
(&
out
);

470 
db_˛ónup
 
PROT
(())

472 
	gi
;

474 
	gi
 = 0; i < 
	gdbC⁄nAŒoc
; i++) {

475 i‡(!(
	gdbC⁄nLi°
[
i
].
	gÊags
 & 
	gDB_FLAG_EMPTY
)) {

476 i‡(
	gdbC⁄nLi°
[
i
].
	gty≥
->
	g˛ónup
) {

477 
	gdbC⁄nLi°
[
i
].
	gty≥
->
˛ónup
(&(
dbC⁄nLi°
[i].
c
));

480 i‡(
	gdbC⁄nLi°
[
i
].
	gty≥
->
	g˛o£
) {

481 
	gdbC⁄nLi°
[
i
].
	gty≥
->
˛o£
(&(
dbC⁄nLi°
[i].
c
));

484 
	gdbC⁄nLi°
[
i
].
	gÊags
 = 
DB_FLAG_EMPTY
;

485 
	gdbC⁄nU£d
--;

490 
¸óã_db_c⁄n
 
PROT
(())

492 
	gi
;

495 i‡(
	gdbC⁄nAŒoc
 =
dbC⁄nU£d
) {

496 
i
 = 
dbC⁄nAŒoc
;

497 
	gdbC⁄nAŒoc
 += 10;

498 i‡(!
	gdbC⁄nLi°
) {

499 
	gdbC⁄nLi°
 = 
CALLOCATE
(
dbC⁄nAŒoc
, 
db_t
, 
TAG_DB
, "create_db_conn");

501 
	gdbC⁄nLi°
 = 
RESIZE
(
dbC⁄nLi°
, 
dbC⁄nAŒoc
, 
db_t
, 
TAG_DB
, "create_db_conn");

503 
	gi
 < 
	gdbC⁄nAŒoc
) {

504 
	gdbC⁄nLi°
[
i
++].
	gÊags
 = 
DB_FLAG_EMPTY
;

508 
	gi
 = 0; i < 
	gdbC⁄nAŒoc
; i++) {

509 i‡(
	gdbC⁄nLi°
[
i
].
	gÊags
 & 
	gDB_FLAG_EMPTY
) {

510 
	gdbC⁄nLi°
[
i
].
	gÊags
 = 0;

511 
	gdbC⁄nLi°
[
i
].
	gty≥
 = &
no_db
;

512 
	gdbC⁄nU£d
++;

513  
	gi
 + 1;

517 
Áèl
("dbConnAlloc != dbConnUsed, butÇoÉmpty slots");

520 
db_t
 *
föd_db_c⁄n
 
	$P1
(, 
h™dÀ
)

522 i‡(
h™dÀ
 < 1 || h™dÀ > 
dbC⁄nAŒoc
 || 
dbC⁄nLi°
[h™dÀ - 1].
Êags
 & 
DB_FLAG_EMPTY
)

524  &(
dbC⁄nLi°
[
h™dÀ
 - 1]);

525 
	}
}

527 
‰ì_db_c⁄n
 
	$P1
(
db_t
 *, 
db
)

529 
	`DEBUG_CHECK
(
db
->
Êags
 & 
DB_FLAG_EMPTY
, "Freeing DB connectionÅhat isálready freed\n");

530 
	`DEBUG_CHECK
(!
dbC⁄nU£d
, "Freeing DB connection when dbConnUsed == 0\n");

531 
dbC⁄nU£d
--;

532 
db
->
Êags
 |
DB_FLAG_EMPTY
;

533 
	}
}

538 #ifde‡
USE_MYSQL


539 
MySQL_˛ónup
 
	$P1
(
dbc⁄n_t
 *, 
c
)

541 *(
c
->
mysql
.
îr‹msg
) = 0;

542 i‡(
c
->
mysql
.
ªsu…s
) {

543 
	`mysql_‰ì_ªsu…
(
c
->
mysql
.
ªsu…s
);

544 
c
->
mysql
.
ªsu…s
 = 0;

546 
	}
}

548 *
MySQL_îr‹msg
 
	$P1
(
dbc⁄n_t
 *, 
c
)

550 i‡(*(
c
->
mysql
.
îr‹msg
)) {

551  
	`°rög_c›y
(
c
->
mysql
.
îr‹msg
, "MySQL_errormsg:1");

554  
	`°rög_c›y
(
	`mysql_îr‹
(
c
->
mysql
.
h™dÀ
), "MySQL_errormsg:2");

555 
	}
}

557 
MySQL_˛o£
 
	$P1
(
dbc⁄n_t
 *, 
c
)

559 
	`mysql_˛o£
(
c
->
mysql
.
h™dÀ
);

560 
	`FREE
(
c
->
mysql
.
h™dÀ
);

561 
c
->
mysql
.
h™dÀ
 = 0;

564 
	}
}

566 
MySQL_execuã
 
	$P2
(
dbc⁄n_t
 *, 
c
, *, 
s
)

568 i‡(!
	`mysql_quîy
(
c
->
mysql
.
h™dÀ
, 
s
)) {

569 
c
->
mysql
.
ªsu…s
 = 
	`mysql_°‹e_ªsu…
(c->mysql.
h™dÀ
);

570 i‡(
c
->
mysql
.
ªsu…s
) {

571  
	`mysql_num_rows
(
c
->
mysql
.
ªsu…s
);

575 i‡(!
	`mysql_î∫o
(
c
->
mysql
.
h™dÀ
)) {

581 
	}
}

583 
¨øy_t
 *
MySQL_„tch
 
	$P2
(
dbc⁄n_t
 *, 
c
, , 
row
)

585 
¨øy_t
 *
v
;

586 
MYSQL_ROW
 
èrgë_row
;

587 
i
, 
num_fõlds
;

589 i‡(!
c
->
mysql
.
ªsu…s
) {

590  &
the_nuŒ_¨øy
;

592 i‡(
row
 < 1 ||Ñow > 
	`mysql_num_rows
(
c
->
mysql
.
ªsu…s
)) {

593  &
the_nuŒ_¨øy
;

596 
num_fõlds
 = 
	`mysql_num_fõlds
(
c
->
mysql
.
ªsu…s
);

597 i‡(
num_fõlds
 < 1) {

598  &
the_nuŒ_¨øy
;

601 
	`mysql_d©a_£ek
(
c
->
mysql
.
ªsu…s
, 
row
 - 1);

602 
èrgë_row
 = 
	`mysql_„tch_row
(
c
->
mysql
.
ªsu…s
);

603 i‡(!
èrgë_row
) {

604  &
the_nuŒ_¨øy
;

607 
v
 = 
	`Æloˇã_em±y_¨øy
(
num_fõlds
);

608 
i
 = 0; i < 
num_fõlds
; i++) {

609 
MYSQL_FIELD
 *
fõld
;

611 
fõld
 = 
	`mysql_„tch_fõld
(
c
->
mysql
.
ªsu…s
);

612 i‡(!
fõld
) {

613 
v
->
ôem
[
i
] = 
c⁄°0u
;

615 
fõld
->
ty≥
) {

616 
FIELD_TYPE_TINY
:

617 
FIELD_TYPE_SHORT
:

618 
FIELD_TYPE_DECIMAL
:

619 
FIELD_TYPE_LONG
:

620 
v
->
ôem
[
i
].
ty≥
 = 
T_NUMBER
;

621 
v
->
ôem
[
i
].
u
.
numbî
 = 
	`©oi
(
èrgë_row
[i]);

624 
FIELD_TYPE_FLOAT
:

625 
FIELD_TYPE_DOUBLE
:

626 
v
->
ôem
[
i
].
ty≥
 = 
T_REAL
;

627 
v
->
ôem
[
i
].
u
.
ªÆ
 = 
	`©of
(
èrgë_row
[i]);

630 
FIELD_TYPE_TINY_BLOB
:

631 
FIELD_TYPE_MEDIUM_BLOB
:

632 
FIELD_TYPE_LONG_BLOB
:

633 
FIELD_TYPE_BLOB
:

634 
FIELD_TYPE_STRING
:

635 
FIELD_TYPE_VAR_STRING
:

636 i‡(
fõld
->
Êags
 & 
BINARY_FLAG
) {

637 #i‚de‡
NO_BUFFER_TYPE


638 
v
->
ôem
[
i
].
ty≥
 = 
T_BUFFER
;

639 
v
->
ôem
[
i
].
u
.
buf
 = 
	`Æloˇã_buf„r
(
fõld
->
Àngth
);

640 
	`wrôe_buf„r
(
v
->
ôem
[
i
].
u
.
buf
, 0, 
èrgë_row
[i], 
fõld
->
Àngth
);

642 
v
->
ôem
[
i
] = 
c⁄°0u
;

645 
v
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

646 i‡(
èrgë_row
[
i
]) {

647 
v
->
ôem
[
i
].
subty≥
 = 
STRING_MALLOC
;

648 
v
->
ôem
[
i
].
u
.
°rög
 = 
	`°rög_c›y
(
èrgë_row
[i], "MySQL_fetch");

650 
v
->
ôem
[
i
].
subty≥
 = 
STRING_CONSTANT
;

651 
v
->
ôem
[
i
].
u
.
°rög
 = "";

657 
v
->
ôem
[
i
] = 
c⁄°0u
;

663 
	`mysql_fõld_£ek
(
c
->
mysql
.
ªsu…s
, 0);

664  
v
;

665 
	}
}

667 
MySQL_c⁄√˘
 
	$P5
(
dbc⁄n_t
 *, 
c
, *, 
ho°
, *, 
d©aba£
, *, 
u£∫ame
, *, 
∑ssw‹d
)

669 
ªt
;

670 
MYSQL
 *
tmp
;

672 
tmp
 = 
	`ALLOCATE
(
MYSQL
, 
TAG_DB
, "MySQL_connect");

673 *(
c
->
mysql
.
îr‹msg
) = 0;

675 
c
->
mysql
.
h™dÀ
 = 
	`mysql_c⁄√˘
(
tmp
, 
ho°
, 
u£∫ame
, 
∑ssw‹d
);

676 i‡(!
c
->
mysql
.
h™dÀ
) {

677 
	`°∫˝y
(
c
->
mysql
.
îr‹msg
, 
	`mysql_îr‹
(
tmp
), (c->mysql.errormsg));

678 
c
->
mysql
.
îr‹msg
[(c->mysql.errormsg) - 1] = 0;

679 
	`FREE
(
tmp
);

683 
ªt
 = 
	`mysql_£À˘_db
(
c
->
mysql
.
h™dÀ
, 
d©aba£
);

684 i‡(
ªt
) {

685 
	`°∫˝y
(
c
->
mysql
.
îr‹msg
, 
	`mysql_îr‹
(c->mysql.
h™dÀ
), (c->mysql.errormsg));

686 
c
->
mysql
.
îr‹msg
[(c->mysql.errormsg) - 1] = 0;

687 
	`mysql_˛o£
(
c
->
mysql
.
h™dÀ
);

688 
c
->
mysql
.
h™dÀ
 = 0;

689 
	`FREE
(
tmp
);

693 
c
->
mysql
.
ªsu…s
 = 0;

695 
	}
}

701 #ifde‡
USE_MSQL


702 
msql_˛ónup
 
	$P1
(
dbc⁄n_t
 *, 
c
)

704 i‡(
c
->
msql
.
ªsu…_£t
) {

705 
	`msqlFªeResu…
(
c
->
msql
.
ªsu…_£t
);

706 
c
->
msql
.
ªsu…_£t
 = 0;

708 
	}
}

710 
msql_˛o£
 
	$P1
(
dbc⁄n_t
 *, 
c
)

712 
	`msqlClo£
(
c
->
msql
.
h™dÀ
);

713 
c
->
msql
.
h™dÀ
 = -1;

716 
	}
}

718 
msql_execuã
 
	$P2
(
dbc⁄n_t
 *, 
c
, *, 
s
)

720 i‡(
	`msqlQuîy
(
c
->
msql
.
h™dÀ
, 
s
) != -1) {

721 
c
->
msql
.
ªsu…_£t
 = 
	`msqlSt‹eResu…
();

722 i‡(!
c
->
msql
.
ªsu…_£t
) {

726  
	`msqlNumRows
(
c
->
msql
.
ªsu…_£t
);

730 
	}
}

732 
¨øy_t
 *
msql_„tch
 
	$P2
(
dbc⁄n_t
 *, 
c
, , 
row
)

734 
i
, 
num_fõlds
;

735 
m_row
 
this_row
;

736 
¨øy_t
 *
v
;

738 i‡(!
c
->
msql
.
ªsu…_£t
) {

739  &
the_nuŒ_¨øy
;

741 i‡(
row
 < 1 ||Ñow > 
	`msqlNumRows
(
c
->
msql
.
ªsu…_£t
)) {

742  &
the_nuŒ_¨øy
;

745 
num_fõlds
 = 
	`msqlNumFõlds
(
c
->
msql
.
ªsu…_£t
);

746 i‡(
num_fõlds
 < 1) {

747  &
the_nuŒ_¨øy
;

750 
	`msqlD©aSìk
(
c
->
msql
.
ªsu…_£t
, 
row
 - 1);

751 
this_row
 = 
	`msqlFëchRow
(
c
->
msql
.
ªsu…_£t
);

752 i‡(!
this_row
) {

753  &
the_nuŒ_¨øy
;

756 
v
 = 
	`Æloˇã_em±y_¨øy
(
num_fõlds
);

757 
i
 = 0; i < 
num_fõlds
; i++) {

758 
m_fõld
 *
fõld
;

760 
fõld
 = 
	`msqlFëchFõld
(
c
->
msql
.
ªsu…_£t
);

761 i‡(!
fõld
 || !
this_row
[
i
]) {

762 
v
->
ôem
[
i
] = 
c⁄°0u
;

764 
fõld
->
ty≥
) {

765 
INT_TYPE
:

766 
UINT_TYPE
:

767 
v
->
ôem
[
i
].
ty≥
 = 
T_NUMBER
;

768 
v
->
ôem
[
i
].
u
.
numbî
 = 
	`©oi
(
this_row
[i]);

771 
REAL_TYPE
:

772 
MONEY_TYPE
:

773 
v
->
ôem
[
i
].
ty≥
 = 
T_REAL
;

774 
v
->
ôem
[
i
].
u
.
ªÆ
 = 
	`©of
(
this_row
[i]);

777 
CHAR_TYPE
:

778 
TEXT_TYPE
:

779 
DATE_TYPE
:

780 
TIME_TYPE
:

781 
v
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

782 
v
->
ôem
[
i
].
subty≥
 = 
STRING_MALLOC
;

783 
v
->
ôem
[
i
].
u
.
°rög
 = 
	`°rög_c›y
(
this_row
[i], "msql_fetch");

787 
v
->
ôem
[
i
] = 
c⁄°0u
;

793 
	`msqlFõldSìk
(
c
->
msql
.
ªsu…_£t
, 0);

794  
v
;

795 
	}
}

797 
msql_c⁄√˘
 
	$P5
(
dbc⁄n_t
 *, 
c
, *, 
ho°
, *, 
d©aba£
, *, 
u£∫ame
, *, 
∑ssw‹d
)

799 
c
->
msql
.
h™dÀ
 = 
	`msqlC⁄√˘
(
ho°
);

800 i‡(
c
->
msql
.
h™dÀ
 < 1) {

804 i‡(
	`msqlSñe˘DB
(
c
->
msql
.
h™dÀ
, 
d©aba£
) == -1) {

805 
	`msqlClo£
(
c
->
msql
.
h™dÀ
);

809 
c
->
msql
.
ªsu…_£t
 = 0;

811 
	}
}

813 *
msql_îr‹msg
 
	$P1
(
dbc⁄n_t
 *, 
c
)

815  
	`°rög_c›y
(
msqlEºMsg
, "msql_errormsg");

816 
	}
}

	@packages/db.h

1 #i‚de‡
PACKAGES_DB_H


2 
	#PACKAGES_DB_H


	)

4 #ifde‡
PACKAGE_DB


6 #ifde‡
USE_MSQL


8 
	#_OS_UNIX


	)

10 #ifde‡
INCL_LOCAL_MSQL_H


11 
	~"/u§/loˇl/ö˛ude/msql.h
"

13 #ifde‡
INCL_LOCAL_MSQL_MSQL_H


14 
	~"/u§/loˇl/msql/ö˛ude/msql.h
"

16 #ifde‡
INCL_LOCAL_MINERVA_MSQL_H


17 
	~"/u§/loˇl/Möîva/ö˛ude/msql.h
"

19 #ifde‡
INCL_LIB_HUGHES_MSQL_H


20 
	~"/u§/lib/Hughes/ö˛ude/msql.h
"

24 #ifde‡
USE_MYSQL


25 #ifde‡
INCL_LOCAL_MYSQL_H


26 
	~"/u§/loˇl/ö˛ude/mysql.h
"

28 #ifde‡
INCL_LOCAL_INCLUDE_MYSQL_MYSQL_H


29 
	~"/u§/loˇl/ö˛ude/mysql/mysql.h
"

31 #ifde‡
INCL_LOCAL_MYSQL_MYSQL_H


32 
	~"/u§/loˇl/mysql/ö˛ude/mysql.h
"

34 #ifde‡
INCL_MYSQL_MYSQL_H


35 
	~"/u§/ö˛ude/mysql/mysql.h
"

39 
	udbc⁄n_u
 {

40 #ifde‡
USE_MSQL


41 
	stmp_msql
 {

42 
	mh™dÀ
;

43 
m_ªsu…
 * 
	mªsu…_£t
;

44 } 
	mmsql
;

46 #ifde‡
USE_MYSQL


47 
	stmp_mysql
 {

48 
	mîr‹msg
[256];

49 
MYSQL
 *
	mh™dÀ
;

50 
MYSQL_RES
 *
	mªsu…s
;

51 } 
	mmysql
;

53 } 
	tdbc⁄n_t
;

58 
	sdb_de‚_s
 {

59 *
	m«me
;

60 (*
	mc⁄√˘
)(
	mdbc⁄n_t
 *, *, *, *, *);

61 (*
	m˛o£
)(
	mdbc⁄n_t
 *);

62 (*
	mexecuã
)(
	mdbc⁄n_t
 *, *);

63 
	m¨øy_t
 * (*
	m„tch
)(
	mdbc⁄n_t
 *, );

64 (*
	mcommô
)(
	mdbc⁄n_t
 *);

65 (*
	mrﬁlback
)(
	mdbc⁄n_t
 *);

66 (*
	m˛ónup
)(
	mdbc⁄n_t
 *);

67 (*
	m°©us
)(
	mdbc⁄n_t
 *, 
	moutbuf„r_t
 *);

68 * (*
	mîr‹
)(
	mdbc⁄n_t
 *);

69 } 
	tdb_de‚_t
;

71 
	#DB_FLAG_EMPTY
 0x1

	)

73 
	s_db
 {

74 
	mÊags
;

75 
db_de‚_t
 *
	mty≥
;

76 
dbc⁄n_t
 
	mc
;

77 } 
	tdb_t
;

79 
db_˛ónup
 
PROT
(());

	@packages/db_spec.c

1 
	~"•ec.h
"

3 
db_˛o£
();

4 
db_commô
();

5 
db_c⁄√˘
(
°rög
, string, string|, |);

6 
mixed
 
db_exec
(, 
°rög
);

7 
mixed
 *
db_„tch
(, );

8 
db_rﬁlback
();

9 
°rög
 
db_°©us
();

	@packages/develop.c

1 #ifde‡
LATTICE


2 
	~"/Õc_ö˛.h
"

3 
	~"/comm.h
"

4 
	~"/md.h
"

5 
	~"/•rötf.h
"

7 
	~"../Õc_ö˛.h
"

8 
	~"../comm.h
"

9 
	~"../md.h
"

10 
	~"../•rötf.h
"

11 
	~"../efun_¥Ÿos.h
"

14 
obje˘_t
 *
	gob
;

16 #ifde‡
F_DEBUG_INFO


18 
f_debug_öfo
 
PROT
(())

20 
svÆue_t
 *
	g¨g
;

21 
outbuf„r_t
 
	gout
;

23 
outbuf_zîo
(&
out
);

24 
	g¨g
 = 
•
 - 1;

25 
	g¨g
[0].
	gu
.
	gnumbî
) {

28 
i
, 
	gÊags
;

29 
obje˘_t
 *
	gobj2
;

31 
	gob
 = 
¨g
[1].
u
.
ob
;

32 
	gÊags
 = 
ob
->
Êags
;

33 
outbuf_addv
(&
out
, "O_HEART_BEAT : %s\n",

34 
Êags
 & 
O_HEART_BEAT
 ? "TRUE" : "FALSE");

35 #i‚de‡
NO_WIZARDS


36 
outbuf_addv
(&
out
, "O_IS_WIZARD : %s\n",

37 
Êags
 & 
O_IS_WIZARD
 ? "TRUE" : "FALSE");

39 #ifde‡
NO_ADD_ACTION


40 
outbuf_addv
(&
out
, "O_LISTENER : %s\n",

41 
Êags
 & 
O_LISTENER
 ? "TRUE" : "FALSE");

43 
outbuf_addv
(&
out
, "O_ENABLE_COMMANDS : %s\n",

44 
Êags
 & 
O_ENABLE_COMMANDS
 ? "TRUE" : "FALSE");

46 
outbuf_addv
(&
out
, "O_CLONE : %s\n",

47 
Êags
 & 
O_CLONE
 ? "TRUE" : "FALSE");

48 
outbuf_addv
(&
out
, "O_VIRTUAL : %s\n",

49 
Êags
 & 
O_VIRTUAL
 ? "TRUE" : "FALSE");

50 
outbuf_addv
(&
out
, "O_DESTRUCTED : %s\n",

51 
Êags
 & 
O_DESTRUCTED
 ? "TRUE" : "FALSE");

52 
outbuf_addv
(&
out
, "O_SWAPPED : %s\n",

53 
Êags
 & 
O_SWAPPED
 ? "TRUE" : "FALSE");

54 
outbuf_addv
(&
out
, "O_ONCE_INTERACTIVE: %s\n",

55 
Êags
 & 
O_ONCE_INTERACTIVE
 ? "TRUE" : "FALSE");

56 
outbuf_addv
(&
out
, "O_RESET_STATE : %s\n",

57 
Êags
 & 
O_RESET_STATE
 ? "TRUE" : "FALSE");

58 
outbuf_addv
(&
out
, "O_WILL_CLEAN_UP : %s\n",

59 
Êags
 & 
O_WILL_CLEAN_UP
 ? "TRUE" : "FALSE");

60 
outbuf_addv
(&
out
, "O_WILL_RESET: %s\n",

61 
Êags
 & 
O_WILL_RESET
 ? "TRUE" : "FALSE");

62 #i‚de‡
NO_LIGHT


63 
outbuf_addv
(&
out
, "tŸÆÜighà: %d\n", 
ob
->
tŸÆ_light
);

65 #i‚de‡
NO_RESETS


66 
outbuf_addv
(&
out
, "√xt_ª£à : %d\n", 
ob
->
√xt_ª£t
);

68 
outbuf_addv
(&
out
, "time_of_ª‡: %d\n", 
ob
->
time_of_ªf
);

69 
outbuf_addv
(&
out
, "ª‡ : %d\n", 
ob
->
ªf
);

70 #ifde‡
DEBUG


71 
outbuf_addv
(&
out
, "exåa_ª‡ : %d\n", 
ob
->
exåa_ªf
);

73 
outbuf_addv
(&
out
, "sw≠_num : %d\n", 
ob
->
sw≠_num
);

74 
outbuf_addv
(&
out
, "«mê : '/%s'\n", 
ob
->
«me
);

75 
outbuf_addv
(&
out
, "next_all : OBJ(/%s)\n",

76 
ob
->
√xt_Æl
 ? ob->√xt_Æl->
«me
 : "NULL");

77 i‡(
	gobj_li°
 =
ob
)

78 
outbuf_add
(&
out
, "This object isÅhe head ofÅhe objectÜist.\n");

79 
	gobj2
 = 
obj_li°
, 
	gi
 = 1; obj2; obj2 = 
obj2
->
√xt_Æl
, i++)

80 i‡(
	gobj2
->
	g√xt_Æl
 =
ob
) {

81 
outbuf_addv
(&
out
, "Previous object in objectÜist: OBJ(/%s)\n",

82 
obj2
->
«me
);

83 
outbuf_addv
(&
out
, "posôi⁄ i¿obje˘Üi°:%d\n", 
i
);

88 
ob
 = 
¨g
[1].
u
.ob;

89 i‡(
	gob
->
	gÊags
 & 
	gO_SWAPPED
) {

90 
outbuf_add
(&
out
, "Swapped\n");

93 
outbuf_addv
(&
out
, "¥ogømÑef'†%d\n", 
ob
->
¥og
->
ªf
);

94 
outbuf_addv
(&
out
, "Namê/%s\n", 
ob
->
¥og
->
«me
);

95 
outbuf_addv
(&
out
, "program size %d\n",

96 
ob
->
¥og
->
¥ogøm_size
);

97 
outbuf_addv
(&
out
, "function flagsÅable %d (%d) \n",

98 
ob
->
¥og
->
œ°_öhîôed
 + ob->¥og->
num_fun˘i⁄s_deföed
,

99 (
ob
->
¥og
->
œ°_öhîôed
 + ob->¥og->
num_fun˘i⁄s_deföed
)* ());

100 
outbuf_addv
(&
out
, "compiler functionÅable %d (%d) \n",

101 
ob
->
¥og
->
num_fun˘i⁄s_deföed
,

102 
ob
->
¥og
->
num_fun˘i⁄s_deföed
 * (
fun˘i⁄_t
));

103 
outbuf_addv
(&
out
, "num såög†%d\n", 
ob
->
¥og
->
num_°rögs
);

104 
outbuf_addv
(&
out
, "num v¨†%d (%d)\n", 
ob
->
¥og
->
num_v¨übÀs_deföed
,

105 
ob
->
¥og
->
num_v¨übÀs_deföed
 * ((*) + ()));

106 
outbuf_addv
(&
out
, "num inhîô†%d (%d)\n", 
ob
->
¥og
->
num_öhîôed
,

107 
ob
->
¥og
->
num_öhîôed
 * (
öhîô_t
));

108 
outbuf_addv
(&
out
, "tŸÆ sizê%d\n", 
ob
->
¥og
->
tŸÆ_size
);

112 
i
;

113 
	gob
 = 
¨g
[1].
u
.
ob
;

114 
	gi
=0; i<
	gob
->
	g¥og
->
	gnum_v¨übÀs_tŸÆ
; i++) {

116 
outbuf_addv
(&
out
, "%s: ", 
v¨übÀ_«me
(
ob
->
¥og
, 
i
));

117 
svÆue_to_°rög
(&
ob
->
v¨übÀs
[
i
], &
out
, 2, 0, 0);

118 
outbuf_add
(&
out
, "\n");

123 
bad_¨g
(1, 
F_DEBUG_INFO
);

125 
p›_°ack
();

126 
p›_°ack
();

127 
outbuf_push
(&
out
);

131 #ifde‡
F_REFS


133 
f_ªfs
 
PROT
(())

135 
	gr
;

137 
	g•
->
	gty≥
) {

138 
	gT_MAPPING
:

139 
r
 = 
•
->
u
.
m≠
->
ªf
;

141 
	gT_CLASS
:

142 
T_ARRAY
:

143 
r
 = 
•
->
u
.
¨r
->
ªf
;

145 
	gT_OBJECT
:

146 
r
 = 
•
->
u
.
ob
->
ªf
;

148 
	gT_FUNCTION
:

149 
r
 = 
•
->
u
.
Â
->
hdr
.
ªf
;

151 #i‚de‡
NO_BUFFER_TYPE


152 
	gT_BUFFER
:

153 
r
 = 
•
->
u
.
buf
->
ªf
;

157 
r
 = 0;

160 
‰ì_svÆue
(
•
, "f_refs");

161 
put_numbî
(
r
 - 1);

166 #ifde‡
F_DESTRUCTED_OBJECTS


167 
f_de°ru˘ed_obje˘s
 
PROT
(())

169 
	gi
;

170 
¨øy_t
 *
	gªt
;

171 
obje˘_t
 *
	gob
;

173 
	gªt
 = 
Æloˇã_em±y_¨øy
(
tŸ_d™glög_obje˘
);

174 
	gob
 = 
obj_li°_d™glög
;

176 
	gi
 = 0; i < 
	gtŸ_d™glög_obje˘
; i++) {

177 
	gªt
->
	gôem
[
i
].
	gty≥
 = 
T_ARRAY
;

178 
	gªt
->
	gôem
[
i
].
	gu
.
	g¨r
 = 
Æloˇã_em±y_¨øy
(2);

179 
	gªt
->
	gôem
[
i
].
	gu
.
	g¨r
->ôem[0].
	gty≥
 = 
T_STRING
;

180 
	gªt
->
	gôem
[
i
].
	gu
.
	g¨r
->ôem[0].
	gsubty≥
 = 
STRING_SHARED
;

181 
	gªt
->
	gôem
[
i
].
	gu
.
	g¨r
->ôem[0].u.
	g°rög
 = 
make_sh¨ed_°rög
(
ob
->
«me
);

182 
	gªt
->
	gôem
[
i
].
	gu
.
	g¨r
->ôem[1].
	gty≥
 = 
T_NUMBER
;

183 
	gªt
->
	gôem
[
i
].
	gu
.
	g¨r
->ôem[1].u.
	gnumbî
 = 
ob
->
ªf
;

185 
	gob
 = 
ob
->
√xt_Æl
;

188 
push_ª„d_¨øy
(
ªt
);

192 #i‡(
deföed
(
DEBUGMALLOC
Ë&& deföed(
DEBUGMALLOC_EXTENSIONS
))

193 #ifde‡
F_DEBUGMALLOC


195 
f_debugmÆloc
 
PROT
(())

197 *
	gªs
;

199 
	gªs
 = 
dump_debugmÆloc
((
•
 - 1)->
u
.
°rög
, sp->u.
numbî
);

200 
‰ì_°rög_svÆue
(--
•
);

201 
	g•
->
	gsubty≥
 = 
STRING_MALLOC
;

202 
	g•
->
	gu
.
	g°rög
 = 
ªs
;

206 #ifde‡
F_SET_MALLOC_MASK


208 
f_£t_mÆloc_mask
 
PROT
(())

210 
£t_mÆloc_mask
((
•
--)->
u
.
numbî
);

214 #ifde‡
F_CHECK_MEMORY


216 
f_check_mem‹y
 
PROT
(())

218 
check_Æl_blocks
((
•
--)->
u
.
numbî
);

222 * 
deföed
(
DEBUGMALLOC_EXTENSIONS
)) */

224 #ifde‡
F_TRACE


226 
f_åa˚
 
PROT
(())

228 
	gŸ
 = -1;

230 i‡(
	gcomm™d_givî
 && comm™d_givî->
	göãø˘ive
) {

231 
	gŸ
 = 
comm™d_givî
->
öãø˘ive
->
åa˚_Àvñ
;

232 
	gcomm™d_givî
->
	göãø˘ive
->
	gåa˚_Àvñ
 = 
•
->
u
.
numbî
;

234 
	g•
->
	gu
.
	gnumbî
 = 
Ÿ
;

238 #ifde‡
F_TRACEPREFIX


240 
f_åa˚¥efix
 
PROT
(())

242 *
	gﬁd
 = 0;

244 i‡(
	gcomm™d_givî
 && comm™d_givî->
	göãø˘ive
) {

245 
	gﬁd
 = 
comm™d_givî
->
öãø˘ive
->
åa˚_¥efix
;

246 i‡(
	g•
->
	gty≥
 & 
	gT_STRING
) {

247 *
	gp
 = 
•
->
u
.
°rög
;

248 i‡(*
	gp
 ='/'Ë
p
++;

250 
	gcomm™d_givî
->
	göãø˘ive
->
	gåa˚_¥efix
 = 
make_sh¨ed_°rög
(
p
);

251 
‰ì_°rög_svÆue
(
•
);

253 
	gcomm™d_givî
->
	göãø˘ive
->
	gåa˚_¥efix
 = 0;

255 i‡(
	gﬁd
) {

256 
put_mÆlo˚d_°rög
(
add_¶ash
(
ﬁd
));

257 
‰ì_°rög
(
ﬁd
);

259 *
	g•
 = 
c⁄°0
;

	@packages/develop_spec.c

1 
	~"•ec.h
"

3 
mixed
 
debug_öfo
(, 
obje˘
);

4 
ªfs
(
mixed
);

5 #ifde‡
DEBUG


6 
mixed
 *
de°ru˘ed_obje˘s
();

12 
dump_¥og
(
obje˘
,...);

14 #i‡
deföed
(
PROFILING
Ë&& deföed(
HAS_MONCONTROL
)

15 
m⁄c⁄åﬁ
();

18 #i‡(
deföed
(
DEBUGMALLOC
Ë&& deföed(
DEBUGMALLOC_EXTENSIONS
))

19 
°rög
 
debugmÆloc
(string, );

20 
£t_mÆloc_mask
();

21 
°rög
 
check_mem‹y
(: 0);

24 #ifde‡
TRACE


25 
°rög
 
åa˚¥efix
(string | );

26 
åa˚
();

29 #i‡
deföed
(
NeXT
Ë&& deföed(
NEXT_MALLOC_DEBUG
)

30 
mÆloc_check
();

31 
mÆloc_debug
();

	@packages/external.c

1 
	~"../Õc_ö˛.h
"

2 
	~"../fûe_ö˛.h
"

3 
	~"../√tw‹k_ö˛.h
"

4 
	~"../sockë_efuns.h
"

5 
	~"../ö˛ude/sockë_îr.h
"

7 *
	gexã∫Æ_cmd
[
NUM_EXTERNAL_CMDS
];

9 #ifde‡
F_EXTERNAL_START


10 
exã∫Æ_°¨t
 
	$P5
(, 
which
, 
svÆue_t
 *, 
¨gs
,

11 
svÆue_t
 *, 
¨g1
, svÆue_à*, 
¨g2
, svÆue_à*, 
¨g3
) {

12 
sv
[2];

13 *
cmd
;

14 
fd
;

15 **
¨gv
;

16 
pid_t
 
ªt
;

18 i‡(--
which
 < 0 || which > (
NUM_EXTERNAL_CMDS
-1Ë|| !
exã∫Æ_cmd
[which])

19 
	`îr‹
("Badárgument 1ÅoÉxternal_start()\n");

20 
cmd
 = 
exã∫Æ_cmd
[
which
];

21 
fd
 = 
	`föd_√w_sockë
();

22 i‡(
fd
 < 0)  fd;

24 i‡(
	`sockë∑ú
(
PF_UNIX
, 
SOCK_STREAM
, 0, 
sv
) == -1)

25  
EESOCKET
;

27 
ªt
 = 
	`f‹k
();

28 i‡(
ªt
 == -1) {

29 
	`îr‹
("f‹k(ËöÉxã∫Æ_°¨t(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

31 i‡(
ªt
) {

32 
	`˛o£
(
sv
[1]);

33 
Õc_socks
[
fd
].fd = 
sv
[0];

34 
Õc_socks
[
fd
].
Êags
 = 
S_EXTERNAL
;

35 
	`£t_ªad_ˇŒback
(
fd
, 
¨g1
);

36 
	`£t_wrôe_ˇŒback
(
fd
, 
¨g2
);

37 
	`£t_˛o£_ˇŒback
(
fd
, 
¨g3
);

38 
Õc_socks
[
fd
].
ow√r_ob
 = 
cuºít_obje˘
;

39 
Õc_socks
[
fd
].
mode
 = 
STREAM
;

40 
Õc_socks
[
fd
].
°©e
 = 
STATE_DATA_XFER
;

41 
	`mem£t
((*Ë&
Õc_socks
[
fd
].
l_addr
, 0, (lpc_socks[fd].l_addr));

42 
	`mem£t
((*Ë&
Õc_socks
[
fd
].
r_addr
, 0, (lpc_socks[fd].r_addr));

43 
Õc_socks
[
fd
].
ow√r_ob
 = 
cuºít_obje˘
;

44 
Õc_socks
[
fd
].
ªÀa£_ob
 = 
NULL
;

45 
Õc_socks
[
fd
].
r_buf
 = 
NULL
;

46 
Õc_socks
[
fd
].
r_off
 = 0;

47 
Õc_socks
[
fd
].
r_Àn
 = 0;

48 
Õc_socks
[
fd
].
w_buf
 = 
NULL
;

49 
Õc_socks
[
fd
].
w_off
 = 0;

50 
Õc_socks
[
fd
].
w_Àn
 = 0;

52 
cuºít_obje˘
->
Êags
 |
O_EFUN_SOCKET
;

53  
fd
;

55 
Êag
 = 1;

56 
i
 = 1;

57 
n
 = 1;

58 *
p
, *
¨g
;

60 i‡(
¨gs
->
ty≥
 =
T_ARRAY
) {

61 
n
 = 
¨gs
->
u
.
¨r
->
size
;

63 
p
 = 
¨gs
->
u
.
°rög
;

65 *
p
) {

66 i‡(
	`is•a˚
(*
p
)) {

67 
Êag
 = 1;

69 i‡(
Êag
) {

70 
n
++;

71 
Êag
 = 0;

74 
p
++;

78 
¨gv
 = 
	`CALLOCATE
(
n
, *, 
TAG_TEMPORARY
, "externalárgs");

80 
¨gv
[0] = 
cmd
;

83 i‡(
¨gs
->
ty≥
 =
T_ARRAY
) {

84 
j
;

85 
svÆue_t
 *
sv
 = 
¨gs
->
u
.
¨r
->
ôem
;

87 
j
 = 0; j < 
n
; j++) {

88 
¨gv
[
i
++] = 
	`Æloc_c°rög
(
sv
[
j
].
u
.
°rög
, "externalárgs");

91 
Êag
 = 1;

92 
¨g
 = 
	`Æloc_c°rög
(
¨gs
->
u
.
°rög
, "externalárgs");

93 *
¨g
) {

94 i‡(
	`is•a˚
(*
¨g
)) {

95 *
¨g
 = 0;

96 
Êag
 = 1;

98 i‡(
Êag
) {

99 
¨gv
[
i
++] = 
¨g
;

100 
Êag
 = 0;

103 
¨g
++;

106 
¨gv
[
i
] = 0;

108 
	`˛o£
(
sv
[0]);

109 
	`dup2
(
sv
[1], 0);

110 
	`dup2
(
sv
[1], 1);

111 
	`dup2
(
sv
[1], 2);

112 
	`execv
(
cmd
, 
¨gv
);

115 
	}
}

117 
f_exã∫Æ_°¨t
 
PROT
(())

119 
	gfd
, 
	gnum_¨g
 = 
°_num_¨g
;

120 
svÆue_t
 *
	g¨g
 = 
•
 - 
num_¨g
 + 1;

122 i‡(
check_vÆid_sockë
("exã∫Æ", -1, 
cuºít_obje˘
, "N/A", -1)) {

123 
	gfd
 = 
exã∫Æ_°¨t
(
¨g
[0].
u
.
numbî
,árg + 1,

124 
¨g
 + 2,árg + 3, (
num_¨g
 == 5 ?árg + 4 : 0));

125 
p›_n_ñems
(
num_¨g
 - 1);

126 
	g•
->
	gu
.
	gnumbî
 = 
fd
;

128 
p›_n_ñems
(
num_¨g
 - 1);

129 
	g•
->
	gu
.
	gnumbî
 = 
EESECURITY
;

	@packages/external_spec.c

1 
	~"•ec.h
"

3 
exã∫Æ_°¨t
(, 
°rög
 | såög *, såög | 
fun˘i⁄
, string | function, string | function | );

	@packages/gdbm.c

7 #ifde‡
LATTICE


8 
	~"/Õc_ö˛.h
"

9 
	~"/e›î©‹s.h
"

10 
	~"/ªgexp.h
"

11 
	~"/debug.h
"

13 
	~"../Õc_ö˛.h
"

14 
	~"../e›î©‹s.h
"

15 
	~"../ªgexp.h
"

16 
	~"../debug.h
"

18 
	~"gdbm.h
"

20 #ifde‡
F_DB_EXISTS


22 
f_db_exi°s
 
PROT
(())

24 
	gªs
 = 
db_exi°s
–(
•
-1)->
u
.
°rög
, sp->u.string );

25 
p›_n_ñems
(2);

26 
push_numbî
(
ªs
);

30 #ifde‡
F_DB_QUERY


32 
f_db_quîy
 
PROT
(())

34 
svÆue_t
 
	gªs
;

36 i‡(
db_quîy
(&
ªs
, (
•
-1)->
u
.
°rög
, sp->u.string);

37 
p›_n_ñems
( 2 );

38 *
	g•
++ = 
ªt
;

39 if–
	gªs
 ) {

40 
	gªs
->
	gty≥
) {

41 
	gT_STRING
:

42 
ª•ush_°rög
(
ªs
->
u
.
°rög
,Ñes->
subty≥
);

44 
	gT_ARRAY
:

45 
push_¨øy
(
ªs
->
u
.
¨r
);

47 
	gT_NUMBER
:

48 
push_numbî
(
ªs
->
u
.
numbî
);

50 
	gT_REAL
:

51 
push_ªÆ
(
ªs
->
u
.
ªÆ
);

53 
	gT_MAPPING
:

54 
push_m≠pög
(
ªs
->
u
.
m≠
);

58 
Áèl
("Bogu†svÆuêö db_quîy(),Åy≥ %d\n", 
ªs
->
ty≥
);

60 
‰ì_svÆue
(
ªs
, "f_db_query");

61 
FREE
(
ªs
);

63 
push_undeföed
();

67 #ifde‡
F_DB_STORE


69 
f_db_°‹e
 
PROT
(())

71 
	gªs
;

73 if(!(
	g•
->
	gty≥
 & (
	gT_STRING
|
	gT_ARRAY
|
	gT_NUMBER
|
	gT_REAL
|
	gT_MAPPING
)))

74 
bad_¨gumít
(
•
, 
T_STRING
|
T_ARRAY
|
T_NUMBER
|
T_REAL
|
T_MAPPING
, 3, 
F_DB_STORE
);

76 
	gªs
 = 
db_°‹e
–(
•
-2)->
u
.
°rög
, (sp-1)->u.string, sp );

77 
p›_n_ñems
( 3 );

78 
push_numbî
–
ªs
 );

83 #ifde‡
F_DB_DELETE


85 
f_db_dñëe
 
PROT
(())

87 
	gªs
;

89 
	gªs
 = 
db_dñëe
((
•
-1)->
u
.
°rög
, sp->u.string);

90 
p›_n_ñems
(2);

91 
push_numbî
(
ªs
);

95 #ifde‡
F_DB_KEYS


97 
f_db_keys
 
PROT
(())

99 
¨øy_t
 *
	gªs
;

101 
	gªs
 = 
db_keys
((
•
-
°_num_¨g
+1)->
u
.
°rög
,

102 (
°_num_¨g
 =1 ? (*)
NULL
 : 
•
->
u
.
°rög
));

103 
p›_n_ñems
(
°_num_¨g
);

104 if(
	gªs
) {

105 
push_¨øy
(
ªs
);

106 
	gªs
->
	gªf
--;

108 
push_nuŒ
();

118 #ifde‡
PACKAGE_GDBM


120 
	~<gdbm.h
>

123 
	$db_exi°s
–
db
, 
key°r
 )

124 *
db
;

125 *
key°r
;

127 
ªs
;

128 
GDBM_FILE
 
dbf
;

129 
d©um
 
key
;

131 if(!
	`check_vÆid_∑th
(
db
, 
cuºít_obje˘
, "db_exists", 0))

132 
	`îr‹
("DeniedÑeadÖermission for database.\n");

134 
dbf
 = 
	`gdbm_›í
–
db
, 0, 
GDBM_READER
, 0640, 
NULL
 );

135 if–!
dbf
 ) {

136 if–
gdbm_î∫o
 !
GDBM_FILE_OPEN_ERROR
 )

137 
	`debug
(512,("dbm fûê›íÉº‹: %s\n",
	`gdbm_°ªº‹
(
gdbm_î∫o
)));

141 
key
.
d±r
 = 
key°r
;

142 
key
.
dsize
 = 
	`°æí
(
key°r
)+1;

144 
ªs
 = 
	`gdbm_exi°s
–
dbf
, 
key
 );

145 
	`gdbm_˛o£
–
dbf
 );

147 –()
ªs
 );

148 
	}
}

151 
svÆue_t
 *

152 
db_quîy
 
	$P3
–
svÆue_t
 *, 
ªt
, *, 
db
, *, 
key°r
 )

154 
ªs
;

155 
GDBM_FILE
 
dbf
;

156 
d©um
 
key
, 
c⁄ã¡
;

157 
svÆue_t
 
c⁄°0u
;

159 if(!
	`check_vÆid_∑th
(
db
, 
cuºít_obje˘
, "db_query", 0))

160 
	`îr‹
("DeniedÑeadÖermission for database.\n");

162 
dbf
 = 
	`gdbm_›í
–
db
, 0, 
GDBM_READER
, 0640, 
NULL
 );

163 if–!
dbf
 ) {

164 if–
gdbm_î∫o
 !
GDBM_FILE_OPEN_ERROR
 )

165 
	`debug
(512,("dbm fûê›íÉº‹: %s\n",
	`gdbm_°ªº‹
(
gdbm_î∫o
)));

166 –(
svÆue_t
 *)
NULL
 );

169 
key
.
d±r
 = 
key°r
;

170 
key
.
dsize
 = 
	`°æí
(
key°r
)+1;

172 
c⁄ã¡
 = 
	`gdbm_„tch
–
dbf
, 
key
 );

173 
	`gdbm_˛o£
–
dbf
 );

174 if–!
c⁄ã¡
.
d±r
 )

175 –(
svÆue_t
 *)
NULL
 );

177 
ªs
 = 
	`ª°‹e_svÆue
–
c⁄ã¡
.
d±r
, 
ªt
);

178 
	`FREE
(
c⁄ã¡
.
d±r
);

179 
ªs
)

182 
	`‰ì_svÆue
(
ªt
, "db_query");

183 
	`îr‹
("db_query(): Illegalárray format.\n");

185 
	`‰ì_svÆue
(
ªt
, "db_query");

186 
	`îr‹
("db_query(): Illegal mapping format.\n");

189 –
vÆ
 );

190 
	}
}

194 
	$db_°‹e
–
db
, 
key°r
, 
vÆ
 )

195 *
db
, *
key°r
;

196 
svÆue_t
 *
vÆ
;

198 
GDBM_FILE
 
dbf
;

199 
ßvesize
, 
ªs
;

200 
d©um
 
key
, 
c⁄ã¡
;

201 
ßve_svÆue_dïth
;

202 *
ßve°rög
, *
tmp
;

204 if(!
	`check_vÆid_∑th
(
db
, 
cuºít_obje˘
, "db_store", 1))

205 
	`îr‹
("Denied writeÖermission for database.\n");

207 
dbf
 = 
	`gdbm_›í
–
db
, 0, 
GDBM_WRCREAT
, 0640, 
NULL
 );

208 if–!
dbf
 ) {

209 if–
gdbm_î∫o
 !
GDBM_FILE_OPEN_ERROR
 )

210 
	`debug
(512,("dbm fûê›íÉº‹: %s\n",
	`gdbm_°ªº‹
(
gdbm_î∫o
)));

215 
ßve_svÆue_dïth
 = 0;

216 
ßvesize
 = 
	`svÆue_ßve_size
(
vÆ
);

217 i‡(
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

218 
	`îr‹
("Mappingsánd/orárraysÇestedÅoo deep (%d) for db_store\n",

219 
MAX_SAVE_SVALUE_DEPTH
);

221 
ßve°rög
 = (*)
	`XALLOC
(
ßvesize
);

222 *
ßve°rög
 = '\0';

223 
tmp
 = 
ßve°rög
;

224 
	`ßve_svÆue
(
vÆ
, &
tmp
);

226 
key
.
d±r
 = 
key°r
;

227 
key
.
dsize
 = 
	`°æí
–
key°r
 ) +1;

229 
c⁄ã¡
.
d±r
 = 
ßve°rög
;

230 
c⁄ã¡
.
dsize
 = 
	`°æí
–
ßve°rög
 ) +1;

232 
ªs
 = 
	`gdbm_°‹e
–
dbf
, 
key
, 
c⁄ã¡
, 
GDBM_REPLACE
 );

233 
	`gdbm_˛o£
–
dbf
 );

234 
	`FREE
(
ßve°rög
);

235 if–
ªs
 ) {

236 
	`debug
(512, ("db_°‹e(ËÁûed: %s\n", 
	`gdbm_°ªº‹
(
gdbm_î∫o
)));

241 
	}
}

244 
	$db_dñëe
(
db
, 
key°r
)

245 *
db
, *
key°r
;

247 
ªs
;

248 
d©um
 
key
;

249 
GDBM_FILE
 
dbf
;

251 if(!
	`check_vÆid_∑th
(
db
, 
cuºít_obje˘
, "db_delete", 1))

252 
	`îr‹
("Denied writeÖermission for database.\n");

254 
dbf
 = 
	`gdbm_›í
–
db
, 0, 
GDBM_WRITER
, 0640, 
NULL
 );

255 if–!
dbf
 ) {

256 if–
gdbm_î∫o
 !
GDBM_FILE_OPEN_ERROR
 )

257 
	`debug
(512,("dbm fûê›íÉº‹: %s\n",
	`gdbm_°ªº‹
(
gdbm_î∫o
)));

261 
key
.
d±r
 = 
key°r
;

262 
key
.
dsize
 = 
	`°æí
–
key°r
 ) +1;

264 
ªs
 = 
	`gdbm_dñëe
–
dbf
, 
key
 );

265 
	`gdbm_˛o£
–
dbf
 );

267 if–
ªs
 != 0 )

271 
	}
}

274 
¨øy_t
 *

275 
	$db_keys
–
db
, 
∑âîn
 )

276 *
db
;

277 *
∑âîn
;

279 
d©um
 
key
, 
√xtkey
;

280 
GDBM_FILE
 
dbf
;

281 
key˙t
, 
i
;

282 *
keys
[
MAX_ARRAY_SIZE
];

283 
ªgexp
 *
ªxp
 = (ªgex∞*)
NULL
;

284 
¨øy_t
 *
ªt
;

285 
evÆ_co°
;

287 if(!
	`check_vÆid_∑th
(
db
, 
cuºít_obje˘
, "db_keys", 0))

288 
	`îr‹
("DeniedÑeadÖermission for database.\n");

290 if(
∑âîn
) {

291 
ªxp
 = 
	`ªgcomp
(
∑âîn
, 0);

292 i‡(!
ªxp
)

293 ((
¨øy_t
 *)
NULL
);

296 
dbf
 = 
	`gdbm_›í
–
db
, 0, 
GDBM_READER
, 0640, 
NULL
 );

297 if–!
dbf
 ) {

298 if–
gdbm_î∫o
 !
GDBM_FILE_OPEN_ERROR
 )

299 
	`debug
(512,("dbm fûê›íÉº‹: %s\n",
	`gdbm_°ªº‹
(
gdbm_î∫o
)));

300 ((
¨øy_t
 *)
NULL
);

303 
key˙t
 = 0;

304 
key
 = 
	`gdbm_fú°key
(
dbf
);

305 
key
.
d±r
) {

306 
√xtkey
 = 
	`gdbm_√xtkey
(
dbf
, 
key
);

307 if(
∑âîn
 && !
	`ªgexec
(
ªxp
, 
key
.
d±r
))

308 
	`‰ì
(
key
.
d±r
);

310 
keys
[
key˙t
++] = 
key
.
d±r
;

311 
key
 = 
√xtkey
;

313 
	`gdbm_˛o£
(
dbf
);

314 if(
ªxp
)

315 
	`FREE
((*)
ªxp
);

317 
ªt
 = 
	`Æloˇã_¨øy
(
key˙t
);

318 
i
=0; i < 
key˙t
; i++) {

319 
ªt
->
ôem
[
i
].
ty≥
 = 
T_STRING
;

320 
ªt
->
ôem
[
i
].
subty≥
 = 
STRING_MALLOC
;

321 
ªt
->
ôem
[
i
].
u
.
°rög
 = 
keys
[i];

324 (
ªt
);

325 
	}
}

	@packages/gdbm.h

1 #i‚de‡
__db_h


2 
	#__db_h


	)

4 
db_exi°s
 
P2
–*, 
db
, *, 
key°r
);

5 
db_quîy
 
P3
–
svÆue_t
 *, 
ªt
, *, 
db
, *, 
key°r
);

6 
db_°‹e
 
P3
–*, 
db
, *, 
key°r
, 
svÆue_t
 *, 
vÆ
);

7 
db_dñëe
 
P2
–*, 
db
, *, 
key°r
);

8 
¨øy_t
 *
db_keys
 
P2
–*, 
db
, *, 
∑âîn
);

	@packages/math.c

7 
	~<m©h.h
>

8 #ifde‡
LATTICE


9 
	~"/Õc_ö˛.h
"

11 
	~"../Õc_ö˛.h
"

12 
	~"../efun_¥Ÿos.h
"

15 #ifde‡
F_COS


17 
f_cos
 
PROT
(())

19 
	g•
->
	gu
.
	gªÆ
 = 
cos
(
•
->
u
.
ªÆ
);

23 #ifde‡
F_SIN


25 
f_sö
 
PROT
(())

27 
	g•
->
	gu
.
	gªÆ
 = 
sö
(
•
->
u
.
ªÆ
);

30 #ifde‡
F_TAN


32 
f_èn
 
PROT
(())

37 
	g•
->
	gu
.
	gªÆ
 = 
èn
(
•
->
u
.
ªÆ
);

41 #ifde‡
F_ASIN


43 
f_asö
 
PROT
(())

45 i‡(
	g•
->
	gu
.
	gªÆ
 < -1.0) {

46 
îr‹
("math:ásin(x) with (x < -1.0)\n");

48 } i‡(
	g•
->
	gu
.
	gªÆ
 > 1.0) {

49 
îr‹
("math:ásin(x) with (x > 1.0)\n");

52 
	g•
->
	gu
.
	gªÆ
 = 
asö
(
•
->
u
.
ªÆ
);

56 #ifde‡
F_ACOS


58 
f_acos
 
PROT
(())

60 i‡(
	g•
->
	gu
.
	gªÆ
 < -1.0) {

61 
îr‹
("math:ácos(x) with (x < -1.0)\n");

63 } i‡(
	g•
->
	gu
.
	gªÆ
 > 1.0) {

64 
îr‹
("math:ácos(x) with (x > 1.0)\n");

67 
	g•
->
	gu
.
	gªÆ
 = 
acos
(
•
->
u
.
ªÆ
);

71 #ifde‡
F_ATAN


73 
f_©™
 
PROT
(())

75 
	g•
->
	gu
.
	gªÆ
 = 
©™
(
•
->
u
.
ªÆ
);

79 #ifde‡
F_SQRT


81 
f_sqπ
 
PROT
(())

83 i‡(
	g•
->
	gu
.
	gªÆ
 < 0.0) {

84 
îr‹
("math: sqrt(x) with (x < 0.0)\n");

87 
	g•
->
	gu
.
	gªÆ
 = 
sqπ
(
•
->
u
.
ªÆ
);

91 #ifde‡
F_LOG


93 
f_log
 
PROT
(())

95 i‡(
	g•
->
	gu
.
	gªÆ
 <= 0.0) {

96 
îr‹
("math:Üog(x) with (x <= 0.0)\n");

99 
	g•
->
	gu
.
	gªÆ
 = 
log
(
•
->
u
.
ªÆ
);

103 #ifde‡
F_LOG10


105 
f_log10
 
PROT
(())

107 i‡(
	g•
->
	gu
.
	gªÆ
 <= 0.0) {

108 
îr‹
("math:Üog10(x) with (x <= 0.0)\n");

111 
	g•
->
	gu
.
	gªÆ
 = 
log10
(
•
->
u
.
ªÆ
);

115 #ifde‡
F_POW


117 
f_pow
 
PROT
(())

119 (
	g•
 - 1)->
	gu
.
	gªÆ
 = 
pow
((
•
 - 1)->
u
.
ªÆ
, sp->u.real);

120 
	g•
--;

124 #ifde‡
F_EXP


126 
f_exp
 
PROT
(())

128 
	g•
->
	gu
.
	gªÆ
 = 
exp
(
•
->
u
.
ªÆ
);

132 #ifde‡
F_FLOOR


134 
f_Êo‹
 
PROT
(())

136 
	g•
->
	gu
.
	gªÆ
 = 
Êo‹
(
•
->
u
.
ªÆ
);

140 #ifde‡
F_CEIL


142 
f_˚û
 
PROT
(())

144 
	g•
->
	gu
.
	gªÆ
 = 
˚û
(
•
->
u
.
ªÆ
);

	@packages/math_spec.c

1 
	~"•ec.h
"

3 
cos
();

4 
sö
();

5 
èn
();

6 
asö
();

7 
acos
();

8 
©™
();

9 
sqπ
();

10 
log
();

11 
log10
();

12 
pow
(, );

13 
exp
();

14 
Êo‹
();

15 
˚û
();

	@packages/matrix.c

6 
	~<m©h.h
>

8 #ifde‡
LATTICE


9 
	~"/Õc_ö˛.h
"

11 
	~"../Õc_ö˛.h
"

12 
	~"../efun_¥Ÿos.h
"

15 
	~"m©rix.h
"

17 
M©rix
 
	gidítôy
 =

23 
¥öt_m©rix
 
PROT
((
M©rix
, *));

24 
¥öt_¨øy
 
PROT
((
Ve˘‹
 *, *));

25 
Ve˘‹
 *
n‹mÆize_¨øy
 
PROT
((Vector *));

26 
Ve˘‹
 *
¸oss_¥odu˘
 
PROT
((Vector *, Vector *, Vector *));

27 
Ve˘‹
 *
poöts_to_¨øy
 
PROT
((Vector *, Vector *, Vector *));

29 
f_id_m©rix
 
PROT
(())

31 
¨øy_t
 *
	gm©rix
;

32 
	gi
;

34 
	gm©rix
 = 
Æloˇã_em±y_¨øy
(16);

35 
	gi
 = 0; i < 16; i++) {

36 
	gm©rix
->
	gôem
[
i
].
	gty≥
 = 
T_REAL
;

37 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
idítôy
[i];

39 
push_ª„d_¨øy
(
m©rix
);

42 
f_å™¶©e
 
PROT
(())

44 
¨øy_t
 *
	gm©rix
;

45 
	gx
, 
	gy
, 
	gz
;

46 
M©rix
 
	gcuºít_m©rix
;

47 
M©rix
 
	gå™s_m©rix
;

48 
M©rix
 
	gföÆ_m©rix
;

49 
	gi
;

51 i‡((
	g•
 - 1)->
	gty≥
 !
T_REAL
) {

52 
bad_¨g
(3, 
F_TRANSLATE
);

54 i‡(
	g•
->
	gty≥
 !
T_REAL
) {

55 
bad_¨g
(4, 
F_TRANSLATE
);

60 
	gm©rix
 = (
•
 - 3)->
u
.
¨r
;

61 
	gx
 = (
•
 - 2)->
u
.
ªÆ
;

62 
	gy
 = (
•
 - 1)->
u
.
ªÆ
;

63 
	gz
 = 
•
->
u
.
ªÆ
;

64 
	g•
 -= 3;

69 
	gi
 = 0; i < 16; i++) {

70 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

75 
å™¶©e_m©rix
(
x
, 
y
, 
z
, 
å™s_m©rix
);

79 
mu…_m©rix
(
cuºít_m©rix
, 
å™s_m©rix
, 
föÆ_m©rix
);

83 
	gi
 = 0; i < 16; i++) {

84 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
föÆ_m©rix
[i];

88 
f_sˇÀ
 
PROT
(())

90 
¨øy_t
 *
	gm©rix
;

91 
	gx
, 
	gy
, 
	gz
;

92 
M©rix
 
	gcuºít_m©rix
;

93 
M©rix
 
	gsˇlög_m©rix
;

94 
M©rix
 
	gföÆ_m©rix
;

95 
	gi
;

97 i‡((
	g•
 - 1)->
	gty≥
 !
T_REAL
) {

98 
bad_¨g
(3, 
F_SCALE
);

100 i‡(
	g•
->
	gty≥
 !
T_REAL
) {

101 
bad_¨g
(4, 
F_SCALE
);

106 
	gm©rix
 = (
•
 - 3)->
u
.
¨r
;

107 
	gx
 = (
•
 - 2)->
u
.
ªÆ
;

108 
	gy
 = (
•
 - 1)->
u
.
ªÆ
;

109 
	gz
 = 
•
->
u
.
ªÆ
;

110 
	g•
 -= 3;

114 
	gi
 = 0; i < 16; i++) {

115 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

120 
sˇÀ_m©rix
(
x
, 
y
, 
z
, 
sˇlög_m©rix
);

124 
mu…_m©rix
(
cuºít_m©rix
, 
sˇlög_m©rix
, 
föÆ_m©rix
);

128 
	gi
 = 0; i < 16; i++) {

129 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
föÆ_m©rix
[i];

133 
f_rŸ©e_x
 
PROT
(())

135 
¨øy_t
 *
	gm©rix
;

136 
	g™gÀ
;

137 
M©rix
 
	gcuºít_m©rix
;

138 
M©rix
 
	grŸ_m©rix
;

139 
M©rix
 
	gföÆ_m©rix
;

140 
	gi
;

145 
	gm©rix
 = (
•
 - 1)->
u
.
¨r
;

146 
	g™gÀ
 = (
•
--)->
u
.
ªÆ
;

150 
	gi
 = 0; i < 16; i++) {

151 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

156 
rŸ©e_x_m©rix
(
™gÀ
, 
rŸ_m©rix
);

160 
mu…_m©rix
(
cuºít_m©rix
, 
rŸ_m©rix
, 
föÆ_m©rix
);

164 
	gi
 = 0; i < 16; i++) {

165 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
föÆ_m©rix
[i];

169 
f_rŸ©e_y
 
PROT
(())

171 
¨øy_t
 *
	gm©rix
;

172 
	g™gÀ
;

173 
M©rix
 
	gcuºít_m©rix
;

174 
M©rix
 
	grŸ_m©rix
;

175 
M©rix
 
	gföÆ_m©rix
;

176 
	gi
;

181 
	gm©rix
 = (
•
 - 1)->
u
.
¨r
;

182 
	g™gÀ
 = (
•
--)->
u
.
ªÆ
;

186 
	gi
 = 0; i < 16; i++) {

187 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

192 
rŸ©e_y_m©rix
(
™gÀ
, 
rŸ_m©rix
);

196 
mu…_m©rix
(
cuºít_m©rix
, 
rŸ_m©rix
, 
föÆ_m©rix
);

200 
	gi
 = 0; i < 16; i++) {

201 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
föÆ_m©rix
[i];

205 
f_rŸ©e_z
 
PROT
(())

207 
¨øy_t
 *
	gm©rix
;

208 
	g™gÀ
;

209 
M©rix
 
	gcuºít_m©rix
;

210 
M©rix
 
	grŸ_m©rix
;

211 
M©rix
 
	gföÆ_m©rix
;

212 
	gi
;

217 
	gm©rix
 = (
•
 - 1)->
u
.
¨r
;

218 
	g™gÀ
 = (
•
--)->
u
.
ªÆ
;

222 
	gi
 = 0; i < 16; i++) {

223 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

228 
rŸ©e_z_m©rix
(
™gÀ
, 
rŸ_m©rix
);

232 
mu…_m©rix
(
cuºít_m©rix
, 
rŸ_m©rix
, 
föÆ_m©rix
);

236 
	gi
 = 0; i < 16; i++) {

237 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
föÆ_m©rix
[i];

241 
f_look©_rŸ©e
 
PROT
(())

243 
¨øy_t
 *
	gm©rix
;

244 
	gx
, 
	gy
, 
	gz
;

245 
M©rix
 
	gcuºít_m©rix
;

246 
M©rix
 
	glook©_m©rix
;

247 
	gi
;

249 i‡((
	g•
 - 1)->
	gty≥
 !
T_REAL
) {

250 
bad_¨g
(3, 
F_LOOKAT_ROTATE
);

252 i‡(
	g•
->
	gty≥
 !
T_REAL
) {

253 
bad_¨g
(4, 
F_LOOKAT_ROTATE
);

258 
	gm©rix
 = (
•
 - 3)->
u
.
¨r
;

259 
	gx
 = (
•
 - 2)->
u
.
ªÆ
;

260 
	gy
 = (
•
 - 1)->
u
.
ªÆ
;

261 
	gz
 = 
•
->
u
.
ªÆ
;

262 
	g•
 -= 3;

266 
	gi
 = 0; i < 16; i++) {

267 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

272 
look©_rŸ©e
(
cuºít_m©rix
, 
x
, 
y
, 
z
, 
look©_m©rix
);

276 
	gi
 = 0; i < 16; i++) {

277 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
look©_m©rix
[i];

281 #ifde‡
F_LOOKAT_ROTATE2


282 
f_look©_rŸ©e2
 
PROT
(())

284 
¨øy_t
 *
	gm©rix
;

285 
	gex
, 
	gey
, 
	gez
, 
	glx
, 
	gly
, 
	glz
;

286 
M©rix
 
	gcuºít_m©rix
;

287 
M©rix
 
	glook©_m©rix
;

288 
	gi
, 
	gj
;

290 
	gj
 = 4; j >= 0; j--) {

291 i‡((
	g•
 - 
	gj
)->
	gty≥
 !
T_REAL
) {

292 
bad_¨g
(7 - 
j
, 
F_LOOKAT_ROTATE2
);

298 
	gm©rix
 = (
•
 - 6)->
u
.
¨r
;

299 
	gex
 = (
•
 - 5)->
u
.
ªÆ
;

300 
	gey
 = (
•
 - 4)->
u
.
ªÆ
;

301 
	gez
 = (
•
 - 3)->
u
.
ªÆ
;

302 
	glx
 = (
•
 - 2)->
u
.
ªÆ
;

303 
	gly
 = (
•
 - 1)->
u
.
ªÆ
;

304 
	glz
 = 
•
->
u
.
ªÆ
;

305 
	g•
 -= 5;

306 
‰ì_¨øy
((
•
--)->
u
.
¨r
);

311 
	gi
 = 0; i < 16; i++) {

312 
	gcuºít_m©rix
[
i
] = 
m©rix
->
ôem
[i].
u
.
ªÆ
;

317 
look©_rŸ©e2
(
ex
, 
ey
, 
ez
, 
lx
, 
ly
, 
lz
, 
look©_m©rix
);

321 
	gi
 = 0; i < 16; i++) {

322 
	gm©rix
->
	gôem
[
i
].
	gu
.
	gªÆ
 = 
look©_m©rix
[i];

327 #ifde‡
DEBUG


328 
¥öt_m©rix
 
	$P2
(
M©rix
, 
m
, *, 
œbñ
)

330 
i
;

331 
j
;

333 
	`Ârötf
(
°dîr
, "%s:\n", 
œbñ
);

334 
i
 = 0; i < 4; i++) {

335 
j
 = 0; j < 4; j++) {

336 
	`Ârötf
(
°dîr
, "%f\t", 
m
[
i
 * 4 + 
j
]);

338 
	`Ârötf
(
°dîr
, "\n");

340 
	}
}

342 
¥öt_¨øy
 
	$P2
(
Ve˘‹
 *, 
v
, *, 
œbñ
)

344 
	`Ârötf
(
°dîr
, "%s:\t%f\t%f\t%f\n", 
œbñ
, 
v
->
x
, v->
y
, v->
z
);

345 
	}
}

348 
Ve˘‹
 *
n‹mÆize_¨øy
 
	$P1
(
Ve˘‹
 *, 
v
)

350 
xx
, 
yy
, 
zz
, 
mm
, 
m
;

352 
xx
 = 
v
->
x
 * v->x;

353 
yy
 = 
v
->
y
 * v->y;

354 
zz
 = 
v
->
z
 * v->z;

355 
mm
 = 
xx
 + 
yy
 + 
zz
;

356 
m
 = 
	`sqπ
(
mm
);

357 i‡(
m
) {

358 
v
->
x
 /
m
;

359 
v
->
y
 /
m
;

360 
v
->
z
 /
m
;

362  (
v
);

363 
	}
}

365 
Ve˘‹
 *
¸oss_¥odu˘
 
	$P3
(
Ve˘‹
 *, 
v
, Ve˘‹ *, 
va
, Ve˘‹ *, 
vb
)

367 
v
->
x
 = (
va
->
y
 * 
vb
->
z
) - (va->z * vb->y);

368 
v
->
y
 = (
va
->
z
 * 
vb
->
x
) - (va->x * vb->z);

369 
v
->
z
 = (
va
->
x
 * 
vb
->
y
) - (va->y * vb->x);

370  (
v
);

371 
	}
}

373 
Ve˘‹
 *
poöts_to_¨øy
 
	$P3
(
Ve˘‹
 *, 
v
, Ve˘‹ *, 
∑
, Ve˘‹ *, 
pb
)

375 
v
->
x
 = 
∑
->x - 
pb
->x;

376 
v
->
y
 = 
∑
->y - 
pb
->y;

377 
v
->
z
 = 
∑
->z - 
pb
->z;

378  (
v
);

379 
	}
}

381 
look©_rŸ©e
 
	$P5
(
M©rix
, 
T
, , 
x
, , 
y
, , 
z
, M©rix, 
M
)

383 
Ve˘‹
 
N
, 
V
, 
U
;

384 
Ve˘‹
 
ï
, 
Õ
;

386 
Õ
.
x
 = x;

387 
Õ
.
y
 = y;

388 
Õ
.
z
 = z;

389 
ï
.
x
 = 
T
[12];

390 
ï
.
y
 = 
T
[13];

391 
ï
.
z
 = 
T
[14];

392 
	`poöts_to_¨øy
(&
N
, &
Õ
, &
ï
);

393 
	`n‹mÆize_¨øy
(&
N
);

395 
U
.
x
 = 
T
[0];

396 
U
.
y
 = 
T
[4];

397 
U
.
z
 = 
T
[8];

398 
	`¸oss_¥odu˘
(&
V
, &
N
, &
U
);

399 
	`n‹mÆize_¨øy
(&
V
);

401 
	`¸oss_¥odu˘
(&
U
, &
V
, &
N
);

402 
	`n‹mÆize_¨øy
(&
U
);

404 
M
[0] = 
U
.
x
;

405 
M
[1] = 
V
.
x
;

406 
M
[2] = 
N
.
x
;

407 
M
[3] = 0.;

408 
M
[4] = 
U
.
y
;

409 
M
[5] = 
V
.
y
;

410 
M
[6] = 
N
.
y
;

411 
M
[7] = 0.;

412 
M
[8] = 
U
.
z
;

413 
M
[9] = 
V
.
z
;

414 
M
[10] = 
N
.
z
;

415 
M
[11] = 0.;

417 
M
[12] = 
ï
.
x
;

418 
M
[13] = 
ï
.
y
;

419 
M
[14] = 
ï
.
z
;

420 
M
[15] = 1.;

423 
M
[12] = -
U
.
x
 * 
ï
.x - U.
y
 *Ép.y - U.
z
 *Ép.z;

424 
M
[13] = -
V
.
x
 * 
ï
.x - V.
y
 *Ép.y - V.
z
 *Ép.z;

425 
M
[14] = -
N
.
x
 * 
ï
.x - N.
y
 *Ép.y - N.
z
 *Ép.z;

427 
M
[12] = ((
U
.
x
 * 
ï
.xË+ (U.
y
 *Ép.yË+ (U.
z
 *Ép.z));

428 
M
[13] = ((
V
.
x
 * 
ï
.xË+ (V.
y
 *Ép.yË+ (V.
z
 *Ép.z));

429 
M
[14] = ((
N
.
x
 * 
ï
.xË+ (N.
y
 *Ép.yË+ (N.
z
 *Ép.z));

430 
M
[15] = 1.;

432 #ifde‡
DEBUG


433 
	`¥öt_¨øy
(&
Õ
, "lookÖoint");

434 
	`¥öt_¨øy
(&
ï
, "eyeÖoint");

435 
	`¥öt_¨øy
(&
N
, "normalárray");

436 
	`¥öt_¨øy
(&
V
, "V = N x U");

437 
	`¥öt_¨øy
(&
U
, "U = V x N");

438 
	`¥öt_m©rix
(
M
, "final matrix");

440 
	}
}

442 
look©_rŸ©e2
 
	$P7
(, 
ex
, , 
ey
, , 
ez
, , 
lx
, , 
ly
, , 
lz
, 
M©rix
, 
M
)

444 
Ve˘‹
 
N
, 
V
, 
U
;

445 
Ve˘‹
 
ï
, 
Õ
;

447 
ï
.
x
 = 
ex
;

448 
ï
.
y
 = 
ey
;

449 
ï
.
z
 = 
ez
;

450 
Õ
.
x
 = 
lx
;

451 
Õ
.
y
 = 
ly
;

452 
Õ
.
z
 = 
lz
;

453 
	`poöts_to_¨øy
(&
N
, &
Õ
, &
ï
);

454 
	`n‹mÆize_¨øy
(&
N
);

456 
U
.
x
 = 0.;

457 
U
.
y
 = 1.;

458 
U
.
z
 = 0.;

459 
	`¸oss_¥odu˘
(&
V
, &
N
, &
U
);

460 
	`n‹mÆize_¨øy
(&
V
);

462 
	`¸oss_¥odu˘
(&
U
, &
V
, &
N
);

463 
	`n‹mÆize_¨øy
(&
U
);

465 
M
[0] = 
U
.
x
;

466 
M
[1] = 
V
.
x
;

467 
M
[2] = 
N
.
x
;

468 
M
[3] = 0.;

469 
M
[4] = 
U
.
y
;

470 
M
[5] = 
V
.
y
;

471 
M
[6] = 
N
.
y
;

472 
M
[7] = 0.;

473 
M
[8] = 
U
.
z
;

474 
M
[9] = 
V
.
z
;

475 
M
[10] = 
N
.
z
;

476 
M
[11] = 0.;

478 
M
[12] = 
ï
.
x
;

479 
M
[13] = 
ï
.
y
;

480 
M
[14] = 
ï
.
z
;

481 
M
[15] = 1.;

484 
M
[12] = -
U
.
x
 * 
ï
.x - U.
y
 *Ép.y - U.
z
 *Ép.z;

485 
M
[13] = -
V
.
x
 * 
ï
.x - V.
y
 *Ép.y - V.
z
 *Ép.z;

486 
M
[14] = -
N
.
x
 * 
ï
.x - N.
y
 *Ép.y - N.
z
 *Ép.z;

488 
M
[12] = ((
U
.
x
 * 
ï
.xË+ (U.
y
 *Ép.yË+ (U.
z
 *Ép.z));

489 
M
[13] = ((
V
.
x
 * 
ï
.xË+ (V.
y
 *Ép.yË+ (V.
z
 *Ép.z));

490 
M
[14] = ((
N
.
x
 * 
ï
.xË+ (N.
y
 *Ép.yË+ (N.
z
 *Ép.z));

491 
M
[15] = 1.;

493 #ifde‡
DEBUG


494 
	`¥öt_¨øy
(&
Õ
, "lookÖoint");

495 
	`¥öt_¨øy
(&
ï
, "eyeÖoint");

496 
	`¥öt_¨øy
(&
N
, "normalárray");

497 
	`¥öt_¨øy
(&
V
, "V = N x U");

498 
	`¥öt_¨øy
(&
U
, "U = V x N");

499 
	`¥öt_m©rix
(
M
, "final matrix");

501 
	}
}

503 
å™¶©e_m©rix
 
	$P4
(, 
x
, , 
y
, , 
z
, 
M©rix
, 
m
)

505 
m
[0] = 1.;

506 
m
[1] = 0.;

507 
m
[2] = 0.;

508 
m
[3] = 0.;

509 
m
[4] = 0.;

510 
m
[5] = 1.;

511 
m
[6] = 0.;

512 
m
[7] = 0.;

513 
m
[8] = 0.;

514 
m
[9] = 0.;

515 
m
[10] = 1.;

516 
m
[11] = 0.;

517 
m
[12] = 
x
;

518 
m
[13] = 
y
;

519 
m
[14] = 
z
;

520 
m
[15] = 1.;

521 
	}
}

523 
sˇÀ_m©rix
 
	$P4
(, 
x
, , 
y
, , 
z
, 
M©rix
, 
m
)

525 
m
[0] = 
x
;

526 
m
[1] = 0.;

527 
m
[2] = 0.;

528 
m
[3] = 0.;

529 
m
[4] = 0.;

530 
m
[5] = 
y
;

531 
m
[6] = 0.;

532 
m
[7] = 0.;

533 
m
[8] = 0.;

534 
m
[9] = 0.;

535 
m
[10] = 
z
;

536 
m
[11] = 0.;

537 
m
[12] = 0.;

538 
m
[13] = 0.;

539 
m
[14] = 0.;

540 
m
[15] = 1.;

541 
	}
}

543 
rŸ©e_x_m©rix
 
	$P2
(, 
a
, 
M©rix
, 
m
)

545 
a_ød
;

546 
c
, 
s
;

548 
a_ød
 = (Ë(
a
 * 
RADIANS_PER_DEGREE
);

549 
c
 = 
	`cos
(
a_ød
);

550 
s
 = 
	`sö
(
a_ød
);

551 
m
[0] = 1.;

552 
m
[1] = 0.;

553 
m
[2] = 0.;

554 
m
[3] = 0.;

555 
m
[4] = 0.;

556 
m
[5] = 
c
;

557 
m
[6] = 
s
;

558 
m
[7] = 0.;

559 
m
[8] = 0.;

560 
m
[9] = -
s
;

561 
m
[10] = 
c
;

562 
m
[11] = 0.;

563 
m
[12] = 0.;

564 
m
[13] = 0.;

565 
m
[14] = 0.;

566 
m
[15] = 1.;

567 
	}
}

569 
rŸ©e_y_m©rix
 
	$P2
(, 
a
, 
M©rix
, 
m
)

571 
a_ød
;

572 
c
, 
s
;

574 
a_ød
 = (Ë(
a
 * 
RADIANS_PER_DEGREE
);

575 
c
 = 
	`cos
(
a_ød
);

576 
s
 = 
	`sö
(
a_ød
);

577 
m
[0] = 
c
;

578 
m
[1] = 0.;

579 
m
[2] = -
s
;

580 
m
[3] = 0.;

581 
m
[4] = 0.;

582 
m
[5] = 1.;

583 
m
[6] = 0.;

584 
m
[7] = 0.;

585 
m
[8] = 
s
;

586 
m
[9] = 0.;

587 
m
[10] = 
c
;

588 
m
[11] = 0.;

589 
m
[12] = 0.;

590 
m
[13] = 0.;

591 
m
[14] = 0.;

592 
m
[15] = 1.;

593 
	}
}

595 
rŸ©e_z_m©rix
 
	$P2
(, 
a
, 
M©rix
, 
m
)

597 
a_ød
;

598 
c
, 
s
;

600 
a_ød
 = (Ë(
a
 * 
RADIANS_PER_DEGREE
);

601 
c
 = 
	`cos
(
a_ød
);

602 
s
 = 
	`sö
(
a_ød
);

603 
m
[0] = 
c
;

604 
m
[1] = 
s
;

605 
m
[2] = 0.;

606 
m
[3] = 0.;

607 
m
[4] = -
s
;

608 
m
[5] = 
c
;

609 
m
[6] = 0.;

610 
m
[7] = 0.;

611 
m
[8] = 0.;

612 
m
[9] = 0.;

613 
m
[10] = 1.;

614 
m
[11] = 0.;

615 
m
[12] = 0.;

616 
m
[13] = 0.;

617 
m
[14] = 0.;

618 
m
[15] = 1.;

619 
	}
}

621 
mu…_m©rix
 
	$P3
(
M©rix
, 
ma
, M©rix, 
mb
, M©rix, 
m
)

623 
m
[0] = 
ma
[0] * 
mb
[0] + ma[1] * mb[4] + ma[2] * mb[8] + ma[3] * mb[12];

625 
m
[1] = 
ma
[0] * 
mb
[1] + ma[1] * mb[5] + ma[2] * mb[9] + ma[3] * mb[13];

627 
m
[2] = 
ma
[0] * 
mb
[2] + ma[1] * mb[6] + ma[2] * mb[10] + ma[3] * mb[14];

629 
m
[3] = 
ma
[0] * 
mb
[3] + ma[1] * mb[7] + ma[2] * mb[11] + ma[3] * mb[15];

631 
m
[4] = 
ma
[4] * 
mb
[0] + ma[5] * mb[4] + ma[6] * mb[8] + ma[7] * mb[12];

633 
m
[5] = 
ma
[4] * 
mb
[1] + ma[5] * mb[5] + ma[6] * mb[9] + ma[7] * mb[13];

635 
m
[6] = 
ma
[4] * 
mb
[2] + ma[5] * mb[6] + ma[6] * mb[10] + ma[7] * mb[14];

637 
m
[7] = 
ma
[4] * 
mb
[3] + ma[5] * mb[7] + ma[6] * mb[11] + ma[7] * mb[15];

639 
m
[8] = 
ma
[8] * 
mb
[0] + ma[9] * mb[4] + ma[10] * mb[8] + ma[11] * mb[12];

641 
m
[9] = 
ma
[8] * 
mb
[1] + ma[9] * mb[5] + ma[10] * mb[9] + ma[11] * mb[13];

643 
m
[10] = 
ma
[8] * 
mb
[2] + ma[9] * mb[6] + ma[10] * mb[10] + ma[11] * mb[14];

645 
m
[11] = 
ma
[8] * 
mb
[3] + ma[9] * mb[7] + ma[10] * mb[11] + ma[11] * mb[15];

647 
m
[12] = 
ma
[12] * 
mb
[0] + ma[13] * mb[4] + ma[14] * mb[8] + ma[15] * mb[12];

649 
m
[13] = 
ma
[12] * 
mb
[1] + ma[13] * mb[5] + ma[14] * mb[9] + ma[15] * mb[13];

651 
m
[14] = 
ma
[12] * 
mb
[2] + ma[13] * mb[6] + ma[14] * mb[10] + ma[15] * mb[14];

653 
m
[15] = 
ma
[12] * 
mb
[3] + ma[13] * mb[7] + ma[14] * mb[11] + ma[15] * mb[15];

654 
	}
}

	@packages/matrix.h

6 #i‚de‡
_MATRIX_H_


7 
	#_MATRIX_H_


	)

9 
	#RADIANS_PER_DEGREE
 0.01745329252

	)

11 
	tM©rix
[16];

14 
	mx
;

15 
	my
;

16 
	mz
;

17 } 
	tVe˘‹
;

19 
å™¶©e_m©rix
 
PROT
((
x
, 
y
, 
z
, 
M©rix
 
m
));

21 
sˇÀ_m©rix
 
PROT
((
x
, 
y
, 
z
, 
M©rix
 
m
));

23 
rŸ©e_x_m©rix
 
PROT
((
a
, 
M©rix
 
m
));

25 
rŸ©e_y_m©rix
 
PROT
((
a
, 
M©rix
 
m
));

27 
rŸ©e_z_m©rix
 
PROT
((
a
, 
M©rix
 
m
));

29 
look©_rŸ©e
 
PROT
((
M©rix
 
T
, 
x
, 
y
, 
z
, M©rix 
m
));

31 
look©_rŸ©e2


32 
PROT
((
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
M©rix
 
m
));

34 
mu…_m©rix
 
PROT
((
M©rix
 
m1
, M©rix 
m2
, M©rix 
m
));

	@packages/matrix_spec.c

1 
	~"•ec.h
"

5 *
id_m©rix
();

6 *
å™¶©e
(*, , , );

7 *
sˇÀ
(*, , , );

8 *
rŸ©e_x
(*, );

9 *
rŸ©e_y
(*, );

10 *
rŸ©e_z
(*, );

11 *
look©_rŸ©e
(*, , , );

18 *
look©_rŸ©e2
(*, , , , , , );

	@packages/mongo.c

14 
	~"m⁄go.h
"

23 
	$f_m⁄goc_˛õ¡_√w
 ( )

28 
num_¨g
 = 
°_num_¨g
;

29 
svÆue_t
 *
¨g
;

30 
m⁄goc_˛õ¡
 *
˛õ¡
;

33 if–
num_¨g
==0 ||Çum_arg>1 )

35 
	`îr‹
("Áº∫Â∞ëÂèÇÊï∞„ÄÇ\n");

37 if–!(
•
->
ty≥
 &
T_STRING
) )

39 
	`bad_¨g
(1, 
F_MONGOC_CLIENT_NEW
);

42 
˛õ¡
=
	`m⁄goc_˛õ¡_√w
(
•
->
u
.);

48 
	}
}

	@packages/mongo.h

1 
	~<bs⁄.h
>

2 
	~<bc⁄.h
>

3 
	~<m⁄goc.h
>

	@packages/mongo_spec.c

	@packages/mudlib_stats.c

10 #ifde‡
LATTICE


11 
	~"/Õc_ö˛.h
"

12 
	~"/backíd.h
"

13 
	~"/md.h
"

14 
	~"/ma°î.h
"

16 
	~"../Õc_ö˛.h
"

17 
	~"../backíd.h
"

18 
	~"../md.h
"

19 
	~"../ma°î.h
"

20 
	~"../efun_¥Ÿos.h
"

23 
	~"mudlib_°©s.h
"

25 #ifde‡
F_DOMAIN_STATS


27 
f_domaö_°©s
 
PROT
(())

29 
m≠pög_t
 *
	gm
;

31 i‡(
	g°_num_¨g
) {

32 
	gm
 = 
gë_domaö_°©s
(
•
->
u
.
°rög
);

33 
‰ì_°rög_svÆue
(
•
--);

35 
	gm
 = 
gë_domaö_°©s
(0);

37 i‡(!
	gm
) {

38 
push_numbî
(0);

41 
push_m≠pög
(
m
);

46 #ifde‡
F_SET_AUTHOR


48 
f_£t_auth‹
 
PROT
(())

50 
£t_auth‹
(
•
->
u
.
°rög
);

51 
‰ì_°rög_svÆue
(
•
--);

55 #ifde‡
F_AUTHOR_STATS


57 
f_auth‹_°©s
 
PROT
(())

59 
m≠pög_t
 *
	gm
;

61 i‡(
	g°_num_¨g
) {

62 
	gm
 = 
gë_auth‹_°©s
(
•
->
u
.
°rög
);

63 
‰ì_°rög_svÆue
(
•
--);

65 
	gm
 = 
gë_auth‹_°©s
(0);

67 i‡(!
	gm
) {

68 
push_numbî
(0);

71 
push_m≠pög
(
m
);

77 
mudlib_°©s_t
 *
	gdomaös
 = 0;

78 
mudlib_°©s_t
 *
	gbackb⁄e_domaö
 = 0;

79 
mudlib_°©s_t
 *
	gauth‹s
 = 0;

80 
mudlib_°©s_t
 *
	gma°î_auth‹
 = 0;

82 
mudlib_°©s_t
 *
föd_°©_íåy
 
PROT
((*, mudlib_stats_t *));

83 
mudlib_°©s_t
 *
add_°©_íåy
 
PROT
((*, mudlib_stats_t **));

84 
öô_auth‹_f‹_ob
 
PROT
((
obje˘_t
 *));

85 *
auth‹_f‹_fûe
 
PROT
((*));

86 
öô_domaö_f‹_ob
 
PROT
((
obje˘_t
 *));

87 *
domaö_f‹_fûe
 
PROT
((*));

88 
ßve_°©_li°
 
PROT
((*, 
mudlib_°©s_t
 *));

89 
ª°‹e_°©_li°
 
PROT
((*, 
mudlib_°©s_t
 **));

90 
m≠pög_t
 *
gë_öfo
 
PROT
((
mudlib_°©s_t
 *));

91 
m≠pög_t
 *
gë_°©s
 
PROT
((*, 
mudlib_°©s_t
 *));

92 
mudlib_°©s_t
 *
ö£π_°©_íåy
 
PROT
((mudlib_stats_t *, mudlib_stats_t **));

94 #ifde‡
DEBUGMALLOC_EXTENSIONS


96 
check_vÆid_°©_íåy
 
	$P1
(
mudlib_°©s_t
 *, 
£
) {

97 
mudlib_°©s_t
 *
tmp
;

99 
tmp
 = 
domaös
;

100 
tmp
) {

101 i‡(
tmp
 =
£
)  1;

102 
tmp
 =Åmp->
√xt
;

104 
tmp
 = 
auth‹s
;

105 
tmp
) {

106 i‡(
tmp
 =
£
)  1;

107 
tmp
 =Åmp->
√xt
;

110 
	}
}

117 
mudlib_°©s_t
 *
ö£π_°©_íåy
 
	$P2
(
mudlib_°©s_t
 *, 
íåy
, mudlib_°©s_à**, 
li°
)

119 
íåy
->
√xt
 = *
li°
;

120 *
li°
 = 
íåy
;

121  *
li°
;

122 
	}
}

129 
mudlib_°©s_t
 *
föd_°©_íåy
 
	$P2
(*, 
«me
, 
mudlib_°©s_t
 *, 
li°
)

131 
Àngth
;

133 
Àngth
 = 
	`°æí
(
«me
);

134 ; 
li°
;Üi° =Üi°->
√xt
)

135 i‡(
li°
->
Àngth
 =Àngth && 
	`°rcmp
÷i°->
«me
,Çame) == 0)

136  
li°
;

138 
	}
}

143 
mudlib_°©s_t
 *
add_°©_íåy
 
	$P2
(*, 
°r
, 
mudlib_°©s_t
 **, 
li°
)

145 
mudlib_°©s_t
 *
íåy
;

147 i‡((
íåy
 = 
	`föd_°©_íåy
(
°r
, *
li°
)))

148  
íåy
;

149 
íåy
 = 
	`ALLOCATE
(
mudlib_°©s_t
, 
TAG_MUDLIB_STATS
, "add_stat_entry");

150 
íåy
->
«me
 = 
	`make_sh¨ed_°rög
(
°r
);

151 
íåy
->
Àngth
 = 
	`°æí
(
°r
);

152 
íåy
->
moves
 = 0;

153 
íåy
->
hóπ_bóts
 = 0;

154 
íåy
->
îr‹s
 = 0;

155 
íåy
->
obje˘s
 = 0;

156 
íåy
->
√xt
 = 
NULL
;

157 
íåy
->
size_¨øy
 = 0;

158 
	`ö£π_°©_íåy
(
íåy
, 
li°
);

159  
íåy
;

160 
	}
}

168 
assign_°©s
 
	$P2
(
°©group_t
 *, 
°
, 
obje˘_t
 *, 
ob
)

170 
°
->
domaö
 = 
ob
->
°©s
.domain;

171 
°
->
auth‹
 = 
ob
->
°©s
.author;

172 
	}
}

174 
nuŒ_°©s
 
	$P1
(
°©group_t
 *, 
°
)

176 i‡(
°
) {

177 
°
->
domaö
 = 
NULL
;

178 
°
->
auth‹
 = 
NULL
;

180 
	}
}

182 
öô_°©s_f‹_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

184 
	`öô_domaö_f‹_ob
(
ob
);

185 
	`öô_auth‹_f‹_ob
(
ob
);

186 
	}
}

192 
add_moves
 
	$P2
(
°©group_t
 *, 
°
, , 
moves
)

194 i‡(
°
) {

195 i‡(
°
->
domaö
)

196 
°
->
domaö
->
moves
 += moves;

197 i‡(
°
->
auth‹
)

198 
°
->
auth‹
->
moves
 += moves;

200 
	}
}

202 
INLINE
 
add_hóπ_bóts
 
	$P2
(
°©group_t
 *, 
°
, , 
hbs
)

204 i‡(
°
) {

205 i‡(
°
->
domaö
)

206 
°
->
domaö
->
hóπ_bóts
 +
hbs
;

207 i‡(
°
->
auth‹
)

208 
°
->
auth‹
->
hóπ_bóts
 +
hbs
;

210 
	}
}

212 
add_¨øy_size
 
	$P2
(
°©group_t
 *, 
°
, , 
size
)

214 i‡(
°
) {

215 i‡(
°
->
domaö
)

216 
°
->
domaö
->
size_¨øy
 +
size
;

217 i‡(
°
->
auth‹
)

218 
°
->
auth‹
->
size_¨øy
 +
size
;

220 
	}
}

222 
add_îr‹s
 
	$P2
(
°©group_t
 *, 
°
, , 
îr‹s
)

224 i‡(
°
) {

225 i‡(
°
->
domaö
)

226 
°
->
domaö
->
îr‹s
 +=Érrors;

227 i‡(
°
->
auth‹
)

228 
°
->
auth‹
->
îr‹s
 +=Érrors;

230 
	}
}

232 
add_îr‹s_f‹_fûe
 
	$P2
(*, 
fûe
, , 
îr‹s
)

234 
mudlib_°©s_t
 *
íåy
;

235 *
«me
;

237 
«me
 = 
	`domaö_f‹_fûe
(
fûe
);

238 i‡(
«me
 && 
domaös
) {

239 
íåy
 = 
	`föd_°©_íåy
(
«me
, 
domaös
);

240 i‡(
íåy
)

241 
íåy
->
îr‹s
 +=Érrors;

243 
«me
 = 
	`auth‹_f‹_fûe
(
fûe
);

244 i‡(
«me
 && 
auth‹s
) {

245 
íåy
 = 
	`föd_°©_íåy
(
«me
, 
auth‹s
);

246 i‡(
íåy
)

247 
íåy
->
îr‹s
 +=Érrors;

249 
	}
}

251 
add_obje˘s
 
	$P2
(
°©group_t
 *, 
°
, , 
obje˘s
)

253 i‡(
°
) {

254 i‡(
°
->
domaö
)

255 
°
->
domaö
->
obje˘s
 += objects;

256 i‡(
°
->
auth‹
)

257 
°
->
auth‹
->
obje˘s
 += objects;

259 
	}
}

268 
	$mudlib_°©s_deˇy
()

270 
mudlib_°©s_t
 *
dl
;

271 
√xt_time
;

274 i‡(
√xt_time
 > 
cuºít_time
)

276 
√xt_time
 = 
cuºít_time
 + 60 * 60;

277 
dl
 = 
domaös
; dl; d»dl->
√xt
) {

278 
dl
->
moves
 = dl->moves * 99 / 100;

279 
dl
->
hóπ_bóts
 = dl->heart_beats * 9 / 10;

281 
dl
 = 
auth‹s
; dl; d»dl->
√xt
) {

282 
dl
->
moves
 = dl->moves * 99 / 100;

283 
dl
->
hóπ_bóts
 = dl->heart_beats * 9 / 10;

285 
	}
}

287 #ifde‡
DEBUGMALLOC_EXTENSIONS


288 
	$m¨k_mudlib_°©s
() {

289 
mudlib_°©s_t
 *
dl
;

291 
dl
 = 
domaös
; dl; d»dl->
√xt
) {

292 
	`DO_MARK
(
dl
, 
TAG_MUDLIB_STATS
);

293 
	`EXTRA_REF
(
	`BLOCK
(
dl
->
«me
))++;

295 
dl
 = 
auth‹s
; dl; d»dl->
√xt
) {

296 
	`DO_MARK
(
dl
, 
TAG_MUDLIB_STATS
);

297 
	`EXTRA_REF
(
	`BLOCK
(
dl
->
«me
))++;

299 
	}
}

306 
öô_auth‹_f‹_ob
 
	$P1
(
obje˘_t
 *, 
ob
)

308 
svÆue_t
 *
ªt
;

310 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
ob
->
«me
));

311 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_AUTHOR_FILE
, 1);

312 i‡(
ªt
 =(
svÆue_t
 *)-1) {

313 
ob
->
°©s
.
auth‹
 = 
ma°î_auth‹
;

314 } i‡(!
ªt
 ||Ñë->
ty≥
 !
T_STRING
) {

315 
ob
->
°©s
.
auth‹
 = 
NULL
;

317 
ob
->
°©s
.
auth‹
 = 
	`add_°©_íåy
(
ªt
->
u
.
°rög
, &
auth‹s
);

319 
	}
}

321 
£t_auth‹
 
	$P1
(*, 
«me
)

323 
obje˘_t
 *
ob
;

325 i‡(!
cuºít_obje˘
)

327 
ob
 = 
cuºít_obje˘
;

328 i‡(
ma°î_ob
 =(
obje˘_t
 *)-1) {

329 
ob
->
°©s
.
auth‹
 = 
NULL
;

332 i‡(
ob
->
°©s
.
auth‹
) {

333 
ob
->
°©s
.
auth‹
->
obje˘s
--;

335 
ob
->
°©s
.
auth‹
 = 
	`add_°©_íåy
(
«me
, &
auth‹s
);

336 i‡(
ob
->
°©s
.
auth‹
) {

337 
ob
->
°©s
.
auth‹
->
obje˘s
++;

339 
	}
}

341 
mudlib_°©s_t
 *
£t_ma°î_auth‹
 
	$P1
(*, 
°r
)

343 
mudlib_°©s_t
 *
auth‹
;

345 
auth‹
 = 
	`add_°©_íåy
(
°r
, &
auth‹s
);

346 i‡(
auth‹
)

347 
ma°î_auth‹
 = 
auth‹
;

348  
auth‹
;

349 
	}
}

351 *
auth‹_f‹_fûe
 
	$P1
(*, 
fûe
)

353 
svÆue_t
 *
ªt
;

354 
buff
[50];

356 
	`c›y_™d_push_°rög
(
fûe
);

357 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_AUTHOR_FILE
, 1);

358 i‡(
ªt
 =0 ||Ñë =(
svÆue_t
*)-1 ||Ñë->
ty≥
 !
T_STRING
)

360 
	`°r˝y
(
buff
, 
ªt
->
u
.
°rög
);

361  
buff
;

362 
	}
}

369 
öô_domaö_f‹_ob
 
	$P1
(
obje˘_t
 *, 
ob
)

371 
svÆue_t
 *
ªt
;

372 *
domaö_«me
;

374 i‡(!
cuºít_obje˘


375 #ifde‡
PACKAGE_UIDS


376 || !
cuºít_obje˘
->
uid


384 
ob
->
°©s
.
domaö
 = 
	`add_°©_íåy
("NONAME", &
domaös
);

390 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
ob
->
«me
));

392 i‡(
ma°î_ob
)

393 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_DOMAIN_FILE
, 1);

395 
ªt
 = 
	`≠∂y
(
≠∂õs_èbÀ
[
APPLY_DOMAIN_FILE
], 
ob
, 1, 
ORIGIN_DRIVER
);

397 i‡(
	`IS_ZERO
(
ªt
)) {

398 
ob
->
°©s
.
domaö
 = 
cuºít_obje˘
->stats.domain;

401 i‡(
ªt
->
ty≥
 !
T_STRING
)

402 
	`îr‹
("'domain_file' inÅhe master object mustÑeturná string!\n");

403 
domaö_«me
 = 
ªt
->
u
.
°rög
;

404 i‡(
	`°rcmp
(
cuºít_obje˘
->
°©s
.
domaö
->
«me
, 
domaö_«me
) == 0) {

405 
ob
->
°©s
.
domaö
 = 
cuºít_obje˘
->stats.domain;

408 i‡(
	`°rcmp
(
backb⁄e_domaö
->
«me
, 
domaö_«me
) == 0) {

413 
ob
->
°©s
.
domaö
 = 
cuºít_obje˘
->stats.domain;

421 
ob
->
°©s
.
domaö
 = 
	`add_°©_íåy
(
domaö_«me
, &
domaös
);

423 
	}
}

425 
mudlib_°©s_t
 *
£t_backb⁄e_domaö
 
	$P1
(*, 
°r
)

427 
mudlib_°©s_t
 *
dom
;

429 
dom
 = 
	`add_°©_íåy
(
°r
, &
domaös
);

430 i‡(
dom
)

431 
backb⁄e_domaö
 = 
dom
;

432  
dom
;

433 
	}
}

440 *
domaö_f‹_fûe
 
	$P1
(*, 
fûe
)

442 
svÆue_t
 *
ªt
;

443 
buff
[50];

445 
	`sh¨e_™d_push_°rög
(
fûe
);

446 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_DOMAIN_FILE
, 1);

447 i‡(
ªt
 =0 ||Ñë =(
svÆue_t
*)-1 ||Ñë->
ty≥
 !
T_STRING
)

449 
	`°r˝y
(
buff
, 
ªt
->
u
.
°rög
);

450  
buff
;

451 
	}
}

458 
ßve_°©_li°
 
	$P2
(*, 
fûe
, 
mudlib_°©s_t
 *, 
li°
)

460 
FILE
 *
f
;

461 
‚ame_buf
[
MAXPATHLEN
];

462 *
‚ame
 = 
‚ame_buf
;

464 i‡(
fûe
) {

465 i‡(
	`°rchr
(
fûe
, '/')) {

466 i‡(
fûe
[0] == '/')

467 
fûe
++;

468 
f
 = 
	`f›í
(
fûe
, "w");

470 
	`•rötf
(
‚ame
, "%s/%s", 
LOG_DIR
, 
fûe
);

471 i‡(
‚ame
[0] == '/')

472 
‚ame
++;

473 
f
 = 
	`f›í
(
‚ame
, "w");

476 
	`debug_mesßge
("*Warning: callÅo save_stat_list withÇull filename\n");

479 i‡(!
f
) {

480 
	`debug_mesßge
("*Error: unableÅo open stat file %s for writing.\n",

481 
fûe
);

484 
li°
) {

485 
	`Ârötf
(
f
, "%†%d %d\n", 
li°
->
«me
,

486 
li°
->
moves
,Üi°->
hóπ_bóts
);

487 
li°
 =Üi°->
√xt
;

489 
	`f˛o£
(
f
);

490 
	}
}

492 
ª°‹e_°©_li°
 
	$P2
(*, 
fûe
, 
mudlib_°©s_t
 **, 
li°
)

494 
FILE
 *
f
;

495 
‚ame_buf
[
MAXPATHLEN
];

496 *
‚ame
 = 
‚ame_buf
;

497 
mudlib_°©s_t
 *
íåy
;

499 i‡(
fûe
) {

500 i‡(
	`°rchr
(
fûe
, '/')) {

501 i‡(
fûe
[0] == '/')

502 
fûe
++;

503 
f
 = 
	`f›í
(
fûe
, "r");

505 
	`•rötf
(
‚ame
, "%s/%s", 
LOG_DIR
, 
fûe
);

506 i‡(
‚ame
[0] == '/')

507 
‚ame
++;

508 
f
 = 
	`f›í
(
‚ame
, "r");

511 
	`debug_mesßge
("*Warning: callÅo save_stat_list withÇull filename\n");

514 i‡(!
f
) {

515 
	`debug_mesßge
("*Warning: unableÅo open stat file %s forÑeading.\n",

516 
fûe
);

519 
	`fsˇnf
(
f
, "%s", 
‚ame
Ë!
EOF
) {

520 
íåy
 = 
	`add_°©_íåy
(
‚ame
, 
li°
);

521 
	`fsˇnf
(
f
, "%d %d\n", &
íåy
->
moves
, &íåy->
hóπ_bóts
);

523 
	`f˛o£
(
f
);

524 
	}
}

527 
	$ßve_°©_fûes
()

529 
	`ßve_°©_li°
(
DOMAIN_STATS_FILE_NAME
, 
domaös
);

530 
	`ßve_°©_li°
(
AUTHOR_STATS_FILE_NAME
, 
auth‹s
);

531 
	}
}

533 
	$ª°‹e_°©_fûes
()

535 
	`ª°‹e_°©_li°
(
DOMAIN_STATS_FILE_NAME
, &
domaös
);

536 
	`ª°‹e_°©_li°
(
AUTHOR_STATS_FILE_NAME
, &
auth‹s
);

537 
	}
}

545 
m≠pög_t
 *

546 
gë_öfo
 
	$P1
(
mudlib_°©s_t
 *, 
dl
)

548 
m≠pög_t
 *
ªt
;

550 
ªt
 = 
	`Æloˇã_m≠pög
(8);

551 
	`add_m≠pög_∑ú
(
ªt
, "moves", 
dl
->
moves
);

552 
	`add_m≠pög_∑ú
(
ªt
, "îr‹s", 
dl
->
îr‹s
);

553 
	`add_m≠pög_∑ú
(
ªt
, "hóπ_bóts", 
dl
->
hóπ_bóts
);

554 
	`add_m≠pög_∑ú
(
ªt
, "¨øy_size", 
dl
->
size_¨øy
);

555 
	`add_m≠pög_∑ú
(
ªt
, "obje˘s", 
dl
->
obje˘s
);

556  
ªt
;

557 
	}
}

559 
m≠pög_t
 *

560 
gë_°©s
 
	$P2
(*, 
°r
, 
mudlib_°©s_t
 *, 
li°
)

562 
mudlib_°©s_t
 *
dl
;

563 
m≠pög_t
 *
m
;

564 
svÆue_t
 
lv
, *
s
;

566 i‡(
°r
) {

567 
dl
 = 
li°
; dl; d»dl->
√xt
) {

568 i‡(!
	`°rcmp
(
°r
, 
dl
->
«me
))

571 i‡(
dl
) {

572 
m≠pög_t
 *
tmp
;

574 
tmp
 = 
	`gë_öfo
(
dl
);

575 
tmp
->
ªf
--;

576  
tmp
;

581 
m
 = 
	`Æloˇã_m≠pög
(8);

582 
dl
 = 
li°
; dl; d»dl->
√xt
) {

583 
lv
.
ty≥
 = 
T_STRING
;

584 
lv
.
subty≥
 = 
STRING_SHARED
;

585 
lv
.
u
.
°rög
 = 
dl
->
«me
;

586 
s
 = 
	`föd_f‹_ö£π
(
m
, &
lv
, 1);

587 
s
->
ty≥
 = 
T_MAPPING
;

588 
s
->
subty≥
 = 0;

589 
s
->
u
.
m≠
 = 
	`gë_öfo
(
dl
);

591 
m
->
ªf
--;

592  
m
;

593 
	}
}

595 
m≠pög_t
 *

596 
gë_domaö_°©s
 
	$P1
(*, 
°r
)

598  
	`gë_°©s
(
°r
, 
domaös
);

599 
	}
}

601 
m≠pög_t
 *

602 
gë_auth‹_°©s
 
	$P1
(*, 
°r
)

604  
	`gë_°©s
(
°r
, 
auth‹s
);

605 
	}
}

	@packages/mudlib_stats.h

10 #i‡!
deföed
(
MUDLIB_STATS_H
Ë&& deföed(
PACKAGE_MUDLIB_STATS
)

11 
	#MUDLIB_STATS_H


	)

13 
	s_m°©s
 {

15 *
	m«me
;

16 
	mÀngth
;

18 
_m°©s
 *
	m√xt
;

20 
	mmoves
;

21 
	mhóπ_bóts
;

22 
	msize_¨øy
;

23 
	mîr‹s
;

24 
	mobje˘s
;

25 } 
	tmudlib_°©s_t
;

28 
	s_°©group
 {

29 
mudlib_°©s_t
 *
	mdomaö
;

30 
mudlib_°©s_t
 *
	mauth‹
;

31 } 
	t°©group_t
;

33 
	#DOMAIN_STATS_FILE_NAME
 "domaö_°©s"

	)

34 
	#AUTHOR_STATS_FILE_NAME
 "auth‹_°©s"

	)

36 
assign_°©s
 
PROT
((
°©group_t
 *, 
obje˘_s
 *));

37 
nuŒ_°©s
 
PROT
((
°©group_t
 *));

38 
öô_°©s_f‹_obje˘
 
PROT
((
obje˘_s
 *));

40 
add_moves
 
PROT
((
°©group_t
 *, ));

41 
INLINE
 
add_hóπ_bóts
 
PROT
((
°©group_t
 *, ));

42 
add_¨øy_size
 
PROT
((
°©group_t
 *, ));

43 
add_îr‹s
 
PROT
((
°©group_t
 *, ));

44 
add_îr‹s_f‹_fûe
 
PROT
((*, ));

45 
add_obje˘s
 
PROT
((
°©group_t
 *, ));

46 
m≠pög_s
 *
gë_domaö_°©s
 
PROT
((*));

47 
m≠pög_s
 *
gë_auth‹_°©s
 
PROT
((*));

48 
mudlib_°©s_deˇy
 
PROT
(());

49 
ßve_°©_fûes
 
PROT
(());

50 
ª°‹e_°©_fûes
 
PROT
(());

51 
£t_auth‹
 
PROT
((*));

52 
mudlib_°©s_t
 *
£t_ma°î_auth‹
 
PROT
((*));

53 
mudlib_°©s_t
 *
£t_backb⁄e_domaö
 
PROT
((*));

54 
check_vÆid_°©_íåy
 
PROT
((
mudlib_°©s_t
 *));

55 #ifde‡
DEBUGMALLOC_EXTENSIONS


56 
m¨k_mudlib_°©s
 
PROT
(());

	@packages/mudlib_stats_spec.c

1 
	~"•ec.h
"

3 
m≠pög
 
domaö_°©s
(| 
°rög
);

4 
£t_auth‹
(
°rög
);

5 
m≠pög
 
auth‹_°©s
(| 
°rög
);

	@packages/parser.c

22 
	~"../°d.h
"

23 
	~"../Õc_ö˛.h
"

24 
	~"∑r£r.h
"

25 
	~"../md.h
"

26 
	~"../ma°î.h
"

27 
	~"../efun_¥Ÿos.h
"

33 
	#IS_LIVING
 "is_livög"

	)

34 
	#INVENTORY_ACCESSIBLE
 "övít‹y_ac˚ssibÀ"

	)

35 
	#INVENTORY_VISIBLE
 "övít‹y_visibÀ"

	)

37 
	#LIVINGS_ARE_REMOTE
 "livögs_¨e_ªmŸe"

	)

39 
	#MAX_WORDS_PER_LINE
 256

	)

40 
	#MAX_WORD_LENGTH
 1024

	)

41 
	#MAX_MATCHES
 10

	)

43 *
∂uølize
 
PROT
((*));

45 
	#MS_HAS_LITERALS
 1

	)

46 
	#MS_HAS_SPECIALS
 2

	)

47 
	#MS_HAS_USERS
 4

	)

48 
	gma°î_°©e
 = 0;

50 
∑r£_öfo_t
 *
	gpi
 = 0;

51 
hash_íåy_t
 *
	ghash_èbÀ
[
HASH_SIZE
];

52 
•ecül_w‹d_t
 *
	g•ecül_èbÀ
[
SPECIAL_HASH_SIZE
];

53 
vîb_t
 *
	gvîbs
[
VERB_HASH_SIZE
];

54 
	gobje˘s_lﬂded
 = 0;

55 
	gnum_obje˘s
, 
	gnum_≥›À
, 
	gme_obje˘
;

56 
obje˘_s
 *
	glﬂded_obje˘s
[
MAX_NUM_OBJECTS
];

57 
	gobje˘_Êags
[
MAX_NUM_OBJECTS
];

58 
bôvec_t
 
	gmy_obje˘s
;

59 *
	gmy_°rög
 = 0;

60 
	gnum_lôîÆs
 = 0;

61 **
	glôîÆs
;

62 
w‹d_t
 
	gw‹ds
[
MAX_WORDS_PER_LINE
];

63 
	gnum_w‹ds
 = 0;

64 
vîb_node_t
 *
	g∑r£_vn
;

65 
vîb_t
 *
	g∑r£_vîb_íåy
;

66 
obje˘_t
 *
	g∑r£_ª°ri˘ed
;

67 
obje˘_t
 *
	g∑r£_u£r
;

68 
¨øy_t
 *
	gma°î_u£r_li°
 = 0;

69 
bôvec_t
 
	gcur_livögs
;

70 
bôvec_t
 
	gcur_ac˚ssibÀ
;

71 
	gbe°_m©ch
;

72 
	gbe°_îr‹_m©ch
;

73 
	gbe°_num_îr‹s
;

74 
∑r£_ªsu…_t
 *
	gbe°_ªsu…
 = 0;

75 
m©ch_t
 
	gm©ches
[
MAX_MATCHES
];

76 
	gfound_Àvñ
 = 0;

77 
m≠pög_t
 *
	g∑r£_nicks
 = 0;

78 
¨øy_t
 *
	g∑r£_ív
 = 0;

80 
	gdúe˘_obje˘
, 
	gödúe˘_obje˘
;

82 
∑r£r_îr‹_t
 
	gcuºít_îr‹_öfo
;

83 
∑r£r_îr‹_t
 
	gbe°_îr‹_öfo
;

84 
∑r£r_îr‹_t
 
	g∑øŒñ_îr‹_öfo
;

85 
∑r£r_îr‹_t
 
	g£c⁄d_∑øŒñ_îr‹_öfo
;

87 
ßved_îr‹_t
 *
	g∑øŒñ_îr‹s
 = 0;

89 #i‡
deföed
(
DEBUG
Ë|| deföed(
PARSE_DEBUG
)

90 
	gdebug_∑r£_dïth
 = 0;

91 
	gdebug_∑r£_vîbo£
 = 0;

93 
	#DEBUG_PP
(
x
Ëi‡(
debug_∑r£_dïth
 && 
debug_∑r£_vîbo£
Ë
debug_∑r£
 
	)
x

94 
	#DEBUG_P
(
x
Ëi‡(
debug_∑r£_dïth
Ë
debug_∑r£
 
	)
x

95 
	#DEBUG_INC
 i‡(
debug_∑r£_dïth
Ëdebug_∑r£_dïth++

	)

96 
	#DEBUG_DEC
 i‡(
debug_∑r£_dïth
Ëdebug_∑r£_dïth--

	)

98 
	#DEBUG_PP
(
x
)

	)

99 
	#DEBUG_P
(
x
)

	)

100 
	#DEBUG_INC


	)

101 
	#DEBUG_DEC


	)

104 
∑r£_ruÀ
 
PROT
((
∑r£_°©e_t
 *));

105 
˛ór_∑øŒñ_îr‹s
 
PROT
((
ßved_îr‹_t
 **));

106 
svÆue_t
 *
gë_the_îr‹
 
PROT
((
∑r£r_îr‹_t
 *, ));

108 
	#isign‹e
(
x
Ë(!
	`ui•röt
(xË|| x ='\'')

	)

109 
	#iskìp
(
x
Ë(
	`uiß um
(xË|| x ='*')

	)

111 
	#SHARED_STRING
(
x
Ë((x)->
subty≥
 =
STRING_SHARED
 ? (x)->
u
.
°rög
 : 
	`föd°rög
((x)->u.°rög))

	)

113 
	#NEED_REFRESH
(
ob
Ë(ob->
pöfo
 && ((ob->pöfo->
Êags
 & (
PI_SETUP
|
PI_REFRESH
)Ë!PI_SETUP))

	)

121 #ifde‡
DEBUGMALLOC_EXTENSIONS


122 
m¨k_îr‹
 
	$P1
(
∑r£r_îr‹_t
 *, 
≥
) {

123 i‡(
≥
->
îr‹_ty≥
 =
ERR_ALLOCATED
) {

124 
	`MSTR_EXTRA_REF
(
≥
->
îr
.
°r
)++;

126 
	}
}

128 
	$∑r£r_m¨k_vîbs
() {

129 
i
, 
j
;

131 i‡(
be°_ªsu…
) {

132 #ifde‡
DEBUGMALLOC_EXTENSIONS


133 i‡(
be°_ªsu…
->
ob
)

134 
be°_ªsu…
->
ob
->
exåa_ªf
++;

136 i‡(
be°_ªsu…
->
∑øŒñ
)

139 
i
 = 0; i < 4; i++) {

140 i‡(
be°_ªsu…
->
ªs
[
i
].
func
)

141 
	`MSTR_EXTRA_REF
(
be°_ªsu…
->
ªs
[
i
].
func
)++;

142 i‡(
be°_ªsu…
->
ªs
[
i
].
¨gs
) {

143 
j
 = 0; j < 
be°_ªsu…
->
ªs
[
i
].
num
; j++)

144 
	`m¨k_svÆue
(((
svÆue_t
 *)
be°_ªsu…
->
ªs
[
i
].
¨gs
Ë+ 
j
);

151 
	`m¨k_îr‹
(&
cuºít_îr‹_öfo
);

152 
	`m¨k_îr‹
(&
be°_îr‹_öfo
);

153 
	`m¨k_îr‹
(&
∑øŒñ_îr‹_öfo
);

154 
	`m¨k_îr‹
(&
£c⁄d_∑øŒñ_îr‹_öfo
);

156 
i
 = 0; i < 
VERB_HASH_SIZE
; i++) {

157 
vîb_t
 *
vîb_íåy
 = 
vîbs
[
i
];

159 
vîb_íåy
) {

160 
	`EXTRA_REF
(
	`BLOCK
(
vîb_íåy
->
ªÆ_«me
))++;

161 
	`EXTRA_REF
(
	`BLOCK
(
vîb_íåy
->
m©ch_«me
))++;

162 
vîb_íåy
 = vîb_íåy->
√xt
;

166 
i
 = 0; i < 
num_lôîÆs
; i++) {

167 
	`EXTRA_REF
(
	`BLOCK
(
lôîÆs
[
i
]))++;

170 
i
 = 0; i < 
SPECIAL_HASH_SIZE
; i++) {

171 
•ecül_w‹d_t
 *
swp
 = 
•ecül_èbÀ
[
i
];

173 
swp
) {

174 
	`EXTRA_REF
(
	`BLOCK
(
swp
->
wrd
))++;

175 
swp
 = swp->
√xt
;

178 i‡(
my_°rög
)

179 
	`EXTRA_REF
(
	`BLOCK
(
my_°rög
))++;

180 #ifde‡
DEBUGMALLOC_EXTENSIONS


181 i‡(
ma°î_u£r_li°
)

182 
ma°î_u£r_li°
->
exåa_ªf
++;

184 
	}
}

186 
∑r£r_m¨k
 
	$P1
(
∑r£_öfo_t
 *, 
pöfo
) {

187 
i
;

189 i‡(!(
pöfo
->
Êags
 & 
PI_SETUP
))

192 
i
 = 0; i < 
pöfo
->
num_ids
; i++) {

193 
	`EXTRA_REF
(
	`BLOCK
(
pöfo
->
ids
[
i
]))++;

195 
i
 = 0; i < 
pöfo
->
num_adjs
; i++) {

196 
	`EXTRA_REF
(
	`BLOCK
(
pöfo
->
adjs
[
i
]))++;

198 
i
 = 0; i < 
pöfo
->
num_∂uøls
; i++) {

199 
	`EXTRA_REF
(
	`BLOCK
(
pöfo
->
∂uøls
[
i
]))++;

201 
	}
}

204 #i‡
deföed
(
DEBUG
Ë|| deföed(
PARSE_DEBUG
)

206 
debug_∑r£
 
	$P1V
(*, 
fmt
) {

207 
va_li°
 
¨gs
;

208 
buf
[2048];

209 *
p
 = 
buf
;

210 
n
 = 
debug_∑r£_dïth
 - 1;

211 
	`V_DCL
(*
fmt
);

213 
n
--) {

214 *
p
++ = ' ';

215 *
p
++ = ' ';

218 
	`V_START
(
¨gs
, 
fmt
);

219 
	`V_VAR
(*, 
fmt
, 
¨gs
);

220 
	`v•rötf
(
p
, 
fmt
, 
¨gs
);

221 
	`va_íd
(
¨gs
);

223 
	`ãŒ_obje˘
(
comm™d_givî
, 
buf
, 
	`°æí
(buf));

224 
	`ãŒ_obje˘
(
comm™d_givî
, "\n", 1);

225 
	}
}

228 
INLINE_STATIC
 
bôvec_c›y
 
	$P2
(
bôvec_t
 *, 
b1
, bôvec_à*, 
b2
) {

229 
i
, 
n
 = 
b2
->
œ°
;

231 
b1
->
œ°
 = 
n
;

232 
i
 = 0; i < 
n
; i++)

233 
b1
->
b
[
i
] = 
b2
->b[i];

234 
	}
}

236 
INLINE_STATIC
 
bôvec_zîo
 
	$P1
(
bôvec_t
 *, 
bv
) {

237 
bv
->
œ°
 = 0;

238 
	}
}

240 
INLINE_STATIC
 
bôvec_£t
 
	$P2
(
bôvec_t
 *, 
bv
, , 
ñem
) {

241 
which
 = 
	`BV_WHICH
(
ñem
);

243 i‡(
which
 >
bv
->
œ°
) {

244 
i
;

246 
i
 = 
bv
->
œ°
; i < 
which
; i++)

247 
bv
->
b
[
i
] = 0;

248 
bv
->
b
[
which
] = 
	`BV_BIT
(
ñem
);

249 
bv
->
œ°
 = 
which
 + 1;

251 
bv
->
b
[
which
] |
	`BV_BIT
(
ñem
);

253 
	}
}

255 
INLINE_STATIC
 
öãr£˘
 
	$P2
(
bôvec_t
 *, 
bv1
, bôvec_à*, 
bv2
) {

256 
i
, 
found
 = 0;

257 
n
 = (
bv1
->
œ°
 < 
bv2
->last ? bv1->last : bv2->last);

259 
bv1
->
œ°
 = 
n
;

260 
i
 = 0; i < 
n
; i++)

261 i‡(
bv1
->
b
[
i
] &
bv2
->b[i]Ë
found
 = 1;

263  
found
;

264 
	}
}

266 
bôvec_cou¡
 
	$P1
(
bôvec_t
 *, 
bv
) {

267 
cou¡s
[16] = {

274 
ªt
 = 0;

275 
i
, 
j
;

277 
i
 = 0; i < 
bv
->
œ°
; i++) {

278 
k
 = 
bv
->
b
[
i
];

279 i‡(
k
) {

280 
j
 = 0; j < 8; j++) {

281 
ªt
 +
cou¡s
[
k
 & 15];

282 
k
 >>= 4;

286  
ªt
;

287 
	}
}

289 
Æl_obje˘s
 
	$P2
(
bôvec_t
 *, 
bv
, , 
ªmŸe_Êag
) {

290 
i
;

291 
num
 = (
ªmŸe_Êag
 ? 
num_obje˘s
 :Çum_obje˘†- 
num_≥›À
);

292 
œ°
 = 
	`BV_WHICH
(
num
);

294 
i
 = 
œ°
;

295 
i
--)

296 
bv
->
b
[
i
] = ~0;

297 i‡(
num
 < 
MAX_NUM_OBJECTS
) {

298 
bv
->
b
[
œ°
] = 
	`BV_BIT
(
num
) - 1;

299 
bv
->
œ°
 =Üast + 1;

301 
bv
->
œ°
 =Üast;

302 
	}
}

314 
INLINE_STATIC
 
m©ch_t
 *
add_m©ch
 
	$P4
(
∑r£_°©e_t
 *, 
°©e
, , 
tokí
,

315 , 
°¨t
, , 
íd
) {

316 
m©ch_t
 *
ªt
;

318 
	`DEBUG_PP
(("Addög m©ch:Åok = %ò°¨à%òíd = %i", 
tokí
, 
°¨t
, 
íd
));

319 
ªt
 = &
m©ches
[
°©e
->
num_m©ches
++];

320 
ªt
->
fú°
 = 
°¨t
;

321 
ªt
->
œ°
 = 
íd
;

322 
ªt
->
tokí
 =Åoken;

323 i‡(
tokí
 =
ERROR_TOKEN
)

324 
°©e
->
num_îr‹s
++;

326 
	`DEBUG_PP
(("Sèã is: %x,Çum_îr‹s: %i\n", 
°©e
, sèã->
num_îr‹s
));

327  
ªt
;

328 
	}
}

330 
∑r£_c›y_¨øy
 
	$P2
(
¨øy_t
 *, 
¨r
, ***, 
ßºp
) {

331 **
èbÀ
;

332 
j
;

333 
n
 = 0;

335 i‡(!
¨r
->
size
) {

336 *
ßºp
 = 0;

340 
èbÀ
 = *
ßºp
 = 
	`CALLOCATE
(
¨r
->
size
, *,

341 
TAG_PARSER
, "parse_copy_array");

342 
j
 = 0; j < 
¨r
->
size
; j++) {

343 i‡(
¨r
->
ôem
[
j
].
ty≥
 =
T_STRING
) {

344 
	`DEBUG_PP
(("GŸ: %s", 
¨r
->
ôem
[
j
].
u
.
°rög
));

345 i‡(
¨r
->
ôem
[
j
].
subty≥
 =
STRING_SHARED
) {

346 
èbÀ
[
n
++] = 
	`ªf_°rög
(
¨r
->
ôem
[
j
].
u
.
°rög
);

348 
èbÀ
[
n
++] = 
	`make_sh¨ed_°rög
(
¨r
->
ôem
[
j
].
u
.
°rög
);

352 i‡(
n
 !
¨r
->
size
)

353 *
ßºp
 = 
	`RESIZE
(
èbÀ
, 
n
, *, 
TAG_PARSER
, "parse_copy_array");

354  
n
;

355 
	}
}

357 
add_•ecül_w‹d
 
	$P3
(*, 
wrd
, , 
köd
, , 
¨g
) {

358 *
p
 = 
	`make_sh¨ed_°rög
(
wrd
);

359 
h
 = 
	`DO_HASH
(
p
, 
SPECIAL_HASH_SIZE
);

360 
•ecül_w‹d_t
 *
swp
 = 
	`ALLOCATE
(•ecül_w‹d_t, 
TAG_PARSER
, "add_special_word");

362 
swp
->
wrd
 = 
p
;

363 
swp
->
köd
 = kind;

364 
swp
->
¨g
 =árg;

365 
swp
->
√xt
 = 
•ecül_èbÀ
[
h
];

366 
•ecül_èbÀ
[
h
] = 
swp
;

367 
	}
}

369 
check_•ecül_w‹d
 
	$P2
(*, 
wrd
, *, 
¨g
) {

370 
h
 = 
	`DO_HASH
(
wrd
, 
SPECIAL_HASH_SIZE
);

371 
•ecül_w‹d_t
 *
swp
 = 
•ecül_èbÀ
[
h
];

373 
swp
) {

374 i‡(
swp
->
wrd
 == wrd) {

375 *
¨g
 = 
swp
->arg;

376  
swp
->
köd
;

378 
swp
 = swp->
√xt
;

381 i‡(
	`isdigô
(*
wrd
)) {

382 *
p
;

384 *
¨g
 = ()
	`°πﬁ
(
wrd
, &
p
, 10);

385 i‡(
p
 && *p) {

386 *
ídög
 = "th";

388 i‡(
p
 - 
wrd
 < 2 || *(p - 2) != '1') {

389 *(
p
 - 1)) {

390 '1': 
ídög
 = "st"; ;

391 '2': 
ídög
 = "nd"; ;

392 '3': 
ídög
 = "rd"; ;

396 i‡(!
	`°rcmp
(
p
, 
ídög
))

397  
SW_ORDINAL
;

401  
SW_NONE
;

402 
	}
}

404 
öãºog©e_ma°î
 
PROT
(()) {

405 
svÆue_t
 *
	gªt
;

407 i‡((
	gma°î_°©e
 & 
	gMS_HAS_USERS
) == 0) {

408 
DEBUG_PP
(("[master::parse_command_users]"));

409 i‡(
	gma°î_u£r_li°
) {

410 
‰ì_¨øy
(
ma°î_u£r_li°
);

411 
	gma°î_u£r_li°
 = 0;

414 
DEBUG_PP
(("[%s]", 
≠∂õs_èbÀ
[
APPLY_USERS
]));

415 
	gªt
 = 
≠∂y_ma°î_ob
(
APPLY_USERS
, 0);

416 i‡(
	gªt
 &&Ñë->
	gty≥
 =
T_ARRAY
) {

417 
ma°î_u£r_li°
 = 
ªt
->
u
.
¨r
;

418 
	gªt
->
	gu
.
	g¨r
->
	gªf
++;

420 
	gma°î_u£r_li°
 = &
the_nuŒ_¨øy
;

422 
	gma°î_°©e
 |
MS_HAS_USERS
;

424 i‡((
	gma°î_°©e
 & 
	gMS_HAS_LITERALS
) == 0) {

425 i‡(
lôîÆs
) {

426 
i
;

428 
	gi
 = 0; i < 
	gnum_lôîÆs
; i++)

429 
‰ì_°rög
(
lôîÆs
[
i
]);

430 
FREE
(
lôîÆs
);

431 
	gnum_lôîÆs
 = 0;

432 
	glôîÆs
 = 0;

435 
DEBUG_PP
(("[%s]", 
≠∂õs_èbÀ
[
APPLY_LITERALS
]));

436 
	gªt
 = 
≠∂y_ma°î_ob
(
APPLY_LITERALS
, 0);

438 i‡(
	gªt
 &&Ñë->
	gty≥
 =
T_ARRAY
)

439 
num_lôîÆs
 = 
∑r£_c›y_¨øy
(
ªt
->
u
.
¨r
, &
lôîÆs
);

441 
	gnum_lôîÆs
 = 0;

442 
	gma°î_°©e
 |
MS_HAS_LITERALS
;

444 i‡((
	gma°î_°©e
 & 
	gMS_HAS_SPECIALS
) == 0) {

445 
add_•ecül_w‹d
("the", 
SW_ARTICLE
, 0);

447 
add_•ecül_w‹d
("me", 
SW_SELF
, 0);

448 
add_•ecül_w‹d
("my£lf", 
SW_SELF
, 0);

450 
add_•ecül_w‹d
("Æl", 
SW_ALL
, 0);

451 
add_•ecül_w‹d
("of", 
SW_OF
, 0);

453 
add_•ecül_w‹d
("™d", 
SW_AND
, 0);

455 
add_•ecül_w‹d
("a", 
SW_ORDINAL
, 1);

456 
add_•ecül_w‹d
("™", 
SW_ORDINAL
, 1);

457 
add_•ecül_w‹d
("™y", 
SW_ORDINAL
, 1);

459 
add_•ecül_w‹d
("fú°", 
SW_ORDINAL
, 1);

460 
add_•ecül_w‹d
("£c⁄d", 
SW_ORDINAL
, 2);

461 
add_•ecül_w‹d
("Ÿhî", 
SW_ORDINAL
, 2);

462 
add_•ecül_w‹d
("thúd", 
SW_ORDINAL
, 3);

463 
add_•ecül_w‹d
("fouπh", 
SW_ORDINAL
, 4);

464 
add_•ecül_w‹d
("fi·h", 
SW_ORDINAL
, 5);

465 
add_•ecül_w‹d
("sixth", 
SW_ORDINAL
, 6);

466 
add_•ecül_w‹d
("£víth", 
SW_ORDINAL
, 7);

467 
add_•ecül_w‹d
("eighth", 
SW_ORDINAL
, 8);

468 
add_•ecül_w‹d
("nöth", 
SW_ORDINAL
, 9);

470 
	gma°î_°©e
 |
MS_HAS_SPECIALS
;

474 
f_∑r£_öô
 
PROT
(()) {

475 
∑r£_öfo_t
 *
	gpi
;

477 i‡(
	gcuºít_obje˘
->
	gpöfo
)

480 
	gpi
 = 
cuºít_obje˘
->
pöfo
 = 
ALLOCATE
(
∑r£_öfo_t
, 
TAG_PARSER
, "parse_init");

481 
	gpi
->
	gob
 = 
cuºít_obje˘
;

482 
	gpi
->
	gÊags
 = 0;

485 
ªmove_ids
 
	$P1
(
∑r£_öfo_t
 *, 
pöfo
) {

486 
i
;

488 i‡(
pöfo
->
Êags
 & 
PI_SETUP
) {

489 i‡(
pöfo
->
num_ids
) {

490 
i
 = 0; i < 
pöfo
->
num_ids
; i++)

491 
	`‰ì_°rög
(
pöfo
->
ids
[
i
]);

492 
	`FREE
(
pöfo
->
ids
);

494 i‡(
pöfo
->
num_∂uøls
) {

495 
i
 = 0; i < 
pöfo
->
num_∂uøls
; i++)

496 
	`‰ì_°rög
(
pöfo
->
∂uøls
[
i
]);

497 
	`FREE
(
pöfo
->
∂uøls
);

499 i‡(
pöfo
->
num_adjs
) {

500 
i
 = 0; i < 
pöfo
->
num_adjs
; i++)

501 
	`‰ì_°rög
(
pöfo
->
adjs
[
i
]);

502 
	`FREE
(
pöfo
->
adjs
);

504 
pöfo
->
num_ids
 =Ööfo->
num_∂uøls
 =Ööfo->
num_adjs
 = 0;

505 
pöfo
->
ids
 =Ööfo->
∂uøls
 =Ööfo->
adjs
 = 0;

507 
	}
}

513 
f_∑r£_ª‰esh
 
PROT
(()) {

514 
∑r£_öfo_t
 *
	gpi
;

520 i‡(
	gcuºít_obje˘
 =
ma°î_ob
) {

521 
ma°î_°©e
 &~
MS_HAS_USERS
;

522 i‡(!
	gma°î_ob
->
	gpöfo
)

526 i‡(!(
	gpi
 = 
cuºít_obje˘
->
pöfo
))

527 
îr‹
("/%s isÇot known byÅheÖarser. CallÖarse_init() first.\n",

528 
cuºít_obje˘
->
«me
);

530 i‡(
	gpi
->
	gÊags
 & 
	gPI_SETUP
) {

531 
	gpi
->
	gÊags
 &
PI_VERB_HANDLER
;

532 
	gpi
->
	gÊags
 |
PI_REFRESH
;

534 
	gpi
->
	gÊags
 &
PI_VERB_HANDLER
;

540 i‡(
	gpi
->
	gÊags
 & 
	gPI_VERB_HANDLER
) {

541 
svÆue_t
 *
	gªt
 = 
≠∂y
(
LIVINGS_ARE_REMOTE
, 
cuºít_obje˘
,

542 0, 
ORIGIN_DRIVER
);

543 i‡(
	gcuºít_obje˘
->
	gÊags
 & 
	gO_DESTRUCTED
)

546 i‡(!
IS_ZERO
(
ªt
))

547 
	gpi
->
	gÊags
 |
PI_REMOTE_LIVINGS
;

552 
∑r£_‰ì
 
	$P1
(
∑r£_öfo_t
 *, 
pöfo
) {

553 
i
;

555 i‡(
pöfo
->
Êags
 & 
PI_VERB_HANDLER
) {

556 
i
 = 0; i < 
VERB_HASH_SIZE
; i++) {

557 
vîb_t
 *
v
 = 
vîbs
[
i
];

558 
v
) {

559 
vîb_node_t
 **
vn
 = &(
v
->
node
), *
ﬁd
;

560 *
vn
) {

561 i‡((*
vn
)->
h™dÀr
 =
pöfo
->
ob
) {

562 
ﬁd
 = *
vn
;

563 *
vn
 = (*vn)->
√xt
;

564 
	`FREE
(
ﬁd
);

565 } 
vn
 = &((*vn)->
√xt
);

567 
v
 = v->
√xt
;

571 
	`ªmove_ids
(
pöfo
);

572 
	`FREE
(
pöfo
);

573 
	}
}

575 
hash_˛ón
 
PROT
(()) {

576 
	gi
;

577 
hash_íåy_t
 **
	gnodï
, *
	g√xt
;

579 
	gi
 = 0; i < 
	gHASH_SIZE
; i++) {

580 
	gnodï
 = &
hash_èbÀ
[
i
]; *nodï && ((*nodï)->
	gÊags
 & 
	gHV_PERM
);

581 
	gnodï
 = &((*
nodï
)->
√xt
))

583 *
	gnodï
) {

584 
	g√xt
 = (*
nodï
)->
√xt
;

585 
‰ì_°rög
((*
nodï
)->
«me
);

586 
FREE
((*
nodï
));

587 *
	gnodï
 = 
√xt
;

592 
‰ì_∑r£_ªsu…
 
	$P1
(
∑r£_ªsu…_t
 *, 
¥
) {

593 
i
, 
j
;

595 i‡(
¥
->
ob
)

596 
	`‰ì_obje˘
(
¥
->
ob
, "free_parse_result");

597 i‡(
¥
->
∑øŒñ
)

598 
	`˛ór_∑øŒñ_îr‹s
(&
¥
->
∑øŒñ
);

600 
i
 = 0; i < 4; i++) {

601 i‡(
¥
->
ªs
[
i
].
func
Ë
	`FREE_MSTR
(pr->res[i].func);

602 i‡(
¥
->
ªs
[
i
].
¨gs
) {

603 
j
 = 0; j < 
¥
->
ªs
[
i
].
num
; j++)

604 
	`‰ì_svÆue
(((
svÆue_t
 *)
¥
->
ªs
[
i
].
¨gs
Ë+ 
j
, "free_parse_result");

605 
	`FREE
(
¥
->
ªs
[
i
].
¨gs
);

608 
	`FREE
(
¥
);

609 
	}
}

611 
˛ór_ªsu…
 
	$P1
(
∑r£_ªsu…_t
 *, 
¥
) {

612 
i
;

614 
¥
->
ob
 = 0;

615 
¥
->
∑øŒñ
 = 0;

617 
i
 = 0; i < 4; i++) {

618 
¥
->
ªs
[
i
].
func
 = 0;

619 
¥
->
ªs
[
i
].
¨gs
 = 0;

621 
	}
}

623 
‰ì_∑r£_globÆs
 
PROT
(()) {

624 
	gi
;

626 i‡(
	g∑r£_nicks
)

627 
‰ì_m≠pög
(
∑r£_nicks
);

628 i‡(
	g∑r£_ív
)

629 
‰ì_¨øy
(
∑r£_ív
);

631 
	g∑r£_nicks
 = 0;

632 
	g∑r£_ív
 = 0;

634 
	gpi
 = 0;

635 
hash_˛ón
();

636 i‡(
	gobje˘s_lﬂded
) {

637 
	gi
 = 0; i < 
	gnum_obje˘s
; i++)

638 
‰ì_obje˘
(
lﬂded_obje˘s
[
i
], "free_parse_globals");

639 
	gobje˘s_lﬂded
 = 0;

643 
tokí_def_t
 
	gtokís
[] = {

644 { "OBJ", 
OBJ_A_TOKEN
, 1 },

645 { "STR", 
STR_TOKEN
, 0 },

646 { "WRD", 
WRD_TOKEN
, 0 },

647 { "LIV", 
LIV_A_TOKEN
, 1 },

648 { "OBS", 
OBS_TOKEN
, 1 },

649 { "LVS", 
LVS_TOKEN
, 1 },

653 
	#STR3CMP
(
x
, 
y
Ë(x[0] =y[0] && x[1] =y[1] && x[2] =y[2])

	)

655 
tokíize
 
	$P2
(**, 
ruÀ
, *, 
weighç
) {

656 *
°¨t
 = *
ruÀ
;

657 
i
, 
n
;

658 
tokí_def_t
 *
td
;

660 *
°¨t
 == ' ') start++;

662 i‡(!*
°¨t
)

665 *
ruÀ
 = 
	`°rchr
(
°¨t
, ' ');

667 i‡(!*
ruÀ
)

668 *
ruÀ
 = 
°¨t
 + 
	`°æí
(start);

670 
n
 = *
ruÀ
 - 
°¨t
;

672 i‡(
n
 =3 || (¿> 4 && 
°¨t
[3] == ':')) {

673 
td
 = 
tokís
;

674 
td
->
«me
) {

675 i‡(
	`STR3CMP
(
td
->
«me
, 
°¨t
)) {

676 
i
 = 
td
->
tokí
;

677 i‡(
n
 != 3) {

678 i‡(!
td
->
mod_ÀgÆ
)

679 
	`îr‹
("IŒegÆÅÿhavêmodifõr†tÿ'%s'\n", 
td
->
«me
);

681 
°¨t
 += 4;

682 
n
 -= 4;

683 
n
--) {

684 *
°¨t
++) {

686 
i
 |
LIV_MODIFIER
;

689 
i
 |
VIS_ONLY_MODIFIER
;

692 
i
 |
PLURAL_MODIFIER
;

695 
i
 |
CHOOSE_MODIFIER
;

698 
	`îr‹
("Unknow¿modifõ∏'%c'\n", 
°¨t
[-1]);

702 
i
) {

705 (*
weighç
) += 2;

709 i‡(
i
 & 
PLURAL_MODIFIER
)

710 (*
weighç
)--;

711 i‡(
i
 & 
LIV_MODIFIER
)

712 (*
weighç
)++;

713 i‡(!(
i
 & 
VIS_ONLY_MODIFIER
))

714 (*
weighç
)++;

716 
STR_TOKEN
:

717 
WRD_TOKEN
:

718 (*
weighç
)++;

720  
i
;

722 
td
++;

726 (*
weighç
)++;

729 
i
 = 0; i < 
num_lôîÆs
; i++) {

730 i‡(
	`°æí
(
lôîÆs
[
i
]Ë=
n
 && (
	`°∫cmp
÷ôîÆs[i], 
°¨t
,Ç) == 0))

731  -(
i
 + 1);

735 
buf
[256];

737 i‡(
n
 > 50) {

738 
	`°∫˝y
(
buf
, 
°¨t
, 50);

739 
	`°r˝y
(
buf
 + 50, "...");

741 
	`°∫˝y
(
buf
, 
°¨t
, 
n
);

742 
buf
[
n
] = 0;

745 
	`îr‹
("Unknow¿tokí '%s'\n", 
buf
);

748 
	}
}

750 
make_ruÀ
 
	$P3
(*, 
ruÀ
, *, 
tokís
, *, 
weighç
) {

751 
idx
 = 0;

752 
has_∂uøl
 = 0;

753 
has_obj
 = 0;

755 *
weighç
 = 1;

756 
idx
 < 
MAX_MATCHES
) {

757 i‡(!(
tokís
[
idx
] = 
	`tokíize
(&
ruÀ
, 
weighç
)))

759 i‡(
tokís
[
idx
] >
OBJ_A_TOKEN
) {

760 i‡(++
has_obj
 == 3)

761 
	`îr‹
("OnlyÅwo objectÅokensállowedÖerÑule.\n");

762 i‡(
tokís
[
idx
] & 
PLURAL_MODIFIER
) {

763 i‡(
has_∂uøl
Ë
	`îr‹
("Only oneÖluralÅokenállowedÖerÑule.\n");

764 
has_∂uøl
 = 1;

767 
idx
++;

769 
	`îr‹
("O∆y %òtokí†≥rmôãdÖîÑuÀ!\n", 
MAX_MATCHES
);

770 
	}
}

772 
‰ì_w‹ds
 
PROT
(()) {

773 
	gi
;

775 
	gi
 = 0; i < 
	gnum_w‹ds
; i++)

776 i‡(
	gw‹ds
[
i
].
	gty≥
 =
WORD_ALLOCATED
)

777 
FREE_MSTR
(
w‹ds
[
i
].
°rög
);

778 
	gnum_w‹ds
 = 0;

781 
öãºog©e_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
) {

782 
svÆue_t
 *
ªt
;

784 i‡(
ob
->
pöfo
->
Êags
 & 
PI_REFRESH
)

785 
	`ªmove_ids
(
ob
->
pöfo
);

788 i‡(
ob
->
pöfo
->
Êags
 & 
PI_SETUP
 && !(ob->pöfo->Êag†& 
PI_REFRESH
))

791 
	`DEBUG_P
(("I¡îog©ög /%s.", 
ob
->
«me
));

793 
	`DEBUG_PP
(("[%s]", 
APPLY_NOUN
));

794 
ªt
 = 
	`≠∂y
(
APPLY_NOUN
, 
ob
, 0, 
ORIGIN_DRIVER
);

795 i‡(
ªt
 &&Ñë->
ty≥
 =
T_ARRAY
)

796 
ob
->
pöfo
->
num_ids
 = 
	`∑r£_c›y_¨øy
(
ªt
->
u
.
¨r
, &ob->pöfo->
ids
);

798 
ob
->
pöfo
->
num_ids
 = 0;

799 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

801 
ob
->
pöfo
->
Êags
 |
PI_SETUP
;

802 
ob
->
pöfo
->
Êags
 &~(
PI_LIVING
 | 
PI_INV_ACCESSIBLE
 | 
PI_INV_VISIBLE
);

803 
ob
->
pöfo
->
num_adjs
 = 0;

804 
ob
->
pöfo
->
num_∂uøls
 = 0;

806 
	`DEBUG_PP
(("[%s]", 
APPLY_PLURAL
));

807 
ªt
 = 
	`≠∂y
(
APPLY_PLURAL
, 
ob
, 0, 
ORIGIN_DRIVER
);

808 i‡(
ªt
 &&Ñë->
ty≥
 =
T_ARRAY
)

809 
ob
->
pöfo
->
num_∂uøls
 = 
	`∑r£_c›y_¨øy
(
ªt
->
u
.
¨r
, &ob->pöfo->
∂uøls
);

811 
ob
->
pöfo
->
num_∂uøls
 = 0;

812 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

814 
	`DEBUG_PP
(("[%s]", 
APPLY_ADJECTIVE
));

815 
ªt
 = 
	`≠∂y
(
APPLY_ADJECTIVE
, 
ob
, 0, 
ORIGIN_DRIVER
);

816 i‡(
ªt
 &&Ñë->
ty≥
 =
T_ARRAY
)

817 
ob
->
pöfo
->
num_adjs
 = 
	`∑r£_c›y_¨øy
(
ªt
->
u
.
¨r
, &ob->pöfo->
adjs
);

819 
ob
->
pöfo
->
num_adjs
 = 0;

820 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

822 
	`DEBUG_PP
(("[%s]", 
IS_LIVING
));

823 
ªt
 = 
	`≠∂y
(
IS_LIVING
, 
ob
, 0, 
ORIGIN_DRIVER
);

824 i‡(!
	`IS_ZERO
(
ªt
)) {

825 
ob
->
pöfo
->
Êags
 |
PI_LIVING
;

826 
	`DEBUG_PP
(("(yes)"));

828 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

830 
	`DEBUG_PP
(("[%s]", 
INVENTORY_ACCESSIBLE
));

831 
ªt
 = 
	`≠∂y
(
INVENTORY_ACCESSIBLE
, 
ob
, 0, 
ORIGIN_DRIVER
);

832 i‡(!
	`IS_ZERO
(
ªt
)) {

833 
ob
->
pöfo
->
Êags
 |
PI_INV_ACCESSIBLE
;

834 
	`DEBUG_PP
(("(yes)"));

836 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

838 
	`DEBUG_PP
(("[%s]", 
INVENTORY_VISIBLE
));

839 
ªt
 = 
	`≠∂y
(
INVENTORY_VISIBLE
, 
ob
, 0, 
ORIGIN_DRIVER
);

840 i‡(!
	`IS_ZERO
(
ªt
)) {

841 
ob
->
pöfo
->
Êags
 |
PI_INV_VISIBLE
;

842 
	`DEBUG_PP
(("(yes)"));

844 
	}
}

846 
obje˘_t
 *
fú°_öv
 
	$P1
(
obje˘_t
 *, 
ob
) {

847 #i‚de‡
NO_ENVIRONMENT


848  
ob
->
c⁄èös
;

850 
svÆue_t
 *
ªt
;

852 
	`push_obje˘
(
ob
);

853 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_PARSE_FIRST_INVENTORY
, 1);

854 i‡(
ªt
 &&Ñë !(
svÆue_t
 *)-1 &&Ñë->
ty≥
 =
T_OBJECT
)

855  
ªt
->
u
.
ob
;

856  (
obje˘_t
 *)
NULL
;

858 
	}
}

860 
obje˘_t
 *
√xt_öv
 
	$P2
(
obje˘_t
 *, 
∑ª¡
, obje˘_à*, 
siblög
) {

861 #i‚de‡
NO_ENVIRONMENT


862  
siblög
->
√xt_öv
;

864 
svÆue_t
 *
ªt
;

866 
	`push_obje˘
(
∑ª¡
);

867 
	`push_obje˘
(
siblög
);

868 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_PARSE_NEXT_INVENTORY
, 2);

869 i‡(
ªt
 &&Ñë !(
svÆue_t
 *)-1 &&Ñë->
ty≥
 =
T_OBJECT
)

870  
ªt
->
u
.
ob
;

871  (
obje˘_t
 *)
NULL
;

873 
	}
}

875 
obje˘_t
 *
su≥r
 
	$P1
(
obje˘_t
 *, 
ob
) {

876 #i‚de‡
NO_ENVIRONMENT


877  
ob
->
su≥r
;

879 
svÆue_t
 *
ªt
;

881 
	`push_obje˘
(
ob
);

882 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_PARSE_ENVIRONMENT
, 1);

883 i‡(
ªt
 &&Ñë !(
svÆue_t
 *)-1 &&Ñë->
ty≥
 =
T_OBJECT
)

884  
ªt
->
u
.
ob
;

885  (
obje˘_t
 *)
NULL
;

887 
	}
}

889 
	#RAO_INREACH
 1

	)

890 
	#RAO_MY
 2

	)

892 
ªc_add_obje˘
 
	$P2
(
obje˘_t
 *, 
ob
, , 
Êags
) {

893 
obje˘_t
 *
o
;

895 i‡(!
ob
) ;

896 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

897 i‡(
ob
->
pöfo
) {

898 i‡(
num_obje˘s
 =
MAX_NUM_OBJECTS
)

900 i‡(
Êags
 & 
RAO_MY
)

901 
	`bôvec_£t
(&
my_obje˘s
, 
num_obje˘s
);

902 i‡(
ob
 =
∑r£_u£r
) {

903 
me_obje˘
 = 
num_obje˘s
;

904 
Êags
 |
RAO_MY
;

906 
obje˘_Êags
[
num_obje˘s
] = 
Êags
 & 
RAO_INREACH
;

907 
lﬂded_obje˘s
[
num_obje˘s
++] = 
ob
;

908 
	`add_ªf
(
ob
, "rec_add_object");

909 i‡(!(
ob
->
pöfo
->
Êags
 & 
PI_INV_VISIBLE
))

911 i‡(!(
ob
->
pöfo
->
Êags
 & 
PI_INV_ACCESSIBLE
))

912 
Êags
 &~
RAO_INREACH
;

914 
o
 = 
	`fú°_öv
(
ob
); o; o = 
	`√xt_öv
(ob, o))

915 
	`ªc_add_obje˘
(
o
, 
Êags
);

916 
	}
}

918 
add_obje˘s_‰om_¨øy
 
	$P2
(
¨øy_t
 *, 
¨r
, , 
Êags
) {

919 
i
, 
f
;

920 
œ°_Êags
 = 0;

921 
œ°_was_me
 = 0;

923 
i
 = 0; i < 
¨r
->
size
; i++) {

924 
obje˘_t
 *
ob
;

926 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_ARRAY
) {

927 
f
 = 
Êags
;

928 i‡(
œ°_Êags
 & 
PI_INV_VISIBLE
) {

929 i‡(!(
œ°_Êags
 & 
PI_INV_ACCESSIBLE
))

930 
f
 &~
RAO_INREACH
;

931 i‡(
œ°_was_me
)

932 
f
 |
RAO_MY
;

933 
	`add_obje˘s_‰om_¨øy
(
¨r
->
ôem
[
i
].
u
.¨r, 
f
);

936 
œ°_Êags
 = 0;

937 
œ°_was_me
 = 0;

938 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_OBJECT
 &&

939 !((
ob
 = 
¨r
->
ôem
[
i
].
u
.ob)->
Êags
 & 
O_DESTRUCTED
)) {

940 i‡(
ob
->
pöfo
) {

941 i‡(
num_obje˘s
 =
MAX_NUM_OBJECTS
)

943 i‡(
Êags
 & 
RAO_MY
)

944 
	`bôvec_£t
(&
my_obje˘s
, 
num_obje˘s
);

945 i‡(
ob
 =
∑r£_u£r
) {

946 
me_obje˘
 = 
num_obje˘s
;

947 
œ°_was_me
 = 1;

949 
obje˘_Êags
[
num_obje˘s
] = 
Êags
 & 
RAO_INREACH
;

950 
lﬂded_obje˘s
[
num_obje˘s
++] = 
ob
;

951 
	`add_ªf
(
ob
, "add_objects_from_array");

952 
œ°_Êags
 = 
ob
->
pöfo
->
Êags
;

956 
	}
}

958 
gë_obje˘s_‰om_¨øy
 
	$P1
(
¨øy_t
 *, 
¨r
) {

959 
i
;

961 
i
 = 0; i < 
¨r
->
size
; i++) {

962 
obje˘_t
 *
ob
;

964 i‡(
¨r
->
ôem
[
i
].
ty≥
 =
T_ARRAY
)

965 
	`gë_obje˘s_‰om_¨øy
(
¨r
->
ôem
[
i
].
u
.arr);

966 i‡(
¨r
->
ôem
[
i
].
ty≥
 !
T_OBJECT
) ;

967 
ob
 = 
¨r
->
ôem
[
i
].
u
.ob;

969 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

970 i‡(
	`NEED_REFRESH
(
ob
)) {

971 i‡(
num_obje˘s
 =
MAX_NUM_OBJECTS
)

973 
lﬂded_obje˘s
[
num_obje˘s
++] = 
ob
;

974 
	`add_ªf
(
ob
, "find_uninited_objects");

977 
	}
}

979 
föd_unöôed_obje˘s
 
	$P1
(
obje˘_t
 *, 
ob
) {

980 
obje˘_t
 *
o
;

982 i‡(!
ob
) ;

983 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

984 i‡(
	`NEED_REFRESH
(
ob
)) {

985 i‡(
num_obje˘s
 =
MAX_NUM_OBJECTS
)

987 
lﬂded_obje˘s
[
num_obje˘s
++] = 
ob
;

988 
	`add_ªf
(
ob
, "find_uninited_objects");

990 
o
 = 
	`fú°_öv
(
ob
); o; o = 
	`√xt_öv
(ob, o))

991 
	`föd_unöôed_obje˘s
(
o
);

992 
	}
}

994 
hash_íåy_t
 *
add_hash_íåy
 
	$P1
(*, 
°r
) {

995 
h
 = 
	`DO_HASH
(
°r
, 
HASH_SIZE
);

996 
hash_íåy_t
 *
he
;

998 
	`DEBUG_PP
(("add_hash_íåy: %s", 
°r
));

999 
he
 = 
hash_èbÀ
[
h
];

1000 
he
) {

1001 i‡(
he
->
«me
 =
°r
)

1002  
he
;

1003 
he
 = he->
√xt
;

1006 
he
 = 
	`ALLOCATE
(
hash_íåy_t
, 
TAG_PARSER
, "add_hash_entry");

1007 
he
->
«me
 = 
	`ªf_°rög
(
°r
);

1008 
	`bôvec_zîo
(&
he
->
pv
.
noun
);

1009 
	`bôvec_zîo
(&
he
->
pv
.
∂uøl
);

1010 
	`bôvec_zîo
(&
he
->
pv
.
adj
);

1011 
he
->
√xt
 = 
hash_èbÀ
[
h
];

1012 
he
->
Êags
 = 0;

1013 
hash_èbÀ
[
h
] = 
he
;

1014  
he
;

1015 
	}
}

1017 
m¨k_hash_íåy
 
	$P1
(*, 
°r
) {

1018 
h
 = 
	`DO_HASH
(
°r
, 
HASH_SIZE
);

1019 
hash_íåy_t
 *
he
;

1021 
	`DEBUG_PP
(("m¨k_hash_íåy: %s", 
°r
));

1022 
he
 = 
hash_èbÀ
[
h
];

1023 
he
) {

1024 i‡(
he
->
«me
 =
°r
) {

1025 
he
->
Êags
 |
HV_NICKNAME
;

1028 
he
 = he->
√xt
;

1031 
he
 = 
	`ALLOCATE
(
hash_íåy_t
, 
TAG_PARSER
, "mark_hash_entry");

1032 
he
->
«me
 = 
	`ªf_°rög
(
°r
);

1033 
	`bôvec_zîo
(&
he
->
pv
.
noun
);

1034 
	`bôvec_zîo
(&
he
->
pv
.
∂uøl
);

1035 
	`bôvec_zîo
(&
he
->
pv
.
adj
);

1036 
he
->
√xt
 = 
hash_èbÀ
[
h
];

1037 
he
->
Êags
 = 
HV_NICKNAME
;

1038 
hash_èbÀ
[
h
] = 
he
;

1039 
	}
}

1041 
add_to_hash_èbÀ
 
	$P2
(
obje˘_t
 *, 
ob
, , 
ödex
) {

1042 
i
;

1043 
∑r£_öfo_t
 *
pi
 = 
ob
->
pöfo
;

1044 
hash_íåy_t
 *
he
;

1046 i‡(!
pi
)

1049 
	`DEBUG_PP
(("add_to_hash_èbÀ: /%s", 
ob
->
«me
));

1050 
i
 = 0; i < 
pi
->
num_ids
; i++) {

1051 
he
 = 
	`add_hash_íåy
(
pi
->
ids
[
i
]);

1052 
he
->
Êags
 |
HV_NOUN
;

1053 
	`bôvec_£t
(&
he
->
pv
.
noun
, 
ödex
);

1055 
i
 = 0; i < 
pi
->
num_∂uøls
; i++) {

1056 
he
 = 
	`add_hash_íåy
(
pi
->
∂uøls
[
i
]);

1057 
he
->
Êags
 |
HV_PLURAL
;

1058 
	`bôvec_£t
(&
he
->
pv
.
∂uøl
, 
ödex
);

1060 
i
 = 0; i < 
pi
->
num_adjs
; i++) {

1061 
he
 = 
	`add_hash_íåy
(
pi
->
adjs
[
i
]);

1062 
he
->
Êags
 |
HV_ADJ
;

1063 
	`bôvec_£t
(&
he
->
pv
.
adj
, 
ödex
);

1066 i‡(
pi
->
Êags
 & 
PI_LIVING
)

1067 
	`bôvec_£t
(&
cur_livögs
, 
ödex
);

1069 i‡(
obje˘_Êags
[
ödex
])

1070 
	`bôvec_£t
(&
cur_ac˚ssibÀ
, 
ödex
);

1071 
	}
}

1073 
	$öô_u£rs
() {

1074 
i
;

1075 
obje˘_t
 *
ob
;

1081 
i
 = 0; i < 
ma°î_u£r_li°
->
size
; i++) {

1082 i‡(
ma°î_u£r_li°
->
ôem
[
i
].
ty≥
 =
T_OBJECT


1083 && (
ob
 = 
ma°î_u£r_li°
->
ôem
[
i
].
u
.ob)->
pöfo


1084 && 
	`NEED_REFRESH
(
ob
)) {

1085 
	`DEBUG_PP
(("addög: /%s", 
ob
->
«me
));

1086 i‡(
num_obje˘s
 =
MAX_NUM_OBJECTS
)

1088 
lﬂded_obje˘s
[
num_obje˘s
++] = 
ob
;

1089 
	`add_ªf
(
ob
, "init_users");

1092 
	}
}

1097 
add_nick«mes
 
	$P1
(
m≠pög_t
 *, 
m≠
) {

1098 
i
;

1100 
i
 = 0; i < 
m≠
->
èbÀ_size
; i++) {

1101 
m≠pög_node_t
 *
mn
;

1103 
mn
 = 
m≠
->
èbÀ
[
i
]; mn; m¿mn->
√xt
) {

1104 i‡(
mn
->
vÆues
[0].
ty≥
 =
T_STRING
) {

1105 
hash_íåy_t
 *
he
 = 
	`add_hash_íåy
(
mn
->
vÆues
[0].
u
.
°rög
);

1106 
he
->
Êags
 |
HV_NICKNAME
;

1110 
	}
}

1112 
lﬂd_obje˘s
 
PROT
(()) {

1113 
	gi
;

1114 
obje˘_t
 *
	gob
, *
	gív
;

1115 
hash_íåy_t
 *
	ghe
;

1117 i‡(!
	gmy_°rög
Ëmy_°rög = 
make_sh¨ed_°rög
("my");

1129 
bôvec_zîo
(&
cur_livögs
);

1130 
bôvec_zîo
(&
cur_ac˚ssibÀ
);

1132 
	gnum_obje˘s
 = 0;

1134 i‡(
	g∑r£_ív
) {

1135 
gë_obje˘s_‰om_¨øy
(
∑r£_ív
);

1137 i‡(!
	g∑r£_u£r
 ||Ö¨£_u£r->
	gÊags
 & 
	gO_DESTRUCTED
)

1138 
îr‹
("NoÅhis_player()!\n");

1140 
föd_unöôed_obje˘s
(
su≥r
(
∑r£_u£r
));

1143 
öãºog©e_ma°î
();

1144 
öô_u£rs
();

1145 
	gobje˘s_lﬂded
 = 1;

1147 
	gi
 = 0; i < 
	gnum_obje˘s
; i++)

1148 
öãºog©e_obje˘
(
lﬂded_obje˘s
[
i
]);

1149 
	gi
 = 0; i < 
	gnum_obje˘s
; i++)

1150 
‰ì_obje˘
(
lﬂded_obje˘s
[
i
], "load_objects");

1152 
	gnum_obje˘s
 = 0;

1153 
	gme_obje˘
 = -1;

1155 
bôvec_zîo
(&
my_obje˘s
);

1156 i‡(
	g∑r£_ív
) {

1157 
add_obje˘s_‰om_¨øy
(
∑r£_ív
, 
RAO_INREACH
);

1159 
ªc_add_obje˘
(
su≥r
(
∑r£_u£r
), 
RAO_INREACH
);

1161 
	ghe
 = 
add_hash_íåy
(
my_°rög
);

1162 
	ghe
->
	gÊags
 |
HV_ADJ
;

1163 
bôvec_c›y
(&
he
->
pv
.
adj
, &
my_obje˘s
);

1164 i‡(
	g∑r£_nicks
)

1165 
add_nick«mes
(
∑r£_nicks
);

1167 
	gnum_≥›À
 = 0;

1168 
	gi
 = 0; i < 
	gma°î_u£r_li°
->
	gsize
; i++) {

1169 i‡(
	gma°î_u£r_li°
->
	gôem
[
i
].
	gty≥
 !
T_OBJECT
) ;

1171 
	gob
 = 
ma°î_u£r_li°
->
ôem
[
i
].
u
.
ob
;

1172 i‡(!(
	gob
->
	gpöfo
))

1174 
	gív
 = 
ob
;

1175 
	gív
) {

1176 i‡(
	gív
 =
su≥r
(
∑r£_u£r
))

1178 
	gív
 = 
su≥r
(
ív
);

1179 i‡(
	gív
 &&Énv->
	gpöfo
 && !”nv->pöfo->
	gÊags
 & 
	gPI_INV_VISIBLE
))

1180 
	gív
 = 0;

1182 i‡(
	gív
) ;

1183 i‡(
	gnum_obje˘s
 + 
	gnum_≥›À
 =
MAX_NUM_OBJECTS
)

1185 
	gobje˘_Êags
[
num_obje˘s
 + 
num_≥›À
] = 1;

1186 
	glﬂded_obje˘s
[
num_obje˘s
 + 
num_≥›À
++] = 
ob
;

1187 
add_ªf
(
ob
, "load_objects");

1189 
	gnum_obje˘s
 +
num_≥›À
;

1191 
	gi
 = 0; i < 
	gnum_obje˘s
; i++)

1192 
add_to_hash_èbÀ
(
lﬂded_obje˘s
[
i
], i);

1195 
gë_sögÀ
 
	$P1
(
bôvec_t
 *, 
bv
) {

1196 
™swî
[16] = {

1203 
i
, 
ªs
 = -1;

1204 
tmp
;

1206 
i
 = 0; i < 
bv
->
œ°
; i++) {

1207 i‡(
bv
->
b
[
i
]) {

1208 i‡(
ªs
 != -1)  -1;

1209 
ªs
 = 
i
;

1212 i‡(
ªs
 < 0)  -1;

1214 
tmp
 = 
bv
->
b
[
ªs
];

1215 
ªs
 *
BPI
;

1217 i‡(
tmp
 & 0x0000ffff) {

1218 i‡(
tmp
 & 0xffff0000)

1221 
tmp
 >>= 16;

1222 
ªs
 += 16;

1225 i‡(
tmp
 & 0x00ff) {

1226 i‡(
tmp
 & 0xff00)

1229 
tmp
 >>= 8;

1230 
ªs
 += 8;

1233 i‡(
tmp
 & 0x0f) {

1234 i‡(
tmp
 & 0xf0)

1237 
tmp
 >>= 4;

1238 
ªs
 += 4;

1241 
tmp
 = 
™swî
[tmp];

1242 i‡(
tmp
 == -1) Åmp;

1244 
	`DEBUG_PP
((" -> %i", 
ªs
));

1245  
ªs
 + 
tmp
;

1246 
	}
}

1249 *
quîy_the_sh‹t
 
	$P3
(*, 
°¨t
, *, 
íd
, 
obje˘_t
 *, 
ob
) {

1250 
svÆue_t
 *
ªt
;

1252 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
 ||

1253 !(
ªt
 = 
	`≠∂y
("the_sh‹t", 
ob
, 0, 
ORIGIN_DRIVER
))

1254 || 
ªt
->
ty≥
 !
T_STRING
) {

1255  
	`°Ωut
(
°¨t
, 
íd
, "theÅhing");

1257  
	`°Ωut
(
°¨t
, 
íd
, 
ªt
->
u
.
°rög
);

1258 
	}
}

1260 *
°Ωut_w‹ds
 
	$P4
(*, 
°r
, *, 
limô
, , 
fú°
, , 
œ°
) {

1261 *
p
 = 
w‹ds
[
fú°
].
°¨t
;

1262 *
íd
 = 
w‹ds
[
œ°
].end;

1263 
num
;

1266 
	`uis•a˚
(
p
[0]))

1267 
p
++;

1268 
	`uis•a˚
(
íd
[0]))

1269 
íd
--;

1271 
num
 = 
íd
 - 
p
 + 1;

1272 i‡(
°r
 + 
num
 >
limô
)

1273 
num
 = 
limô
 - 
°r
 - 1;

1275 
	`mem˝y
(
°r
, 
p
, 
num
);

1276 
°r
[
num
] = 0;

1278  
°r
 + 
num
;

1279 
	}
}

1281 
push_w‹ds
 
	$P2
(, 
fú°
, , 
œ°
) {

1282 *
p
 = 
w‹ds
[
fú°
].
°¨t
;

1283 *
íd
 = 
w‹ds
[
œ°
].end;

1284 *
°r
;

1286 
	`uis•a˚
(
p
[0]))

1287 
p
++;

1288 
	`uis•a˚
(
íd
[0]))

1289 
íd
--;

1290 
	`push_mÆlo˚d_°rög
(
°r
 = 
	`√w_°rög
(
íd
 - 
p
 + 1, "push_words"));

1292 
p
 <
íd
)

1293 *
°r
++ = *
p
++;

1294 *
°r
 = 0;

1295 
	}
}

1297 
‰ì_∑r£r_îr‹
 
	$P1
(
∑r£r_îr‹_t
 *, 
p
) {

1298 i‡(
p
->
îr‹_ty≥
 =
ERR_ALLOCATED
) {

1299 
	`FREE_MSTR
(
p
->
îr
.
°r
);

1301 
p
->
îr‹_ty≥
 = 0;

1302 
	}
}

1305 
ex∑nd_node
 
	$P1
(
hash_íåy_t
 *, 
he
) {

1306 
svÆue_t
 *
sv
;

1307 
obje˘_t
 *
ob
;

1308 
i
;

1310 
he
->
Êags
 &~
HV_NICKNAME
;

1311 
sv
 = 
	`föd_°rög_ö_m≠pög
(
∑r£_nicks
, 
he
->
«me
);

1312 i‡(
sv
->
ty≥
 !
T_OBJECT
) ;

1313 
ob
 = 
sv
->
u
.ob;

1314 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

1315 i‡(
ob
->
pöfo
 == 0) ;

1318 
i
 = 0; i < 
num_obje˘s
; i++) {

1319 i‡(
lﬂded_obje˘s
[
i
] =
ob
) {

1320 
he
->
Êags
 |
HV_NOUN
;

1321 
	`bôvec_£t
(&
he
->
pv
.
noun
, 
i
);

1325 
	}
}

1327 
∑r£_obj
 
	$P3
(, 
tok
, 
∑r£_°©e_t
 *, 
°©e
,

1328 , 
‹döÆ
) {

1329 
∑r£_°©e_t
 
loˇl_°©e
;

1330 
bôvec_t
 
obje˘s
, 
ßve_obs
, 
îr_obs
;

1331 
°¨t
 = 
°©e
->
w‹d_ödex
;

1332 *
°r
;

1333 
hash_íåy_t
 *
hnode
, *
œ°_adj
 = 0;

1334 
mu…ùÀ_adj
 = 0;

1335 
tmp
, 
‹d_ÀgÆ
 = (
‹döÆ
 =0), 
söguœr_ÀgÆ
 = 1;

1336 
m©ch_t
 *
mp
;

1338 
DEBUG_INC
;

1339 
	`DEBUG_P
(("parse_obj:"));

1341 
	`Æl_obje˘s
(&
obje˘s
, 
∑r£_vn
->
h™dÀr
->
pöfo
->
Êags
 & 
PI_REMOTE_LIVINGS
);

1344 i‡(
°©e
->
w‹d_ödex
 =
num_w‹ds
)

1346 
°r
 = 
w‹ds
[
°©e
->
w‹d_ödex
++].
°rög
;

1347 
	`DEBUG_PP
(("W‹d i†%s", 
°r
));

1348 
	`check_•ecül_w‹d
(
°r
, &
tmp
)) {

1349 
SW_ARTICLE
:

1351 
SW_ALL
:

1352 
söguœr_ÀgÆ
 = 0;

1353 i‡(
°©e
->
w‹d_ödex
 < 
num_w‹ds
 &&

1354 
	`check_•ecül_w‹d
(
w‹ds
[
°©e
->
w‹d_ödex
].
°rög
, &
tmp
Ë=
SW_OF
) {

1355 
°©e
->
w‹d_ödex
++;

1358 
loˇl_°©e
 = *
°©e
;

1359 i‡(
tok
 & 
PLURAL_MODIFIER
) {

1360 
loˇl_°©e
.
num_objs
++;

1361 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
tok
,

1362 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1363 
	`bôvec_c›y
(&
mp
->
vÆ
.
obs
, &
obje˘s
);

1364 
mp
->
‹döÆ
 = 0;

1366 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1367 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
ERROR_TOKEN
,

1368 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1369 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_BAD_MULTIPLE
;

1371 
	`∑r£_ruÀ
(&
loˇl_°©e
);

1373 
SW_SELF
:

1375 i‡(
me_obje˘
 != -1) {

1376 
loˇl_°©e
 = *
°©e
;

1377 
loˇl_°©e
.
num_objs
++;

1378 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
tok
,

1379 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1380 
	`bôvec_zîo
(&
mp
->
vÆ
.
obs
);

1381 
	`bôvec_£t
(&
mp
->
vÆ
.
obs
, 
me_obje˘
);

1382 
mp
->
‹döÆ
 = 0;

1383 
	`∑r£_ruÀ
(&
loˇl_°©e
);

1387 
SW_ORDINAL
:

1388 i‡(
‹d_ÀgÆ
) {

1389 
loˇl_°©e
 = *
°©e
;

1390 
	`∑r£_obj
(
tok
, &
loˇl_°©e
, 
tmp
);

1399 i‡(
°r
 !
my_°rög
Ë
‹d_ÀgÆ
 = 0;

1400 
hnode
 = 
hash_èbÀ
[
	`DO_HASH
(
°r
, 
HASH_SIZE
)];

1401 
hnode
) {

1402 i‡(
hnode
->
«me
 =
°r
) {

1403 i‡(
hnode
->
Êags
 & 
HV_NICKNAME
)

1404 
	`ex∑nd_node
(
hnode
);

1406 i‡(
söguœr_ÀgÆ
 && (
hnode
->
Êags
 & 
HV_NOUN
)) {

1407 
ex∂‹e_îr‹s
 = !
be°_m©ch
 &&

1408 
°©e
->
num_îr‹s
 < 
be°_num_îr‹s
;

1409 
	`DEBUG_P
(("FoundÇoun: %s", 
°r
));

1410 
loˇl_°©e
 = *
°©e
;

1411 
	`bôvec_c›y
(&
ßve_obs
, &
obje˘s
);

1414 i‡(!
	`öãr£˘
(&
obje˘s
, &
hnode
->
pv
.
noun
)) {

1415 i‡(!
ex∂‹e_îr‹s
Ë
skù_ô
;

1417 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1418 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_IS_NOT
;

1419 
cuºít_îr‹_öfo
.
îr
.
noun
 = 
hnode
;

1420 
we_have_™_îr‹
;

1422 i‡(
tok
 & 
LIV_MODIFIER
) {

1423 i‡(
ex∂‹e_îr‹s
)

1424 
	`bôvec_c›y
(&
îr_obs
, &
obje˘s
);

1425 i‡(!
	`öãr£˘
(&
obje˘s
, &
cur_livögs
)) {

1426 i‡(!
ex∂‹e_îr‹s
Ë
skù_ô
;

1428 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1429 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_NOT_LIVING
;

1430 
cuºít_îr‹_öfo
.
îr
.
noun
 = 
hnode
;

1431 
we_have_™_îr‹
;

1434 i‡(!(
tok
 & 
VIS_ONLY_MODIFIER
)) {

1435 i‡(
ex∂‹e_îr‹s
)

1436 
	`bôvec_c›y
(&
îr_obs
, &
obje˘s
);

1437 i‡(!
	`öãr£˘
(&
obje˘s
, &
cur_ac˚ssibÀ
)) {

1438 i‡(!
ex∂‹e_îr‹s
Ë
skù_ô
;

1440 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1441 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_NOT_ACCESSIBLE
;

1442 
cuºít_îr‹_öfo
.
îr
.
noun
 = 
hnode
;

1443 
we_have_™_îr‹
;

1446 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
tok
 & ~
PLURAL_MODIFIER
,

1447 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1448 
	`bôvec_c›y
(&
mp
->
vÆ
.
obs
, &
obje˘s
);

1449 
mp
->
‹döÆ
 = ordinal;

1450 
loˇl_°©e
.
num_objs
++;

1451 
do_the_∑r£
;

1453 
we_have_™_îr‹
:

1454 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
ERROR_TOKEN
,

1455 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1457 
do_the_∑r£
:

1458 
	`∑r£_ruÀ
(&
loˇl_°©e
);

1460 
skù_ô
:

1461 
	`bôvec_c›y
(&
obje˘s
, &
ßve_obs
);

1463 i‡((
‹döÆ
 =0Ë&& (
hnode
->
Êags
 & 
HV_PLURAL
)) {

1464 
ex∂‹e_îr‹s
 = !
be°_m©ch
 &&

1465 
°©e
->
num_îr‹s
 < 
be°_num_îr‹s
;

1466 
	`DEBUG_P
(("FoundÖluøl: %s", 
°r
));

1467 
loˇl_°©e
 = *
°©e
;

1468 
	`bôvec_c›y
(&
ßve_obs
, &
obje˘s
);

1470 i‡(!(
tok
 & 
PLURAL_MODIFIER
)) {

1471 i‡(!
ex∂‹e_îr‹s
Ë
p_skù_ô
;

1473 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1474 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_BAD_MULTIPLE
;

1475 
p_we_have_™_îr‹
;

1478 i‡(!
	`öãr£˘
(&
obje˘s
, &
hnode
->
pv
.
∂uøl
)) {

1479 i‡(!
ex∂‹e_îr‹s
Ë
p_skù_ô
;

1481 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1482 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_IS_NOT
;

1483 
cuºít_îr‹_öfo
.
îr
.
noun
 = 
hnode
;

1484 
p_we_have_™_îr‹
;

1486 i‡(
tok
 & 
LIV_MODIFIER
) {

1487 i‡(
ex∂‹e_îr‹s
)

1488 
	`bôvec_c›y
(&
îr_obs
, &
obje˘s
);

1489 i‡(!
	`öãr£˘
(&
obje˘s
, &
cur_livögs
)) {

1490 i‡(!
ex∂‹e_îr‹s
Ë
p_skù_ô
;

1492 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1493 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_NOT_LIVING
;

1494 
cuºít_îr‹_öfo
.
îr
.
noun
 = 
hnode
;

1495 
p_we_have_™_îr‹
;

1498 i‡(!(
tok
 & 
VIS_ONLY_MODIFIER
)) {

1499 i‡(
ex∂‹e_îr‹s
)

1500 
	`bôvec_c›y
(&
îr_obs
, &
obje˘s
);

1501 i‡(!
	`öãr£˘
(&
obje˘s
, &
cur_ac˚ssibÀ
)) {

1502 i‡(!
ex∂‹e_îr‹s
Ë
p_skù_ô
;

1504 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1505 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_NOT_ACCESSIBLE
;

1506 
cuºít_îr‹_öfo
.
îr
.
noun
 = 
hnode
;

1507 
p_we_have_™_îr‹
;

1510 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
tok
,

1511 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1512 
	`bôvec_c›y
(&
mp
->
vÆ
.
obs
, &
obje˘s
);

1513 
mp
->
‹döÆ
 = ordinal;

1514 
loˇl_°©e
.
num_objs
++;

1515 
p_do_the_∑r£
;

1517 
p_we_have_™_îr‹
:

1518 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
ERROR_TOKEN
,

1519 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

1521 
p_do_the_∑r£
:

1522 
	`∑r£_ruÀ
(&
loˇl_°©e
);

1524 
p_skù_ô
:

1525 
	`bôvec_c›y
(&
obje˘s
, &
ßve_obs
);

1527 i‡(
hnode
->
Êags
 & 
HV_ADJ
) {

1528 
	`DEBUG_P
(("Foundádj: %s", 
°r
));

1529 
	`öãr£˘
(&
obje˘s
, &
hnode
->
pv
.
adj
);

1530 i‡(
œ°_adj
Ë
mu…ùÀ_adj
 = 1;

1531 
œ°_adj
 = 
hnode
;

1533 
DEBUG_DEC
;

1538 
hnode
 = hnode->
√xt
;

1540 i‡(!
hnode
) ;

1542 
	`DEBUG_PP
(("exiting ..."));

1543 
DEBUG_DEC
;

1544 
	}
}

1546 
make_îr‹_mesßge
 
	$P2
(, 
which
, 
∑r£r_îr‹_t
 *, 
îr
) {

1547 
buf
[1024];

1548 *
p
;

1549 *
íd
 = 
	`EndOf
(
buf
);

1550 
˙t
 = 0;

1551 
o˙t
 = 0;

1552 
tok
;

1553 
ödex
 = 0;

1555 
p
 = 
	`°Ωut
(
buf
, 
íd
, "You can't ");

1556 
p
 = 
	`°Ωut
’, 
íd
, 
w‹ds
[0].
°rög
);

1557 *
p
++ = ' ';

1558 (
tok
 = 
∑r£_vn
->
tokí
[
ödex
++])) {

1559 
tok
) {

1560 
STR_TOKEN
:

1561 i‡(
˙t
 =
which
 - 1) {

1562 
p
 = 
	`°Ωut
’, 
íd
, "that ");

1563 
˙t
++;

1567 
WRD_TOKEN
:

1568 
p
 = 
	`°Ωut_w‹ds
’, 
íd
, 
m©ches
[
˙t
].
fú°
, m©ches[˙t].
œ°
);

1569 *
p
++ = ' ';

1570 
˙t
++;

1573 i‡(
tok
 <= 0) {

1574 
p
 = 
	`°Ωut
’, 
íd
, 
lôîÆs
[-(
tok
 + 1)]);

1575 *
p
++ = ' ';

1577 i‡(
˙t
 =
which
 - 1 || ++
o˙t
 >= which

1578 || (
m©ches
[
˙t
].
tokí
 & 
PLURAL_MODIFIER
)) {

1579 
p
 = 
	`°Ωut
’, 
íd
, "that ");

1582 
p
 = 
	`quîy_the_sh‹t
’, 
íd
, 
lﬂded_obje˘s
[
m©ches
[
˙t
].
vÆ
.
numbî
]);

1583 *
p
++ = ' ';

1585 
˙t
++;

1590 
p
--;

1591 
p
 = 
	`°Ωut
’, 
íd
, ".\n");

1592 
	`DEBUG_P
((
buf
));

1593 
	`‰ì_∑r£r_îr‹
(
îr
);

1594 
îr
->
îr‹_ty≥
 = 
ERR_ALLOCATED
;

1595 
îr
->îr.
°r
 = 
	`°rög_c›y
(
buf
, "make_error_message");

1596 
	}
}

1604 
¥o˚ss_™swî
 
	$P3
(
∑r£_°©e_t
 *, 
°©e
, 
svÆue_t
 *, 
sv
,

1605 , 
which
) {

1606 i‡(!
sv
)  0;

1607 i‡(
sv
->
ty≥
 =
T_NUMBER
) {

1608 
	`DEBUG_P
(("Rëu∫ vÆuêwas: %i", 
sv
->
u
.
numbî
));

1609 i‡(
sv
->
u
.
numbî
)

1611 i‡(
°©e
->
num_îr‹s
 =
be°_num_îr‹s
) {

1612 
	`DEBUG_P
(("Haveá better match;áborting ..."));

1615 i‡(
°©e
->
num_îr‹s
++ == 0)

1616 
	`make_îr‹_mesßge
(
which
, &
cuºít_îr‹_öfo
);

1620 i‡(
sv
->
ty≥
 !
T_STRING
) {

1621 
	`DEBUG_P
(("Return value wasÇotá string orÇumber."));

1624 
	`DEBUG_P
(("Rëu∫ed såög was: %s", 
sv
->
u
.
°rög
));

1625 i‡(
°©e
->
num_îr‹s
 =
be°_num_îr‹s
) {

1626 
	`DEBUG_P
(("Haveá better match;áborting ..."));

1629 i‡(
°©e
->
num_îr‹s
++ == 0) {

1630 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1631 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_ALLOCATED
;

1632 
cuºít_îr‹_öfo
.
îr
.
°r
 = 
	`°rög_c›y
(
sv
->
u
.
°rög
, "process_answer");

1635 
	}
}

1641 
∑øŒñ_¥o˚ss_™swî
 
	$P3
(
∑r£_°©e_t
 *, 
°©e
, 
svÆue_t
 *, 
sv
,

1642 , 
which
) {

1643 i‡(!
sv
)  0;

1644 i‡(
sv
->
ty≥
 =
T_NUMBER
) {

1645 
	`DEBUG_P
(("Rëu∫ vÆuêwas: %i", 
sv
->
u
.
numbî
));

1646 i‡(
sv
->
u
.
numbî
)

1649 i‡(
°©e
->
num_îr‹s
 == 0)

1650 
	`make_îr‹_mesßge
(
which
, &
∑øŒñ_îr‹_öfo
);

1653 i‡(
sv
->
ty≥
 !
T_STRING
) {

1654 
	`DEBUG_P
(("Rëu∫ vÆuêwa†nŸá såög o∏numbî.", 
sv
->
u
.
numbî
));

1657 
	`DEBUG_P
(("Rëu∫ed såög was: %s", 
sv
->
u
.
°rög
));

1659 
	`‰ì_∑r£r_îr‹
(&
∑øŒñ_îr‹_öfo
);

1660 i‡(
sv
->
u
.
°rög
[0] == '#') {

1661 
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_ALLOCATED
;

1662 
∑øŒñ_îr‹_öfo
.
îr
.
°r
 = 
	`°rög_c›y
(
sv
->
u
.
°rög
 + 1, "process_answer");

1665 
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_ALLOCATED
;

1666 
∑øŒñ_îr‹_öfo
.
îr
.
°r
 = 
	`°rög_c›y
(
sv
->
u
.
°rög
, "process_answer");

1669 
	}
}

1671 
push_ªÆ_«mes
 
	$P2
(, 
åy
, , 
which
) {

1672 
ödex
 = 0, 
m©ch
 = 0;

1673 
tok
;

1674 
tmp
[1024];

1676 i‡(
åy
 >= 2) {

1677 
tmpbuf
[1024];

1678 
	`°Ωut_w‹ds
(
tmpbuf
, 
	`EndOf
(tmpbuf), 0, 0);

1679 
	`c›y_™d_push_°rög
(
tmpbuf
);

1682 (
tok
 = 
∑r£_vn
->
tokí
[
ödex
++])) {

1683 i‡(
tok
 > 0) {

1684 
	`°Ωut_w‹ds
(
tmp
, 
	`EndOf
—mp), 
m©ches
[
m©ch
].
fú°
, m©ches[m©ch].
œ°
);

1685 
	`push_mÆlo˚d_°rög
(
	`°rög_c›y
(
tmp
, "push_real_names"));

1686 
m©ch
++;

1689  
m©ch
 + (
åy
 >= 2);

1690 
	}
}

1692 *
ruÀ_°rög
 
	$P1
(
vîb_node_t
 *, 
vn
) {

1693 
ödex
 = 0;

1694 
tok
;

1695 
buf
[1024];

1696 *
íd
 = 
	`EndOf
(
buf
);

1697 *
p
;

1699 
p
 = 
buf
;

1702 (
tok
 = 
vn
->
tokí
[
ödex
++]Ë& ~
CHOOSE_MODIFIER
) {

1703 
OBJ_A_TOKEN
:

1704 
OBJ_TOKEN
:

1705 
p
 = 
	`°Ωut
’, 
íd
, "OBJ ");

1707 
LIV_A_TOKEN
:

1708 
LIV_TOKEN
:

1709 
p
 = 
	`°Ωut
’, 
íd
, "LIV ");

1711 
OBS_TOKEN
:

1713 
	`ADD_MOD
(
OBS_TOKEN
, 
VIS_ONLY_MODIFIER
):

1714 
p
 = 
	`°Ωut
’, 
íd
, "OBS ");

1716 
LVS_TOKEN
:

1717 
	`ADD_MOD
(
LVS_TOKEN
, 
VIS_ONLY_MODIFIER
):

1718 
p
 = 
	`°Ωut
’, 
íd
, "LVS ");

1720 
STR_TOKEN
:

1721 
p
 = 
	`°Ωut
’, 
íd
, "STR ");

1723 
WRD_TOKEN
:

1724 
p
 = 
	`°Ωut
’, 
íd
, "WRD ");

1727 i‡(
p
 =
buf
) {

1728 *
buf
 = 0;

1730 *(
p
-1) = 0;

1732  
buf
;

1734 
p
 = 
	`°Ωut
’, 
íd
, 
lôîÆs
[-(
tok
 + 1)]);

1735 *
p
++ = ' ';

1739 
	}
}

1741 
push_bôvec_as_¨øy
 
	$P2
(
bôvec_t
 *, 
bv
, , 
îr‹s_too
) {

1742 
i
, 
k
, 
n
 = 0;

1743 
j
;

1744 
¨øy_t
 *
¨r
;

1745 
ßved_îr‹_t
 *
£
;

1747 i‡(
îr‹s_too
) {

1748 
£
 = 
be°_ªsu…
->
∑øŒñ
;

1749 
£
) {

1750 
n
++;

1751 
£
 = se->
√xt
;

1755 
i
 = 0; i < 
bv
->
œ°
; i++) {

1756 i‡(
bv
->
b
[
i
]) {

1757 
j
 = 1;

1758 
j
) {

1759 i‡(
bv
->
b
[
i
] & 
j
)

1760 
n
++;

1761 
j
 <<= 1;

1765 
¨r
 = 
	`Æloˇã_¨øy
(
n
);

1767 
	`push_ª„d_¨øy
(
¨r
);

1769 i‡(
îr‹s_too
) {

1770 
i
 = 0;

1771 
£
 = 
be°_ªsu…
->
∑øŒñ
;

1772 
£
) {

1773 
svÆue_t
 *
ªt
 = 
	`gë_the_îr‹
(&
£
->
îr
, se->
obj
);

1775 i‡(
ªt
)

1776 
	`assign_svÆue_no_‰ì
(&
¨r
->
ôem
[
i
], 
ªt
);

1778 
£
 = se->
√xt
;

1779 
i
++;

1783 
i
 = 0; i < 
bv
->
œ°
; i++) {

1784 i‡(
bv
->
b
[
i
]) {

1785 
j
 = 1;

1786 
k
 = 0;

1787 
j
) {

1788 i‡(
bv
->
b
[
i
] & 
j
) {

1789 
obje˘_t
 *
ob
 = 
lﬂded_obje˘s
[
BPI
 * 
i
 + 
k
];

1790 
n
--;

1791 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) {

1792 
¨r
->
ôem
[
n
] = 
c⁄°0u
;

1794 
¨r
->
ôem
[
n
].
ty≥
 = 
T_OBJECT
;

1795 
¨r
->
ôem
[
n
].
u
.
ob
 = ob;

1796 
	`add_ªf
(
ob
, "push_bitvec_as_array");

1799 
j
 <<= 1;

1800 
k
++;

1804 
	}
}

1810 *
	g¥efixes
[] = { "can_", "direct_", "indirect_", "do_",

1814 
make_fun˘i⁄
 
	$P6
(*, 
buf
, *, 
íd
, , 
which
,

1815 
∑r£_°©e_t
 *, 
°©e
, , 
åy
,

1816 
obje˘_t
 *, 
èrgë
) {

1817 
ödex
 = 0, 
m©ch
 = 0, 
om©ch
 = 0;

1818 
⁄_°ack
 = 0;

1819 
tok
;

1827 
buf
 = 
	`°Ωut
(buf, 
íd
, 
¥efixes
[
which
]);

1828 i‡(
åy
 < 2) {

1829 
buf
 = 
	`°Ωut
(buf, 
íd
, 
∑r£_vîb_íåy
->
m©ch_«me
);

1831 
buf
 = 
	`°Ωut
(buf, 
íd
, "verb");

1832 
	`push_sh¨ed_°rög
(
∑r£_vîb_íåy
->
m©ch_«me
);

1833 
⁄_°ack
++;

1836 i‡(
åy
 == 3) {

1837 
buf
 = 
	`°Ωut
(buf, 
íd
, "_rule");

1839 
buf
++;

1840 
	`sh¨e_™d_push_°rög
(
	`ruÀ_°rög
(
∑r£_vn
));

1841 
⁄_°ack
++;

1843 (
tok
 = 
∑r£_vn
->
tokí
[
ödex
++])) {

1844 *
buf
++ = '_';

1845 
tok
 & ~
CHOOSE_MODIFIER
) {

1846 
OBJ_TOKEN
:

1847 
OBJ_A_TOKEN
:

1848 
buf
 = 
	`°Ωut
(buf, 
íd
, "obj");

1849 
put_obj_vÆue
;

1851 
OBS_TOKEN
:

1852 
	`ADD_MOD
(
OBS_TOKEN
, 
VIS_ONLY_MODIFIER
):

1853 i‡(
om©ch
 + 1 >
which
 ||

1854 !(
m©ches
[
m©ch
].
tokí
 & 
PLURAL_MODIFIER
Ë|| (
which
 >= 4))

1855 
buf
 = 
	`°Ωut
(buf, 
íd
, "obj");

1857 
buf
 = 
	`°Ωut
(buf, 
íd
, "obs");

1858 
put_obj_vÆue
;

1860 
LVS_TOKEN
:

1861 
	`ADD_MOD
(
LVS_TOKEN
, 
VIS_ONLY_MODIFIER
):

1862 i‡(
om©ch
 +1 >
which
 ||

1863 !(
m©ches
[
m©ch
].
tokí
 & 
PLURAL_MODIFIER
Ë|| (
which
 >= 4))

1864 
buf
 = 
	`°Ωut
(buf, 
íd
, "liv");

1866 
buf
 = 
	`°Ωut
(buf, 
íd
, "lvs");

1867 
put_obj_vÆue
;

1869 
LIV_TOKEN
:

1870 
LIV_A_TOKEN
:

1871 
buf
 = 
	`°Ωut
(buf, 
íd
, "liv");

1873 
put_obj_vÆue
:

1874 
om©ch
++;

1879 i‡(
which
 >= 4) {

1880 i‡(
om©ch
 == 1) {

1881 
	`push_obje˘
(
lﬂded_obje˘s
[
dúe˘_obje˘
 >= 0 ? direct_object : 0]);

1883 
	`push_obje˘
(
lﬂded_obje˘s
[
ödúe˘_obje˘
 >= 0 ? indirect_object : 0]);

1885 } i‡(
om©ch
 =
which
) {

1886 
	`push_obje˘
(
èrgë
);

1887 } i‡(
om©ch
 > 
which
) {

1888 
	`push_numbî
(0);

1889 } i‡(
m©ches
[
m©ch
].
tokí
 =
ERROR_TOKEN
) {

1890 
	`push_numbî
(0);

1891 } i‡(
m©ches
[
m©ch
].
tokí
 & 
PLURAL_MODIFIER
) {

1892 
	`push_bôvec_as_¨øy
(&
m©ches
[
m©ch
].
vÆ
.
obs
, 
which
 == 3);

1893 } i‡(
m©ches
[
m©ch
].
vÆ
.
numbî
 < 0) {

1894 
	`push_numbî
(0);

1895 } i‡(
lﬂded_obje˘s
[
m©ches
[
m©ch
].
vÆ
.
numbî
]->
Êags
 & 
O_DESTRUCTED
) {

1896 
	`push_numbî
(0);

1898 
	`push_obje˘
(
lﬂded_obje˘s
[
m©ches
[
m©ch
].
vÆ
.
numbî
]);

1899 
m©ch
++;

1900 
⁄_°ack
++;

1902 
STR_TOKEN
:

1904 
tmp
[1024];

1905 
buf
 = 
	`°Ωut
(buf, 
íd
, "str");

1906 
	`°Ωut_w‹ds
(
tmp
, 
	`EndOf
—mp), 
m©ches
[
m©ch
].
fú°
, m©ches[m©ch].
œ°
);

1907 
	`push_mÆlo˚d_°rög
(
	`°rög_c›y
(
tmp
, "push_real_names"));

1908 
m©ch
++;

1909 
⁄_°ack
++;

1912 
WRD_TOKEN
:

1914 
tmp
[1024];

1915 
buf
 = 
	`°Ωut
(buf, 
íd
, "wrd");

1916 
	`°Ωut_w‹ds
(
tmp
, 
íd
, 
m©ches
[
m©ch
].
fú°
, m©ches[m©ch].
œ°
);

1917 
	`push_mÆlo˚d_°rög
(
	`°rög_c›y
(
tmp
, "push_real_names"));

1918 
m©ch
++;

1919 
⁄_°ack
++;

1923 i‡(!
åy
) {

1924 
buf
 = 
	`°Ωut
(buf, 
íd
, 
lôîÆs
[-(
tok
 + 1)]);

1925 } i‡(
åy
 < 3) {

1926 
buf
 = 
	`°Ωut
(buf, 
íd
, "word");

1927 
	`push_sh¨ed_°rög
(
lôîÆs
[-(
tok
 + 1)]);

1928 
⁄_°ack
++;

1932  
⁄_°ack
;

1933 
	}
}

1935 
	#SET_OB
(
x
Ëi‡((
ob
 = (x))->
Êags
 & 
O_DESTRUCTED
Ë 0;

	)

1937 
check_fun˘i⁄s
 
	$P2
(
obje˘_t
 *, 
obj
, 
∑r£_°©e_t
 *, 
°©e
) {

1938 
obje˘_t
 *
ob
;

1939 
func
[256];

1940 
åy
, 
ªt
, 
¨gs
;

1942 
	`SET_OB
(
obj
);

1943 
åy
 = 0, 
ªt
 = 0; !ret &&Åry < 8;Åry++) {

1944 i‡(
åy
 == 4)

1945 
	`SET_OB
(
∑r£_vn
->
h™dÀr
);

1946 
¨gs
 = 
	`make_fun˘i⁄
(
func
, 
	`EndOf
(func), 0, 
°©e
, 
åy
 % 4, 
obj
);

1947 
¨gs
 +
	`push_ªÆ_«mes
(
åy
 % 4, 0);

1948 
	`DEBUG_P
(("Tryög %†... (/%s)", 
func
, 
ob
->
«me
));

1949 
ªt
 = 
	`¥o˚ss_™swî
(
°©e
, 
	`≠∂y
(
func
, 
ob
, 
¨gs
, 
ORIGIN_DRIVER
), 0);

1950 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1952 i‡(
ªt
 == -3)

1955 i‡(!
ªt
) {

1956 i‡(
°©e
->
num_îr‹s
 =
be°_num_îr‹s
) {

1957 
	`DEBUG_P
(("Nothing matchedánd we haveá better match"));

1958 
DEBUG_DEC
;

1961 i‡(
°©e
->
num_îr‹s
++ == 0)

1962 
	`make_îr‹_mesßge
(0, &
cuºít_îr‹_öfo
);

1965 
	}
}

1967 
˛ór_∑øŒñ_îr‹s
 
	$P1
(
ßved_îr‹_t
 **, 
∑r
) {

1968 
ßved_îr‹_t
 *
£
, *
√xt
;

1970 
£
 = *
∑r
; se; sê
√xt
) {

1971 
√xt
 = 
£
->next;

1972 
	`‰ì_∑r£r_îr‹
(&
£
->
îr
);

1973 
	`FREE
(
£
);

1975 *
∑r
 = 0;

1976 
	}
}

1978 
u£_œ°_∑øŒñ_îr‹
 
	$P1
(
∑r£_°©e_t
 *, 
°©e
) {

1979 i‡(!
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
)

1981 i‡(
°©e
->
num_îr‹s
++ == 0) {

1982 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

1983 
cuºít_îr‹_öfo
 = 
∑øŒñ_îr‹_öfo
;

1984 
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 0;

1987 
	}
}

1989 
ßve_œ°_∑øŒñ_îr‹
 
	$P1
(, 
ob
) {

1990 
ßved_îr‹_t
 *
n
;

1992 i‡(!
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
)

1994 
n
 = 
	`ALLOCATE
(
ßved_îr‹_t
, 
TAG_PARSER
, "save_last_parallel_error");

1995 
n
->
√xt
 = 
∑øŒñ_îr‹s
;

1996 
n
->
obj
 = 
ob
;

1997 
n
->
îr
 = 
∑øŒñ_îr‹_öfo
;

1998 
∑øŒñ_îr‹s
 = 
n
;

1999 
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 0;

2001 
	}
}

2003 
∑øŒñ_check_fun˘i⁄s
 
	$P3
(
obje˘_t
 *, 
obj
,

2004 
∑r£_°©e_t
 *, 
°©e
,

2005 , 
which
) {

2006 
obje˘_t
 *
ob
;

2007 
func
[256];

2008 
åy
, 
ªt
, 
¨gs
;

2010 
	`‰ì_∑r£r_îr‹
(&
∑øŒñ_îr‹_öfo
);

2011 
	`SET_OB
(
obj
);

2012 
åy
 = 0, 
ªt
 = 0; !ret &&Åry < 8;Åry++) {

2013 i‡(
åy
 == 4)

2014 
	`SET_OB
(
∑r£_vn
->
h™dÀr
);

2015 
¨gs
 = 
	`make_fun˘i⁄
(
func
, 
	`EndOf
(func), 
which
, 
°©e
, 
åy
 % 4, 
obj
);

2016 
¨gs
 +
	`push_ªÆ_«mes
(
åy
 % 4, 
which
);

2017 
	`DEBUG_P
(("Tryög %†... (/%s)", 
func
, 
ob
->
«me
));

2018 
ªt
 = 
	`∑øŒñ_¥o˚ss_™swî
(
°©e
, 
	`≠∂y
(
func
, 
ob
, 
¨gs
, 
ORIGIN_DRIVER
), 
which
);

2019 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

2022 i‡(!
ªt
) {

2023 i‡(
°©e
->
num_îr‹s
 == 0)

2024 
	`make_îr‹_mesßge
(0, &
∑øŒñ_îr‹_öfo
);

2027  
ªt
 == 1;

2028 
	}
}

2030 
söguœr_check_fun˘i⁄s
 
	$P3
(, 
which
, 
∑r£_°©e_t
 *, 
°©e
,

2031 
m©ch_t
 *, 
m
) {

2032 
bôvec_t
 *
bv
 = &
m
->
vÆ
.
obs
;

2033 
i
, 
k
, 
ambig
 = 0, 
m©ch
;

2034 
j
;

2035 
‹döÆ
 = 
m
->ordinal;

2036 
‹d2
 = 
m
->
‹döÆ
;

2037 
has_‹döÆ
 = (
m
->
‹döÆ
 != 0);

2038 
was_îr‹
 = 0;

2040 
i
 = 0; i < 
bv
->
œ°
; i++) {

2041 i‡(
bv
->
b
[
i
]) {

2042 
j
 = 1;

2043 
k
 = 0;

2044 
j
) {

2045 i‡(
bv
->
b
[
i
] & 
j
) {

2046 
ªt
 = 
	`∑øŒñ_check_fun˘i⁄s
(
lﬂded_obje˘s
[
BPI
 * 
i
 + 
k
], 
°©e
, 
which
);

2047 i‡(
ªt
) {

2048 i‡(
has_‹döÆ
) {

2049 
‹d2
--;

2050 i‡(
‹döÆ
 < 0 || --ordinal == 0) {

2051 i‡(
‹döÆ
 == -2)

2052 
°©e
->
num_îr‹s
--;

2053 i‡(
	`u£_œ°_∑øŒñ_îr‹
(
°©e
)) {

2054 
m
->
tokí
 = 
ERROR_TOKEN
;

2055 i‡(
‹döÆ
 != -1)

2057 
‹döÆ
 = -2;

2059 
m
->
vÆ
.
numbî
 = 
BPI
 * 
i
 + 
k
;

2064 i‡(!
ambig
++) {

2065 i‡(
	`u£_œ°_∑øŒñ_îr‹
(
°©e
)) {

2066 
was_îr‹
 = 1;

2067 
m
->
tokí
 = 
ERROR_TOKEN
;

2069 
was_îr‹
 = 0;

2070 
m©ch
 = 
BPI
 * 
i
 + 
k
;

2072 i‡(
m
->
tokí
 & 
CHOOSE_MODIFIER
) {

2073 i‡(
m©ch
 >0Ë
m
->
vÆ
.
numbî
 = match;

2077 
m©ch
 = -1;

2081 i‡(
has_‹döÆ
 && (
‹döÆ
 =-1 || --
‹d2
 == 0)) {

2082 
	`‰ì_∑r£r_îr‹
(&
£c⁄d_∑øŒñ_îr‹_öfo
);

2083 
£c⁄d_∑øŒñ_îr‹_öfo
 = 
∑øŒñ_îr‹_öfo
;

2084 
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 0;

2087 
bv
->
b
[
i
] &~
j
;

2090 
j
 <<= 1;

2091 
k
++;

2095 i‡(!
has_‹döÆ
) {

2096 i‡(
ambig
 == 1) {

2097 
m
->
vÆ
.
numbî
 = 
m©ch
;

2100 i‡(
was_îr‹
)

2101 
°©e
->
num_îr‹s
--;

2103 
m
->
tokí
 = 
ERROR_TOKEN
;

2104 i‡(
ambig
 =0 && 
	`u£_œ°_∑øŒñ_îr‹
(
°©e
))

2106 i‡(
°©e
->
num_îr‹s
++ == 0) {

2107 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2109 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_AMBIG
;

2110 
	`bôvec_c›y
(&
cuºít_îr‹_öfo
.
îr
.
obs
, &
m
->
vÆ
.obs);

2114 i‡(
‹döÆ
 == -2) ;

2116 
m
->
tokí
 = 
ERROR_TOKEN
;

2117 i‡(
°©e
->
num_îr‹s
++ == 0) {

2118 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2119 i‡(
‹d2
 <= 0) {

2120 
cuºít_îr‹_öfo
 = 
£c⁄d_∑øŒñ_îr‹_öfo
;

2121 
£c⁄d_∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 0;

2124 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_ORDINAL
;

2125 
cuºít_îr‹_öfo
.
îr
.
‹d_îr‹
 = 
	`bôvec_cou¡
(
bv
);

2130 
	}
}

2132 
∂uøl_check_fun˘i⁄s
 
	$P3
(, 
which
, 
∑r£_°©e_t
 *, 
°©e
,

2133 
m©ch_t
 *, 
m
) {

2134 
bôvec_t
 *
bv
 = &
m
->
vÆ
.
obs
;

2135 
i
, 
k
;

2136 
j
;

2137 
found_⁄e
 = 0;

2139 
i
 = 0; i < 
bv
->
œ°
; i++) {

2140 i‡(
bv
->
b
[
i
]) {

2141 
j
 = 1;

2142 
k
 = 0;

2143 
j
) {

2144 i‡(
bv
->
b
[
i
] & 
j
) {

2145 
ªt
 = 
	`∑øŒñ_check_fun˘i⁄s
(
lﬂded_obje˘s
[
BPI
 * 
i
 + 
k
], 
°©e
, 
which
);

2146 i‡(!
ªt
 || 
	`ßve_œ°_∑øŒñ_îr‹
(
BPI
 * 
i
 + 
k
))

2147 
bv
->
b
[
i
] &~
j
;

2149 
found_⁄e
 = 1;

2151 
j
 <<= 1;

2152 
k
++;

2156 i‡(!
found_⁄e
 && 
	`u£_œ°_∑øŒñ_îr‹
(
°©e
))

2157 
m
->
tokí
 = 
ERROR_TOKEN
;

2158 
	}
}

2164 
	$ˇche_œ°_∑øŒñ_îr‹
(
∑r£r_îr‹_t
 *
°‹age
) {

2165 i‡(!
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
)

2167 
	`‰ì_∑r£r_îr‹
(
°‹age
);

2168 *
°‹age
 = 
∑øŒñ_îr‹_öfo
;

2169 
∑øŒñ_îr‹_öfo
.
îr‹_ty≥
 = 0;

2171 
	}
}

2173 
u£_ˇched_∑øŒñ_îr‹
 
	$P2
(
∑r£_°©e_t
 *, 
°©e
,

2174 
∑r£r_îr‹_t
*, 
îr
) {

2175 i‡(!
îr
->
îr‹_ty≥
)

2177 i‡(
°©e
->
num_îr‹s
++ == 0) {

2178 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2179 
cuºít_îr‹_öfo
 = *
îr
;

2180 
îr
->
îr‹_ty≥
 = 0;

2183 
	}
}

2185 
dïídít_check_fun˘i⁄s
 
	$P3
(, 
which
, 
∑r£_°©e_t
 *, 
°©e
,

2186 
m©ch_t
 *, 
m
) {

2187 
bôvec_t
 *
bv
 = &
m
->
vÆ
.
obs
;

2188 
i
, 
k
;

2189 
j
;

2190 
found_⁄e
 = 0;

2191 
∑r£r_îr‹_t
 
îröfo
;

2193 
îröfo
.
îr‹_ty≥
 = 0;

2194 
i
 = 0; i < 
bv
->
œ°
; i++) {

2195 i‡(
bv
->
b
[
i
]) {

2196 
j
 = 1;

2197 
k
 = 0;

2198 
j
) {

2199 i‡(
bv
->
b
[
i
] & 
j
) {

2200 
ªt
 = 
	`∑øŒñ_check_fun˘i⁄s
(
lﬂded_obje˘s
[
BPI
 * 
i
 + 
k
], 
°©e
, 
which
);

2201 i‡(!
ªt
 || 
	`ˇche_œ°_∑øŒñ_îr‹
(&
îröfo
))

2202 
bv
->
b
[
i
] &~
j
;

2204 i‡(!
found_⁄e
Ë
m
->
vÆ
.
numbî
 = 
BPI
 * 
i
 + 
k
;

2205 
found_⁄e
 = 1;

2208 
j
 <<= 1;

2209 
k
++;

2213 i‡(!
found_⁄e
 && (

2214 
	`u£_ˇched_∑øŒñ_îr‹
(
°©e
, &
îröfo
) ||

2215 
	`u£_œ°_∑øŒñ_îr‹
(
°©e
)) ) {

2216 
m
->
tokí
 = 
ERROR_TOKEN
;

2222 
	`‰ì_∑r£r_îr‹
(&
îröfo
);

2223 
	}
}

2225 
	#CHECK_DIRECT_OK
 1

	)

2226 
	#CHECK_INDIRECT_OK
 2

	)

2227 
	#CHECK_ERROR_RELATION
 4

	)

2228 
	#CHECK_RELATION_COMPLETE
 8

	)

2248 
	$check_⁄e_ªœti⁄
(
∑r£_°©e_t
 * 
°©e
, 
dúe˘_fú°
,

2249 
∑r£r_îr‹_t
 *
îröfo
)

2251 
ªs
;

2252 
ob
;

2253 
∑r£r_îr‹_t
 
îr
;

2255 
ªs
 = 0;

2256 
îr
.
îr‹_ty≥
 = 0;

2257 
ob
 = 
dúe˘_fú°
 ? 
dúe˘_obje˘
 : 
ödúe˘_obje˘
;

2258 
ªs
 = 
	`∑øŒñ_check_fun˘i⁄s
(

2259 
lﬂded_obje˘s
[
dúe˘_fú°
 ? 
dúe˘_obje˘
 : 
ödúe˘_obje˘
], 
°©e
,

2260 
dúe˘_fú°
 ? 4 : 5);

2261 i‡(!
ªs
) {

2265  
CHECK_ERROR_RELATION
;

2267 
ªs
 |
dúe˘_fú°
 ? 
CHECK_DIRECT_OK
 : 
CHECK_INDIRECT_OK
;

2268 i‡(
	`ˇche_œ°_∑øŒñ_îr‹
(&
îr
)) {

2275 
ªs
 |
CHECK_ERROR_RELATION
;

2278 
ªs
 = 
	`∑øŒñ_check_fun˘i⁄s
(

2279 
lﬂded_obje˘s
[
dúe˘_fú°
 ? 
ödúe˘_obje˘
: 
dúe˘_obje˘
], 
°©e
,

2280 
dúe˘_fú°
 ? 5 : 4);

2281 i‡(!
ªs
) {

2283 i‡(
îr
.
îr‹_ty≥
) {

2284 *
îröfo
 = 
îr
;

2286  
ªs
 | 
CHECK_ERROR_RELATION
;

2288 
ªs
 |
dúe˘_fú°
 ? 
CHECK_INDIRECT_OK
 : 
CHECK_DIRECT_OK
;

2290 i‡(!
îr
.
îr‹_ty≥
 && 
	`ˇche_œ°_∑øŒñ_îr‹
(&err)) {

2295 
ªs
 |
CHECK_ERROR_RELATION
;

2302 
ªs
 |
CHECK_RELATION_COMPLETE
;

2303 i‡(
îr
.
îr‹_ty≥
)

2304 *
îröfo
 = 
îr
;

2305  
ªs
;

2306 
	}
}

2313 
check_obje˘_ªœti⁄s
 
	$P1
 (
∑r£_°©e_t
 *, 
°©e
) {

2314 
i
, 
dúe˘
 = -1, 
ödúe˘
 = -1;

2315 
u£_ödúe˘
;

2316 
bôvec_t
 *
dú_objs
, *
ödú_objs
;

2317 
j
, 
k
, 
l
, 
m
, 
n
, 
ªt
;

2318 
found_dúe˘
 = -1, 
found_ödúe˘
 = -1;

2319 
dúe˘_unique
, 
ödúe˘_unique
;

2320 
found_somëhög
;

2321 
dúe˘_‹döÆ
, 
föished
 = 0;

2322 
bôvec_t
 
ödúe˘s
, 
dúe˘s
;

2323 
∑r£r_îr‹_t
 
îr
;

2325 
	`bôvec_zîo
(&
dúe˘s
);

2326 
	`bôvec_zîo
(&
ödúe˘s
);

2327 
îr
.
îr‹_ty≥
 = 0;

2328 
i
 = 0; i < 
°©e
->
num_m©ches
; i++) {

2329 i‡(
m©ches
[
i
].
tokí
 & 
OBJ_A_TOKEN
) {

2330 i‡(
dúe˘
 < 0Ëdúe˘ = 
i
; 
ödúe˘
 = i;

2331 } i‡(
m©ches
[
i
].
tokí
 =
ERROR_TOKEN
) ;

2333 i‡(
m©ches
[
ödúe˘
].
‹döÆ
) {

2340 
‹d
;

2341 
bôvec_t
 *
bv
 = &
m©ches
[
ödúe˘
].
vÆ
.
obs
;

2343 
‹d
 = 
m©ches
[
ödúe˘
].
‹döÆ
;

2344 i‡(
‹d
 > 0Ë
i
 = 0;

2345 ; 
i
 < 
bv
->
œ°
; i++) {

2346 i‡(
bv
->
b
[
i
]) {

2347 
j
 = 1, 
k
 = 0;

2348 
j
) {

2349 i‡(
bv
->
b
[
i
] & 
j
) {

2351 i‡(!--
‹d
) {

2352 
	`bôvec_zîo
(
bv
);

2353 
	`bôvec_£t
(
bv
, 
u£_ödúe˘
 = 
BPI
 * 
i
 + 
k
);

2357 
j
 <<1, 
k
++;

2361 i‡(
‹d
) {

2363 
m©ches
[
ödúe˘
].
tokí
 = 
ERROR_TOKEN
;

2364 i‡(
°©e
->
num_îr‹s
++ == 0) {

2365 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2366 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_ORDINAL
;

2367 
cuºít_îr‹_öfo
.
îr
.
‹d_îr‹
 = 
	`bôvec_cou¡
(
bv
) + 1;

2373 
dúe˘_cou¡
 = 
	`bôvec_cou¡
(&
dúe˘s
);

2374 
ödúe˘_cou¡
 = 
	`bôvec_cou¡
(&
ödúe˘s
);

2379 i‡(
dúe˘_cou¡
 * 
ödúe˘_cou¡
 >= 80) {

2380 
°©e
->
num_îr‹s
++;

2381 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2382 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_MANY_PATHS
;

2386 
dú_objs
 = &
m©ches
[
dúe˘
].
vÆ
.
obs
;

2387 
ödú_objs
 = &
m©ches
[
ödúe˘
].
vÆ
.
obs
;

2389 
dúe˘_unique
 = !(
m©ches
[
dúe˘
].
tokí
 & 
PLURAL_MODIFIER
);

2390 
ödúe˘_unique
 = !(
m©ches
[
ödúe˘
].
tokí
 & 
PLURAL_MODIFIER
);

2392 i‡(!(
dúe˘_‹döÆ
 = 
m©ches
[
dúe˘
].
‹döÆ
)) direct_ordinal = -1;

2394 
i
 = 0; !
föished
 && i < 
dú_objs
->
œ°
; i++Ëi‡(dú_objs->
b
[i]) {

2395 
j
 = 1, 
k
 = 0; j ; j <<=1, k++Ëi‡(
dú_objs
->
b
[
i
] & j) {

2400 
dúe˘_obje˘
 = 
BPI
 * 
i
 + 
k
;

2401 
found_somëhög
 = 0;

2402 
l
 = 0;Ü < 
ödú_objs
->
œ°
;Ü++Ëi‡(ödú_objs->
b
[l]) {

2403 
m
 = 1, 
n
 = 0; m ; m <<1,Ç++Ëi‡(
ödú_objs
->
b
[
l
] & m) {

2408 
ödúe˘_obje˘
 = 
BPI
 * 
l
 + 
n
;

2410 
ªt
 = 
	`check_⁄e_ªœti⁄
(
°©e
, 
ödúe˘_unique
, &
îr
);

2416 i‡(!(
ªt
 & 
CHECK_RELATION_COMPLETE
)) ;

2419 i‡(
ödúe˘_unique
 && 
found_ödúe˘
 >= 0) {

2420 i‡(
found_ödúe˘
 !
ödúe˘_obje˘
) {

2421 
m©ches
[
ödúe˘
].
tokí
 = 
ERROR_TOKEN
;

2422 i‡(
°©e
->
num_îr‹s
++ == 0) {

2423 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2425 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_AMBIG
;

2426 
	`bôvec_c›y
(&
cuºít_îr‹_öfo
.
îr
.
obs
,

2427 &
m©ches
[
ödúe˘
].
vÆ
.
obs
);

2429 
	`‰ì_∑r£r_îr‹
(&
îr
);

2433 i‡(
dúe˘_‹döÆ
 > 0) direct_ordinal--;

2435 i‡(
dúe˘_‹döÆ
 <0 && 
dúe˘_unique
 && 
found_dúe˘
 >= 0) {

2436 i‡(
found_dúe˘
 !
dúe˘_obje˘
) {

2437 
m©ches
[
ödúe˘
].
tokí
 = 
ERROR_TOKEN
;

2438 i‡(
°©e
->
num_îr‹s
++ == 0) {

2439 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2441 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_AMBIG
;

2442 
	`bôvec_c›y
(&
cuºít_îr‹_öfo
.
îr
.
obs
,

2443 &
m©ches
[
dúe˘
].
vÆ
.
obs
);

2445 
	`‰ì_∑r£r_îr‹
(&
îr
);

2454 i‡(!(
ªt
 & 
CHECK_ERROR_RELATION
)) {

2455 i‡(
dúe˘_‹döÆ
 <= 0) {

2456 
	`bôvec_£t
(&
dúe˘s
, 
dúe˘_obje˘
);

2458 
	`bôvec_£t
(&
ödúe˘s
, 
ödúe˘_obje˘
);

2463 i‡(
dúe˘_‹döÆ
 <= 0)

2464 
found_dúe˘
 = 
dúe˘_obje˘
;

2465 
found_ödúe˘
 = 
ödúe˘_obje˘
;

2469 i‡(
found_dúe˘
 && (!
dúe˘_‹döÆ
 ||

2470 (
dúe˘_unique
 && (
m©ches
[
dúe˘
].
tokí
 & 
CHOOSE_MODIFIER
)))) {

2471 
föished
 = 1;

2477 
	`bôvec_c›y
(
dú_objs
, &
dúe˘s
);

2478 
	`bôvec_c›y
(
ödú_objs
, &
ödúe˘s
);

2479 i‡(
dúe˘_unique
Ë
m©ches
[
dúe˘
].
vÆ
.
numbî
 = 
found_dúe˘
;

2480 
m©ches
[
dúe˘
].
vÆ
.
numbî
 = 0;

2481 i‡(
ödúe˘_unique
Ë
m©ches
[
ödúe˘
].
vÆ
.
numbî
 = 
found_ödúe˘
;

2482 
m©ches
[
ödúe˘
].
vÆ
.
numbî
 = 0;

2484 i‡(
found_dúe˘
 < 0) {

2485 i‡(
	`u£_ˇched_∑øŒñ_îr‹
(
°©e
, &
îr
) ||

2486 
	`u£_œ°_∑øŒñ_îr‹
(
°©e
))

2487 
m©ches
[
dúe˘
].
tokí
 = 
ERROR_TOKEN
;

2488 } i‡(
found_ödúe˘
 < 0) {

2489 i‡(
	`u£_ˇched_∑øŒñ_îr‹
(
°©e
, &
îr
) ||

2490 
	`u£_œ°_∑øŒñ_îr‹
(
°©e
))

2491 
m©ches
[
ödúe˘
].
tokí
 = 
ERROR_TOKEN
;

2493 
	`‰ì_∑r£r_îr‹
(&
îr
);

2494 
	}
}

2496 
we_¨e_föished
 
	$P1
(
∑r£_°©e_t
 *, 
°©e
) {

2497 
func
[256];

2498 *
p
;

2499 
which
, 
mtch
;

2500 
åy
, 
¨gs
;

2502 
DEBUG_INC
;

2503 
	`DEBUG_P
(("we_are_finished"));

2505 i‡(
found_Àvñ
 < 2) found_level = 2;

2508 i‡(
be°_m©ch
 >
∑r£_vn
->
weight
) {

2509 
	`DEBUG_P
(("Haveá better match;áborting ..."));

2510 
DEBUG_DEC
;

2513 i‡(
°©e
->
num_îr‹s
) {

2514 i‡(
°©e
->
num_îr‹s
 > 
be°_num_îr‹s
) {

2515 
DEBUG_DEC
;

2518 i‡(
°©e
->
num_îr‹s
 =
be°_num_îr‹s


2519 && 
∑r£_vn
->
weight
 < 
be°_îr‹_m©ch
) {

2520 
DEBUG_DEC
;

2525 i‡(!
	`check_fun˘i⁄s
(
∑r£_u£r
, 
°©e
)) {

2526 
DEBUG_DEC
;

2530 
	`˛ór_∑øŒñ_îr‹s
(&
∑øŒñ_îr‹s
);

2531 
which
 = 1;

2532 
which
 = 1, 
mtch
 = 0; which < 3 && mtch < 
°©e
->
num_m©ches
; mtch++) {

2533 
tok
 = 
m©ches
[
mtch
].
tokí
;

2535 i‡(
tok
 =
ERROR_TOKEN
) {

2536 
which
++;

2540 i‡(!(
tok
 & 
OBJ_A_TOKEN
))

2543 i‡(
tok
 & 
PLURAL_MODIFIER
)

2544 
	`∂uøl_check_fun˘i⁄s
(
which
, 
°©e
, &
m©ches
[
mtch
]);

2545 i‡(
°©e
->
num_objs
 == 2)

2546 
	`dïídít_check_fun˘i⁄s
(
which
, 
°©e
, &
m©ches
[
mtch
]);

2548 
	`söguœr_check_fun˘i⁄s
(
which
, 
°©e
, &
m©ches
[
mtch
]);

2549 
which
++;

2552 i‡(
°©e
->
num_objs
 =2 && !°©e->
num_îr‹s
) {

2553 
	`check_obje˘_ªœti⁄s
(
°©e
);

2555 i‡(
°©e
->
num_îr‹s
) {

2556 
weight
 = 
∑r£_vn
->weight;

2558 i‡(
cuºít_îr‹_öfo
.
îr‹_ty≥
 =
ERR_THERE_IS_NO
) {

2563 
weight
 = 1;

2566 i‡(
°©e
->
num_îr‹s
 =
be°_num_îr‹s
 &&

2567 
weight
 <
be°_îr‹_m©ch
) {

2568 
	`DEBUG_P
(("Have better match;áborting ..."));

2569 
DEBUG_DEC
;

2572 
	`‰ì_∑r£r_îr‹
(&
be°_îr‹_öfo
);

2573 
be°_îr‹_öfo
 = 
cuºít_îr‹_öfo
;

2574 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 0;

2575 
be°_num_îr‹s
 = 
°©e
->
num_îr‹s
;

2576 
be°_îr‹_m©ch
 = 
weight
;

2578 
be°_m©ch
 = 
∑r£_vn
->
weight
;

2579 i‡(
be°_ªsu…
Ë
	`‰ì_∑r£_ªsu…
(best_result);

2580 
be°_ªsu…
 = 
	`ALLOCATE
(
∑r£_ªsu…_t
, 
TAG_PARSER
, "we_are_finished");

2581 
	`˛ór_ªsu…
(
be°_ªsu…
);

2582 i‡(
∑r£_vn
->
h™dÀr
->
Êags
 & 
O_DESTRUCTED
) {

2583 
DEBUG_DEC
;

2586 
be°_ªsu…
->
ob
 = 
∑r£_vn
->
h™dÀr
;

2587 
be°_ªsu…
->
∑øŒñ
 = 
∑øŒñ_îr‹s
;

2588 
∑øŒñ_îr‹s
 = 0;

2589 
	`add_ªf
(
∑r£_vn
->
h™dÀr
, "best_result");

2590 
åy
 = 0;Åry < 4;Åry++) {

2591 
¨gs
 = 
	`make_fun˘i⁄
(
func
, 
	`EndOf
(func), 3, 
°©e
, 
åy
, 0);

2592 
¨gs
 +
	`push_ªÆ_«mes
(
åy
, 3);

2593 
be°_ªsu…
->
ªs
[
åy
].
func
 = 
	`°rög_c›y
(func, "best_result");

2594 
be°_ªsu…
->
ªs
[
åy
].
num
 = 
¨gs
;

2595 i‡(
¨gs
) {

2596 
p
 = (*)(
be°_ªsu…
->
ªs
[
åy
].
¨gs
 = 
	`CALLOCATE
(args,

2597 
svÆue_t
, 
TAG_PARSER
, "best_result"));

2598 
	`mem˝y
(
p
, (*)(
•
 - 
¨gs
 + 1),árg†* (
svÆue_t
));

2599 
•
 -
¨gs
;

2602 
	`DEBUG_P
(("Savög suc˚ssfu»m©ch: %†(%s)", 
be°_ªsu…
->
ªs
[0].
func
,

2603 
be°_ªsu…
->
ob
->
«me
));

2605 
DEBUG_DEC
;

2606 
	}
}

2608 
do_the_ˇŒ
 
PROT
(()) {

2609 
	gi
, 
	gn
;

2610 
obje˘_t
 *
	gob
 = 
be°_ªsu…
->
ob
;

2612 
	gi
 = 0; i < 4; i++) {

2613 i‡(
	gob
->
	gÊags
 & 
	gO_DESTRUCTED
) ;

2614 
	gn
 = 
be°_ªsu…
->
ªs
[
i
].
num
;

2615 i‡(
	gn
) {

2616 
CHECK_STACK_OVERFLOW
(
n
);

2617 
mem˝y
((*)(
•
 + 1), 
be°_ªsu…
->
ªs
[
i
].
¨gs
, 
n
*(
svÆue_t
));

2622 
	gn
--) {

2623 i‡((++
	g•
)->
	gty≥
 =
T_OBJECT
 && (
•
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
)) {

2624 
‰ì_obje˘
(
•
->
u
.
ob
, "do_the_call");

2625 *
	g•
 = 
c⁄°0u
;

2628 
FREE
(
be°_ªsu…
->
ªs
[
i
].
¨gs
);

2630 
	gbe°_ªsu…
->
	gªs
[
i
].
	g¨gs
 = 0;

2631 
DEBUG_P
(("CÆlög %†...", 
be°_ªsu…
->
ªs
[
i
].
func
));

2632 i‡(
≠∂y
(
be°_ªsu…
->
ªs
[
i
].
func
, 
ob
,

2633 
be°_ªsu…
->
ªs
[
i
].
num
, 
ORIGIN_DRIVER
)) ;

2635 
îr‹
("Parseáccepted, butÇo do_* function found in object /%s!\n",

2636 
ob
->
«me
);

2639 
∑r£_ruÀ
 
	$P1
(
∑r£_°©e_t
 *, 
°©e
) {

2640 
tok
;

2641 
∑r£_°©e_t
 
loˇl_°©e
;

2642 
m©ch_t
 *
mp
;

2643 
°¨t
;

2645 
DEBUG_INC
;

2646 
	`DEBUG_P
(("parse_rule"));

2648 
tok
 = 
∑r£_vn
->
tokí
[
°©e
->
tok_ödex
++];

2649 i‡(
°©e
->
w‹d_ödex
 =
num_w‹ds
 && 
tok
) {

2650 
	`DEBUG_P
(("Ran out of wordsÅoÖarse."));

2651 
DEBUG_DEC
;

2654 
tok
 & ~
CHOOSE_MODIFIER
) {

2656 i‡(
°©e
->
w‹d_ödex
 =
num_w‹ds
)

2657 
	`we_¨e_föished
(
°©e
);

2658 
	`DEBUG_P
(("exitingÖarse_rule ..."));

2659 
DEBUG_DEC
;

2661 
OBJ_TOKEN
:

2662 
LIV_TOKEN
:

2663 
OBJ_A_TOKEN
:

2664 
LIV_A_TOKEN
:

2665 
OBS_TOKEN
:

2666 
	`ADD_MOD
(
OBS_TOKEN
, 
VIS_ONLY_MODIFIER
):

2667 
LVS_TOKEN
:

2668 
	`ADD_MOD
(
LVS_TOKEN
, 
VIS_ONLY_MODIFIER
):

2669 
loˇl_°©e
 = *
°©e
;

2670 
	`∑r£_obj
(
tok
, &
loˇl_°©e
, 0);

2671 i‡(!
be°_m©ch
 && !
be°_îr‹_m©ch
) {

2672 
°¨t
 = 
°©e
->
w‹d_ödex
++;

2673 
°©e
->
w‹d_ödex
 <
num_w‹ds
) {

2674 
loˇl_°©e
 = *
°©e
;

2675 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2676 
mp
 = 
	`add_m©ch
(&
loˇl_°©e
, 
ERROR_TOKEN
,

2677 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

2678 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_THERE_IS_NO
;

2679 
cuºít_îr‹_öfo
.
îr
.
°r_¥obÀm
.
°¨t
 = start;

2680 
cuºít_îr‹_öfo
.
îr
.
°r_¥obÀm
.
íd
 = 
°©e
->
w‹d_ödex
 - 1;

2681 
	`∑r£_ruÀ
(&
loˇl_°©e
);

2682 
°©e
->
w‹d_ödex
++;

2685 
	`DEBUG_P
(("DoneÅryingÅo match OBJ"));

2686 
DEBUG_DEC
;

2688 
STR_TOKEN
:

2689 i‡(!
∑r£_vn
->
tokí
[
°©e
->
tok_ödex
]) {

2691 
°¨t
 = 
°©e
->
w‹d_ödex
;

2692 
°©e
->
w‹d_ödex
 = 
num_w‹ds
;

2693 
	`add_m©ch
(
°©e
, 
STR_TOKEN
, 
°¨t
, 
num_w‹ds
 - 1);

2694 
	`DEBUG_P
(("TakingÑest of sentenceás STR"));

2695 
	`∑r£_ruÀ
(
°©e
);

2697 
°¨t
 = 
°©e
->
w‹d_ödex
++;

2698 
°©e
->
w‹d_ödex
 <
num_w‹ds
) {

2699 
loˇl_°©e
 = *
°©e
;

2700 
	`add_m©ch
(&
loˇl_°©e
, 
STR_TOKEN
,

2701 
°¨t
, 
°©e
->
w‹d_ödex
 - 1);

2702 
	`DEBUG_P
(("TryingÖotential STR match"));

2703 
	`∑r£_ruÀ
(&
loˇl_°©e
);

2704 
°©e
->
w‹d_ödex
++;

2707 
	`DEBUG_P
(("DoneÅryingÅo match STR"));

2708 
DEBUG_DEC
;

2710 
WRD_TOKEN
:

2711 
	`add_m©ch
(
°©e
, 
WRD_TOKEN
, sèã->
w‹d_ödex
, state->word_index);

2712 
°©e
->
w‹d_ödex
++;

2713 
	`DEBUG_P
(("Trying WRD match"));

2714 
	`∑r£_ruÀ
(
°©e
);

2715 
DEBUG_DEC
;

2718 i‡(
lôîÆs
[-(
tok
 + 1)] =
w‹ds
[
°©e
->
w‹d_ödex
].
°rög
) {

2719 
°©e
->
w‹d_ödex
++;

2720 
	`DEBUG_P
(("M©chedÜôîÆ: %s", 
lôîÆs
[-(
tok
 + 1)]));

2722 i‡(
°©e
->
tok_ödex
 == 1) {

2723 
DEBUG_DEC
;

2727 
	`DEBUG_P
(("last matchÅoÉrror ..."));

2728 
∑r£_vn
->
tokí
[
°©e
->
tok_ödex
 - 2]) {

2729 
STR_TOKEN
:

2730 
	`DEBUG_P
(("Nope. STRÑuleÜast."));

2731 
DEBUG_DEC
;

2733 
OBJ_TOKEN
:

2734 
LIV_TOKEN
:

2735 
OBJ_A_TOKEN
:

2736 
LIV_A_TOKEN
:

2737 
OBS_TOKEN
:

2738 
	`ADD_MOD
(
OBS_TOKEN
, 
VIS_ONLY_MODIFIER
):

2739 
LVS_TOKEN
:

2740 
	`ADD_MOD
(
LVS_TOKEN
, 
VIS_ONLY_MODIFIER
):

2742 
m©ch_t
 *
œ°
;

2744 
lôîÆs
[-(
tok
 + 1)] !
w‹ds
[
°©e
->
w‹d_ödex
++].
°rög
) {

2745 i‡(
°©e
->
w‹d_ödex
 =
num_w‹ds
) {

2746 
	`DEBUG_P
(("LiteralÇot found in forward search"));

2747 
DEBUG_DEC
;

2751 
œ°
 = &
m©ches
[
°©e
->
num_m©ches
-1];

2752 
	`DEBUG_P
(("ChangingÜast match."));

2753 
œ°
->
tokí
 = 
ERROR_TOKEN
;

2754 
œ°
->œ° = 
°©e
->
w‹d_ödex
-1;

2755 i‡(
°©e
->
num_îr‹s
++ == 0) {

2756 
	`‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2757 
cuºít_îr‹_öfo
.
îr‹_ty≥
 = 
ERR_THERE_IS_NO
;

2758 
cuºít_îr‹_öfo
.
îr
.
°r_¥obÀm
.
°¨t
 = 
œ°
->
fú°
;

2759 
cuºít_îr‹_öfo
.
îr
.
°r_¥obÀm
.
íd
 = 
°©e
->
w‹d_ödex
 - 1;

2764 
	`DEBUG_P
(("default case"));

2765 
DEBUG_DEC
;

2771 
DEBUG_DEC
;

2772 
	}
}

2774 
check_lôîÆ
 
	$P2
(, 
lô
, , 
°¨t
) {

2775 
	`DEBUG_PP
(("check_lôîÆ: %s", 
lôîÆs
[
lô
]));

2777 
°¨t
 < 
num_w‹ds
) {

2778 i‡(
lôîÆs
[
lô
] =
w‹ds
[
°¨t
++].
°rög
) {

2779 
	`DEBUG_PP
(("yes"));

2780  
°¨t
;

2783 
	`DEBUG_PP
(("no"));

2785 
	}
}

2787 
∑r£_ruÀs
 
PROT
(()) {

2788 
	gpos
;

2789 
∑r£_°©e_t
 
	gloˇl_°©e
;

2791 
	g∑r£_vn
 = 
∑r£_vîb_íåy
->
node
;

2792 
	g∑r£_vn
) {

2793 
DEBUG_PP
(("RuÀ: %s", 
ruÀ_°rög
(
∑r£_vn
)));

2794 i‡((!
	g∑r£_ª°ri˘ed
 || 
	g∑r£_vn
->
	gh™dÀr
 =
∑r£_ª°ri˘ed
)

2795 && (
be°_m©ch
 <
∑r£_vn
->
weight
)) {

2796 
pos
 = 0;

2797 i‡((
	g∑r£_vn
->
	glô
[0] == -1 ||

2798 (
pos
 = 
check_lôîÆ
(
∑r£_vn
->
lô
[0], 1)))

2799 && (
	g∑r£_vn
->
	glô
[1] == -1 ||

2800 
check_lôîÆ
(
∑r£_vn
->
lô
[1], 
pos
))) {

2801 
DEBUG_P
(("TryögÑuÀ: %s", 
ruÀ_°rög
(
∑r£_vn
)));

2803 
	gloˇl_°©e
.
	gtok_ödex
 = 0;

2804 
	gloˇl_°©e
.
	gw‹d_ödex
 = 1;

2805 
	gloˇl_°©e
.
	gnum_m©ches
 = 0;

2806 
	gloˇl_°©e
.
	gnum_îr‹s
 = 0;

2807 
	gloˇl_°©e
.
	gnum_objs
 = 0;

2808 
∑r£_ruÀ
(&
loˇl_°©e
);

2811 
	g∑r£_vn
 = 
∑r£_vn
->
√xt
;

2815 
ª£t_îr‹
 
PROT
(()) {

2816 
	gbe°_m©ch
 = 0;

2817 
	gbe°_îr‹_m©ch
 = 0;

2818 
	gbe°_num_îr‹s
 = 5732;

2819 
‰ì_∑r£r_îr‹
(&
cuºít_îr‹_öfo
);

2820 
‰ì_∑r£r_îr‹
(&
be°_îr‹_öfo
);

2823 
∑r£_ªcur£
 
	$P3
(**, 
iw‹ds
, **, 
o°¨t
, **, 
€nd
) {

2824 
buf
[1024];

2825 *
p
, *
q
;

2826 **
iwp
 = 
iw‹ds
;

2827 
fú°
 = 1;

2828 
l
, 
idx
;

2830 i‡(*
iw‹ds
[0]) {

2831 *
buf
 = 0;

2832 
p
 = 
buf
;

2834 
l
 = 
iwp
[1] - iwp[0] - 1;

2835 
	`°r˝y
(
p
, *
iwp
++);

2836 
p
 +
l
;

2837 i‡((
q
 = 
	`föd°rög
(
buf
))) {

2838 
w‹ds
[
num_w‹ds
].
ty≥
 = 0;

2839 
w‹ds
[
num_w‹ds
].
°¨t
 = 
o°¨t
[0];

2840 
w‹ds
[
num_w‹ds
].
íd
 = 
€nd
[
iwp
 - 
iw‹ds
 - 1];

2841 
w‹ds
[
num_w‹ds
++].
°rög
 = 
q
;

2842 
idx
 = 
iwp
 - 
iw‹ds
;

2843 
	`∑r£_ªcur£
(
iwp
, 
o°¨t
 + 
idx
, 
€nd
 + idx);

2844 
num_w‹ds
--;

2845 } i‡(
fú°
) {

2846 
l
 = 
p
 - 
buf
;

2847 
w‹ds
[
num_w‹ds
].
ty≥
 = 
WORD_ALLOCATED
;

2848 
w‹ds
[
num_w‹ds
].
°rög
 = 
	`√w_°rög
(
l
, "parse_recurse");

2849 
w‹ds
[
num_w‹ds
].
°¨t
 = 
o°¨t
[0];

2850 
w‹ds
[
num_w‹ds
].
íd
 = 
€nd
[
iwp
 - 
iw‹ds
 - 1];

2851 
	`mem˝y
(
w‹ds
[
num_w‹ds
].
°rög
, 
buf
, 
l
);

2852 
w‹ds
[
num_w‹ds
++].
°rög
[
l
] = 0;

2853 
idx
 = 
iwp
 - 
iw‹ds
;

2854 
	`∑r£_ªcur£
(
iwp
, 
o°¨t
 + 
idx
, 
€nd
 + idx);

2855 
num_w‹ds
--;

2856 
	`FREE_MSTR
(
w‹ds
[
num_w‹ds
].
°rög
);

2858 
fú°
 = 0;

2859 *
p
++ = ' ';

2860 } *
iwp
[0]);

2862 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
PARSE_DEBUG
)

2863 i‡(
debug_∑r£_dïth
) {

2864 
dbuf
[1024];

2865 *
íd
 = 
	`EndOf
(
dbuf
);

2866 
i
;

2867 *
p
;

2868 
p
 = 
	`°Ωut
(
dbuf
, 
íd
, "Trying interpretation: ");

2869 
i
 = 0; i < 
num_w‹ds
; i++) {

2870 
p
 = 
	`°Ωut
’, 
íd
, 
w‹ds
[
i
].
°rög
);

2871 
p
 = 
	`°Ωut
’, 
íd
, ":");

2873 
	`DEBUG_P
((
dbuf
));

2876 
	`∑r£_ruÀs
();

2878 
	}
}

2880 
∑r£_£¡í˚
 
	$P1
(*, 
öput
) {

2881 *
°¨ts
[
MAX_WORDS_PER_LINE
];

2882 *
‹ig_°¨ts
[
MAX_WORDS_PER_LINE
];

2883 *
‹ig_íds
[
MAX_WORDS_PER_LINE
];

2884 
buf
[
MAX_WORD_LENGTH
], *
p
, *
°¨t
;

2885 
c
, *
öp
;

2886 *
íd
 = 
	`EndOf
(
buf
) - 1;

2887 
n
 = 0;

2888 
i
;

2889 
Êag
;

2891 
	`ª£t_îr‹
();

2892 
	`‰ì_w‹ds
();

2893 
p
 = 
°¨t
 = 
buf
;

2894 
Êag
 = 0;

2895 
öp
 = 
öput
;

2896 *
öp
 && (
	`uis•a˚
(*öpË|| 
	`isign‹e
(*inp)))

2897 
öp
++;

2898 
‹ig_°¨ts
[0] = 
öp
;

2900 (
c
 = *
öp
++)) {

2901 i‡(
	`isign‹e
(
c
)) ;

2902 i‡(
	`uisuµî
(
c
))

2903 
c
 = 
	`tﬁowî
(c);

2904 i‡(
	`iskìp
(
c
Ë&& 
p
 < 
íd
) {

2905 i‡(!
Êag
)

2906 
Êag
 = 1;

2907 *
p
++ = 
c
;

2908 i‡(
p
 =
íd
) ;

2911 i‡(!
	`uis•a˚
(
c
))

2912 *
öp
 && !
	`iskìp
(*öpË&& !
	`uis•a˚
(*inp))

2913 
öp
++;

2915 
öp
--;

2917 i‡(
Êag
) {

2918 
Êag
 = 0;

2919 *
p
++ = 0;

2920 
‹ig_íds
[
n
] = 
öp
 - 1;

2921 
°¨ts
[
n
++] = 
°¨t
;

2922 i‡(
n
 =
MAX_WORDS_PER_LINE
)

2924 
°¨t
 = 
p
;

2925 *
öp
 && 
	`uis•a˚
(*inp))

2926 
öp
++;

2927 
‹ig_°¨ts
[
n
] = 
öp
;

2928 i‡(
p
 =
íd
)

2931 *
öp
 && 
	`uis•a˚
(*inp))

2932 
öp
++;

2936 i‡(
Êag
) {

2937 *
p
++ = 0;

2938 
‹ig_íds
[
n
] = 
öp
 - 2;

2939 
°¨ts
[
n
++] = 
°¨t
;

2940 i‡(
n
 =
MAX_WORDS_PER_LINE
)

2943 i‡(
n
)

2944 
‹ig_íds
[
n
 - 1] = 
öp
 - 2;

2946 
‹ig_íds
[0] = 
öp
 - 2;

2948 i‡(
p
 > 
íd
) {

2949 
°¨ts
[
n
] = 
íd
;

2951 
°¨ts
[
n
] = 
p
;

2952 *
p
 = 0;

2956 
i
 = 1; i <
n
; i++) {

2957 *
vb
 = 
	`föd°rög
(
buf
);

2958 
vîb_t
 *
ve
;

2960 i‡(
vb
) {

2961 
ve
 = 
vîbs
[
	`DO_HASH
(
vb
, 
VERB_HASH_SIZE
)];

2962 
ve
) {

2963 i‡(
ve
->
ªÆ_«me
 =
vb
) {

2964 i‡(
ve
->
Êags
 & 
VB_IS_SYN
)

2965 
∑r£_vîb_íåy
 = ((
vîb_syn_t
 *)
ve
)->
ªÆ
;

2967 
∑r£_vîb_íåy
 = 
ve
;

2969 
w‹ds
[0].
°rög
 = 
vb
;

2970 
w‹ds
[0].
ty≥
 = 0;

2972 i‡(
found_Àvñ
 < 1) found_level = 1;

2973 i‡(!
obje˘s_lﬂded
 &&

2974 (
∑r£_vîb_íåy
->
Êags
 & 
VB_HAS_OBJ
))

2975 
	`lﬂd_obje˘s
();

2976 
num_w‹ds
 = 1;

2977 
w‹ds
[0].
°¨t
 = 
‹ig_°¨ts
[0];

2978 
w‹ds
[0].
íd
 = 
‹ig_íds
[
i
-1];

2979 
	`∑r£_ªcur£
(&
°¨ts
[
i
], &
‹ig_°¨ts
[i], &
‹ig_íds
[i]);

2981 
ve
 = ve->
√xt
;

2984 
°¨ts
[
i
][-1] = ' ';

2986 
	}
}

2988 
svÆue_t
 * 
gë_the_îr‹
 
	$P2
(
∑r£r_îr‹_t
 *, 
îr
, , 
obj
) {

2989 
tmp
 = 
îr
->
îr‹_ty≥
;

2990 
svÆue_t
 
hack
 = { 
T_NUMBER
 };

2992 
îr
->
îr‹_ty≥
 = 0;

2993 
	`push_numbî
(
tmp
);

2994 i‡(
obj
 =-1 || (
lﬂded_obje˘s
[obj]->
Êags
 & 
O_DESTRUCTED
))

2995 
	`push_undeföed
();

2997 
	`push_obje˘
(
lﬂded_obje˘s
[
obj
]);

2999 
tmp
) {

3000 
ERR_IS_NOT
:

3001 
ERR_NOT_LIVING
:

3002 
ERR_NOT_ACCESSIBLE
:

3003 
	`push_sh¨ed_°rög
(
îr
->îr.
noun
->
«me
);

3004 
	`push_numbî
(
	`gë_sögÀ
(&
îr
->îr.
noun
->
pv
.noun) == -1);

3005  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 4);

3006 
ERR_AMBIG
:

3007 
	`push_bôvec_as_¨øy
(&
îr
->îr.
obs
, 0);

3008  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 3);

3009 
ERR_ORDINAL
:

3010 
	`push_numbî
(
îr
->îr.
‹d_îr‹
);

3011  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 3);

3012 
ERR_THERE_IS_NO
:

3013 
	`push_w‹ds
(
îr
->îr.
°r_¥obÀm
.
°¨t
,

3014 
îr
->îr.
°r_¥obÀm
.
íd
);

3015  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 3);

3016 
ERR_ALLOCATED
:

3017 
	`push_mÆlo˚d_°rög
(
îr
->îr.
°r
);

3018  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 3);

3019 
ERR_BAD_MULTIPLE
:

3020  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 2);

3021 
ERR_MANY_PATHS
:

3022  
	`≠∂y_ma°î_ob
(
APPLY_PARSER_ERROR_MESSAGE
, 5);

3024 
	`p›_°ack
();

3025 
•
--;

3026 
hack
.
u
.
numbî
 = -
found_Àvñ
;

3027  &
hack
;

3029 
	}
}

3031 
f_∑r£_£¡í˚
 
PROT
(()) {

3032 i‡(!
	gcuºít_obje˘
->
	gpöfo
)

3033 
îr‹
("/%s isÇot known byÅheÖarser. CallÖarse_init() first.\n",

3034 
cuºít_obje˘
->
«me
);

3036 i‡(
	gpi
)

3037 
îr‹
("IllegalÅo callÖarse_sentence()Ñecursively.\n");

3042 i‡(
	gbe°_ªsu…
) {

3043 
‰ì_∑r£_ªsu…
(
be°_ªsu…
);

3044 
	gbe°_ªsu…
 = 0;

3047 i‡(
	g°_num_¨g
 == 4)

3048 
∑r£_nicks
 = (
•
--)->
u
.
m≠
;

3050 i‡(
	g°_num_¨g
 >= 3)

3051 
∑r£_ív
 = (
•
--)->
u
.
¨r
;

3053 i‡(
	g°_num_¨g
 >2 && (
•
--)->
u
.
numbî
) {

3054 #i‡
deföed
(
DEBUG
Ë|| deföed(
PARSE_DEBUG
)

3055 
debug_∑r£_dïth
 = 1;

3056 i‡((
	g•
 + 1)->
	gu
.
	gnumbî
 > 1)

3057 
	gdebug_∑r£_vîbo£
 = 1;

3059 
	gdebug_∑r£_vîbo£
 = 0;

3061 
	gdebug_∑r£_dïth
 = 0;

3063 
îr‹
("Parser debuggingÇotÉnabled. (compile with -DDEBUG or -DPARSE_DEBUG).\n");

3067 
	gSTACK_INC
;

3068 
	g•
->
	gty≥
 = 
T_ERROR_HANDLER
;

3069 
	g•
->
	gu
.
	gîr‹_h™dÀr
 = 
‰ì_∑r£_globÆs
;

3071 
	g∑r£_u£r
 = 
cuºít_obje˘
;

3072 
	gpi
 = 
cuºít_obje˘
->
pöfo
;

3073 
	g∑r£_ª°ri˘ed
 = 0;

3074 
	gfound_Àvñ
 = 0;

3075 
∑r£_£¡í˚
((
•
-1)->
u
.
°rög
);

3077 i‡(
	gbe°_m©ch
) {

3078 
	g•
--;

3079 
‰ì_∑r£_globÆs
();

3081 
do_the_ˇŒ
();

3082 
‰ì_°rög_svÆue
(
•
);

3083 
put_numbî
(1);

3085 
svÆue_t
 *
	gªt
 = 
gë_the_îr‹
(&
be°_îr‹_öfo
, -1);

3087 
	g•
--;

3088 
‰ì_∑r£_globÆs
();

3090 
‰ì_°rög_svÆue
(
•
);

3091 i‡(
	gªt
) {

3092 *
	g•
 = *
ªt
;

3093 
	gªt
->
	gty≥
 = 
T_NUMBER
;

3095 *
	g•
 = 
c⁄°0
;

3098 i‡(
	gbe°_ªsu…
) {

3099 
‰ì_∑r£_ªsu…
(
be°_ªsu…
);

3100 
	gbe°_ªsu…
 = 0;

3104 
f_∑r£_my_ruÀs
 
PROT
(()) {

3105 
	gÊag
 = (
°_num_¨g
 =3 ? (
•
--)->
u
.
numbî
 : 0);

3107 i‡(!(
	g•
-1)->
	gu
.
	gob
->
	gpöfo
)

3108 
îr‹
("/%s isÇot known byÅheÖarser. CallÖarse_init() first.\n",

3109 (
•
-1)->
u
.
ob
->
«me
);

3110 i‡(!
	gcuºít_obje˘
->
	gpöfo
)

3111 
îr‹
("/%s isÇot known byÅheÖarser. CallÖarse_init() first.\n",

3112 
cuºít_obje˘
->
«me
);

3114 i‡(
	gpi
)

3115 
îr‹
("IllegalÅo callÖarse_sentence()Ñecursively.\n");

3117 
	gSTACK_INC
;

3118 
	g•
->
	gty≥
 = 
T_ERROR_HANDLER
;

3119 
	g•
->
	gu
.
	gîr‹_h™dÀr
 = 
‰ì_∑r£_globÆs
;

3121 
	g∑r£_u£r
 = (
•
-2)->
u
.
ob
;

3122 
	gpi
 = 
∑r£_u£r
->
pöfo
;

3123 
	g∑r£_ª°ri˘ed
 = 
cuºít_obje˘
;

3124 
∑r£_£¡í˚
((
•
-1)->
u
.
°rög
);

3126 i‡(
	gbe°_m©ch
) {

3127 i‡(
	gÊag
) {

3128 
do_the_ˇŒ
();

3129 
	g•
--;

3130 
‰ì_°rög_svÆue
(
•
--);

3131 
‰ì_svÆue
(
•
, "parse_my_rules");

3132 
put_numbî
(1);

3134 
	gn
;

3135 
¨øy_t
 *
	g¨r
;

3137 
	gn
 = 
be°_ªsu…
->
ªs
[3].
num
;

3138 
	g¨r
 = 
Æloˇã_em±y_¨øy
(
n
);

3139 i‡(
	gn
) {

3140 
mem˝y
((*)
¨r
->
ôem
, 
be°_ªsu…
->
ªs
[3].
¨gs
, 
n
*(
svÆue_t
));

3141 
	gn
--) {

3142 i‡(
	g¨r
->
	gôem
[
n
].
	gty≥
 =
T_OBJECT
 && 
¨r
->
ôem
[n].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
) {

3143 
‰ì_obje˘
(
¨r
->
ôem
[
n
].
u
.
ob
, "parse_my_rules");

3144 
	g¨r
->
	gôem
[
n
] = 
c⁄°0u
;

3147 
FREE
(
be°_ªsu…
->
ªs
[3].
¨gs
);

3149 
	gbe°_ªsu…
->
	gªs
[3].
	g¨gs
 = 0;

3150 
	g•
--;

3151 
‰ì_°rög_svÆue
(
•
--);

3152 
‰ì_svÆue
(
•
, "parse_my_rules");

3153 
put_¨øy
(
¨r
);

3156 
svÆue_t
 *
	gªt
 = 
gë_the_îr‹
(&
be°_îr‹_öfo
, -1);

3158 
	g•
--;

3159 
‰ì_°rög_svÆue
(
•
--);

3160 
‰ì_svÆue
(
•
, "parse_my_rules");

3161 i‡(
	gªt
) {

3162 *
	g•
 = *
ªt
;

3163 
	gªt
->
	gty≥
 = 
T_NUMBER
;

3165 *
	g•
 = 
c⁄°0
;

3168 
‰ì_∑r£_globÆs
();

3171 
	$f_∑r£_ªmove
() {

3172 *
vîb
;

3173 
vîb_t
 *
vîb_íåy
;

3175 
vîb
 = 
	`SHARED_STRING
(
•
);

3176 
vîb_íåy
 = 
vîbs
[
	`DO_HASH
(
vîb
, 
VERB_HASH_SIZE
)];

3177 
vîb_íåy
) {

3178 i‡(
vîb_íåy
->
m©ch_«me
 =
vîb
) {

3179 
vîb_node_t
 **
vn
 = &(
vîb_íåy
->
node
), *
ﬁd
;

3180 *
vn
) {

3181 i‡((*
vn
)->
h™dÀr
 =
cuºít_obje˘
) {

3182 
ﬁd
 = *
vn
;

3183 *
vn
 = (*vn)->
√xt
;

3184 
	`FREE
(
ﬁd
);

3185 } 
vn
 = &((*vn)->
√xt
);

3188 
vîb_íåy
 = vîb_íåy->
√xt
;

3190 
	`‰ì_°rög_svÆue
(
•
--);

3191 
	}
}

3193 
	$f_∑r£_add_ruÀ
() {

3194 
tokís
[10];

3195 
lô
[2], 
i
, 
j
;

3196 
svÆue_t
 *
ªt
;

3197 *
vîb
, *
ruÀ
;

3198 
obje˘_t
 *
h™dÀr
;

3199 
vîb_t
 *
vîb_íåy
;

3200 
vîb_node_t
 *
vîb_node
;

3201 
h
;

3202 
weight
;

3204 
ruÀ
 = 
•
->
u
.
°rög
;

3205 
vîb
 = 
	`SHARED_STRING
(
•
-1);

3206 
vîb_íåy
 = 0;

3207 
h™dÀr
 = 
cuºít_obje˘
;

3208 i‡(!(
h™dÀr
->
pöfo
))

3209 
	`îr‹
("/%s isÇot known byÅheÖarser. CallÖarse_init() first.\n",

3210 
h™dÀr
->
«me
);

3213 
	`öãºog©e_ma°î
();

3216 
	`make_ruÀ
(
ruÀ
, 
tokís
, &
weight
);

3219 i‡(
vîb
) {

3220 
vîb_íåy
 = 
vîbs
[
	`DO_HASH
(
vîb
, 
VERB_HASH_SIZE
)];

3221 
vîb_íåy
) {

3222 i‡(
vîb_íåy
->
m©ch_«me
 =
vîb
 &&

3223 
vîb_íåy
->
ªÆ_«me
 =
vîb
 &&

3224 !(
vîb_íåy
->
Êags
 & 
VB_IS_SYN
))

3226 
vîb_íåy
 = vîb_íåy->
√xt
;

3230 i‡(!
vîb_íåy
) {

3231 i‡(!
vîb
)

3232 
vîb
 = 
	`make_sh¨ed_°rög
((
•
-1)->
u
.
°rög
);

3234 
	`ªf_°rög
(
vîb
);

3236 
h
 = 
	`DO_HASH
(
vîb
, 
VERB_HASH_SIZE
);

3237 
vîb_íåy
 = 
	`ALLOCATE
(
vîb_t
, 
TAG_PARSER
, "parse_add_rule");

3238 
vîb_íåy
->
ªÆ_«me
 = 
vîb
;

3239 
	`ªf_°rög
(
vîb
);

3240 
vîb_íåy
->
m©ch_«me
 = 
vîb
;

3241 
vîb_íåy
->
node
 = 0;

3242 
vîb_íåy
->
Êags
 = 0;

3243 
vîb_íåy
->
√xt
 = 
vîbs
[
h
];

3244 
vîbs
[
h
] = 
vîb_íåy
;

3248 
i
 = 0, 
j
 = 0; 
tokís
[i]; i++) {

3249 i‡(
tokís
[
i
] <0 && 
j
 < 2)

3250 
lô
[
j
++] = -(
tokís
[
i
]+1);

3253 
j
 < 2)

3254 
lô
[
j
++] = -1;

3256 
vîb_node
 = (
vîb_node_t
 *)
	`DXALLOC
((vîb_node_tË+ ()*
i
,

3257 
TAG_PARSER
, "parse_add_rule");

3259 
vîb_node
->
lô
[0] =Üit[0];

3260 
vîb_node
->
lô
[1] =Üit[1];

3261 
j
 = 0; j <
i
; j++) {

3262 i‡(
tokís
[
j
] >
OBJ_A_TOKEN
)

3263 
vîb_íåy
->
Êags
 |
VB_HAS_OBJ
;

3264 
vîb_node
->
tokí
[
j
] = 
tokís
[j];

3266 
vîb_node
->
weight
 = weight;

3267 
vîb_node
->
h™dÀr
 = handler;

3268 
h™dÀr
->
pöfo
->
Êags
 |
PI_VERB_HANDLER
;

3269 
vîb_node
->
√xt
 = 
vîb_íåy
->
node
;

3270 
vîb_íåy
->
node
 = 
vîb_node
;

3272 
ªt
 = 
	`≠∂y
(
LIVINGS_ARE_REMOTE
, 
h™dÀr
, 0, 
ORIGIN_DRIVER
);

3273 i‡(!
	`IS_ZERO
(
ªt
))

3274 
h™dÀr
->
pöfo
->
Êags
 |
PI_REMOTE_LIVINGS
;

3277 
	`‰ì_°rög_svÆue
(
•
--);

3278 
	`‰ì_°rög_svÆue
(
•
--);

3279 
	}
}

3281 
	$f_∑r£_add_syn⁄ym
() {

3282 *
√w_vîb
, *
ﬁd_vîb
, *
ruÀ
, *
‹ig_√w_vîb
;

3283 
vîb_t
 *
vb
;

3284 
vîb_node_t
 *
vn
, *
vîb_node
;

3285 
vîb_t
 *
vîb_íåy
;

3286 
tokís
[10];

3287 
weight
;

3288 
h
;

3290 i‡(
°_num_¨g
 == 3) {

3291 
‹ig_√w_vîb
 = (
•
-2)->
u
.
°rög
;

3292 
√w_vîb
 = 
	`SHARED_STRING
(
•
-2);

3293 
ﬁd_vîb
 = 
	`SHARED_STRING
(
•
-1);

3294 
ruÀ
 = 
•
->
u
.
°rög
;

3296 
‹ig_√w_vîb
 = (
•
-1)->
u
.
°rög
;

3297 
√w_vîb
 = 
	`SHARED_STRING
(
•
-1);

3298 
ﬁd_vîb
 = 
	`SHARED_STRING
(
•
);

3299 
ruÀ
 = 0;

3302 i‡(
ﬁd_vîb
 =
√w_vîb
)

3303 
	`îr‹
("Verb cannot beá synonym for itself.\n");

3305 
vîb_íåy
 = 0;

3307 i‡(!
ﬁd_vîb
)

3308 
	`îr‹
("%†i†nŸá vîb!\n", 
ﬁd_vîb
);

3310 
vb
 = 
vîbs
[
	`DO_HASH
(
ﬁd_vîb
, 
VERB_HASH_SIZE
)];

3311 
vb
) {

3312 i‡(
vb
->
ªÆ_«me
 =
ﬁd_vîb
 && vb->
m©ch_«me
 == old_verb)

3314 
vb
 = vb->
√xt
;

3317 i‡(!
vb
)

3318 
	`îr‹
("%†i†nŸá vîb!\n", 
ﬁd_vîb
);

3320 
vîb_íåy
 = 0;

3323 i‡(
√w_vîb
) {

3324 
vîb_íåy
 = 
vîbs
[
	`DO_HASH
(
√w_vîb
, 
VERB_HASH_SIZE
)];

3325 
vîb_íåy
) {

3326 i‡(
vîb_íåy
->
ªÆ_«me
 =
√w_vîb


3327 && 
vîb_íåy
->
m©ch_«me
 =
ﬁd_vîb
) {

3328 i‡(
ruÀ
) {

3329 i‡((
vîb_íåy
->
Êags
 & 
VB_IS_SYN
) == 0) ;

3331 i‡((
vîb_íåy
->
Êags
 & 
VB_IS_SYN
))

3335 
vîb_íåy
 = vîb_íåy->
√xt
;

3339 i‡(!
vîb_íåy
) {

3340 i‡(!
√w_vîb
)

3341 
√w_vîb
 = 
	`make_sh¨ed_°rög
(
‹ig_√w_vîb
);

3343 
	`ªf_°rög
(
√w_vîb
);

3344 
	`ªf_°rög
(
ﬁd_vîb
);

3346 
h
 = 
	`DO_HASH
(
√w_vîb
, 
VERB_HASH_SIZE
);

3347 
vîb_íåy
 = 
	`ALLOCATE
(
vîb_t
, 
TAG_PARSER
, "parse_add_rule");

3348 
vîb_íåy
->
ªÆ_«me
 = 
√w_vîb
;

3349 
vîb_íåy
->
m©ch_«me
 = 
ﬁd_vîb
;

3350 
vîb_íåy
->
node
 = 0;

3351 
vîb_íåy
->
Êags
 = 0;

3352 
vîb_íåy
->
√xt
 = 
vîbs
[
h
];

3353 
vîbs
[
h
] = 
vîb_íåy
;

3356 i‡(
ruÀ
) {

3357 
i
;

3360 
	`make_ruÀ
(
ruÀ
, 
tokís
, &
weight
);

3363 
vn
 = 
vb
->
node
; vn; v¿vn->
√xt
) {

3364 
i
 = 0; 
tokís
[i]; i++) {

3365 i‡(
vn
->
tokí
[
i
] !
tokís
[i]) ;

3367 i‡(!
tokís
[
i
] && !
vn
->
tokí
[i]) ;

3369 i‡(!
vn
Ë
	`îr‹
("No suchÑule defined.\n");

3370 i‡(
vn
->
h™dÀr
 !
cuºít_obje˘
Ë
	`îr‹
("Rule owned by different object.\n");

3372 
vîb_node
 = (
vîb_node_t
 *)
	`DXALLOC
((vîb_node_tË+ ()*
i
,

3373 
TAG_PARSER
, "parse_add_rule");

3374 
	`mem˝y
(
vîb_node
, 
vn
, (
vîb_node_t
Ë+ ()*
i
);

3375 
i
 = 0; 
vn
->
tokí
[i]; i++)

3376 i‡(
vn
->
tokí
[
i
] >
OBJ_A_TOKEN
) {

3377 
vîb_íåy
->
Êags
 |
VB_HAS_OBJ
;

3381 
vîb_node
->
√xt
 = 
vîb_íåy
->
node
;

3382 
vîb_íåy
->
node
 = 
vîb_node
;

3384 
vîb_syn_t
 *
syn
 = (vîb_syn_t*)
vîb_íåy
;

3385 
syn
->
Êags
 = 
VB_IS_SYN
 | (
vb
->Êag†& 
VB_HAS_OBJ
);

3386 
syn
->
ªÆ
 = 
vb
;

3389 i‡(
°_num_¨g
 =3Ë
	`‰ì_°rög_svÆue
(
•
--);

3390 
	`‰ì_°rög_svÆue
(
•
--);

3391 
	`‰ì_°rög_svÆue
(
•
--);

3392 
	}
}

3394 
f_∑r£_dump
 
PROT
(())

3396 
	gi
;

3397 
outbuf„r_t
 
	gob
;

3399 
outbuf_zîo
(&
ob
);

3400 
	gi
 = 0; i < 
	gVERB_HASH_SIZE
; i++) {

3401 
vîb_t
 *
	gv
;

3403 
	gv
 = 
vîbs
[
i
]; v; v = 
v
->
√xt
) {

3404 
vîb_node_t
 *
vn
 = 
v
->
node
;

3405 i‡(
	gv
->
	gªÆ_«me
 =
v
->
m©ch_«me
)

3406 
outbuf_addv
(&
ob
, "Vîb %s:\n", 
v
->
ªÆ_«me
);

3408 
outbuf_addv
(&
ob
, "Vîb %†(%s):\n", 
v
->
ªÆ_«me
, v->
m©ch_«me
);

3409 i‡(
	gv
->
	gÊags
 & 
	gVB_IS_SYN
) {

3410 
outbuf_addv
(&
ob
, " Syn⁄ym f‹: %s\n", ((
vîb_syn_t
 *)
v
)->
ªÆ
->
ªÆ_«me
);

3413 
	gvn
) {

3414 
outbuf_addv
(&
ob
, " (/%sË%s\n", 
vn
->
h™dÀr
->
«me
, 
ruÀ_°rög
(vn));

3415 
	gvn
 = 
vn
->
√xt
;

3419 
outbuf_push
(&
ob
);

	@packages/parser.h

1 #i‚de‡
ZORKPARSE_H


2 
	#ZORKPARSE_H


	)

4 
	~"../ö˛ude/∑r£r_îr‹.h
"

10 
	#ERROR_TOKEN
 1

	)

11 
	#STR_TOKEN
 2

	)

12 
	#WRD_TOKEN
 3

	)

14 
	#LIV_MODIFIER
 8

	)

15 
	#VIS_ONLY_MODIFIER
 16

	)

16 
	#PLURAL_MODIFIER
 32

	)

17 
	#CHOOSE_MODIFIER
 64

	)

19 
	#ADD_MOD
(
x
, 
y
Ë((xË| (y))

	)

21 
	#OBJ_A_TOKEN
 4

	)

22 
	#LIV_A_TOKEN
 
	`ADD_MOD
(
OBJ_A_TOKEN
, 
LIV_MODIFIER
)

	)

23 
	#OBJ_TOKEN
 
	`ADD_MOD
(
OBJ_A_TOKEN
, 
VIS_ONLY_MODIFIER
)

	)

24 
	#LIV_TOKEN
 
	`ADD_MOD
(
LIV_A_TOKEN
, 
VIS_ONLY_MODIFIER
)

	)

25 
	#OBS_TOKEN
 
	`ADD_MOD
(
OBJ_A_TOKEN
, 
PLURAL_MODIFIER
)

	)

26 
	#LVS_TOKEN
 
	`ADD_MOD
(
LIV_A_TOKEN
, 
PLURAL_MODIFIER
)

	)

28 
	#MAX_NUM_OBJECTS
 1024

	)

30 
	#HASH_SIZE
 32

	)

31 
	#VERB_HASH_SIZE
 128

	)

32 
	#SPECIAL_HASH_SIZE
 16

	)

35 
	#DO_HASH
(
x
, 
n
Ë((((
POINTER_INT
)x) & (n - 1)) ^ \

36 (((
POINTER_INT
)
x
 >> 8Ë& (
n
 - 1)) ^ \

37 (((
POINTER_INT
)
x
 >> 16Ë& (
n
 - 1)))

	)

46 
	#BPI
 ((()Ë* 8)

	)

47 
	#NUM_BITVEC_INTS
 (
MAX_NUM_OBJECTS
 / 
BPI
)

	)

48 
	#BV_WHICH
(
x
Ë((xË/ 
BPI
)

	)

49 
	#BV_BIT
(
x
Ë(1 << ((xË% 
BPI
))

	)

52 
	mb
[
NUM_BITVEC_INTS
];

53 
	mœ°
;

54 } 
	tbôvec_t
;

68 
bôvec_t
 
	mnoun
, 
	m∂uøl
, 
	madj
;

69 } 
	t∑r£_vÆ_t
;

71 
	#WORD_ALLOCATED
 1

	)

74 
	mty≥
;

75 *
	m°rög
;

76 *
	m°¨t
, *
	míd
;

77 } 
	tw‹d_t
;

88 
	#PI_SETUP
 1

	)

89 
	#PI_LIVING
 2

	)

90 
	#PI_VERB_HANDLER
 4

	)

91 
	#PI_REMOTE_LIVINGS
 8

	)

92 
	#PI_INV_ACCESSIBLE
 16

	)

93 
	#PI_INV_VISIBLE
 32

	)

94 
	#PI_REFRESH
 64

	)

96 
	s∑r£_öfo_s
 {

97 
	mÊags
;

98 
obje˘_s
 *
	mob
;

99 
	mnum_ids
, 
	mnum_adjs
, 
	mnum_∂uøls
;

100 **
	mids
, **
	madjs
, **
	m∂uøls
;

101 } 
	t∑r£_öfo_t
;

106 
	#HV_PERM
 1

	)

107 
	#HV_NOUN
 2

	)

108 
	#HV_PLURAL
 4

	)

109 
	#HV_ADJ
 8

	)

110 
	#HV_NICKNAME
 16

	)

115 
	shash_íåy_s
 {

116 
hash_íåy_s
 *
	m√xt
;

117 *
	m«me
;

118 
	mÊags
;

119 
∑r£_vÆ_t
 
	mpv
;

120 } 
	thash_íåy_t
;

122 
	s•ecül_w‹d_s
 {

123 
•ecül_w‹d_s
 *
	m√xt
;

124 *
	mwrd
;

125 
	mköd
;

126 
	m¨g
;

127 } 
	t•ecül_w‹d_t
;

129 
	esw_íum_s
 {

130 
	mSW_NONE
 = 0, 
	mSW_ARTICLE
, 
	mSW_SELF
, 
	mSW_ORDINAL
, 
	mSW_ALL
, 
	mSW_OF
, 
	mSW_AND


137 
	svîb_node_s
 {

138 
vîb_node_s
 *
	m√xt
;

139 
obje˘_s
 *
	mh™dÀr
;

140 
	mweight
;

141 
	mlô
[2];

142 
	mtokí
[1];

143 } 
	tvîb_node_t
;

149 
	#VB_HAS_OBJ
 1

	)

150 
	#VB_IS_SYN
 2

	)

152 
	svîb_s
 {

153 
vîb_s
 *
	m√xt
;

154 
	mÊags
;

155 *
	mm©ch_«me
;

156 *
	mªÆ_«me
;

157 
vîb_node_t
 *
	mnode
;

158 } 
	tvîb_t
;

160 
	svîb_syn_s
 {

161 
vîb_s
 *
	m√xt
;

162 
	mÊags
;

163 *
	mm©ch_«me
;

164 *
	mªÆ_«me
;

165 
vîb_t
 *
	mªÆ
;

166 } 
	tvîb_syn_t
;

170 *
	m«me
;

171 
	mtokí
;

172 
	mmod_ÀgÆ
;

173 } 
	ttokí_def_t
;

175 
	u∑r£r_îr‹_u
 {

176 
hash_íåy_t
 *
	mnoun
;

178 
	m°¨t
, 
	míd
;

179 } 
	m°r_¥obÀm
;

180 
bôvec_t
 
	mobs
;

181 
	m‹d_îr‹
;

182 *
	m°r
;

183 
ßved_îr‹_s
 *
	m∑øŒñ
;

187 
	mîr‹_ty≥
;

188 
∑r£r_îr‹_u
 
	mîr
;

189 } 
	t∑r£r_îr‹_t
;

191 
	sßved_îr‹_s
 {

192 
ßved_îr‹_s
 *
	m√xt
;

193 
∑r£r_îr‹_t
 
	mîr
;

194 
	mobj
;

195 } 
	tßved_îr‹_t
;

197 
	sms
 {

198 
bôvec_t
 
	mobs
;

199 
	mnumbî
;

203 
	mtokí
;

204 
	mfú°
, 
	mœ°
;

205 
	m‹döÆ
;

206 
ms
 
	mvÆ
;

207 } 
	tm©ch_t
;

210 
	mtok_ödex
, 
	mw‹d_ödex
;

211 
	mnum_m©ches
;

212 
	mnum_îr‹s
;

213 
	mnum_objs
;

214 } 
	t∑r£_°©e_t
;

217 *
	mfunc
;

218 
	mnum
;

219 
svÆue_t
 *
	m¨gs
;

220 } 
	tsub_ªsu…_t
;

223 
obje˘_t
 *
	mob
;

224 
ßved_îr‹_t
 *
	m∑øŒñ
;

225 
sub_ªsu…_t
 
	mªs
[4];

226 } 
	t∑r£_ªsu…_t
;

228 
∑r£_‰ì
 
PROT
((
∑r£_öfo_t
 *));

229 #ifde‡
DEBUGMALLOC_EXTENSIONS


230 
∑r£r_m¨k_vîbs
();

231 
∑r£r_m¨k
 
PROT
((
∑r£_öfo_t
 *));

232 
m¨k_hash_íåy
 
PROT
((*));

	@packages/parser_spec.c

1 
	~"•ec.h
"

3 
∑r£_öô
();

4 
∑r£_ª‰esh
();

5 
mixed
 
∑r£_£¡í˚
(
°rög
, | , | 
obje˘
 *, | 
m≠pög
);

6 
∑r£_add_ruÀ
(
°rög
, string);

7 
∑r£_ªmove
(
°rög
);

8 
∑r£_add_syn⁄ym
(
°rög
, string, | string);

9 
°rög
 
∑r£_dump
();

10 
mixed
 
∑r£_my_ruÀs
(
obje˘
, 
°rög
, | );

	@packages/sockets.c

6 #ifde‡
LATTICE


7 
	~"/Õc_ö˛.h
"

8 
	~"/sockë_îr.h
"

9 
	~"/ö˛ude/sockë_îr.h
"

10 
	~"/sockë_efuns.h
"

11 
	~"/comm.h
"

13 
	~"../Õc_ö˛.h
"

14 
	~"../sockë_îr.h
"

15 
	~"../ö˛ude/sockë_îr.h
"

16 
	~"../sockë_efuns.h
"

17 
	~"../comm.h
"

18 
	~"../efun_¥Ÿos.h
"

21 
	#VALID_SOCKET
(
x
Ë
	`check_vÆid_sockë
((x), 
fd
, 
	`gë_sockë_ow√r
(fd), 
addr
, 
p‹t
)

	)

23 #ifde‡
F_SOCKET_CREATE


25 
f_sockë_¸óã
 
PROT
(())

27 
	gfd
, 
	gnum_¨g
 = 
°_num_¨g
;

28 
svÆue_t
 *
	g¨g
;

30 
	g¨g
 = 
•
 - 
num_¨g
 + 1;

31 i‡((
	gnum_¨g
 =3Ë&& !(
¨g
[2].
ty≥
 & (
T_STRING
 | 
T_FUNCTION
))) {

32 
bad_¨g
(3, 
F_SOCKET_CREATE
);

34 i‡(
check_vÆid_sockë
("¸óã", -1, 
cuºít_obje˘
, "N/A", -1)) {

35 i‡(
	gnum_¨g
 == 2)

36 
fd
 = 
sockë_¸óã
(
¨g
[0].
u
.
numbî
, &¨g[1], 
NULL
);

38 
	gfd
 = 
sockë_¸óã
(
¨g
[0].
u
.
numbî
, &arg[1], &arg[2]);

40 
p›_n_ñems
(
num_¨g
 - 1);

41 
	g•
->
	gu
.
	gnumbî
 = 
fd
;

43 
p›_n_ñems
(
num_¨g
 - 1);

44 
	g•
->
	gu
.
	gnumbî
 = 
EESECURITY
;

49 #ifde‡
F_SOCKET_BIND


51 
f_sockë_böd
 
PROT
(())

53 
	gi
, 
	gfd
, 
	gp‹t
, 
	gnum_¨g
 = 
°_num_¨g
;

54 
svÆue_t
 *
	g¨g
;

55 
	gaddr
[
ADDR_BUF_SIZE
];

57 
	g¨g
 = 
•
 - 
num_¨g
 + 1;

58 i‡((
	gnum_¨g
 =3Ë&& (
¨g
[2].
ty≥
 !
T_STRING
)) {

59 
bad_¨g
(3, 
F_SOCKET_BIND
);

62 
	gfd
 = 
¨g
[0].
u
.
numbî
;

63 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

65 i‡(
VALID_SOCKET
("bind")) {

66 
	gi
 = 
sockë_böd
(
fd
, 
¨g
[1].
u
.
numbî
, (
num_¨g
 =3 ?árg[2].u.
°rög
 : 0));

67 
p›_n_ñems
(
num_¨g
 - 1);

68 
	g•
->
	gu
.
	gnumbî
 = 
i
;

70 
p›_n_ñems
(
num_¨g
 - 1);

71 
	g•
->
	gu
.
	gnumbî
 = 
EESECURITY
;

76 #ifde‡
F_SOCKET_LISTEN


78 
f_sockë_li°í
 
PROT
(())

80 
	gi
, 
	gfd
, 
	gp‹t
;

81 
	gaddr
[
ADDR_BUF_SIZE
];

83 
	gfd
 = (
•
 - 1)->
u
.
numbî
;

84 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

86 i‡(
VALID_SOCKET
("listen")) {

87 
	gi
 = 
sockë_li°í
(
fd
, 
•
);

88 
p›_°ack
();

89 
	g•
->
	gu
.
	gnumbî
 = 
i
;

91 
p›_°ack
();

92 
	g•
->
	gu
.
	gnumbî
 = 
EESECURITY
;

97 #ifde‡
F_SOCKET_ACCEPT


99 
f_sockë_ac˚±
 
PROT
(())

101 
	gp‹t
, 
	gfd
;

102 
	gaddr
[
ADDR_BUF_SIZE
];

104 i‡(!(
	g•
->
	gty≥
 & (
	gT_STRING
 | 
	gT_FUNCTION
))) {

105 
bad_¨g
(3, 
F_SOCKET_ACCEPT
);

107 
gë_sockë_addªss
(
fd
 = (
•
-2)->
u
.
numbî
, 
addr
, &
p‹t
, 0);

109 (
	g•
-2)->
	gu
.
	gnumbî
 = 
VALID_SOCKET
("accept") ?

110 
sockë_ac˚±
(
fd
, (
•
 - 1), sp) :

111 
EESECURITY
;

112 
p›_2_ñems
();

116 #ifde‡
F_SOCKET_CONNECT


118 
f_sockë_c⁄√˘
 
PROT
(())

120 
	gi
, 
	gfd
, 
	gp‹t
;

121 
	gaddr
[
ADDR_BUF_SIZE
];

123 i‡(!((
	g•
 - 1)->
	gty≥
 & (
	gT_FUNCTION
 | 
	gT_STRING
))) {

124 
bad_¨g
(3, 
F_SOCKET_CONNECT
);

126 i‡(!(
	g•
->
	gty≥
 & (
	gT_FUNCTION
 | 
	gT_STRING
))) {

127 
bad_¨g
(4, 
F_SOCKET_CONNECT
);

129 
	gfd
 = (
•
 - 3)->
u
.
numbî
;

130 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

132 i‡(!
°rcmp
(
addr
, "0.0.0.0"Ë&& 
	gp‹t
 == 0) {

136 *
s
;

137 
	g°¨t
 = 0;

139 
	gaddr
[0] = '\0';

140 i‡((
	gs
 = 
°rchr
((
•
 - 2)->
u
.
°rög
, ' '))) {

144 
	gi
 = 
s
 - (
•
 - 2)->
u
.
°rög
;

145 i‡(
	gi
 > 
	gADDR_BUF_SIZE
 - 1) {

146 
	g°¨t
 = 
i
 - 
ADDR_BUF_SIZE
 - 1;

147 
	gi
 = 
ADDR_BUF_SIZE
 - 1;

149 
°∫ˇt
(
addr
, (
•
 - 2)->
u
.
°rög
 + 
°¨t
, 
i
);

150 
	gp‹t
 = 
©oi
(
s
 + 1);

152 #ifde‡
DEBUG


154 
Ârötf
(
°dîr
, "socket_connect: socketálready boundÅoáddress/port: %s/%d\n",

155 
addr
, 
p‹t
);

156 
Ârötf
(
°dîr
, "sockë_c⁄√˘:Ñeque°ed on: %s\n", (
•
 - 2)->
u
.
°rög
);

160 (
	g•
-3)->
	gu
.
	gnumbî
 = 
VALID_SOCKET
("connect") ?

161 
sockë_c⁄√˘
(
fd
, (
•
 - 2)->
u
.
°rög
, s∞- 1, spË: 
EESECURITY
;

162 
p›_3_ñems
();

166 #ifde‡
F_SOCKET_WRITE


168 
f_sockë_wrôe
 
PROT
(())

170 
	gi
, 
	gfd
, 
	gp‹t
;

171 
svÆue_t
 *
	g¨g
;

172 
	gaddr
[
ADDR_BUF_SIZE
];

173 
	gnum_¨g
 = 
°_num_¨g
;

175 
	g¨g
 = 
•
 - 
num_¨g
 + 1;

176 i‡((
	gnum_¨g
 =3Ë&& (
¨g
[2].
ty≥
 !
T_STRING
)) {

177 
bad_¨g
(3, 
F_SOCKET_WRITE
);

179 
	gfd
 = 
¨g
[0].
u
.
numbî
;

180 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

182 i‡(
VALID_SOCKET
("write")) {

183 
	gi
 = 
sockë_wrôe
(
fd
, &
¨g
[1],

184 (
num_¨g
 =3Ë? 
¨g
[2].
u
.
°rög
 : (*Ë
NULL
);

185 
p›_n_ñems
(
num_¨g
 - 1);

186 
	g•
->
	gu
.
	gnumbî
 = 
i
;

188 
p›_n_ñems
(
num_¨g
 - 1);

189 
	g•
->
	gu
.
	gnumbî
 = 
EESECURITY
;

194 #ifde‡
F_SOCKET_CLOSE


196 
f_sockë_˛o£
 
PROT
(())

198 
	gfd
, 
	gp‹t
;

199 
	gaddr
[
ADDR_BUF_SIZE
];

201 
	gfd
 = 
•
->
u
.
numbî
;

202 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

204 
	g•
->
	gu
.
	gnumbî
 = 
VALID_SOCKET
("˛o£"Ë? 
sockë_˛o£
(
fd
, 0Ë: 
EESECURITY
;

208 #ifde‡
F_SOCKET_RELEASE


210 
f_sockë_ªÀa£
 
PROT
(())

212 
	gfd
, 
	gp‹t
;

213 
	gaddr
[
ADDR_BUF_SIZE
];

215 i‡(!(
	g•
->
	gty≥
 & (
	gT_STRING
 | 
	gT_FUNCTION
))) {

216 
bad_¨g
(3, 
F_SOCKET_RELEASE
);

218 
	gfd
 = (
•
 - 2)->
u
.
numbî
;

219 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

221 (
	g•
-2)->
	gu
.
	gnumbî
 = 
VALID_SOCKET
("release") ?

222 
sockë_ªÀa£
((
•
 - 2)->
u
.
numbî
, (• - 1)->u.
ob
, sp) :

223 
EESECURITY
;

225 
p›_°ack
();

227 i‡(
	g•
->
	gty≥
 =
T_OBJECT
)

228 
‰ì_obje˘
(
•
->
u
.
ob
, "socket_release()");

229 
	g•
--;

233 #ifde‡
F_SOCKET_ACQUIRE


235 
f_sockë_acquúe
 
PROT
(())

237 
	gfd
, 
	gp‹t
;

238 
	gaddr
[
ADDR_BUF_SIZE
];

240 i‡(!((
	g•
 - 1)->
	gty≥
 & (
	gT_FUNCTION
 | 
	gT_STRING
))) {

241 
bad_¨g
(3, 
F_SOCKET_ACQUIRE
);

243 i‡(!(
	g•
->
	gty≥
 & (
	gT_FUNCTION
 | 
	gT_STRING
))) {

244 
bad_¨g
(4, 
F_SOCKET_ACQUIRE
);

246 
	gfd
 = (
•
 - 3)->
u
.
numbî
;

247 
gë_sockë_addªss
(
fd
, 
addr
, &
p‹t
, 0);

249 (
	g•
-3)->
	gu
.
	gnumbî
 = 
VALID_SOCKET
("acquire") ?

250 
sockë_acquúe
((
•
 - 3)->
u
.
numbî
, (sp - 2),

251 (
•
 - 1), spË: 
EESECURITY
;

253 
p›_3_ñems
();

257 #ifde‡
F_SOCKET_ERROR


259 
f_sockë_îr‹
 
PROT
(())

261 
put_c⁄°™t_°rög
(
sockë_îr‹
(
•
->
u
.
numbî
));

265 #ifde‡
F_SOCKET_ADDRESS


267 
f_sockë_addªss
 
PROT
(())

269 *
	g°r
;

270 
	gloˇl
, 
	gp‹t
;

271 
	gaddr
[
ADDR_BUF_SIZE
];

272 
	gbuf
[2 * 
ADDR_BUF_SIZE
];

279 
	gloˇl
 = (
•
--)->
u
.
numbî
;

280 i‡(
	g•
->
	gty≥
 & 
	gT_OBJECT
) {

281 *
	gtmp
;

285 i‡(!
	g•
->
	gu
.
	gob
->
	göãø˘ive
) {

286 
‰ì_obje˘
(
•
->
u
.
ob
, "f_socket_address:1");

287 *
	g•
 = 
c⁄°0u
;

290 
	gtmp
 = 
öë_¡ﬂ
(
•
->
u
.
ob
->
öãø˘ive
->
addr
.
sö_addr
);

291 
•rötf
(
buf
, "%†%d", 
tmp
,

292 
¡ohs
(
•
->
u
.
ob
->
öãø˘ive
->
addr
.
sö_p‹t
));

293 
	g°r
 = 
°rög_c›y
(
buf
, "f_socket_address");

294 
‰ì_obje˘
(
•
->
u
.
ob
, "f_socket_address:2");

295 
put_mÆlo˚d_°rög
(
°r
);

298 
gë_sockë_addªss
(
•
->
u
.
numbî
, 
addr
, &
p‹t
, 
loˇl
);

299 
•rötf
(
buf
, "%†%d", 
addr
, 
p‹t
);

300 
	g°r
 = 
°rög_c›y
(
buf
, "f_socket_address");

301 
put_mÆlo˚d_°rög
(
°r
);

305 #ifde‡
F_SOCKET_STATUS


307 
f_sockë_°©us
 
PROT
(())

309 
¨øy_t
 *
	göfo
;

310 
	gi
;

312 i‡(
	g°_num_¨g
) {

313 
	göfo
 = 
sockë_°©us
(
•
->
u
.
numbî
);

315 i‡(!
	göfo
) {

316 
	g•
->
	gu
.
	gnumbî
 = 0;

318 
	g•
->
	gty≥
 = 
T_ARRAY
;

319 
	g•
->
	gu
.
	g¨r
 = 
öfo
;

322 
	göfo
 = 
Æloˇã_em±y_¨øy
(
max_Õc_socks
);

323 
	gi
 = 0; i < 
	gmax_Õc_socks
; i++) {

324 
	göfo
->
	gôem
[
i
].
	gty≥
 = 
T_ARRAY
;

325 
	göfo
->
	gôem
[
i
].
	gu
.
	g¨r
 = 
sockë_°©us
(i);

327 
push_ª„d_¨øy
(
öfo
);

	@packages/sockets_spec.c

1 
	~"•ec.h
"

6 
sockë_¸óã
(, 
°rög
 | 
fun˘i⁄
, string | function | );

7 
sockë_böd
(, , 
°rög
 | );

8 
sockë_li°í
(, 
°rög
 | 
fun˘i⁄
);

9 
sockë_ac˚±
(, 
°rög
 | 
fun˘i⁄
, string | function);

10 
sockë_c⁄√˘
(, 
°rög
, såög | 
fun˘i⁄
, string | function);

11 
sockë_wrôe
(, 
mixed
, 
°rög
 | );

12 
sockë_˛o£
();

13 
sockë_ªÀa£
(, 
obje˘
, 
°rög
 | 
fun˘i⁄
);

14 
sockë_acquúe
(, 
°rög
 | 
fun˘i⁄
, string | function, string | function);

15 
°rög
 
sockë_îr‹
();

16 
°rög
 
sockë_addªss
(| 
obje˘
, : 0);

26 
mixed
 *
sockë_°©us
(| );

	@packages/uids.c

11 #ifde‡
LATTICE


12 
	~"/Õc_ö˛.h
"

13 
	~"/e›î©‹s.h
"

14 
	~"/av…ªe.h
"

15 
	~"/md.h
"

16 
	~"/uids.h
"

17 
	~"/ma°î.h
"

19 
	~"../Õc_ö˛.h
"

20 
	~"../e›î©‹s.h
"

21 
	~"../av…ªe.h
"

22 
	~"../md.h
"

23 
	~"uids.h
"

24 
	~"../ma°î.h
"

25 
	~"../efun_¥Ÿos.h
"

28 
obje˘_t
 *
	gob
;

30 #ifde‡
F_EXPORT_UID


32 
f_exp‹t_uid
 
PROT
(())

34 i‡(
	gcuºít_obje˘
->
	geuid
 =
NULL
)

35 
îr‹
("IllegalÅoÉxport uid 0\n");

36 
	gob
 = 
•
->
u
.
ob
;

37 i‡(
	gob
->
	geuid
) {

38 
‰ì_obje˘
(
ob
, "f_export_uid:1");

39 *
	g•
 = 
c⁄°0
;

42 
	gob
->
	guid
 = 
cuºít_obje˘
->
euid
;

43 
‰ì_obje˘
(
ob
, "f_export_uid:2");

44 *
	g•
 = 
c⁄°1
;

49 #ifde‡
F_GETEUID


51 
f_gëeuid
 
PROT
(())

53 i‡(
	g•
->
	gty≥
 & 
	gT_OBJECT
) {

54 
	gob
 = 
•
->
u
.
ob
;

55 i‡(
	gob
->
	geuid
) {

56 
put_c⁄°™t_°rög
(
ob
->
euid
->
«me
);

57 
‰ì_obje˘
(
ob
, "f_geteuid:1");

60 
‰ì_obje˘
(
ob
, "f_geteuid:2");

61 *
	g•
 = 
c⁄°0
;

64 } i‡(
	g•
->
	gty≥
 & 
	gT_FUNCTION
) {

65 
fu≈å_t
 *
	gÂ
;

66 i‡((
	gÂ
 = 
•
->
u
.
Â
)->
hdr
.
ow√r
 && fp->hdr.ow√r->
euid
) {

67 
put_c⁄°™t_°rög
(
Â
->
hdr
.
ow√r
->
euid
->
«me
);

68 
‰ì_fu≈
(
Â
);

71 
‰ì_fu≈
(
Â
);

72 *
	g•
 = 
c⁄°0
;

77 #ifde‡
F_GETUID


79 
f_gëuid
 
PROT
(())

81 
	gob
 = 
•
->
u
.
ob
;

83 
DEBUG_CHECK
(
ob
->
uid
 =
NULL
, "UID isáÇullÖointer\n");

84 
put_c⁄°™t_°rög
(
ob
->
uid
->
«me
);

85 
‰ì_obje˘
(
ob
, "f_getuid");

89 #ifde‡
F_SETEUID


91 
f_£ãuid
 
PROT
(())

93 
svÆue_t
 *
	g¨g
;

94 
svÆue_t
 *
	gªt
;

96 i‡(
	g•
->
	gty≥
 & 
	gT_NUMBER
) {

97 i‡(
	g•
->
	gu
.
	gnumbî
)

98 
bad_¨g
(1, 
F_SETEUID
);

99 
	gcuºít_obje˘
->
	geuid
 = 
NULL
;

100 
	g•
->
	gu
.
	gnumbî
 = 1;

103 
	g¨g
 = 
•
;

104 
push_obje˘
(
cuºít_obje˘
);

105 
push_svÆue
(
¨g
);

106 
	gªt
 = 
≠∂y_ma°î_ob
(
APPLY_VALID_SETEUID
, 2);

107 i‡(!
MASTER_APPROVED
(
ªt
)) {

108 
‰ì_°rög_svÆue
(
•
);

109 *
	g•
 = 
c⁄°0
;

112 
	gcuºít_obje˘
->
	geuid
 = 
add_uid
(
•
->
u
.
°rög
);

113 
‰ì_°rög_svÆue
(
•
);

114 *
	g•
 = 
c⁄°1
;

119 
åì
 *
	guids
 = 
NULL
;

120 
u£rid_t
 *
	gbackb⁄e_uid
 = 
NULL
;

121 
u£rid_t
 *
	groŸ_uid
 = 
NULL
;

123 #ifde‡
DEBUGMALLOC_EXTENSIONS


124 
m¨k_uid_åì
 
	$P1
(
åì
 *, 
å
) {

125 
	`DO_MARK
(
å
, 
TAG_UID
);

126 
	`DO_MARK
(
å
->
åì_p
, 
TAG_UID
);

128 
	`EXTRA_REF
(
	`BLOCK
(((
u£rid_t
 *)
å
->
åì_p
)->
«me
))++;

129 i‡(
å
->
åì_l
)

130 
	`m¨k_uid_åì
(
å
->
åì_l
);

131 i‡(
å
->
åì_r
)

132 
	`m¨k_uid_åì
(
å
->
åì_r
);

133 
	}
}

135 
	$m¨k_Æl_uid_nodes
() {

136 i‡(
uids
)

137 
	`m¨k_uid_åì
(
uids
);

138 
	}
}

141 
uidcmp
 
PROT
((
u£rid_t
 *, userid_t *));

143 
uidcmp
 
	$P2
(
u£rid_t
 *, 
uid1
, u£rid_à*, 
uid2
)

145 *
«me1
, *
«me2
;

147 
«me1
 = 
uid1
->
«me
;

148 
«me2
 = 
uid2
->
«me
;

149  (
«me1
 < 
«me2
 ? -1 : (name1 >Çame2 ? 1 : 0));

150 
	}
}

152 
u£rid_t
 *
add_uid
 
	$P1
(*, 
«me
)

154 
u£rid_t
 *
uid
, 
t_uid
;

155 *
¢ame
;

157 
¢ame
 = 
	`make_sh¨ed_°rög
(
«me
);

158 
t_uid
.
«me
 = 
¢ame
;

159 i‡((
uid
 = (
u£rid_t
 *Ë
	`åì_§ch
(
uids
, 
uidcmp
, (*Ë&
t_uid
))) {

160 
	`‰ì_°rög
(
¢ame
);

162 
uid
 = 
	`ALLOCATE
(
u£rid_t
, 
TAG_UID
, "add_uid");

163 
uid
->
«me
 = 
¢ame
;

164 
	`åì_add
(&
uids
, 
uidcmp
, (*Ë
uid
, 
NULL
);

166  
uid
;

167 
	}
}

169 
u£rid_t
 *
£t_roŸ_uid
 
	$P1
(*, 
«me
)

171 i‡(!
roŸ_uid
)

172  
roŸ_uid
 = 
	`add_uid
(
«me
);

174 
	`åì_dñëe
(&
uids
, 
uidcmp
, (*Ë
roŸ_uid
, 
NULL
);

175 
roŸ_uid
->
«me
 = 
	`make_sh¨ed_°rög
(name);

176 
	`åì_add
(&
uids
, 
uidcmp
, (*Ë
roŸ_uid
, 
NULL
);

177  
roŸ_uid
;

178 
	}
}

180 
u£rid_t
 *
£t_backb⁄e_uid
 
	$P1
(*, 
«me
)

182 i‡(!
backb⁄e_uid
)

183  
backb⁄e_uid
 = 
	`add_uid
(
«me
);

185 
	`åì_dñëe
(&
uids
, 
uidcmp
, (*Ë
backb⁄e_uid
, 
NULL
);

186 
backb⁄e_uid
->
«me
 = 
	`make_sh¨ed_°rög
(name);

187 
	`åì_add
(&
uids
, 
uidcmp
, (*Ë
backb⁄e_uid
, 
NULL
);

188  
backb⁄e_uid
;

189 
	}
}

	@packages/uids.h

10 #i‡!
deföed
(
_UID_H_
Ë&& deföed(
PACKAGE_UIDS
)

11 
	#_UID_H_


	)

13 
	~"../°d.h
"

15 
	s_uid
 {

16 *
	m«me
;

17 } 
	tu£rid_t
;

19 
u£rid_t
 *
backb⁄e_uid
;

20 
u£rid_t
 *
roŸ_uid
;

22 
u£rid_t
 *
add_uid
 
PROT
((*
«me
));

23 
u£rid_t
 *
£t_roŸ_uid
 
PROT
((*
«me
));

24 
u£rid_t
 *
£t_backb⁄e_uid
 
PROT
((*
«me
));

25 #ifde‡
DEBUGMALLOC_EXTENSIONS


26 
m¨k_Æl_uid_nodes
 
PROT
(());

	@packages/uids_spec.c

1 
	~"•ec.h
"

3 
exp‹t_uid
(
obje˘
);

4 
°rög
 
gëeuid
(
fun˘i⁄
 | 
obje˘
 :
F__THIS_OBJECT
);

5 
°rög
 
gëuid
(
obje˘
 :
F__THIS_OBJECT
);

6 
£ãuid
(
°rög
 | );

	@parse.c

12 
	~"°d.h
"

13 
	~"∑r£.h
"

14 
	~"ma°î.h
"

15 
	~"add_a˘i⁄.h
"

249 
	#EQ
(
x
,
y
Ë(
	`°rcmp
(x,y)==0)

	)

250 
	#EQN
(
x
,
y
Ë(
	`°∫cmp
(x,y,
	`°æí
(x))==0)

	)

251 
	#EMPTY
(
x
Ë(
	`°rcmp
(x,"")==0)

	)

258 
	s∑r£_globÆ_s
 {

259 
∑r£_globÆ_s
 *
	m√xt
;

261 
¨øy_t
 *
	mId_li°
;

262 
¨øy_t
 *
	mPluid_li°
;

263 
¨øy_t
 *
	mAdjid_li°
;

264 
¨øy_t
 *
	mId_li°_d
;

265 
¨øy_t
 *
	mPluid_li°_d
;

266 
¨øy_t
 *
	mAdjid_li°_d
;

267 
¨øy_t
 *
	mPªpos_li°
;

268 *
	mAŒw‹d
;

270 
¨øy_t
 *
	mw¨r
;

271 
¨øy_t
 *
	m∑èº
;

272 
¨øy_t
 *
	mob¨r
;

273 } 
	t∑r£_globÆ_t
;

275 
∑r£_globÆ_t
 *
	gglobÆs
 = 0;

277 
	#gId_li°
 (
globÆs
->
Id_li°
)

	)

278 
	#gPluid_li°
 (
globÆs
->
Pluid_li°
)

	)

279 
	#gAdjid_li°
 (
globÆs
->
Adjid_li°
)

	)

280 
	#gId_li°_d
 (
globÆs
->
Id_li°_d
)

	)

281 
	#gPluid_li°_d
 (
globÆs
->
Pluid_li°_d
)

	)

282 
	#gAdjid_li°_d
 (
globÆs
->
Adjid_li°_d
)

	)

283 
	#gPªpos_li°
 (
globÆs
->
Pªpos_li°
)

	)

284 
	#gAŒw‹d
 (
globÆs
->
AŒw‹d
)

	)

285 
	#∑r£_w¨r
 (
globÆs
->
w¨r
)

	)

286 
	#∑r£_∑èº
 (
globÆs
->
∑èº
)

	)

287 
	#∑r£_ob¨r
 (
globÆs
->
ob¨r
)

	)

289 
lﬂd_Õc_öfo
 
PROT
((, 
obje˘_t
 *));

290 
∑r£_˛ón_up
 
PROT
(());

291 
push_∑r£_globÆs
 
PROT
(());

292 
p›_∑r£_globÆs
 
PROT
(());

293 
°‹e_vÆue
 
PROT
((
svÆue_t
 *, , , svalue_t *));

294 
°‹e_w‹ds_¶i˚
 
PROT
((
svÆue_t
 *, , ,

295 
¨øy_t
 *, , ));

296 
svÆue_t
 *
sub_∑r£
 
PROT
((
¨øy_t
 *,árray_t *, *,

297 
¨øy_t
 *, *, *, 
svÆue_t
 *));

298 
svÆue_t
 *
⁄e_∑r£
 
PROT
((
¨øy_t
 *, *,árray_t *,

299 *, *, 
svÆue_t
 *));

300 
svÆue_t
 *
numbî_∑r£
 
PROT
((
¨øy_t
 *,árray_t *, *, *));

301 
svÆue_t
 *
ôem_∑r£
 
PROT
((
¨øy_t
 *,árray_t *, *, *));

302 #i‚de‡
NO_ADD_ACTION


303 
svÆue_t
 *
livög_∑r£
 
PROT
((
¨øy_t
 *,árray_t *, *, *));

305 
svÆue_t
 *
sögÀ_∑r£
 
PROT
((
¨øy_t
 *,árray_t *, *, *));

306 
svÆue_t
 *
¥ïos_∑r£
 
PROT
((
¨øy_t
 *, *, *, svalue_t *));

307 
m©ch_obje˘
 
PROT
((, 
¨øy_t
 *, *, *));

308 
föd_°rög
 
PROT
((*, 
¨øy_t
 *, *));

309 
check_adje˘iv
 
PROT
((, 
¨øy_t
 *, , ));

310 
membî_°rög
 
PROT
((*, 
¨øy_t
 *));

311 *
∑r£_to_∂uøl
 
PROT
((*));

312 *
∑r£_⁄e_∂uøl
 
PROT
((*));

325 
lﬂd_Õc_öfo
 
	$P2
(, 
ix
, 
obje˘_t
 *, 
ob
)

327 
¨øy_t
 *
tmp
, *
sög
;

328 
svÆue_t
 *
ªt
;

329 
û
, 
make_∂uøl
 = 0;

330 *
°r
;

332 i‡(!
ob
 || ob->
Êags
 & 
O_DESTRUCTED
)

335 i‡(
gPluid_li°
 &&

336 
gPluid_li°
->
size
 > 
ix
 &&

337 
gPluid_li°
->
ôem
[
ix
].
ty≥
 =
T_NUMBER
 &&

338 
gPluid_li°
->
ôem
[
ix
].
u
.
numbî
 == 0) {

339 
ªt
 = 
	`≠∂y
(
APPLY_QGET_PLURID
, 
ob
, 0, 
ORIGIN_DRIVER
);

340 i‡(
ªt
 &&Ñë->
ty≥
 =
T_ARRAY
)

341 
	`assign_svÆue_no_‰ì
(&
gPluid_li°
->
ôem
[
ix
], 
ªt
);

343 
make_∂uøl
 = 1;

344 
gPluid_li°
->
ôem
[
ix
].
u
.
numbî
 = 1;

347 i‡(
gId_li°
 &&

348 
gId_li°
->
size
 > 
ix
 &&

349 
gId_li°
->
ôem
[
ix
].
ty≥
 =
T_NUMBER
 &&

350 
gId_li°
->
ôem
[
ix
].
u
.
numbî
 == 0 &&

351 !(
ob
->
Êags
 & 
O_DESTRUCTED
) ) {

352 
ªt
 = 
	`≠∂y
(
APPLY_QGET_ID
, 
ob
, 0, 
ORIGIN_DRIVER
);

353 i‡(
ªt
 &&Ñë->
ty≥
 =
T_ARRAY
) {

354 
	`assign_svÆue_no_‰ì
(&
gId_li°
->
ôem
[
ix
], 
ªt
);

355 i‡(
make_∂uøl
) {

356 
tmp
 = 
	`Æloˇã_¨øy
(
ªt
->
u
.
¨r
->
size
);

357 
sög
 = 
ªt
->
u
.
¨r
;

359 
û
 = 0; i»< 
tmp
->
size
; il++) {

360 i‡(
sög
->
ôem
[
û
].
ty≥
 =
T_STRING
) {

361 
°r
 = 
	`∑r£_to_∂uøl
(
sög
->
ôem
[
û
].
u
.
°rög
);

362 
tmp
->
ôem
[
û
].
ty≥
 = 
T_STRING
;

363 
tmp
->
ôem
[
û
].
subty≥
 = 
STRING_MALLOC
;

364 
tmp
->
ôem
[
û
].
u
.
°rög
 = 
°r
;

367 
gPluid_li°
->
ôem
[
ix
].
ty≥
 = 
T_ARRAY
;

368 
gPluid_li°
->
ôem
[
ix
].
u
.
¨r
 = 
tmp
;

371 
gId_li°
->
ôem
[
ix
].
u
.
numbî
 = 1;

374 i‡(
gAdjid_li°
 &&

375 
gAdjid_li°
->
size
 > 
ix
 &&

376 
gAdjid_li°
->
ôem
[
ix
].
ty≥
 =
T_NUMBER
 &&

377 
gAdjid_li°
->
ôem
[
ix
].
u
.
numbî
 == 0 &&

378 !(
ob
->
Êags
 & 
O_DESTRUCTED
)) {

379 
ªt
 = 
	`≠∂y
(
APPLY_QGET_ADJID
, 
ob
, 0, 
ORIGIN_DRIVER
);

380 i‡(
ªt
 &&Ñë->
ty≥
 =
T_ARRAY
)

381 
	`assign_svÆue_no_‰ì
(&
gAdjid_li°
->
ôem
[
ix
], 
ªt
);

383 
gAdjid_li°
->
ôem
[
ix
].
u
.
numbî
 = 1;

385 
	}
}

391 
	$∑r£_˛ón_up
() {

392 
∑r£_globÆ_t
 *
pg
;

394 
pg
 = 
globÆs
;

395 
globÆs
 = 
pg
->
√xt
;

397 i‡(
pg
->
Id_li°
)

398 
	`‰ì_¨øy
(
pg
->
Id_li°
);

399 i‡(
pg
->
Pluid_li°
)

400 
	`‰ì_¨øy
(
pg
->
Pluid_li°
);

401 i‡(
pg
->
Adjid_li°
)

402 
	`‰ì_¨øy
(
pg
->
Adjid_li°
);

403 i‡(
pg
->
Id_li°_d
)

404 
	`‰ì_¨øy
(
pg
->
Id_li°_d
);

405 i‡(
pg
->
Pluid_li°_d
)

406 
	`‰ì_¨øy
(
pg
->
Pluid_li°_d
);

407 i‡(
pg
->
Adjid_li°_d
)

408 
	`‰ì_¨øy
(
pg
->
Adjid_li°_d
);

409 i‡(
pg
->
Pªpos_li°
)

410 
	`‰ì_¨øy
(
pg
->
Pªpos_li°
);

411 i‡(
pg
->
AŒw‹d
)

412 
	`FREE
(
pg
->
AŒw‹d
);

413 i‡(
pg
->
w¨r
)

414 
	`‰ì_¨øy
(
pg
->
w¨r
);

415 i‡(
pg
->
∑èº
)

416 
	`‰ì_¨øy
(
pg
->
∑èº
);

417 i‡(
pg
->
ob¨r
)

418 
	`‰ì_¨øy
(
pg
->
ob¨r
);

419 
	`FREE
(
pg
);

420 
	}
}

422 
	$push_∑r£_globÆs
() {

423 
∑r£_globÆ_t
 *
pg
;

425 
STACK_INC
;

426 
•
->
ty≥
 = 
T_ERROR_HANDLER
;

427 
•
->
u
.
îr‹_h™dÀr
 = 
∑r£_˛ón_up
;

429 
pg
 = 
	`ALLOCATE
(
∑r£_globÆ_t
, 
TAG_TEMPORARY
, "push_parse_globals");

430 
pg
->
√xt
 = 
globÆs
;

431 
globÆs
 = 
pg
;

433 
pg
->
Id_li°
 = 0;

434 
pg
->
Pluid_li°
 = 0;

435 
pg
->
Adjid_li°
 = 0;

436 
pg
->
Id_li°_d
 = 0;

437 
pg
->
Pluid_li°_d
 = 0;

438 
pg
->
Adjid_li°_d
 = 0;

439 
pg
->
Pªpos_li°
 = 0;

440 
pg
->
AŒw‹d
 = 0;

441 
pg
->
w¨r
 = 0;

442 
pg
->
∑èº
 = 0;

443 
pg
->
ob¨r
 = 0;

444 
	}
}

446 
	$p›_∑r£_globÆs
() {

447 
•
--;

448 
	`∑r£_˛ón_up
();

449 
	}
}

453 
svÆue_t
 
	g∑r£_ªt
;

472 
∑r£
 
	$P5
(*, 
cmd
,

473 
svÆue_t
 *, 
ob_‹_¨øy
,

474 *, 
∑âîn
,

475 
svÆue_t
 *, 
°ack_¨gs
,

477 , 
num_¨g
)

479 
pix
, 
cix
, 
six
, 
Áû
, 
fw‹d
, 
ocix
, 
Âix
;

480 
svÆue_t
 *
pvÆ
;

481 
¨øy_t
 *
ob¨r
;

486 i‡(!*
cmd
 || !*
∑âîn
)

489 
	`push_∑r£_globÆs
();

492 
∑r£_w¨r
 = 
	`ex∂ode_°rög
(
cmd
, 
	`°æí
(cmd), " ", 1);

495 
∑r£_∑èº
 = 
	`ex∂ode_°rög
(
∑âîn
, 
	`°æí
(pattern), " ", 1);

500 i‡(!
∑r£_w¨r
)

501 
∑r£_w¨r
 = 
	`Æloˇã_¨øy
(0);

502 i‡(!
∑r£_∑èº
)

503 
∑r£_∑èº
 = 
	`Æloˇã_¨øy
(0);

506 i‡(
ob_‹_¨øy
->
ty≥
 =
T_ARRAY
)

507 
ob¨r
 = 
ob_‹_¨øy
->
u
.
¨r
;

508 #i‚de‡
NO_ENVIRONMENT


509 i‡(
ob_‹_¨øy
->
ty≥
 =
T_OBJECT
) {

511 
∑r£_ob¨r
 = 
ob¨r
 = 
	`dìp_övít‹y
(
ob_‹_¨øy
->
u
.
ob
, 1);

515 
	`îr‹
("Bad secondárgumentÅoÖarse_command()\n");

517 
	`check_f‹_de°r
(
ob¨r
);

519 
gId_li°
 = 
	`Æloˇã_¨øy
(
ob¨r
->
size
);

520 
gPluid_li°
 = 
	`Æloˇã_¨øy
(
ob¨r
->
size
);

521 
gAdjid_li°
 = 
	`Æloˇã_¨øy
(
ob¨r
->
size
);

526 
pvÆ
 = 
	`≠∂y
(
APPLY_QGET_ID
, 
ma°î_ob
, 0, 
ORIGIN_DRIVER
);

527 i‡(
pvÆ
 &&ÖvÆ->
ty≥
 =
T_ARRAY
) {

528 
gId_li°_d
 = 
pvÆ
->
u
.
¨r
;

529 
pvÆ
->
u
.
¨r
->
ªf
++;

532 
pvÆ
 = 
	`≠∂y
(
APPLY_QGET_PLURID
, 
ma°î_ob
, 0, 
ORIGIN_DRIVER
);

533 i‡(
pvÆ
 &&ÖvÆ->
ty≥
 =
T_ARRAY
) {

534 
gPluid_li°_d
 = 
pvÆ
->
u
.
¨r
;

535 
pvÆ
->
u
.
¨r
->
ªf
++;

538 
pvÆ
 = 
	`≠∂y
(
APPLY_QGET_ADJID
, 
ma°î_ob
, 0, 
ORIGIN_DRIVER
);

539 i‡(
pvÆ
 &&ÖvÆ->
ty≥
 =
T_ARRAY
) {

540 
gAdjid_li°_d
 = 
pvÆ
->
u
.
¨r
;

541 
pvÆ
->
u
.
¨r
->
ªf
++;

544 
pvÆ
 = 
	`≠∂y_ma°î_ob
(
APPLY_QGET_PREPOS
, 0);

545 i‡(
pvÆ
 &&ÖvÆ->
ty≥
 =
T_ARRAY
) {

546 
gPªpos_li°
 = 
pvÆ
->
u
.
¨r
;

547 
pvÆ
->
u
.
¨r
->
ªf
++;

550 
pvÆ
 = 
	`≠∂y_ma°î_ob
(
APPLY_QGET_ALLWORD
, 0);

551 i‡(
pvÆ
 &&ÖvÆ->
ty≥
 =
T_STRING
)

552 
gAŒw‹d
 = 
	`Æloc_c°rög
(
pvÆ
->
u
.
°rög
, "parse");

557 
six
 = 0, 
cix
 = 0, 
pix
 = 0;Öix < 
∑r£_∑èº
->
size
;Öix++) {

558 
pvÆ
 = 0;

559 
Áû
 = 0;

561 i‡(
	`EQ
(
∑r£_∑èº
->
ôem
[
pix
].
u
.
°rög
, "%s")) {

566 i‡(
pix
 =(
∑r£_∑èº
->
size
 - 1)) {

567 
	`°‹e_w‹ds_¶i˚
(
°ack_¨gs
, 
six
++, 
num_¨g
,

568 
∑r£_w¨r
, 
cix
,Ö¨£_w¨r->
size
 - 1);

569 
cix
 = 
∑r£_w¨r
->
size
;

577 
ocix
 = 
fw‹d
 = 
cix
;

578 
Âix
 = ++
pix
;

580 
Áû
 = 0;

587 
pvÆ
 = 
	`sub_∑r£
(
ob¨r
, 
∑r£_∑èº
, &
pix
,

588 
∑r£_w¨r
, &
cix
,

589 &
Áû
, ((
six
 + 1Ë< 
num_¨g
) ?

590 &
°ack_¨gs
[
six
 + 1] : 0);

591 i‡(
Áû
) {

592 
cix
 = ++
ocix
;

593 
pix
 = 
Âix
;

595 } 
Áû
 && (
cix
 < 
∑r£_w¨r
->
size
));

602 i‡(!
Áû
) {

603 i‡(
pvÆ
) {

604 
	`°‹e_vÆue
(
°ack_¨gs
, 
six
 + 1, 
num_¨g
, 
pvÆ
);

605 
	`°‹e_w‹ds_¶i˚
(
°ack_¨gs
, 
six
, 
num_¨g
,

606 
∑r£_w¨r
, 
fw‹d
, 
ocix
 - 1);

607 
six
 += 2;

609 
	`°‹e_w‹ds_¶i˚
(
°ack_¨gs
, 
six
++, 
num_¨g
,

610 
∑r£_w¨r
, 
fw‹d
, 
ocix
 - 1);

612 
pvÆ
 = 0;

620 i‡(!
	`EQ
(
∑r£_∑èº
->
ôem
[
pix
].
u
.
°rög
, "/")) {

621 
pvÆ
 = 
	`sub_∑r£
(
ob¨r
, 
∑r£_∑èº
, &
pix
,

622 
∑r£_w¨r
, &
cix
, &
Áû
,

623 (
six
 < 
num_¨g
Ë? &
°ack_¨gs
[six] : 0);

624 i‡(!
Áû
 && 
pvÆ
)

625 
	`°‹e_vÆue
(
°ack_¨gs
, 
six
++, 
num_¨g
, 
pvÆ
);

630 i‡(
Áû
)

637 i‡(
cix
 < 
∑r£_w¨r
->
size
)

638 
Áû
 = 1;

640 
	`p›_∑r£_globÆs
();

642  !
Áû
;

643 
	}
}

646 
°‹e_vÆue
 
	$P4
(
svÆue_t
 *, 
•
, , 
pos
, , 
num
, svÆue_à*, 
wh©
)

648 
svÆue_t
 *
ªt
;

650 i‡(
pos
 >
num
) {

651 
	`‰ì_svÆue
(
wh©
, "store_value");

653 
ªt
 = 
•
 + 
num
 - 
pos
 - 1;

654 
	`‰ì_svÆue
(
ªt
, "store_value");

655 *
ªt
 = *
wh©
;

657 
	}
}

668 
°‹e_w‹ds_¶i˚
 
	$P6
(
svÆue_t
 *, 
•
, , 
pos
, , 
num
, 
¨øy_t
 *, 
w¨r
, , 
‰om
, , 
to
)

670 
svÆue_t
 *
ªt
;

671 
¨øy_t
 *
¶i˚
;

673 i‡(
pos
 >
num
)

676 
ªt
 = 
•
 + 
num
 - 
pos
 -1;

677 
ªt
->
ty≥
 = 
T_STRING
;

679 i‡(
‰om
 <
to
) {

680 
w¨r
->
ªf
++;

681 
¶i˚
 = 
	`¶i˚_¨øy
(
w¨r
, 
‰om
, 
to
);

683 i‡(
¶i˚
->
size
) {

684 
ªt
->
subty≥
 = 
STRING_MALLOC
;

685 
ªt
->
u
.
°rög
 = 
	`im∂ode_°rög
(
¶i˚
, " ", 1);

686 
	`‰ì_¨øy
(
¶i˚
);

689 
	`‰ì_¨øy
(
¶i˚
);

692 
ªt
->
subty≥
 = 
STRING_CONSTANT
;

693 
ªt
->
u
.
°rög
 = "";

694 
	}
}

703 
svÆue_t
 *

704 
sub_∑r£
 
	$P7
(
¨øy_t
 *, 
ob¨r
,áºay_à*, 
∑èº
, *, 
pix_ö
,áºay_à*, 
w¨r
, *, 
cix_ö
, *, 
Áû
, 
svÆue_t
 *, 
•
)

706 
cix
, 
pix
, 
subÁû
;

707 
svÆue_t
 *
pvÆ
;

712 i‡(*
cix_ö
 =
w¨r
->
size
) {

713 *
Áû
 = 1;

716 
cix
 = *
cix_ö
;

717 
pix
 = *
pix_ö
;

718 
subÁû
 = 0;

720 
pvÆ
 = 
	`⁄e_∑r£
(
ob¨r
, 
∑èº
->
ôem
[
pix
].
u
.
°rög
,

721 
w¨r
, &
cix
, &
subÁû
, 
•
);

723 
subÁû
) {

724 
pix
++;

725 
cix
 = *
cix_ö
;

730 (
pix
 < 
∑èº
->
size
Ë&& (
	`EQ
’©¨r->
ôem
[pix].
u
.
°rög
, "/"))) {

731 
subÁû
 = 0;

732 
pix
++;

735 i‡(!
subÁû
 && (
pix
 < 
∑èº
->
size
)) {

736 
pvÆ
 = 
	`⁄e_∑r£
(
ob¨r
, 
∑èº
->
ôem
[
pix
].
u
.
°rög
, 
w¨r
, &
cix
,

737 &
subÁû
, 
•
);

739 *
Áû
 = 1;

740 *
pix_ö
 = 
pix
 - 1;

748 i‡((
pix
 + 1 < 
∑èº
->
size
Ë&& (
	`EQ
’©¨r->
ôem
[pix + 1].
u
.
°rög
, "/"))) {

749 (
pix
 + 1 < 
∑èº
->
size
) &&

750 (
	`EQ
(
∑èº
->
ôem
[
pix
 + 1].
u
.
°rög
, "/"))) {

751 
pix
 += 2;

753 i‡(
pix
 >
∑èº
->
size
)

754 
pix
 = 
∑èº
->
size
 - 1;

756 *
cix_ö
 = 
cix
;

757 *
pix_ö
 = 
pix
;

758 *
Áû
 = 0;

759  
pvÆ
;

760 
	}
}

774 
svÆue_t
 *

775 
⁄e_∑r£
 
	$P6
(
¨øy_t
 *, 
ob¨r
, *, 
∑t
,áºay_à*, 
w¨r
, *, 
cix_ö
, *, 
Áû
, 
svÆue_t
 *, 
¥ï_∑øm
)

777 
ch
;

778 
svÆue_t
 *
pvÆ
;

779 *
°r1
, *
°r2
;

784 i‡(*
cix_ö
 >
w¨r
->
size
) {

785 *
Áû
 = 1;

788 
ch
 = 
∑t
[0];

789 i‡(
ch
 == '%') {

790 
ch
 = ((
	`uisuµî
(
∑t
[1])Ë? 
	`tﬁowî
(pat[1]) :Öat[1]);

792 
pvÆ
 = 0;

794 
ch
) {

796 
pvÆ
 = 
	`ôem_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
, 
Áû
);

799 #i‚de‡
NO_ADD_ACTION


801 
pvÆ
 = 
	`livög_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
, 
Áû
);

806 *
Áû
 = 0;

810 
∑r£_ªt
.
ty≥
 = 
T_STRING
;

811 
∑r£_ªt
.
subty≥
 = 
STRING_SHARED
;

812 
∑r£_ªt
.
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
w¨r
->
ôem
[*
cix_ö
].u.string);

813 
pvÆ
 = &
∑r£_ªt
;

814 (*
cix_ö
)++;

815 *
Áû
 = 0;

819 
pvÆ
 = 
	`sögÀ_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
, 
Áû
);

823 
pvÆ
 = 
	`¥ïos_∑r£
(
w¨r
, 
cix_ö
, 
Áû
, 
¥ï_∑øm
);

827 
pvÆ
 = 
	`numbî_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
, 
Áû
);

831 
°r1
 = &
∑t
[1];

832 
°r2
 = 
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
;

833 i‡((
	`°∫cmp
(
°r1
, 
°r2
, 
	`°æí
(str1) - 1) == 0) &&

834 (
	`°æí
(
°r1
Ë=°æí(
°r2
) + 1)) {

835 *
Áû
 = 0;

836 (*
cix_ö
)++;

838 *
Áû
 = 1;

842 
°r1
 = &
∑t
[1];

843 
°r2
 = 
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
;

844 i‡((
	`°∫cmp
(
°r1
, 
°r2
, 
	`°æí
(str1) - 1) == 0) &&

845 (
	`°æí
(
°r1
Ë=°æí(
°r2
) + 1)) {

846 (*
cix_ö
)++;

848 *
Áû
 = 0;

852 *
Áû
 = 0;

854  
pvÆ
;

855 
	}
}

860 #i‚de‡
PARSE_FOREIGN


862 *
	g‹d1
[] =

869 *
	g‹d10
[] =

873 *
	gs‹d10
[] =

878 *
	gnum1
[] =

884 *
	gnum10
[] =

904 
svÆue_t
 *

905 
numbî_∑r£
 
	$P4
(
¨øy_t
 *, 
ob¨r
,áºay_à*, 
w¨r
, *, 
cix_ö
, *, 
Áû
)

907 
cix
, 
ãn
, 
⁄es
, 
num
;

908 
buf
[100];

910 
cix
 = *
cix_ö
;

911 *
Áû
 = 0;

913 i‡(
	`ssˇnf
(
w¨r
->
ôem
[
cix
].
u
.
°rög
, "%d", &
num
)) {

914 i‡(
num
 >= 0) {

915 (*
cix_ö
)++;

916 
∑r£_ªt
.
ty≥
 = 
T_NUMBER
;

917 
∑r£_ªt
.
u
.
numbî
 = 
num
;

918  &
∑r£_ªt
;

920 *
Áû
 = 1;

923 i‡(
gAŒw‹d
 && (
	`°rcmp
(
w¨r
->
ôem
[
cix
].
u
.
°rög
, gAllword) == 0)) {

924 (*
cix_ö
)++;

925 
∑r£_ªt
.
ty≥
 = 
T_NUMBER
;

926 
∑r£_ªt
.
u
.
numbî
 = 0;

927  &
∑r£_ªt
;

930 
ãn
 = 0;Åen < 10;Åen++)

931 
⁄es
 = 0; ones < 10; ones++) {

932 
	`•rötf
(
buf
, "%s%s", 
num10
[
ãn
],

933 (
ãn
 > 1Ë? 
num1
[
⁄es
] :Çum1[ten * 10 + ones]);

934 i‡(
	`EQ
(
buf
, 
w¨r
->
ôem
[
cix
].
u
.
°rög
)) {

935 (*
cix_ö
)++;

936 
∑r£_ªt
.
ty≥
 = 
T_NUMBER
;

937 
∑r£_ªt
.
u
.
numbî
 = 
ãn
 * 10 + 
⁄es
;

938  &
∑r£_ªt
;

943 
ãn
 = 0;Åen < 10;Åen++)

944 
⁄es
 = 0; ones < 10; ones++) {

945 
	`•rötf
(
buf
, "%s%s", (
⁄es
Ë? 
‹d10
[
ãn
] : 
s‹d10
[ten],

946 (
ãn
 > 1Ë? 
‹d1
[
⁄es
] : ord1[ten * 10 + ones]);

947 i‡(
	`EQ
(
buf
, 
w¨r
->
ôem
[
cix
].
u
.
°rög
)) {

948 (*
cix_ö
)++;

949 
∑r£_ªt
.
ty≥
 = 
T_NUMBER
;

950 
∑r£_ªt
.
u
.
numbî
 = -(
ãn
 * 10 + 
⁄es
);

951  &
∑r£_ªt
;

955 *
Áû
 = 1;

957 
	}
}

976 
svÆue_t
 *

977 
ôem_∑r£
 
	$P4
(
¨øy_t
 *, 
ob¨r
,áºay_à*, 
w¨r
, *, 
cix_ö
, *, 
Áû
)

979 
¨øy_t
 *
tmp
, *
ªt
;

980 
svÆue_t
 *
pvÆ
;

981 
cix
, 
tix
, 
obix
, 
∂ur_Êag
, 
max_cix
, 
m©ch_Æl
;

983 
tmp
 = 
	`Æloˇã_¨øy
(
ob¨r
->
size
 + 1);

985 
	`push_ª„d_¨øy
(
tmp
);

987 i‡((
pvÆ
 = 
	`numbî_∑r£
(
ob¨r
, 
w¨r
, 
cix_ö
, 
Áû
)))

988 
tmp
->
ôem
[0] = *
pvÆ
;

990 i‡(
pvÆ
) {

991 
m©ch_Æl
 = (
pvÆ
->
u
.
numbî
 == 0);

992 
∂ur_Êag
 = (
m©ch_Æl
 || 
pvÆ
->
u
.
numbî
 > 1);

994 
∂ur_Êag
 = 0;

995 
m©ch_Æl
 = 0;

998 
max_cix
 = *
cix_ö
, 
tix
 = 1, 
obix
 = 0; obix < 
ob¨r
->
size
; obix++) {

999 *
Áû
 = 0;

1000 
cix
 = *
cix_ö
;

1001 i‡(
ob¨r
->
ôem
[
obix
].
ty≥
 !
T_OBJECT
)

1003 i‡(
cix
 =
w¨r
->
size
 && 
m©ch_Æl
) {

1004 
	`assign_svÆue_no_‰ì
(&
tmp
->
ôem
[
tix
++], &
ob¨r
->ôem[
obix
]);

1007 
	`lﬂd_Õc_öfo
(
obix
, 
ob¨r
->
ôem
[obix].
u
.
ob
);

1009 i‡(
	`m©ch_obje˘
(
obix
, 
w¨r
, &
cix
, &
∂ur_Êag
)) {

1010 
	`assign_svÆue_no_‰ì
(&
tmp
->
ôem
[
tix
++], &
ob¨r
->ôem[
obix
]);

1011 
max_cix
 = (max_cix < 
cix
) ? cix : max_cix;

1014 
•
--;

1016 i‡(
tix
 < 2) {

1017 *
Áû
 = 1;

1018 
	`‰ì_¨øy
(
tmp
);

1019 i‡(
pvÆ
)

1020 (*
cix_ö
)--;

1023 i‡(*
cix_ö
 < 
w¨r
->
size
)

1024 *
cix_ö
 = 
max_cix
 + 1;

1025 i‡(!
pvÆ
) {

1026 
tmp
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

1027 
tmp
->
ôem
[0].
u
.
numbî
 = 
∂ur_Êag
 ? 0 : 1;

1029 
ªt
 = 
	`¶i˚_¨øy
(
tmp
, 0, 
tix
 - 1);

1032 
∑r£_ªt
.
ty≥
 = 
T_ARRAY
;

1033 
∑r£_ªt
.
u
.
¨r
 = 
ªt
;

1034  &
∑r£_ªt
;

1035 
	}
}

1058 #i‚de‡
NO_ADD_ACTION


1059 
svÆue_t
 *

1060 
livög_∑r£
 
	$P4
(
¨øy_t
 *, 
ob¨r
,áºay_à*, 
w¨r
, *, 
cix_ö
, *, 
Áû
)

1062 
¨øy_t
 *
live
;

1063 
svÆue_t
 *
pvÆ
;

1064 
obje˘_t
 *
ob
;

1065 
obix
, 
tix
;

1067 
live
 = 
	`Æloˇã_¨øy
(
ob¨r
->
size
);

1069 
	`push_ª„d_¨øy
(
live
);

1070 
tix
 = 0;

1071 *
Áû
 = 0;

1073 
obix
 = 0; obix < 
ob¨r
->
size
; obix++)

1074 i‡(
ob¨r
->
ôem
[
obix
].
u
.
ob
->
Êags
 & 
O_ENABLE_COMMANDS
)

1075 
	`assign_svÆue_no_‰ì
(&
live
->
ôem
[
tix
++], &
ob¨r
->ôem[
obix
]);

1077 i‡(
tix
) {

1078 
pvÆ
 = 
	`ôem_∑r£
(
live
, 
w¨r
, 
cix_ö
, 
Áû
);

1079 i‡(
pvÆ
) {

1080 
•
--;

1081 
	`‰ì_¨øy
(
live
);

1082  
pvÆ
;

1085 
•
--;

1086 
	`‰ì_¨øy
(
live
);

1091 
ob
 = 
	`föd_livög_obje˘
(
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
, 1);

1092 i‡(!
ob
)

1096 
ob
 = 
	`föd_livög_obje˘
(
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
, 0);

1098 i‡(
ob
) {

1099 
∑r£_ªt
.
ty≥
 = 
T_OBJECT
;

1100 
∑r£_ªt
.
u
.
ob
 = ob;

1101 
	`add_ªf
(
ob
, "living_parse");

1102 (*
cix_ö
)++;

1103  &
∑r£_ªt
;

1105 *
Áû
 = 1;

1107 
	}
}

1120 
svÆue_t
 *

1121 
sögÀ_∑r£
 
	$P4
(
¨øy_t
 *, 
ob¨r
,áºay_à*, 
w¨r
, *, 
cix_ö
, *, 
Áû
)

1123 
cix
, 
obix
, 
∂ur_Êag
;

1125 
obix
 = 0; obix < 
ob¨r
->
size
; obix++) {

1126 *
Áû
 = 0;

1127 
cix
 = *
cix_ö
;

1128 i‡(
ob¨r
->
ôem
[
obix
].
ty≥
 =
T_OBJECT
)

1129 
	`lﬂd_Õc_öfo
(
obix
, 
ob¨r
->
ôem
[obix].
u
.
ob
);

1130 
∂ur_Êag
 = 0;

1131 i‡(
	`m©ch_obje˘
(
obix
, 
w¨r
, &
cix
, &
∂ur_Êag
)) {

1132 *
cix_ö
 = 
cix
 + 1;

1133 
	`assign_svÆue_no_‰ì
(&
∑r£_ªt
, &
ob¨r
->
ôem
[
obix
]);

1134  &
∑r£_ªt
;

1137 *
Áû
 = 1;

1139 
	}
}

1156 
svÆue_t
 *

1157 
¥ïos_∑r£
 
	$P4
(
¨øy_t
 *, 
w¨r
, *, 
cix_ö
, *, 
Áû
, 
svÆue_t
 *, 
¥ïos
)

1159 
¨øy_t
 *
∑º
, *
èº
;

1160 *
tmp
;

1161 
pix
, 
tix
;

1163 i‡((!
¥ïos
Ë|| (¥ïos->
ty≥
 !
T_ARRAY
)) {

1164 
∑º
 = 
gPªpos_li°
;

1166 
∑º
 = 
¥ïos
->
u
.
¨r
;

1169 
pix
 = 0;Öix < 
∑º
->
size
;Öix++) {

1170 i‡(
∑º
->
ôem
[
pix
].
ty≥
 !
T_STRING
)

1173 
tmp
 = 
∑º
->
ôem
[
pix
].
u
.
°rög
;

1174 i‡(!
	`°rchr
(
tmp
, ' ')) {

1175 i‡(
	`EQ
(
tmp
, 
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
)) {

1176 (*
cix_ö
)++;

1180 
èº
 = 
	`ex∂ode_°rög
(
tmp
, 
	`°æí
(tmp), " ", 1);

1181 
tix
 = 0;Åix < 
èº
->
size
;Åix++) {

1182 i‡((*
cix_ö
 + 
tix
 >
w¨r
->
size
) ||

1183 (!
	`EQ
(
w¨r
->
ôem
[*
cix_ö
 + 
tix
].
u
.
°rög
, 
èº
->item[tix].u.string)))

1186 i‡((
tix
 = (tix =
èº
->
size
) ? 1 : 0))

1187 (*
cix_ö
Ë+
èº
->
size
;

1188 
	`‰ì_¨øy
(
èº
);

1189 i‡(
tix
)

1194 i‡(
pix
 =
∑º
->
size
) {

1195 
∑r£_ªt
.
ty≥
 = 
T_NUMBER
;

1196 
∑r£_ªt
.
u
.
numbî
 = 0;

1197 *
Áû
 = 1;

1198 } i‡(
∑º
 !
gPªpos_li°
) {

1199 
∑r£_ªt
 = 
∑º
->
ôem
[0];

1200 
∑º
->
ôem
[0] =Ö¨r->ôem[
pix
];

1201 
∑º
->
ôem
[
pix
] = 
∑r£_ªt
;

1202 *
Áû
 = 0;

1203 
	`assign_svÆue_no_‰ì
(&
∑r£_ªt
, 
¥ïos
);

1205 
∑r£_ªt
.
ty≥
 = 
T_STRING
;

1206 
∑r£_ªt
.
subty≥
 = 
STRING_MALLOC
;

1207 
∑r£_ªt
.
u
.
°rög
 = 
	`°rög_c›y
(
∑º
->
ôem
[
pix
].u.string, "parse");

1208 *
Áû
 = 0;

1211  &
∑r£_ªt
;

1212 
	}
}

1225 
m©ch_obje˘
 
	$P4
(, 
obix
, 
¨øy_t
 *, 
w¨r
, *, 
cix_ö
, *, 
∂ur
)

1227 
¨øy_t
 *
ids
;

1228 
û
, 
pos
, 
˝lur
, 
ﬁd_cix
;

1229 *
°r
;

1231 
˝lur
 = (*
∂ur
 * 2); cplur < 4; cplur++) {

1232 
˝lur
) {

1234 i‡(!
gId_li°_d
)

1236 
ids
 = 
gId_li°_d
;

1240 i‡(!
gId_li°
 ||

1241 
gId_li°
->
size
 <
obix
 ||

1242 
gId_li°
->
ôem
[
obix
].
ty≥
 !
T_ARRAY
)

1244 
ids
 = 
gId_li°
->
ôem
[
obix
].
u
.
¨r
;

1248 i‡(!
gPluid_li°_d
)

1250 
ids
 = 
gPluid_li°_d
;

1254 i‡(!
gPluid_li°
 ||

1255 
gPluid_li°
->
size
 <
obix
 ||

1256 
gPluid_li°
->
ôem
[
obix
].
ty≥
 !
T_ARRAY
)

1258 
ids
 = 
gPluid_li°
->
ôem
[
obix
].
u
.
¨r
;

1262 
ids
 = 0;

1266 
û
 = 0; i»< 
ids
->
size
; il++) {

1267 i‡(
ids
->
ôem
[
û
].
ty≥
 =
T_STRING
) {

1268 
°r
 = 
ids
->
ôem
[
û
].
u
.
°rög
;

1269 
ﬁd_cix
 = *
cix_ö
;

1270 i‡((
pos
 = 
	`föd_°rög
(
°r
, 
w¨r
, 
cix_ö
)) >= 0) {

1271 i‡(
pos
 =
ﬁd_cix
) {

1272 i‡(
˝lur
 > 1)

1273 *
∂ur
 = 1;

1275 } i‡(
	`check_adje˘iv
(
obix
, 
w¨r
, 
ﬁd_cix
, 
pos
 - 1)) {

1276 i‡(
˝lur
 > 1)

1277 *
∂ur
 = 1;

1281 *
cix_ö
 = 
ﬁd_cix
;

1286 
	}
}

1298 
föd_°rög
 
	$P3
(*, 
°r
, 
¨øy_t
 *, 
w¨r
, *, 
cix_ö
)

1300 
Âos
;

1301 *
p1
, *
p2
;

1302 
¨øy_t
 *
•lô
;

1304 ; *
cix_ö
 < 
w¨r
->
size
; (*cix_in)++) {

1305 
p1
 = 
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
;

1306 i‡(
p1
[0] !
°r
[0])

1309 i‡(
	`°rcmp
(
p1
, 
°r
) == 0)

1310  *
cix_ö
;

1312 i‡(!(
p2
 = 
	`°rchr
(
°r
, ' ')))

1318 i‡(*
cix_ö
 =(
w¨r
->
size
 - 1))

1321 
•lô
 = 
	`ex∂ode_°rög
(
°r
, 
	`°æí
(str), " ", 1);

1328 i‡(!
•lô
 || (•lô->
size
 > (
w¨r
->sizê- *
cix_ö
))) {

1329 i‡(
•lô
)

1330 
	`‰ì_¨øy
(
•lô
);

1333 
Âos
 = *
cix_ö
;

1334 ; (*
cix_ö
 - 
Âos
Ë< 
•lô
->
size
; (*cix_in)++) {

1335 i‡(
	`°rcmp
(
•lô
->
ôem
[*
cix_ö
 - 
Âos
].
u
.
°rög
,

1336 
w¨r
->
ôem
[*
cix_ö
].
u
.
°rög
))

1339 i‡((*
cix_ö
 - 
Âos
Ë=
•lô
->
size
) {

1340 i‡(
•lô
)

1341 
	`‰ì_¨øy
(
•lô
);

1342  
Âos
;

1345 i‡(
•lô
)

1346 
	`‰ì_¨øy
(
•lô
);

1347 *
cix_ö
 = 
Âos
;

1350 
	}
}

1363 
check_adje˘iv
 
	$P4
(, 
obix
, 
¨øy_t
 *, 
w¨r
, , 
‰om
, , 
to
)

1365 
û
, 
back
, 
sum
, 
Áû
;

1366 *
ad°r
;

1367 
¨øy_t
 *
ids
;

1369 i‡(
gAdjid_li°
->
ôem
[
obix
].
ty≥
 =
T_ARRAY
)

1370 
ids
 = 
gAdjid_li°
->
ôem
[
obix
].
u
.
¨r
;

1372 
ids
 = 0;

1374 
sum
 = 0, 
Áû
 = 0, 
û
 = 
‰om
; i»<
to
; il++) {

1375 
sum
 +
	`°æí
(
w¨r
->
ôem
[
û
].
u
.
°rög
) + 1;

1376 i‡((
	`membî_°rög
(
w¨r
->
ôem
[
û
].
u
.
°rög
, 
ids
) < 0) &&

1377 (
	`membî_°rög
(
w¨r
->
ôem
[
û
].
u
.
°rög
, 
gAdjid_li°_d
) < 0)) {

1378 
Áû
 = 1;

1385 i‡(!
Áû
)

1388 i‡(
‰om
 =
to
)

1391 
ad°r
 = 
	`DXALLOC
(
sum
, 
TAG_TEMPORARY
, "check_adjectiv");

1405 
û
 = 
‰om
; i»<
to
;) {

1406 
back
 = 
to
; back >
û
; back--) {

1410 
ad°r
[0] = 0;

1411 
sum
 = 
û
; sum <
back
; sum++) {

1413 i‡(
sum
 > 
û
)

1414 
	`°rˇt
(
ad°r
, " ");

1415 
	`°rˇt
(
ad°r
, 
w¨r
->
ôem
[
sum
].
u
.
°rög
);

1417 i‡((
	`membî_°rög
(
ad°r
, 
ids
) < 0) &&

1418 (
	`membî_°rög
(
ad°r
, 
gAdjid_li°_d
) < 0))

1421 
û
 = 
back
 + 1;

1422 
back
 = 
to
;

1426 i‡(
back
 < 
to
) {

1427 
	`FREE
(
ad°r
);

1431 
	`FREE
(
ad°r
);

1433 
	}
}

1443 
membî_°rög
 
	$P2
(*, 
°r
, 
¨øy_t
 *, 
ßº
)

1445 
û
;

1447 i‡(!
ßº
)

1450 
û
 = 0; i»< 
ßº
->
size
; il++) {

1451 i‡(
ßº
->
ôem
[
û
].
ty≥
 !
T_STRING
)

1454 i‡(
	`°rcmp
(
ßº
->
ôem
[
û
].
u
.
°rög
, 
°r
) == 0)

1455  
û
;

1458 
	}
}

1460 #i‚de‡
PARSE_FOREIGN


1469 
∑r£_to_∂uøl
 
	$P1
(*, 
°r
)

1471 
¨øy_t
 *
w‹ds
;

1472 *
•
;

1473 
û
, 
ch™ged
;

1475 i‡(!(
	`°rchr
(
°r
, ' ')))

1476  
	`°rög_c›y
(
	`∑r£_⁄e_∂uøl
(
°r
), "parse_to_plural");

1478 
w‹ds
 = 
	`ex∂ode_°rög
(
°r
, 
	`°æí
(str), " ", 1);

1480 
ch™ged
 = 0, 
û
 = 1; i»< 
w‹ds
->
size
; il++) {

1481 i‡((
	`EQ
(
w‹ds
->
ôem
[
û
].
u
.
°rög
, "of")) ||

1482 (
û
 + 1 =
w‹ds
->
size
)) {

1483 
•
 = 
	`∑r£_⁄e_∂uøl
(
w‹ds
->
ôem
[
û
 - 1].
u
.
°rög
);

1484 i‡(
•
 !
w‹ds
->
ôem
[
û
 - 1].
u
.
°rög
) {

1485 
	`‰ì_svÆue
(&
w‹ds
->
ôem
[
û
 - 1], "parse_to_plural");

1486 
w‹ds
->
ôem
[
û
 - 1].
ty≥
 = 
T_STRING
;

1487 
w‹ds
->
ôem
[
û
 - 1].
subty≥
 = 
STRING_MALLOC
;

1488 
w‹ds
->
ôem
[
û
 - 1].
u
.
°rög
 = 
	`°rög_c›y
(
•
,

1490 
ch™ged
 = 1;

1494 i‡(!
ch™ged
) {

1495 
	`‰ì_¨øy
(
w‹ds
);

1496  
	`°rög_c›y
(
°r
, "parse_to_plural");

1498 
•
 = 
	`im∂ode_°rög
(
w‹ds
, " ", 1);

1499 
	`‰ì_¨øy
(
w‹ds
);

1500  
•
;

1501 
	}
}

1511 
∑r£_⁄e_∂uøl
 
	$P1
(*, 
°r
)

1513 
ch
, 
ch2
, 
ch3
;

1514 
¶
;

1515 
pbuf
[100];

1517 
¶
 = 
	`°æí
(
°r
) - 1;

1518 i‡((
¶
 < 2) || (sl > 90))

1519  
°r
;

1521 
ch
 = 
°r
[
¶
];

1522 
ch2
 = 
°r
[
¶
 - 1];

1523 
ch3
 = 
¶
 > 2 ? 
°r
[sl - 2] : '\0';

1524 
	`°r˝y
(
pbuf
, 
°r
);

1525 
pbuf
[
¶
] = 0;

1527 
ch
) {

1529 i‡(
ch2
 == 'f') {

1530 
pbuf
[
¶
 - 1] = 0;

1531  
	`°rˇt
(
pbuf
, "ves");

1534  
	`°rˇt
(
pbuf
, "ves");

1536 i‡(
ch2
 == 's' || ch2 == 'c')

1537  
	`°rˇt
(
pbuf
, "hes");

1539  
	`°rˇt
(
pbuf
, "ses");

1541 i‡(
	`EQ
(
°r
, "ox"))

1544  
	`°rˇt
(
pbuf
, "xes");

1546 i‡((
ch2
 != 'a' && ch2 != 'e' && ch2 != 'i' && ch2 != 'o' &&

1547 
ch2
 !'u'Ë|| (ch2 ='u' && 
ch3
 == 'q'))

1548  
	`°rˇt
(
pbuf
, "ies");

1551 i‡(
	`EQ
(
°r
, "corpse"))

1553 i‡(
	`EQ
(
°r
, "tooth"))

1555 i‡(
	`EQ
(
°r
, "foot"))

1557 i‡(
	`EQ
(
°r
, "man"))

1559 i‡(
	`EQ
(
°r
, "woman"))

1561 i‡(
	`EQ
(
°r
, "child"))

1563 i‡(
	`EQ
(
°r
, "sheep"))

1565 i‡(
	`EQ
(
°r
, "goose"))

1567 i‡(
	`EQ
(
°r
, "mouse"))

1569 i‡(
	`EQ
(
°r
, "deer"))

1571 i‡(
	`EQ
(
°r
, "moose"))

1574 
pbuf
[
¶
] = 
ch
;

1575  
	`°rˇt
(
pbuf
, "s");

1576 
	}
}

	@parse.h

1 #i‚de‡
PARSE_H


2 
	#PARSE_H


	)

4 
	~"Õc_ö˛.h
"

6 
∑r£
 
PROT
((*, 
svÆue_t
 *, *, svalue_t *, ));

7 *
¥o˚ss_°rög
 
PROT
((*));

8 
svÆue_t
 *
¥o˚ss_vÆue
 
PROT
((*));

9 *
bªak_°rög
 
PROT
((*, , 
svÆue_t
 *));

	@patchlevel.h

1 
	#PATCH_LEVEL
 "v22.2b14"

	)

	@plainwrapper.c

1 #ifde‡
PEDANTIC


2 
	gI_ªÆly_could_do_wôhout_w¨nögs_about_ANSI_C_nŸ_Ælowög_fûes_wôh_no_deföôi⁄s
;

	@port.c

1 
	~"°d.h
"

2 
	~"p‹t.h
"

3 
	~"löt.h
"

4 
	~"fûe_ö˛.h
"

5 
	~"√tw‹k_ö˛.h
"

7 #i‡
deföed
(
WIN32
Ë|| deföed(
LATTICE
)

8 
dos_°yÀ_lök
 
	$P2
(*, 
x
, *, 
y
) {

9 
lök_cmd
[100];

10 
	`•rötf
(
lök_cmd
, "c›y %†%s", 
x
, 
y
);

11  
	`sy°em
(
lök_cmd
);

12 
	}
}

16 #ifde‡
GET_PROCESS_STATS


17 
	~<sys/¥oc°©s.h
>

19 #ifde‡
RUSAGE


20 
	~<sys/ªsour˚.h
>

23 #ifde‡
sun


24 
time_t
 
time
 
PROT
((time_t *));

30 
øndom_numbî
 
	$P1
(, 
n
)

32 #i‡
	`deföed
(
RAND
Ë|| deföed(
DRAND48
)

33 
ˇŒed
 = 0;

35 i‡(!
ˇŒed
) {

36 
time_t
 
tim
;

38 
	`time
(&
tim
);

39 #ifde‡
RAND


40 
	`§™d
(
tim
);

42 
	`§™d48
(
tim
);

44 
ˇŒed
 = 1;

46 #ifde‡
RAND


47  
	`ønd
(Ë% 
n
;

49  ()(
	`dønd48
(Ë* 
n
);

52 #ifde‡
RANDOM


53  
	`øndom
(Ë% 
n
;

55  
cuºít_time
 % 
n
;

58 
	}
}

69 
	$gë_cuºít_time
()

71  (Ë
	`time
(0l);

72 
	}
}

74 *
time_°rög
 
	$P1
(
time_t
, 
t
)

76  
	`˘ime
(&
t
);

77 
	}
}

82 
	$öô_u£c_˛ock
()

84 #ifde‡
_SEQUENT_


85 
	`us˛k_öô
();

87 
	}
}

93 
gë_u£c_˛ock
 
	$P2
(*, 
£c
, *, 
u£c
)

95 #ifde‡
HAS_GETTIMEOFDAY


96 
timevÆ
 
tv
;

98 
	`gëtimeofday
(&
tv
, 
NULL
);

99 *
£c
 = 
tv
.
tv_£c
;

100 *
u£c
 = 
tv
.
tv_u£c
;

102 #ifde‡
_SEQUENT_


103 *
£c
 = 0;

104 *
u£c
 = 
	`GETUSCLK
();

106 #ifde‡
LATTICE


107 
˛ock
[2];

109 i‡(
	`timî
(
˛ock
)) {

110 *
£c
 = 
	`time
(0);

111 *
u£c
 = 0;

113 *
£c
 = 
˛ock
[0];

114 *
u£c
 = 
˛ock
[1];

117 *
£c
 = 
	`time
(0);

118 *
u£c
 = 0;

122 
	}
}

124 #ifde‡
USE_POSIX_SIGNALS


126 
p‹t_sigblock
 
	$P1
(
sig£t_t
, 
mask
)

128 
sig£t_t
 
omask
;

130 
	`sig¥ocmask
(
SIG_BLOCK
, &
mask
, &
omask
);

131  (
omask
);

132 
	}
}

135 
p‹t_sigmask
 
	$P1
(, 
sig
)

137 
sig£t_t
 
£t
;

139 
	`sigem±y£t
(&
£t
);

140 
	`sigadd£t
(&
£t
, 
sig
);

141  (
£t
);

142 
	}
}

145 (*
	$p‹t_sig«l
(
sig
, 
func
)) ()

146 
sig
;

147 (*
func
) ();

149 
siga˘i⁄
 
a˘
, 
ﬂ˘
;

151 
a˘
.
ß_h™dÀr
 = 
func
;

152 
a˘
.
ß_mask
 = 0;

153 
a˘
.
ß_Êags
 = 0;

154 i‡(
	`siga˘i⁄
(
sig
, &
a˘
, &
ﬂ˘
) == -1)

156  (
ﬂ˘
.
ß_h™dÀr
);

157 
	}
}

160 
p‹t_sig£tmask
 
	$P1
(
sig£t_t
, 
mask
)

162 
sig£t_t
 
omask
;

164 
	`sig¥ocmask
(
SIG_SETMASK
, &
mask
, &
omask
);

165  (
omask
);

166 
	}
}

170 
gë_˝u_times
 
	$P2
(*, 
£cs
, *, 
u£cs
)

172 #ifde‡
RUSAGE


173 
rußge
 
rus
;

175 #i‡
	`deföed
(
TIMES
Ë&& !deföed(
RUSAGE
)

176 
tms
 
t
;

177 
tŸÆ
;

179 #ifde‡
GET_PROCESS_STATS


180 
¥o˚ss_°©s
 
ps
;

183 #ifde‡
RUSAGE


184 i‡(
	`gërußge
(
RUSAGE_SELF
, &
rus
) < 0) {

187 *
£cs
 = 
rus
.
ru_utime
.
tv_£c
 +Ñus.
ru_°ime
.tv_sec;

188 *
u£cs
 = 
rus
.
ru_utime
.
tv_u£c
 +Ñus.
ru_°ime
.tv_usec;

192 #ifde‡
GET_PROCESS_STATS


193 i‡(
	`gë_¥o˚ss_°©s
(
NULL
, 
PS_SELF
, &
ps
, NULL) == -1) {

196 *
£cs
 = 
ps
.
ps_utime
.
tv_£c
 +Ös.
ps_°ime
.tv_sec;

197 *
u£cs
 = 
ps
.
ps_utime
.
tv_u£c
 +Ös.
ps_°ime
.tv_usec;

201 #ifde‡
TIMES


202 
	`times
(&
t
);

203 *
£cs
 = (
tŸÆ
 = 
t
.
tms_utime
 +Å.
tms_°ime
Ë/ 
CLK_TCK
;

204 *
u£cs
 = ((
tŸÆ
 - (*
£cs
 * 
CLK_TCK
)) * 1000000) / CLK_TCK;

208 #ifde‡
LATTICE


209 
˛ock
[2];

211 i‡(
	`timî
(
˛ock
))

214 *
£cs
 = 
˛ock
[0];

215 *
u£cs
 = 
˛ock
[1];

223 
	}
}

227 
gë_cuºít_dú
 
	$P2
(*, 
buf
, , 
limô
)

229 #ifde‡
HAS_GETCWD


230  
	`gëcwd
(
buf
, 
limô
);

232  
	`gëwd
(
buf
);

234 
	}
}

236 #i‚de‡
HAS_STRERROR


240 *
sys_îæi°
[];

241 
sys_√º
;

243 *
p‹t_°ªº‹
 
	$P1
(, 
which
)

245 i‡((
which
 < 0Ë|| (which >
sys_√º
)) {

248  
sys_îæi°
[
which
];

250 
	}
}

253 #ifde‡
MEMMOVE_MISSING


255 
INLINE
 *
memmove
 
	$P3
(*, 
b
, *, 
a
, , 
s
)

257 *
r
 = 
b
;

259 i‡(
b
 < 
a
) {

260 
s
--)

261 *(
b
++Ë*(
a
++);

262 } i‡(
b
 > 
a
) {

263 
b
 +
s
;

264 
a
 +
s
;

265 
s
--)

266 *(--
b
Ë*(--
a
);

268  
r
;

269 
	}
}

272 #ifde‡
WIN32


273 *
	$WöSåEº‹
(
îr
) {

274 
buf
[30];

275 i‡(
î∫o
 < 10000Ë 
	`°ªº‹
(
îr
);

276 
	`•rötf
(
buf
, "îr‹ #%d", 
îr
);

277  
buf
;

278 
	}
}

	@port.h

1 #i‚de‡
PORT_H


2 
	#PORT_H


	)

7 #i‚de‡
_FUNC_SPEC_


8 
øndom_numbî
 
PROT
(());

9 
gë_cuºít_time
 
PROT
(());

10 *
time_°rög
 
PROT
((
time_t
));

11 
öô_u£c_˛ock
 
PROT
(());

12 
gë_u£c_˛ock
 
PROT
((*, *));

13 
gë_˝u_times
 
PROT
((*, *));

14 *
gë_cuºít_dú
 
PROT
((*, ));

15 #ifde‡
DRAND48


16 
dønd48
 
PROT
(());

18 #i‚de‡
HAS_STRERROR


19 *
p‹t_°ªº‹
 
PROT
(());

	@portability.h

15 #i‚de‡
PORTABILITY_H


16 
	#PORTABILITY_H


	)

21 #unde‡
OLD_ULTRIX


24 #unde‡
OLD_HPUX


26 #i‡
deföed
(
WINNT
Ë|| deföed(
WIN95
)

27 #i‚de‡
WIN32


28 
	#WIN32


	)

29 #i‚de‡
_FUNC_SPEC_


30 * 
	tˇddr_t
;

33 
	#symlök
(
x
, 
y
Ë
	`dos_°yÀ_lök
(x, y)

	)

34 
	#CDECL
 
__cde˛


	)

36 
	#CDECL


	)

39 #ifde‡
WIN32


40 
	#WINSOCK


	)

41 #ifde‡
sun


42 #unde‡
sun


46 #i‡
deföed
(
SunOS_5
Ë&& !deföed(
SVR4
)

47 
	#SVR4


	)

54 #i‡(
deföed
(
hp200
Ë|| deföed(
hp300
Ë|| deföed(
hp400
Ë|| deföed(
hp500
)) \

55 && !
	$deföed
(
hpux
)

56 
	#hp68k


	)

57 
	#_ANSI_H


	)

63 #i‡
	`deföed
(
__osf__
Ë|| deföed(
__OSF__
)

64 
	#OSF


	)

67 #i‡!
	`deföed
(
AMIGA
) && ( \

68 ((
	`deföed
(
LATTICE
Ë|| deföed(
__SASC
)Ë&& deföed(
_AMIGA
)) || \

69 (
	`deföed
(
AZTEC_C
Ë&& 
	$deföed
(
MCH_AMIGA
)) )

70 
	#AMIGA


	)

76 #i‡
	`deföed
(
NeXT
)

77 
	#HAS_MONCONTROL


	)

85 #i‡(!
	`deföed
(
•¨c
))

86 
	#INET_NTOA_OK


	)

90 #i‡
	`deföed
(
hpux
Ë&& !deföed(
OLD_HPUX
Ë&& !deföed(
_FUNC_SPEC_
)

91 
	~<sys/sysˇŒ.h
>

92 
	#gërußge
(
a
, 
b
Ë
	`sysˇŒ
(
SYS_GETRUSAGE
, (a), (b))

	)

98 #ifde‡
_SEQUENT_


99 
	#GET_PROCESS_STATS


	)

108 #i‡(
	`deföed
(
_SEQUENT_
Ë|| deföed(
_M_UNIX
))

109 
	#USE_POSIX_SIGNALS


	)

121 #i‡(
	`deföed
(
_SEQUENT_
))

122 
	#HAS_SETDTABLESIZE


	)

126 
	#SIGNAL_FUNC_TAKES_INT
 
	`deföed
(
_AIX
Ë|| deföed(
NeXT
) \

127 || 
	`deföed
(
_SEQUENT_
Ë|| deföed(
SVR4
) \

128 || 
	`deföed
(
__386BSD__
Ë|| deföed(
≠ﬁlo
Ë|| deföed(
¸ay
) \

129 || 
	`deföed
(
SunOS_5
Ë|| deföed(
__bsdi__
Ë|| deföed(
löux
)

	)

140 #i‡!
	`deföed
(
löux
Ë&& !deföed(
__386BSD__
Ë&& !deföed(
__FªeBSD__
) \

141 && !
	`deföed
(
OSF
Ë&& !deföed(
SunOS_4
Ë&& !
	$deföed
(
sgi
)

142 #ifde‡
_SC_PAGE_SIZE


143 
	#MEMPAGESIZE
 
	`sysc⁄f
(
_SC_PAGE_SIZE
)

	)

145 #ifde‡
_SC_PAGESIZE


146 
	#MEMPAGESIZE
 
	`sysc⁄f
(
_SC_PAGESIZE
)

	)

149 
	#MEMPAGESIZE
 0x40000

	)

155 #unde‡
BSD42


158 #i‚de‡
_FUNC_SPEC_


160 #i‡
	`deföed
(
löux
Ë|| deföed(
_M_UNIX
)

162 
	~<sys/time.h
>

163 
	~<sys/sockë.h
>

164 #i‚de‡
FD_SETSIZE


165 
	#FD_SETSIZE
 256

	)

170 #i‡
	`deföed
(
¸ay
Ë&& !deföed(
MAXPATHLEN
)

171 
	#MAXPATHLEN
 
PATH_MAX


	)

174 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
MAXPATHLEN
)

175 
	#MAXPATHLEN
 512

	)

178 #i‡
	`deföed
(
_M_UNIX
Ë&& !deföed(
MAXPATHLEN
)

179 
	#MAXPATHLEN
 1024

	)

187 #ifde‡
USE_BCOPY


189 
	#memmove
(
a
,
b
,
c
Ë
	`bc›y
(b,a,c)

	)

192 #i‡
	`deföed
(
sun
Ë&& !deföed(
SunOS_5
)

193 
	#OLDCRYPT
(
x
, 
y
Ë
	`_¸y±
(x, y)

	)

195 
	#OLDCRYPT
(
x
, 
y
Ë
	`¸y±
(x, y)

	)

198 #ifde‡
CUSTOM_CRYPT


199 
	#CRYPT
(
x
, 
y
Ë
	`cu°om_¸y±
(x, y, 0)

	)

201 
	#CRYPT
(
x
, 
y
Ë
	`OLDCRYPT
(x, y)

	)

204 #ifde‡
HAS_STRERROR


205 
	#p‹t_°ªº‹
 
°ªº‹


	)

208 #ifde‡
WINSOCK


211 
	#WINSOCK_NO_FLAGS_SET
 0

	)

213 
	#OS_sockë_wrôe
(
f
, 
m
, 
l
Ë
	`£nd
(f, m,Ü, 
WINSOCK_NO_FLAGS_SET
)

	)

214 
	#OS_sockë_ªad
(
r
, 
b
, 
l
Ë
	`ªcv
‘, b,Ü, 
WINSOCK_NO_FLAGS_SET
)

	)

215 
	#OS_sockë_˛o£
(
f
Ë
	`˛o£sockë
(f)

	)

216 
	#OS_sockë_io˘l
(
f
, 
w
, 
a
Ë
	`io˘lsockë
(f, w,á)

	)

217 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

218 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

219 
	#EALREADY
 
WSAEALREADY


	)

220 
	#ENOTSOCK
 
WSAENOTSOCK


	)

221 
	#EDESTADDRREQ
 
WSAEDESTADDRREQ


	)

222 
	#EMSGSIZE
 
WSAEMSGSIZE


	)

223 
	#EPROTOTYPE
 
WSAEPROTOTYPE


	)

224 
	#ENOPROTOOPT
 
WSAENOPROTOOPT


	)

225 
	#EPROTONOSUPPORT
 
WSAEPROTONOSUPPORT


	)

226 
	#ESOCKTNOSUPPORT
 
WSAESOCKTNOSUPPORT


	)

227 
	#EOPNOTSUPP
 
WSAEOPNOTSUPP


	)

228 
	#EPFNOSUPPORT
 
WSAEPFNOSUPPORT


	)

229 
	#EAFNOSUPPORT
 
WSAEAFNOSUPPORT


	)

230 
	#EADDRINUSE
 
WSAEADDRINUSE


	)

231 
	#EADDRNOTAVAIL
 
WSAEADDRNOTAVAIL


	)

232 
	#ENETDOWN
 
WSAENETDOWN


	)

233 
	#ENETUNREACH
 
WSAENETUNREACH


	)

234 
	#ENETRESET
 
WSAENETRESET


	)

235 
	#ECONNABORTED
 
WSAECONNABORTED


	)

236 
	#ECONNRESET
 
WSAECONNRESET


	)

237 
	#ENOBUFS
 
WSAENOBUFS


	)

238 
	#EISCONN
 
WSAEISCONN


	)

239 
	#ENOTCONN
 
WSAENOTCONN


	)

240 
	#ESHUTDOWN
 
WSAESHUTDOWN


	)

241 
	#ETOOMANYREFS
 
WSAETOOMANYREFS


	)

242 
	#ETIMEDOUT
 
WSAETIMEDOUT


	)

243 
	#ECONNREFUSED
 
WSAECONNREFUSED


	)

244 
	#ELOOP
 
WSAELOOP


	)

245 
	#EHOSTDOWN
 
WSAEHOSTDOWN


	)

246 
	#EHOSTUNREACH
 
WSAEHOSTUNREACH


	)

247 
	#EPROCLIM
 
WSAEPROCLIM


	)

248 
	#EUSERS
 
WSAEUSERS


	)

249 
	#EDQUOT
 
WSAEDQUOT


	)

250 
	#ESTALE
 
WSAESTALE


	)

251 
	#EREMOTE
 
WSAEREMOTE


	)

252 
	#sockë_î∫o
 
	`WSAGëLa°Eº‹
()

	)

253 
	#sockë_≥º‹
(
x
, 
y
Ë
	`SockëPîr‹
(x, y)

	)

255 
	#FOPEN_READ
 "rb"

	)

256 
	#FOPEN_WRITE
 "wb"

	)

257 
	#OPEN_WRITE
 (
O_WRONLY
 | 
O_BINARY
)

	)

258 
	#OPEN_READ
 (
O_RDONLY
 | 
O_BINARY
)

	)

261 
	#OS_sockë_wrôe
(
f
, 
m
, 
l
Ë
	`£nd
(f, m,Ü, 0)

	)

262 
	#OS_sockë_ªad
(
r
, 
b
, 
l
Ë
	`ªcv
‘, b,Ü, 0)

	)

263 
	#OS_sockë_˛o£
(
f
Ë
	`˛o£
(f)

	)

264 
	#OS_sockë_io˘l
(
f
, 
w
, 
a
Ë
	`io˘l
(f, w, (
ˇddr_t
Ô)

	)

265 
	#sockë_î∫o
 
î∫o


	)

266 
	#sockë_≥º‹
(
x
, 
y
Ë
	`debug_≥º‹
(x, y)

	)

267 
	#INVALID_SOCKET
 -1

	)

268 
	#SOCKET_ERROR
 -1

	)

270 
	#FOPEN_READ
 "r"

	)

271 
	#FOPEN_WRITE
 "w"

	)

272 
	#OPEN_WRITE
 
O_WRONLY


	)

273 
	#OPEN_READ
 
O_RDONLY


	)

276 #i‚de‡
EWOULDBLOCK


277 #ifde‡
EAGAIN


278 
	#EWOULDBLOCK
 
EAGAIN


	)

	@portbind.c

3 
	~"°d.h
"

4 
	~"√tw‹k_ö˛.h
"

6 
	#HANDLE_ERROR
(
routöe
, 
ˇŒ
Ëi‡((ˇŒË=-1Ë{ 
	`≥º‹
(#routöe); 
	`exô
(-1); }

	)

8 
	$maö
(
¨gc
, **
¨gv
) {

9 
p‹t
 = -1;

10 *
ùaddªss
 = 0;

11 *
drivî_«me
 = "./driver";

12 
uid
 = -1;

13 
gid
 = -1;

15 
fd
;

16 
›tvÆ
 = 1;

17 
sockaddr_ö
 
sö
;

29 
¨gc
 > 1) {

30 i‡(
	`°rcmp
(
¨gv
[1], "-p") == 0) {

31 i‡(
¨gc
 =2 || 
	`ssˇnf
(
¨gv
[2], "%d", &
p‹t
) != 1) {

32 
	`Ârötf
(
°dîr
, "%s: -p must be followed byáÖortÇumber.\n",

33 
¨gv
[0]);

34 
	`exô
(-1);

36 
¨gc
 -= 2;

37 
¨gv
 += 2;

38 } i‡(
	`°rcmp
(
¨gv
[1], "-d") == 0) {

39 i‡(
¨gc
 == 2) {

40 
	`Ârötf
(
°dîr
, "%s: -d mu° bêfﬁlowed byÅhêdrivîÖ©h«me.\n", 
¨gv
[0]);

41 
	`exô
(-1);

43 
drivî_«me
 = 
¨gv
[2];

44 
¨gc
 -= 2;

45 
¨gv
 += 2;

46 } i‡(
	`°rcmp
(
¨gv
[1], "-u") == 0) {

47 i‡(
¨gc
 =2 || 
	`ssˇnf
(
¨gv
[2], "%d", &
uid
) != 1) {

48 
	`Ârötf
(
°dîr
, "%s: -u mu° bêfﬁlowed byá vÆidÇumîi¯uid.\n", 
¨gv
[0]);

49 
	`exô
(-1);

51 
¨gc
 -= 2;

52 
¨gv
 += 2;

53 } i‡(
	`°rcmp
(
¨gv
[1], "-g") == 0) {

54 i‡(
¨gc
 =2 || 
	`ssˇnf
(
¨gv
[2], "%d", &
gid
) != 1) {

55 
	`Ârötf
(
°dîr
, "%s: -g mu° bêfﬁlowed byá vÆidÇumîi¯gid.\n", 
¨gv
[0]);

56 
	`exô
(-1);

58 
¨gc
 -= 2;

59 
¨gv
 += 2;

60 } i‡(
	`°rcmp
(
¨gv
[1], "-i") == 0) {

61 i‡(
¨gc
 =2 || 
	`öë_addr
(
¨gv
[2]Ë=
INADDR_NONE
) {

62 
	`Ârötf
(
°dîr
, "%s: -òmu° bêfﬁlowed byá vÆid dŸãd decimÆ i∞addªss.\n", 
¨gv
[0]);

63 
	`exô
(-1);

65 
ùaddªss
 = 
¨gv
[2];

66 
¨gc
 -= 2;

67 
¨gv
 += 2;

71 i‡(
p‹t
 == -1) {

72 
	`Ârötf
(
°dîr
, "%s:áÖ‹àmu° bê•ecifõd wôh -p.\n", 
¨gv
[0]);

73 
	`exô
(-1);

77 
	`HANDLE_ERROR
(
sockë
, 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0));

80 
	`HANDLE_ERROR
(
dup2
, 
	`dup2
(
fd
, 6));

83 
	`HANDLE_ERROR
(
˛o£
, 
	`˛o£
(
fd
));

86 
	`HANDLE_ERROR
(
£tsock›t
, 
	`£tsock›t
(6, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
›tvÆ
, (optval)) == -1);

89 
sö
.
sö_Ámûy
 = 
AF_INET
;

90 
sö
.
sö_addr
.
s_addr
 = (
ùaddªss
 ? 
	`öë_addr
(ùaddªssË: 
INADDR_ANY
);

91 
sö
.
sö_p‹t
 = 
	`ht⁄s
(()
p‹t
);

94 
	`HANDLE_ERROR
(
böd
, 
	`böd
(6, (
sockaddr
 *)&
sö
, (sin)));

97 i‡(
gid
 != -1)

98 
	`HANDLE_ERROR
(
£tgid
, 
	`£tgid
(
gid
));

100 i‡(
uid
 != -1)

101 
	`HANDLE_ERROR
(
£tuid
, 
	`£tuid
(
uid
));

103 
¨gv
[0] = 
drivî_«me
;

105 
	`HANDLE_ERROR
(
execv
, 
	`execv
(
drivî_«me
, 
¨gv
));

107 
	}
}

	@preprocess.c

4 
c⁄d_gë_exp
 
PROT
(());

5 
h™dÀ_c⁄d
 
PROT
(());

7 #i‚de‡
LEXER


8 #unde‡
DXALLOC


9 
	#DXALLOC
(
x
, 
y
, 
z
Ë
	`mÆloc
(x)

	)

10 #unde‡
FREE


11 
	#FREE
(
x
Ë
	`‰ì
(x)

	)

12 #unde‡
ALLOCATE


13 
	#ALLOCATE
(
x
, 
y
, 
z
Ë(x *)
	`mÆloc
((x))

	)

14 #unde‡
DREALLOC


15 
	#DREALLOC
(
w
, 
x
, 
y
, 
z
Ë
	`ªÆloc
(w, x)

	)

18 
de‚_t
 *
	gde‚s
[
DEFHASH
];

19 
if°©e_t
 *
	gi·›
 = 0;

21 
de‚_t
 *
lookup_deföôi⁄
 
	$P1
(*, 
s
)

23 
de‚_t
 *
p
;

24 
h
;

26 
h
 = 
	`defhash
(
s
);

27 
p
 = 
de‚s
[
h
];Ö;Ö =Ö->
√xt
)

28 i‡(
	`°rcmp
(
s
, 
p
->
«me
) == 0)

29  
p
;

31 
	}
}

33 
de‚_t
 *
lookup_deföe
 
	$P1
(*, 
s
)

35 
de‚_t
 *
p
 = 
	`lookup_deföôi⁄
(
s
);

37 i‡(
p
 && (p->
Êags
 & 
DEF_IS_UNDEFINED
))

40  
p
;

41 
	}
}

43 
add_deföe
 
	$P3
(*, 
«me
, , 
«rgs
, *, 
exps
)

45 
de‚_t
 *
p
 = 
	`lookup_deföôi⁄
(
«me
);

46 
h
, 
Àn
;

49 
	`uis•a˚
(*
exps
))Éxps++;

50 
Àn
 = 
	`°æí
(
exps
);Üí && 
	`uis•a˚
(exps[len - 1]);Üen--);

51 i‡(*
exps
 == '#' && *(exps + 1) == '#') {

52 
	`yyîr‹
("'##'át start of macro definition");

55 i‡(
Àn
 > 2 && *(
exps
 +Üen - 2) == '#' && *(exps +Üen - 1) == '#') {

56 
	`yyîr‹
("'##'átÉnd of macro definition");

60 i‡(
p
) {

61 i‡(
p
->
Êags
 & 
DEF_IS_UNDEFINED
) {

62 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
Àn
 + 1, 
TAG_COMPILER
, "add_define:Ñedef");

63 
	`mem˝y
(
p
->
exps
,Éxps, 
Àn
);

64 
p
->
exps
[
Àn
] = 0;

65 
p
->
Êags
 = 0;

66 
p
->
«rgs
 =Çargs;

68 i‡(
p
->
Êags
 & 
DEF_IS_PREDEF
) {

69 
	`yyîr‹
("IllegalÅoÑedefineÖredefined value.");

72 i‡(
«rgs
 !
p
->«rg†|| 
	`°rcmp
(
exps
,Ö->exps)) {

73 
buf
[200 + 
NSIZE
];

75 
	`•rötf
(
buf
, "ªdeföôi⁄ o‡#deföê%s\n", 
«me
);

76 
	`yyw¨n
(
buf
);

78 
p
->
exps
 = (*)
	`DREALLOC
’->exps, 
Àn
 + 1, 
TAG_COMPILER
, "add_define:Ñedef");

79 
	`mem˝y
(
p
->
exps
,Éxps, 
Àn
);

80 
p
->
exps
[
Àn
] = 0;

81 
p
->
«rgs
 =Çargs;

83 #i‚de‡
LEXER


84 
p
->
Êags
 &~
DEF_IS_NOT_LOCAL
;

88 
p
 = 
	`ALLOCATE
(
de‚_t
, 
TAG_COMPILER
, "add_define: def");

89 
p
->
«me
 = (*Ë
	`DXALLOC
(
	`°æí
“ameË+ 1, 
TAG_COMPILER
, "add_define: defÇame");

90 
	`°r˝y
(
p
->
«me
,Çame);

91 
p
->
exps
 = (*Ë
	`DXALLOC
(
Àn
 + 1, 
TAG_COMPILER
, "add_define: defÉxps");

92 
	`mem˝y
(
p
->
exps
,Éxps, 
Àn
);

93 
p
->
exps
[
Àn
] = 0;

94 
p
->
Êags
 = 0;

95 
p
->
«rgs
 =Çargs;

96 
h
 = 
	`defhash
(
«me
);

97 
p
->
√xt
 = 
de‚s
[
h
];

98 
de‚s
[
h
] = 
p
;

100 
	}
}

102 #ifde‡
LEXER


103 
h™dÀ_ñif
 
	$P1
(*, 
•
)

105 
	$h™dÀ_ñif
()

108 i‡(
i·›
) {

109 i‡(
i·›
->
°©e
 =
EXPECT_ELSE
) {

111 
c⁄d
;

112 
if°©e_t
 *
p
 = 
i·›
;

115 
i·›
 = 
p
->
√xt
;

116 
	`FREE
((*Ë
p
);

118 #ifde‡
LEXER


119 *--
ouç
 = '\0';

120 
	`add_öput
(
•
);

122 
c⁄d
 = 
	`c⁄d_gë_exp
(0);

123 #ifde‡
LEXER


124 i‡(*
ouç
++) {

125 
	`yyîr‹
("ConditionÅoo complex in #elif");

126 *
ouç
++);

128 i‡(*
ouç
 != '\n') {

129 
	`yyîr‹
("ConditionÅoo complex in #elif");

131 } 
	`h™dÀ_c⁄d
(
c⁄d
);

137 
	`skù_to
("endif", (*) 0);

140 
	`yyîr‹p
("Unexpected %celif");

142 
	}
}

144 
h™dÀ_ñ£
 
PROT
(()) {

145 i‡(
	gi·›
) {

146 i‡(
	gi·›
->
	g°©e
 =
EXPECT_ELSE
) {

147 
i·›
->
°©e
 = 
EXPECT_ENDIF
;

149 
skù_to
("endif", (*) 0);

152 
yyîr‹p
("Unexpected %cendif");

156 
h™dÀ_ídif
 
PROT
(()) {

157 i‡(
	gi·›
 && (i·›->
	g°©e
 =
EXPECT_ENDIF
 ||

158 
i·›
->
°©e
 =
EXPECT_ELSE
)) {

159 
if°©e_t
 *
p
 = 
i·›
;

161 
	gi·›
 = 
p
->
√xt
;

162 
FREE
((*Ë
p
);

164 
yyîr‹p
("Unexpected %cendif");

168 
	#BNOT
 1

	)

169 
	#LNOT
 2

	)

170 
	#UMINUS
 3

	)

171 
	#UPLUS
 4

	)

173 
	#MULT
 1

	)

174 
	#DIV
 2

	)

175 
	#MOD
 3

	)

176 
	#BPLUS
 4

	)

177 
	#BMINUS
 5

	)

178 
	#LSHIFT
 6

	)

179 
	#RSHIFT
 7

	)

180 
	#LESS
 8

	)

181 
	#LEQ
 9

	)

182 
	#GREAT
 10

	)

183 
	#GEQ
 11

	)

184 
	#EQ
 12

	)

185 
	#NEQ
 13

	)

186 
	#BAND
 14

	)

187 
	#XOR
 15

	)

188 
	#BOR
 16

	)

189 
	#LAND
 17

	)

190 
	#LOR
 18

	)

191 
	#QMARK
 19

	)

193 
	g_›èb
[] =

197 
	g›èb2
[] =

198 {
BNOT
, 0, 0, 
LNOT
, '=', 
NEQ
, 7, 0, 0, 
UMINUS
, 0, 
BMINUS
, 10, 
UPLUS
, 0, 
BPLUS
, 10,

199 0, 0, 
MULT
, 11, 0, 0, 
DIV
, 11, 0, 0, 
MOD
, 11,

200 0, '<', 
LSHIFT
, 9, '=', 
LEQ
, 8, 0, 
LESS
, 8, 0, '>', 
RSHIFT
, 9, '=', 
GEQ
, 8, 0, 
GREAT
, 8,

201 0, '=', 
EQ
, 7, 0, 0, 0, '&', 
LAND
, 3, 0, 
BAND
, 6, 0, '|', 
LOR
, 2, 0, 
BOR
, 4,

202 0, 0, 
XOR
, 5, 0, 0, 
QMARK
, 1};

204 
	#›èb1
 (
_›èb
-' ')

	)

206 
c⁄d_gë_exp
 
	$P1
(, 
¥i‹ôy
)

208 
c
;

209 
vÆue
, 
vÆue2
, 
x
;

211 #ifde‡
LEXER


213 
c
 = 
	`exgëc
();

214 
	`is_w•a˚
(
c
));

215 i‡(
c
 == '(') {

217 i‡((
c
 = 
	`exgëc
()) == '(') {

219 
vÆue
 = 
	`c⁄d_gë_exp
(0);

220 #ifde‡
LEXER


222 
c
 = 
	`exgëc
();

223 
	`is_w•a˚
(
c
));

224 i‡(
c
 != ')') {

225 
	`yyîr‹
("bracketÇotÖaired in #if");

226 i‡(!
c
Ë*--
ouç
 = '\0';

229 i‡((
c
 = 
	`exgëc
()Ë!')'Ë
	`yyîr‹p
("bracketÇotÖaired in %cif");

231 } i‡(
	`i•un˘
(
c
)) {

232 i‡(!(
x
 = 
›èb1
[
c
])) {

233 
	`yyîr‹p
("illegal character in %cif");

236 
vÆue
 = 
	`c⁄d_gë_exp
(12);

237 
›èb2
[
x
 - 1]) {

238 
BNOT
:

239 
vÆue
 = ~value;

241 
LNOT
:

242 
vÆue
 = !value;

244 
UMINUS
:

245 
vÆue
 = -value;

247 
UPLUS
:

248 
vÆue
 = value;

251 
	`yyîr‹p
("illegal unary operator in %cif");

254 
ba£
;

256 i‡(!
	`isdigô
(
c
)) {

257 #ifde‡
LEXER


258 i‡(!
c
) {

260 i‡(
c
 == '\n') {

262 
	`yyîr‹p
("missingÉxpression in %cif");

264 
	`yyîr‹p
("illegal character in %cif");

267 
vÆue
 = 0;

268 i‡(
c
 != '0')

269 
ba£
 = 10;

271 
c
 = *
ouç
++;

272 i‡(
c
 == 'x' || c == 'X') {

273 
ba£
 = 16;

274 
c
 = *
ouç
++;

276 
ba£
 = 8;

279 i‡(
	`isdigô
(
c
))

280 
x
 = -'0';

281 i‡(
	`isuµî
(
c
))

282 
x
 = -'A' + 10;

283 i‡(
	`i¶owî
(
c
))

284 
x
 = -'a' + 10;

287 
x
 +
c
;

288 i‡(
x
 > 
ba£
)

290 
vÆue
 = vÆuê* 
ba£
 + 
x
;

291 
c
 = *
ouç
++;

293 
ouç
--;

296 #ifde‡
LEXER


298 
c
 = 
	`exgëc
();

299 
	`is_w•a˚
(
c
));

300 i‡(!
	`i•un˘
(
c
))

303 i‡(!
	`i•un˘
(
c
 = 
	`exgëc
()))

306 i‡(!(
x
 = 
›èb1
[
c
]))

308 
vÆue2
 = *
ouç
++;

309 ;; 
x
 += 3) {

310 i‡(!
›èb2
[
x
]) {

311 
ouç
--;

312 i‡(!
›èb2
[
x
 + 1]) {

313 
	`yyîr‹p
("illegal operator use in %cif");

318 i‡(
vÆue2
 =
›èb2
[
x
])

321 i‡(
¥i‹ôy
 >
›èb2
[
x
 + 2]) {

322 i‡(
›èb2
[
x
]Ë*--
ouç
 = 
vÆue2
;

325 
vÆue2
 = 
	`c⁄d_gë_exp
(
›èb2
[
x
 + 2]);

326 
›èb2
[
x
 + 1]) {

327 
MULT
:

328 
vÆue
 *
vÆue2
;

330 
DIV
:

331 i‡(
vÆue2
)

332 
vÆue
 /
vÆue2
;

334 
	`yyîr‹p
("division by 0 in %cif");

336 
MOD
:

337 i‡(
vÆue2
)

338 
vÆue
 %
vÆue2
;

340 
	`yyîr‹p
("modulo by 0 in %cif");

342 
BPLUS
:

343 
vÆue
 +
vÆue2
;

345 
BMINUS
:

346 
vÆue
 -
vÆue2
;

348 
LSHIFT
:

349 
vÆue
 <<
vÆue2
;

351 
RSHIFT
:

352 
vÆue
 >>
vÆue2
;

354 
LESS
:

355 
vÆue
 = vÆuê< 
vÆue2
;

357 
LEQ
:

358 
vÆue
 = vÆuê<
vÆue2
;

360 
GREAT
:

361 
vÆue
 = vÆuê> 
vÆue2
;

363 
GEQ
:

364 
vÆue
 = vÆuê>
vÆue2
;

366 
EQ
:

367 
vÆue
 = vÆuê=
vÆue2
;

369 
NEQ
:

370 
vÆue
 = vÆuê!
vÆue2
;

372 
BAND
:

373 
vÆue
 &
vÆue2
;

375 
XOR
:

376 
vÆue
 ^
vÆue2
;

378 
BOR
:

379 
vÆue
 |
vÆue2
;

381 
LAND
:

382 
vÆue
 = vÆuê&& 
vÆue2
;

384 
LOR
:

385 
vÆue
 = vÆuê|| 
vÆue2
;

387 
QMARK
:

388 #ifde‡
LEXER


390 
c
 = 
	`exgëc
();

391 
	`is•a˚
(
c
));

392 i‡(
c
 != ':') {

393 
	`yyîr‹
("'?' without ':' in #if");

394 
ouç
--;

398 i‡((
c
 = 
	`exgëc
()Ë!':'Ë
	`yyîr‹p
("'?' without ':' in %cif");

400 i‡(
vÆue
) {

401 
	`c⁄d_gë_exp
(1);

402 
vÆue
 = 
vÆue2
;

404 
vÆue
 = 
	`c⁄d_gë_exp
(1);

408 
ouç
--;

409  
vÆue
;

410 
	}
}

413 
h™dÀ_c⁄d
 
	$P1
(, 
c
)

415 
if°©e_t
 *
p
;

417 i‡(!
c
)

418 
	`skù_to
("else", "endif");

419 
p
 = 
	`ALLOCATE
(
if°©e_t
, 
TAG_COMPILER
, "handle_cond");

420 
p
->
√xt
 = 
i·›
;

421 
i·›
 = 
p
;

422 
p
->
°©e
 = 
c
 ? 
EXPECT_ENDIF
 : 
EXPECT_ELSE
;

423 
	}
}

	@preprocess.h

1 #i‚de‡
PREPROCESS_H


2 
	#PREPROCESS_H


	)

4 
de‚_t
 *
lookup_deföe
 
PROT
((*));

	@program.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"sw≠.h
"

5 
	gtŸÆ_num_¥og_blocks
, 
	gtŸÆ_¥og_block_size
;

7 
ª„ªn˚_¥og
 
	$P2
(
¥ogøm_t
 *, 
¥ogp
, *, 
‰om
)

9 
¥ogp
->
ªf
++;

10 
	`debug
(
d_Êag
, ("reference_prog: /%sÑef %d (%s)\n",

11 
¥ogp
->
«me
,Örogp->
ªf
, 
‰om
));

12 
	}
}

14 
dóŒoˇã_¥ogøm
 
	$P1
(
¥ogøm_t
 *, 
¥ogp
)

16 
i
;

18 
	`debug
(
d_Êag
, ("‰ì_¥og: /%s\n", 
¥ogp
->
«me
));

20 
tŸÆ_¥og_block_size
 -
¥ogp
->
tŸÆ_size
;

21 
tŸÆ_num_¥og_blocks
 -= 1;

24 
i
 = 0; i < (Ë
¥ogp
->
num_fun˘i⁄s_deföed
; i++)

25 i‡(
¥ogp
->
fun˘i⁄_èbÀ
[
i
].
«me
)

26 
	`‰ì_°rög
(
¥ogp
->
fun˘i⁄_èbÀ
[
i
].
«me
);

28 
i
 = 0; i < (Ë
¥ogp
->
num_°rögs
; i++)

29 
	`‰ì_°rög
(
¥ogp
->
°rögs
[
i
]);

31 
i
 = 0; i < (Ë
¥ogp
->
num_v¨übÀs_deföed
; i++)

32 
	`‰ì_°rög
(
¥ogp
->
v¨übÀ_èbÀ
[
i
]);

34 
i
 = 0; i < (Ë
¥ogp
->
num_öhîôed
; i++)

35 
	`‰ì_¥og
(
¥ogp
->
öhîô
[
i
].
¥og
, 1);

36 
	`‰ì_°rög
(
¥ogp
->
«me
);

42 i‡(
¥ogp
->
löe_sw≠_ödex
 != -1)

43 
	`ªmove_löe_sw≠
(
¥ogp
);

44 i‡(
¥ogp
->
fûe_öfo
)

45 
	`FREE
(
¥ogp
->
fûe_öfo
);

47 
	`FREE
((*Ë
¥ogp
);

48 
	}
}

57 
‰ì_¥og
 
	$P2
(
¥ogøm_t
 *, 
¥ogp
, , 
‰ì_sub_°rögs
)

59 
¥ogp
->
ªf
--;

60 i‡(
¥ogp
->
ªf
 > 0)

62 i‡(
¥ogp
->
func_ªf
 > 0)

65 i‡(
‰ì_sub_°rögs
)

66 
	`dóŒoˇã_¥ogøm
(
¥ogp
);

68 
tŸÆ_¥og_block_size
 -
¥ogp
->
tŸÆ_size
;

69 
tŸÆ_num_¥og_blocks
 -= 1;

70 
	`FREE
((*Ë
¥ogp
);

72 
	}
}

74 *
v¨übÀ_«me
 
	$P2
(
¥ogøm_t
 *, 
¥og
, , 
idx
) {

75 
i
 = 
¥og
->
num_öhîôed
 - 1;

76 
fú°
;

78 i‡(
i
 > -1)

79 
fú°
 = 
¥og
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
 +Örog->öhîô[i].¥og->
num_v¨übÀs_tŸÆ
;

81  
¥og
->
v¨übÀ_èbÀ
[
idx
];

82 i‡(
idx
 >
fú°
)

83  
¥og
->
v¨übÀ_èbÀ
[
idx
 - 
fú°
];

84 
idx
 < 
¥og
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
)

85 
i
--;

86  
	`v¨übÀ_«me
(
¥og
->
öhîô
[
i
].¥og, 
idx
 -Örog->öhîô[i].
v¨übÀ_ödex_off£t
);

87 
	}
}

89 
fun˘i⁄_t
 *
föd_func_íåy
 
	$P2
(
¥ogøm_t
 *, 
¥og
, , 
ödex
) {

90 
low
, 
mid
, 
high
;

94 i‡(
¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_ALIAS
) {

95 
ödex
 = 
¥og
->
fun˘i⁄_Êags
[ödex] & ~
FUNC_ALIAS
;

98 
¥og
->
fun˘i⁄_Êags
[
ödex
] & 
FUNC_INHERITED
) {

99 
low
 = 0;

100 
high
 = 
¥og
->
num_öhîôed
 -1;

102 
high
 > 
low
) {

103 
mid
 = (
low
 + 
high
 + 1) >> 1;

104 i‡(
¥og
->
öhîô
[
mid
].
fun˘i⁄_ödex_off£t
 > 
ödex
)

105 
high
 = 
mid
 -1;

106 
low
 = 
mid
;

108 
ödex
 -
¥og
->
öhîô
[
low
].
fun˘i⁄_ödex_off£t
;

109 
¥og
 =Örog->
öhîô
[
low
].prog;

112 
ödex
 -
¥og
->
œ°_öhîôed
;

114  
¥og
->
fun˘i⁄_èbÀ
 + 
ödex
;

115 
	}
}

	@program.h

1 #i‚de‡
PROGRAM_H


2 
	#PROGRAM_H


	)

76 
	#FUNC_INHERITED
 0x0001

	)

77 
	#FUNC_UNDEFINED
 0x0002

	)

78 
	#FUNC_STRICT_TYPES
 0x0004

	)

79 
	#FUNC_PROTOTYPE
 0x0008

	)

80 
	#FUNC_TRUE_VARARGS
 0x0010

	)

81 
	#FUNC_VARARGS
 0x0020

	)

82 
	#FUNC_ALIAS
 0x8000

	)

84 
	#DECL_HIDDEN
 0x0100

	)

85 
	#DECL_PRIVATE
 0x0200

	)

86 
	#DECL_PROTECTED
 0x0400

	)

87 
	#DECL_PUBLIC
 0x0800

	)

88 
	#DECL_NOMASK
 0x1000

	)

89 
	#DECL_NOSAVE
 0x2000

	)

90 #i‚de‡
SENSIBLE_MODIFIERS


91 
	#DECL_VISIBLE
 0x4000

	)

93 
	#DECL_ACCESS
 (
DECL_HIDDEN
 | 
DECL_PRIVATE
 | 
DECL_PROTECTED
 | 
DECL_PUBLIC
 | 
DECL_VISIBLE
)

	)

95 
	#DECL_MODIFY
(
x
,
y
Ë((((x)|(y))&
DECL_VISIBLE
Ë? ((((x)|(y))&~
DECL_ACCESS
)|DECL_VISIBLEË: 
	`DECL_MODIFY2
(x,y))

	)

97 
	#DECL_ACCESS
 (
DECL_HIDDEN
 | 
DECL_PRIVATE
 | 
DECL_PROTECTED
 | 
DECL_PUBLIC
)

	)

99 
	#DECL_MODIFY
(
x
,
y
Ë
	`DECL_MODIFY2
(x,y)

	)

101 
	#DECL_MODS
 (
DECL_ACCESS
 | 
DECL_NOMASK
 | 
DECL_NOSAVE
)

	)

103 
	#DECL_MODIFY2
(
t
, 
mod
Ë(((—Ë& 
DECL_ACCESS
Ë> ((modË& DECL_ACCESS)Ë? (—Ë& ~DECL_ACCESSË| (modË: (tË| ((modË& ~DECL_ACCESS))

	)

106 
	#FUNC_MASK
 (
FUNC_VARARGS
 | 
FUNC_UNDEFINED
 | 
FUNC_STRICT_TYPES
 | 
FUNC_PROTOTYPE
 | 
FUNC_TRUE_VARARGS
 | 
FUNC_ALIAS
 | 
DECL_MODS
)

	)

109 
	#FUNC_NO_CODE
 (
FUNC_ALIAS
 | 
FUNC_PROTOTYPE
 | 
FUNC_UNDEFINED
)

	)

110 
	#REAL_FUNCTION
(
x
Ë(!((xË& (
FUNC_ALIAS
 | 
FUNC_PROTOTYPE
)))

	)

122 
	#TYPE_MOD_ARRAY
 0x0040

	)

123 
	#TYPE_MOD_CLASS
 0x0080

	)

124 
	#CLASS_NUM_MASK
 0x003f

	)

126 
	#LOCAL_MOD_REF
 0x0100

	)

127 
	#LOCAL_MOD_UNUSED
 0x0200

	)

129 
	#LOCAL_MODS
 (
LOCAL_MOD_UNUSED
|
LOCAL_MOD_REF
)

	)

132 
	mnum_¨g
;

133 
	mnum_loˇl
;

134 
	mf_ödex
;

135 } 
	tru¡ime_deföed_t
;

138 
	moff£t
;

139 
	mfun˘i⁄_ödex_off£t
;

140 } 
	tru¡ime_öhîôed_t
;

143 
ru¡ime_deföed_t
 
	mdef
;

144 
ru¡ime_öhîôed_t
 
	möh
;

145 } 
	tru¡ime_fun˘i⁄_u
;

148 
	mfú°_deföed
;

149 
	mfú°_ovîlﬂd
;

150 
	mnum_com¥es£d
;

151 
	mnum_dñëed
;

152 
	mödex
[1];

153 } 
	tcom¥es£d_off£t_èbÀ_t
;

155 #ifde‡
LPC_TO_C


156 
	#ADDRESS_TYPE
 
POINTER_INT


	)

157 
	#ADDRESS_MAX
 
UINT_MAX


	)

159 #ifde‡
USE_32BIT_ADDRESSES


160 
	#ADDRESS_TYPE
 

	)

161 
	#ADDRESS_MAX
 
UINT_MAX


	)

163 
	#ADDRESS_TYPE
 

	)

164 
	#ADDRESS_MAX
 
USHRT_MAX


	)

169 *
	m«me
;

170 
	mty≥
;

171 
	mnum_¨g
;

172 
	mnum_loˇl
;

173 
ADDRESS_TYPE
 
	maddªss
;

174 #ifde‡
PROFILE_FUNCTIONS


175 
	mˇŒs
, 
	m£lf
, 
	mchûdªn
;

177 } 
	tfun˘i⁄_t
;

180 
	m«me
;

181 
	mty≥
;

182 
	msize
;

183 
	mödex
;

184 } 
	t˛ass_def_t
;

187 
	m«me
;

188 
	mty≥
;

189 } 
	t˛ass_membî_íåy_t
;

192 *
	m«me
;

193 
	mty≥
;

194 } 
	tv¨übÀ_t
;

197 
¥ogøm_s
 *
	m¥og
;

198 
	mfun˘i⁄_ödex_off£t
;

199 
	mv¨übÀ_ödex_off£t
;

200 
	mty≥_mod
;

201 } 
	töhîô_t
;

203 
	s¥ogøm_s
 {

204 *
	m«me
;

205 
	mÊags
;

206 
	mœ°_öhîôed
;

207 
	mªf
;

208 
	mfunc_ªf
;

209 #ifde‡
DEBUG


210 
	mexåa_ªf
;

211 
	mexåa_func_ªf
;

213 *
	m¥ogøm
;

214 *
	mlöe_öfo
;

215 *
	mfûe_öfo
;

216 
	mlöe_sw≠_ödex
;

217 
fun˘i⁄_t
 *
	mfun˘i⁄_èbÀ
;

218 *
	mfun˘i⁄_Êags
;

219 
˛ass_def_t
 *
	m˛as£s
;

220 
˛ass_membî_íåy_t
 *
	m˛ass_membîs
;

221 **
	m°rögs
;

222 **
	mv¨übÀ_èbÀ
;

223 *
	mv¨übÀ_ty≥s
;

224 
öhîô_t
 *
	möhîô
;

225 
	mtŸÆ_size
;

236 *
	m¨gumít_ty≥s
;

237 
	#INDEX_START_NONE
 65535

	)

238 *
	mty≥_°¨t
;

242 
	mhóπ_bót
;

244 
	m¥ogøm_size
;

245 
	mnum_˛as£s
;

246 
	mnum_fun˘i⁄s_deföed
;

247 
	mnum_°rögs
;

248 
	mnum_v¨übÀs_tŸÆ
;

249 
	mnum_v¨übÀs_deföed
;

250 
	mnum_öhîôed
;

251 } 
	t¥ogøm_t
;

253 
tŸÆ_num_¥og_blocks
;

254 
tŸÆ_¥og_block_size
;

255 
ª„ªn˚_¥og
 
PROT
((
¥ogøm_t
 *, *));

256 
‰ì_¥og
 
PROT
((
¥ogøm_t
 *, ));

257 
dóŒoˇã_¥ogøm
 
PROT
((
¥ogøm_t
 *));

258 *
v¨übÀ_«me
 
PROT
((
¥ogøm_t
 *, ));

259 
fun˘i⁄_t
 *
föd_func_íåy
 
PROT
((
¥ogøm_t
 *, ));

	@qsort.c

10 
	~"°d.h
"

11 
	~"qs‹t.h
"

13 
	#LEN
 (
svÆue_t
)

	)

14 
	#MAX_LEN
 1000

	)

16 
INLINE_STATIC
 
doSw≠
 
PROT
((*, *, ));

17 
qS‹t
 
PROT
((*, , , , , (*) ()));

19 
INLINE_STATIC
 
doSw≠
 
	$P3
(*, 
⁄e
, *, 
two
,

20 , 
size
)

22 
t
;

24 
size
--) {

25 
t
 = *
⁄e
;

26 *(
⁄e
++Ë*
two
;

27 *(
two
++Ë
t
;

29 
	}
}

33 
	$qS‹t
(
v
, 
À·
, 
right
, 
size
, 
rightmo°
, 
com∑r
)

34 *
v
;

35 
À·
, 
right
, 
size
, 
rightmo°
;

36 (*
com∑r
Ë
	`PROT
((*, *));

38 
i
, 
œ°
, 
szÀ·
;

40 i‡((
À·
 >
right
Ë|| (À· < 0Ë|| (righà> 
rightmo°
) || (right < 0)) {

43 
szÀ·
 = 
size
 * 
À·
;

44 
	`doSw≠
((*Ë
v
 + 
szÀ·
, (*Ëv + (
size
 * ((
À·
 + 
right
) / 2)), size);

45 
œ°
 = 
À·
;

46 
i
 = 
À·
 + 1; i <
right
; i++) {

47 i‡((*
com∑r
Ë((*Ë
v
 + (
size
 * 
i
), (*Ëv + 
szÀ·
) < 0) {

48 
	`doSw≠
((*Ë
v
 + (
size
 * ++
œ°
), (*Ëv + (sizê* 
i
), size);

51 
	`doSw≠
((*Ë
v
 + 
szÀ·
, (*Ëv + (
size
 * 
œ°
), size);

52 
	`qS‹t
(
v
, 
À·
, 
œ°
 - 1, 
size
, 
rightmo°
, 
com∑r
);

53 
	`qS‹t
(
v
, 
œ°
 + 1, 
right
, 
size
, 
rightmo°
, 
com∑r
);

54 
	}
}

56 
	$quickS‹t
(
a
, 
nmemb
, 
size
, 
com∑r
)

57 *
a
;

58 
nmemb
, 
size
;

59 (*
com∑r
Ë
	`PROT
((*, *));

61 i‡(
nmemb
 < 2) {

64 
	`qS‹t
(
a
, 0, 
nmemb
 - 1, 
size
,Çmemb - 1, 
com∑r
);

65 
	}
}

	@qsort.h

1 #i‚de‡
QSORT_H


2 
	#QSORT_H


	)

7 
quickS‹t
 
PROT
((*, , , (*) ()));

	@rc.c

10 
	~"°d.h
"

11 
	~"rc.h
"

12 
	~"ö˛ude/ru¡ime_c⁄fig.h
"

13 
	~"maö.h
"

15 
	#MAX_LINE_LENGTH
 120

	)

17 *
	gc⁄fig_°r
[
NUM_CONFIG_STRS
];

18 
	gc⁄fig_öt
[
NUM_CONFIG_INTS
];

20 *
	gbuff
;

21 
	gbuff_size
;

23 
ªad_c⁄fig_fûe
 
PROT
((
FILE
 *));

24 
sˇn_c⁄fig_löe
 
PROT
((*, *, ));

25 
c⁄fig_öô
 
PROT
(());

27 
	$c⁄fig_öô
() {

28 
i
;

30 
i
 = 0; i < 
NUM_CONFIG_INTS
; i++) {

31 
c⁄fig_öt
[
i
] = 0;

33 
i
 = 0; i < 
NUM_CONFIG_STRS
; i++) {

34 
c⁄fig_°r
[
i
] = 0;

37 
	}
}

39 
ªad_c⁄fig_fûe
 
	$P1
(
FILE
 *, 
fûe
)

41 
°r
[
MAX_LINE_LENGTH
 * 4];

42 
size
 = 2, 
Àn
, 
tmp
;

43 *
p
;

45 
buff_size
 = 
MAX_LINE_LENGTH
 * (
NUM_CONFIG_INTS
 + 1Ë* (
NUM_CONFIG_STRS
 + 1);

46 
p
 = 
buff
 = 
	`CALLOCATE
(
buff_size
, , 
TAG_CONFIG
, "read_config_file: 1");

47 *
p
++ = '\n';

50 i‡(
	`fgës
(
°r
, 
MAX_LINE_LENGTH
 * 4, 
fûe
Ë=
NULL
)

52 i‡(!
°r
)

54 
Àn
 = 
	`°æí
(
°r
);

55 i‡(
Àn
 > 
MAX_LINE_LENGTH
) {

56 
	`Ârötf
(
°dîr
, "*Eº‹ i¿c⁄fig fûe:Üöêtoÿl⁄g:\n%s...\n", 
°r
);

57 
	`exô
(-1);

59 i‡(
°r
[0] != '#' && str[0] != '\n') {

60 
size
 +
Àn
 + 1;

61 i‡(
size
 > 
buff_size
) {

62 
tmp
 = 
p
 - 
buff
;

63 
buff
 = 
	`RESIZE
(buff, 
buff_size
 *= 2, ,

64 
TAG_CONFIG
, "read_config_file: 2");

65 
p
 = 
buff
 + 
tmp
;

67 
	`°∫˝y
(
p
, 
°r
, 
Àn
);

68 
p
 +
Àn
;

69 *
p
++ = '\n';

72 *
p
 = 0;

73 
	}
}

85 
sˇn_c⁄fig_löe
 
	$P3
(*, 
fmt
, *, 
de°
, , 
ªquúed
)

87 *
tmp
, *
íd
;

88 
missög_löe
[
MAX_LINE_LENGTH
];

92 *((*)
de°
) = 0;

93 
tmp
 = 
buff
;

94 
tmp
) {

95 (
tmp
 = (*Ë
	`°rchr
(tmp, '\n'))) {

96 i‡(*(++
tmp
Ë=
fmt
[0]) ;

99 
íd
 = (
tmp
 ? 
	`°rchr
(tmp, '\n') : 0);

100 i‡(
íd
) *end = '\0';

101 i‡(
tmp
 && 
	`ssˇnf
—mp, 
fmt
, 
de°
) == 1) {

102 i‡(
íd
) *end = '\n';

105 i‡(
íd
) *end = '\n';

107 i‡(!
tmp
) {

108 
	`°r˝y
(
missög_löe
, 
fmt
);

109 
tmp
 = (*Ë
	`°rchr
(
missög_löe
, ':');

110 *
tmp
 = '\0';

111 i‡(
ªquúed
 == -1) {

112 
	`Ârötf
(
°dîr
, "*Warning: MissingÜine in config file:\n\t%s\n",

113 
missög_löe
);

116 i‡(!
ªquúed
)  0;

117 
	`Ârötf
(
°dîr
, "*Error in config file. MissingÜine:\n\t%s\n",

118 
missög_löe
);

119 
	`exô
(-1);

122 
	}
}

125 *
	$¥o˚ss_c⁄fig_°rög
(*
°r
) {

126 *
p
 = 
°r
;

127 *
q
;

128 
n
;

130 *
p
 && 
	`is•a˚
(*p))

131 
p
++;

132 
n
 = 
	`°æí
(
p
);

133 i‡(!
n
Ë 
	`Æloc_c°rög
("", "config_file: blank string");

135 
q
 = 
p
 + 
n
 - 1;

136 
q
 > 
p
 && 
	`is•a˚
(*q))

137 
q
--;

138 
q
[1] = 0;

139  
	`Æloc_c°rög
(
p
, "process_config_string()");

140 
	}
}

143 
£t_deÁu…s
 
	$P1
(*, 
fûíame
)

145 
FILE
 *
def
;

146 
deÁu…s
[
SMALL_STRING_SIZE
];

147 *
p
;

148 
tmp
[
MAX_LINE_LENGTH
];

149 
köd
[
MAX_LINE_LENGTH
];

150 
i
, 
p‹t
, 
p‹t_°¨t
 = 0;

152 
max_°rög_Àngth
 = 120;

153 
	`c⁄fig_öô
();

154 
def
 = 
	`f›í
(
fûíame
, "r");

155 i‡(
def
) {

156 
	`Ârötf
(
°dîr
, "usög c⁄fig fûe: %s\n", 
fûíame
);

158 #ifde‡
LATTICE


159 i‡(
	`°rchr
(
CONFIG_FILE_DIR
, ':'))

160 
	`•rötf
(
deÁu…s
, "%s%s", 
CONFIG_FILE_DIR
, 
fûíame
);

163 
	`•rötf
(
deÁu…s
, "%s/%s", 
CONFIG_FILE_DIR
, 
fûíame
);

165 
def
 = 
	`f›í
(
deÁu…s
, "r");

166 i‡(
def
) {

167 
	`Ârötf
(
°dîr
, "usög c⁄fig fûe: %s\n", 
deÁu…s
);

170 i‡(!
def
) {

171 
	`Ârötf
(
°dîr
, "*Eº‹: couldn'àföd o∏›í c⁄fig fûe: '%s'\n", 
fûíame
);

172 
	`exô
(-1);

174 
	`ªad_c⁄fig_fûe
(
def
);

176 
	`sˇn_c⁄fig_löe
("globÆ in˛udêfûê: %[^\n]", 
tmp
, 0);

177 
p
 = 
	`CONFIG_STR
(
__GLOBAL_INCLUDE_FILE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: gif");

180 i‡(*
p
 && *p != '"' && *p != '<') {

181 *
±r
;

183 
	`Ârötf
(
°dîr
, "Missing '\"' or '<'áround global include fileÇame;ádding quotes.\n");

184 
±r
 = 
p
; *ptr;Ötr++)

186 
±r
[2] = 0;

187 
±r
[1] = '"';

188 
±r
 > 
p
) {

189 *
±r
 =Ötr[-1];

190 
±r
--;

192 *
p
 = '"';

195 
	`sˇn_c⁄fig_löe
("«mê: %[^\n]", 
tmp
, 1);

196 
	`CONFIG_STR
(
__MUD_NAME__
Ë
	`Æloc_c°rög
(
tmp
, "config file: mn");

197 
	`sˇn_c⁄fig_löe
("addªs†£rvî i∞: %[^\n]", 
tmp
, 0);

198 
	`CONFIG_STR
(
__ADDR_SERVER_IP__
Ë
	`Æloc_c°rög
(
tmp
, "config file:ási");

200 
	`sˇn_c⁄fig_löe
("mudlib dúe˘‹y : %[^\n]", 
tmp
, 1);

201 
	`CONFIG_STR
(
__MUD_LIB_DIR__
Ë
	`Æloc_c°rög
(
tmp
, "config file: mld");

202 
	`sˇn_c⁄fig_löe
("bö¨y dúe˘‹y : %[^\n]", 
tmp
, 1);

203 
	`CONFIG_STR
(
__BIN_DIR__
Ë
	`Æloc_c°rög
(
tmp
, "config file: bd");

205 
	`sˇn_c⁄fig_löe
("log dúe˘‹y : %[^\n]", 
tmp
, 1);

206 
	`CONFIG_STR
(
__LOG_DIR__
Ë
	`Æloc_c°rög
(
tmp
, "config file:Üd");

207 
	`sˇn_c⁄fig_löe
("ö˛udêdúe˘‹õ†: %[^\n]", 
tmp
, 1);

208 
	`CONFIG_STR
(
__INCLUDE_DIRS__
Ë
	`Æloc_c°rög
(
tmp
, "config file: id");

209 #ifde‡
BINARIES


210 
	`sˇn_c⁄fig_löe
("ßvêbö¨õ†dúe˘‹y : %[^\n]", 
tmp
, 1);

211 
	`CONFIG_STR
(
__SAVE_BINARIES_DIR__
Ë
	`Æloc_c°rög
(
tmp
, "config file: sbd");

213 
	`CONFIG_STR
(
__SAVE_BINARIES_DIR__
Ë
	`Æloc_c°rög
("", "config file: sbd");

216 
	`sˇn_c⁄fig_löe
("ma°î fûê: %[^\n]", 
tmp
, 1);

217 
	`CONFIG_STR
(
__MASTER_FILE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: mf");

218 
	`sˇn_c⁄fig_löe
("simuœãdÉfu¿fûê: %[^\n]", 
tmp
, 0);

219 
	`CONFIG_STR
(
__SIMUL_EFUN_FILE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: sef");

220 
	`sˇn_c⁄fig_löe
("sw≠ fûê: %[^\n]", 
tmp
, 1);

221 
	`CONFIG_STR
(
__SWAP_FILE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: sf");

222 
	`sˇn_c⁄fig_löe
("debugÜog fûê: %[^\n]", 
tmp
, -1);

223 
	`CONFIG_STR
(
__DEBUG_LOG_FILE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: dlf");

225 
	`sˇn_c⁄fig_löe
("deÁu…Éº‹ mesßgê: %[^\n]", 
tmp
, 0);

226 
	`CONFIG_STR
(
__DEFAULT_ERROR_MESSAGE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: dem");

227 
	`sˇn_c⁄fig_löe
("deÁu… faû mesßgê: %[^\n]", 
tmp
, 0);

228 
	`CONFIG_STR
(
__DEFAULT_FAIL_MESSAGE__
Ë
	`Æloc_c°rög
(
tmp
, "config file: dfm");

230 
	`sˇn_c⁄fig_löe
("mud i∞: %[^\n]", 
tmp
, 0);

231 
	`CONFIG_STR
(
__MUD_IP__
Ë
	`Æloc_c°rög
(
tmp
, "config file: mi");

233 i‡(
	`sˇn_c⁄fig_löe
("fd6 köd : %[^\n]", 
tmp
, 0)) {

234 i‡(!
	`°rˇ£cmp
(
tmp
, "telnet"))

235 
FD6_KIND
 = 
PORT_TELNET
;

236 i‡(!
	`°rˇ£cmp
(
tmp
, "mud"))

237 
FD6_KIND
 = 
PORT_MUD
;

238 i‡(!
	`°rˇ£cmp
(
tmp
, "ascii"))

239 
FD6_KIND
 = 
PORT_ASCII
;

240 i‡(!
	`°rˇ£cmp
(
tmp
, "binary"))

241 
FD6_KIND
 = 
PORT_BINARY
;

243 
	`Ârötf
(
°dîr
, "UnknownÖortÅype for fd6 kind. fd6 support disabled.\n");

244 
FD6_KIND
 = 
PORT_UNDEFINED
;

247 
FD6_KIND
 = 
PORT_UNDEFINED
;

250 i‡(
	`sˇn_c⁄fig_löe
("p‹ànumbî : %d\n", &
	`CONFIG_INT
(
__MUD_PORT__
), 0)) {

251 
exã∫Æ_p‹t
[0].
p‹t
 = 
PORTNO
;

252 
exã∫Æ_p‹t
[0].
köd
 = 
PORT_TELNET
;

253 
p‹t_°¨t
 = 1;

256 
	`sˇn_c⁄fig_löe
("address serverÖort : %d\n",

257 &
	`CONFIG_INT
(
__ADDR_SERVER_PORT__
), 0);

259 
	`sˇn_c⁄fig_löe
("fd6Ö‹à: %d\n", &
	`CONFIG_INT
(
__FD6_PORT__
), 0);

261 
	`sˇn_c⁄fig_löe
("timeÅo clean up : %d\n",

262 &
	`CONFIG_INT
(
__TIME_TO_CLEAN_UP__
), 1);

263 
	`sˇn_c⁄fig_löe
("timeÅoÑeset : %d\n",

264 &
	`CONFIG_INT
(
__TIME_TO_RESET__
), 1);

265 
	`sˇn_c⁄fig_löe
("timeÅo swap : %d\n",

266 &
	`CONFIG_INT
(
__TIME_TO_SWAP__
), 1);

272 
	`sˇn_c⁄fig_löe
("evaluator stack size : %d\n",

273 &
	`CONFIG_INT
(
__EVALUATOR_STACK_SIZE__
), 0);

274 
	`sˇn_c⁄fig_löe
("maximumÜocal variables : %d\n",

275 &
	`CONFIG_INT
(
__MAX_LOCAL_VARIABLES__
), 0);

276 
	`sˇn_c⁄fig_löe
("maximum call depth : %d\n",

277 &
	`CONFIG_INT
(
__MAX_CALL_DEPTH__
), 0);

278 
	`sˇn_c⁄fig_löe
("living hashÅable size : %d\n",

279 &
	`CONFIG_INT
(
__LIVING_HASH_TABLE_SIZE__
), 0);

282 
	`sˇn_c⁄fig_löe
("inherit chain size : %d\n",

283 &
	`CONFIG_INT
(
__INHERIT_CHAIN_SIZE__
), 1);

284 
	`sˇn_c⁄fig_löe
("maximumÉvaluation cost : %d\n",

285 &
	`CONFIG_INT
(
__MAX_EVAL_COST__
), 1);

287 
	`sˇn_c⁄fig_löe
("maximumárray size : %d\n",

288 &
	`CONFIG_INT
(
__MAX_ARRAY_SIZE__
), 1);

289 #i‚de‡
NO_BUFFER_TYPE


290 
	`sˇn_c⁄fig_löe
("maximum buffer size : %d\n",

291 &
	`CONFIG_INT
(
__MAX_BUFFER_SIZE__
), 1);

293 
	`sˇn_c⁄fig_löe
("maximum mapping size : %d\n",

294 &
	`CONFIG_INT
(
__MAX_MAPPING_SIZE__
), 1);

295 
	`sˇn_c⁄fig_löe
("maximum stringÜength : %d\n",

296 &
	`CONFIG_INT
(
__MAX_STRING_LENGTH__
), 1);

297 
	`sˇn_c⁄fig_löe
("maximum bits iná bitfield : %d\n",

298 &
	`CONFIG_INT
(
__MAX_BITFIELD_BITS__
), 1);

300 
	`sˇn_c⁄fig_löe
("maximum byteÅransfer : %d\n",

301 &
	`CONFIG_INT
(
__MAX_BYTE_TRANSFER__
), 1);

302 
	`sˇn_c⁄fig_löe
("maximumÑead file size : %d\n",

303 &
	`CONFIG_INT
(
__MAX_READ_FILE_SIZE__
), 1);

305 
	`sˇn_c⁄fig_löe
("reserved size : %d\n",

306 &
	`CONFIG_INT
(
__RESERVED_MEM_SIZE__
), 0);

308 
	`sˇn_c⁄fig_löe
("hashÅable size : %d\n",

309 &
	`CONFIG_INT
(
__SHARED_STRING_HASH_TABLE_SIZE__
), 1);

310 
	`sˇn_c⁄fig_löe
("objectÅable size : %d\n",

311 &
	`CONFIG_INT
(
__OBJECT_HASH_TABLE_SIZE__
), 1);

314 i‡(
p‹t_°¨t
 == 1) {

315 i‡(
	`sˇn_c⁄fig_löe
("exã∫Æ_p‹t_1 : %[^\n]", 
tmp
, 0)) {

316 
p‹t
 = 
	`CONFIG_INT
(
__MUD_PORT__
);

317 
	`Ârötf
(
°dîr
, "W¨nög:Éxã∫Æ_p‹t_1áÃódy deföedÅÿbê'ã ë %i' byÅhêlöe\¿ 'p‹ànumbî : %i'; ign‹ögÅhêlöê'exã∫Æ_p‹t_1 : %s'\n", 
p‹t
,Ö‹t, 
tmp
);

320 
i
 = 
p‹t_°¨t
; i < 5; i++) {

321 
exã∫Æ_p‹t
[
i
].
köd
 = 0;

322 
exã∫Æ_p‹t
[
i
].
fd
 = -1;

323 
	`•rötf
(
köd
, "exã∫Æ_p‹t_%ò: %%[^\n]", 
i
 + 1);

324 i‡(
	`sˇn_c⁄fig_löe
(
köd
, 
tmp
, 0)) {

325 i‡(
	`ssˇnf
(
tmp
, "%†%d", 
köd
, &
p‹t
) == 2) {

326 
exã∫Æ_p‹t
[
i
].
p‹t
 =Öort;

327 i‡(!
	`°rcmp
(
köd
, "telnet"))

328 
exã∫Æ_p‹t
[
i
].
köd
 = 
PORT_TELNET
;

330 i‡(!
	`°rcmp
(
köd
, "binary")) {

331 #ifde‡
NO_BUFFER_TYPE


332 
	`Ârötf
(
°dîr
, "binaryÖorts unavailable with NO_BUFFER_TYPE defined.\n");

333 
	`exô
(-1);

335 
exã∫Æ_p‹t
[
i
].
köd
 = 
PORT_BINARY
;

337 i‡(!
	`°rcmp
(
köd
, "ascii"))

338 
exã∫Æ_p‹t
[
i
].
köd
 = 
PORT_ASCII
;

340 i‡(!
	`°rcmp
(
köd
, "MUD"))

341 
exã∫Æ_p‹t
[
i
].
köd
 = 
PORT_MUD
;

344 
	`Ârötf
(
°dîr
, "Unknown kind ofÉxternalÖort: %s\n",

345 
köd
);

346 
	`exô
(-1);

349 
	`Ârötf
(
°dîr
, "SyntaxÉrror inÖort specification\n");

350 
	`exô
(-1);

354 #ifde‡
PACKAGE_EXTERNAL


356 
i
 = 0; i < 
NUM_EXTERNAL_CMDS
; i++) {

357 
	`•rötf
(
köd
, "exã∫Æ_cmd_%ò: %%[^\n]", 
i
 + 1);

358 i‡(
	`sˇn_c⁄fig_löe
(
köd
, 
tmp
, 0))

359 
exã∫Æ_cmd
[
i
] = 
	`Æloc_c°rög
(
tmp
, "external cmd");

361 
exã∫Æ_cmd
[
i
] = 0;

365 
	`FREE
(
buff
);

366 
	`f˛o£
(
def
);

371 
c⁄fig_öt
[
__EVALUATOR_STACK_SIZE__
 - 
BASE_CONFIG_INT
] = 
CFG_EVALUATOR_STACK_SIZE
;

372 
c⁄fig_öt
[
__MAX_LOCAL_VARIABLES__
 - 
BASE_CONFIG_INT
] = 
CFG_MAX_LOCAL_VARIABLES
;

373 
c⁄fig_öt
[
__MAX_CALL_DEPTH__
 - 
BASE_CONFIG_INT
] = 
CFG_MAX_CALL_DEPTH
;

374 
c⁄fig_öt
[
__LIVING_HASH_TABLE_SIZE__
 - 
BASE_CONFIG_INT
] = 
CFG_LIVING_HASH_SIZE
;

375 
	}
}

377 
gë_c⁄fig_ôem
 
	$P2
(
svÆue_t
 *, 
ªs
, svÆue_à*, 
¨g
)

379 
num
;

381 
num
 = 
¨g
->
u
.
numbî
;

383 i‡(
num
 < 0 ||Çum >
RUNTIME_CONFIG_NEXT
) {

386 i‡(
num
 >
BASE_CONFIG_INT
) {

387 
ªs
->
ty≥
 = 
T_NUMBER
;

388 
ªs
->
u
.
numbî
 = 
c⁄fig_öt
[
num
 - 
BASE_CONFIG_INT
];

390 
ªs
->
ty≥
 = 
T_STRING
;

391 
ªs
->
subty≥
 = 
STRING_CONSTANT
;

392 
ªs
->
u
.
°rög
 = 
c⁄fig_°r
[
num
];

396 
	}
}

	@rc.h

1 #i‚de‡
RC_H


2 
	#RC_H


	)

4 
	~"Õc_ö˛.h
"

10 
£t_deÁu…s
 
PROT
((*));

11 
gë_c⁄fig_öt
 
PROT
(());

12 *
gë_c⁄fig_°r
 
PROT
(());

13 
gë_c⁄fig_ôem
 
PROT
((
svÆue_t
 *, svalue_t *));

	@reclaim.c

8 
	~"°d.h
"

9 
	~"Õc_ö˛.h
"

10 
	~"ª˛aim.h
"

11 
	~"ˇŒ_out.h
"

13 
	#MAX_RECURSION
 25

	)

15 
gc_m≠pög
 
PROT
((
m≠pög_t
 *));

16 
check_svÆue
 
PROT
((
svÆue_t
 *));

18 
	g˛ó√d
, 
	g√°ed
;

21 
check_svÆue
 
	$P1
(
svÆue_t
 *, 
v
)

23 
idx
;

25 
√°ed
++;

26 i‡(
√°ed
 > 
MAX_RECURSION
) {

29 
v
->
ty≥
) {

30 
T_OBJECT
:

31 i‡(
v
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
) {

32 
	`‰ì_svÆue
(
v
, "reclaim_objects");

33 *
v
 = 
c⁄°0u
;

34 
˛ó√d
++;

37 
T_MAPPING
:

38 
	`gc_m≠pög
(
v
->
u
.
m≠
);

40 
T_ARRAY
:

41 
T_CLASS
:

42 
idx
 = 0; idx < 
v
->
u
.
¨r
->
size
; idx++)

43 
	`check_svÆue
(&
v
->
u
.
¨r
->
ôem
[
idx
]);

45 
T_FUNCTION
:

47 
svÆue_t
 
tmp
;

48 
¥ogøm_t
 *
¥og
;

50 i‡(
v
->
u
.
Â
->
hdr
.
ow√r
 && (v->u.Â->hdr.ow√r->
Êags
 & 
O_DESTRUCTED
)) {

51 i‡(
v
->
u
.
Â
->
hdr
.
ty≥
 =
FP_LOCAL
 | 
FP_NOT_BINDABLE
) {

52 
¥og
 = 
v
->
u
.
Â
->
hdr
.
ow√r
->prog;

53 
¥og
->
func_ªf
--;

54 
	`debug
(
d_Êag
, ("subtr funcÑef /%s:Çow %i\n",

55 
¥og
->
«me
,Örog->
func_ªf
));

56 i‡(!
¥og
->
ªf
 && !¥og->
func_ªf
)

57 
	`dóŒoˇã_¥ogøm
(
¥og
);

59 
	`‰ì_obje˘
(
v
->
u
.
Â
->
hdr
.
ow√r
, "reclaim_objects");

60 
v
->
u
.
Â
->
hdr
.
ow√r
 = 0;

61 
˛ó√d
++;

64 
tmp
.
ty≥
 = 
T_ARRAY
;

65 i‡((
tmp
.
u
.
¨r
 = 
v
->u.
Â
->
hdr
.
¨gs
))

66 
	`check_svÆue
(&
tmp
);

70 
√°ed
--;

72 
	}
}

75 
gc_m≠pög
 
	$P1
(
m≠pög_t
 *, 
m
)

81 
m≠pög_node_t
 **
¥ev
, *
ñt
;

82 
j
 = (Ë
m
->
èbÀ_size
;

85 
¥ev
 = 
m
->
èbÀ
 + 
j
;

86 (
ñt
 = *
¥ev
)) {

87 i‡(
ñt
->
vÆues
[0].
ty≥
 =
T_OBJECT
) {

88 i‡(
ñt
->
vÆues
[0].
u
.
ob
->
Êags
 & 
O_DESTRUCTED
) {

89 
	`‰ì_obje˘
(
ñt
->
vÆues
[0].
u
.
ob
, "gc_mapping");

92 i‡(!(*
¥ev
 = 
ñt
->
√xt
Ë&& !
m
->
èbÀ
[
j
])

93 
m
->
unfûÀd
++;

94 
˛ó√d
++;

95 
m
->
cou¡
--;

96 
tŸÆ_m≠pög_nodes
--;

97 
tŸÆ_m≠pög_size
 -(
m≠pög_node_t
);

98 
	`‰ì_node
(
m
, 
ñt
);

103 
	`check_svÆue
(
ñt
->
vÆues
);

105 
	`check_svÆue
(
ñt
->
vÆues
+1);

106 
¥ev
 = &(
ñt
->
√xt
);

108 } 
j
--);

109 
	}
}

111 
	$ª˛aim_obje˘s
()

113 
i
;

114 
obje˘_t
 *
ob
;

116 
	`ª˛aim_ˇŒ_outs
();

118 
˛ó√d
 = 
√°ed
 = 0;

119 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
)

120 i‡(
ob
->
¥og
)

121 
i
 = 0; i < (Ë
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++)

122 
	`check_svÆue
(&
ob
->
v¨übÀs
[
i
]);

124  
˛ó√d
;

125 
	}
}

	@reclaim.h

1 #i‚de‡
RECLAIM_H


2 
	#RECLAIM_H


	)

7 
ª˛aim_obje˘s
 
PROT
(());

	@regexp.c

58 
	~"°d.h
"

59 
	~"ªgexp.h
"

60 
	~"Õc_ö˛.h
"

61 
	~"comm.h
"

62 
	~"ed.h
"

88 
	#MAGIC
 0234

	)

107 
	#END
 0

	)

108 
	#BOL
 1

	)

109 
	#EOL
 2

	)

110 
	#ANY
 3

	)

111 
	#ANYOF
 4

	)

112 
	#ANYBUT
 5

	)

114 
	#BRANCH
 6

	)

115 
	#BACK
 7

	)

116 
	#EXACTLY
 8

	)

117 
	#NOTHING
 9

	)

118 
	#STAR
 10

	)

120 
	#PLUS
 11

	)

122 
	#WORDSTART
 12

	)

123 
	#WORDEND
 13

	)

124 
	#OPEN
 20

	)

127 
	#CLOSE
 30

	)

161 
	#OP
(
p
Ë(*’))

	)

163 #unde‡
NEXT


164 
	#NEXT
(
p
Ë(((*(’)+1)&0377)<<8Ë+ (*(’)+2)&0377))

	)

165 
	#OPERAND
(
p
Ë(’Ë+ 3)

	)

171 
	#SPECIAL
 0x100

	)

172 
	#LBRAC
 ('('|
SPECIAL
)

	)

173 
	#RBRAC
 (')'|
SPECIAL
)

	)

174 
	#ASTERIX
 ('*'|
SPECIAL
)

	)

175 
	#PLUSS
 ('+'|
SPECIAL
)

	)

176 
	#QMARK
 ('?'|
SPECIAL
)

	)

177 
	#OR_OP
 ('|'|
SPECIAL
)

	)

178 
	#DOLLAR
 ('$'|
SPECIAL
)

	)

179 
	#DOT
 ('.'|
SPECIAL
)

	)

180 
	#CARET
 ('^'|
SPECIAL
)

	)

181 
	#LSQBRAC
 ('['|
SPECIAL
)

	)

182 
	#RSQBRAC
 (']'|
SPECIAL
)

	)

183 
	#LSHBRAC
 ('<'|
SPECIAL
)

	)

184 
	#RSHBRAC
 ('>'|
SPECIAL
)

	)

186 
	#FAIL
(
m
Ë{ 
	`ªgîr‹
(m); (
NULL
); }

	)

187 
	#ISMULT
(
c
Ë((cË=
ASTERIX
 || (cË=
PLUSS
 || (cË=
QMARK
)

	)

188 
	#META
 "^$.[()|?+*\\"

	)

195 #i‡
deföed
(
löux
)

196 #i‚de‡
CHARBITS


197 
	#CHARBITS
 0xff

	)

199 
	#UCHARAT
(
p
Ë(()*(*)’))

	)

201 #i‚de‡
CHARBITS


202 
	#CHARBITS
 0xff

	)

203 
	#UCHARAT
(
p
Ë(()*(*)’))

	)

205 
	#UCHARAT
(
p
Ë(()*’)&
CHARBITS
)

	)

209 #unde‡
CHARBITS


210 
	#CHARBITS
 0xff

	)

211 
	#UCHARAT
(
p
Ë((Ë*(*)’))

	)

214 
	#ISWORDPART
(
c
Ë–
	`iß um
(()cË|| (cË='_' )

	)

219 
	#HASWIDTH
 01

	)

220 
	#SIMPLE
 02

	)

221 
	#SPSTART
 04

	)

222 
	#WORST
 0

	)

227 
	gªgexp_u£r
;

228 *
	gªgexp_îr‹
;

230 *
	gªg∑r£
;

231 
	gªg≈¨
;

232 
	gªgdummy
;

233 *
	gªgcode
;

234 
	gªgsize
;

239 #i‚de‡
STATIC


240 
	#STATIC
 

	)

242 
STATIC
 *
ªg
 
PROT
((, *));

243 
STATIC
 *
ªgbønch
 
PROT
((*));

244 
STATIC
 *
ªgpõ˚
 
PROT
((*));

245 
STATIC
 *
ªg©om
 
PROT
((*));

246 
STATIC
 *
ªgnode
 
PROT
(());

247 
STATIC
 *
ªg√xt
 
PROT
((*));

248 
STATIC
 
ªgc
 
PROT
(());

249 
STATIC
 
ªgö£π
 
PROT
((, *));

250 
STATIC
 
ªgèû
 
PROT
((*, *));

251 
STATIC
 
ªg›èû
 
PROT
((*, *));

253 #ifde‡
STRCSPN


254 
STATIC
 
°rc•n
();

257 
STATIC
 
ªgîr‹
 
	$P1
(*, 
s
) {

258 
ªgexp_u£r
) {

259 
ED_REGEXP
:

260 
	`ED_OUTPUTV
(
ED_DEST
, "ed:Ñeguœ∏ex¥essi⁄Éº‹: %s", 
s
);

262 
EFUN_REGEXP
:

263 
ªgexp_îr‹
 = 
s
;

266 
	}
}

283 
ªgexp
 *
ªgcomp
 
	$P2
(*, 
exp
,

284 , 
excom∑t
)

286 
ªgexp
 *
r
;

287 *
sˇn
;

288 *
l⁄ge°
;

289 
Àn
;

290 
Êags
;

291 *
exp2
, *
de°
, 
c
;

293 i‡(!
exp
)

294 
	`FAIL
("NULLárgument\n");

296 
exp2
 = (*)

297 
	`DXALLOC
((
	`°æí
((*)
exp
) + 1) * (([8]) / ([8])),

298 
TAG_TEMPORARY
, "regcomp: 1");

299 
sˇn
 = 
exp
, 
de°
 = 
exp2
; (
c
 = *scan++);) {

300 
c
) {

303 *
de°
++ = 
excom∑t
 ? 
c
 : c | 
SPECIAL
;

314 *
de°
++ = 
c
 | 
SPECIAL
;

317 
c
 = *
sˇn
++) {

319 
	`FREE
(
exp2
);

320 
	`FAIL
("RegularÉxpression cannotÉnd with '\\'. Use \"\\\\\".\n");

324 *
de°
++ = 
excom∑t
 ? 
c
 | 
SPECIAL
 : c;

328 *
de°
++ = 
c
 | 
SPECIAL
;

332 
	`FREE
(
exp2
);

333 
	`FAIL
("sorry, unimplemented operator\n");

335 *
de°
++ = '\b';

338 *
de°
++ = '\t';

341 *
de°
++ = '\r';

344 *
de°
++ = 
c
;

348 *
de°
++ = 
c
;

351 *
de°
 = 0;

353 
ªg∑r£
 = 
exp2
;

354 
ªg≈¨
 = 1;

355 
ªgsize
 = 0L;

356 
ªgcode
 = &
ªgdummy
;

357 
	`ªgc
((Ë
MAGIC
);

358 i‡(
	`ªg
(0, &
Êags
Ë=(*Ë
NULL
) {

359 
	`FREE
(
exp2
);

360  ((
ªgexp
 *Ë
NULL
);

364 i‡(
ªgsize
 >= 32767L)

366 
	`FREE
(
exp2
);

367 
	`FAIL
("regexpÅoo big\n");

371 
r
 = (
ªgexp
 *Ë
	`DXALLOC
(‘egexpË+ (Ë
ªgsize
,

372 
TAG_TEMPORARY
, "regcomp: 2");

373 i‡(
r
 =(
ªgexp
 *Ë
NULL
) {

374 
	`FREE
(
exp2
);

375 
	`FAIL
("out of space\n");

379 
ªg∑r£
 = 
exp2
;

380 
ªg≈¨
 = 1;

381 
ªgcode
 = (*)(
r
->
¥ogøm
);

382 
	`ªgc
((Ë
MAGIC
);

383 i‡(
	`ªg
(0, &
Êags
Ë=
NULL
) {

384 
	`FREE
(
exp2
);

385 
	`FREE
(
r
);

386  ((
ªgexp
 *Ë
NULL
);

390 
r
->
ªg°¨t
 = '\0';

391 
r
->
ªg™ch
 = 0;

392 
r
->
ªgmu°
 = 
NULL
;

393 
r
->
ªgmÀn
 = 0;

394 
sˇn
 = (*)(
r
->
¥ogøm
 + 1);

395 i‡(
	`OP
(
	`ªg√xt
((*)
sˇn
)Ë=
END
) {

396 
sˇn
 = 
	`OPERAND
(scan);

399 i‡(
	`OP
(
sˇn
Ë=
EXACTLY
)

400 
r
->
ªg°¨t
 = *
	`OPERAND
(
sˇn
);

401 i‡(
	`OP
(
sˇn
Ë=
BOL
)

402 
r
->
ªg™ch
++;

412 i‡(
Êags
 & 
SPSTART
) {

413 
l⁄ge°
 = 
NULL
;

414 
Àn
 = 0;

415 ; 
sˇn
 !
NULL
; sˇ¿(*)
	`ªg√xt
((*)scan)) {

416 *
tmp
 = (*)
	`OPERAND
(
sˇn
);

417 
éí
;

418 i‡(
	`OP
(
sˇn
Ë=
EXACTLY
 && (
éí
 = 
	`°æí
(
tmp
)Ë>
Àn
) {

419 
l⁄ge°
 = 
tmp
;

420 
Àn
 = 
éí
;

423 
r
->
ªgmu°
 = 
l⁄ge°
;

424 
r
->
ªgmÀn
 = 
Àn
;

427 
	`FREE
((*Ë
exp2
);

428  (
r
);

429 
	}
}

440 *
ªg
 
	$P2
(, 
∑ªn
,

441 *, 
Êagp
)

443 *
ªt
;

444 *
br
;

445 *
ídî
;

446 
∑∫o
 = 0;

447 
Êags
;

449 *
Êagp
 = 
HASWIDTH
;

452 i‡(
∑ªn
) {

453 i‡(
ªg≈¨
 >
NSUBEXP
)

454 
	`FAIL
("too many ()\n");

455 
∑∫o
 = 
ªg≈¨
;

456 
ªg≈¨
++;

457 
ªt
 = 
	`ªgnode
(
OPEN
 + 
∑∫o
);

459 
ªt
 = (*Ë
NULL
;

462 
br
 = 
	`ªgbønch
(&
Êags
);

463 i‡(
br
 =(*Ë
NULL
)

464  ((*Ë
NULL
);

465 i‡(
ªt
 !(*Ë
NULL
)

466 
	`ªgèû
(
ªt
, 
br
);

468 
ªt
 = 
br
;

469 i‡(!(
Êags
 & 
HASWIDTH
))

470 *
Êagp
 &~
HASWIDTH
;

471 *
Êagp
 |
Êags
 & 
SPSTART
;

472 *
ªg∑r£
 =
OR_OP
) {

473 
ªg∑r£
++;

474 
br
 = 
	`ªgbønch
(&
Êags
);

475 i‡(
br
 =(*Ë
NULL
)

476  ((*Ë
NULL
);

477 
	`ªgèû
(
ªt
, 
br
);

478 i‡(!(
Êags
 & 
HASWIDTH
))

479 *
Êagp
 &~
HASWIDTH
;

480 *
Êagp
 |
Êags
 & 
SPSTART
;

484 
ídî
 = 
	`ªgnode
((
∑ªn
Ë? 
CLOSE
 + 
∑∫o
 : 
END
);

485 
	`ªgèû
(
ªt
, 
ídî
);

488 
br
 = 
ªt
; b∏!(*Ë
NULL
; b∏
	`ªg√xt
(br))

489 
	`ªg›èû
(
br
, 
ídî
);

492 i‡(
∑ªn
 && *
ªg∑r£
++ !
RBRAC
) {

493 
	`FAIL
("unmatched ()\n");

494 } i‡(!
∑ªn
 && *
ªg∑r£
 != '\0') {

495 i‡(*
ªg∑r£
 =
RBRAC
) {

496 
	`FAIL
("unmatched ()\n");

498 
	`FAIL
("junk onÉnd\n");

501  (
ªt
);

502 
	}
}

509 *
ªgbønch
 
	$P1
(*, 
Êagp
)

511 *
ªt
;

512 *
chaö
;

513 *
œã°
;

514 
Êags
;

516 *
Êagp
 = 
WORST
;

518 
ªt
 = 
	`ªgnode
(
BRANCH
);

519 
chaö
 = (*Ë
NULL
;

520 *
ªg∑r£
 !'\0' && *ªg∑r£ !
OR_OP
 && *ªg∑r£ !
RBRAC
) {

521 
œã°
 = 
	`ªgpõ˚
(&
Êags
);

522 i‡(
œã°
 =(*Ë
NULL
)

523  ((*Ë
NULL
);

524 *
Êagp
 |
Êags
 & 
HASWIDTH
;

525 i‡(
chaö
 =(*Ë
NULL
)

526 *
Êagp
 |
Êags
 & 
SPSTART
;

528 
	`ªgèû
(
chaö
, 
œã°
);

529 
chaö
 = 
œã°
;

531 i‡(
chaö
 =(*Ë
NULL
)

532 
	`ªgnode
(
NOTHING
);

534  (
ªt
);

535 
	}
}

546 *
ªgpõ˚
 
	$P1
(*, 
Êagp
)

548 *
ªt
;

549 
›
;

550 *
nxt
;

551 
Êags
;

553 
ªt
 = 
	`ªg©om
(&
Êags
);

554 i‡(
ªt
 =(*Ë
NULL
)

555  ((*Ë
NULL
);

557 
›
 = *
ªg∑r£
;

558 i‡(!
	`ISMULT
(
›
)) {

559 *
Êagp
 = 
Êags
;

560  (
ªt
);

562 i‡(!(
Êags
 & 
HASWIDTH
Ë&& 
›
 !
QMARK
)

563 
	`FAIL
("*+ operand could beÉmpty\n");

564 *
Êagp
 = (
›
 !
PLUSS
Ë? (
WORST
 | 
SPSTART
Ë: (WORST | 
HASWIDTH
);

566 i‡(
›
 =
ASTERIX
 && (
Êags
 & 
SIMPLE
))

567 
	`ªgö£π
(
STAR
, 
ªt
);

568 i‡(
›
 =
ASTERIX
) {

570 
	`ªgö£π
(
BRANCH
, 
ªt
);

571 
	`ªg›èû
(
ªt
, 
	`ªgnode
(
BACK
));

572 
	`ªg›èû
(
ªt
,Ñet);

573 
	`ªgèû
(
ªt
, 
	`ªgnode
(
BRANCH
));

574 
	`ªgèû
(
ªt
, 
	`ªgnode
(
NOTHING
));

575 } i‡(
›
 =
PLUSS
 && (
Êags
 & 
SIMPLE
))

576 
	`ªgö£π
(
PLUS
, 
ªt
);

577 i‡(
›
 =
PLUSS
) {

579 
nxt
 = 
	`ªgnode
(
BRANCH
);

580 
	`ªgèû
(
ªt
, 
nxt
);

581 
	`ªgèû
(
	`ªgnode
(
BACK
), 
ªt
);

582 
	`ªgèû
(
nxt
, 
	`ªgnode
(
BRANCH
));

583 
	`ªgèû
(
ªt
, 
	`ªgnode
(
NOTHING
));

584 } i‡(
›
 =
QMARK
) {

586 
	`ªgö£π
(
BRANCH
, 
ªt
);

587 
	`ªgèû
(
ªt
, 
	`ªgnode
(
BRANCH
));

588 
nxt
 = 
	`ªgnode
(
NOTHING
);

589 
	`ªgèû
(
ªt
, 
nxt
);

590 
	`ªg›èû
(
ªt
, 
nxt
);

592 
ªg∑r£
++;

593 i‡(
	`ISMULT
(*
ªg∑r£
))

594 
	`FAIL
("nested *?+\n");

596  (
ªt
);

597 
	}
}

606 *
ªg©om
 
	$P1
(*, 
Êagp
)

608 *
ªt
;

609 
Êags
;

611 *
Êagp
 = 
WORST
;

613 *
ªg∑r£
++) {

614 
CARET
:

615 
ªt
 = 
	`ªgnode
(
BOL
);

617 
DOLLAR
:

618 
ªt
 = 
	`ªgnode
(
EOL
);

620 
DOT
:

621 
ªt
 = 
	`ªgnode
(
ANY
);

622 *
Êagp
 |
HASWIDTH
 | 
SIMPLE
;

624 
LSHBRAC
:

625 
ªt
 = 
	`ªgnode
(
WORDSTART
);

627 
RSHBRAC
:

628 
ªt
 = 
	`ªgnode
(
WORDEND
);

630 
LSQBRAC
:{

631 
˛ass
;

632 
˛as£nd
;

634 i‡(*
ªg∑r£
 =
CARET
) {

635 
ªt
 = 
	`ªgnode
(
ANYBUT
);

636 
ªg∑r£
++;

638 
ªt
 = 
	`ªgnode
(
ANYOF
);

639 i‡(*
ªg∑r£
 =
RSQBRAC
 || *regparse == '-')

640 
	`ªgc
(*
ªg∑r£
++);

641 *
ªg∑r£
 !'\0' && *ªg∑r£ !
RSQBRAC
) {

642 i‡(*
ªg∑r£
 == '-') {

643 
ªg∑r£
++;

644 i‡(*
ªg∑r£
 =
RSQBRAC
 || *regparse == '\0')

645 
	`ªgc
('-');

647 
˛ass
 = (
CHARBITS
 & *(
ªg∑r£
 - 2)) + 1;

648 
˛as£nd
 = (
CHARBITS
 & *(
ªg∑r£
));

649 i‡(
˛ass
 > 
˛as£nd
 + 1)

650 
	`FAIL
("invalid []Ñange\n");

651 ; 
˛ass
 <
˛as£nd
; class++)

652 
	`ªgc
(
˛ass
);

653 
ªg∑r£
++;

656 
	`ªgc
(*
ªg∑r£
++);

658 
	`ªgc
('\0');

659 i‡(*
ªg∑r£
 !
RSQBRAC
)

660 
	`FAIL
("unmatched []\n");

661 
ªg∑r£
++;

662 *
Êagp
 |
HASWIDTH
 | 
SIMPLE
;

665 
LBRAC
:

666 
ªt
 = 
	`ªg
(1, &
Êags
);

667 i‡(
ªt
 =(*Ë
NULL
)

668  ((*Ë
NULL
);

669 *
Êagp
 |
Êags
 & (
HASWIDTH
 | 
SPSTART
);

672 
OR_OP
:

673 
RBRAC
:

674 
	`FAIL
("internal urp\n");

676 
ASTERIX
:

677 
	`FAIL
("* followsÇothing\n");

679 
PLUSS
:

680 
	`FAIL
("+ followsÇothing\n");

682 
QMARK
:

683 
	`FAIL
("? followsÇothing\n");

686 
Àn
;

687 
ídî
;

689 
ªg∑r£
--;

690 
Àn
 = 0; 
ªg∑r£
[len] &&

691 !(
ªg∑r£
[
Àn
] & 
SPECIAL
Ë&&Ñeg∑r£[Àn] !
RSQBRAC
;Üen++);

692 i‡(
Àn
 <= 0) {

693 
	`FAIL
("unexpected ]\n");

695 
ídî
 = *(
ªg∑r£
 + 
Àn
);

696 i‡(
Àn
 > 1 && 
	`ISMULT
(
ídî
))

697 
Àn
--;

698 *
Êagp
 |
HASWIDTH
;

699 i‡(
Àn
 == 1)

700 *
Êagp
 |
SIMPLE
;

701 
ªt
 = 
	`ªgnode
(
EXACTLY
);

702 
Àn
 > 0) {

703 
	`ªgc
(*
ªg∑r£
++);

704 
Àn
--;

706 
	`ªgc
('\0');

711  (
ªt
);

712 
	}
}

717 *
ªgnode
 
	$P1
(, 
›
)

719 *
ªt
;

720 *
±r
;

722 
ªt
 = 
ªgcode
;

723 i‡(
ªt
 =&
ªgdummy
) {

724 
ªgsize
 += 3;

725  (
ªt
);

727 
±r
 = 
ªt
;

728 *
±r
++ = 
›
;

729 *
±r
++ = '\0';

730 *
±r
++ = '\0';

731 
ªgcode
 = 
±r
;

733  (
ªt
);

734 
	}
}

739 
ªgc
 
	$P1
(, 
b
)

741 i‡(
ªgcode
 !&
ªgdummy
)

742 *
ªgcode
++ = 
b
;

744 
ªgsize
++;

745 
	}
}

752 
ªgö£π
 
	$P2
(, 
›
, *, 
›nd
)

754 *
§c
;

755 *
d°
;

756 *
∂a˚
;

758 i‡(
ªgcode
 =&
ªgdummy
) {

759 
ªgsize
 += 3;

762 
§c
 = 
ªgcode
;

763 
ªgcode
 += 3;

764 
d°
 = 
ªgcode
;

765 
§c
 > 
›nd
)

766 *--
d°
 = *--
§c
;

768 
∂a˚
 = 
›nd
;

769 *
∂a˚
++ = 
›
;

770 *
∂a˚
++ = '\0';

771 *
∂a˚
++ = '\0';

772 
	}
}

777 
ªgèû
 
	$P2
(*, 
p
, *, 
vÆ
)

779 *
sˇn
;

780 *
ãmp
;

781 
off£t
;

783 i‡(
p
 =&
ªgdummy
)

787 
sˇn
 = 
p
;

789 
ãmp
 = 
	`ªg√xt
(
sˇn
);

790 i‡(
ãmp
 =(*Ë
NULL
)

792 
sˇn
 = 
ãmp
;

795 i‡(
	`OP
(
sˇn
Ë=
BACK
)

796 
off£t
 = 
sˇn
 - 
vÆ
;

798 
off£t
 = 
vÆ
 - 
sˇn
;

799 *(
sˇn
 + 1Ë(
off£t
 >> 8) & 0377;

800 *(
sˇn
 + 2Ë
off£t
 & 0377;

801 
	}
}

806 
ªg›èû
 
	$P2
(*, 
p
, *, 
vÆ
)

809 i‡(
p
 =(*Ë
NULL
 ||Ö =&
ªgdummy
 || 
	`OP
’Ë!
BRANCH
)

811 
	`ªgèû
(
	`OPERAND
(
p
), 
vÆ
);

812 
	}
}

821 *
	gªgöput
;

822 *
	gªgbﬁ
;

823 **
	gªg°¨ç
;

824 **
	gªgídp
;

829 
STATIC
 
ªgåy
 
PROT
((
ªgexp
 *, *));

830 
STATIC
 
ªgm©ch
 
PROT
((*));

831 
STATIC
 
ªgª≥©
 
PROT
((*));

833 #ifde‡
DEBUG


834 
	gªg«º©e
 = 0;

835 
ªgdump
 
PROT
((
ªgexp
 *));

836 
STATIC
 *
ªg¥›
 
PROT
((*));

843 
ªgexec
 
	$P2
(
ªgexp
 *, 
¥og
, *, 
°rög
)

845 *
s
;

848 i‡(
¥og
 =(
ªgexp
 *Ë
NULL
 || 
°rög
 == (*) NULL) {

849 
	`ªgîr‹
("NULLÖarameter\n");

853 i‡(
	`UCHARAT
(
¥og
->
¥ogøm
Ë!
MAGIC
) {

854 
	`ªgîr‹
("corruptedÖrogram\n");

858 i‡(
¥og
->
ªgmu°
 !(*Ë
NULL
) {

859 
s
 = 
°rög
;

860 (
s
 = 
	`°rchr
(s, 
¥og
->
ªgmu°
[0])Ë!(*Ë
NULL
) {

861 i‡(
	`°∫cmp
(
s
, 
¥og
->
ªgmu°
,Örog->
ªgmÀn
) == 0)

863 
s
++;

865 i‡(
s
 =(*Ë
NULL
)

869 
ªgbﬁ
 = 
°rög
;

872 i‡(
¥og
->
ªg™ch
)

873  (
	`ªgåy
(
¥og
, 
°rög
));

876 
s
 = 
°rög
;

877 i‡(
¥og
->
ªg°¨t
 != '\0')

879 (
s
 = 
	`°rchr
(s, 
¥og
->
ªg°¨t
)Ë!(*Ë
NULL
) {

880 i‡(
	`ªgåy
(
¥og
, 
s
))

882 
s
++;

887 i‡(
	`ªgåy
(
¥og
, 
s
))

889 } *
s
++ != '\0');

893 
	}
}

898 
ªgåy
 
	$P2
(
ªgexp
 *, 
¥og
, *, 
°rög
)

900 
i
;

901 **
•
;

902 **
ï
;

904 
ªgöput
 = 
°rög
;

905 
ªg°¨ç
 = 
¥og
->
°¨ç
;

906 
ªgídp
 = 
¥og
->
ídp
;

908 
•
 = 
¥og
->
°¨ç
;

909 
ï
 = 
¥og
->
ídp
;

910 
i
 = 
NSUBEXP
; i > 0; i--) {

911 *
•
++ = (*Ë
NULL
;

912 *
ï
++ = (*Ë
NULL
;

914 i‡(
	`ªgm©ch
(
¥og
->
¥ogøm
 + 1)) {

915 
¥og
->
°¨ç
[0] = 
°rög
;

916 
¥og
->
ídp
[0] = 
ªgöput
;

920 
	}
}

932 
ªgm©ch
 
	$P1
(*, 
¥og
)

934 *
sˇn
;

935 *
nxt
;

937 
sˇn
 = 
¥og
;

938 #ifde‡
DEBUG


939 i‡(
sˇn
 !(*Ë
NULL
 && 
ªg«º©e
)

940 
	`debug_mesßge
("%s(\n", 
	`ªg¥›
(
sˇn
));

942 
sˇn
 !(*Ë
NULL
) {

943 #ifde‡
DEBUG


944 i‡(
ªg«º©e
)

945 
	`debug_mesßge
("%s...\n", 
	`ªg¥›
(
sˇn
));

947 
nxt
 = 
	`ªg√xt
(
sˇn
);

949 
	`OP
(
sˇn
)) {

950 
BOL
:

951 i‡(
ªgöput
 !
ªgbﬁ
)

954 
EOL
:

955 i‡(*
ªgöput
 != '\0')

958 
ANY
:

959 i‡(*
ªgöput
 == '\0')

961 
ªgöput
++;

963 
WORDSTART
:

964 i‡(
ªgöput
 =
ªgbﬁ
)

966 i‡(*
ªgöput
 == '\0' ||

967 
	`ISWORDPART
(*(
ªgöput
 - 1)) || !ISWORDPART(*reginput))

970 
WORDEND
:

971 i‡(*
ªgöput
 == '\0')

973 i‡(
ªgöput
 =
ªgbﬁ
 ||

974 !
	`ISWORDPART
(*(
ªgöput
 - 1)) || ISWORDPART(*reginput))

977 
EXACTLY
:{

978 
Àn
;

979 *
›nd
;

981 
›nd
 = 
	`OPERAND
(
sˇn
);

983 i‡(*
›nd
 !*
ªgöput
)

985 
Àn
 = 
	`°æí
(
›nd
);

986 i‡(
Àn
 > 1 && 
	`°∫cmp
(
›nd
, 
ªgöput
,Üen) != 0)

988 
ªgöput
 +
Àn
;

991 
ANYOF
:

992 i‡(*
ªgöput
 == '\0' ||

993 
	`°rchr
(
	`OPERAND
(
sˇn
), *
ªgöput
Ë=(*Ë
NULL
)

995 
ªgöput
++;

997 
ANYBUT
:

998 i‡(*
ªgöput
 == '\0' ||

999 
	`°rchr
(
	`OPERAND
(
sˇn
), *
ªgöput
Ë!(*Ë
NULL
)

1001 
ªgöput
++;

1003 
NOTHING
:

1005 
BACK
:

1007 
OPEN
 + 1:

1008 
OPEN
 + 2:

1009 
OPEN
 + 3:

1010 
OPEN
 + 4:

1011 
OPEN
 + 5:

1012 
OPEN
 + 6:

1013 
OPEN
 + 7:

1014 
OPEN
 + 8:

1015 
OPEN
 + 9:{

1016 
no
;

1017 *
ßve
;

1019 
no
 = 
	`OP
(
sˇn
Ë- 
OPEN
;

1020 
ßve
 = 
ªgöput
;

1022 i‡(
	`ªgm©ch
(
nxt
)) {

1027 i‡(
ªg°¨ç
[
no
] =(*Ë
NULL
)

1028 
ªg°¨ç
[
no
] = 
ßve
;

1034 
CLOSE
 + 1:

1035 
CLOSE
 + 2:

1036 
CLOSE
 + 3:

1037 
CLOSE
 + 4:

1038 
CLOSE
 + 5:

1039 
CLOSE
 + 6:

1040 
CLOSE
 + 7:

1041 
CLOSE
 + 8:

1042 
CLOSE
 + 9:{

1043 
no
;

1044 *
ßve
;

1046 
no
 = 
	`OP
(
sˇn
Ë- 
CLOSE
;

1047 
ßve
 = 
ªgöput
;

1049 i‡(
	`ªgm©ch
(
nxt
)) {

1054 i‡(
ªgídp
[
no
] =(*Ë
NULL
)

1055 
ªgídp
[
no
] = 
ßve
;

1061 
BRANCH
:{

1062 *
ßve
;

1064 i‡(
	`OP
(
nxt
Ë!
BRANCH
)

1065 
nxt
 = 
	`OPERAND
(
sˇn
);

1068 
ßve
 = 
ªgöput
;

1069 i‡(
	`ªgm©ch
(
	`OPERAND
(
sˇn
)))

1071 
ªgöput
 = 
ßve
;

1072 
sˇn
 = 
	`ªg√xt
(scan);

1073 } 
sˇn
 !(*Ë
NULL
 && 
	`OP
(sˇnË=
BRANCH
);

1079 
STAR
:

1080 
PLUS
:{

1081 
√xtch
;

1082 
no
;

1083 *
ßve
;

1084 
möimum
;

1090 
√xtch
 = '\0';

1091 i‡(
	`OP
(
nxt
Ë=
EXACTLY
)

1092 
√xtch
 = *
	`OPERAND
(
nxt
);

1093 
möimum
 = (
	`OP
(
sˇn
Ë=
STAR
) ? 0 : 1;

1094 
ßve
 = 
ªgöput
;

1095 
no
 = 
	`ªgª≥©
(
	`OPERAND
(
sˇn
));

1096 
no
 >
möimum
) {

1098 i‡(
√xtch
 ='\0' || *
ªgöput
 ==Çextch)

1099 i‡(
	`ªgm©ch
(
nxt
))

1102 
no
--;

1103 
ªgöput
 = 
ßve
 + 
no
;

1108 
END
:

1112 
	`ªgîr‹
("memory corruption\n");

1117 
sˇn
 = 
nxt
;

1124 
	`ªgîr‹
("corruptedÖointers\n");

1126 
	}
}

1131 
ªgª≥©
 
	$P1
(*, 
p
)

1133 
cou¡
 = 0;

1134 *
sˇn
;

1135 *
›nd
;

1137 
sˇn
 = 
ªgöput
;

1138 
›nd
 = 
	`OPERAND
(
p
);

1139 
	`OP
(
p
)) {

1140 
ANY
:

1141 
cou¡
 = 
	`°æí
(
sˇn
);

1142 
sˇn
 +
cou¡
;

1144 
EXACTLY
:

1145 *
›nd
 =*
sˇn
) {

1146 
cou¡
++;

1147 
sˇn
++;

1150 
ANYOF
:

1151 *
sˇn
 !'\0' && 
	`°rchr
(
›nd
, *sˇnË!(*Ë
NULL
) {

1152 
cou¡
++;

1153 
sˇn
++;

1156 
ANYBUT
:

1157 *
sˇn
 !'\0' && 
	`°rchr
(
›nd
, *sˇnË=(*Ë
NULL
) {

1158 
cou¡
++;

1159 
sˇn
++;

1163 
	`ªgîr‹
("internal foulup\n");

1164 
cou¡
 = 0;

1167 
ªgöput
 = 
sˇn
;

1169  (
cou¡
);

1170 
	}
}

1176 *
ªg√xt
 
	$P1
(*, 
p
)

1178 
off£t
;

1180 i‡(
p
 =&
ªgdummy
)

1181  ((*Ë
NULL
);

1183 
off£t
 = 
	`NEXT
(
p
);

1184 i‡(
off£t
 == 0)

1185  ((*Ë
NULL
);

1187 i‡(
	`OP
(
p
Ë=
BACK
)

1188  (
p
 - 
off£t
);

1190  (
p
 + 
off£t
);

1191 
	}
}

1193 #ifde‡
DEBUG


1195 
STATIC
 *
ªg¥›
 
PROT
((*));

1200 
ªgdump
 
	$P1
(
ªgexp
 *, 
r
)

1202 *
s
;

1203 
›
 = 
EXACTLY
;

1204 *
nxt
;

1206 #i‚de‡
_AIX


1207 *
	`°rchr
();

1211 
s
 = 
r
->
¥ogøm
 + 1;

1212 
›
 !
END
) {

1213 
›
 = 
	`OP
(
s
);

1214 
	`¥ötf
("%2d%s", (Ë(
s
 - 
r
->
¥ogøm
), 
	`ªg¥›
(s));

1215 
nxt
 = 
	`ªg√xt
(
s
);

1216 i‡(
nxt
 =(*Ë
NULL
)

1217 
	`¥ötf
("(0)");

1219 
	`¥ötf
("(%d)", (Ë((
s
 - 
r
->
¥ogøm
Ë+ (
nxt
 - s)));

1220 
s
 += 3;

1221 i‡(
›
 =
ANYOF
 || o∞=
ANYBUT
 || o∞=
EXACTLY
) {

1223 *
s
 != '\0') {

1224 
	`putch¨
(*
s
);

1225 
s
++;

1227 
s
++;

1229 
	`putch¨
('\n');

1233 i‡(
r
->
ªg°¨t
 != '\0')

1234 
	`¥ötf
("°¨à`%c' ", 
r
->
ªg°¨t
);

1235 i‡(
r
->
ªg™ch
)

1236 
	`¥ötf
("anchored ");

1237 i‡(
r
->
ªgmu°
 !(*Ë
NULL
)

1238 
	`¥ötf
("mu° havê\"%s\"", 
r
->
ªgmu°
);

1239 
	`¥ötf
("\n");

1240 
	}
}

1245 *
ªg¥›
 
	$P1
(*, 
›
)

1247 *
p
;

1248 
buf
[50];

1250 
	`°r˝y
(
buf
, ":");

1252 
	`OP
(
›
)) {

1253 
BOL
:

1254 
p
 = "BOL";

1256 
EOL
:

1257 
p
 = "EOL";

1259 
ANY
:

1260 
p
 = "ANY";

1262 
ANYOF
:

1263 
p
 = "ANYOF";

1265 
ANYBUT
:

1266 
p
 = "ANYBUT";

1268 
BRANCH
:

1269 
p
 = "BRANCH";

1271 
EXACTLY
:

1272 
p
 = "EXACTLY";

1274 
NOTHING
:

1275 
p
 = "NOTHING";

1277 
BACK
:

1278 
p
 = "BACK";

1280 
END
:

1281 
p
 = "END";

1283 
WORDSTART
:

1284 
p
 = "WORDSTART";

1286 
WORDEND
:

1287 
p
 = "WORDEND";

1289 
OPEN
 + 1:

1290 
OPEN
 + 2:

1291 
OPEN
 + 3:

1292 
OPEN
 + 4:

1293 
OPEN
 + 5:

1294 
OPEN
 + 6:

1295 
OPEN
 + 7:

1296 
OPEN
 + 8:

1297 
OPEN
 + 9:

1298 
	`•rötf
(
buf
 + 
	`°æí
(buf), "OPEN%d", 
	`OP
(
›
Ë- 
OPEN
);

1299 
p
 = (*Ë
NULL
;

1301 
CLOSE
 + 1:

1302 
CLOSE
 + 2:

1303 
CLOSE
 + 3:

1304 
CLOSE
 + 4:

1305 
CLOSE
 + 5:

1306 
CLOSE
 + 6:

1307 
CLOSE
 + 7:

1308 
CLOSE
 + 8:

1309 
CLOSE
 + 9:

1310 
	`•rötf
(
buf
 + 
	`°æí
(buf), "CLOSE%d", 
	`OP
(
›
Ë- 
CLOSE
);

1311 
p
 = (*Ë
NULL
;

1313 
STAR
:

1314 
p
 = "STAR";

1316 
PLUS
:

1317 
p
 = "PLUS";

1320 
	`ªgîr‹
("corrupted opcode\n");

1323 i‡(
p
 !(*Ë
NULL
)

1324 
	`°rˇt
(
buf
, 
p
);

1325  (
buf
);

1326 
	}
}

1335 #ifde‡
STRCSPN


1340 
°rc•n
 
	$P2
(*, 
s1
, *, 
s2
)

1342 *
sˇn1
;

1343 *
sˇn2
;

1344 
cou¡
;

1346 
cou¡
 = 0;

1347 
sˇn1
 = 
s1
; *scan1 != '\0'; scan1++) {

1348 
sˇn2
 = 
s2
; *scan2 != '\0';)

1349 i‡(*
sˇn1
 =*
sˇn2
++)

1350  (
cou¡
);

1351 
cou¡
++;

1353  (
cou¡
);

1354 
	}
}

1361 *
ªgsub
 
	$P4
(
ªgexp
 *, 
¥og
, *, 
sour˚
, *, 
de°
, , 
n
)

1363 *
§c
;

1364 *
d°
;

1365 
c
;

1366 
no
;

1367 
Àn
;

1369 i‡(
¥og
 =(
ªgexp
 *Ë
NULL
 ||

1370 
sour˚
 =(*Ë
NULL
 || 
de°
 == (*) NULL) {

1371 
	`ªgîr‹
("NULLÖarmÅoÑegsub\n");

1372  
NULL
;

1374 i‡(
	`UCHARAT
(
¥og
->
¥ogøm
Ë!
MAGIC
) {

1375 
	`ªgîr‹
("damagedÑegexp fedÅoÑegsub\n");

1376  
NULL
;

1378 
§c
 = 
sour˚
;

1379 
d°
 = 
de°
;

1380 (
c
 = *
§c
++) != '\0') {

1381 i‡(
c
 == '&')

1382 
no
 = 0;

1383 i‡(
c
 ='\\' && '0' <*
§c
 && *src <= '9')

1384 
no
 = *
§c
++ - '0';

1386 
no
 = -1;

1388 i‡(
no
 < 0) {

1389 i‡(
c
 ='\\' && (*
§c
 == '\\' || *src == '&'))

1390 
c
 = *
§c
++;

1391 i‡(--
n
 < 0) {

1392 
	`ªgîr‹
("lineÅooÜong\n");

1393  
NULL
;

1395 *
d°
++ = 
c
;

1396 } i‡(
¥og
->
°¨ç
[
no
] !(*Ë
NULL
 &&

1397 
¥og
->
ídp
[
no
] !(*Ë
NULL
) {

1398 
Àn
 = 
¥og
->
ídp
[
no
] -Örog->
°¨ç
[no];

1399 i‡((
n
 -
Àn
) < 0) {

1400 
	`ªgîr‹
("lineÅooÜong\n");

1401  
NULL
;

1403 
	`°∫˝y
(
d°
, 
¥og
->
°¨ç
[
no
], 
Àn
);

1404 
d°
 +
Àn
;

1405 i‡(
Àn
 !0 && *(
d°
 - 1) == '\0') {

1406 
	`ªgîr‹
("damaged match string\n");

1407  
NULL
;

1411 i‡(--
n
 < 0) {

1412 
	`ªgîr‹
("lineÅooÜong\n");

1413  
NULL
;

1415 *
d°
 = '\0';

1416  
d°
;

1417 
	}
}

	@regexp.h

1 #i‚de‡
_REGEXP_H_


2 
	#_REGEXP_H_


	)

11 
	#EFUN_REGEXP
 1

	)

12 
	#ED_REGEXP
 2

	)

14 
	#NSUBEXP
 10

	)

15 
	sªgexp
 {

16 *
	m°¨ç
[
NSUBEXP
];

17 *
	mídp
[
NSUBEXP
];

18 
	mªg°¨t
;

19 
	mªg™ch
;

20 *
	mªgmu°
;

21 
	mªgmÀn
;

22 
	m¥ogøm
[1];

23 } 
	tªgexp
;

25 
ªg«º©e
;

26 
ªgexp_u£r
;

27 *
ªgexp_îr‹
;

29 
ªgdump
 
PROT
((
ªgexp
 *));

30 
ªgexp
 *
ªgcomp
 
PROT
((*, ));

31 
ªgexec
 
PROT
((
ªgexp
 *, *));

32 *
ªgsub
 
PROT
((
ªgexp
 *, *, *, ));

	@replace_program.c

1 
	~"°d.h
"

2 
	~"ª∂a˚_¥ogøm.h
"

3 
	~"simul_efun.h
"

4 
	~"sw≠.h
"

5 
	~"efun_¥Ÿos.h
"

14 
ª∂a˚_ob_t
 *
	gobj_li°_ª∂a˚
 = 0;

16 
¥ogøm_t
 *
£¨ch_öhîôed
 
PROT
((*,Örogram_t *, *));

17 
ª∂a˚_ob_t
 *
ªåõve_ª∂a˚_¥ogøm_íåy
 
PROT
(());

19 
ª∂a˚_¥ogøm_≥ndög
 
	$P1
(
obje˘_t
 *, 
ob
)

21 
ª∂a˚_ob_t
 *
r_ob
;

23 
r_ob
 = 
obj_li°_ª∂a˚
;Ñ_ob;Ñ_ob =Ñ_ob->
√xt
) {

24 i‡(
r_ob
->
ob
 == ob)

29 
	}
}

31 
ª∂a˚_¥ogøms
 
PROT
(())

33 
ª∂a˚_ob_t
 *
	gr_ob
, *
	gr_√xt
;

34 
	gi
, 
	gnum_„wî
, 
	goff£t
;

35 
svÆue_t
 *
	gsvp
;

37 
debug
(
d_Êag
, ("start ofÑeplace_programs"));

39 
	gr_ob
 = 
obj_li°_ª∂a˚
;Ñ_ob;Ñ_ob = 
r_√xt
) {

40 
¥ogøm_t
 *
ﬁd_¥og
;

42 i‡(
	gr_ob
->
	gob
->
	gÊags
 & 
	gO_SWAPPED
)

43 
lﬂd_ob_‰om_sw≠
(
r_ob
->
ob
);

44 
	gnum_„wî
 = 
r_ob
->
ob
->
¥og
->
num_v¨übÀs_tŸÆ
 -Ñ_ob->
√w_¥og
->num_variables_total;

46 
debug
(
d_Êag
, ("%dÜes†v¨übÀs\n", 
num_„wî
));

48 
	gtŸ_Æloc_obje˘_size
 -
num_„wî
 * (
svÆue_t
[1]);

49 i‡((
	goff£t
 = 
r_ob
->
v¨_off£t
)) {

50 
svp
 = 
r_ob
->
ob
->
v¨übÀs
;

52 
	gi
 = 0; i < 
	gr_ob
->
	g√w_¥og
->
	gnum_v¨übÀs_tŸÆ
; i++) {

53 
‰ì_svÆue
(
svp
, "replace_programs");

54 *
	gsvp
 = *(
svp
 + 
off£t
);

55 *(
	gsvp
 + 
	goff£t
Ë
c⁄°0u
;

56 
	gsvp
++;

59 
	gi
 = 0; i < 
	gnum_„wî
; i++) {

60 
‰ì_svÆue
(
svp
, "replace_programs");

61 *
	gsvp
++ = 
c⁄°0u
;

65 
	gsvp
 = &
r_ob
->
ob
->
v¨übÀs
[r_ob->
√w_¥og
->
num_v¨übÀs_tŸÆ
];

66 
	gi
 = 0; i < 
	gnum_„wî
; i++) {

67 
‰ì_svÆue
(
svp
, "replace_programs");

68 *
	gsvp
++ = 
c⁄°0u
;

72 i‡(
	gr_ob
->
	gob
->
	gª∂a˚d_¥ogøm
) {

73 
FREE_MSTR
(
r_ob
->
ob
->
ª∂a˚d_¥ogøm
);

74 
	gr_ob
->
	gob
->
	gª∂a˚d_¥ogøm
 = 0;

76 
	gr_ob
->
	gob
->
	gª∂a˚d_¥ogøm
 = 
°rög_c›y
(
r_ob
->
√w_¥og
->
«me
, "replace_programs");

78 
ª„ªn˚_¥og
(
r_ob
->
√w_¥og
, "replace_programs");

79 
	gﬁd_¥og
 = 
r_ob
->
ob
->
¥og
;

80 
	gr_ob
->
	gob
->
	g¥og
 = 
r_ob
->
√w_¥og
;

81 
	gr_√xt
 = 
r_ob
->
√xt
;

82 
‰ì_¥og
(
ﬁd_¥og
, 1);

84 
debug
(
d_Êag
, ("program freed."));

85 #i‚de‡
NO_SHADOWS


86 i‡(
	gr_ob
->
	gob
->
	gshadowög
) {

99 
	gr_ob
->
	gob
->
	gshadowög
->
	gshadowed
 = 
r_ob
->
ob
->
shadowed
;

100 i‡(
	gr_ob
->
	gob
->
	gshadowed
) {

101 
	gr_ob
->
	gob
->
	gshadowed
->
	gshadowög
 = 
r_ob
->
ob
->
shadowög
;

102 
	gr_ob
->
	gob
->
	gshadowed
 = 0;

104 
	gr_ob
->
	gob
->
	gshadowög
 = 0;

107 
FREE
((*Ë
r_ob
);

109 
	gobj_li°_ª∂a˚
 = (
ª∂a˚_ob_t
 *) 0;

110 
debug
(
d_Êag
, ("end ofÑeplace_programs"));

113 #ifde‡
F_REPLACE_PROGRAM


114 
¥ogøm_t
 *
£¨ch_öhîôed
 
	$P3
(*, 
°r
, 
¥ogøm_t
 *, 
¥g
, *, 
ofÂ¡
)

116 
¥ogøm_t
 *
tmp
;

117 
i
;

119 
	`debug
(
d_Êag
, ("search_inherited started"));

120 
	`debug
(
d_Êag
, ("£¨chög f‹ PRG(/%sËö PRG(/%s)", 
°r
, 
¥g
->
«me
));

121 
	`debug
(
d_Êag
, ("num_öhîôed=%d\n", 
¥g
->
num_öhîôed
));

123 
i
 = 0; i < (Ë
¥g
->
num_öhîôed
; i++) {

124 
	`debug
(
d_Êag
, ("ödex %d:", 
i
));

125 
	`debug
(
d_Êag
, ("checkög PRG(/%s)", 
¥g
->
öhîô
[
i
].
¥og
->
«me
));

127 i‡(
	`°rcmp
(
°r
, 
¥g
->
öhîô
[
i
].
¥og
->
«me
) == 0) {

128 
	`debug
(
d_Êag
, ("match found"));

130 *
ofÂ¡
 = 
¥g
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
;

131  
¥g
->
öhîô
[
i
].
¥og
;

132 } i‡((
tmp
 = 
	`£¨ch_öhîôed
(
°r
, 
¥g
->
öhîô
[
i
].
¥og
,

133 
ofÂ¡
))) {

134 
	`debug
(
d_Êag
, ("deferred match found"));

136 *
ofÂ¡
 +
¥g
->
öhîô
[
i
].
v¨übÀ_ödex_off£t
;

137  
tmp
;

140 
	`debug
(
d_Êag
, ("search_inherited failed"));

142  (
¥ogøm_t
 *) 0;

143 
	}
}

145 
ª∂a˚_ob_t
 *
ªåõve_ª∂a˚_¥ogøm_íåy
 
PROT
(())

147 
ª∂a˚_ob_t
 *
	gr_ob
;

149 
	gr_ob
 = 
obj_li°_ª∂a˚
;Ñ_ob;Ñ_ob = 
r_ob
->
√xt
) {

150 i‡(
r_ob
->
ob
 =
cuºít_obje˘
) {

151  
r_ob
;

158 
f_ª∂a˚_¥ogøm
 
PROT
(())

160 
ª∂a˚_ob_t
 *
	gtmp
;

161 
	g«me_Àn
;

162 *
	g«me
, *
	gx«me
;

163 
¥ogøm_t
 *
	g√w_¥og
;

164 
	gv¨_off£t
;

166 i‡(
	g•
->
	gty≥
 !
T_STRING
)

167 
bad_¨g
(1, 
F_REPLACE_PROGRAM
);

168 
debug
(
d_Êag
, ("replace_program called"));

170 i‡(!
	gcuºít_obje˘
)

171 
îr‹
("replace_program called withÇo current object\n");

172 i‡(
	gcuºít_obje˘
 =
simul_efun_ob
)

173 
îr‹
("replace_program on simul_efun object\n");

175 i‡(
	gcuºít_obje˘
->
	g¥og
->
	gfunc_ªf
)

176 
îr‹
("cannotÑeplaceáÖrogram with functionÑeferences.\n");

178 
	g«me_Àn
 = 
SVALUE_STRLEN
(
•
);

179 
	g«me
 = (*Ë
DMALLOC
(
«me_Àn
 + 3, 
TAG_TEMPORARY
, "replace_program");

180 
	gx«me
 = 
«me
;

181 
°r˝y
(
«me
, 
•
->
u
.
°rög
);

182 i‡(
	g«me
[
«me_Àn
 - 2] !'.' || 
«me
[name_len - 1] != 'c')

183 
°rˇt
(
«me
, ".c");

184 i‡(*
	g«me
 == '/')

185 
«me
++;

186 
	g√w_¥og
 = 
£¨ch_öhîôed
(
«me
, 
cuºít_obje˘
->
¥og
, &
v¨_off£t
);

187 
FREE
(
x«me
);

188 i‡(!
	g√w_¥og
) {

189 
îr‹
("programÅoÑeplaceÅhe current with hasÅo be inherited\n");

191 i‡(!(
	gtmp
 = 
ªåõve_ª∂a˚_¥ogøm_íåy
())) {

192 
tmp
 = 
ALLOCATE
(
ª∂a˚_ob_t
, 
TAG_TEMPORARY
, "replace_program");

193 
	gtmp
->
	gob
 = 
cuºít_obje˘
;

194 
	gtmp
->
	g√xt
 = 
obj_li°_ª∂a˚
;

195 
	gobj_li°_ª∂a˚
 = 
tmp
;

197 
	gtmp
->
	g√w_¥og
 = 
√w_¥og
;

198 
	gtmp
->
	gv¨_off£t
 = 
v¨_off£t
;

200 
debug
(
d_Êag
, ("replace_program finished"));

202 
‰ì_°rög_svÆue
(
•
--);

	@replace_program.h

1 #i‚de‡
_REPLACE_PROGRAM_H_


2 
	#_REPLACE_PROGRAM_H_


	)

4 
	~"Õc_ö˛.h
"

6 
ª∂a˚_¥ogøm_≥ndög
 
PROT
((
obje˘_t
 *));

7 
ª∂a˚_¥ogøms
 
PROT
(());

9 
	sª∂a˚_ob_s
 {

10 
obje˘_t
 *
	mob
;

11 
¥ogøm_t
 *
	m√w_¥og
;

12 
	mv¨_off£t
;

13 
ª∂a˚_ob_s
 *
	m√xt
;

14 } 
	tª∂a˚_ob_t
;

16 
ª∂a˚_ob_t
 *
obj_li°_ª∂a˚
;

	@scratchpad.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"s¸©ch∑d.h
"

5 
	~"compûî.h
"

46 
	#Så
 ((*)
°r
)

	)

47 
	#På
 ((*)
±r
)

	)

48 
	#Res
 ((*)
ªs
)

	)

49 
	#S1
 ((*)
s1
)

	)

50 
	#S2
 ((*)
s2
)

	)

51 
	#S¸©ch_œrge_Æloc
(
x
Ë((*)
	`s¸©ch_œrge_Æloc
(x))

	)

52 
	#SåÀn
(
x
Ë(
	`°æí
((*)x))

	)

53 
	#Så˝y
(
x
, 
y
Ë(
	`°r˝y
((*)x, (*)y))

	)

54 
	#Sån˝y
(
x
, 
y
, 
z
Ë(
	`°∫˝y
((*)x, (*)y, z))

	)

57 
	#HDR_SIZE
 ((*)&
s¸©ch_hód
.
block
[2] - (*)&s¸©ch_hód)

	)

58 
	#FIND_HDR
(
x
Ë((
•_block_t
 *)(x - 
HDR_SIZE
))

	)

59 
	#SIZE_WITH_HDR
(
x
Ë(x + 
HDR_SIZE
)

	)

61 
	gs¸©chblock
[
SCRATCHPAD_SIZE
];

62 
•_block_t
 
	gs¸©ch_hód
 = { 0, 0 };

63 *
	gs¸_œ°
 = &
s¸©chblock
[2], *
	gs¸_èû
 = &scratchblock[2];

64 *
	gs¸©ch_íd
 = 
s¸©chblock
 + 
SCRATCHPAD_SIZE
;

67 
s¸©ch_summ¨y
 
PROT
(());

69 
	$s¸©ch_summ¨y
() {

70 *
p
 = 
s¸©chblock
;

71 
i
;

73 
p
<=
s¸_èû
) {

74 i‡(*
p
 =0Ë
	`¥ötf
("0");

75 i‡(*
p
 < 32 || *∞> 127Ë
	`¥ötf
("*");

76 
	`¥ötf
("%c", *
p
);

77 
p
++;

79 
	`¥ötf
("\n");

80 
i
 = 
s¸_œ°
 - 
s¸©chblock
;

81 
i
--Ë
	`¥ötf
(" ");

82 
	`¥ötf
("l\n");

83 
i
 = 
s¸_èû
 - 
s¸©chblock
;

84 
i
--Ë
	`¥ötf
(" ");

85 
	`¥ötf
("t\n");

86 
	}
}

89 
	$s¸©ch_de°roy
() {

90 
•_block_t
 *
√xt
, *
this
 = 
s¸©ch_hód
.next;

92 
	`SDEBUG
(
	`¥ötf
("scratch_destroy\n"));

94 
this
) {

95 
√xt
 = 
this
->next;

96 
	`FREE
(
this
);

97 
this
 = 
√xt
;

99 
s¸©ch_hód
.
√xt
 = 0;

100 
s¸_œ°
 = &
s¸©chblock
[2];

101 
s¸_èû
 = &
s¸©chblock
[2];

102 
	}
}

105 *
s¸©ch_c›y
 
	$P1
(*, 
°r
) {

106 *
‰om
, *
to
, *
íd
;

108 
	`SDEBUG2
(
	`¥ötf
("s¸©ch_c›y(%s):", 
°r
));

111 
‰om
 = 
Så
;

112 
to
 = 
s¸_èû
+1;

113 
íd
 = 
s¸©ch_íd
 - 2;

114 i‡(
íd
 > 
to
 + 255)Énd =Åo + 255;

115 *
‰om
 && 
to
 < 
íd
)

116 *
to
++ = *
‰om
++;

117 i‡(!(*
‰om
)) {

118 
	`SDEBUG2
(
	`¥ötf
(" on scratchpad\n"));

120 
s¸_œ°
 = 
s¸_èû
 + 1;

121 *
to
++ = 0;

122 
s¸_èû
 = 
to
;

123 *
to
 =Åÿ- 
s¸_œ°
;

124  (*)
s¸_œ°
;

126 
	`SDEBUG
(
	`¥ötf
(" mallocing ... "));

129 
to
 = 
	`S¸©ch_œrge_Æloc
((
‰om
 - 
Så
Ë+ 
	`SåÀn
(from) + 1);

130 
	`Så˝y
(
to
, 
°r
);

131  (*)
to
;

132 
	}
}

134 
s¸©ch_‰ì
 
	$P1
(*, 
±r
) {

140 
	`SDEBUG2
(
	`¥ötf
("s¸©ch_‰ì(%s): ", 
±r
));

142 i‡(
På
 =
s¸_œ°
) {

143 
	`SDEBUG2
(
	`¥ötf
("last freed\n"));

144 
	`s¸©ch_‰ì_œ°
();

145 } i‡(*(
På
 - 2)) {

146 
•_block_t
 *
sbt
;

148 
	`DEBUG_CHECK
(*(
På
 - 2Ë!
SCRATCH_MAGIC
, "scratch_free called onÇon-scratchpad string.\n");

149 
	`SDEBUG
(
	`¥ötf
("block freed\n"));

150 
sbt
 = 
	`FIND_HDR
(
±r
);

151 i‡(
sbt
->
¥ev
)

152 
sbt
->
¥ev
->
√xt
 = sbt->next;

153 i‡(
sbt
->
√xt
)

154 
sbt
->
√xt
->
¥ev
 = sbt->prev;

155 
	`FREE
(
sbt
);

157 
	`SDEBUG
(
	`¥ötf
("interior free\n"));

158 *
±r
 = 0;

160 
	}
}

162 *
s¸©ch_œrge_Æloc
 
	$P1
(, 
size
) {

163 
•_block_t
 *
•t
;

165 
	`SDEBUG
(
	`¥ötf
("s¸©ch_œrge_Æloc(%i)\n", 
size
));

167 
•t
 = (
•_block_t
 *)
	`DMALLOC
(
	`SIZE_WITH_HDR
(
size
), 
TAG_COMPILER
, "scratch_alloc");

168 i‡((
•t
->
√xt
 = 
s¸©ch_hód
.next))

169 
•t
->
√xt
->
¥ev
 = spt;

170 
•t
->
¥ev
 = (
•_block_t
 *)&
s¸©ch_hód
;

171 
•t
->
block
[0] = 
SCRATCH_MAGIC
;

172 
s¸©ch_hód
.
√xt
 = 
•t
;

173  (*)&
•t
->
block
[2];

174 
	}
}

177 *
s¸©ch_ªÆloc
 
	$P2
(*, 
±r
, , 
size
) {

178 
	`SDEBUG
(
	`¥ötf
("s¸©ch_ªÆloc(%s): ", 
±r
));

180 i‡(
På
 =
s¸_œ°
) {

181 i‡(
size
 < 256 && (
s¸_œ°
 + sizeË< 
s¸©ch_íd
) {

182 
	`SDEBUG
(
	`¥ötf
("on scratchpad\n"));

183 
s¸_èû
 = 
s¸_œ°
 + 
size
;

184 *
s¸_èû
 = 
size
;

185  
±r
;

187 *
ªs
;

188 
	`SDEBUG
(
	`¥ötf
("copy off ... "));

189 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
size
);

190 
	`°r˝y
(
ªs
, 
±r
);

191 
	`s¸©ch_‰ì_œ°
();

192  
ªs
;

194 } i‡(*(
På
 - 2)) {

195 
•_block_t
 *
sbt
, *
√wsbt
;

197 
	`DEBUG_CHECK
(*(
På
 - 2Ë!
SCRATCH_MAGIC
, "scratch_realloc onÇon-scratchpad string.\n");

198 
	`SDEBUG
(
	`¥ötf
("block\n"));

199 
sbt
 = 
	`FIND_HDR
(
±r
);

200 
√wsbt
 = (
•_block_t
 *)
	`DREALLOC
(
sbt
, 
	`SIZE_WITH_HDR
(
size
),

201 
TAG_COMPILER
, "scratch_realloc");

202 
√wsbt
->
¥ev
->
√xt
 =Çewsbt;

203 i‡(
√wsbt
->
√xt
)

204 
√wsbt
->
√xt
->
¥ev
 =Çewsbt;

205  (*)&
√wsbt
->
block
[2];

207 *
ªs
;

209 
	`SDEBUG
(
	`¥ötf
("interior ... "));

211 i‡(
size
 < 256 && (
s¸_èû
 + sizê+ 1Ë< 
s¸©ch_íd
) {

212 
	`SDEBUG
(
	`¥ötf
("moveÅoÉnd\n"));

213 
s¸_œ°
 = 
s¸_èû
 + 1;

214 
	`Så˝y
(
s¸_œ°
, 
±r
);

215 
s¸_èû
 = 
s¸_œ°
 + 
size
;

216 *
s¸_èû
 = 
size
;

217 
ªs
 = (*)
s¸_œ°
;

219 
	`SDEBUG
(
	`¥ötf
("copy off ... "));

220 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
size
);

221 
	`°r˝y
(
ªs
, 
±r
);

223 *
±r
 = 0;

224  
ªs
;

226 
	}
}

229 *
s¸©ch_Æloc
 
	$P1
(, 
size
) {

230 
	`SDEBUG
(
	`¥ötf
("s¸©ch_Æloc(%i)\n", 
size
));

231 i‡(
size
 < 256 && (
s¸_èû
 + sizê+ 1Ë< 
s¸©ch_íd
) {

232 
s¸_œ°
 = 
s¸_èû
 + 1;

233 
s¸_èû
 = 
s¸_œ°
 + 
size
;

234 *
s¸_èû
 = 
size
;

235  (*)
s¸_œ°
;

237  
	`s¸©ch_œrge_Æloc
(
size
);

238 
	}
}

240 *
s¸©ch_joö
 
	$P2
(*, 
s1
, *, 
s2
) {

241 *
ªs
;

242 
tmp
;

244 
	`SDEBUG
(
	`¥ötf
("scratch_join\n"));

245 i‡(*(
s1
-2Ë|| *(
s2
-2)) {

246 
l
 = 
	`°æí
(
s1
);

248 
	`DEBUG_CHECK
(*(
S1
 - 2Ë&& *(S1 - 2Ë!
SCRATCH_MAGIC
, "argument 1Åo scratch_join wasÇotá scratchpad string.\n");

249 
	`DEBUG_CHECK
(*(
S2
 - 2Ë&& *(S2 - 2Ë!
SCRATCH_MAGIC
, "argument 2Åo scratch_join wasÇotá scratchpad string.\n");

251 
ªs
 = 
	`s¸©ch_ªÆloc
(
s1
, 
l
 + 
	`°æí
(
s2
) + 1);

252 
	`°r˝y
(
ªs
 + 
l
, 
s2
);

253 
	`s¸©ch_‰ì
(
s2
);

254  
ªs
;

258 
	`DEBUG_CHECK
(
S2
 !
s¸_œ°
, "Argument 2Åo scratch_join wasÇotÅheÜastállocated string.\n");

259 
	`DEBUG_CHECK
(
S1
 !(
s¸_œ°
 - 1 - (*(scr_last - 1))), "Argument 1Åo scratch_join wasÇotÅhe secondÅoÜastállocated string.\n");

261 i‡((
tmp
 = ((
s¸_èû
 - 
S1
) - 2)) < 256) {

262 
s¸_èû
 = 
s¸_œ°
 - 2;

264 *
s¸_èû
 = *(scr_tail + 2);

265 } *
s¸_èû
++);

266 *
s¸_èû
 = 
tmp
;

267 
s¸_œ°
 = 
S1
;

268  
s1
;

270 *
ªt
 = 
	`s¸©ch_œrge_Æloc
(
tmp
);

271 
	`°r˝y
(
ªt
, 
s1
);

272 
	`°r˝y
(
ªt
 + (
s¸_œ°
 - 
S1
Ë- 2, 
s2
);

273 
	`s¸©ch_‰ì
(
s1
);

274 
	`s¸©ch_‰ì
(
s2
);

275  
ªt
;

278 
	}
}

280 *
s¸©ch_c›y_°rög
 
	$P1
(*,
s
) {

281 
l
;

282 *
to
 = 
s¸_èû
 + 1;

283 *
ªs
;

285 
	`SDEBUG2
(
	`¥ötf
("scratch_copy_string\n"));

286 
l
 = 
s¸©ch_íd
 - 
to
;

288 i‡(
l
 > 255)Ü = 255;

289 
s
++;

290 
l
--) {

291 i‡(*
s
 == '\\') {

292 *++
s
) {

293 'n': *
to
++ = '\n'; ;

294 't': *
to
++ = '\t'; ;

295 'r': *
to
++ = '\r'; ;

296 'b': *
to
++ = '\b'; ;

298 '\\': *
to
++ = *
s
; ;

300 *
to
++ = *
s
;

301 
	`yyw¨n
("Unknown \\x char.");

303 
s
++;

304 } i‡(*
s
 == '"') {

305 *
to
++ = 0;

306 i‡(!
l
 && (
to
 =
s¸©ch_íd
)) {

307 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
to
 - 
s¸_èû
 - 1);

308 
	`Så˝y
(
ªs
, 
s¸_èû
 + 1);

309  
ªs
;

311 
s¸_œ°
 = 
s¸_èû
 + 1;

312 
s¸_èû
 = 
to
;

313 *
to
 =Åÿ- 
s¸_œ°
;

314  (*)
s¸_œ°
;

316 *
to
++ = *
s
++;

320 
ªs
 = 
	`s¸©ch_œrge_Æloc
(
to
 - 
s¸_èû
 + 
	`°æí
(
s
) - 1);

321 
	`Sån˝y
(
ªs
, (
s¸_èû
 + 1), (
to
 - scr_tail) - 1);

322 
to
 = 
Res
 + (tÿ- 
s¸_èû
) - 1;

324 i‡(*
s
 == '\\') {

325 *++
s
) {

326 'n': *
to
++ = '\n'; ;

327 't': *
to
++ = '\t'; ;

328 'r': *
to
++ = '\r'; ;

329 'b': *
to
++ = '\b'; ;

331 '\\': *
to
++ = *
s
; ;

333 *
to
++ = *
s
;

334 
	`yyw¨n
("Unknown \\x char.");

336 
s
++;

337 } i‡(*
s
 == '"') {

338 *
to
++ = 0;

339  
ªs
;

341 *
to
++ = *
s
++;

343 
	}
}

	@scratchpad.h

1 #i‚de‡
_SCRATCHPAD_H


2 
	#_SCRATCHPAD_H


	)

16 
	#SCRATCHPAD_SIZE
 4096

	)

17 
	#SDEBUG
(
x
)

	)

18 
	#SDEBUG2
(
x
)

	)

20 
	#SCRATCH_MAGIC
 (()0xbb)

	)

22 
	s•_block_s
 {

23 
•_block_s
 *
	m√xt
, *
	m¥ev
;

24 
	mblock
[2];

25 } 
	t•_block_t
;

27 
	#s¸©ch_‰ì_œ°
() \

28 
s¸_èû
 = --
s¸_œ°
; \

29 
s¸_œ°
 -*
s¸_èû
; \

30 !(*
s¸_œ°
Ë&& 
s¸_èû
 != scr_last) { \

32 
s¸_èû
 = --
s¸_œ°
; \

33 
s¸_œ°
 -*
s¸_èû
; \

34 }

	)

36 *
s¸_œ°
;

37 *
s¸_èû
;

38 *
s¸©ch_íd
;

43 
s¸©ch_de°roy
 
PROT
(());

44 *
s¸©ch_c›y
 
PROT
((*));

45 *
s¸©ch_Æloc
 
PROT
(());

46 
s¸©ch_‰ì
 
PROT
((*));

47 *
s¸©ch_joö
 
PROT
((*, *));

48 *
s¸©ch_joö2
 
PROT
((*, *));

49 *
s¸©ch_ªÆloc
 
PROT
((*, ));

50 *
s¸©ch_c›y_°rög
 
PROT
((*));

51 *
s¸©ch_œrge_Æloc
 
PROT
(());

	@simul_efun.c

1 
	~"°d.h
"

2 
	~"simul_efun.h
"

3 
	~"Àx.h
"

4 
	~"ŸabÀ.h
"

23 *
	m«me
;

24 
	mödex
;

25 } 
	tsimul_íåy
;

27 
simul_íåy
 *
	gsimul_«mes
 = 0;

28 
fun˘i⁄_lookup_öfo_t
 *
	gsimuls
 = 0;

29 
	gnum_simul_efun
 = 0;

30 
obje˘_t
 *
	gsimul_efun_ob
;

32 
föd_‹_add_simul_efun
 
PROT
((
fun˘i⁄_t
 *, ));

33 
ªmove_simuls
 
PROT
(());

35 #ifde‡
DEBUGMALLOC_EXTENSIONS


36 
	$m¨k_simuls
() {

37 
i
;

39 
i
 = 0; i < 
num_simul_efun
; i++)

40 
	`EXTRA_REF
(
	`BLOCK
(
simul_«mes
[
i
].
«me
))++;

41 
	}
}

48 
öô_simul_efun
 
	$P1
(*, 
fûe
)

50 
buf
[512];

51 #ifde‡
LPC_TO_C


52 
Õc_obje˘_t
 *
compûed_vîsi⁄
;

54 
obje˘_t
 *
√w_ob
;

56 i‡(!
fûe
 || !file[0]) {

57 
	`Ârötf
(
°dîr
, "No simul_efun\n");

60 i‡(!
	`°rù_«me
(
fûe
, 
buf
,  buf))

61 
	`îr‹
("IÀgÆ simul_efu¿fûê«mê'%s'\n", 
fûe
);

63 #ifde‡
LPC_TO_C


64 
compûed_vîsi⁄
 = (
Õc_obje˘_t
 *)
	`lookup_obje˘_hash
(
buf
);

67 i‡(
fûe
[
	`°æí
(file) - 2] != '.')

68 
	`°rˇt
(
buf
, ".c");

70 
√w_ob
 = 
	`lﬂd_obje˘
(
buf
, 
compûed_vîsi⁄
);

71 i‡(
√w_ob
 == 0) {

72 
	`Ârötf
(
°dîr
, "Thêsimul_efu¿fûê%†wa†nŸÜﬂded.\n", 
buf
);

73 
	`exô
(-1);

75 
	`£t_simul_efun
(
√w_ob
);

76 
	}
}

78 
	$ªmove_simuls
() {

79 
i
;

80 
idít_hash_ñem_t
 *
ihe
;

82 
i
=0; i<
num_simul_efun
; i++) {

83 
simuls
[
i
].
ödex
 = 0;

84 
simuls
[
i
].
func
 = 0;

86 
i
=0; i<
num_simul_efun
; i++) {

87 i‡((
ihe
 = 
	`lookup_idít
(
simul_«mes
[
i
].
«me
))) {

88 i‡(
ihe
->
dn
.
simul_num
 != -1)

89 
ihe
->
£m_vÆue
--;

90 
ihe
->
dn
.
simul_num
 = -1;

91 
ihe
->
tokí
 &~
IHE_SIMUL
;

92 
ihe
->
tokí
 |
IHE_ORPHAN
;

95 
	}
}

98 
gë_simul_efuns
 
	$P1
(
¥ogøm_t
 *, 
¥og
)

100 
i
;

101 
num_√w
 = 
¥og
->
num_fun˘i⁄s_deföed
 +Örog->
œ°_öhîôed
;

103 i‡(
num_simul_efun
) {

104 
	`ªmove_simuls
();

105 i‡(!
num_√w
) {

106 
	`FREE
(
simul_«mes
);

107 
	`FREE
(
simuls
);

108 
num_simul_efun
 = 0;

111 
simul_«mes
 = 
	`RESIZE
(simul_«mes, 
num_simul_efun
 + 
num_√w
,

112 
simul_íåy
, 
TAG_SIMULS
, "get_simul_efuns");

113 
simuls
 = 
	`RESIZE
(simuls, 
num_simul_efun
 + 
num_√w
,

114 
fun˘i⁄_lookup_öfo_t
, 
TAG_SIMULS
, "get_simul_efuns: 2");

117 i‡(
num_√w
) {

118 
simul_«mes
 = 
	`CALLOCATE
(
num_√w
, 
simul_íåy
, 
TAG_SIMULS
, "get_simul_efuns");

119 
simuls
 = 
	`CALLOCATE
(
num_√w
, 
fun˘i⁄_lookup_öfo_t
, 
TAG_SIMULS
, "get_simul_efuns: 2");

122 
i
=0; i < 
num_√w
; i++) {

123 i‡(
¥og
->
fun˘i⁄_Êags
[
i
] &

124 (
FUNC_NO_CODE
|
DECL_PROTECTED
|
DECL_PRIVATE
|
DECL_HIDDEN
))

127 
	`föd_‹_add_simul_efun
(
	`föd_func_íåy
(
¥og
,
i
), i);

130 i‡(
num_simul_efun
) {

132 
simul_«mes
 = 
	`RESIZE
(simul_«mes, 
num_simul_efun
, 
simul_íåy
,

133 
TAG_SIMULS
, "get_simul_efuns");

134 
simuls
 = 
	`RESIZE
(simuls, 
num_simul_efun
, 
fun˘i⁄_lookup_öfo_t
,

135 
TAG_SIMULS
, "get_simul_efuns");

137 
	}
}

143 
föd_simul_efun
 
	$P1
(*, 
«me
)

145 
fú°
 = 0;

146 
œ°
 = 
num_simul_efun
 - 1;

147 
j
;

149 
fú°
 <
œ°
) {

150 i‡(
«me
 < 
simul_«mes
[
j
].«meË
œ°
 = j-1;

151 i‡(
«me
 > 
simul_«mes
[
j
].«meË
fú°
 = j + 1;

152  
simul_«mes
[
j
].
ödex
;

155 
	}
}

161 
föd_‹_add_simul_efun
 
	$P2
(
fun˘i⁄_t
 *, 
fu≈
, , 
ru¡ime_ödex
) {

162 
idít_hash_ñem_t
 *
ihe
;

163 
fú°
 = 0;

164 
œ°
 = 
num_simul_efun
 - 1;

165 
i
,
j
;

167 
fú°
 <
œ°
) {

168 
j
 = ((
fú°
 + 
œ°
) >> 1);

169 i‡(
fu≈
->
«me
 < 
simul_«mes
[
j
].«meË
œ°
 = j - 1;

170 i‡(
fu≈
->
«me
 > 
simul_«mes
[
j
].«meË
fú°
 = j + 1;

172 
ihe
 = 
	`föd_‹_add_≥rm_idít
(
simul_«mes
[
j
].
«me
);

173 
ihe
->
tokí
 |
IHE_SIMUL
;

174 
ihe
->
tokí
 &~
IHE_ORPHAN
;

175 
ihe
->
£m_vÆue
++;

176 
ihe
->
dn
.
simul_num
 = 
simul_«mes
[
j
].
ödex
;

177 
simuls
[
simul_«mes
[
j
].
ödex
].ödex = 
ru¡ime_ödex
;

178 
simuls
[
simul_«mes
[
j
].
ödex
].
func
 = 
fu≈
;

182 
i
=
num_simul_efun
 - 1; i > 
œ°
; i--)

183 
simul_«mes
[
i
+1] = simul_names[i];

184 
simuls
[
num_simul_efun
].
ödex
 = 
ru¡ime_ödex
;

185 
simuls
[
num_simul_efun
].
func
 = 
fu≈
;

186 
simul_«mes
[
fú°
].
«me
 = 
fu≈
->name;

187 
simul_«mes
[
fú°
].
ödex
 = 
num_simul_efun
;

188 
ihe
 = 
	`föd_‹_add_≥rm_idít
(
fu≈
->
«me
);

189 
ihe
->
tokí
 |
IHE_SIMUL
;

190 
ihe
->
tokí
 &~
IHE_ORPHAN
;

191 
ihe
->
£m_vÆue
++;

192 
ihe
->
dn
.
simul_num
 = 
num_simul_efun
++;

193 
	`ªf_°rög
(
fu≈
->
«me
);

194 
	}
}

197 
£t_simul_efun
 
	$P1
(
obje˘_t
 *, 
ob
) {

198 
	`gë_simul_efuns
(
ob
->
¥og
);

200 
simul_efun_ob
 = 
ob
;

201 
	`add_ªf
(
simul_efun_ob
, "set_simul_efun");

202 
	}
}

	@simul_efun.h

1 #i‚de‡
SIMUL_EFUN_H


2 
	#SIMUL_EFUN_H


	)

4 
	~"Õc_ö˛.h
"

10 
obje˘_t
 *
simul_efun_ob
;

11 
fun˘i⁄_lookup_öfo_t
 *
simuls
;

13 
öô_simul_efun
 
PROT
((*));

14 
£t_simul_efun
 
PROT
((
obje˘_t
 *));

15 
föd_simul_efun
 
PROT
((*));

17 #ifde‡
DEBUGMALLOC_EXTENSIONS


18 
m¨k_simuls
 
PROT
(());

	@simulate.c

1 
	#SUPPRESS_COMPILER_INLINES


	)

2 
	~"°d.h
"

3 
	~"Õc_ö˛.h
"

4 
	~"fûe_ö˛.h
"

5 
	~"backíd.h
"

6 
	~"simul_efun.h
"

7 
	~"compûî.h
"

8 
	~"ŸabÀ.h
"

9 
	~"comm.h
"

10 
	~"bö¨õs.h
"

11 
	~"sw≠.h
"

12 
	~"sockë_efuns.h
"

13 
	~"md.h
"

14 
	~"e›î©‹s.h
"

15 
	~"ed.h
"

16 
	~"fûe.h
"

17 
	~"∑ckages/db.h
"

18 
	~"∑ckages/∑r£r.h
"

19 
	~"ma°î.h
"

20 
	~"add_a˘i⁄.h
"

27 *
	göhîô_fûe
;

28 #ifde‡
LPC_TO_C


29 
	gcompûe_to_c
;

30 
FILE
 *
	gcompû©i⁄_ouçut_fûe
;

31 *
	gcompû©i⁄_idít
;

36 
	gnum_obje˘s_this_thªad
 = 0;

38 #i‚de‡
NO_ENVIRONMENT


39 
obje˘_t
 *
	gª°ri˘_de°ru˘
;

42 
obje˘_t
 *
	gobj_li°
, *
	gobj_li°_de°ru˘
;

43 #ifde‡
DEBUG


44 
	gtŸ_d™glög_obje˘
 = 0;

45 
obje˘_t
 *
	gobj_li°_d™glög
 = 0;

47 
obje˘_t
 *
	gcuºít_obje˘
;

48 
obje˘_t
 *
	gcomm™d_givî
;

49 
obje˘_t
 *
	gcuºít_öãø˘ive
;

51 #ifde‡
PRIVS


52 
öô_¥ivs_f‹_obje˘
 
PROT
((
obje˘_t
 *));

54 #ifde‡
PACKAGE_UIDS


55 
give_uid_to_obje˘
 
PROT
((
obje˘_t
 *));

57 
öô_obje˘
 
PROT
((
obje˘_t
 *));

58 
obje˘_t
 *
lﬂd_vútuÆ_obje˘
 
PROT
((*, ));

59 *
make_√w_«me
 
PROT
((*));

60 #i‚de‡
NO_ENVIRONMENT


61 
£nd_ßy
 
PROT
((
obje˘_t
 *, *, 
¨øy_t
 *));

64 
INLINE
 
check_ÀgÆ_°rög
 
	$P1
(*, 
s
)

66 i‡(
	`°æí
(
s
Ë> 
LARGEST_PRINTABLE_STRING
) {

67 
	`îr‹
("Printable stringsÜimitedÅoÜength of %d.\n",

68 
LARGEST_PRINTABLE_STRING
);

70 
	}
}

88 *
°Ωut
 
	$P3
(*, 
x
, *, 
limô
, *, 
y
) {

89 (*
x
++ = *
y
++)) {

90 i‡(
x
 =
limô
) {

91 *(
x
-1) = 0;

95  
x
 - 1;

96 
	}
}

98 *
°Ωut_öt
 
	$P3
(*, 
x
, *, 
limô
, , 
num
) {

99 
buf
[20];

100 
	`•rötf
(
buf
, "%d", 
num
);

101  
	`°Ωut
(
x
, 
limô
, 
buf
);

102 
	}
}

104 #ifde‡
PRIVS


106 
öô_¥ivs_f‹_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

108 
svÆue_t
 *
vÆue
;

110 i‡(!
cuºít_obje˘


111 #ifde‡
PACKAGE_UIDS


112 || !
cuºít_obje˘
->
uid


115 
ob
->
¥ivs
 = 
NULL
;

118 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
ob
->
«me
));

120 i‡(
ma°î_ob
)

121 
vÆue
 = 
	`≠∂y_ma°î_ob
(
APPLY_PRIVS_FILE
, 1);

123 
vÆue
 = 
	`≠∂y
(
≠∂õs_èbÀ
[
APPLY_PRIVS_FILE
], 
ob
, 1, 
ORIGIN_DRIVER
);

125 i‡(
vÆue
 =
NULL
 || vÆue->
ty≥
 !
T_STRING
)

126 
ob
->
¥ivs
 = 
NULL
;

128 
ob
->
¥ivs
 = 
	`make_sh¨ed_°rög
(
vÆue
->
u
.
°rög
);

129 
	}
}

135 #ifde‡
PACKAGE_UIDS


136 
give_uid_to_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

138 
svÆue_t
 *
ªt
;

139 *
¸ót‹_«me
;

141 i‡(!
ma°î_ob
) {

142 
ob
->
uid
 = 
	`add_uid
("NONAME");

143 #ifde‡
AUTO_SETEUID


144 
ob
->
euid
 = ob->
uid
;

146 
ob
->
euid
 = 
NULL
;

153 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
ob
->
«me
));

155 
ªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_CREATOR_FILE
, 1);

156 i‡(!
ªt
)

157 
	`îr‹
("master object: No function %s() defined!\n",

158 
≠∂õs_èbÀ
[
APPLY_CREATOR_FILE
]);

159 i‡(!
ªt
 ||Ñë =(
svÆue_t
 *)-1 ||Ñë->
ty≥
 !
T_STRING
) {

160 
	`de°ru˘_obje˘
(
ob
);

161 i‡(!
ªt
Ë
	`îr‹
("Ma°î obje˘ ha†nÿfun˘i⁄ %s().\n", 
≠∂õs_èbÀ
[
APPLY_CREATOR_FILE
]);

162 i‡(
ªt
 =(
svÆue_t
 *)-1Ë
	`îr‹
("Can'tÜoad objects withoutá master object.");

163 
	`îr‹
("IŒegÆ obje˘Åÿlﬂd:Ñëu∫ vÆuêo‡ma°î::%s(Ëwa†nŸá såög.\n", 
≠∂õs_èbÀ
[
APPLY_CREATOR_FILE
]);

165 
¸ót‹_«me
 = 
ªt
->
u
.
°rög
;

170 i‡(
	`°rcmp
(
cuºít_obje˘
->
uid
->
«me
, 
¸ót‹_«me
) == 0) {

174 #i‚de‡
COMPAT_32


175 
ob
->
uid
 = 
cuºít_obje˘
->uid;

177 
ob
->
uid
 = 
cuºít_obje˘
->
euid
;

179 
ob
->
euid
 = 
cuºít_obje˘
->euid;

182 #ifde‡
AUTO_TRUST_BACKBONE


183 i‡(
	`°rcmp
(
backb⁄e_uid
->
«me
, 
¸ót‹_«me
) == 0) {

188 
ob
->
uid
 = 
cuºít_obje˘
->
euid
;

189 
ob
->
euid
 = 
cuºít_obje˘
->euid;

204 
ob
->
uid
 = 
	`add_uid
(
¸ót‹_«me
);

205 #ifde‡
AUTO_SETEUID


206 
ob
->
euid
 = ob->
uid
;

208 
ob
->
euid
 = 
NULL
;

211 
	}
}

214 
öô_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

216 #ifde‡
PACKAGE_MUDLIB_STATS


217 
	`öô_°©s_f‹_obje˘
(
ob
);

219 #ifde‡
PRIVS


220 
	`öô_¥ivs_f‹_obje˘
(
ob
);

222 #ifde‡
PACKAGE_MUDLIB_STATS


223 
	`add_obje˘s
(&
ob
->
°©s
, 1);

225 #ifde‡
NO_ADD_ACTION


226 i‡(
	`fun˘i⁄_exi°s
(
APPLY_CATCH_TELL
, 
ob
, 1) ||

227 
	`fun˘i⁄_exi°s
(
APPLY_RECEIVE_MESSAGE
, 
ob
, 1))

228 
ob
->
Êags
 |
O_LISTENER
;

230 #ifde‡
PACKAGE_UIDS


231  
	`give_uid_to_obje˘
(
ob
);

235 
	}
}

238 
obje˘_t
 *
lﬂd_vútuÆ_obje˘
 
	$P2
(*, 
«me
, , 
˛⁄e
)

240 
¨gc
 = 2;

241 *
√w_«me
;

242 
obje˘_t
 *
√w_ob
, *
ob
;

243 
¨øy_t
 *
¨gs
 = 0;

244 
svÆue_t
 *
v
;

246 i‡(!
ma°î_ob
) {

247 i‡(
˛⁄e
)

248 
	`p›_n_ñems
(
˛⁄e
 - 1);

252 i‡(
˛⁄e
 > 1) {

253 
¨gs
 = 
	`Æloˇã_em±y_¨øy
(
˛⁄e
 - 1);

254 
˛⁄e
-- > 1)

255 
¨gs
->
ôem
[
˛⁄e
 - 1] = *
•
--;

256 
¨gc
++;

257 
˛⁄e
 = 1;

259 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
«me
));

260 
	`push_numbî
(
˛⁄e
);

261 i‡(
¨gs
)

262 
	`push_ª„d_¨øy
(
¨gs
);

263 
v
 = 
	`≠∂y_ma°î_ob
(
APPLY_COMPILE_OBJECT
, 
¨gc
);

264 i‡(!
v
 || (v->
ty≥
 !
T_OBJECT
))

266 
√w_ob
 = 
v
->
u
.
ob
;

268 i‡(!
˛⁄e
) {

269 
ob
 = 
	`lookup_obje˘_hash
(
«me
);

270 i‡(
ob
 && ob !
√w_ob
) {

275 
	`de°ru˘_obje˘
(
√w_ob
);

276 
	`îr‹
("Virtual objectÇame duplicatesánÉxisting objectÇame.\n");

279 
√w_«me
 = 
	`Æloc_c°rög
(
«me
, "load_virtual_object");

280 
	`SET_TAG
(
√w_«me
, 
TAG_OBJ_NAME
);

283 
√w_ob
->
Êags
 |
O_CLONE
;

284 
√w_«me
 = 
	`make_√w_«me
(
«me
);

287 #ifde‡
PACKAGE_MUDLIB_STATS


288 
	`add_obje˘s
(&
√w_ob
->
°©s
, -1);

292 
	`ªmove_obje˘_hash
(
√w_ob
);

293 i‡(
√w_ob
->
«me
)

294 
	`FREE
(
√w_ob
->
«me
);

295 
√w_ob
->
«me
 = 
√w_«me
;

296 
	`íãr_obje˘_hash
(
√w_ob
);

299 
√w_ob
->
Êags
 |
O_VIRTUAL
;

300 
√w_ob
->
lﬂd_time
 = 
cuºít_time
;

301 #ifde‡
PACKAGE_MUDLIB_STATS


302 
	`öô_°©s_f‹_obje˘
(
√w_ob
);

303 
	`add_obje˘s
(&
√w_ob
->
°©s
, 1);

305 #ifde‡
PRIVS


306 i‡(
√w_ob
->
¥ivs
)

307 
	`‰ì_°rög
(
√w_ob
->
¥ivs
);

308 
	`öô_¥ivs_f‹_obje˘
(
√w_ob
);

310 #ifde‡
PACKAGE_UIDS


312 
	`give_uid_to_obje˘
(
√w_ob
);

314  
√w_ob
;

315 
	}
}

317 
°rù_«me
 
	$P3
(*, 
§c
, *, 
de°
, , 
size
) {

318 
œ°_c
 = 0;

319 *
p
 = 
de°
;

320 *
íd
 = 
de°
 + 
size
 - 1;

322 *
§c
 == '/') src++;

324 *
§c
 && 
p
 < 
íd
) {

325 i‡(
œ°_c
 ='/' && *
§c
 == '/') src++;

326 
œ°_c
 = (*
p
++ = *
§c
++);

342 
p
 - 
de°
 > 2 &&Ö[-1] == 'c' &&Ö[-2] == '.')

343 
p
 -= 2;

345 *
p
 = 0;

347 
	}
}

368 #ifde‡
LPC_TO_C


369 
obje˘_t
 *
öt_lﬂd_obje˘
 
	$P2
(*, 
 ame
, 
Õc_obje˘_t
 *, 
Õc_obj
)

371 
obje˘_t
 *
öt_lﬂd_obje˘
 
	$P1
(*, 
 ame
)

374 
f
;

375 
¥ogøm_t
 *
¥og
;

376 
obje˘_t
 *
ob
;

377 
svÆue_t
 *
mªt
;

378 
°©
 
c_°
;

379 
ªÆ_«me
[200], 
«me
[200];

380 #ifde‡
LPC_TO_C


381 
out_«me
[200];

382 *
out_±r
 = 
out_«me
;

383 
ßve_compûe_to_c
 = 
compûe_to_c
;

386 i‡(++
num_obje˘s_this_thªad
 > 
INHERIT_CHAIN_SIZE
)

387 
	`îr‹
("Inhîô chaöÅoÿdìp: > %d whíÅryögÅÿlﬂd '%s'.\n", 
INHERIT_CHAIN_SIZE
, 
 ame
);

388 #ifde‡
PACKAGE_UIDS


389 i‡(
cuºít_obje˘
 && cuºít_obje˘->
euid
 =
NULL
)

390 
	`îr‹
("Can'tÜoad objects whenÇoÉffective user.\n");

392 i‡(
	`°ºchr
(
 ame
, '#'))

393 
	`îr‹
("CannotÜoadá clone.\n");

394 i‡(!
	`°rù_«me
(
 ame
, 
«me
, Çame))

395 
	`îr‹
("Filenames with consecutive /'s inÅhemáren'tállowed (%s).\n",

396 
 ame
);

401 (Ë
	`°r˝y
(
ªÆ_«me
, 
«me
);

402 (Ë
	`°rˇt
(
ªÆ_«me
, ".c");

404 i‡(
	`°©
(
ªÆ_«me
, &
c_°
Ë=-1 || 
	`S_ISDIR
(c_°.
°_mode
)) {

405 
	`ßve_comm™d_givî
(
comm™d_givî
);

406 
ob
 = 
	`lﬂd_vútuÆ_obje˘
(
«me
, 0);

407 
	`ª°‹e_comm™d_givî
();

408 #ifde‡
LPC_TO_C


409 
compûe_to_c
 = 
ßve_compûe_to_c
;

411 
num_obje˘s_this_thªad
--;

412  
ob
;

417 i‡(!
	`ÀgÆ_∑th
(
ªÆ_«me
)) {

418 
	`debug_mesßge
("IŒegÆÖ©h«me: /%s\n", 
ªÆ_«me
);

419 
	`îr‹
("IŒegÆÖ©hÇamê'/%s'.\n", 
ªÆ_«me
);

421 #ifde‡
BINARIES


422 i‡(!(
¥og
 = 
	`lﬂd_bö¨y
(
ªÆ_«me
, 
Õc_obj
)Ë&& !
öhîô_fûe
) {

425 i‡(
comp_Êag
) {

426 
	`debug_mesßge
(" compûög /%†...", 
ªÆ_«me
);

427 #ifde‡
LATTICE


428 
	`fÊush
(
°dîr
);

431 
f
 = 
	`›í
(
ªÆ_«me
, 
O_RDONLY
);

432 i‡(
f
 == -1) {

433 
	`debug_≥º‹
("compûe_fûe", 
ªÆ_«me
);

434 
	`îr‹
("CouldÇŸÑódÅhêfûê'/%s'.\n", 
ªÆ_«me
);

436 #ifde‡
LPC_TO_C


437 i‡(
compûe_to_c
) {

438 
compû©i⁄_ouçut_fûe
 = 
	`¸dú_f›í
(
out_±r
);

439 i‡(
compû©i⁄_ouçut_fûe
 == 0) {

440 
	`debug_≥º‹
("compûe_to_c", 
out_±r
);

441 
	`îr‹
("CouldÇŸ o≥¿ouçuàfûê'/%s'.\n", 
out_±r
);

443 
compû©i⁄_idít
 = 0;

444 
	`ßve_comm™d_givî
(
comm™d_givî
);

445 
¥og
 = 
	`compûe_fûe
(
f
, 
ªÆ_«me
);

446 
	`ª°‹e_comm™d_givî
();

447 
	`f˛o£
(
compû©i⁄_ouçut_fûe
);

448 i‡(
¥og
) {

449 
	`‰ì_¥og
(
¥og
, 1);

450 
¥og
 = 0;

454 
	`ßve_comm™d_givî
(
comm™d_givî
);

455 
¥og
 = 
	`compûe_fûe
(
f
, 
ªÆ_«me
);

456 
	`ª°‹e_comm™d_givî
();

457 #ifde‡
LPC_TO_C


460 i‡(
comp_Êag
)

461 
	`debug_mesßge
(" done\n");

462 
	`upd©e_compûe_av
(
tŸÆ_löes
);

463 
tŸÆ_löes
 = 0;

464 
	`˛o£
(
f
);

465 #ifde‡
BINARIES


470 i‡(
öhîô_fûe
 =0 && (
num_∑r£_îr‹
 > 0 || 
¥og
 == 0)) {

471 i‡(
¥og
)

472 
	`‰ì_¥og
(
¥og
, 1);

473 i‡(
num_∑r£_îr‹
 =0 && 
¥og
 == 0)

474 
	`îr‹
("Nÿ¥ogøm i¿obje˘ '/%s'!\n", 
«me
);

475 
	`îr‹
("Eº‹ i¿lﬂdög obje˘ '/%s'\n", 
«me
);

483 i‡(
öhîô_fûe
) {

484 
obje˘_t
 *
öh_obj
;

485 
öhbuf
[
MAX_OBJECT_NAME_SIZE
];

487 i‡(!
	`°rù_«me
(
öhîô_fûe
, 
öhbuf
,  inhbuf))

488 
	`°r˝y
(
öhbuf
, 
öhîô_fûe
);

489 
	`FREE
(
öhîô_fûe
);

490 
öhîô_fûe
 = 0;

492 i‡(
¥og
) {

493 
	`‰ì_¥og
(
¥og
, 1);

494 
¥og
 = 0;

496 i‡(
	`°rcmp
(
öhbuf
, 
«me
) == 0) {

497 
	`îr‹
("IllegalÅo inherit self.\n");

500 i‡((
öh_obj
 = 
	`lookup_obje˘_hash
(
öhbuf
))) {

501 #ifde‡
LPC_TO_C


502 
	`DEBUG_CHECK
(!(
öh_obj
->
Êags
 & 
O_COMPILED_PROGRAM
), "Inherited object isálreadyÜoaded!\n");

503 
öh_obj
 = 
	`lﬂd_obje˘
(
öhbuf
, (
Õc_obje˘_t
 *)inh_obj);

505 
	`IF_DEBUG
(
	`Áèl
("Inherited object isálreadyÜoaded!"));

508 
öh_obj
 = 
	`lﬂd_obje˘
(
öhbuf
, 0);

510 i‡(!
öh_obj
Ë
	`îr‹
("Inherited file '/%s' doesÇotÉxist!\n",

511 
öhbuf
);

519 i‡(!(
ob
 = 
	`lookup_obje˘_hash
(
«me
))) {

520 
ob
 = 
	`lﬂd_obje˘
(
«me
, 0);

522 i‡(!
ob
) {

523 
num_obje˘s_this_thªad
--;

526 
ob
->
lﬂd_time
 = 
cuºít_time
;

528 #ifde‡
LPC_TO_C


529 i‡(
ob
->
Êags
 & 
O_COMPILED_PROGRAM
) {

531 
ob
 = 
	`lﬂd_obje˘
(
«me
, (
Õc_obje˘_t
 *)ob);

533 i‡(!
ob
Ë{ 
num_obje˘s_this_thªad
--;  0; }

534 
ob
->
lﬂd_time
 = 
cuºít_time
;

537 
num_obje˘s_this_thªad
--;

538 #ifde‡
LPC_TO_C


539 
compûe_to_c
 = 
ßve_compûe_to_c
;

541  
ob
;

543 
ob
 = 
	`gë_em±y_obje˘
(
¥og
->
num_v¨übÀs_tŸÆ
);

545 
ob
->
«me
 = 
	`Æloc_c°rög
(name, "load_object");

546 
	`SET_TAG
(
ob
->
«me
, 
TAG_OBJ_NAME
);

547 
ob
->
¥og
 =Örog;

548 
ob
->
Êags
 |
O_WILL_RESET
;

549 
ob
->
√xt_Æl
 = 
obj_li°
;

550 
obj_li°
 = 
ob
;

551 
	`íãr_obje˘_hash
(
ob
);

552 
	`ßve_comm™d_givî
(
comm™d_givî
);

553 
	`push_obje˘
(
ob
);

554 
mªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_OBJECT
, 1);

555 i‡(
mªt
 && !
	`MASTER_APPROVED
(mret)) {

556 
	`de°ru˘_obje˘
(
ob
);

557 
	`îr‹
("ma°î obje˘: %s(ËdíõdÖîmissi⁄Åÿlﬂd '/%s'.\n", 
≠∂õs_èbÀ
[
APPLY_VALID_OBJECT
], 
«me
);

560 i‡(
	`öô_obje˘
(
ob
))

561 
	`ˇŒ_¸óã
(
ob
, 0);

562 i‡(!(
ob
->
Êags
 & 
O_DESTRUCTED
) &&

563 
	`fun˘i⁄_exi°s
(
APPLY_CLEAN_UP
, 
ob
, 1)) {

564 
ob
->
Êags
 |
O_WILL_CLEAN_UP
;

566 
	`ª°‹e_comm™d_givî
();

568 i‡(
ob
)

569 
	`debug
(
d_Êag
, ("--/%†lﬂded", 
ob
->
«me
));

571 
ob
->
lﬂd_time
 = 
cuºít_time
;

572 
num_obje˘s_this_thªad
--;

573 #ifde‡
LPC_TO_C


574 
compûe_to_c
 = 
ßve_compûe_to_c
;

576  
ob
;

577 
	}
}

579 *
make_√w_«me
 
	$P1
(*, 
°r
)

581 
i
;

582 *
p
 = 
	`DXALLOC
(
	`°æí
(
°r
Ë+ 10, 
TAG_OBJ_NAME
, "make_new_name");

584 (Ë
	`•rötf
(
p
, "%s#%d", 
°r
, 
i
);

585 
i
++;

586  
p
;

587 
	}
}

594 
obje˘_t
 *
˛⁄e_obje˘
 
	$P2
(*, 
°r1
, , 
num_¨g
)

596 
obje˘_t
 *
ob
, *
√w_ob
;

598 #ifde‡
PACKAGE_UIDS


599 i‡(
cuºít_obje˘
 && cuºít_obje˘->
euid
 == 0) {

600 
	`îr‹
("Object must call seteuid()ÖriorÅo calling clone_object().\n");

604 
	`ßve_comm™d_givî
(
comm™d_givî
);

606 
num_obje˘s_this_thªad
 = 0;

607 
ob
 = 
	`föd_obje˘
(
°r1
);

608 i‡(
ob
 && !
	`obje˘_visibÀ
(ob))

609 
ob
 = 0;

613 i‡(
ob
 == 0) {

614 
	`ª°‹e_comm™d_givî
();

615 
	`p›_n_ñems
(
num_¨g
);

618 i‡(
ob
->
Êags
 & 
O_CLONE
) {

619 i‡(!(
ob
->
Êags
 & 
O_VIRTUAL
Ë|| 
	`°ºchr
(
°r1
, '#')) {

620 
	`îr‹
("Cannot clone fromá clone\n");

622 
√w_ob
 = 
	`lﬂd_vútuÆ_obje˘
(
ob
->
«me
, 1 + 
num_¨g
);

623 
	`ª°‹e_comm™d_givî
();

624  
√w_ob
;

634 i‡(
ob
->
Êags
 & 
O_HEART_BEAT
)

635 (Ë
	`£t_hóπ_bót
(
ob
, 0);

636 
√w_ob
 = 
	`gë_em±y_obje˘
(
ob
->
¥og
->
num_v¨übÀs_tŸÆ
);

637 
√w_ob
->
«me
 = 
	`make_√w_«me
(
ob
->name);

638 
√w_ob
->
Êags
 |(
O_CLONE
 | (
ob
->Êag†& (
O_WILL_CLEAN_UP
 | 
O_WILL_RESET
)));

639 
√w_ob
->
lﬂd_time
 = 
ob
->load_time;

640 
√w_ob
->
¥og
 = 
ob
->prog;

641 
	`ª„ªn˚_¥og
(
ob
->
¥og
, "clone_object");

642 
	`DEBUG_CHECK
(!
cuºít_obje˘
, "clone_object() fromÇo current_object !\n");

644 
	`öô_obje˘
(
√w_ob
);

646 
√w_ob
->
√xt_Æl
 = 
obj_li°
;

647 
obj_li°
 = 
√w_ob
;

648 
	`íãr_obje˘_hash
(
√w_ob
);

649 
	`ˇŒ_¸óã
(
√w_ob
, 
num_¨g
);

650 
	`ª°‹e_comm™d_givî
();

652 i‡(
√w_ob
->
Êags
 & 
O_DESTRUCTED
)

654  (
√w_ob
);

655 
	}
}

657 #i‚de‡
NO_ENVIRONMENT


658 
obje˘_t
 *
ívú⁄mít
 
	$P1
(
svÆue_t
 *, 
¨g
)

660 
obje˘_t
 *
ob
 = 
cuºít_obje˘
;

662 i‡(
¨g
 &&árg->
ty≥
 =
T_OBJECT
)

663 
ob
 = 
¨g
->
u
.ob;

664 i‡(
ob
 =0 || ob->
su≥r
 =0 || (ob->
Êags
 & 
O_DESTRUCTED
))

666 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

667 
	`îr‹
("environment() of destructed object.\n");

668  
ob
->
su≥r
;

669 
	}
}

680 #ifde‡
F_PRESENT


681 
obje˘_t
 *
obje˘_¥e£¡2
 
PROT
((*, object_t *));

683 
obje˘_t
 *
obje˘_¥e£¡
 
	$P2
(
svÆue_t
 *, 
v
, 
obje˘_t
 *, 
ob
)

685 
svÆue_t
 *
ªt
;

686 
obje˘_t
 *
ªt_ob
;

687 
•ecific
 = 0;

689 i‡(
ob
 == 0)

690 
ob
 = 
cuºít_obje˘
;

692 
•ecific
 = 1;

693 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

695 i‡(
v
->
ty≥
 =
T_OBJECT
) {

696 i‡(
•ecific
) {

697 i‡(
v
->
u
.
ob
->
su≥r
 == ob)

698  
v
->
u
.
ob
;

702 i‡(
v
->
u
.
ob
->
su≥r
 == ob ||

703 (
v
->
u
.
ob
->
su≥r
 == ob->super && ob->super != 0))

704  
v
->
u
.
ob
->
su≥r
;

707 
ªt_ob
 = 
	`obje˘_¥e£¡2
(
v
->
u
.
°rög
, 
ob
->
c⁄èös
);

708 i‡(
ªt_ob
)

709  
ªt_ob
;

710 i‡(
•ecific
)

712 i‡(
ob
->
su≥r
) {

713 
	`push_svÆue
(
v
);

714 
ªt
 = 
	`≠∂y
(
APPLY_ID
, 
ob
->
su≥r
, 1, 
ORIGIN_DRIVER
);

715 i‡(
ob
->
su≥r
->
Êags
 & 
O_DESTRUCTED
)

717 i‡(!
	`IS_ZERO
(
ªt
)) {

724 i‡(
ªt
->
ty≥
 =
T_OBJECT
)

725  
ªt
->
u
.
ob
;

728  
ob
->
su≥r
;

730  
	`obje˘_¥e£¡2
(
v
->
u
.
°rög
, 
ob
->
su≥r
->
c⁄èös
);

733 
	}
}

735 
obje˘_t
 *
obje˘_¥e£¡2
 
	$P2
(*, 
°r
, 
obje˘_t
 *, 
ob
)

737 
svÆue_t
 *
ªt
;

738 *
p
;

739 
cou¡
 = 0, 
Àngth
;

741 
Àngth
 = 
	`°æí
(
°r
);

743 i‡(
Àngth
) {

744 
p
 = 
°r
 + 
Àngth
 - 1;

745 i‡(
	`uisdigô
(*
p
)) {

747 
p
--;

748 } 
p
 > 
°r
 && 
	`uisdigô
(*p));

750 i‡(*
p
 == ' ') {

751 
cou¡
 = 
	`©oi
(
p
 + 1) - 1;

752 
Àngth
 = 
p
 - 
°r
;

756 ; 
ob
; ob = ob->
√xt_öv
) {

757 
p
 = 
	`√w_°rög
(
Àngth
, "object_present2");

758 
	`mem˝y
(
p
, 
°r
, 
Àngth
);

759 
p
[
Àngth
] = 0;

760 
	`push_mÆlo˚d_°rög
(
p
);

761 
ªt
 = 
	`≠∂y
(
APPLY_ID
, 
ob
, 1, 
ORIGIN_DRIVER
);

762 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

764 i‡(
	`IS_ZERO
(
ªt
))

766 i‡(
cou¡
-- > 0)

768  
ob
;

771 
	}
}

774 *
	gßved_ma°î_«me
;

775 *
	gßved_simul_«me
;

777 
	$fix_obje˘_«mes
() {

778 
ma°î_ob
->
«me
 = 
ßved_ma°î_«me
;

779 
simul_efun_ob
->
«me
 = 
ßved_simul_«me
;

780 
	}
}

786 
de°ru˘_obje˘
 
	$P1
(
obje˘_t
 *, 
ob
)

788 
obje˘_t
 **
µ
;

789 
ªmoved
;

790 #i‚de‡
NO_ENVIRONMENT


791 
obje˘_t
 *
su≥r
;

792 
obje˘_t
 *
ßve_ª°ri˘_de°ru˘
 = 
ª°ri˘_de°ru˘
;

794 i‡(
ª°ri˘_de°ru˘
 &&Ñe°ri˘_de°ru˘ !
ob
)

795 
	`îr‹
("OnlyÅhis_object() can be destructed from move_or_destruct.\n");

798 #i‡
	`deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

803 i‡(
ob
->
Êags
 & 
O_EFUN_SOCKET
) {

804 
	`˛o£_ª„ªncög_sockës
(
ob
);

807 #ifde‡
PACKAGE_PARSER


808 i‡(
ob
->
pöfo
) {

809 
	`∑r£_‰ì
(
ob
->
pöfo
);

810 
ob
->
pöfo
 = 0;

814 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) {

817 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

818 
	`lﬂd_ob_‰om_sw≠
(
ob
);

819 
	`ªmove_obje˘_‰om_°ack
(
ob
);

824 #i‚de‡
NO_SHADOWS


825 i‡(
ob
->
shadowed
 && !ob->
shadowög
) {

826 
obje˘_t
 *
Ÿmp
;

827 
obje˘_t
 *
ob2
;

832 
ob2
 = 
ob
->
shadowed
; ob2->shadowed; ob2 = ob2->shadowed);

837 ; 
ob2
;) {

838 
Ÿmp
 = 
ob2
;

839 
ob2
 = ob2->
shadowög
;

840 i‡(
ob2
)

841 
ob2
->
shadowed
 = 0;

842 
Ÿmp
->
shadowög
 = 0;

843 
	`de°ru˘_obje˘
(
Ÿmp
);

851 i‡(
ob
->
shadowög
)

852 
ob
->
shadowög
->
shadowed
 = ob->shadowed;

853 i‡(
ob
->
shadowed
)

854 
ob
->
shadowed
->
shadowög
 = ob->shadowing;

855 
ob
->
shadowög
 = 0;

856 
ob
->
shadowed
 = 0;

859 
	`debug
(
d_Êag
, ("Deobje˘_à/%†‘e‡%d)", 
ob
->
«me
, ob->
ªf
));

861 #i‚de‡
NO_ENVIRONMENT


863 
su≥r
 = 
ob
->super;

865 
ob
->
c⁄èös
) {

866 
obje˘_t
 *
Ÿmp
;

868 
Ÿmp
 = 
ob
->
c⁄èös
;

873 
	`push_obje˘
(
su≥r
);

875 
ª°ri˘_de°ru˘
 = 
ob
->
c⁄èös
;

876 ()
	`≠∂y
(
APPLY_MOVE
, 
ob
->
c⁄èös
, 1, 
ORIGIN_DRIVER
);

877 
ª°ri˘_de°ru˘
 = 
ßve_ª°ri˘_de°ru˘
;

879 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
) ;

880 i‡(
Ÿmp
 =
ob
->
c⁄èös
)

881 
	`de°ru˘_obje˘
(
Ÿmp
);

885 #ifde‡
PACKAGE_MUDLIB_STATS


886 
	`add_obje˘s
(&
ob
->
°©s
, -1);

888 #ifde‡
OLD_ED


889 i‡(
ob
->
öãø˘ive
 && ob->öãø˘ive->
ed_buf„r
)

890 
	`ßve_ed_buf„r
(
ob
);

892 i‡(
ob
->
Êags
 & 
O_IN_EDIT
) {

893 
	`obje˘_ßve_ed_buf„r
(
ob
);

894 
ob
->
Êags
 &~
O_IN_EDIT
;

897 #i‚de‡
NO_SNOOP


898 i‡(
ob
->
Êags
 & 
O_SNOOP
) {

899 
i
;

900 
i
 = 0; i < 
max_u£rs
; i++) {

901 i‡(
Æl_u£rs
[
i
] &&áŒ_u£rs[i]->
¢o›ed_by
 =
ob
)

902 
Æl_u£rs
[
i
]->
¢o›ed_by
 = 0;

904 
ob
->
Êags
 &~
O_SNOOP
;

907 #i‚de‡
NO_ENVIRONMENT


912 i‡(
ob
->
su≥r
) {

913 #i‚de‡
NO_LIGHT


914 
	`add_light
(
ob
->
su≥r
, -ob->
tŸÆ_light
);

916 
	`ªmove_£¡
(
ob
->
su≥r
, ob);

917 
	`ªmove_£¡
(
ob
, ob->
su≥r
);

918 
µ
 = &
ob
->
su≥r
->
c⁄èös
; *pp;) {

919 
	`ªmove_£¡
(*
µ
, 
ob
);

920 i‡(*
µ
 !
ob
) {

921 
	`ªmove_£¡
(
ob
, *
µ
);

922 
µ
 = &(*µ)->
√xt_öv
;

924 *
µ
 = (*µ)->
√xt_öv
;

934 i‡(
ob
 =
ma°î_ob
 || ob =
simul_efun_ob
) {

935 
obje˘_t
 *
√w_ob
;

936 *
tmp
 = 
ob
->
«me
;

937 #ifde‡
LPC_TO_C


938 
Õc_obje˘_t
 *
compûed_vîsi⁄
;

941 
STACK_INC
;

942 
•
->
ty≥
 = 
T_ERROR_HANDLER
;

943 
•
->
u
.
îr‹_h™dÀr
 = 
fix_obje˘_«mes
;

944 
ßved_ma°î_«me
 = 
ma°î_ob
->
«me
;

945 
ßved_simul_«me
 = 
simul_efun_ob
->
«me
;

949 
ob
->
«me
 = "";

951 #ifde‡
LPC_TO_C


952 
compûed_vîsi⁄
 = (
Õc_obje˘_t
 *)
	`lookup_obje˘_hash
(
tmp
);

956 
√w_ob
 = 
	`lﬂd_obje˘
(
tmp
, 
compûed_vîsi⁄
);

957 i‡(!
√w_ob
) {

958 
ob
->
«me
 = 
tmp
;

959 
•
--;

960 
	`îr‹
("Destruct on vital object failed:Çew copy failedÅoÑeload.");

963 
	`‰ì_obje˘
(
ob
, "vital objectÑeference");

964 i‡(
ob
 =
ma°î_ob
)

965 
	`£t_ma°î
(
√w_ob
);

966 i‡(
ob
 =
simul_efun_ob
)

967 
	`£t_simul_efun
(
√w_ob
);

972 
•
--;

973 
ob
->
«me
 = 
tmp
;

974 
tmp
 = 
√w_ob
->
«me
;

975 
√w_ob
->
«me
 = "";

976 
	`ªmove_obje˘_hash
(
ob
);

977 
√w_ob
->
«me
 = 
tmp
;

979 
	`ªmove_obje˘_hash
(
ob
);

985 
ªmoved
 = 0;

986 
µ
 = &
obj_li°
; *µ;Ö∞&(*µ)->
√xt_Æl
) {

987 i‡(*
µ
 !
ob
)

989 *
µ
 = (*µ)->
√xt_Æl
;

990 
ªmoved
 = 1;

993 
	`DEBUG_CHECK
(!
ªmoved
, "FailedÅo delete object.\n");

995 
	`ªmove_livög_«me
(
ob
);

996 #i‚de‡
NO_ENVIRONMENT


997 
ob
->
su≥r
 = 0;

998 
ob
->
√xt_öv
 = 0;

999 
ob
->
c⁄èös
 = 0;

1001 
ob
->
√xt_Æl
 = 
obj_li°_de°ru˘
;

1002 
obj_li°_de°ru˘
 = 
ob
;

1003 
	`£t_hóπ_bót
(
ob
, 0);

1004 
ob
->
Êags
 |
O_DESTRUCTED
;

1006 i‡(
ob
->
öãø˘ive
)

1007 
	`ªmove_öãø˘ive
(
ob
, 1);

1008 #ifde‡
F_SET_HIDE


1009 i‡(
ob
->
Êags
 & 
O_HIDDEN
)

1010 
num_hiddí
--;

1012 
	}
}

1017 
de°ru˘2
 
	$P1
(
obje˘_t
 *, 
ob
)

1019 #i‚de‡
NO_ADD_ACTION


1020 
£¡í˚_t
 *
s
;

1023 
	`debug
(
d_Êag
, ("De°ru˘-2 obje˘ /%†‘e‡%d)", 
ob
->
«me
, ob->
ªf
));

1034 i‡(
ob
->
¥og
->
num_v¨übÀs_tŸÆ
 > 0) {

1040 
i
;

1042 
i
 = 0; i < (Ë
ob
->
¥og
->
num_v¨übÀs_tŸÆ
; i++) {

1043 
	`‰ì_svÆue
(&
ob
->
v¨übÀs
[
i
], "destruct2");

1044 
ob
->
v¨übÀs
[
i
] = 
c⁄°0u
;

1048 #i‚de‡
NO_ADD_ACTION


1055 
s
 = 
ob
->
£¡
; s;) {

1056 
£¡í˚_t
 *
√xt
;

1058 
√xt
 = 
s
->next;

1059 
	`‰ì_£¡í˚
(
s
);

1060 
s
 = 
√xt
;

1062 
ob
->
£¡
 = 0;

1065 #ifde‡
DEBUG


1066 
tŸ_d™glög_obje˘
++;

1067 
ob
->
√xt_Æl
 = 
obj_li°_d™glög
;

1068 
obj_li°_d™glög
 = 
ob
;

1071 
	`‰ì_obje˘
(
ob
, "destruct_object");

1072 
	}
}

1088 #i‚de‡
NO_ENVIRONMENT


1089 
£nd_ßy
 
	$P3
(
obje˘_t
 *, 
ob
, *, 
ãxt
, 
¨øy_t
 *, 
avoid
)

1091 
vÆid
, 
j
;

1093 
vÆid
 = 1, 
j
 = 0; j < 
avoid
->
size
; j++) {

1094 i‡(
avoid
->
ôem
[
j
].
ty≥
 !
T_OBJECT
)

1096 i‡(
avoid
->
ôem
[
j
].
u
.
ob
 == ob) {

1097 
vÆid
 = 0;

1102 i‡(!
vÆid
)

1105 
	`ãŒ_obje˘
(
ob
, 
ãxt
, 
	`°æí
(text));

1106 
	}
}

1108 
ßy
 
	$P2
(
svÆue_t
 *, 
v
, 
¨øy_t
 *, 
avoid
)

1110 
obje˘_t
 *
ob
, *
‹igö
;

1111 *
buff
;

1113 
	`check_ÀgÆ_°rög
(
v
->
u
.
°rög
);

1114 
buff
 = 
v
->
u
.
°rög
;

1116 i‡(
cuºít_obje˘
->
Êags
 & 
O_LISTENER
 || cuºít_obje˘->
öãø˘ive
)

1117 
	`ßve_comm™d_givî
(
cuºít_obje˘
);

1119 
	`ßve_comm™d_givî
(
comm™d_givî
);

1120 i‡(
comm™d_givî
)

1121 
‹igö
 = 
comm™d_givî
;

1123 
‹igö
 = 
cuºít_obje˘
;

1126 i‡((
ob
 = 
‹igö
->
su≥r
)) {

1127 i‡(
ob
->
Êags
 & 
O_LISTENER
 || ob->
öãø˘ive
)

1128 
	`£nd_ßy
(
ob
, 
buff
, 
avoid
);

1131 
ob
 = 
‹igö
->
su≥r
->
c⁄èös
; ob; ob = ob->
√xt_öv
) {

1132 i‡(
ob
 !
‹igö
 && (ob->
Êags
 & 
O_LISTENER
 || ob->
öãø˘ive
)) {

1133 
	`£nd_ßy
(
ob
, 
buff
, 
avoid
);

1134 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1140 
ob
 = 
‹igö
->
c⁄èös
; ob; ob = ob->
√xt_öv
) {

1141 i‡(
ob
->
Êags
 & 
O_LISTENER
 || ob->
öãø˘ive
) {

1142 
	`£nd_ßy
(
ob
, 
buff
, 
avoid
);

1143 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1148 
	`ª°‹e_comm™d_givî
();

1149 
	}
}

1155 #ifde‡
F_TELL_ROOM


1156 
ãŒ_room
 
	$P3
(
obje˘_t
 *, 
room
, 
svÆue_t
 *, 
v
, 
¨øy_t
 *, 
avoid
)

1158 
obje˘_t
 *
ob
;

1159 *
buff
;

1160 
vÆid
, 
j
;

1161 
txt_buf
[
LARGEST_PRINTABLE_STRING
 + 1];

1163 
v
->
ty≥
) {

1164 
T_STRING
:

1165 
	`check_ÀgÆ_°rög
(
v
->
u
.
°rög
);

1166 
buff
 = 
v
->
u
.
°rög
;

1168 
T_OBJECT
:

1169 
buff
 = 
v
->
u
.
ob
->
«me
;

1171 
T_NUMBER
:

1172 
buff
 = 
txt_buf
;

1173 
	`•rötf
(
buff
, "%d", 
v
->
u
.
numbî
);

1175 
T_REAL
:

1176 
buff
 = 
txt_buf
;

1177 
	`•rötf
(
buff
, "%f", 
v
->
u
.
ªÆ
);

1180 
	`bad_¨gumít
(
v
, 
T_OBJECT
 | 
T_NUMBER
 | 
T_REAL
 | 
T_STRING
,

1181 2, 
F_TELL_ROOM
);

1182 
	`IF_DEBUG
(
buff
 = 0);

1185 
ob
 = 
room
->
c⁄èös
; ob; ob = ob->
√xt_öv
) {

1186 i‡(!
ob
->
öãø˘ive
 && !(ob->
Êags
 & 
O_LISTENER
))

1189 
vÆid
 = 1, 
j
 = 0; j < 
avoid
->
size
; j++) {

1190 i‡(
avoid
->
ôem
[
j
].
ty≥
 !
T_OBJECT
)

1192 i‡(
avoid
->
ôem
[
j
].
u
.
ob
 == ob) {

1193 
vÆid
 = 0;

1198 i‡(!
vÆid
)

1201 i‡(!
ob
->
öãø˘ive
) {

1202 
	`ãŒ_≈c
(
ob
, 
buff
);

1203 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1206 
	`ãŒ_obje˘
(
ob
, 
buff
, 
	`°æí
(buff));

1207 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

1211 
	}
}

1215 
shout_°rög
 
	$P1
(*, 
°r
)

1217 
obje˘_t
 *
ob
;

1219 
	`check_ÀgÆ_°rög
(
°r
);

1221 
ob
 = 
obj_li°
; ob; ob = ob->
√xt_Æl
) {

1222 i‡(!(
ob
->
Êags
 & 
O_LISTENER
Ë|| (ob =
comm™d_givî
)

1223 #i‚de‡
NO_ENVIRONMENT


1224 || !
ob
->
su≥r


1228 
	`ãŒ_obje˘
(
ob
, 
°r
, 
	`°æí
(str));

1230 
	}
}

1232 #ifde‡
F_INPUT_TO


1237 
öput_to
 
	$P4
(
svÆue_t
 *, 
fun
, , 
Êag
, , 
num_¨g
, svÆue_à*, 
¨gs
)

1239 
£¡í˚_t
 *
s
;

1240 
svÆue_t
 *
x
;

1241 
i
;

1243 i‡(!
comm™d_givî
 || comm™d_givî->
Êags
 & 
O_DESTRUCTED
)

1245 
s
 = 
	`Æloc_£¡í˚
();

1246 i‡(
	`£t_ˇŒ
(
comm™d_givî
, 
s
, 
Êag
 & ~
I_SINGLE_CHAR
)) {

1251 i‡(
num_¨g
) {

1252 
i
 = 
num_¨g
 * (
svÆue_t
);

1253 i‡((
x
 = (
svÆue_t
 *)

1254 
	`DMALLOC
(
i
, 
TAG_INPUT_TO
, "öput_to: 1")Ë=
NULL
)

1255 
	`Áèl
("Out of memory!\n");

1256 
	`mem˝y
(
x
, 
¨gs
, 
i
);

1258 
x
 = 
NULL
;

1260 
comm™d_givî
->
öãø˘ive
->
ˇºyovî
 = 
x
;

1261 
comm™d_givî
->
öãø˘ive
->
num_ˇºy
 = 
num_¨g
;

1262 i‡(
fun
->
ty≥
 =
T_STRING
) {

1263 
s
->
fun˘i⁄
.†
	`make_sh¨ed_°rög
(
fun
->
u
.
°rög
);

1264 
s
->
Êags
 = 0;

1266 
s
->
fun˘i⁄
.
f
 = 
fun
->
u
.
Â
;

1267 
fun
->
u
.
Â
->
hdr
.
ªf
++;

1268 
s
->
Êags
 = 
V_FUNCTION
;

1270 
s
->
ob
 = 
cuºít_obje˘
;

1271 
	`add_ªf
(
cuºít_obje˘
, "input_to");

1274 
	`‰ì_£¡í˚
(
s
);

1276 
	}
}

1283 #ifde‡
F_GET_CHAR


1284 
gë_ch¨
 
	$P4
(
svÆue_t
 *, 
fun
, , 
Êag
, , 
num_¨g
, svÆue_à*, 
¨gs
)

1286 
£¡í˚_t
 *
s
;

1287 
svÆue_t
 *
x
;

1288 
i
;

1290 i‡(!
comm™d_givî
 || comm™d_givî->
Êags
 & 
O_DESTRUCTED
)

1292 
s
 = 
	`Æloc_£¡í˚
();

1293 i‡(
	`£t_ˇŒ
(
comm™d_givî
, 
s
, 
Êag
 | 
I_SINGLE_CHAR
)) {

1298 i‡(
num_¨g
) {

1299 
i
 = 
num_¨g
 * (
svÆue_t
);

1300 i‡((
x
 = (
svÆue_t
 *)

1301 
	`DMALLOC
(
i
, 
TAG_TEMPORARY
, "gë_ch¨: 1")Ë=
NULL
)

1302 
	`Áèl
("Out of memory!\n");

1303 
	`mem˝y
(
x
, 
¨gs
, 
i
);

1305 
x
 = 
NULL
;

1307 
comm™d_givî
->
öãø˘ive
->
ˇºyovî
 = 
x
;

1308 
comm™d_givî
->
öãø˘ive
->
num_ˇºy
 = 
num_¨g
;

1309 i‡(
fun
->
ty≥
 =
T_STRING
) {

1310 
s
->
fun˘i⁄
.†
	`make_sh¨ed_°rög
(
fun
->
u
.
°rög
);

1311 
s
->
Êags
 = 0;

1313 
s
->
fun˘i⁄
.
f
 = 
fun
->
u
.
Â
;

1314 
fun
->
u
.
Â
->
hdr
.
ªf
++;

1315 
s
->
Êags
 = 
V_FUNCTION
;

1317 
s
->
ob
 = 
cuºít_obje˘
;

1318 
	`add_ªf
(
cuºít_obje˘
, "get_char");

1321 
	`‰ì_£¡í˚
(
s
);

1323 
	}
}

1326 
¥öt_svÆue
 
	$P1
(
svÆue_t
 *, 
¨g
)

1328 
tbuf
[2048];

1329 
Àn
;

1331 i‡(
¨g
 == 0) {

1332 
	`ãŒ_obje˘
(
comm™d_givî
, "<NULL>", 6);

1334 
¨g
->
ty≥
) {

1335 
T_STRING
:

1336 
Àn
 = 
	`SVALUE_STRLEN
(
¨g
);

1337 i‡(
Àn
 > 
LARGEST_PRINTABLE_STRING
) {

1338 
	`îr‹
("Printable stringsÜimitedÅoÜength of %d.\n",

1339 
LARGEST_PRINTABLE_STRING
);

1342 
	`ãŒ_obje˘
(
comm™d_givî
, 
¨g
->
u
.
°rög
, 
Àn
);

1344 
T_OBJECT
:

1345 
	`•rötf
(
tbuf
, "OBJ(/%s)", 
¨g
->
u
.
ob
->
«me
);

1346 
	`ãŒ_obje˘
(
comm™d_givî
, 
tbuf
, 
	`°æí
(tbuf));

1348 
T_NUMBER
:

1349 
	`•rötf
(
tbuf
, "%d", 
¨g
->
u
.
numbî
);

1350 
	`ãŒ_obje˘
(
comm™d_givî
, 
tbuf
, 
	`°æí
(tbuf));

1352 
T_REAL
:

1353 
	`•rötf
(
tbuf
, "%f", 
¨g
->
u
.
ªÆ
);

1354 
	`ãŒ_obje˘
(
comm™d_givî
, 
tbuf
, 
	`°æí
(tbuf));

1356 
T_ARRAY
:

1357 
	`ãŒ_obje˘
(
comm™d_givî
, "<ARRAY>", 
	`°æí
("<ARRAY>"));

1359 
T_MAPPING
:

1360 
	`ãŒ_obje˘
(
comm™d_givî
, "<MAPPING>", 
	`°æí
("<MAPPING>"));

1362 
T_FUNCTION
:

1363 
	`ãŒ_obje˘
(
comm™d_givî
, "<FUNCTION>", 
	`°æí
("<FUNCTION>"));

1365 #i‚de‡
NO_BUFFER_TYPE


1366 
T_BUFFER
:

1367 
	`ãŒ_obje˘
(
comm™d_givî
, "<BUFFER>", 
	`°æí
("<BUFFER>"));

1371 
	`ãŒ_obje˘
(
comm™d_givî
, "<UNKNOWN>", 
	`°æí
("<UNKNOWN>"));

1375 
	}
}

1377 
do_wrôe
 
	$P1
(
svÆue_t
 *, 
¨g
)

1379 
obje˘_t
 *
ob
 = 
comm™d_givî
;

1381 #i‚de‡
NO_SHADOWS


1382 i‡(
ob
 =0 && 
cuºít_obje˘
->
shadowög
)

1383 
ob
 = 
cuºít_obje˘
;

1384 i‡(
ob
) {

1386 
ob
->
shadowög
)

1387 
ob
 = ob->
shadowög
;

1390 i‡(!
ob
)

1391 
ob
 = 
cuºít_obje˘
;

1393 
	`ßve_comm™d_givî
(
ob
);

1394 
	`¥öt_svÆue
(
¨g
);

1395 
	`ª°‹e_comm™d_givî
();

1396 
	}
}

1403 
obje˘_t
 *
föd_obje˘
 
	$P1
(*, 
°r
)

1405 
obje˘_t
 *
ob
;

1406 
tmpbuf
[
MAX_OBJECT_NAME_SIZE
];

1408 i‡(!
	`°rù_«me
(
°r
, 
tmpbuf
, Åmpbuf))

1411 i‡((
ob
 = 
	`lookup_obje˘_hash
(
tmpbuf
))) {

1412 #ifde‡
LPC_TO_C


1413 i‡(
ob
->
Êags
 & 
O_COMPILED_PROGRAM
) {

1414 
ob
 = 
	`lﬂd_obje˘
(
tmpbuf
, (
Õc_obje˘_t
 *)ob);

1415 i‡(!
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
))

1419 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

1420 
	`lﬂd_ob_‰om_sw≠
(
ob
);

1421  
ob
;

1423 
ob
 = 
	`lﬂd_obje˘
(
tmpbuf
, 0);

1424 i‡(!
ob
 || (ob->
Êags
 & 
O_DESTRUCTED
))

1426 i‡(
ob
 && ob->
Êags
 & 
O_SWAPPED
)

1427 
	`lﬂd_ob_‰om_sw≠
(
ob
);

1428  
ob
;

1429 
	}
}

1432 
obje˘_t
 *
föd_obje˘2
 
	$P1
(*, 
°r
)

1434 
obje˘_t
 *
ob
;

1435 
p
[
MAX_OBJECT_NAME_SIZE
];

1437 i‡(!
	`°rù_«me
(
°r
, 
p
, Ö))

1440 i‡((
ob
 = 
	`lookup_obje˘_hash
(
p
))) {

1441 #ifde‡
LPC_TO_C


1442 i‡(
ob
->
Êags
 & 
O_COMPILED_PROGRAM
)

1445 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

1446 
	`lﬂd_ob_‰om_sw≠
(
ob
);

1447  
ob
;

1450 
	}
}

1452 #i‚de‡
NO_ENVIRONMENT


1459 
move_obje˘
 
	$P2
(
obje˘_t
 *, 
ôem
, obje˘_à*, 
de°
)

1461 
obje˘_t
 **
µ
, *
ob
;

1463 
	`ßve_comm™d_givî
(
comm™d_givî
);

1466 
ob
 = 
de°
; ob; ob = ob->
su≥r
)

1467 i‡(
ob
 =
ôem
)

1468 
	`îr‹
("Can't move object inside itself.\n");

1469 #i‚de‡
NO_SHADOWS


1470 i‡(
ôem
->
shadowög
)

1471 
	`îr‹
("Can't moveán objectÅhat is shadowing.\n");

1474 #i‡!
	`deföed
(
NO_RESETS
Ë&& deföed(
LAZY_RESETS
)

1475 
	`åy_ª£t
(
de°
);

1477 #i‚de‡
NO_LIGHT


1478 
	`add_light
(
de°
, 
ôem
->
tŸÆ_light
);

1480 i‡(
ôem
->
su≥r
) {

1481 
okay
 = 0;

1483 
	`ªmove_£¡
(
ôem
->
su≥r
, item);

1484 
	`ªmove_£¡
(
ôem
, iãm->
su≥r
);

1485 #i‚de‡
NO_LIGHT


1486 
	`add_light
(
ôem
->
su≥r
, -ôem->
tŸÆ_light
);

1488 
µ
 = &
ôem
->
su≥r
->
c⁄èös
; *pp;) {

1489 i‡(*
µ
 !
ôem
) {

1490 
	`ªmove_£¡
(
ôem
, *
µ
);

1491 
	`ªmove_£¡
(*
µ
, 
ôem
);

1492 
µ
 = &(*µ)->
√xt_öv
;

1498 *
µ
 = 
ôem
->
√xt_öv
;

1499 
okay
 = 1;

1501 #ifde‡
DEBUG


1502 i‡(!
okay
)

1503 
	`Áèl
("FailedÅo find object /%s in superÜist of /%s.\n",

1504 
ôem
->
«me
, iãm->
su≥r
->name);

1510 
ôem
->
√xt_öv
 = 
de°
->
c⁄èös
;

1511 
de°
->
c⁄èös
 = 
ôem
;

1512 
ôem
->
su≥r
 = 
de°
;

1514 
	`£tup_√w_comm™ds
(
de°
, 
ôem
);

1515 
	`ª°‹e_comm™d_givî
();

1516 
	}
}

1519 #i‚de‡
NO_LIGHT


1525 
add_light
 
	$P2
(
obje˘_t
 *, 
p
, , 
n
)

1527 i‡(
n
 == 0)

1529 
p
->
tŸÆ_light
 +
n
;

1530 #i‚de‡
NO_ENVIRONMENT


1531 (
p
 =Ö->
su≥r
))

1532 
p
->
tŸÆ_light
 +
n
;

1534 
	}
}

1537 
£¡í˚_t
 *
	g£¡_‰ì
 = 0;

1538 
	gtŸ_Æloc_£¡í˚
;

1540 
£¡í˚_t
 *
	$Æloc_£¡í˚
()

1542 
£¡í˚_t
 *
p
;

1544 i‡(
£¡_‰ì
 == 0) {

1545 
p
 = 
	`ALLOCATE
(
£¡í˚_t
, 
TAG_SENTENCE
, "alloc_sentence");

1546 
tŸ_Æloc_£¡í˚
++;

1548 
p
 = 
£¡_‰ì
;

1549 
£¡_‰ì
 = sít_‰ì->
√xt
;

1551 #i‚de‡
NO_ADD_ACTION


1552 
p
->
vîb
 = 0;

1554 
p
->
fun˘i⁄
.
s
 = 0;

1555 
p
->
√xt
 = 0;

1556  
p
;

1557 
	}
}

1559 #ifde‡
DEBUGMALLOC_EXTENSIONS


1560 
	$m¨k_‰ì_£¡í˚s
() {

1561 
£¡í˚_t
 *
£¡
 = 
£¡_‰ì
;

1563 
£¡
) {

1564 
	`DO_MARK
(
£¡
, 
TAG_SENTENCE
);

1571 
£¡
 = sít->
√xt
;

1573 
	}
}

1576 
‰ì_£¡í˚
 
	$P1
(
£¡í˚_t
 *, 
p
)

1578 i‡(
p
->
Êags
 & 
V_FUNCTION
) {

1579 i‡(
p
->
fun˘i⁄
.
f
)

1580 
	`‰ì_fu≈
(
p
->
fun˘i⁄
.
f
);

1581 
p
->
fun˘i⁄
.
f
 = 0;

1583 i‡(
p
->
fun˘i⁄
.
s
)

1584 
	`‰ì_°rög
(
p
->
fun˘i⁄
.
s
);

1585 
p
->
fun˘i⁄
.
s
 = 0;

1587 #i‚de‡
NO_ADD_ACTION


1588 i‡(
p
->
vîb
)

1589 
	`‰ì_°rög
(
p
->
vîb
);

1590 
p
->
vîb
 = 0;

1592 
p
->
√xt
 = 
£¡_‰ì
;

1593 
£¡_‰ì
 = 
p
;

1594 
	}
}

1596 
Áèl
 
	$P1V
(*, 
fmt
)

1598 
ö_Áèl
 = 0;

1599 
msg_buf
[2049];

1600 
va_li°
 
¨gs
;

1601 
	`V_DCL
(*
fmt
);

1603 i‡(
ö_Áèl
) {

1604 
	`debug_mesßge
("FatalÉrror while shutting down. Aborting.\n");

1606 
ö_Áèl
 = 1;

1607 
	`V_START
(
¨gs
, 
fmt
);

1608 
	`V_VAR
(*, 
fmt
, 
¨gs
);

1609 
	`v•rötf
(
msg_buf
, 
fmt
, 
¨gs
);

1610 
	`va_íd
(
¨gs
);

1611 
	`debug_mesßge
("******** FATAL ERROR: %s\nMudOS drivîáâem±ögÅÿexô gø˚fuŒy.\n", 
msg_buf
);

1612 i‡(
cuºít_fûe
)

1613 
	`debug_mesßge
("(occuªd durög compû©i⁄ o‡%†©Üöê%d)\n", 
cuºít_fûe
, 
cuºít_löe
);

1614 i‡(
cuºít_obje˘
)

1615 
	`debug_mesßge
("(cuºíàobje˘ wa†/%s)\n", 
cuºít_obje˘
->
«me
);

1617 
	`dump_åa˚
(1);

1619 #ifde‡
PACKAGE_MUDLIB_STATS


1620 
	`ßve_°©_fûes
();

1622 
	`c›y_™d_push_°rög
(
msg_buf
);

1623 
	`push_obje˘
(
comm™d_givî
);

1624 
	`push_obje˘
(
cuºít_obje˘
);

1625 
	`ß„_≠∂y_ma°î_ob
(
APPLY_CRASH
, 3);

1626 
	`debug_mesßge
("crash() in master called successfully. Aborting.\n");

1629 #ifde‡
SIGABRT


1630 
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

1632 #ifde‡
SIGILL


1633 
	`sig«l
(
SIGILL
, 
SIG_DFL
);

1635 #ifde‡
SIGIOT


1636 
	`sig«l
(
SIGIOT
, 
SIG_DFL
);

1639 #i‡!
	`deföed
(
DEBUG_NON_FATAL
Ë|| !deföed(
DEBUG
)

1640 
	`ab‹t
();

1642 
ö_Áèl
 = 0;

1643 
	}
}

1645 
	gnum_îr‹
 = 0;

1647 #ifde‡
MUDLIB_ERROR_HANDLER


1648 
	gnum_mudlib_îr‹
 = 0;

1665 
	$throw_îr‹
()

1667 i‡(((
cuºít_îr‹_c⁄ãxt
->
ßve_c•
 + 1)->
‰ameköd
 & 
FRAME_MASK
Ë=
FRAME_CATCH
) {

1668 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1669 
	`Áèl
("Throw_error failed!");

1671 
	`îr‹
("Throw withÇo catch.\n");

1672 
	}
}

1674 
debug_mesßge_wôh_loˇti⁄
 
	$P1
(*, 
îr
) {

1675 i‡(
cuºít_obje˘
 && 
cuºít_¥og
) {

1676 
	`debug_mesßge
("%sprogram: /%s, object: /%s, file: %s\n",

1677 
îr
,

1678 
cuºít_¥og
->
«me
,

1679 
cuºít_obje˘
->
«me
,

1680 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
));

1681 } i‡(
cuºít_obje˘
) {

1682 
	`debug_mesßge
("%sprogram: (none), object: /%s, file: (none)\n",

1683 
îr
,

1684 
cuºít_obje˘
->
«me
);

1686 
	`debug_mesßge
("%sprogram: (none), object: (none), file: (none)\n",

1687 
îr
);

1689 
	}
}

1691 
add_mesßge_wôh_loˇti⁄
 
	$P1
(*, 
îr
) {

1692 i‡(
cuºít_obje˘
 && 
cuºít_¥og
) {

1693 
	`add_vmesßge
(
comm™d_givî
, "%sprogram: /%s, object: /%s, file: %s\n",

1694 
îr
,

1695 
cuºít_¥og
->
«me
,

1696 
cuºít_obje˘
->
«me
,

1697 
	`gë_löe_numbî
(
pc
, 
cuºít_¥og
));

1698 } i‡(
cuºít_obje˘
) {

1699 
	`add_vmesßge
(
comm™d_givî
, "%sprogram: (none), object: /%s, file: (none)\n",

1700 
îr
,

1701 
cuºít_obje˘
->
«me
);

1703 
	`add_vmesßge
(
comm™d_givî
, "%sprogram: (none), object: (none), file: (none)\n",

1704 
îr
);

1706 
	}
}

1708 #ifde‡
MUDLIB_ERROR_HANDLER


1709 
mudlib_îr‹_h™dÀr
 
	$P2
(*, 
îr
, , 
ˇtch
) {

1710 
m≠pög_t
 *
m
;

1711 *
fûe
;

1712 
löe
;

1713 
svÆue_t
 *
mªt
;

1715 
m
 = 
	`Æloˇã_m≠pög
(6);

1716 
	`add_m≠pög_°rög
(
m
, "îr‹", 
îr
);

1717 i‡(
cuºít_¥og
)

1718 
	`add_m≠pög_mÆlo˚d_°rög
(
m
, "¥ogøm", 
	`add_¶ash
(
cuºít_¥og
->
«me
));

1719 i‡(
cuºít_obje˘
)

1720 
	`add_m≠pög_obje˘
(
m
, "obje˘", 
cuºít_obje˘
);

1721 
	`add_m≠pög_¨øy
(
m
, "åa˚", 
	`gë_svÆue_åa˚
());

1722 
	`gë_löe_numbî_öfo
(&
fûe
, &
löe
);

1723 
	`add_m≠pög_mÆlo˚d_°rög
(
m
, "fûe", 
	`add_¶ash
(
fûe
));

1724 
	`add_m≠pög_∑ú
(
m
, "löe", 
löe
);

1726 
	`push_ª„d_m≠pög
(
m
);

1727 i‡(
ˇtch
) {

1728 
STACK_INC
;

1729 *
•
 = 
c⁄°1
;

1730 
mªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_ERROR_HANDLER
,2);

1732 
mªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_ERROR_HANDLER
,1);

1734 i‡((
mªt
 =(
svÆue_t
 *)-1) || !mret) {

1735 
	`debug_mesßge
("NoÉrror handler forÉrror: ");

1736 
	`debug_mesßge_wôh_loˇti⁄
(
îr
);

1737 
	`dump_åa˚
(0);

1738 } i‡(
mªt
->
ty≥
 =
T_STRING
) {

1739 
	`debug_mesßge
("%s", 
mªt
->
u
.
°rög
);

1741 
	}
}

1744 
îr‹_h™dÀr
 
	$P1
(*, 
îr
)

1746 *
obje˘_«me
;

1749 #i‚de‡
NO_ENVIRONMENT


1750 
ª°ri˘_de°ru˘
 = 0;

1752 
num_obje˘s_this_thªad
 = 0;

1754 i‡(((
cuºít_îr‹_c⁄ãxt
->
ßve_c•
 + 1)->
‰ameköd
 & 
FRAME_MASK
Ë=
FRAME_CATCH
) {

1756 #ifde‡
LOG_CATCHES


1758 #ifde‡
MUDLIB_ERROR_HANDLER


1759 i‡(
num_mudlib_îr‹
) {

1760 
	`debug_mesßge
("Error inÉrror handler: ");

1761 
num_îr‹
++;

1763 
	`debug_mesßge_wôh_loˇti⁄
(
îr
);

1764 (Ë
	`dump_åa˚
(0);

1765 #ifde‡
MUDLIB_ERROR_HANDLER


1766 
num_îr‹
--;

1767 
num_mudlib_îr‹
 = 0;

1769 i‡(!
max_evÆ_îr‹
 && !
too_dìp_îr‹
) {

1770 
num_mudlib_îr‹
++;

1771 
	`mudlib_îr‹_h™dÀr
(
îr
, 1);

1772 
num_mudlib_îr‹
--;

1777 
	`‰ì_svÆue
(&
ˇtch_vÆue
, "caughtÉrror");

1778 
ˇtch_vÆue
.
ty≥
 = 
T_STRING
;

1779 
ˇtch_vÆue
.
subty≥
 = 
STRING_MALLOC
;

1780 
ˇtch_vÆue
.
u
.
°rög
 = 
	`°rög_c›y
(
îr
, "caughtÉrror");

1781 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1782 
	`Áèl
("Catch()Üongjump failed");

1784 
too_dìp_îr‹
 = 
max_evÆ_îr‹
 = 0;

1785 i‡(
num_îr‹
 > 0) {

1787 
	`debug_mesßge
("Eº‹ '%s' whûêåyögÅÿ¥öàîr‹Åø˚ --Åø˚ suµªs£d.\n", 
îr
);

1788 i‡(
cuºít_îr‹_c⁄ãxt
)

1789 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1790 
	`Áèl
("LONGJMP failed orÇoÉrror context forÉrror.\n");

1792 
num_îr‹
++;

1793 #ifde‡
PACKAGE_MUDLIB_STATS


1794 i‡(
cuºít_obje˘
)

1795 
	`add_îr‹s
(&
cuºít_obje˘
->
°©s
, 1);

1797 #ifde‡
MUDLIB_ERROR_HANDLER


1798 i‡(!
max_evÆ_îr‹
 && !
too_dìp_îr‹
) {

1799 i‡(
num_mudlib_îr‹
) {

1800 
	`debug_mesßge
("Error inÉrror handler: ");

1801 
	`debug_mesßge_wôh_loˇti⁄
(
îr
);

1802 (Ë
	`dump_åa˚
(0);

1803 
num_mudlib_îr‹
 = 0;

1805 
num_mudlib_îr‹
++;

1806 
num_îr‹
--;

1807 
	`mudlib_îr‹_h™dÀr
(
îr
, 0);

1808 
num_mudlib_îr‹
--;

1809 
num_îr‹
++;

1815 
	`debug_mesßge_wôh_loˇti⁄
(
îr
 + 1);

1816 #i‡
	`deföed
(
DEBUG
Ë&& deföed(
TRACE_CODE
)

1817 
obje˘_«me
 = 
	`dump_åa˚
(1);

1819 
obje˘_«me
 = 
	`dump_åa˚
(0);

1821 i‡(
obje˘_«me
) {

1822 
obje˘_t
 *
ob
;

1824 
ob
 = 
	`föd_obje˘2
(
obje˘_«me
);

1825 i‡(!
ob
) {

1826 i‡(
comm™d_givî
)

1827 
	`add_vmesßge
(
comm™d_givî
,

1829 
obje˘_«me
);

1830 
	`debug_mesßge
("error whenÉxecutingÖrogram in destroyed object /%s\n",

1831 
obje˘_«me
);

1834 i‡(
comm™d_givî
 && comm™d_givî->
öãø˘ive
) {

1835 #i‚de‡
NO_WIZARDS


1836 i‡((
comm™d_givî
->
Êags
 & 
O_IS_WIZARD
Ë|| !
	`°æí
(
DEFAULT_ERROR_MESSAGE
)) {

1838 
	`add_mesßge_wôh_loˇti⁄
(
îr
 + 1);

1839 #i‚de‡
NO_WIZARDS


1841 
	`add_vmesßge
(
comm™d_givî
, "%s\n", 
DEFAULT_ERROR_MESSAGE
);

1845 i‡(
cuºít_hóπ_bót
) {

1846 
hb_mesßge
[] = "MudOS driverÅells you: You haveÇo heart beat!\n";

1847 
	`£t_hóπ_bót
(
cuºít_hóπ_bót
, 0);

1848 
	`debug_mesßge
("Hóπ bóàö /%†tu∫ed off.\n", 
cuºít_hóπ_bót
->
«me
);

1849 i‡(
cuºít_hóπ_bót
->
öãø˘ive
)

1850 
	`add_mesßge
(
cuºít_hóπ_bót
, 
hb_mesßge
, (hb_message)-1);

1852 
cuºít_hóπ_bót
 = 0;

1855 
num_îr‹
--;

1856 i‡(
cuºít_îr‹_c⁄ãxt
)

1857 
	`LONGJMP
(
cuºít_îr‹_c⁄ãxt
->
c⁄ãxt
, 1);

1858 
	`Áèl
("LONGJMP failed orÇoÉrror context forÉrror.\n");

1859 
	}
}

1861 
îr‹_√eds_‰ì
 
	$P1
(*, 
s
)

1863 
îr_buf
[2048];

1864 
	`°∫˝y
(
îr_buf
 + 1, 
s
, 2047);

1865 
îr_buf
[0] = '*';

1866 
îr_buf
[2047] = '\0';

1867 
	`FREE_MSTR
(
s
);

1869 
	`îr‹_h™dÀr
(
îr_buf
);

1870 
	}
}

1872 
îr‹
 
	$P1V
(*, 
fmt
)

1874 
îr_buf
[2048];

1875 
va_li°
 
¨gs
;

1876 
	`V_DCL
(*
fmt
);

1878 
	`V_START
(
¨gs
, 
fmt
);

1879 
	`V_VAR
(*, 
fmt
, 
¨gs
);

1880 
	`v•rötf
(
îr_buf
 + 1, 
fmt
, 
¨gs
);

1881 
	`va_íd
(
¨gs
);

1882 
îr_buf
[0] = '*';

1884 
	`îr‹_h™dÀr
(
îr_buf
);

1885 
	}
}

1890 
	gMudOS_is_beög_shut_down
;

1892 #ifde‡
SIGNAL_FUNC_TAKES_INT


1893 
°¨tshutdownMudOS
 
	$P1
(, 
sig
)

1895 
	$°¨tshutdownMudOS
()

1898 
MudOS_is_beög_shut_down
 = 1;

1899 
	}
}

1906 
shutdownMudOS
 
	$P1
(, 
exô_code
)

1908 
i
;

1910 
	`shout_°rög
("MudOS driver shouts: shutting down immediately.\n");

1911 #ifde‡
PACKAGE_MUDLIB_STATS


1912 
	`ßve_°©_fûes
();

1914 #ifde‡
PACKAGE_DB


1915 
	`db_˛ónup
();

1917 
	`ùc_ªmove
();

1918 #i‡
	`deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

1919 
i
 = 0; i < 
max_Õc_socks
; i++) {

1920 i‡(
Õc_socks
[
i
].
°©e
 =
STATE_CLOSED
) ;

1921 
	`OS_sockë_˛o£
(
Õc_socks
[
i
].
fd
Ë=-1 && 
î∫o
 =
EINTR
)

1925 
i
 = 0; i < 
max_u£rs
; i++) {

1926 i‡(
Æl_u£rs
[
i
] && !◊Œ_u£rs[i]->
iÊags
 & 
CLOSING
))

1927 
	`Êush_mesßge
(
Æl_u£rs
[
i
]);

1929 #ifde‡
LATTICE


1930 
	`sig«l
(
SIGUSR1
, 
SIG_IGN
);

1931 
	`sig«l
(
SIGTERM
, 
SIG_IGN
);

1932 
	`sig«l
(
SIGINT
, 
SIG_IGN
);

1933 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

1934 
	`sig«l
(
SIGALRM
, 
SIG_IGN
);

1936 
	`u∆ök_sw≠_fûe
();

1937 #ifde‡
PROFILING


1938 
	`m⁄ô‹
(0, 0, 0, 0, 0);

1940 
	`exô
(
exô_code
);

1941 
	}
}

1947 
¶ow_shut_down
 
	$P1
(, 
möuãs
)

1952 
svÆue_t
 *
amo
;

1954 
	`push_numbî
(
möuãs
);

1955 
amo
 = 
	`≠∂y_ma°î_ob
(
APPLY_SLOW_SHUTDOWN
, 1);

1957 i‡(!
	`MASTER_APPROVED
(
amo
))

1959 
obje˘_t
 *
ßve_cuºít
 = 
cuºít_obje˘
;

1961 
cuºít_obje˘
 = 0;

1962 
	`ßve_comm™d_givî
(0);

1963 
	`shout_°rög
("MudOS driver shouts: Out of memory.\n");

1964 
	`ª°‹e_comm™d_givî
();

1965 
cuºít_obje˘
 = 
ßve_cuºít
;

1966 #ifde‡
SIGNAL_FUNC_TAKES_INT


1967 
	`°¨tshutdownMudOS
(1);

1969 
	`°¨tshutdownMudOS
();

1973 
	}
}

1975 
do_mesßge
 
	$P5
(
svÆue_t
 *, 
˛ass
, svÆue_à*, 
msg
, 
¨øy_t
 *, 
sc›e
,áºay_à*, 
ex˛ude
, , 
ªcur£
)

1977 
i
, 
j
, 
vÆid
;

1978 
obje˘_t
 *
ob
;

1980 
i
 = 0; i < 
sc›e
->
size
; i++) {

1981 
sc›e
->
ôem
[
i
].
ty≥
) {

1982 
T_STRING
:

1983 
ob
 = 
	`föd_obje˘
(
sc›e
->
ôem
[
i
].
u
.
°rög
);

1984 i‡(!
ob
 || !
	`obje˘_visibÀ
(ob))

1987 
T_OBJECT
:

1988 
ob
 = 
sc›e
->
ôem
[
i
].
u
.ob;

1993 i‡(
ob
->
Êags
 & 
O_LISTENER
 || ob->
öãø˘ive
) {

1994 
vÆid
 = 1, 
j
 = 0; j < 
ex˛ude
->
size
; j++) {

1995 i‡(
ex˛ude
->
ôem
[
j
].
ty≥
 !
T_OBJECT
)

1997 i‡(
ex˛ude
->
ôem
[
j
].
u
.
ob
 == ob) {

1998 
vÆid
 = 0;

2002 i‡(
vÆid
) {

2003 
	`push_svÆue
(
˛ass
);

2004 
	`push_svÆue
(
msg
);

2005 
	`≠∂y
(
APPLY_RECEIVE_MESSAGE
, 
ob
, 2, 
ORIGIN_DRIVER
);

2008 #i‚de‡
NO_ENVIRONMENT


2009 i‡(
ªcur£
) {

2010 
¨øy_t
 *
tmp
;

2012 
tmp
 = 
	`Æl_övít‹y
(
ob
, 1);

2013 
	`do_mesßge
(
˛ass
, 
msg
, 
tmp
, 
ex˛ude
, 0);

2014 
	`‰ì_¨øy
(
tmp
);

2018 
	}
}

2020 #i‡!
deföed
(
NO_RESETS
Ë&& deföed(
LAZY_RESETS
)

2021 
åy_ª£t
 
	$P1
(
obje˘_t
 *, 
ob
)

2023 i‡((
ob
->
√xt_ª£t
 < 
cuºít_time
Ë&& !(ob->
Êags
 & 
O_RESET_STATE
)) {

2024 
	`debug
(
d_Êag
, ("÷azyËRESET /%s\n", 
ob
->
«me
));

2027 
ob
->
Êags
 |
O_RESET_STATE
;

2028 
	`ª£t_obje˘
(
ob
);

2030 
	}
}

2033 #i‚de‡
NO_ENVIRONMENT


2034 #ifde‡
F_FIRST_INVENTORY


2035 
obje˘_t
 *
fú°_övít‹y
 
	$P1
(
svÆue_t
 *, 
¨g
)

2037 
obje˘_t
 *
ob
;

2039 i‡(
¨g
->
ty≥
 =
T_STRING
) {

2040 
ob
 = 
	`föd_obje˘
(
¨g
->
u
.
°rög
);

2041 i‡(
ob
 && !
	`obje˘_visibÀ
(ob))

2042 
ob
 = 0;

2044 
ob
 = 
¨g
->
u
.ob;

2045 i‡(
ob
 == 0)

2046 
	`bad_¨gumít
(
¨g
, 
T_STRING
 | 
T_OBJECT
, 1, 
F_FIRST_INVENTORY
);

2047 
ob
 = ob->
c⁄èös
;

2049 #ifde‡
F_SET_HIDE


2050 
ob
 && (ob->
Êags
 & 
O_HIDDEN
Ë&& !
	`obje˘_visibÀ
(ob))

2051 
ob
 = ob->
√xt_öv
;

2054  
ob
;

2055 
	}
}

	@simulate.h

1 #i‚de‡
SIMULATE_H


2 
	#SIMULATE_H


	)

7 
	#V_SHORT
 1

	)

8 
	#V_NOSPACE
 2

	)

9 
	#V_FUNCTION
 4

	)

12 
	#EndOf
(
x
Ë(x + (x)/(x[0]))

	)

18 
obje˘_t
 *
obj_li°
;

19 
obje˘_t
 *
obj_li°_de°ru˘
;

20 
obje˘_t
 *
cuºít_obje˘
;

21 
obje˘_t
 *
comm™d_givî
;

22 
obje˘_t
 *
cuºít_öãø˘ive
;

23 *
öhîô_fûe
;

24 
tŸ_Æloc_£¡í˚
;

25 
MudOS_is_beög_shut_down
;

26 #ifde‡
LPC_TO_C


27 
compûe_to_c
;

28 
FILE
 *
compû©i⁄_ouçut_fûe
;

29 *
compû©i⁄_idít
;

31 #ifde‡
DEBUG


32 
obje˘_t
 *
obj_li°_d™glög
;

33 
tŸ_d™glög_obje˘
;

36 *
°Ωut
 
PROT
((*, *, *));

37 *
°Ωut_öt
 
PROT
((*, *, ));

38 
CDECL
 
debug_Áèl
 
PROT1V
(*);

39 
CDECL
 
Áèl
 
PROT1V
(*);

40 
CDECL
 
îr‹
 
PROT1V
(*);

41 
INLINE
 
check_ÀgÆ_°rög
 
PROT
((*));

42 #i‚de‡
NO_LIGHT


43 
add_light
 
PROT
((
obje˘_t
 *, ));

45 
‰ì_£¡í˚
 
PROT
((
£¡í˚_t
 *));

47 
£¡í˚_t
 *
Æloc_£¡í˚
 
PROT
(());

48 
öput_to
 
PROT
((
svÆue_t
 *, , , svalue_t *));

49 
gë_ch¨
 
PROT
((
svÆue_t
 *, , , svalue_t *));

51 
°rù_«me
 
PROT
((*, *, ));

52 *
check_«me
 
PROT
((*));

53 #ifde‡
LPC_TO_C


54 
	#lﬂd_obje˘
(
x
, 
y
Ë
	`öt_lﬂd_obje˘
(x, y)

	)

55 
obje˘_t
 *
öt_lﬂd_obje˘
 
PROT
((*, 
Õc_obje˘_t
 *));

57 
	#lﬂd_obje˘
(
x
, 
y
Ë
	`öt_lﬂd_obje˘
(x)

	)

58 
obje˘_t
 *
öt_lﬂd_obje˘
 
PROT
((*));

60 
obje˘_t
 *
˛⁄e_obje˘
 
PROT
((*, ));

61 
obje˘_t
 *
ívú⁄mít
 
PROT
((
svÆue_t
 *));

62 
obje˘_t
 *
fú°_övít‹y
 
PROT
((
svÆue_t
 *));

63 
obje˘_t
 *
obje˘_¥e£¡
 
PROT
((
svÆue_t
 *, object_t *));

64 
obje˘_t
 *
föd_obje˘
 
PROT
((*));

65 
obje˘_t
 *
föd_obje˘2
 
PROT
((*));

66 
move_obje˘
 
PROT
((
obje˘_t
 *, object_t *));

67 
de°ru˘_obje˘
 
PROT
((
obje˘_t
 *));

68 
de°ru˘2
 
PROT
((
obje˘_t
 *));

70 
¥öt_svÆue
 
PROT
((
svÆue_t
 *));

71 
do_wrôe
 
PROT
((
svÆue_t
 *));

72 
do_mesßge
 
PROT
((
svÆue_t
 *, svÆue_à*, 
¨øy_t
 *,árray_t *, ));

73 
ßy
 
PROT
((
svÆue_t
 *, 
¨øy_t
 *));

74 
ãŒ_room
 
PROT
((
obje˘_t
 *, 
svÆue_t
 *, 
¨øy_t
 *));

75 
shout_°rög
 
PROT
((*));

77 
îr‹_√eds_‰ì
 
PROT
((*));

78 
throw_îr‹
 
PROT
(());

79 
îr‹_h™dÀr
 
PROT
((*));

81 #ifde‡
SIGNAL_FUNC_TAKES_INT


82 
°¨tshutdownMudOS
 
PROT
(());

84 
°¨tshutdownMudOS
 
PROT
(());

86 
shutdownMudOS
 
PROT
(());

87 
¶ow_shut_down
 
PROT
(());

89 #ifde‡
DEBUGMALLOC_EXTENSIONS


90 
m¨k_‰ì_£¡í˚s
 
PROT
(());

	@smalloc.c

16 
	#IN_MALLOC_WRAPPER


	)

17 
	#NO_OPCODES


	)

18 
	~"°d.h
"

19 
	~"fûe_ö˛.h
"

20 
	~"Õc_ö˛.h
"

21 
	~"simuœã.h
"

22 
	~"comm.h
"

24 #i‡
deföed
(
•¨c
)

25 
	#MALLOC_ALIGN
 8

	)

27 
	#MALLOC_ALIGN
 4

	)

30 
	#POINTER
 *

	)

31 
	#FREE_RETURN_TYPE
 

	)

32 
	#FREE_RETURN
 ;

	)

33 
	#SFREE_RETURN_TYPE
 
FREE_RETURN_TYPE


	)

34 
	#SFREE_RETURN
 
FREE_RETURN


	)

36 
	#FIT_STYLE_FAST_FIT


	)

38 #unde‡
LARGE_TRACE


40 
	#Áke
(
s
)

	)

42 
	#SMALL_BLOCK_MAX_BYTES
 32

	)

43 
	#SMALL_CHUNK_SIZE
 0x4000

	)

44 
	#CHUNK_SIZE
 0x40000

	)

46 
	#SMALL_BLOCK_MAX
 (
SMALL_BLOCK_MAX_BYTES
/
SIZEOF_INT
)

	)

48 
	#PREV_BLOCK
 0x80000000

	)

49 
	#THIS_BLOCK
 0x40000000

	)

50 
	#NO_REF
 0x20000000

	)

51 
	#MASK
 0x0FFFFFFF

	)

53 
	#MAGIC
 0x17952932

	)

57 
	tu
;

59 
u
 *
	gœ°_smÆl_chunk
 = 0;

60 
u
 *
	gsÊèbÀ
[
SMALL_BLOCK_MAX
] =

62 
u
 *
	g√xt_unu£d
 = 0;

63 
u
 
	gunu£d_size
 = 0;

67 #i‚de‡
FIT_STYLE_FAST_FIT


68 
u
 *
	g‰ì_li°
 = 0;

70 
u
 *
	g°¨t_√xt_block
 = 0;

74 
	gsmÆl_cou¡
[
SMALL_BLOCK_MAX
] =

76 
	gsmÆl_tŸÆ
[
SMALL_BLOCK_MAX
] =

78 
	gsmÆl_max
[
SMALL_BLOCK_MAX
] =

80 
	gsmÆl_‰ì
[
SMALL_BLOCK_MAX
] =

84 
	mcou¡î
, 
	msize
;

85 } 
	tt_°©
;

87 
	#cou¡
(
a
,
b
Ë{á.
size
+=(b); i‡((b)<0Ë--a.
cou¡î
; ++a.cou¡î; }

	)

88 
	#cou¡_up
(
a
,
b
Ë{á.
size
+=(b); ++a.
cou¡î
; }

	)

89 
	#cou¡_back
(
a
,
b
Ë{á.
size
-=(b); --a.
cou¡î
; }

	)

92 
	gdebugmÆloc
 = 0;

99 *
œrge_mÆloc
 
PROT
((
u
, ));

100 
œrge_‰ì
 
PROT
((*));

101 
mÆloc_size_mask
 
PROT
(());

102 
mÆlo˚d_size
 
PROT
((
POINTER
));

103 
show_block
 
PROT
((
u
 *));

104 
ªmove_‰om_‰ì_li°
 
PROT
((
u
 *));

105 
add_to_‰ì_li°
 
PROT
((
u
 *));

106 
buûd_block
 
PROT
((
u
 *, u));

107 
m¨k_block
 
PROT
((
u
 *));

108 *
esbrk
 
PROT
((
u
));

109 
ªs‹t_‰ì_li°
 
PROT
(());

110 #ifde‡
DEBUG


111 
wÆk_√w_smÆl_mÆlo˚d
 
PROT
(((*) ()));

114 
	#s_size_±r
(
p
Ë’)

	)

115 
	#s_√xt_±r
(
p
Ë((
u
 **Ë’+1))

	)

117 
t_°©
 
	gsmÆl_Æloc_°©
 =

119 
t_°©
 
	gsmÆl_‰ì_°©
 =

121 
t_°©
 
	gsmÆl_chunk_°©
 =

124 
POINTER
 
CDECL
 
smÆloc_mÆloc
 
	$P1
(
size_t
, 
size
)

127 
u
 *
ãmp
;

129 
	`DEBUG_CHECK
(
size
 == 0, "Malloc size 0.\n");

130 i‡(
size
 > 
SMALL_BLOCK_MAX_BYTES
)

131  
	`œrge_mÆloc
(
size
, 0);

133 #i‡
SIZEOF_PTR
 > 
SIZEOF_INT


134 i‡(
size
 < 
SIZEOF_PTR
)

135 
size
 = 
SIZEOF_PTR
;

138 
size
 = (size + 7) & ~3;

139 
	#SIZE_INDEX
(
u_¨øy
, 
size
Ë(*(
u
*Ë((*)u_¨øy-8+size))

	)

140 
	#SIZE_PNT_INDEX
(
u_¨øy
, 
size
Ë(*(
u
**)((*)u_¨øy-8+size))

	)

142 
	`cou¡_up
(
smÆl_Æloc_°©
, 
size
);

144 
	`SIZE_INDEX
(
smÆl_cou¡
, 
size
) += 1;

145 
	`SIZE_INDEX
(
smÆl_tŸÆ
, 
size
) += 1;

146 i‡(
	`SIZE_INDEX
(
smÆl_cou¡
, 
size
Ë> SIZE_INDEX(
smÆl_max
, size))

147 
	`SIZE_INDEX
(
smÆl_max
, 
size
ËSIZE_INDEX(
smÆl_cou¡
, size);

149 i‡(
ãmp
 = 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
size
)) {

151 
	`cou¡_back
(
smÆl_‰ì_°©
, 
size
);

152 
ãmp
++;

153 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
size
Ë*(
u
 **Ë
ãmp
;

154 
	`Áke
("From freeÜist.");

155  (*Ë
ãmp
;

157 i‡(
unu£d_size
 < 
size
) {

161 i‡(
unu£d_size
) {

162 
	`cou¡_up
(
smÆl_‰ì_°©
, 
unu£d_size
);

163 *
	`s_size_±r
(
√xt_unu£d
Ë
unu£d_size
 >> 2;

164 *
	`s_√xt_±r
(
√xt_unu£d
Ë
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
unu£d_size
);

165 
	`SIZE_PNT_INDEX
(
sÊèbÀ
, 
unu£d_size
Ë
√xt_unu£d
;

168 
	`Áke
("AllocatingÇew small chunk.");

169 
√xt_unu£d
 = (
u
 *Ë
	`œrge_mÆloc
(
SMALL_CHUNK_SIZE
 + 
SIZEOF_PTR
, 1);

170 i‡(
√xt_unu£d
 == 0)

173 *
√xt_unu£d
 = (
u
Ë
œ°_smÆl_chunk
;

174 
œ°_smÆl_chunk
 = 
√xt_unu£d
++;

175 
	`cou¡_up
(
smÆl_chunk_°©
, 
SMALL_CHUNK_SIZE
 + 
SIZEOF_PTR
);

176 
	`cou¡_up
(
smÆl_Æloc_°©
, 
SIZEOF_PTR
);

177 
unu£d_size
 = 
SMALL_CHUNK_SIZE
;

179 
	`Áke
("Allocated from chunk.");

181 
ãmp
 = (
u
 *Ë
	`s_√xt_±r
(
√xt_unu£d
);

182 *
	`s_size_±r
(
√xt_unu£d
Ë
size
 >> 2;

183 
unu£d_size
 -
size
;

184 i‡(
unu£d_size
 < (
SIZEOF_INT
 + 
SIZEOF_PTR
)) {

185 
	`cou¡_up
(
smÆl_Æloc_°©
, 
unu£d_size
);

186 i‡((
size
 + 
unu£d_size
Ë< (
SMALL_BLOCK_MAX_BYTES
 + 
SIZEOF_INT
)) {

190 
size
 +
unu£d_size
;

191 *
	`s_size_±r
(
√xt_unu£d
Ë
size
 >> 2;

193 
unu£d_size
 = 0;

195 
√xt_unu£d
 +
size
 >> 2;

197 
	`Áke
("allocation from chunk successful\n");

198  (*Ë
ãmp
;

199 
	}
}

201 #ifde‡
DEBUG


202 *
	gdebug_‰ì_±r
;

205 
	$mÆloc_size_mask
()

207  
MASK
;

208 
	}
}

210 
mÆlo˚d_size
 
	$P1
(
POINTER
, 
±r
)

212  (Ë(((
u
 *Ë
±r
)[-1] & 
MASK
);

213 
	}
}

215 
SFREE_RETURN_TYPE
 
CDECL
 
smÆloc_‰ì
 
	$P1
(
POINTER
, 
±r
)

217 
u
 *
block
;

218 
u
 
i
;

220 i‡(!
±r
)

221 
SFREE_RETURN
;

223 #ifde‡
DEBUG


224 
debug_‰ì_±r
 = 
±r
;

226 
block
 = (
u
 *Ë
±r
;

227 
block
 -= 1;

228 
i
 = (*
	`s_size_±r
(
block
Ë& 
MASK
);

229 i‡((*
	`s_size_±r
(
block
Ë& 
MASK
Ë> 
SMALL_BLOCK_MAX
 + 1) {

230 
	`Áke
("sfree callsÜarge_free");

231 
	`œrge_‰ì
(
±r
);

232 
SFREE_RETURN


234 
	`cou¡_back
(
smÆl_Æloc_°©
, 
i
 << 2);

235 
	`cou¡_up
(
smÆl_‰ì_°©
, 
i
 << 2);

236 
i
 -= 2;

237 *
	`s_√xt_±r
(
block
Ë
sÊèbÀ
[
i
];

238 
sÊèbÀ
[
i
] = 
block
;

239 
smÆl_‰ì
[
i
] += 1;

240 
	`Áke
("Freed");

241 
SFREE_RETURN


242 
	}
}

248 
	#BEST_FIT
 0

	)

249 
	#FIRST_FIT
 1

	)

250 
	#HYBRID
 2

	)

252 
	#fô_°yÀ
 
BEST_FIT


	)

254 #i‚de‡
fô_°yÀ


255 
	gfô_°yÀ
 = 
BEST_FIT
;

258 
	#l_size_±r
(
p
Ë’)

	)

259 
	#l_√xt_±r
(
p
Ë(*((
u
 **Ë’+1)))

	)

260 
	#l_¥ev_±r
(
p
Ë(*((
u
 **Ë((u **)’+1)+1)))

	)

261 
	#l_√xt_block
(
p
Ë’ + (
MASK
 & (*’))Ë)

	)

262 
	#l_¥ev_block
(
p
Ë’ - (
MASK
 & (*’-1))Ë)

	)

263 
	#l_¥ev_‰ì
(
p
Ë(!(*∞& 
PREV_BLOCK
))

	)

264 
	#l_√xt_‰ì
(
p
Ë(!(*
	`l_√xt_block
’Ë& 
THIS_BLOCK
))

	)

266 
show_block
 
	$P1
(
u
 *, 
±r
)

268 
	`¥ötf
("[%c%d: %d] ", (*
±r
 & 
THIS_BLOCK
 ? '+' : '-'),

269 (Ë
±r
, ()(*±∏& 
MASK
));

270 
	}
}

272 #ifde‡
FIT_STYLE_FAST_FIT


274 #i‡
deföed
(
©¨i°
Ë|| deföed (
sun
Ë|| deföed(
AMIGA
)

276 
SIGNED
 
	tbÆ™˚_t
;

278 
	#BALANCE_T_BITS
 8

	)

280 
	tbÆ™˚_t
;

282 
	#BALANCE_T_BITS
 16

	)

284 #i‡(
deföed
(
©¨i°
Ë&& !deföed(
ATARI_TT
)Ë|| deföed(
•¨c
Ë|| deföed(
AMIGA
)

286 
	#NO_BARREL_SHIFT


	)

289 
	s‰ì_block_s
 {

290 
u
 
	msize
;

291 
‰ì_block_s
 *
	m∑ª¡
, *
	mÀ·
, *
	mright
;

292 
bÆ™˚_t
 
	mbÆ™˚
;

293 
	mÆign_dummy
;

294 } 
	t‰ì_block_t
;

299 
‰ì_block_t
 
dummy2
;

301 
‰ì_block_t
 
	gdummy
 = {

303  &
dummy2
,

309 
‰ì_block_t
 
	gdummy2
 =

313  &
dummy
,

318 
‰ì_block_t
 *
	g‰ì_åì
 = &
dummy2
;

320 #ifde‡
DEBUG_AVL


321 
	göc⁄si°ícy
 = 0;

323 
check_avl
 
	$P2
(
‰ì_block_t
 *, 
∑ª¡
, fªe_block_à*, 
p
)

325 
À·
, 
right
;

327 i‡(!
p
)

329 
À·
 = 
	`check_avl
(
p
,Ö->left);

330 
right
 = 
	`check_avl
(
p
,Ö->right);

331 i‡(
p
->
bÆ™˚
 !
right
 - 
À·
 ||Ö->balance < -1 ||Ö->balance > 1) {

332 
	`¥ötf
("Inconsistency inávlÇode!\n");

333 
	`¥ötf
("node:%x\n", 
p
);

334 
	`¥ötf
("size: %d\n", 
p
->
size
);

335 
	`¥ötf
("À·Çode:%x\n", 
p
->
À·
);

336 
	`¥ötf
("À· height: %d\n", 
À·
);

337 
	`¥ötf
("righànode:%x\n", 
p
->
right
);

338 
	`¥ötf
("righàheight: %d\n", 
right
);

339 
	`¥ötf
("ÆÀged bÆ™˚: %d\n", 
p
->
bÆ™˚
);

340 
öc⁄si°ícy
 = 1;

342 i‡(
p
->
∑ª¡
 !=Öarent) {

343 
	`¥ötf
("Inconsistency inávlÇode!\n");

344 
	`¥ötf
("node:%x\n", 
p
);

345 
	`¥ötf
("size: %d\n", 
p
->
size
);

346 
	`¥ötf
("∑ª¡: %x\n", 
∑ª¡
);

347 
	`¥ötf
("∑ª¡ size: %d\n", 
∑ª¡
->
size
);

348 
	`¥ötf
("ÆÀgedÖ¨ít: %x\n", 
p
->
∑ª¡
);

349 
	`¥ötf
("ÆÀgedÖ¨íàsize: %d\n", 
p
->
∑ª¡
->
size
);

350 
	`¥ötf
("À· height: %d\n", 
À·
);

351 
	`¥ötf
("righàheight: %d\n", 
right
);

352 
	`¥ötf
("ÆÀged bÆ™˚: %d\n", 
p
->
bÆ™˚
);

353 
öc⁄si°ícy
 = 1;

355  
À·
 > 
right
 ?Üeft + 1 :Ñight + 1;

356 
	}
}

359 
	$do_check_avl
()

361 
	`check_avl
(0, 
‰ì_åì
);

362 i‡(
öc⁄si°ícy
) {

363 
	`fÊush
(
°dîr
);

364 
	`fÊush
(
°dout
);

365 
	`Áèl
("Inconsistency could crashÅhe driver\n");

368 
	}
}

371 
t_°©
 
	gœrge_‰ì_°©
;

372 
ªmove_‰om_‰ì_li°
 
	$P1
(
u
 *, 
±r
)

374 
‰ì_block_t
 *
p
, *
q
, *
r
, *
s
, *
t
;

376 
	`Áke
((
	`do_check_avl
(), "remove_from_free_list called"));

377 
p
 = (
‰ì_block_t
 *Ë(
±r
 + 1);

378 
	`cou¡_back
(
œrge_‰ì_°©
, 
p
->
size
 << 2);

379 #ifde‡
DEBUG_AVL


380 
	`¥ötf
("node:%x\n", 
p
);

381 
	`¥ötf
("size:%d\n", 
p
->
size
);

383 i‡(
p
->
À·
) {

384 i‡(
q
 = 
p
->
right
) {

385 
	`Áke
("two childs");

386 
s
 = 
q
;

387 ; 
r
 = 
q
, q =Ñ->
À·
;);

388 i‡(
r
 =
s
) {

389 
r
->
À·
 = 
s
 = 
p
->left;

390 
s
->
∑ª¡
 = 
r
;

391 i‡(
r
->
∑ª¡
 = 
s
 = 
p
->parent) {

392 i‡(
p
 =
s
->
À·
) {

393 
s
->
À·
 = 
r
;

395 
s
->
right
 = 
r
;

398 
‰ì_åì
 = 
r
;

400 
r
->
bÆ™˚
 = 
p
->balance;

401 
p
 = 
r
;

402 
bÆ™˚_right
;

404 
t
 = 
r
->
∑ª¡
;

405 i‡(
t
->
À·
 = 
s
 = 
r
->
right
) {

406 
s
->
∑ª¡
 = 
t
;

408 
r
->
bÆ™˚
 = 
p
->balance;

409 
r
->
À·
 = 
s
 = 
p
->left;

410 
s
->
∑ª¡
 = 
r
;

411 
r
->
right
 = 
s
 = 
p
->right;

412 
s
->
∑ª¡
 = 
r
;

413 i‡(
r
->
∑ª¡
 = 
s
 = 
p
->parent) {

414 i‡(
p
 =
s
->
À·
) {

415 
s
->
À·
 = 
r
;

417 
s
->
right
 = 
r
;

420 
‰ì_åì
 = 
r
;

422 
p
 = 
t
;

423 
bÆ™˚_À·
;

431 
	`Áke
("noÑight child, butÜeft child");

432 
s
 = 
p
;

433 
p
 = 
s
->
∑ª¡
;

434 
r
 = 
s
->
À·
;

435 
r
->
∑ª¡
 = 
p
;

436 i‡(
s
 =
p
->
À·
) {

437 
p
->
À·
 = 
r
;

438 
bÆ™˚_À·
;

440 
p
->
right
 = 
r
;

441 
bÆ™˚_right
;

449 
	`Áke
("noÜeft child");

450 
s
 = 
p
;

451 
p
 = 
s
->
∑ª¡
;

452 i‡(
q
 = 
r
 = 
s
->
right
) {

453 
r
->
∑ª¡
 = 
p
;

455 i‡(
s
 =
p
->
À·
) {

456 
p
->
À·
 = 
r
;

457 
bÆ™˚_À·
;

459 
p
->
right
 = 
r
;

460 
bÆ™˚_right
;

463 
bÆ™˚_q
:

464 
r
 = 
p
;

465 
p
 = 
q
;

466 i‡(
r
 =
p
->
right
) {

467 
bÆ™˚_t
 
b
;

469 
bÆ™˚_right
:

470 
b
 = 
p
->
bÆ™˚
;

471 i‡(
b
 > 0) {

472 
p
->
bÆ™˚
 = 0;

473 i‡(
q
 = 
p
->
∑ª¡
)

474 
bÆ™˚_q
;

476 } i‡(
b
 < 0) {

477 
r
 = 
p
->
À·
;

478 
b
 = 
r
->
bÆ™˚
;

479 i‡(
b
 <= 0) {

481 #ifde‡
DEBUG_AVL


482 
	`Áke
("R-Rotation.");

483 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

485 i‡(
p
->
À·
 = 
s
 = 
r
->
right
) {

486 
s
->
∑ª¡
 = 
p
;

488 
r
->
right
 = 
p
;

489 
s
 = 
p
->
∑ª¡
;

490 
p
->
∑ª¡
 = 
r
;

491 
b
 += 1;

492 
r
->
bÆ™˚
 = 
b
;

493 
b
 = -b;

494 #ifde‡
DEBUG_AVL


495 
	`¥ötf
("nodêr: %x\n", 
r
);

496 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

497 
	`¥ötf
("nodêp: %x\n", 
p
);

498 
p
->
bÆ™˚
 = 
b
;

499 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

500 
	`¥ötf
("r-height: %d\n", 
	`check_avl
(
r
->
∑ª¡
,Ñ));

502 i‡(
r
->
∑ª¡
 = 
s
) {

503 i‡(
p
->
bÆ™˚
 = 
b
) {

504 i‡(
p
 =
s
->
À·
) {

505 
s
->
À·
 = 
r
;

508 
s
->
right
 = 
r
;

512 i‡(
p
 =
s
->
À·
) {

513 
	`Áke
("left fromÖarent");

514 
bÆ™˚_À·_s
;

516 
	`Áke
("right fromÖarent");

517 
p
 = 
s
;

518 
p
->
right
 = 
r
;

519 
bÆ™˚_right
;

522 
p
->
bÆ™˚
 = 
b
;

523 
‰ì_åì
 = 
r
;

527 
bÆ™˚_t
 
b2
;

529 
	`Áke
("LR-Rotation.");

530 
t
 = 
r
->
right
;

531 
b
 = 
t
->
bÆ™˚
;

532 i‡(
p
->
À·
 = 
s
 = 
t
->
right
) {

533 
s
->
∑ª¡
 = 
p
;

535 i‡(
r
->
right
 = 
s
 = 
t
->
À·
) {

536 
s
->
∑ª¡
 = 
r
;

538 
t
->
À·
 = 
r
;

539 
t
->
right
 = 
p
;

540 
r
->
∑ª¡
 = 
t
;

541 
s
 = 
p
->
∑ª¡
;

542 
p
->
∑ª¡
 = 
t
;

543 #ifde‡
NO_BARREL_SHIFT


544 
b
 = -b;

545 
b2
 = 
b
 >> 1;

546 
r
->
bÆ™˚
 = 
b2
;

547 
b
 -
b2
;

548 
p
->
bÆ™˚
 = 
b
;

550 
b2
 = (Ë
b
 >> 7;

551 
p
->
bÆ™˚
 = 
b2
;

552 
b2
 = -b2 - 
b
;

553 
r
->
bÆ™˚
 = 
b2
;

555 
t
->
bÆ™˚
 = 0;

556 #ifde‡
DEBUG_AVL


557 
	`¥ötf
("t-height: %d\n", 
	`check_avl
(
t
->
∑ª¡
,Å));

559 i‡(
t
->
∑ª¡
 = 
s
) {

560 i‡(
p
 =
s
->
À·
) {

561 
p
 = 
s
;

562 
s
->
À·
 = 
t
;

563 
bÆ™˚_À·
;

565 
p
 = 
s
;

566 
s
->
right
 = 
t
;

567 
bÆ™˚_right
;

570 
‰ì_åì
 = 
t
;

574 
p
->
bÆ™˚
 = -1;

578 
bÆ™˚_t
 
b
;

580 
bÆ™˚_À·
;

581 
bÆ™˚_À·_s
:

582 
p
 = 
s
;

583 
s
->
À·
 = 
r
;

584 
bÆ™˚_À·
:

585 
b
 = 
p
->
bÆ™˚
;

586 i‡(
b
 < 0) {

587 
p
->
bÆ™˚
 = 0;

588 i‡(
q
 = 
p
->
∑ª¡
)

589 
bÆ™˚_q
;

591 } i‡(
b
 > 0) {

592 
r
 = 
p
->
right
;

593 
b
 = 
r
->
bÆ™˚
;

594 i‡(
b
 >= 0) {

596 #ifde‡
DEBUG_AVL


597 
	`Áke
("L-Rotation.");

598 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

600 i‡(
p
->
right
 = 
s
 = 
r
->
À·
) {

601 
s
->
∑ª¡
 = 
p
;

603 
	`Áke
("subtreeÑelocated");

604 
r
->
À·
 = 
p
;

605 
s
 = 
p
->
∑ª¡
;

606 
p
->
∑ª¡
 = 
r
;

607 
b
 -= 1;

608 
r
->
bÆ™˚
 = 
b
;

609 
b
 = -b;

610 #ifde‡
DEBUG_AVL


611 
	`Áke
("balances calculated");

612 
	`¥ötf
("nodêr: %x\n", 
r
);

613 
	`¥ötf
("r->bÆ™˚: %d\n", 
r
->
bÆ™˚
);

614 
	`¥ötf
("nodêp: %x\n", 
p
);

615 
p
->
bÆ™˚
 = 
b
;

616 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

617 
	`¥ötf
("r-height: %d\n", 
	`check_avl
(
r
->
∑ª¡
,Ñ));

619 i‡(
r
->
∑ª¡
 = 
s
) {

620 i‡(
p
->
bÆ™˚
 = 
b
) {

621 i‡(
p
 =
s
->
À·
) {

622 
s
->
À·
 = 
r
;

625 
s
->
right
 = 
r
;

629 i‡(
p
 =
s
->
À·
) {

630 
	`Áke
("left fromÖarent");

631 
bÆ™˚_À·_s
;

633 
	`Áke
("right fromÖarent");

634 
p
 = 
s
;

635 
p
->
right
 = 
r
;

636 
bÆ™˚_right
;

639 
p
->
bÆ™˚
 = 
b
;

640 
‰ì_åì
 = 
r
;

644 
bÆ™˚_t
 
b2
;

646 
	`Áke
("RL-Rotation.");

647 
t
 = 
r
->
À·
;

648 
b
 = 
t
->
bÆ™˚
;

649 i‡(
p
->
right
 = 
s
 = 
t
->
À·
) {

650 
s
->
∑ª¡
 = 
p
;

652 i‡(
r
->
À·
 = 
s
 = 
t
->
right
) {

653 
s
->
∑ª¡
 = 
r
;

655 
t
->
right
 = 
r
;

656 
t
->
À·
 = 
p
;

657 
r
->
∑ª¡
 = 
t
;

658 
s
 = 
p
->
∑ª¡
;

659 
p
->
∑ª¡
 = 
t
;

660 #ifde‡
NO_BARREL_SHIFT


661 
b
 = -b;

662 
b2
 = 
b
 >> 1;

663 
p
->
bÆ™˚
 = 
b2
;

664 
b
 -
b2
;

665 
r
->
bÆ™˚
 = 
b
;

667 
b2
 = (Ë
b
 >> 7;

668 
r
->
bÆ™˚
 = 
b2
;

669 
b2
 = -b2 - 
b
;

670 
p
->
bÆ™˚
 = 
b2
;

672 
t
->
bÆ™˚
 = 0;

673 i‡(
t
->
∑ª¡
 = 
s
) {

674 i‡(
p
 =
s
->
À·
) {

675 
p
 = 
s
;

676 
s
->
À·
 = 
t
;

677 
bÆ™˚_À·
;

679 
s
->
right
 = 
t
;

680 
p
 = 
s
;

681 
bÆ™˚_right
;

684 
‰ì_åì
 = 
t
;

688 
p
->
bÆ™˚
++;

692 
	}
}

694 
add_to_‰ì_li°
 
	$P1
(
u
 *, 
±r
)

696 
u
 
size
;

697 
‰ì_block_t
 *
p
, *
q
, *
r
;

705 
	`Áke
((
	`do_check_avl
(), "add_to_free_list called"));

706 
size
 = *
±r
 & 
MASK
;

707 #ifde‡
DEBUG_AVL


708 
	`¥ötf
("size:%d\n", 
size
);

710 
q
 = (
‰ì_block_t
 *Ë
size
;

712 
r
 = (
‰ì_block_t
 *Ë(
±r
 + 1);

713 
	`cou¡_up
(
œrge_‰ì_°©
, 
size
 << 2);

714 
q
 = 
‰ì_åì
;

716 
p
 = (
‰ì_block_t
 *Ë
q
;

717 #ifde‡
DEBUG_AVL


718 
	`¥ötf
("checkedÇodêsizê%d\n", 
p
->
size
);

720 i‡(
size
 < 
p
->size) {

721 i‡(
q
 = 
p
->
À·
) {

724 
	`Áke
("addÜeft");

725 
p
->
À·
 = 
r
;

728 i‡(
q
 = 
p
->
right
) {

731 
	`Áke
("addÑight");

732 
p
->
right
 = 
r
;

736 
r
->
size
 = size;

737 
r
->
∑ª¡
 = 
p
;

738 
r
->
À·
 = 0;

739 
r
->
right
 = 0;

740 
r
->
bÆ™˚
 = 0;

741 #ifde‡
DEBUG_AVL


742 
	`Áke
("builtÇewÜeaf.");

743 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

746 
‰ì_block_t
 *
s
;

748 i‡(
r
 =
p
->
À·
) {

749 
bÆ™˚_t
 
b
;

751 i‡(!(
b
 = 
p
->
bÆ™˚
)) {

752 #ifde‡
DEBUG_AVL


753 
	`¥ötf
("p->size: %d\n", 
p
->
size
);

754 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

755 
	`¥ötf
("p->right-h: %d\n", 
	`check_avl
(
p
,Ö->
right
));

756 
	`¥ötf
("p->À· -h: %d\n", 
	`check_avl
(
p
,Ö->
À·
));

757 
	`Áke
("growthÖropagation fromÜeft side");

759 
p
->
bÆ™˚
 = -1;

760 } i‡(
b
 < 0) {

761 #ifde‡
DEBUG_AVL


762 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

764 i‡(
r
->
bÆ™˚
 < 0) {

766 
	`Áke
("R-Rotation");

767 i‡(
p
->
À·
 = 
s
 = 
r
->
right
) {

768 
s
->
∑ª¡
 = 
p
;

770 
r
->
right
 = 
p
;

771 
p
->
bÆ™˚
 = 0;

772 
r
->
bÆ™˚
 = 0;

773 
s
 = 
p
->
∑ª¡
;

774 
p
->
∑ª¡
 = 
r
;

775 i‡(
r
->
∑ª¡
 = 
s
) {

776 i‡(
s
->
À·
 =
p
) {

777 
s
->
À·
 = 
r
;

779 
s
->
right
 = 
r
;

782 
‰ì_åì
 = 
r
;

786 
bÆ™˚_t
 
b2
;

787 
‰ì_block_t
 *
t
 = 
r
->
right
;

789 #ifde‡
DEBUG_AVL


790 
	`Áke
("LR-Rotation");

791 
	`¥ötf
("à%x\n", 
t
);

792 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

794 i‡(
p
->
À·
 = 
s
 = 
t
->
right
) {

795 
s
->
∑ª¡
 = 
p
;

797 
	`Áke
("relocatedÑight subtree");

798 
t
->
right
 = 
p
;

799 i‡(
r
->
right
 = 
s
 = 
t
->
À·
) {

800 
s
->
∑ª¡
 = 
r
;

802 
	`Áke
("relocatedÜeft subtree");

803 
t
->
À·
 = 
r
;

804 
b
 = 
t
->
bÆ™˚
;

805 #ifde‡
NO_BARREL_SHIFT


806 
b
 = -b;

807 
b2
 = 
b
 >> 1;

808 
r
->
bÆ™˚
 = 
b2
;

809 
b
 -
b2
;

810 
p
->
bÆ™˚
 = 
b
;

812 
b2
 = (Ë
b
 >> 7;

813 
p
->
bÆ™˚
 = 
b2
;

814 
b2
 = -b2 - 
b
;

815 
r
->
bÆ™˚
 = 
b2
;

817 
t
->
bÆ™˚
 = 0;

818 
	`Áke
("balances calculated");

819 
s
 = 
p
->
∑ª¡
;

820 
p
->
∑ª¡
 = 
t
;

821 
r
->
∑ª¡
 = 
t
;

822 i‡(
t
->
∑ª¡
 = 
s
) {

823 i‡(
s
->
À·
 =
p
) {

824 
s
->
À·
 = 
t
;

826 
s
->
right
 = 
t
;

829 
‰ì_åì
 = 
t
;

831 #ifde‡
DEBUG_AVL


832 
	`¥ötf
("p->bÆ™˚:%d\n", 
p
->
bÆ™˚
);

833 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

834 
	`¥ötf
("t->bÆ™˚:%d\n", 
t
->
bÆ™˚
);

835 
	`Áke
((
	`do_check_avl
(), "LR-Rotation completed."));

840 
p
->
bÆ™˚
 = 0;

841 
	`Áke
("growth ofÜeft side balancedÅheÇode");

845 
bÆ™˚_t
 
b
;

847 i‡(!(
b
 = 
p
->
bÆ™˚
)) {

848 
	`Áke
("growthÖropagation fromÑight side");

849 
p
->
bÆ™˚
++;

850 } i‡(
b
 > 0) {

851 i‡(
r
->
bÆ™˚
 > 0) {

853 
	`Áke
("L-Rotation");

854 i‡(
p
->
right
 = 
s
 = 
r
->
À·
) {

855 
s
->
∑ª¡
 = 
p
;

857 
r
->
À·
 = 
p
;

858 
p
->
bÆ™˚
 = 0;

859 
r
->
bÆ™˚
 = 0;

860 
s
 = 
p
->
∑ª¡
;

861 
p
->
∑ª¡
 = 
r
;

862 i‡(
r
->
∑ª¡
 = 
s
) {

863 i‡(
s
->
À·
 =
p
) {

864 
s
->
À·
 = 
r
;

866 
s
->
right
 = 
r
;

869 
‰ì_åì
 = 
r
;

873 
bÆ™˚_t
 
b2
;

874 
‰ì_block_t
 *
t
 = 
r
->
À·
;

876 #ifde‡
DEBUG_AVL


877 
	`Áke
("RL-Rotation");

878 
	`¥ötf
("à%x\n", 
t
);

879 
	`¥ötf
("r->bÆ™˚:%d\n", 
r
->
bÆ™˚
);

881 i‡(
p
->
right
 = 
s
 = 
t
->
À·
) {

882 
s
->
∑ª¡
 = 
p
;

884 
	`Áke
("relocatedÜeft subtree");

885 
t
->
À·
 = 
p
;

886 i‡(
r
->
À·
 = 
s
 = 
t
->
right
) {

887 
s
->
∑ª¡
 = 
r
;

889 
	`Áke
("relocatedÑight subtree");

890 
t
->
right
 = 
r
;

891 
b
 = 
t
->
bÆ™˚
;

892 #ifde‡
NO_BARREL_SHIFT


893 
b
 = -b;

894 
b2
 = 
b
 >> 1;

895 
p
->
bÆ™˚
 = 
b2
;

896 
b
 -
b2
;

897 
r
->
bÆ™˚
 = 
b
;

899 
b2
 = (Ë
b
 >> 7;

900 
r
->
bÆ™˚
 = 
b2
;

901 
b2
 = -b2 - 
b
;

902 
p
->
bÆ™˚
 = 
b2
;

904 
t
->
bÆ™˚
 = 0;

905 
s
 = 
p
->
∑ª¡
;

906 
p
->
∑ª¡
 = 
t
;

907 
r
->
∑ª¡
 = 
t
;

908 i‡(
t
->
∑ª¡
 = 
s
) {

909 i‡(
s
->
À·
 =
p
) {

910 
s
->
À·
 = 
t
;

912 
s
->
right
 = 
t
;

915 
‰ì_åì
 = 
t
;

917 
	`Áke
("RL-Rotation completed.");

921 #ifde‡
DEBUG_AVL


922 
	`¥ötf
("p->bÆ™˚: %d\n", 
p
->
bÆ™˚
);

923 
	`¥ötf
("p->right-h: %d\n", 
	`check_avl
(
p
,Ö->
right
));

924 
	`¥ötf
("p->À· -h: %d\n", 
	`check_avl
(
p
,Ö->
À·
));

926 
p
->
bÆ™˚
 = 0;

927 
	`Áke
("growth ofÑight side balancedÅheÇode");

931 
r
 = 
p
;

932 
p
 =Ö->
∑ª¡
;

933 } 
q
 = 
p
);

934 
	`Áke
((
	`do_check_avl
(), "add_to_free_list successful"));

935 
	}
}

939 
	$show_‰ì_li°
()

941 
u
 *
p
;

943 
p
 = 
‰ì_li°
;

944 
p
) {

945 
	`show_block
(
p
);

946 
p
 = 
	`l_√xt_±r
(p);

948 
	`¥ötf
("\n");

949 
	}
}

951 
t_°©
 
	gœrge_‰ì_°©
;

952 
ªmove_‰om_‰ì_li°
 
	$P1
(
u
 *, 
±r
)

954 
	`cou¡_back
(
œrge_‰ì_°©
, (*
±r
 & 
MASK
) << 2);

956 i‡(
	`l_¥ev_±r
(
±r
))

957 
	`l_√xt_±r
(
	`l_¥ev_±r
(
±r
)) =Ü_next_ptr(ptr);

959 
‰ì_li°
 = 
	`l_√xt_±r
(
±r
);

961 i‡(
	`l_√xt_±r
(
±r
))

962 
	`l_¥ev_±r
(
	`l_√xt_±r
(
±r
)) =Ü_prev_ptr(ptr);

963 
	}
}

965 
add_to_‰ì_li°
 
	$P1
(
u
 *, 
±r
)

967 
	`puts
();

969 
	`cou¡_up
(
œrge_‰ì_°©
, (*
±r
 & 
MASK
) << 2);

971 #ifde‡
DEBUG


972 i‡(
‰ì_li°
 && 
	`l_¥ev_±r
(free_list))

973 
	`puts
("FreeÜist consistencyÉrror.");

976 
	`l_√xt_±r
(
±r
Ë
‰ì_li°
;

977 i‡(
‰ì_li°
)

978 
	`l_¥ev_±r
(
‰ì_li°
Ë
±r
;

979 
	`l_¥ev_±r
(
±r
) = 0;

980 
‰ì_li°
 = 
±r
;

981 
	}
}

984 
buûd_block
 
	$P2
(

985 
u
 *, 
±r
, u, 
size
)

987 
u
 
tmp
;

989 
tmp
 = (*
±r
 & 
PREV_BLOCK
Ë| 
size
;

990 *(
±r
 + 
size
 - 1) = size;

991 *(
±r
Ë
tmp
;

992 *(
±r
 + 
size
Ë&~
PREV_BLOCK
;

993 
	}
}

995 
m¨k_block
 
	$P1
(

996 
u
 *, 
±r
)

998 *
	`l_√xt_block
(
±r
Ë|
PREV_BLOCK
;

999 *
±r
 |
THIS_BLOCK
;

1000 
	}
}

1006 
t_°©
 
	gsbrk_°©
;

1007 *
esbrk
 
	$P1
(
u
, 
size
)

1009 #ifde‡
SBRK_OK


1010 #ifde‡
NeXT


1012 *
addr
 = 
NULL
;

1013 *
cuºít_bªak
 = 
NULL
;

1014 
™ywhîe
 = 
FALSE
;

1015 
kîn_ªtu∫_t
 
ªt
;

1020 
addr
 = 
cuºít_bªak
;

1021 
ªt
 = 
	`vm_Æloˇã
(
	`èsk_£lf
(), (
vm_addªss_t
 *Ë& 
addr
, 
size
, 
™ywhîe
);

1022 i‡(
ªt
 !
KERN_SUCCESS
 && (
™ywhîe
 =
FALSE
)) {

1026 
™ywhîe
 = 
TRUE
;

1027 
ªt
 = 
	`vm_Æloˇã
(
	`èsk_£lf
(), (
vm_addªss_t
 *Ë& 
addr
, 
size
, 
TRUE
);

1028 i‡(
ªt
 !
KERN_SUCCESS
)

1029  (
NULL
);

1031 
	`cou¡_up
(
sbrk_°©
, 
size
);

1032 
cuºít_bªak
 = (*Ë((*Ë
addr
 + 
size
);

1033  (
addr
);

1036 #ifde‡
LATTICE


1038 *
	`sbrk
();

1039 *
addr
 = 
NULL
;

1041 
addr
 = (*)
	`sbrk
(
size
);

1042 i‡((*Ë
addr
 == (*) (-1))

1043  
NULL
;

1045 
	`cou¡_up
(
sbrk_°©
, 
size
);

1046  
addr
;

1050 #i‚de‡
löux


1051 *
	`sbrk
();

1054 *
cuºít_bªak
 = 0;

1056 i‡(
cuºít_bªak
 == 0)

1057 
cuºít_bªak
 = 
	`sbrk
(0);

1058 i‡(
	`brk
(
cuºít_bªak
 + 
size
) == -1)

1061 
	`cou¡_up
(
sbrk_°©
, 
size
);

1062 
cuºít_bªak
 +
size
;

1063  
cuºít_bªak
 - 
size
;

1069 
	`cou¡_up
(
sbrk_°©
, 
size
);

1070  (*)
	`mÆloc
(
size
);

1073 
	}
}

1075 
t_°©
 
	gœrge_Æloc_°©
;

1076 *
œrge_mÆloc
 
	$P2
(
u
, 
size
, , 
f‹˚_m‹e
)

1078 
u
 
ªÆ_size
;

1079 
u
 *
±r
;

1081 
	`Áke
("large_malloc called");

1082 #ifde‡
LARGE_TRACE


1083 
	`¥ötf
("ªque°:%d.", 
size
);

1085 
size
 = (size + 7) >> 2;

1086 
	`cou¡_up
(
œrge_Æloc_°©
, 
size
 << 2);

1088 
ªåy
:

1089 
±r
 = 0;

1090 i‡(!
f‹˚_m‹e
) {

1091 #ifde‡
FIT_STYLE_FAST_FIT


1093 
‰ì_block_t
 *
p
, *
q
, *
r
;

1094 
u
 
mö•lô
;

1095 
u
 
ãmpsize
;

1097 
±r
++;

1098 
mö•lô
 = 
size
 + 
SMALL_BLOCK_MAX
 + 1;

1099 
q
 = 
‰ì_åì
;

1101 
p
 = 
q
;

1102 #ifde‡
DEBUG_AVL


1103 
	`¥ötf
("checkedÇodêsizê%d\n", 
p
->
size
);

1105 
ãmpsize
 = 
p
->
size
;

1106 i‡(
mö•lô
 < 
ãmpsize
) {

1107 
±r
 = (
u
 *Ë
p
;

1108 i‡(
q
 = 
p
->
À·
) {

1113 } i‡(
size
 > 
ãmpsize
) {

1114 i‡(
q
 = 
p
->
right
) {

1119 i‡(
size
 =
ãmpsize
) {

1120 
±r
 = (
u
 *Ë
p
;

1124 i‡(
q
 = 
p
->
À·
) {

1125 
r
 = 
p
;

1132 
p
 = 
q
;

1133 
ãmpsize
 = 
p
->
size
;

1134 i‡(
size
 < 
ãmpsize
) {

1135 i‡(
q
 = 
p
->
À·
) {

1139 } i‡(
size
 > 
ãmpsize
) {

1140 i‡(
q
 = 
p
->
right
) {

1145 
±r
 = (
u
 *Ë
p
;

1146 
found_fô
;

1149 
p
 = 
r
;

1151 
ãmpsize
 = 
p
->
size
;

1152 i‡(
mö•lô
 > 
ãmpsize
) {

1153 i‡(
q
 = 
p
->
right
) {

1155 
p
 = 
q
;

1156 
ãmpsize
 = 
p
->
size
;

1157 i‡(
mö•lô
 <
ãmpsize
) {

1158 
±r
 = (
u
 *Ë
p
;

1159 i‡(
q
 = 
p
->
À·
) {

1164 i‡(
q
 = 
p
->
right
) {

1175 
±r
 = (
u
 *Ë
p
;

1179 
found_fô
:

1180 
±r
--;

1182 
u
 
be°_size
;

1183 
u
 *
fú°
, *
be°
;

1185 #ifde‡
LARGE_TRACE


1186 
u
 
£¨ch_Àngth
 = 0;

1190 
fú°
 = 
be°
 = 0;

1191 
be°_size
 = 
MASK
;

1192 
±r
 = 
‰ì_li°
;

1194 
±r
) {

1195 
u
 
ãmpsize
;

1197 #ifde‡
LARGE_TRACE


1198 
£¨ch_Àngth
++;

1201 
ãmpsize
 = *
±r
 & 
MASK
;

1202 i‡(
ãmpsize
 =
size
) {

1203 
be°
 = 
fú°
 = 
±r
;

1208 i‡(
ãmpsize
 >
size
 + 
SMALL_BLOCK_MAX
 + 1) {

1210 i‡(!
fú°
) {

1211 
fú°
 = 
±r
;

1212 i‡(
fô_°yÀ
 =
FIRST_FIT
)

1217 
ãmpsize
 -
size
;

1218 i‡(
ãmpsize
 > 0 &&Åempsizê<
be°_size
) {

1219 
be°
 = 
±r
;

1220 
be°_size
 = 
ãmpsize
;

1223 
±r
 = 
	`l_√xt_±r
(ptr);

1226 #ifde‡
LARGE_TRACE


1227 
	`¥ötf
("£¨chÜígth %d\n", 
£¨ch_Àngth
);

1229 i‡(
fô_°yÀ
 =
BEST_FIT
)

1230 
±r
 = 
be°
;

1232 
±r
 = 
fú°
;

1237 i‡(!
±r
) {

1238 
u
 
chunk_size
, 
block_size
;

1240 
block_size
 = 
size
 * 
SIZEOF_INT
;

1241 i‡(
f‹˚_m‹e
 || (
block_size
 > 
CHUNK_SIZE
))

1242 
chunk_size
 = 
block_size
;

1244 
chunk_size
 = 
CHUNK_SIZE
;

1246 #ifde‡
SBRK_OK


1247 i‡(!
°¨t_√xt_block
) {

1248 
	`cou¡_up
(
œrge_Æloc_°©
, 
SIZEOF_INT
);

1249 
°¨t_√xt_block
 = (
u
 *Ë
	`esbrk
(
SIZEOF_INT
);

1250 i‡(!
°¨t_√xt_block
)

1251 
	`Áèl
("Couldn't mallocánything");

1252 *(
°¨t_√xt_block
Ë
PREV_BLOCK
;

1253 
	`Áke
("AllocatedÜittle fake block");

1255 
±r
 = (
u
 *Ë
	`esbrk
(
chunk_size
);

1257 
±r
 = (
u
 *Ë
	`esbrk
(
chunk_size
 + 
SIZEOF_INT
);

1259 i‡(
±r
 == 0) {

1260 *
ª£rved_¨ó
;

1261 
¶ow_shut_down_to_do
;

1262 
goög_to_exô
 = 0;

1263 
mess1
[] = "Temporary out of MEMORY. FreeingÑeserve.\n";

1264 
mess2
[] = "Totally out of MEMORY.\n";

1266 i‡(
goög_to_exô
)

1267 
	`exô
(3);

1268 i‡(
ª£rved_¨ó
) {

1269 
	`smÆloc_‰ì
(
ª£rved_¨ó
);

1270 
ª£rved_¨ó
 = 0;

1271 
	`wrôe
(1, 
mess1
, (mess1) - 1);

1272 
¶ow_shut_down_to_do
 = 6;

1273 
f‹˚_m‹e
 = 0;

1274 
ªåy
;

1276 i‡(
f‹˚_m‹e
) {

1277 
f‹˚_m‹e
 = 0;

1278 
ªåy
;

1280 
goög_to_exô
 = 1;

1281 
	`wrôe
(1, 
mess2
, (mess2) - 1);

1282 (Ë
	`dump_åa˚
(0);

1283 
	`exô
(2);

1285 #ifde‡
SBRK_OK


1286 
±r
 -= 1;

1288 i‡(
°¨t_√xt_block
 =
±r
) {

1289 
±r
 -= 1;

1290 
chunk_size
 +
SIZEOF_INT
;

1292 *
±r
 = 
PREV_BLOCK
;

1293 
°¨t_√xt_block
 = (
u
 *Ë((*Ë
±r
 + 
chunk_size
);

1295 
block_size
 = 
chunk_size
 / 
SIZEOF_INT
;

1299 
	`buûd_block
(
±r
, 
block_size
);

1300 i‡(
f‹˚_m‹e
)

1301 
	`Áke
("BuildÜittle block");

1303 
	`Áke
("Built memory block description.");

1304 *
	`l_√xt_block
(
±r
Ë
THIS_BLOCK
;

1305 
	`add_to_‰ì_li°
(
±r
);

1307 
	`ªmove_‰om_‰ì_li°
(
±r
);

1308 
ªÆ_size
 = *
±r
 & 
MASK
;

1310 i‡(
ªÆ_size
 - 
size
) {

1312 
	`buûd_block
(
±r
 + 
size
, 
ªÆ_size
 - size);

1313 
	`Áke
("BuiltÉmpty block");

1318 i‡(
ªÆ_size
 - 
size
 >
SMALL_BLOCK_MAX
 + 1) {

1319 
	`add_to_‰ì_li°
(
±r
 + 
size
);

1321 
	`m¨k_block
(
±r
 + 
size
);

1323 
	`buûd_block
(
±r
, 
size
);

1325 
	`m¨k_block
(
±r
);

1326 
	`Áke
("builtállocated block");

1327  (*Ë(
±r
 + 1);

1328 
	}
}

1330 
œrge_‰ì
 
	$P1
(*, 
±r
)

1332 
u
 
size
, *
p
;

1334 
p
 = (
u
 *Ë
±r
;

1335 
p
 -= 1;

1336 
size
 = *
p
 & 
MASK
;

1337 
	`cou¡_back
(
œrge_Æloc_°©
, (
size
 << 2));

1339 i‡(!(*(
p
 + 
size
Ë& 
THIS_BLOCK
)) {

1340 
	`ªmove_‰om_‰ì_li°
(
p
 + 
size
);

1341 
size
 +(*(
p
 + sizeË& 
MASK
);

1342 *
p
 = (*∞& 
PREV_BLOCK
Ë| 
size
;

1344 i‡(
	`l_¥ev_‰ì
(
p
)) {

1345 
	`ªmove_‰om_‰ì_li°
(
	`l_¥ev_block
(
p
));

1346 
size
 +(*
	`l_¥ev_block
(
p
Ë& 
MASK
);

1347 
p
 = 
	`l_¥ev_block
(p);

1349 
	`buûd_block
(
p
, 
size
);

1351 
	`add_to_‰ì_li°
(
p
);

1352 
	}
}

1354 
POINTER
 
CDECL
 
smÆloc_ªÆloc
 
	$P2
(
POINTER
, 
p
, 
size_t
, 
size
)

1356 *
q
, 
ﬁd_size
;

1357 *
t
;

1359 
q
 = (*Ë
p
;

1361 #i‡
MALLOC_ALIGN
 > 4

1362 !(
ﬁd_size
 = *--
q
));

1363 
ﬁd_size
 = ((ﬁd_sizê& 
MASK
Ë- 1Ë* 
SIZEOF_INT
;

1365 --
q
;

1366 
ﬁd_size
 = ((*
q
 & 
MASK
Ë- 1Ë* 
SIZEOF_INT
;

1368 i‡(
ﬁd_size
 >
size
)

1369  
p
;

1371 
t
 = 
	`smÆloc_mÆloc
(
size
);

1372 i‡(
t
 == 0)

1375 
	`mem˝y
(
t
, 
p
, 
ﬁd_size
);

1376 
	`smÆloc_‰ì
(
p
);

1377  
t
;

1378 
	}
}

1380 
	$ªs‹t_‰ì_li°
()

1383 
	}
}

1384 #ifde‡
DO_MSTATS


1385 
	#dump_°©
(
°r
,
°©
Ë
	`outbuf_addv
(
ob
, så,°©.
cou¡î
,°©.
size
)

	)

1386 
show_m°©s
 
	$P2
(
outbuf„r_t
 *, 
ob
, *, 
s
)

1388 
	`outbuf_addv
(
ob
, "Mem‹yáŒoˇti⁄ sèti°ic†%s\n", 
s
);

1389 
	`outbuf_add
(
ob
, "Type Count Space (bytes)\n");

1390 
	`dump_°©
("sbrkÑeque°s: %8d %10d (a)\n", 
sbrk_°©
);

1391 
	`dump_°©
("œrgêblocks: %8d %10d (b)\n", 
œrge_Æloc_°©
);

1392 
	`dump_°©
("œrgê‰ì blocks: %8d %10d (c)\n\n", 
œrge_‰ì_°©
);

1393 
	`dump_°©
("smÆ»chunks: %8d %10d (d)\n", 
smÆl_chunk_°©
);

1394 
	`dump_°©
("smÆ»blocks: %8d %10d (e)\n", 
smÆl_Æloc_°©
);

1395 
	`dump_°©
("smÆ»‰ì blocks: %8d %10d (f)\n", 
smÆl_‰ì_°©
);

1396 
	`outbuf_addv
(
ob
,

1397 "unu£d from cuºíàchunk %10d (g)\n\n", 
unu£d_size
);

1398 
	`outbuf_addv
(
ob
,

1400 
	`outbuf_addv
(
ob
,

1402 
	`outbuf_addv
(
ob
,

1404 
	`outbuf_addv
(
ob
,

1406 
	`outbuf_addv
(
ob
,

1408 
	}
}

1414 
POINTER
 
CDECL
 
smÆloc_ˇŒoc
 
	$P2
(
size_t
, 
√Àm
, size_t, 
sizñ
)

1416 *
p
;

1418 i‡(
√Àm
 =0 || 
sizñ
 == 0)

1420 
p
 = 
	`smÆloc_mÆloc
(
√Àm
 * 
sizñ
);

1421 i‡(
p
 == 0)

1423 (Ë
	`mem£t
(
p
, '\0', 
√Àm
 * 
sizñ
);

1424  
p
;

1425 
	}
}

1427 #ifde‡
DEBUG


1432 
	$wÆk_√w_smÆl_mÆlo˚d
(
func
)

1433 (*
func
Ë
	`PROT
((
POINTER
, ));

1435 
i
;

1436 
u
 *
p
, *
q
;

1438 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++) {

1439 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1)) {

1440 *
	`s_size_±r
(
p
Ë|
NO_REF
;

1443 i‡(
unu£d_size
)

1444 *
√xt_unu£d
 = 0;

1445 
p
 = 
œ°_smÆl_chunk
;Ö;Ö = *(
u
 **)Ö) {

1446 
u
 *
íd
 = 
p
 - 1 + (p[-1] & 
MASK
);

1448 
	`debug_mesßge
("sˇ¬ög chunk %x,Énd %x\n", (
u
Ë(
p
 - 1), (uË
íd
);

1449 
q
 = 
p
 + 1; q < 
íd
;) {

1450 
u
 
size
 = *
	`s_size_±r
(
q
);

1452 i‡(!
size
)

1454 i‡(!(
size
 & 
NO_REF
)) {

1455 (*
func
Ë((*Ë
	`s_√xt_±r
(
q
), (
size
 & 
MASK
) << 2);

1456 *
	`s_size_±r
(
q
Ë|
NO_REF
;

1458 
q
 +
size
 & 
MASK
;

1461 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++) {

1462 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1)) {

1463 *
	`s_size_±r
(
p
Ë&~
NO_REF
;

1466 
	}
}

1471 
	gdebug_smÆloc
 = 0;

1477 
	$vîify_sÊèbÀ
()

1479 
u
 *
p
;

1480 
i
, 
j
;

1481 
íd
;

1483 i‡(!
debug_smÆloc
)

1485 i‡(
unu£d_size
 > 
SMALL_CHUNK_SIZE
)

1486 
	`≠a
();

1487 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++) {

1488 
j
 = 0, 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1), j++) {

1489 i‡(
p
 < (
u
 *Ë& 
íd
 ||Ö > (u *) 0xfffff)

1490 
	`≠a
();

1491 i‡(*
p
 - 2 !
i
)

1492 
	`≠a
();

1494 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2))

1495 
	`≠a
();

1497 
p
 = 
‰ì_li°
;

1498 
p
) {

1499 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2))

1500 
	`≠a
();

1501 
p
 = 
	`l_√xt_±r
(p);

1503 
	}
}

1505 
vîify_‰ì
 
	$P1
(
u
 *, 
±r
)

1507 
u
 *
p
;

1508 
i
, 
j
;

1510 i‡(!
debug_smÆloc
)

1512 
i
 = 0; i < 
SMALL_BLOCK_MAX
; i++) {

1513 
j
 = 0, 
p
 = 
sÊèbÀ
[
i
];Ö;Ö = *(
u
 **) (p + 1), j++) {

1514 i‡(*
p
 - 2 !
i
)

1515 
	`≠a
();

1516 i‡(
±r
 >
p
 &&Ötr <Ö + *p)

1517 
	`≠a
();

1518 i‡(
p
 >
±r
 &&Ö <Ötr + *ptr)

1519 
	`≠a
();

1520 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2))

1521 
	`≠a
();

1525 
p
 = 
‰ì_li°
;

1526 
p
) {

1527 i‡(
±r
 >
p
 &&Öå <Ö + (*∞& 
MASK
))

1528 
	`≠a
();

1529 i‡(
p
 >
±r
 &&Ö <Öå + (*±∏& 
MASK
))

1530 
	`≠a
();

1531 i‡(
p
 >
√xt_unu£d
 &&Ö <Çext_unu£d + (
unu£d_size
 >> 2))

1532 
	`≠a
();

1533 
p
 = 
	`l_√xt_±r
(p);

1535 i‡(
±r
 >
√xt_unu£d
 &&Öå <Çext_unu£d + (
unu£d_size
 >> 2))

1536 
	`≠a
();

1537 
	}
}

1539 
	$≠a
()

1541 
i
;

1543 
i
 / 0;

1544 
	}
}

1546 *
	gªf
;

1547 
ã°_mÆloc
 
	$P1
(*, 
p
)

1549 i‡(
p
 =
ªf
)

1550 
	`¥ötf
("Found 0x%x\n", 
p
);

1551 
	}
}

	@smalloc.h

1 #i‚de‡
SMALLOC_H


2 
	#SMALLOC_H


	)

4 #ifde‡
SMALLOC


5 * 
CDECL
 
smÆloc_mÆloc
 
PROT
((
size_t
));

6 * 
CDECL
 
smÆloc_ªÆloc
 
PROT
((*, 
size_t
));

7 * 
CDECL
 
smÆloc_ˇŒoc
 
PROT
((
size_t
, size_t));

8 
CDECL
 
smÆloc_‰ì
 
PROT
((*));

9 #ifde‡
DO_MSTATS


10 
show_m°©s
 
PROT
((
outbuf„r_t
 *, *));

	@socket_ctrl.c

1 
	~"°d.h
"

2 
	~"sockë_˘æ.h
"

3 
	~"√tw‹k_ö˛.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"fûe_ö˛.h
"

6 
	~"fûe.h
"

19 
INLINE
 
£t_sockë_ow√r
 
	$P2
(, 
fd
, , 
which
)

21 #ifde‡
OLD_ULTRIX


22  
	`f˙é
(
fd
, 
F_SETOWN
, 
which
);

24 #ifde‡
WINSOCK


27  
	`io˘l
(
fd
, 
SIOCSPGRP
, &
which
);

30 
	}
}

36 
INLINE
 
£t_sockë_async
 
	$P2
(, 
fd
, , 
which
)

38 #ifde‡
OLD_ULTRIX


39  
	`f˙é
(
fd
, 
F_SETFL
, 
FASYNC
);

41  
	`OS_sockë_io˘l
(
fd
, 
FIOASYNC
, &
which
);

43 
	}
}

49 
INLINE
 
£t_sockë_n⁄blockög
 
	$P2
(, 
fd
, , 
which
)

51 #i‡!
	`deföed
(
OLD_ULTRIX
Ë&& !deföed(
_SEQUENT_
)

52 
ªsu…
;

55 #ifde‡
OLD_ULTRIX


56 i‡(
which
)

57  
	`f˙é
(
fd
, 
F_SETFL
, 
FNDELAY
);

59  
	`f˙é
(
fd
, 
F_SETFL
, 
FNBLOCK
);

62 #ifde‡
_SEQUENT_


63 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

65 i‡(
Êags
 == -1)

67 i‡(
which
)

68 
Êags
 |
O_NONBLOCK
;

70 
Êags
 &~
O_NONBLOCK
;

71  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
);

73 
ªsu…
 = 
	`OS_sockë_io˘l
(
fd
, 
FIONBIO
, &
which
);

74 i‡(
ªsu…
 == -1)

75 
	`debug_≥º‹
("set_socket_nonblocking: ioctl", 0);

78 i‡(
ªsu…
 == -1) {

79 
	`XXX
("Try using cc instead of gccÅo correctÅhisÉrror.\n");

82  
ªsu…
;

86 
	}
}

88 #ifde‡
WIN32


89 
SockëPîr‹
 
	$P2
(*, 
wh©
, *, 
fûe
) {

90 *
îr°rögs
[] =

135 
tmp°rög
[80];

136 *
s
 = 
tmp°rög
;

137 
sock_î∫o
;

139 
sock_î∫o
 = 
	`WSAGëLa°Eº‹
();

141 
sock_î∫o
) {

142 
WSAEINTR
: 
	`°r˝y
(
tmp°rög
, "Function interrupted");

143 
WSAEACCES
: 
	`°r˝y
(
tmp°rög
, "Cannot broadcast");

144 
WSAEFAULT
: 
	`°r˝y
(
tmp°rög
, "Buffer is invalid");

145 
WSAEINVAL
: 
	`°r˝y
(
tmp°rög
, "Unbound socket");

146 
WSAEMFILE
: 
	`°r˝y
(
tmp°rög
, "No more descriptors");

149 i‡–(
sock_î∫o
 >
WSAEWOULDBLOCK
Ë&& (sock_î∫ÿ<
WSANO_DATA
)) {

150 
s
 = 
îr°rögs
[
sock_î∫o
 - 
WSAEWOULDBLOCK
];

152 
	`°r˝y
(
tmp°rög
, "unknownÉrror");

154 i‡(
fûe
)

155 
	`debug_mesßge
("Sy°em Eº‹: %s:%s:%s\n", 
wh©
, 
fûe
, 
s
);

157 
	`debug_mesßge
("Sy°em Eº‹: %s:%s\n", 
wh©
, 
s
);

158 
	}
}

160 
CDECL
 
	$˛ónup_sockës
() {

161 
	`WSACÀ™up
();

162 
	}
}

	@socket_ctrl.h

1 #i‚de‡
SOCKET_CTRL_H


2 
	#SOCKET_CTRL_H


	)

7 
£t_sockë_n⁄blockög
 
PROT
((, ));

8 
£t_sockë_ow√r
 
PROT
((, ));

9 
£t_sockë_async
 
PROT
((, ));

11 #ifde‡
WIN32


12 
SockëPîr‹
 
PROT
((*, *));

13 
CDECL
 
˛ónup_sockës
 
PROT
(());

	@socket_efuns.c

8 
	~"°d.h
"

9 
	~"sockë_efuns.h
"

10 
	~"sockë_îr.h
"

11 
	~"ö˛ude/sockë_îr.h
"

12 
	~"sockë_˘æ.h
"

13 
	~"comm.h
"

14 
	~"fûe.h
"

15 
	~"ma°î.h
"

17 #i‡
deföed
(
PACKAGE_SOCKETS
Ë|| deföed(
PACKAGE_EXTERNAL
)

20 
	#SC_FORCE
 1

	)

21 
	#SC_DO_CALLBACK
 2

	)

22 
	#SC_FINAL_CLOSE
 4

	)

24 
Õc_sockë_t
 *
	gÕc_socks
 = 0;

25 
	gmax_Õc_socks
 = 0;

27 #ifde‡
PACKAGE_SOCKETS


28 
sockë_«me_to_sö
 
PROT
((*, 
sockaddr_ö
 *));

29 *
öë_addªss
 
PROT
((
sockaddr_ö
 *));

35 
check_vÆid_sockë
 
	$P5
(*, 
wh©
, , 
fd
, 
obje˘_t
 *, 
ow√r
,

36 *, 
addr
, , 
p‹t
)

38 
¨øy_t
 *
öfo
;

39 
svÆue_t
 *
mªt
;

41 
öfo
 = 
	`Æloˇã_em±y_¨øy
(4);

42 
öfo
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

43 
öfo
->
ôem
[0].
u
.
numbî
 = 
fd
;

44 
	`assign_sockë_ow√r
(&
öfo
->
ôem
[1], 
ow√r
);

45 
öfo
->
ôem
[2].
ty≥
 = 
T_STRING
;

46 
öfo
->
ôem
[2].
subty≥
 = 
STRING_SHARED
;

47 
öfo
->
ôem
[2].
u
.
°rög
 = 
	`make_sh¨ed_°rög
(
addr
);

48 
öfo
->
ôem
[3].
ty≥
 = 
T_NUMBER
;

49 
öfo
->
ôem
[3].
u
.
numbî
 = 
p‹t
;

51 
	`push_obje˘
(
cuºít_obje˘
);

52 
	`push_c⁄°™t_°rög
(
wh©
);

53 
	`push_ª„d_¨øy
(
öfo
);

55 
mªt
 = 
	`≠∂y_ma°î_ob
(
APPLY_VALID_SOCKET
, 3);

56  
	`MASTER_APPROVED
(
mªt
);

57 
	}
}

59 
˛ór_sockë
 
	$P2
(, 
which
, , 
do‰ì
)

61 i‡(
do‰ì
) {

62 
	`£t_ªad_ˇŒback
(
which
, 0);

63 
	`£t_wrôe_ˇŒback
(
which
, 0);

64 
	`£t_˛o£_ˇŒback
(
which
, 0);

67 
Õc_socks
[
which
].
fd
 = -1;

68 
Õc_socks
[
which
].
Êags
 = 0;

69 
Õc_socks
[
which
].
mode
 = 
MUD
;

70 
Õc_socks
[
which
].
°©e
 = 
STATE_CLOSED
;

71 
	`mem£t
((*Ë&
Õc_socks
[
which
].
l_addr
, 0, (lpc_socks[which].l_addr));

72 
	`mem£t
((*Ë&
Õc_socks
[
which
].
r_addr
, 0, (lpc_socks[which].r_addr));

73 
Õc_socks
[
which
].
ow√r_ob
 = 
NULL
;

74 
Õc_socks
[
which
].
ªÀa£_ob
 = 
NULL
;

75 
Õc_socks
[
which
].
ªad_ˇŒback
.
s
 = 0;

76 
Õc_socks
[
which
].
wrôe_ˇŒback
.
s
 = 0;

77 
Õc_socks
[
which
].
˛o£_ˇŒback
.
s
 = 0;

78 
Õc_socks
[
which
].
r_buf
 = 
NULL
;

79 
Õc_socks
[
which
].
r_off
 = 0;

80 
Õc_socks
[
which
].
r_Àn
 = 0;

81 
Õc_socks
[
which
].
w_buf
 = 
NULL
;

82 
Õc_socks
[
which
].
w_off
 = 0;

83 
Õc_socks
[
which
].
w_Àn
 = 0;

84 
	}
}

89 
	$m‹e_Õc_sockës
()

91 
i
;

93 
max_Õc_socks
 += 10;

95 i‡(!
Õc_socks
)

96 
Õc_socks
 = 
	`CALLOCATE
(10, 
Õc_sockë_t
, 
TAG_SOCKETS
, "more_lpc_sockets");

98 
Õc_socks
 = 
	`RESIZE
÷pc_socks, 
max_Õc_socks
, 
Õc_sockë_t
, 
TAG_SOCKETS
, "more_lpc_sockets");

100 
i
 = 
max_Õc_socks
;

101 --
i
 >
max_Õc_socks
 - 10)

102 
	`˛ór_sockë
(
i
, 0);

104  
max_Õc_socks
 - 10;

105 
	}
}

110 
£t_ªad_ˇŒback
 
	$P2
(, 
which
, 
svÆue_t
 *, 
cb
)

112 *
s
;

114 i‡(
Õc_socks
[
which
].
Êags
 & 
S_READ_FP
) {

115 
	`‰ì_fu≈
(
Õc_socks
[
which
].
ªad_ˇŒback
.
f
);

116 
Õc_socks
[
which
].
Êags
 &~
S_READ_FP
;

117 } i‡((
s
 = 
Õc_socks
[
which
].
ªad_ˇŒback
.s))

118 
	`‰ì_°rög
(
s
);

120 i‡(
cb
) {

121 i‡(
cb
->
ty≥
 =
T_FUNCTION
) {

122 
Õc_socks
[
which
].
Êags
 |
S_READ_FP
;

123 
Õc_socks
[
which
].
ªad_ˇŒback
.
f
 = 
cb
->
u
.
Â
;

124 
cb
->
u
.
Â
->
hdr
.
ªf
++;

126 
Õc_socks
[
which
].
ªad_ˇŒback
.
s
 = 
	`make_sh¨ed_°rög
(
cb
->
u
.
°rög
);

129 
Õc_socks
[
which
].
ªad_ˇŒback
.
s
 = 0;

130 
	}
}

132 
£t_wrôe_ˇŒback
 
	$P2
(, 
which
, 
svÆue_t
 *, 
cb
)

134 *
s
;

136 i‡(
Õc_socks
[
which
].
Êags
 & 
S_WRITE_FP
) {

137 
	`‰ì_fu≈
(
Õc_socks
[
which
].
wrôe_ˇŒback
.
f
);

138 
Õc_socks
[
which
].
Êags
 &~
S_WRITE_FP
;

139 } i‡((
s
 = 
Õc_socks
[
which
].
wrôe_ˇŒback
.s))

140 
	`‰ì_°rög
(
s
);

142 i‡(
cb
) {

143 i‡(
cb
->
ty≥
 =
T_FUNCTION
) {

144 
Õc_socks
[
which
].
Êags
 |
S_WRITE_FP
;

145 
Õc_socks
[
which
].
wrôe_ˇŒback
.
f
 = 
cb
->
u
.
Â
;

146 
cb
->
u
.
Â
->
hdr
.
ªf
++;

148 
Õc_socks
[
which
].
wrôe_ˇŒback
.
s
 = 
	`make_sh¨ed_°rög
(
cb
->
u
.
°rög
);

151 
Õc_socks
[
which
].
wrôe_ˇŒback
.
s
 = 0;

152 
	}
}

154 
£t_˛o£_ˇŒback
 
	$P2
(, 
which
, 
svÆue_t
 *, 
cb
)

156 *
s
;

158 i‡(
Õc_socks
[
which
].
Êags
 & 
S_CLOSE_FP
) {

159 
	`‰ì_fu≈
(
Õc_socks
[
which
].
˛o£_ˇŒback
.
f
);

160 
Õc_socks
[
which
].
Êags
 &~
S_CLOSE_FP
;

161 } i‡((
s
 = 
Õc_socks
[
which
].
˛o£_ˇŒback
.s))

162 
	`‰ì_°rög
(
s
);

164 i‡(
cb
) {

165 i‡(
cb
->
ty≥
 =
T_FUNCTION
) {

166 
Õc_socks
[
which
].
Êags
 |
S_CLOSE_FP
;

167 
Õc_socks
[
which
].
˛o£_ˇŒback
.
f
 = 
cb
->
u
.
Â
;

168 
cb
->
u
.
Â
->
hdr
.
ªf
++;

170 
Õc_socks
[
which
].
˛o£_ˇŒback
.
s
 = 
	`make_sh¨ed_°rög
(
cb
->
u
.
°rög
);

173 
Õc_socks
[
which
].
˛o£_ˇŒback
.
s
 = 0;

174 
	}
}

176 #ifde‡
PACKAGE_SOCKETS


178 
c›y_˛o£_ˇŒback
 
	$P2
(, 
to
, , 
‰om
)

180 *
s
;

182 i‡(
Õc_socks
[
to
].
Êags
 & 
S_CLOSE_FP
) {

183 
	`‰ì_fu≈
(
Õc_socks
[
to
].
˛o£_ˇŒback
.
f
);

184 } i‡((
s
 = 
Õc_socks
[
to
].
˛o£_ˇŒback
.s))

185 
	`‰ì_°rög
(
s
);

187 i‡(
Õc_socks
[
‰om
].
Êags
 & 
S_CLOSE_FP
) {

188 
Õc_socks
[
to
].
Êags
 |
S_CLOSE_FP
;

189 
Õc_socks
[
to
].
˛o£_ˇŒback
.
f
 =Üpc_socks[
‰om
].close_callback.f;

190 
Õc_socks
[
to
].
˛o£_ˇŒback
.
f
->
hdr
.
ªf
++;

192 
Õc_socks
[
to
].
Êags
 &~
S_CLOSE_FP
;

193 
s
 = 
Õc_socks
[
to
].
˛o£_ˇŒback
.†Õc_socks[
‰om
].close_callback.s;

194 i‡(
s
)

195 
	`ªf_°rög
(
s
);

197 
	}
}

201 
föd_√w_sockë
 
PROT
(())

203 
	gi
;

205 
	gi
 = 0; i < 
	gmax_Õc_socks
; i++) {

206 i‡(
	gÕc_socks
[
i
].
	g°©e
 =
STATE_CLOSED
)

207  
i
;

209  
m‹e_Õc_sockës
();

212 #ifde‡
PACKAGE_SOCKETS


217 
sockë_¸óã
 
	$P3
(
sockë_mode
, 
mode
, 
svÆue_t
 *, 
ªad_ˇŒback
, svÆue_à*, 
˛o£_ˇŒback
)

219 
ty≥
, 
i
, 
fd
, 
›tvÆ
;

220 #i‚de‡
NO_BUFFER_TYPE


221 
bö¨y
 = 0;

223 i‡(
mode
 =
STREAM_BINARY
) {

224 
bö¨y
 = 1;

225 
mode
 = 
STREAM
;

226 } i‡(
mode
 =
DATAGRAM_BINARY
) {

227 
bö¨y
 = 1;

228 
mode
 = 
DATAGRAM
;

231 
mode
) {

233 
MUD
:

234 
STREAM
:

235 
ty≥
 = 
SOCK_STREAM
;

237 
DATAGRAM
:

238 
ty≥
 = 
SOCK_DGRAM
;

242  
EEMODENOTSUPP
;

245 
i
 = 
	`föd_√w_sockë
();

246 i‡(
i
 >= 0) {

247 
fd
 = 
	`sockë
(
PF_INET
, 
ty≥
, 0);

248 i‡(
fd
 =
INVALID_SOCKET
) {

249 
	`sockë_≥º‹
("socket_create: socket", 0);

250  
EESOCKET
;

252 
›tvÆ
 = 1;

253 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›tvÆ
,

254 (
›tvÆ
)) == -1) {

255 
	`sockë_≥º‹
("socket_create: setsockopt", 0);

256 
	`OS_sockë_˛o£
(
fd
);

257  
EESETSOCKOPT
;

259 i‡(
	`£t_sockë_n⁄blockög
(
fd
, 1) == -1) {

260 
	`sockë_≥º‹
("socket_create: set_socket_nonblocking", 0);

261 
	`OS_sockë_˛o£
(
fd
);

262  
EENONBLOCK
;

264 
Õc_socks
[
i
].
fd
 = fd;

265 
Õc_socks
[
i
].
Êags
 = 
S_HEADER
;

267 i‡(
ty≥
 =
SOCK_DGRAM
Ë
˛o£_ˇŒback
 = 0;

268 
	`£t_ªad_ˇŒback
(
i
, 
ªad_ˇŒback
);

269 
	`£t_wrôe_ˇŒback
(
i
, 0);

270 
	`£t_˛o£_ˇŒback
(
i
, 
˛o£_ˇŒback
);

272 #i‚de‡
NO_BUFFER_TYPE


273 i‡(
bö¨y
) {

274 
Õc_socks
[
i
].
Êags
 |
S_BINARY
;

277 
Õc_socks
[
i
].
mode
 = mode;

278 
Õc_socks
[
i
].
°©e
 = 
STATE_UNBOUND
;

279 
	`mem£t
((*Ë&
Õc_socks
[
i
].
l_addr
, 0, (lpc_socks[i].l_addr));

280 
	`mem£t
((*Ë&
Õc_socks
[
i
].
r_addr
, 0, (lpc_socks[i].r_addr));

281 
Õc_socks
[
i
].
ow√r_ob
 = 
cuºít_obje˘
;

282 
Õc_socks
[
i
].
ªÀa£_ob
 = 
NULL
;

283 
Õc_socks
[
i
].
r_buf
 = 
NULL
;

284 
Õc_socks
[
i
].
r_off
 = 0;

285 
Õc_socks
[
i
].
r_Àn
 = 0;

286 
Õc_socks
[
i
].
w_buf
 = 
NULL
;

287 
Õc_socks
[
i
].
w_off
 = 0;

288 
Õc_socks
[
i
].
w_Àn
 = 0;

290 
cuºít_obje˘
->
Êags
 |
O_EFUN_SOCKET
;

292 
	`debug
(
sockës
, ("socket_create: created socket %d mode %d fd %d\n",

293 
i
, 
mode
, 
fd
));

296  
i
;

297 
	}
}

302 
sockë_böd
 
	$P3
(, 
fd
, , 
p‹t
, *, 
addr
)

304 
Àn
;

305 
sockaddr_ö
 
sö
;

307 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

308  
EEFDRANGE
;

309 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

310 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

311  
EEBADF
;

312 i‡(
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

313  
EESECURITY
;

314 i‡(
Õc_socks
[
fd
].
°©e
 !
STATE_UNBOUND
)

315  
EEISBOUND
;

317 
sö
.
sö_Ámûy
 = 
AF_INET
;

319 i‡(!
addr
) {

320 i‡(
MUD_IP
[0])

321 
sö
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
MUD_IP
);

323 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

324 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
p‹t
);

326 i‡(!
	`sockë_«me_to_sö
(
addr
, &
sö
))

327  
EEBADADDR
;

330 i‡(
	`böd
(
Õc_socks
[
fd
].fd, (
sockaddr
 *Ë& 
sö
, (sin)) == -1) {

331 
sockë_î∫o
) {

332 
EADDRINUSE
:

333  
EEADDRINUSE
;

335 
	`sockë_≥º‹
("socket_bind: bind", 0);

336  
EEBIND
;

339 
Àn
 = (
sö
);

340 i‡(
	`gësock«me
(
Õc_socks
[
fd
].fd, (
sockaddr
 *Ë&Üpc_socks[fd].
l_addr
, &
Àn
) == -1) {

341 
	`sockë_≥º‹
("socket_bind: getsockname", 0);

342  
EEGETSOCKNAME
;

344 
Õc_socks
[
fd
].
°©e
 = 
STATE_BOUND
;

346 
	`debug
(
sockës
, ("socket_bind: bound socket %dÅo %s.%d\n",

347 
fd
, 
	`öë_¡ﬂ
(
Õc_socks
[fd].
l_addr
.
sö_addr
),

348 
	`¡ohs
(
Õc_socks
[
fd
].
l_addr
.
sö_p‹t
)));

350  
EESUCCESS
;

351 
	}
}

356 
sockë_li°í
 
	$P2
(, 
fd
, 
svÆue_t
 *, 
ˇŒback
)

358 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

359  
EEFDRANGE
;

360 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

361 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

362  
EEBADF
;

363 i‡(
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

364  
EESECURITY
;

365 i‡(
Õc_socks
[
fd
].
mode
 =
DATAGRAM
)

366  
EEMODENOTSUPP
;

367 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_UNBOUND
)

368  
EENOADDR
;

369 i‡(
Õc_socks
[
fd
].
°©e
 !
STATE_BOUND
)

370  
EEISCONN
;

372 i‡(
	`li°í
(
Õc_socks
[
fd
].fd, 5) == -1) {

373 
	`sockë_≥º‹
("socket_listen:Üisten", 0);

374  
EELISTEN
;

376 
Õc_socks
[
fd
].
°©e
 = 
STATE_LISTEN
;

377 
	`£t_ªad_ˇŒback
(
fd
, 
ˇŒback
);

379 
cuºít_obje˘
->
Êags
 |
O_EFUN_SOCKET
;

381 
	`debug
(
sockës
, ("sockë_li°í:Üi°í o¿sockë %d\n", 
fd
));

383  
EESUCCESS
;

384 
	}
}

389 
sockë_ac˚±
 
	$P3
(, 
fd
, 
svÆue_t
 *, 
ªad_ˇŒback
, svÆue_à*, 
wrôe_ˇŒback
)

391 
Àn
, 
ac˚±_fd
, 
i
;

392 
sockaddr_ö
 
sö
;

394 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

395  
EEFDRANGE
;

396 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

397 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

398  
EEBADF
;

399 i‡(
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

400  
EESECURITY
;

401 i‡(
Õc_socks
[
fd
].
mode
 =
DATAGRAM
)

402  
EEMODENOTSUPP
;

403 i‡(
Õc_socks
[
fd
].
°©e
 !
STATE_LISTEN
)

404  
EENOTLISTN
;

406 
Õc_socks
[
fd
].
Êags
 &~
S_WACCEPT
;

408 
Àn
 = (
sö
);

409 
ac˚±_fd
 = 
	`ac˚±
(
Õc_socks
[
fd
].fd, (
sockaddr
 *Ë& 
sö
, (*Ë&
Àn
);

410 i‡(
ac˚±_fd
 == -1) {

411 
sockë_î∫o
) {

412 #ifde‡
EWOULDBLOCK


413 
EWOULDBLOCK
:

414  
EEWOULDBLOCK
;

416 
EINTR
:

417  
EEINTR
;

419 
	`sockë_≥º‹
("socket_accept:áccept", 0);

420  
EEACCEPT
;

430 i‡(
	`£t_sockë_n⁄blockög
(
ac˚±_fd
, 1) == -1) {

431 
	`sockë_≥º‹
("socket_accept: set_socket_nonblocking 1", 0);

432 
	`OS_sockë_˛o£
(
ac˚±_fd
);

433  
EENONBLOCK
;

436 
i
 = 
	`föd_√w_sockë
();

437 i‡(
i
 >= 0) {

438 
fd_£t
 
wmask
;

439 
timevÆ
 
t
;

440 
nb
;

442 
Õc_socks
[
i
].
fd
 = 
ac˚±_fd
;

443 
Õc_socks
[
i
].
Êags
 = 
S_HEADER
 |

444 (
Õc_socks
[
fd
].
Êags
 & 
S_BINARY
);

446 
	`FD_ZERO
(&
wmask
);

447 
	`FD_SET
(
ac˚±_fd
, &
wmask
);

448 
t
.
tv_£c
 = 0;

449 
t
.
tv_u£c
 = 0;

450 #i‚de‡
hpux


451 
nb
 = 
	`£À˘
(
FD_SETSIZE
, (
fd_£t
 *Ë0, &
wmask
, (fd_£à*Ë0, &
t
);

453 
nb
 = 
	`£À˘
(
FD_SETSIZE
, (*Ë0, (*Ë&
wmask
, (*Ë0, &
t
);

455 i‡(!(
	`FD_ISSET
(
ac˚±_fd
, &
wmask
)))

456 
Õc_socks
[
i
].
Êags
 |
S_BLOCKED
;

458 
Õc_socks
[
i
].
mode
 =Üpc_socks[
fd
].mode;

459 
Õc_socks
[
i
].
°©e
 = 
STATE_DATA_XFER
;

460 
Àn
 = (
sö
);

461 i‡(
	`gësock«me
(
Õc_socks
[
i
].
fd
, (
sockaddr
 *)&Õc_socks[i].
l_addr
, &
Àn
) == -1) {

462 
Õc_socks
[
i
].
l_addr
 =Üpc_socks[
fd
].l_addr;

464 
Õc_socks
[
i
].
r_addr
 = 
sö
;

465 
Õc_socks
[
i
].
ow√r_ob
 = 
NULL
;

466 
Õc_socks
[
i
].
ªÀa£_ob
 = 
NULL
;

467 
Õc_socks
[
i
].
r_buf
 = 
NULL
;

468 
Õc_socks
[
i
].
r_off
 = 0;

469 
Õc_socks
[
i
].
r_Àn
 = 0;

470 
Õc_socks
[
i
].
w_buf
 = 
NULL
;

471 
Õc_socks
[
i
].
w_off
 = 0;

472 
Õc_socks
[
i
].
w_Àn
 = 0;

474 
Õc_socks
[
i
].
ow√r_ob
 = 
cuºít_obje˘
;

475 
	`£t_ªad_ˇŒback
(
i
, 
ªad_ˇŒback
);

476 
	`£t_wrôe_ˇŒback
(
i
, 
wrôe_ˇŒback
);

477 
	`c›y_˛o£_ˇŒback
(
i
, 
fd
);

479 
cuºít_obje˘
->
Êags
 |
O_EFUN_SOCKET
;

481 
	`debug
(
sockës
, ("sockë_ac˚±:ác˚± o¿sockë %d\n", 
fd
));

482 
	`debug
(
sockës
, ("sockë_ac˚±:Çew sockë %d o¿fd %d\n", 
i
, 
ac˚±_fd
));

484 
	`OS_sockë_˛o£
(
ac˚±_fd
);

486  
i
;

487 
	}
}

492 
sockë_c⁄√˘
 
	$P4
(, 
fd
, *, 
«me
, 
svÆue_t
 *, 
ªad_ˇŒback
, svÆue_à*, 
wrôe_ˇŒback
)

494 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

495  
EEFDRANGE
;

496 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

497 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

498  
EEBADF
;

499 i‡(
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

500  
EESECURITY
;

501 i‡(
Õc_socks
[
fd
].
mode
 =
DATAGRAM
)

502  
EEMODENOTSUPP
;

503 
Õc_socks
[
fd
].
°©e
) {

504 
STATE_CLOSED
:

505 
STATE_FLUSHING
:

506 
STATE_UNBOUND
:

507 
STATE_BOUND
:

509 
STATE_LISTEN
:

510  
EEISLISTEN
;

511 
STATE_DATA_XFER
:

512  
EEISCONN
;

515 i‡(!
	`sockë_«me_to_sö
(
«me
, &
Õc_socks
[
fd
].
r_addr
))

516  
EEBADADDR
;

518 
	`£t_ªad_ˇŒback
(
fd
, 
ªad_ˇŒback
);

519 
	`£t_wrôe_ˇŒback
(
fd
, 
wrôe_ˇŒback
);

521 
cuºít_obje˘
->
Êags
 |
O_EFUN_SOCKET
;

523 #ifde‡
WINSOCK


525 i‡(
	`£t_sockë_n⁄blockög
(
Õc_socks
[
fd
].fd, 0) == -1) {

526 
	`sockë_≥º‹
("socket_connect: set_socket_nonblocking 0", 0);

527 
	`OS_sockë_˛o£
(
fd
);

528  
EENONBLOCK
;

531 i‡(
	`c⁄√˘
(
Õc_socks
[
fd
].fd, (
sockaddr
 *Ë&Üpc_socks[fd].
r_addr
,

532 (
sockaddr_ö
)) == -1) {

533 
sockë_î∫o
) {

534 
EINTR
:

535  
EEINTR
;

536 
EADDRINUSE
:

537  
EEADDRINUSE
;

538 
EALREADY
:

539  
EEALREADY
;

540 
ECONNREFUSED
:

541  
EECONNREFUSED
;

542 
EINPROGRESS
:

545 
	`sockë_≥º‹
("socket_connect: connect", 0);

546  
EECONNECT
;

549 #ifde‡
WINSOCK


550 i‡(
	`£t_sockë_n⁄blockög
(
Õc_socks
[
fd
].fd, 1) == -1) {

551 
	`sockë_≥º‹
("socket_connect: set_socket_nonblocking 1", 0);

552 
	`OS_sockë_˛o£
(
fd
);

553  
EENONBLOCK
;

556 
Õc_socks
[
fd
].
°©e
 = 
STATE_DATA_XFER
;

557 
Õc_socks
[
fd
].
Êags
 |
S_BLOCKED
;

559  
EESUCCESS
;

560 
	}
}

565 
sockë_wrôe
 
	$P3
(, 
fd
, 
svÆue_t
 *, 
mesßge
, *, 
«me
)

567 
Àn
, 
off
;

568 *
buf
, *
p
;

569 
sockaddr_ö
 
sö
;

571 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

572  
EEFDRANGE
;

573 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

574 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

575  
EEBADF
;

576 i‡(
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

577  
EESECURITY
;

578 i‡(
Õc_socks
[
fd
].
mode
 =
DATAGRAM
) {

579 i‡(
«me
 =
NULL
)

580  
EENOADDR
;

581 i‡(!
	`sockë_«me_to_sö
(
«me
, &
sö
))

582  
EEBADADDR
;

584 i‡(
Õc_socks
[
fd
].
°©e
 !
STATE_DATA_XFER
)

585  
EENOTCONN
;

586 i‡(
«me
 !
NULL
)

587  
EEBADADDR
;

588 i‡(
Õc_socks
[
fd
].
Êags
 & 
S_BLOCKED
)

589  
EEALREADY
;

592 
Õc_socks
[
fd
].
mode
) {

594 
MUD
:

595 
mesßge
->
ty≥
) {

597 
T_OBJECT
:

598  
EETYPENOTSUPP
;

601 
ßve_svÆue_dïth
 = 0;

602 
Àn
 = 
	`svÆue_ßve_size
(
mesßge
);

603 i‡(
ßve_svÆue_dïth
 > 
MAX_SAVE_SVALUE_DEPTH
) {

604  
EEBADDATA
;

606 
buf
 = (*)

607 
	`DMALLOC
(
Àn
 + 5, 
TAG_TEMPORARY
, "socket_write: default");

608 i‡(
buf
 =
NULL
)

609 
	`Áèl
("Out of memory");

610 *(
INT_32
 *Ë
buf
 = 
	`ht⁄l
((Ë
Àn
);

611 
Àn
 += 4;

612 
buf
[4] = '\0';

613 
p
 = 
buf
 + 4;

614 
	`ßve_svÆue
(
mesßge
, &
p
);

619 
STREAM
:

620 
mesßge
->
ty≥
) {

621 #i‚de‡
NO_BUFFER_TYPE


622 
T_BUFFER
:

623 
Àn
 = 
mesßge
->
u
.
buf
->
size
;

624 
buf
 = (*Ë
	`DMALLOC
(
Àn
, 
TAG_TEMPORARY
, "socket_write: T_BUFFER");

625 i‡(
buf
 =
NULL
)

626 
	`Áèl
("Out of memory");

627 
	`mem˝y
(
buf
, 
mesßge
->
u
.buf->
ôem
, 
Àn
);

630 
T_STRING
:

631 
Àn
 = 
	`SVALUE_STRLEN
(
mesßge
);

632 
buf
 = (*Ë
	`DMALLOC
(
Àn
 + 1, 
TAG_TEMPORARY
, "socket_write: T_STRING");

633 i‡(
buf
 =
NULL
)

634 
	`Áèl
("Out of memory");

635 
	`°r˝y
(
buf
, 
mesßge
->
u
.
°rög
);

637 
T_ARRAY
:

639 
i
, 
limô
;

640 
svÆue_t
 *
ñ
;

642 
Àn
 = 
mesßge
->
u
.
¨r
->
size
 * ();

643 
buf
 = (*Ë
	`DMALLOC
(
Àn
 + 1, 
TAG_TEMPORARY
, "socket_write: T_ARRAY");

644 i‡(
buf
 =
NULL
)

645 
	`Áèl
("Out of memory");

646 
ñ
 = 
mesßge
->
u
.
¨r
->
ôem
;

647 
limô
 = 
Àn
 / ();

648 
i
 = 0; i < 
limô
; i++) {

649 
ñ
[
i
].
ty≥
) {

650 
T_NUMBER
:

651 
	`mem˝y
((*Ë&
buf
[
i
 * ()],

652 (*Ë&
ñ
[
i
].
u
.
numbî
, ());

654 
T_REAL
:

655 
	`mem˝y
((*Ë&
buf
[
i
 * ()], (*Ë&
ñ
[i].
u
.
ªÆ
,

665  
EETYPENOTSUPP
;

669 
DATAGRAM
:

670 
mesßge
->
ty≥
) {

672 
T_STRING
:

673 i‡((
off
 = 
	`£ndto
(
Õc_socks
[
fd
].fd, (*)
mesßge
->
u
.
°rög
,

674 
	`°æí
(
mesßge
->
u
.
°rög
) + 1, 0,

675 (
sockaddr
 *Ë& 
sö
, (sin))) == -1) {

676 
	`sockë_≥º‹
("socket_write: sendto", 0);

677  
EESENDTO
;

681 #i‚de‡
NO_BUFFER_TYPE


682 
T_BUFFER
:

683 i‡((
off
 = 
	`£ndto
(
Õc_socks
[
fd
].fd, (*)
mesßge
->
u
.
buf
->
ôem
,

684 
mesßge
->
u
.
buf
->
size
, 0,

685 (
sockaddr
 *Ë& 
sö
, (sin))) == -1) {

686 
	`sockë_≥º‹
("socket_write: sendto", 0);

687  
EESENDTO
;

693  
EETYPENOTSUPP
;

696 #ifde‡
F_NETWORK_STATS


697 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

698 
öë_out_∑ckës
++;

699 
öë_out_vﬁume
 +
off
;

700 
öë_sockë_out_∑ckës
++;

701 
öë_sockë_out_vﬁume
 +
off
;

704  
EESUCCESS
;

707  
EEMODENOTSUPP
;

710 i‡(!
Àn
) {

711 
	`FREE
(
buf
);

712  
EESUCCESS
;

714 
off
 = 
	`OS_sockë_wrôe
(
Õc_socks
[
fd
].fd, 
buf
, 
Àn
);

715 i‡(
off
 <= 0) {

716 
	`FREE
(
buf
);

718 #ifde‡
EWOULDBLOCK


719 i‡(
off
 =-1 && 
sockë_î∫o
 =
EWOULDBLOCK
)

720  
EEWOULDBLOCK
;

722 i‡(
off
 =-1 && 
sockë_î∫o
 =
EINTR
)

723  
EEINTR
;

725 
	`sockë_≥º‹
("socket_write: send", 0);

726 
Õc_socks
[
fd
].
Êags
 |
S_LINKDEAD
;

727 
	`sockë_˛o£
(
fd
, 
SC_FORCE
 | 
SC_DO_CALLBACK
 | 
SC_FINAL_CLOSE
);

728  
EESEND
;

731 #ifde‡
F_NETWORK_STATS


732 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

733 
öë_out_∑ckës
++;

734 
öë_out_vﬁume
 +
off
;

735 
öë_sockë_out_∑ckës
++;

736 
öë_sockë_out_vﬁume
 +
off
;

740 i‡(
off
 < 
Àn
) {

741 
Õc_socks
[
fd
].
Êags
 |
S_BLOCKED
;

742 
Õc_socks
[
fd
].
w_buf
 = 
buf
;

743 
Õc_socks
[
fd
].
w_off
 = 
off
;

744 
Õc_socks
[
fd
].
w_Àn
 = 
Àn
 - 
off
;

745  
EECALLBACK
;

747 
	`FREE
(
buf
);

749  
EESUCCESS
;

750 
	}
}

754 
ˇŒ_ˇŒback
 
	$P3
(, 
fd
, , 
wh©
, , 
num_¨g
)

756 
°rög_‹_func
 
ˇŒback
;

758 
wh©
) {

759 
S_READ_FP
: 
ˇŒback
 = 
Õc_socks
[
fd
].
ªad_ˇŒback
; ;

760 
S_WRITE_FP
: 
ˇŒback
 = 
Õc_socks
[
fd
].
wrôe_ˇŒback
; ;

761 
S_CLOSE_FP
: 
ˇŒback
 = 
Õc_socks
[
fd
].
˛o£_ˇŒback
; ;

764 i‡(
Õc_socks
[
fd
].
Êags
 & 
wh©
) {

765 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
ˇŒback
.
f
, 
num_¨g
);

766 } i‡(
ˇŒback
.
s
) {

767 i‡(
ˇŒback
.
s
[0] =
APPLY___INIT_SPECIAL_CHAR
)

768 
	`îr‹
("Illegal functionÇame.\n");

769 
	`ß„_≠∂y
(
ˇŒback
.
s
, 
Õc_socks
[
fd
].
ow√r_ob
, 
num_¨g
, 
ORIGIN_INTERNAL
);

771 
	}
}

776 
sockë_ªad_£À˘_h™dÀr
 
	$P1
(, 
fd
)

778 
cc
 = 0, 
addæí
;

779 
buf
[
BUF_SIZE
], 
addr
[
ADDR_BUF_SIZE
];

780 
svÆue_t
 
vÆue
;

781 
sockaddr_ö
 
sö
;

783 
	`debug
(
sockës
, ("read_socket_handler: fd %d state %d\n",

784 
fd
, 
Õc_socks
[fd].
°©e
));

786 
Õc_socks
[
fd
].
°©e
) {

788 
STATE_CLOSED
:

789 
STATE_FLUSHING
:

792 
STATE_UNBOUND
:

793 
	`debug_mesßge
("sockë_ªad_£À˘_h™dÀr:Ñód o¿unbound sockë %i\n", 
fd
);

796 
STATE_BOUND
:

797 
Õc_socks
[
fd
].
mode
) {

799 
MUD
:

800 
STREAM
:

803 
DATAGRAM
:

804 
	`debug
(
sockës
, ("read_socket_handler: DATA_XFER DATAGRAM\n"));

805 
addæí
 = (
sö
);

806 
cc
 = 
	`ªcv‰om
(
Õc_socks
[
fd
].fd, 
buf
, (buf) - 1, 0,

807 (
sockaddr
 *Ë& 
sö
, &
addæí
);

808 i‡(
cc
 <= 0)

810 #ifde‡
F_NETWORK_STATS


811 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

812 
öë_ö_∑ckës
++;

813 
öë_ö_vﬁume
 +
cc
;

814 
öë_sockë_ö_∑ckës
++;

815 
öë_sockë_ö_vﬁume
++;

818 
	`debug
(
sockës
, ("ªad_sockë_h™dÀr:Ñód %d byãs\n", 
cc
));

819 
buf
[
cc
] = '\0';

820 
	`•rötf
(
addr
, "%†%d", 
	`öë_¡ﬂ
(
sö
.
sö_addr
),

821 ()
	`¡ohs
(
sö
.
sö_p‹t
));

822 
	`push_numbî
(
fd
);

823 #i‚de‡
NO_BUFFER_TYPE


824 i‡(
Õc_socks
[
fd
].
Êags
 & 
S_BINARY
) {

825 
buf„r_t
 *
b
;

827 
b
 = 
	`Æloˇã_buf„r
(
cc
);

828 i‡(
b
) {

829 
	`mem˝y
(
b
->
ôem
, 
buf
, 
cc
);

830 
	`push_ª„d_buf„r
(
b
);

832 
	`push_numbî
(0);

836 
	`c›y_™d_push_°rög
(
buf
);

837 #i‚de‡
NO_BUFFER_TYPE


840 
	`c›y_™d_push_°rög
(
addr
);

841 
	`debug
(
sockës
, ("read_socket_handler:ápply\n"));

842 
	`ˇŒ_ˇŒback
(
fd
, 
S_READ_FP
, 3);

844 
STREAM_BINARY
:

845 
DATAGRAM_BINARY
:

850 
STATE_LISTEN
:

851 
	`debug
(
sockës
, ("read_socket_handler:ápplyÑead callback\n"));

852 
Õc_socks
[
fd
].
Êags
 |
S_WACCEPT
;

853 
	`push_numbî
(
fd
);

854 
	`ˇŒ_ˇŒback
(
fd
, 
S_READ_FP
, 1);

857 
STATE_DATA_XFER
:

858 
Õc_socks
[
fd
].
mode
) {

860 
DATAGRAM
:

863 
MUD
:

864 
	`debug
(
sockës
, ("read_socket_handler: DATA_XFER MUD\n"));

865 i‡(
Õc_socks
[
fd
].
Êags
 & 
S_HEADER
) {

866 
cc
 = 
	`OS_sockë_ªad
(
Õc_socks
[
fd
].fd, (*Ë&Õc_socks[fd].
r_Àn
 +

867 
Õc_socks
[
fd
].
r_off
, 4 -Üpc_socks[fd].r_off);

868 i‡(
cc
 <= 0)

870 #ifde‡
F_NETWORK_STATS


871 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

872 
öë_ö_∑ckës
++;

873 
öë_ö_vﬁume
 +
cc
;

874 
öë_sockë_ö_∑ckës
++;

875 
öë_sockë_ö_vﬁume
 +
cc
;

878 
	`debug
(
sockës
, ("ªad_sockë_h™dÀr:Ñód %d byãs\n", 
cc
));

879 
Õc_socks
[
fd
].
r_off
 +
cc
;

880 i‡(
Õc_socks
[
fd
].
r_off
 != 4)

882 
	`debug
(
sockës
, ("read_socket_handler:Ñead header\n"));

883 
Õc_socks
[
fd
].
Êags
 &~
S_HEADER
;

884 
Õc_socks
[
fd
].
r_off
 = 0;

885 
Õc_socks
[
fd
].
r_Àn
 = 
	`¡ohl
(lpc_socks[fd].r_len);

886 i‡(
Õc_socks
[
fd
].
r_Àn
 <0 ||Üpc_socks[fd].r_À¿> 
MAX_BYTE_TRANSFER
)

888 
Õc_socks
[
fd
].
r_buf
 = (*)

889 
	`DMALLOC
(
Õc_socks
[
fd
].
r_Àn
 + 1, 
TAG_TEMPORARY
, "socket_read_select_handler");

890 i‡(
Õc_socks
[
fd
].
r_buf
 =
NULL
)

891 
	`Áèl
("Out of memory");

892 
	`debug
(
sockës
, ("read_socket_handler: svalueÜen is %lu\n",

893 
Õc_socks
[
fd
].
r_Àn
));

895 i‡(
Õc_socks
[
fd
].
r_off
 <Üpc_socks[fd].
r_Àn
) {

896 
cc
 = 
	`OS_sockë_ªad
(
Õc_socks
[
fd
].fd,Üpc_socks[fd].
r_buf
 +

897 
Õc_socks
[
fd
].
r_off
,Üpc_socks[fd].
r_Àn
 -

898 
Õc_socks
[
fd
].
r_off
);

899 i‡(
cc
 <= 0)

901 #ifde‡
F_NETWORK_STATS


902 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

903 
öë_ö_∑ckës
++;

904 
öë_ö_vﬁume
 +
cc
;

905 
öë_sockë_ö_∑ckës
++;

906 
öë_sockë_ö_vﬁume
 +
cc
;

909 
	`debug
(
sockës
, ("ªad_sockë_h™dÀr:Ñód %d byãs\n", 
cc
));

910 
Õc_socks
[
fd
].
r_off
 +
cc
;

911 i‡(
Õc_socks
[
fd
].
r_off
 !Õc_socks[fd].
r_Àn
)

913 
	`debug
(
sockës
, ("read_socket_handler:Ñead svalue\n"));

915 
Õc_socks
[
fd
].
r_buf
[Õc_socks[fd].
r_Àn
] = '\0';

916 
vÆue
 = 
c⁄°0
;

917 
	`push_numbî
(
fd
);

918 i‡(
	`ª°‹e_svÆue
(
Õc_socks
[
fd
].
r_buf
, &
vÆue
) == 0) {

919 
STACK_INC
;

920 *
•
 = 
vÆue
;

922 
	`push_undeföed
();

924 
	`FREE
(
Õc_socks
[
fd
].
r_buf
);

925 
Õc_socks
[
fd
].
Êags
 |
S_HEADER
;

926 
Õc_socks
[
fd
].
r_buf
 = 
NULL
;

927 
Õc_socks
[
fd
].
r_off
 = 0;

928 
Õc_socks
[
fd
].
r_Àn
 = 0;

929 
	`debug
(
sockës
, ("read_socket_handler:ápplyÑead callback\n"));

930 
	`ˇŒ_ˇŒback
(
fd
, 
S_READ_FP
, 2);

933 
STREAM
:

934 
	`debug
(
sockës
, ("read_socket_handler: DATA_XFER STREAM\n"));

935 
cc
 = 
	`OS_sockë_ªad
(
Õc_socks
[
fd
].fd, 
buf
, (buf) - 1);

936 i‡(
cc
 <= 0)

938 #ifde‡
F_NETWORK_STATS


939 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

940 
öë_ö_∑ckës
++;

941 
öë_ö_vﬁume
 +
cc
;

942 
öë_sockë_ö_∑ckës
++;

943 
öë_sockë_ö_vﬁume
 +
cc
;

946 
	`debug
(
sockës
, ("ªad_sockë_h™dÀr:Ñód %d byãs\n", 
cc
));

947 
buf
[
cc
] = '\0';

948 
	`push_numbî
(
fd
);

949 #i‚de‡
NO_BUFFER_TYPE


950 i‡(
Õc_socks
[
fd
].
Êags
 & 
S_BINARY
) {

951 
buf„r_t
 *
b
;

953 
b
 = 
	`Æloˇã_buf„r
(
cc
);

954 i‡(
b
) {

955 
b
->
ªf
--;

956 
	`mem˝y
(
b
->
ôem
, 
buf
, 
cc
);

957 
	`push_buf„r
(
b
);

959 
	`push_numbî
(0);

963 
	`c›y_™d_push_°rög
(
buf
);

964 #i‚de‡
NO_BUFFER_TYPE


967 
	`debug
(
sockës
, ("read_socket_handler:ápplyÑead callback\n"));

968 
	`ˇŒ_ˇŒback
(
fd
, 
S_READ_FP
, 2);

970 
STREAM_BINARY
:

971 
DATAGRAM_BINARY
:

976 i‡(
cc
 == -1) {

977 
sockë_î∫o
) {

978 
ECONNREFUSED
:

984 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_BOUND


985 && 
Õc_socks
[
fd
].
mode
 =
DATAGRAM
)

988 
EINTR
:

989 #ifde‡
EWOULDBLOCK


990 
EWOULDBLOCK
:

998 
Õc_socks
[
fd
].
Êags
 |
S_LINKDEAD
;

999 
	`sockë_˛o£
(
fd
, 
SC_FORCE
 | 
SC_DO_CALLBACK
 | 
SC_FINAL_CLOSE
);

1000 
	}
}

1005 
sockë_wrôe_£À˘_h™dÀr
 
	$P1
(, 
fd
)

1007 
cc
;

1009 
	`debug
(
sockës
, ("write_socket_handler: fd %d state %d\n",

1010 
fd
, 
Õc_socks
[fd].
°©e
));

1014 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_BLOCKED
Ë||Üpc_socks[fd].Êag†& 
S_LINKDEAD
)

1017 i‡(
Õc_socks
[
fd
].
w_buf
 !
NULL
) {

1018 
cc
 = 
	`OS_sockë_wrôe
(
Õc_socks
[
fd
].fd,

1019 
Õc_socks
[
fd
].
w_buf
 +Üpc_socks[fd].
w_off
,

1020 
Õc_socks
[
fd
].
w_Àn
);

1021 i‡(
cc
 <= -1) {

1022 i‡(
cc
 == -1 && (

1023 #ifde‡
EWOULDBLOCK


1024 
î∫o
 =
EWOULDBLOCK
 ||

1026 
î∫o
 =
EINTR
)) {

1030 
Õc_socks
[
fd
].
Êags
 |
S_LINKDEAD
;

1031 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
) {

1032 
Õc_socks
[
fd
].
Êags
 &~
S_BLOCKED
;

1033 
	`sockë_˛o£
(
fd
, 
SC_FORCE
 | 
SC_FINAL_CLOSE
);

1036 
	`sockë_˛o£
(
fd
, 
SC_FORCE
 | 
SC_DO_CALLBACK
 | 
SC_FINAL_CLOSE
);

1039 #ifde‡
F_NETWORK_STATS


1040 i‡(!(
Õc_socks
[
fd
].
Êags
 & 
S_EXTERNAL
)) {

1041 
öë_out_∑ckës
++;

1042 
öë_out_vﬁume
 +
cc
;

1043 
öë_sockë_out_∑ckës
++;

1044 
öë_sockë_out_vﬁume
 +
cc
;

1047 
Õc_socks
[
fd
].
w_off
 +
cc
;

1048 
Õc_socks
[
fd
].
w_Àn
 -
cc
;

1049 i‡(
Õc_socks
[
fd
].
w_Àn
 != 0)

1051 
	`FREE
(
Õc_socks
[
fd
].
w_buf
);

1052 
Õc_socks
[
fd
].
w_buf
 = 
NULL
;

1053 
Õc_socks
[
fd
].
w_off
 = 0;

1055 
Õc_socks
[
fd
].
Êags
 &~
S_BLOCKED
;

1056 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
) {

1057 
	`sockë_˛o£
(
fd
, 
SC_FORCE
 | 
SC_FINAL_CLOSE
);

1061 
	`debug
(
sockës
, ("write_socket_handler:ápply write_callback\n"));

1063 
	`push_numbî
(
fd
);

1064 
	`ˇŒ_ˇŒback
(
fd
, 
S_WRITE_FP
, 1);

1065 
	}
}

1070 
sockë_˛o£
 
	$P2
(, 
fd
, , 
Êags
)

1072 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

1073  
EEFDRANGE
;

1074 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
)

1075  
EEBADF
;

1076 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
 && !(
Êags
 & 
SC_FINAL_CLOSE
))

1077  
EEBADF
;

1078 i‡(!(
Êags
 & 
SC_FORCE
Ë&& 
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

1079  
EESECURITY
;

1081 i‡(
Êags
 & 
SC_DO_CALLBACK
) {

1082 
	`debug
(
sockës
, ("read_socket_handler:ápply close callback\n"));

1083 
	`push_numbî
(
fd
);

1084 
	`ˇŒ_ˇŒback
(
fd
, 
S_CLOSE_FP
, 1);

1087 
	`£t_ªad_ˇŒback
(
fd
, 0);

1088 
	`£t_wrôe_ˇŒback
(
fd
, 0);

1089 
	`£t_˛o£_ˇŒback
(
fd
, 0);

1092 i‡((
Õc_socks
[
fd
].
Êags
 & 
S_BLOCKED
Ë&& !÷pc_socks[fd].Êag†& 
S_LINKDEAD
)) {

1096 
Õc_socks
[
fd
].
°©e
 = 
STATE_FLUSHING
;

1097  
EESUCCESS
;

1100 
	`OS_sockë_˛o£
(
Õc_socks
[
fd
].fdË=-1 && 
sockë_î∫o
 =
EINTR
)

1102 i‡(
Õc_socks
[
fd
].
r_buf
 !
NULL
)

1103 
	`FREE
(
Õc_socks
[
fd
].
r_buf
);

1104 i‡(
Õc_socks
[
fd
].
w_buf
 !
NULL
)

1105 
	`FREE
(
Õc_socks
[
fd
].
w_buf
);

1106 
	`˛ór_sockë
(
fd
, 1);

1108 
	`debug
(
sockës
, ("sockë_˛o£: clo£d fd %d\n", 
fd
));

1109  
EESUCCESS
;

1110 
	}
}

1112 #ifde‡
PACKAGE_SOCKETS


1117 
sockë_ªÀa£
 
	$P3
(, 
fd
, 
obje˘_t
 *, 
ob
, 
svÆue_t
 *, 
ˇŒback
)

1119 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

1120  
EEFDRANGE
;

1121 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

1122 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

1123  
EEBADF
;

1124 i‡(
Õc_socks
[
fd
].
ow√r_ob
 !
cuºít_obje˘
)

1125  
EESECURITY
;

1126 i‡(
Õc_socks
[
fd
].
Êags
 & 
S_RELEASE
)

1127  
EESOCKRLSD
;

1129 
Õc_socks
[
fd
].
Êags
 |
S_RELEASE
;

1130 
Õc_socks
[
fd
].
ªÀa£_ob
 = 
ob
;

1132 
	`push_numbî
(
fd
);

1133 
	`push_obje˘
(
ob
);

1135 i‡(
ˇŒback
->
ty≥
 =
T_FUNCTION
)

1136 
	`ß„_ˇŒ_fun˘i⁄_poöãr
(
ˇŒback
->
u
.
Â
, 2);

1138 
	`ß„_≠∂y
(
ˇŒback
->
u
.
°rög
, 
ob
, 2, 
ORIGIN_INTERNAL
);

1140 i‡((
Õc_socks
[
fd
].
Êags
 & 
S_RELEASE
) == 0)

1141  
EESUCCESS
;

1143 
Õc_socks
[
fd
].
Êags
 &~
S_RELEASE
;

1144 
Õc_socks
[
fd
].
ªÀa£_ob
 = 
NULL
;

1146  
EESOCKNOTRLSD
;

1147 
	}
}

1152 
sockë_acquúe
 
	$P4
(, 
fd
, 
svÆue_t
 *, 
ªad_ˇŒback
, svÆue_à*, 
wrôe_ˇŒback
, svÆue_à*, 
˛o£_ˇŒback
)

1154 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

1155  
EEFDRANGE
;

1156 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

1157 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

1158  
EEBADF
;

1159 i‡((
Õc_socks
[
fd
].
Êags
 & 
S_RELEASE
) == 0)

1160  
EESOCKNOTRLSD
;

1161 i‡(
Õc_socks
[
fd
].
ªÀa£_ob
 !
cuºít_obje˘
)

1162  
EESECURITY
;

1164 
Õc_socks
[
fd
].
Êags
 &~
S_RELEASE
;

1165 
Õc_socks
[
fd
].
ow√r_ob
 = 
cuºít_obje˘
;

1166 
Õc_socks
[
fd
].
ªÀa£_ob
 = 
NULL
;

1168 
	`£t_ªad_ˇŒback
(
fd
, 
ªad_ˇŒback
);

1169 
	`£t_wrôe_ˇŒback
(
fd
, 
wrôe_ˇŒback
);

1170 
	`£t_˛o£_ˇŒback
(
fd
, 
˛o£_ˇŒback
);

1172  
EESUCCESS
;

1173 
	}
}

1178 *
sockë_îr‹
 
	$P1
(, 
îr‹
)

1180 
îr‹
 = -(error + 1);

1181 i‡(
îr‹
 < 0 ||Éº‹ >
ERROR_STRINGS
 - 1)

1183  
îr‹_°rögs
[
îr‹
];

1184 
	}
}

1189 
gë_sockë_addªss
 
	$P4
(, 
fd
, *, 
addr
, *, 
p‹t
, , 
loˇl
)

1191 
sockaddr_ö
 *
addr_ö
;

1193 i‡(
fd
 < 0 || fd >
max_Õc_socks
) {

1194 
addr
[0] = '\0';

1195 *
p‹t
 = 0;

1196  
EEFDRANGE
;

1198 
addr_ö
 = (
loˇl
 ? &
Õc_socks
[
fd
].
l_addr
 : &Õc_socks[fd].
r_addr
);

1199 *
p‹t
 = (Ë
	`¡ohs
(
addr_ö
->
sö_p‹t
);

1200 
	`°r˝y
(
addr
, 
	`öë_¡ﬂ
(
addr_ö
->
sö_addr
));

1201  
EESUCCESS
;

1202 
	}
}

1207 
obje˘_t
 *
gë_sockë_ow√r
 
	$P1
(, 
fd
)

1209 i‡(
fd
 < 0 || fd >
max_Õc_socks
)

1210  (
obje˘_t
 *Ë
NULL
;

1211 i‡(
Õc_socks
[
fd
].
°©e
 =
STATE_CLOSED
 ||

1212 
Õc_socks
[
fd
].
°©e
 =
STATE_FLUSHING
)

1213  (
obje˘_t
 *Ë
NULL
;

1214  
Õc_socks
[
fd
].
ow√r_ob
;

1215 
	}
}

1222 
assign_sockë_ow√r
 
	$P2
(
svÆue_t
 *, 
sv
, 
obje˘_t
 *, 
ob
)

1224 i‡(
ob
 !
NULL
) {

1225 
sv
->
ty≥
 = 
T_OBJECT
;

1226 
sv
->
u
.
ob
 = ob;

1227 
	`add_ªf
(
ob
, "assign_socket_owner");

1229 
	`assign_svÆue_no_‰ì
(
sv
, &
c⁄°0u
);

1230 
	}
}

1232 #ifde‡
PACKAGE_SOCKETS


1237 
sockë_«me_to_sö
 
	$P2
(*, 
«me
, 
sockaddr_ö
 *, 
sö
)

1239 
p‹t
;

1240 *
˝
, 
addr
[
ADDR_BUF_SIZE
];

1242 
	`°∫˝y
(
addr
, 
«me
, 
ADDR_BUF_SIZE
);

1243 
addr
[
ADDR_BUF_SIZE
 - 1] = '\0';

1245 
˝
 = 
	`°rchr
(
addr
, ' ');

1246 i‡(
˝
 =
NULL
)

1249 *
˝
 = '\0';

1250 
p‹t
 = 
	`©oi
(
˝
 + 1);

1252 
sö
->
sö_Ámûy
 = 
AF_INET
;

1253 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
p‹t
);

1254 
sö
->
sö_addr
.
s_addr
 = 
	`öë_addr
(
addr
);

1257 
	}
}

1264 
˛o£_ª„ªncög_sockës
 
	$P1
(
obje˘_t
 *, 
ob
)

1266 
i
;

1268 
i
 = 0; i < 
max_Õc_socks
; i++)

1269 i‡(
Õc_socks
[
i
].
ow√r_ob
 =
ob
 &&

1270 
Õc_socks
[
i
].
°©e
 !
STATE_CLOSED
 &&

1271 
Õc_socks
[
i
].
°©e
 !
STATE_FLUSHING
)

1272 
	`sockë_˛o£
(
i
, 
SC_FORCE
);

1273 
	}
}

1275 #ifde‡
PACKAGE_SOCKETS


1280 *
öë_addªss
 
	$P1
(
sockaddr_ö
 *, 
sö
)

1282 
addr
[23], 
p‹t
[7];

1284 i‡(
	`¡ohl
(
sö
->
sö_addr
.
s_addr
Ë=
INADDR_ANY
)

1285 
	`°r˝y
(
addr
, "*");

1287 
	`°r˝y
(
addr
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
));

1288 
	`°rˇt
(
addr
, ".");

1289 i‡(
	`¡ohs
(
sö
->
sö_p‹t
) == 0)

1290 
	`°r˝y
(
p‹t
, "*");

1292 
	`•rötf
(
p‹t
, "%d", ()
	`¡ohs
(
sö
->
sö_p‹t
));

1293 
	`°rˇt
(
addr
, 
p‹t
);

1295  (
addr
);

1296 
	}
}

1298 *
	gsockë_modes
[] = {

1306 *
	gsockë_°©es
[] = {

1318 
¨øy_t
 *
sockë_°©us
 
	$P1
(, 
which
)

1320 
¨øy_t
 *
ªt
;

1322 i‡(
which
 < 0 || which >
max_Õc_socks
)  0;

1324 
ªt
 = 
	`Æloˇã_em±y_¨øy
(6);

1326 
ªt
->
ôem
[0].
ty≥
 = 
T_NUMBER
;

1327 
ªt
->
ôem
[0].
subty≥
 = 0;

1328 
ªt
->
ôem
[0].
u
.
numbî
 = 
Õc_socks
[
which
].
fd
;

1330 
ªt
->
ôem
[1].
ty≥
 = 
T_STRING
;

1331 
ªt
->
ôem
[1].
subty≥
 = 
STRING_CONSTANT
;

1332 
ªt
->
ôem
[1].
u
.
°rög
 = 
sockë_°©es
[
Õc_socks
[
which
].
°©e
];

1334 
ªt
->
ôem
[2].
ty≥
 = 
T_STRING
;

1335 
ªt
->
ôem
[2].
subty≥
 = 
STRING_CONSTANT
;

1336 
ªt
->
ôem
[2].
u
.
°rög
 = 
sockë_modes
[
Õc_socks
[
which
].
mode
];

1338 
ªt
->
ôem
[3].
ty≥
 = 
T_STRING
;

1339 
ªt
->
ôem
[3].
subty≥
 = 
STRING_MALLOC
;

1340 
ªt
->
ôem
[3].
u
.
°rög
 = 
	`°rög_c›y
(
	`öë_addªss
(&
Õc_socks
[
which
].
l_addr
),

1343 
ªt
->
ôem
[4].
ty≥
 = 
T_STRING
;

1344 
ªt
->
ôem
[4].
subty≥
 = 
STRING_MALLOC
;

1345 
ªt
->
ôem
[4].
u
.
°rög
 = 
	`°rög_c›y
(
	`öë_addªss
(&
Õc_socks
[
which
].
r_addr
),

1348 i‡(
Õc_socks
[
which
].
ow√r_ob
 && !÷pc_socks[which].ow√r_ob->
Êags
 & 
O_DESTRUCTED
)) {

1349 
ªt
->
ôem
[5].
ty≥
 = 
T_OBJECT
;

1350 
ªt
->
ôem
[5].
u
.
ob
 = 
Õc_socks
[
which
].
ow√r_ob
;

1351 
	`add_ªf
(
Õc_socks
[
which
].
ow√r_ob
, "socket_status");

1353 
ªt
->
ôem
[5] = 
c⁄°0u
;

1356  
ªt
;

1357 
	}
}

	@socket_efuns.h

7 #i‚de‡
_SOCKET_EFUNS_H_


8 
	#_SOCKET_EFUNS_H_


	)

10 
	~"Õc_ö˛.h
"

11 
	~"√tw‹k_ö˛.h
"

13 
	esockë_mode
 {

14 
	mMUD
, 
	mSTREAM
, 
	mDATAGRAM
, 
	mSTREAM_BINARY
, 
	mDATAGRAM_BINARY


17 
	esockë_°©e
 {

18 
	mSTATE_CLOSED
, 
	mSTATE_FLUSHING
, 
	mSTATE_UNBOUND
, 
	mSTATE_BOUND
, 
	mSTATE_LISTEN
, 
	mSTATE_DATA_XFER


21 
	#BUF_SIZE
 2048

	)

22 
	#ADDR_BUF_SIZE
 64

	)

25 
	mfd
;

26 
	mÊags
;

27 
sockë_mode
 
	mmode
;

28 
sockë_°©e
 
	m°©e
;

29 
sockaddr_ö
 
	ml_addr
;

30 
sockaddr_ö
 
	mr_addr
;

31 
obje˘_t
 *
	mow√r_ob
;

32 
obje˘_t
 *
	mªÀa£_ob
;

33 
°rög_‹_func
 
	mªad_ˇŒback
;

34 
°rög_‹_func
 
	mwrôe_ˇŒback
;

35 
°rög_‹_func
 
	m˛o£_ˇŒback
;

36 *
	mr_buf
;

37 
	mr_off
;

38 
	mr_Àn
;

39 *
	mw_buf
;

40 
	mw_off
;

41 
	mw_Àn
;

42 } 
	tÕc_sockë_t
;

44 
Õc_sockë_t
 *
Õc_socks
;

45 
max_Õc_socks
;

47 
	#S_RELEASE
 0x001

	)

48 
	#S_BLOCKED
 0x002

	)

49 
	#S_HEADER
 0x004

	)

50 
	#S_WACCEPT
 0x008

	)

51 
	#S_BINARY
 0x010

	)

52 
	#S_READ_FP
 0x020

	)

53 
	#S_WRITE_FP
 0x040

	)

54 
	#S_CLOSE_FP
 0x080

	)

55 
	#S_EXTERNAL
 0x100

	)

56 
	#S_LINKDEAD
 0x200

	)

58 
¨øy_t
 *
sockë_°©us
 
PROT
(());

59 
¨øy_t
 *
sockë_°©us_by_fd
 
PROT
(());

60 
check_vÆid_sockë
 
PROT
((*, , 
obje˘_t
 *, *, ));

61 
sockë_ªad_£À˘_h™dÀr
 
PROT
(());

62 
sockë_wrôe_£À˘_h™dÀr
 
PROT
(());

63 
assign_sockë_ow√r
 
PROT
((
svÆue_t
 *, 
obje˘_t
 *));

64 
obje˘_t
 *
gë_sockë_ow√r
 
PROT
(());

65 
dump_sockë_°©us
 
PROT
((
outbuf„r_t
 *));

66 
˛o£_ª„ªncög_sockës
 
PROT
((
obje˘_t
 *));

67 
gë_sockë_addªss
 
PROT
((, *, *, ));

68 
sockë_böd
 
PROT
((, , *));

69 
sockë_¸óã
 
PROT
((
sockë_mode
, 
svÆue_t
 *, svalue_t *));

70 
sockë_li°í
 
PROT
((, 
svÆue_t
 *));

71 
sockë_ac˚±
 
PROT
((, 
svÆue_t
 *, svalue_t *));

72 
sockë_c⁄√˘
 
PROT
((, *, 
svÆue_t
 *, svalue_t *));

73 
sockë_wrôe
 
PROT
((, 
svÆue_t
 *, *));

74 
sockë_˛o£
 
PROT
((, ));

75 
sockë_ªÀa£
 
PROT
((, 
obje˘_t
 *, 
svÆue_t
 *));

76 
sockë_acquúe
 
PROT
((, 
svÆue_t
 *, svalue_t *, svalue_t *));

77 *
sockë_îr‹
 
PROT
(());

78 
föd_√w_sockë
 
PROT
(());

79 
£t_ªad_ˇŒback
 
PROT
((, 
svÆue_t
 *));

80 
£t_wrôe_ˇŒback
 
PROT
((, 
svÆue_t
 *));

81 
£t_˛o£_ˇŒback
 
PROT
((, 
svÆue_t
 *));

	@socket_err.c

7 
	~"ö˛ude/sockë_îr.h
"

9 *
	gîr‹_°rögs
[
ERROR_STRINGS
] =

	@socket_err.h

1 #i‚de‡
SOCKET_ERR_H


2 
	#SOCKET_ERR_H


	)

6 *
îr‹_°rögs
[];

	@spec.h

4 
	#_FUNC_SPEC_


	)

5 
	~"°d.h
"

	@sprintf.c

54 
	~"°d.h
"

55 
	~"•rötf.h
"

56 
	~"efuns_ö˛.h
"

57 
	~"simul_efun.h
"

58 
	~"Àx.h
"

59 
	~"°øŒoc.h
"

60 
	~"ma°î.h
"

61 
	~"sw≠.h
"

63 #i‡
deföed
(
F_SPRINTF
Ë|| deföed(
F_PRINTF
)

65 
	tf‹m©_öfo
;

94 
	#INFO_T
 0xF

	)

95 
	#INFO_T_ERROR
 0x1

	)

96 
	#INFO_T_NULL
 0x2

	)

97 
	#INFO_T_LPC
 0x3

	)

98 
	#INFO_T_STRING
 0x4

	)

99 
	#INFO_T_INT
 0x8

	)

100 
	#INFO_T_CHAR
 0x9

	)

101 
	#INFO_T_OCT
 0xA

	)

102 
	#INFO_T_HEX
 0xB

	)

103 
	#INFO_T_C_HEX
 0xC

	)

104 
	#INFO_T_FLOAT
 0xD

	)

106 
	#INFO_J
 0x30

	)

107 
	#INFO_J_CENTRE
 0x10

	)

108 
	#INFO_J_LEFT
 0x20

	)

110 
	#INFO_PP
 0xC0

	)

111 
	#INFO_PP_SPACE
 0x40

	)

112 
	#INFO_PP_PLUS
 0x80

	)

114 
	#INFO_ARRAY
 0x100

	)

115 
	#INFO_COLS
 0x200

	)

116 
	#INFO_TABLE
 0x400

	)

118 
	#ERR_BUFF_OVERFLOW
 0x1

	)

119 
	#ERR_TOO_FEW_ARGS
 0x2

	)

120 
	#ERR_INVALID_STAR
 0x3

	)

121 
	#ERR_PRES_EXPECTED
 0x4

	)

122 
	#ERR_INVALID_FORMAT_STR
 0x5

	)

123 
	#ERR_INCORRECT_ARG_S
 0x6

	)

124 
	#ERR_CST_REQUIRES_FS
 0x7

	)

125 
	#ERR_BAD_INT_TYPE
 0x8

	)

126 
	#ERR_UNDEFINED_TYPE
 0x9

	)

127 
	#ERR_QUOTE_EXPECTED
 0xA

	)

128 
	#ERR_UNEXPECTED_EOS
 0xB

	)

129 
	#ERR_NULL_PS
 0xC

	)

130 
	#ERR_ARRAY_EXPECTED
 0xD

	)

131 
	#ERR_RECOVERY_ONLY
 0xE

	)

134 
	#ADD_CHAR
(
x
) {\

135 i‡(
•rötf_°©e
->
obuff
.
ªÆ_size
 =
USHRT_MAX
Ë
	`ERROR
(
ERR_BUFF_OVERFLOW
); \

136 
	`outbuf_addch¨
(&(
•rötf_°©e
->
obuff
), 
x
);\

137 }

	)

139 
	#GET_NEXT_ARG
 {\

140 i‡(++
•rötf_°©e
->
cur_¨g
 >
¨gc
Ë
	`ERROR
(
ERR_TOO_FEW_ARGS
); \

141 
ˇrg
 = (
¨gv
 + 
•rötf_°©e
->
cur_¨g
);\

142 }

	)

145 *
	mwh©
;

146 
	mÀn
;

147 } 
	t∑d_öfo_t
;

150 *
	m°¨t
;

151 *
	mcur
;

152 } 
	tèb_d©a_t
;

155 
	sCﬁumnSœshTabÀ
 {

156 
	uCSTD©a
 {

157 *
	mcﬁ
;

158 
èb_d©a_t
 *
	mèb
;

159 } 
	md
;

160 
	mnocﬁs
;

161 
∑d_öfo_t
 *
	m∑d
;

162 
	m°¨t
;

163 
	msize
;

164 
	mªmaödî
;

165 
	m¥es
;

166 
f‹m©_öfo
 
	möfo
;

167 
CﬁumnSœshTabÀ
 *
	m√xt
;

168 } 
	tc°
;

170 
	s_•rötf_°©e
 {

171 
outbuf„r_t
 
	mobuff
;

172 
c°
 *
	mc°s
;

173 
SIGNED
 
	mcur_¨g
;

174 
svÆue_t
 
	m˛ón
;

175 
_•rötf_°©e
 *
	m√xt
;

176 } 
	t•rötf_°©e_t
;

178 
•rötf_°©e_t
 *
	g•rötf_°©e
 = 
NULL
;

180 
numadd
 
PROT
((
outbuf„r_t
 *, 
num
));

181 
add_•a˚
 
PROT
((
outbuf„r_t
 *, 
ödít
));

182 
add_ju°ifõd
 
PROT
((*
°r
, 
¶í
, 
∑d_öfo_t
 *
∑d
, 
fs
, 
f‹m©_öfo
 
föfo
, 
åaûög
));

183 
add_cﬁumn
 
PROT
((
c°
 ** 
cﬁumn
, 
åaûög
));

184 
add_èbÀ
 
PROT
((
c°
 ** 
èbÀ
));

186 
	#ERROR
(
x
Ë
	`•rötf_îr‹
(x, 0)

	)

188 
p›_•rötf_°©e
 
PROT
(()) {

189 
•rötf_°©e_t
 *
	g°©e
;

191 
	g°©e
 = 
•rötf_°©e
;

192 
	g•rötf_°©e
 = 
•rötf_°©e
->
√xt
;

194 i‡(
	gîr‹
 && 
	g°©e
->
	gobuff
.
	gbuf„r
) {

195 
FREE_MSTR
(
°©e
->
obuff
.
buf„r
);

197 
	g°©e
->
	gc°s
) {

198 
c°
 *
	g√xt
 = 
°©e
->
c°s
->
√xt
;

199 i‡(!(
	g°©e
->
	gc°s
->
	göfo
 & 
	gINFO_COLS
Ë&& sèã->c°s->
	gd
.
	gèb
) {

200 
FREE
(
°©e
->
c°s
->
d
.
èb
);

202 
FREE
(
°©e
->
c°s
);

203 
	g°©e
->
	gc°s
 = 
√xt
;

205 i‡(
	g°©e
->
	g˛ón
.
	gty≥
 !
T_NUMBER
) {

206 
‰ì_svÆue
(&(
°©e
->
˛ón
), "pop_sprintf_state");

209 
FREE
(
°©e
);

212 
push_•rötf_°©e
 
PROT
(()) {

213 
•rötf_°©e_t
 *
	g°©e
;

215 
	g°©e
 = 
ALLOCATE
(
•rötf_°©e_t
, 
TAG_TEMPORARY
, "push_sprintf_state");

216 
outbuf_zîo
(&(
°©e
->
obuff
));

217 
	g°©e
->
	gc°s
 = 
NULL
;

218 
	g°©e
->
	gcur_¨g
 = -1;

219 
	g°©e
->
	g˛ón
.
	gty≥
 = 
T_NUMBER
;

220 
	g°©e
->
	g˛ón
.
	gu
.
	gnumbî
 = 0;

221 
	g°©e
->
	g√xt
 = 
•rötf_°©e
;

222 
	g•rötf_°©e
 = 
°©e
;

229 
•rötf_îr‹
 
	$P2
(, 
which
, *, 
¥emade
) {

230 
lbuf
[2048];

231 *
îr
;

233 
which
) {

234 
ERR_BUFF_OVERFLOW
:

235 
îr
 = "BUFF_SIZE overflowed...";

237 
ERR_TOO_FEW_ARGS
:

238 
îr
 = "Moreárguments specifiedÅhanÖassed.";

240 
ERR_INVALID_STAR
:

241 
îr
 = "IncorrectárgumentÅypeÅo *.";

243 
ERR_PRES_EXPECTED
:

244 
îr
 = "ExpectedÖrecisionÇot found.";

246 
ERR_INVALID_FORMAT_STR
:

247 
îr
 = "Error in format string.";

249 
ERR_INCORRECT_ARG_S
:

250 
îr
 = "IncorrectárgumentÅoÅype %%s.";

252 
ERR_CST_REQUIRES_FS
:

253 
îr
 = "Column/table modeÑequiresá field size.";

255 
ERR_BAD_INT_TYPE
:

256 
îr
 = "!feature - bad integerÅype!";

258 
ERR_UNDEFINED_TYPE
:

259 
îr
 = "!feature - undefinedÅype!";

261 
ERR_QUOTE_EXPECTED
:

262 
îr
 = "QuoteÉxpected in format string.";

264 
ERR_UNEXPECTED_EOS
:

265 
îr
 = "UnexpectedÉnd of format string.";

267 
ERR_NULL_PS
:

268 
îr
 = "NullÖad string specified.";

270 
ERR_ARRAY_EXPECTED
:

271 
îr
 = "ArrayÉxpected.";

273 
ERR_RECOVERY_ONLY
:

274 
îr
 = 
¥emade
;

277 
îr
 = "undefinedÉrror in (s)printf!\n";

280 
	`•rötf
(
lbuf
, "(sÌrötf(): %†◊rg: %d)\n", 
îr
, 
•rötf_°©e
->
cur_¨g
);

281 
	`îr‹
(
lbuf
);

282 
	}
}

284 
numadd
 
	$P2
(
outbuf„r_t
 *, 
outbuf
, , 
num
)

286 
i
, 
num_l
,

287 
nve
;

288 
•a˚
;

289 
ch›
;

290 *
p
;

292 i‡(
num
 < 0) {

295 
num
 = (num * -1) & 0x7fffffff;

296 
nve
 = 1;

298 
nve
 = 0;

299 
i
 = 
num
 / 10, 
num_l
 = 
nve
 + 1; i; i /= 10,Çum_l++);

300 i‡((
•a˚
 = 
	`outbuf_exãnd
(
outbuf
, 
num_l
))) {

301 
ch›
 = 
num_l
 - 
•a˚
;

302 
ch›
--)

303 
num
 /= 10;

304 
p
 = 
outbuf
->
buf„r
 + outbuf->
ªÆ_size
;

305 
outbuf
->
ªÆ_size
 +
•a˚
;

306 
p
[
•a˚
] = 0;

307 i‡(
nve
) {

308 *
p
++ = '-';

309 
•a˚
--;

311 
•a˚
--) {

312 
p
[
•a˚
] = (
num
 % 10) + '0';

313 
num
 /= 10;

316 
	}
}

318 
add_•a˚
 
	$P2
(
outbuf„r_t
 *, 
outbuf
, , 
ödít
)

320 
l
;

322 i‡((
l
 = 
	`outbuf_exãnd
(
outbuf
, 
ödít
))) {

323 
	`mem£t
(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
, ' ', 
l
);

324 *(
outbuf
->
buf„r
 + outbuf->
ªÆ_size
 + 
l
) = 0;

325 
outbuf
->
ªÆ_size
 +
l
;

327 
	}
}

334 
svÆue_to_°rög
 
	$P5
(
svÆue_t
 *, 
obj
, 
outbuf„r_t
 *, 
outbuf
, , 
ödít
, , 
åaûög
, , 
ödít2
)

336 
i
;

339 i‡(
ödít
 > 20) {

340 
	`outbuf_add
(
outbuf
, "...");

343 i‡(!
ödít2
)

344 
	`add_•a˚
(
outbuf
, 
ödít
);

345 (
obj
->
ty≥
 & ~
T_FREED
)) {

346 
T_INVALID
:

347 
	`outbuf_add
(
outbuf
, "T_INVALID");

349 
T_LVALUE
:

350 
	`outbuf_add
(
outbuf
, "lvalue: ");

351 
	`svÆue_to_°rög
(
obj
->
u
.
lvÆue
, 
outbuf
, 
ödít
 + 2, 
åaûög
, 0);

353 
T_REF
:

354 
	`outbuf_add
(
outbuf
, "ref: ");

355 
	`svÆue_to_°rög
(
obj
->
u
.
ªf
->
lvÆue
, 
outbuf
, 
ödít
 + 2, 
åaûög
, 0);

357 
T_NUMBER
:

358 
	`numadd
(
outbuf
, 
obj
->
u
.
numbî
);

360 
T_REAL
:

361 
	`outbuf_addv
(
outbuf
, "%f", 
obj
->
u
.
ªÆ
);

363 
T_STRING
:

364 
	`outbuf_add
(
outbuf
, "\"");

365 
	`outbuf_add
(
outbuf
, 
obj
->
u
.
°rög
);

366 
	`outbuf_add
(
outbuf
, "\"");

368 
T_CLASS
:

370 
n
 = 
obj
->
u
.
¨r
->
size
;

371 
	`outbuf_add
(
outbuf
, "CLASS( ");

372 
	`numadd
(
outbuf
, 
n
);

373 
	`outbuf_add
(
outbuf
, 
n
 == 1 ? "Élement\n" : "Élements\n");

374 
i
 = 0; i < (
obj
->
u
.
¨r
->
size
) - 1; i++)

375 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
,

376 
ödít
 + 2, 1, 0);

377 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
,

378 
ödít
 + 2, 0, 0);

379 
	`outbuf_add
(
outbuf
, "\n");

380 
	`add_•a˚
(
outbuf
, 
ödít
);

381 
	`outbuf_add
(
outbuf
, " )");

384 
T_ARRAY
:

385 i‡(!(
obj
->
u
.
¨r
->
size
)) {

386 
	`outbuf_add
(
outbuf
, "({ })");

388 
	`outbuf_add
(
outbuf
, "({ /* sizeof() == ");

389 
	`numadd
(
outbuf
, 
obj
->
u
.
¨r
->
size
);

390 
	`outbuf_add
(
outbuf
, " */\n");

391 
i
 = 0; i < (
obj
->
u
.
¨r
->
size
) - 1; i++)

392 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
, 
ödít
 + 2, 1, 0);

393 
	`svÆue_to_°rög
(&(
obj
->
u
.
¨r
->
ôem
[
i
]), 
outbuf
, 
ödít
 + 2, 0, 0);

394 
	`outbuf_add
(
outbuf
, "\n");

395 
	`add_•a˚
(
outbuf
, 
ödít
);

396 
	`outbuf_add
(
outbuf
, "})");

399 #i‚de‡
NO_BUFFER_TYPE


400 
T_BUFFER
:

401 
	`outbuf_add
(
outbuf
, "<buffer>");

404 
T_FUNCTION
:

406 
svÆue_t
 
tmp
;

407 
obje˘_t
 *
ob
;

408 
tmp
.
ty≥
 = 
T_ARRAY
;

410 
	`outbuf_add
(
outbuf
, "(: ");

411 
obj
->
u
.
Â
->
hdr
.
ty≥
) {

412 
FP_LOCAL
 | 
FP_NOT_BINDABLE
:

413 
ob
 = 
obj
->
u
.
Â
->
hdr
.
ow√r
;

414 i‡(!
ob
 || ob->
Êags
 & 
O_DESTRUCTED
) {

415 
	`outbuf_add
(
outbuf
, "0");

418 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

419 
	`lﬂd_ob_‰om_sw≠
(
ob
);

420 
	`outbuf_add
(
outbuf
, 
	`fun˘i⁄_«me
(
ob
->
¥og
,

421 
obj
->
u
.
Â
->
f
.
loˇl
.
ödex
));

423 
FP_SIMUL
:

424 
	`outbuf_add
(
outbuf
, 
simuls
[
obj
->
u
.
Â
->
f
.
simul
.
ödex
].
func
->
«me
);

426 
FP_FUNCTIONAL
:

427 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
:

429 
buf
[10];

430 
n
 = 
obj
->
u
.
Â
->
f
.
fun˘i⁄Æ
.
num_¨g
;

432 
	`outbuf_add
(
outbuf
, "<code>(");

433 
i
=1; i < 
n
; i++) {

434 
	`•rötf
(
buf
, "$%i, ", 
i
);

435 
	`outbuf_add
(
outbuf
, 
buf
);

437 i‡(
n
) {

438 
	`•rötf
(
buf
, "$%i", 
n
);

439 
	`outbuf_add
(
outbuf
, 
buf
);

441 
	`outbuf_add
(
outbuf
, ")");

444 
FP_EFUN
:

446 
i
;

447 
i
 = 
obj
->
u
.
Â
->
f
.
efun
.
ödex
;

448 
	`outbuf_add
(
outbuf
, 
	`quîy_ö°r_«me
(
i
));

452 i‡(
obj
->
u
.
Â
->
hdr
.
¨gs
) {

453 
i
=0; i<
obj
->
u
.
Â
->
hdr
.
¨gs
->
size
; i++) {

454 
	`outbuf_add
(
outbuf
, ", ");

455 
	`svÆue_to_°rög
(&(
obj
->
u
.
Â
->
hdr
.
¨gs
->
ôem
[
i
]), 
outbuf
, 
ödít
, 0, 0);

459 
	`outbuf_add
(
outbuf
, " :)");

461 
T_MAPPING
:

462 i‡(!(
obj
->
u
.
m≠
->
cou¡
)) {

463 
	`outbuf_add
(
outbuf
, "([ ])");

465 
	`outbuf_add
(
outbuf
, "([ /* sizeof() == ");

466 
	`numadd
(
outbuf
, 
obj
->
u
.
m≠
->
cou¡
);

467 
	`outbuf_add
(
outbuf
, " */\n");

468 
i
 = 0; i <(Ë(
obj
->
u
.
m≠
->
èbÀ_size
); i++) {

469 
m≠pög_node_t
 *
ñm
;

471 
ñm
 = 
obj
->
u
.
m≠
->
èbÀ
[
i
];Élm;Élm =Élm->
√xt
) {

472 
	`svÆue_to_°rög
(&(
ñm
->
vÆues
[0]), 
outbuf
, 
ödít
 + 2, 0, 0);

473 
	`outbuf_add
(
outbuf
, " : ");

474 
	`svÆue_to_°rög
(&(
ñm
->
vÆues
[1]), 
outbuf
, 
ödít
 + 4, 1, 1);

477 
	`add_•a˚
(
outbuf
, 
ödít
);

478 
	`outbuf_add
(
outbuf
, "])");

481 
T_OBJECT
:

483 
svÆue_t
 *
ãmp
;

485 i‡(
obj
->
u
.
ob
->
Êags
 & 
O_DESTRUCTED
) {

486 
	`numadd
(
outbuf
, 0);

490 
	`outbuf_addch¨
(
outbuf
, '/');

491 
	`outbuf_add
(
outbuf
, 
obj
->
u
.
ob
->
«me
);

493 i‡(!
max_evÆ_îr‹
 && !
too_dìp_îr‹
) {

494 
	`push_obje˘
(
obj
->
u
.
ob
);

495 
ãmp
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_OBJECT_NAME
, 1);

496 i‡(
ãmp
 &&Åem∞!(
svÆue_t
 *Ë-1 && (ãmp->
ty≥
 =
T_STRING
)) {

497 
	`outbuf_add
(
outbuf
, " (\"");

498 
	`outbuf_add
(
outbuf
, 
ãmp
->
u
.
°rög
);

499 
	`outbuf_add
(
outbuf
, "\")");

505 
	`outbuf_add
(
outbuf
, "!ERROR: GARBAGE SVALUE!");

507 i‡(
åaûög
)

508 
	`outbuf_add
(
outbuf
, ",\n");

509 
	}
}

511 
add_∑d
 
	$P2
(
∑d_öfo_t
 *, 
∑d
, , 
Àn
) {

512 *
p
;

513 
∑dÀn
;

515 i‡(
	`outbuf_exãnd
(&(
•rötf_°©e
->
obuff
), 
Àn
) <Üen)

516 
	`ERROR
(
ERR_BUFF_OVERFLOW
);

517 
p
 = 
•rötf_°©e
->
obuff
.
buf„r
 + s¥ötf_°©e->obuff.
ªÆ_size
;

518 
•rötf_°©e
->
obuff
.
ªÆ_size
 +
Àn
;

519 
p
[
Àn
] = 0;

521 i‡(
∑d
 && (
∑dÀn
 =Öad->
Àn
)) {

522 *
íd
;

523 *
p°r
 = 
∑d
->
wh©
;

524 
i
;

525 
c
;

527 
i
 = 0, 
íd
 = 
p
 + 
Àn
;Ö <Énd; i++) {

528 i‡(
i
 =
∑dÀn
)

529 
i
 = 0;

531 i‡((
c
 = 
p°r
[
i
]) == '\\') {

533 *
p
++ = 
p°r
[++
i
];

535 *
p
++ = 
c
;

538 
	`mem£t
(
p
, ' ', 
Àn
);

539 
	}
}

541 
INLINE_STATIC
 
add_n°r
 
	$P2
(*, 
°r
, , 
Àn
) {

542 i‡(
	`outbuf_exãnd
(&(
•rötf_°©e
->
obuff
), 
Àn
) <Üen)

543 
	`ERROR
(
ERR_BUFF_OVERFLOW
);

544 
	`mem˝y
(
•rötf_°©e
->
obuff
.
buf„r
 + s¥ötf_°©e->obuff.
ªÆ_size
, 
°r
, 
Àn
);

545 
•rötf_°©e
->
obuff
.
ªÆ_size
 +
Àn
;

546 
•rötf_°©e
->
obuff
.
buf„r
[•rötf_°©e->obuff.
ªÆ_size
] = 0;

547 
	}
}

555 
add_ju°ifõd
 
	$P6
(*, 
°r
, , 
¶í
, 
∑d_öfo_t
 *, 
∑d
,

556 , 
fs
, 
f‹m©_öfo
, 
föfo
, , 
åaûög
)

558 
fs
 -
¶í
;

560 i‡(
fs
 <= 0) {

561 
	`add_n°r
(
°r
, 
¶í
);

563 
i
;

564 
föfo
 & 
INFO_J
) {

565 
INFO_J_LEFT
:

566 
	`add_n°r
(
°r
, 
¶í
);

567 i‡(
åaûög
)

568 
	`add_∑d
(
∑d
, 
fs
);

570 
INFO_J_CENTRE
:

571 
i
 = 
fs
 / 2 + fs % 2;

572 
	`add_∑d
(
∑d
, 
i
);

573 
	`add_n°r
(
°r
, 
¶í
);

574 i‡(
åaûög
)

575 
	`add_∑d
(
∑d
, 
fs
 - 
i
);

577 
INFO_J_CENTRE
 | 
INFO_J_LEFT
:

578 
i
 = 
fs
 / 2;

579 
	`add_∑d
(
∑d
, 
i
);

580 
	`add_n°r
(
°r
, 
¶í
);

581 i‡(
åaûög
)

582 
	`add_∑d
(
∑d
, 
fs
 - 
i
);

587 
	`add_∑d
(
∑d
, 
fs
);

588 
	`add_n°r
(
°r
, 
¶í
);

591 
	}
}

599 
add_cﬁumn
 
	$P2
(
c°
 **, 
cﬁumn
, , 
åaûög
)

601 
d⁄e
;

602 
c
;

603 
•a˚
 = -1;

604 
ªt
;

605 
c°
 *
cﬁ
 = *
cﬁumn
;

606 *
cﬁ_d
 = 
cﬁ
->
d
.col;

608 
d⁄e
 = 0;

610 (
c
 = 
cﬁ_d
[
d⁄e
]) && c != '\n') {

611 i‡(
c
 == ' ')

612 
•a˚
 = 
d⁄e
;

613 i‡(++
d⁄e
 =
cﬁ
->
¥es
) {

614 i‡(
•a˚
 != -1) {

615 
c
 = 
cﬁ_d
[
d⁄e
];

616 i‡(
c
 != '\n' && c != ' ' && c)

617 
d⁄e
 = 
•a˚
;

622 
	`add_ju°ifõd
(
cﬁ_d
, 
d⁄e
, 
cﬁ
->
∑d
,

623 
cﬁ
->
size
, cﬁ->
öfo
, 
åaûög
 || cﬁ->
√xt
);

624 
cﬁ_d
 +
d⁄e
;

625 
ªt
 = 1;

626 i‡(*
cﬁ_d
 == '\n') {

627 
cﬁ_d
++;

628 
ªt
 = 2;

630 
cﬁ
->
d
.cﬁ = 
cﬁ_d
;

635 i‡(!(*
cﬁ_d
)) {

636 
c°
 *
ãmp
;

638 
ãmp
 = 
cﬁ
->
√xt
;

639 i‡(
cﬁ
->
∑d
)

640 
	`FREE
(
cﬁ
->
∑d
);

641 
	`FREE
(
cﬁ
);

642 *
cﬁumn
 = 
ãmp
;

643  
ªt
;

646 
	}
}

653 
add_èbÀ
 
	$P1
(
c°
 **, 
èbÀ
)

655 
d⁄e
, 
i
;

656 
c°
 *
èb
 = *
èbÀ
;

657 
èb_d©a_t
 *
èb_d
 = 
èb
->
d
.tab;

658 *
èb_di
;

659 
íd
;

661 
i
 = 0; i < 
èb
->
nocﬁs
 && (
èb_di
 = 
èb_d
[i].
cur
); i++) {

662 
íd
 = 
èb_d
[
i
 + 1].
°¨t
 - 
èb_di
 - 1;

664 
d⁄e
 = 0; d⁄ê!
íd
 && 
èb_di
[done] != '\n'; done++)

666 
	`add_ju°ifõd
(
èb_di
, (
d⁄e
 > 
èb
->
size
 ?Åab->size : done),

667 
èb
->
∑d
,Åab->
size
,Åab->
öfo
,

668 
èb
->
∑d
 || (
i
 <Åab->
nocﬁs
 - 1Ë||Åab->
√xt
);

669 i‡(
d⁄e
 >
íd
 - 1) {

670 
èb_di
 = 0;

672 
èb_di
 +
d⁄e
 + 1;

674 
èb_d
[
i
].
cur
 = 
èb_di
;

676 i‡(
èb
->
∑d
) {

677 
i
++ < 
èb
->
nocﬁs
) {

678 
	`add_∑d
(
èb
->
∑d
,Åab->
size
);

680 
	`add_∑d
(
èb
->
∑d
,Åab->
ªmaödî
);

682 i‡(!
èb_d
[0].
cur
) {

683 
c°
 *
ãmp
;

685 
ãmp
 = 
èb
->
√xt
;

686 i‡(
èb
->
∑d
)

687 
	`FREE
(
èb
->
∑d
);

688 i‡(
èb_d
)

689 
	`FREE
(
èb_d
);

690 
	`FREE
(
èb
);

691 *
èbÀ
 = 
ãmp
;

695 
	}
}

697 
	$gë_cuΩos
() {

698 *
p1
, *
p2
;

700 i‡(!
•rötf_°©e
->
obuff
.
buf„r
)  0;

701 
p1
 = 
•rötf_°©e
->
obuff
.
buf„r
 + s¥ötf_°©e->obuff.
ªÆ_size
 - 1;

702 
p2
 = 
p1
;

703 
p2
 > 
•rötf_°©e
->
obuff
.
buf„r
 && *p2 != '\n')

704 
p2
--;

705 i‡(*
p2
 != '\n')

706  
p1
 - 
p2
 + 1;

708  
p1
 - 
p2
;

709 
	}
}

714 
∑d_öfo_t
 *
make_∑d
 
	$P1
(
∑d_öfo_t
 *, 
p
) {

715 
∑d_öfo_t
 *
x
;

716 i‡(
p
->
Àn
 == 0)  0;

717 
x
 = 
	`ALLOCATE
(
∑d_öfo_t
, 
TAG_TEMPORARY
, "make_pad");

718 
x
->
wh©
 = 
p
->what;

719 
x
->
Àn
 = 
p
->len;

720  
x
;

721 
	}
}

730 *
°rög_¥öt_f‹m©ãd
 
	$P3
(*, 
f‹m©_°r
, , 
¨gc
, 
svÆue_t
 *, 
¨gv
)

732 
f‹m©_öfo
 
föfo
;

733 
svÆue_t
 *
ˇrg
;

734 
√Àmno
 = 0;

735 
Âos
;

736 
fs
;

737 
¥es
;

738 
∑d_öfo_t
 
∑d
;

739 
i
;

740 *
ªtvÆue
;

741 
œ°
;

743 
	`push_•rötf_°©e
();

744 
STACK_INC
;

745 
•
->
ty≥
 = 
T_ERROR_HANDLER
;

746 
•
->
u
.
îr‹_h™dÀr
 = 
p›_•rötf_°©e
;

748 
œ°
 = 0;

749 
Âos
 = 0; 1; fpos++) {

750 
c
 = 
f‹m©_°r
[
Âos
];

752 i‡(
c
 == '\n' || !c) {

753 
cﬁumn_°©
 = 0;

755 i‡(
œ°
 !
Âos
) {

756 
	`add_n°r
(
f‹m©_°r
 + 
œ°
, 
Âos
 -Üast);

757 
œ°
 = 
Âos
 + 1;

758 } 
œ°
++;

760 i‡(!
•rötf_°©e
->
c°s
) {

761 i‡(!
c
)

763 
	`ADD_CHAR
('\n');

766 
	`ADD_CHAR
('\n');

767 
•rötf_°©e
->
c°s
) {

768 
c°
 **
ãmp
;

770 
ãmp
 = &(
•rötf_°©e
->
c°s
);

771 *
ãmp
) {

772 i‡((*
ãmp
)->
öfo
 & 
INFO_COLS
) {

773 i‡(*((*
ãmp
)->
d
.
cﬁ
 - 1) != '\n')

774 *((*
ãmp
)->
d
.
cﬁ
) == ' ')

775 (*
ãmp
)->
d
.
cﬁ
++;

776 
	`add_∑d
(0, (*
ãmp
)->
°¨t
 - 
	`gë_cuΩos
());

777 
cﬁumn_°©
 = 
	`add_cﬁumn
(
ãmp
, 0);

778 i‡(!
cﬁumn_°©
)

779 
ãmp
 = &((*ãmp)->
√xt
);

781 
	`add_∑d
(0, (*
ãmp
)->
°¨t
 - 
	`gë_cuΩos
());

782 i‡(!
	`add_èbÀ
(
ãmp
))

783 
ãmp
 = &((*ãmp)->
√xt
);

786 i‡(
•rötf_°©e
->
c°s
 || 
c
 == '\n')

787 
	`ADD_CHAR
('\n');

789 i‡(
cﬁumn_°©
 == 2)

790 
	`ADD_CHAR
('\n');

791 i‡(!
c
)

794 i‡(
c
 == '%') {

795 i‡(
œ°
 !
Âos
) {

796 
	`add_n°r
(
f‹m©_°r
 + 
œ°
, 
Âos
 -Üast);

797 
œ°
 = 
Âos
 + 1;

798 } 
œ°
++;

799 i‡(
f‹m©_°r
[
Âos
 + 1] == '%') {

800 
	`ADD_CHAR
('%');

801 
Âos
++;

802 
œ°
++;

805 
GET_NEXT_ARG
;

806 
fs
 = 0;

807 
¥es
 = 0;

808 
∑d
.
Àn
 = 0;

809 
föfo
 = 0;

810 
Âos
++; !(
föfo
 & 
INFO_T
); fpos++) {

811 i‡(!
f‹m©_°r
[
Âos
]) {

812 
föfo
 |
INFO_T_ERROR
;

815 i‡(((
f‹m©_°r
[
Âos
] >= '0') && (format_str[fpos] <= '9'))

816 || (
f‹m©_°r
[
Âos
] == '*')) {

817 i‡(
¥es
 == -1) {

818 i‡(
f‹m©_°r
[
Âos
] == '*') {

819 i‡(
ˇrg
->
ty≥
 !
T_NUMBER
)

820 
	`ERROR
(
ERR_INVALID_STAR
);

821 
¥es
 = 
ˇrg
->
u
.
numbî
;

822 
GET_NEXT_ARG
;

825 
¥es
 = 
f‹m©_°r
[
Âos
] - '0';

826 
Âos
++;

827 (
f‹m©_°r
[
Âos
] >= '0') && (format_str[fpos] <= '9'); fpos++) {

828 
¥es
 =Öª†* 10 + 
f‹m©_°r
[
Âos
] - '0';

830 i‡(
¥es
 < 0)Öres = 0;

832 i‡((
f‹m©_°r
[
Âos
] == '0') && (((format_str[fpos + 1] >= '1')

833 && (
f‹m©_°r
[
Âos
 + 1] <= '9')) || (format_str[fpos + 1] == '*'))) {

834 
∑d
.
wh©
 = "0";

835 
∑d
.
Àn
 = 1;

837 i‡(
f‹m©_°r
[
Âos
] == '*') {

838 i‡(
ˇrg
->
ty≥
 !
T_NUMBER
)

839 
	`ERROR
(
ERR_INVALID_STAR
);

840 
fs
 = 
ˇrg
->
u
.
numbî
;

841 i‡(
fs
 < 0) fs = 0;

842 i‡(
¥es
 == -2)

843 
¥es
 = 
fs
;

844 
GET_NEXT_ARG
;

847 
fs
 = 
f‹m©_°r
[
Âos
] - '0';

849 
Âos
++;

850 (
f‹m©_°r
[
Âos
] >= '0') && (format_str[fpos] <= '9'); fpos++) {

851 
fs
 = f†* 10 + 
f‹m©_°r
[
Âos
] - '0';

853 i‡(
fs
 < 0) fs = 0;

854 i‡(
¥es
 == -2) {

855 
¥es
 = 
fs
;

858 
Âos
--;

861 
f‹m©_°r
[
Âos
]) {

863 
föfo
 |
INFO_PP_SPACE
;

866 
föfo
 |
INFO_PP_PLUS
;

869 
föfo
 |
INFO_J_LEFT
;

872 
föfo
 |
INFO_J_CENTRE
;

875 
föfo
 |
INFO_ARRAY
;

878 
föfo
 |
INFO_COLS
;

881 
föfo
 |
INFO_TABLE
;

884 
¥es
 = -1;

887 
¥es
 = -2;

889 #ifde‡
DEBUG


891 
föfo
 |
INFO_T_NULL
;

895 
föfo
 |
INFO_T_LPC
;

898 
föfo
 |
INFO_T_STRING
;

902 
föfo
 |
INFO_T_INT
;

905 
föfo
 |
INFO_T_FLOAT
;

908 
föfo
 |
INFO_T_CHAR
;

911 
föfo
 |
INFO_T_OCT
;

914 
föfo
 |
INFO_T_HEX
;

917 
föfo
 |
INFO_T_C_HEX
;

920 
Âos
++;

921 
∑d
.
wh©
 = 
f‹m©_°r
 + 
Âos
;

923 i‡(!
f‹m©_°r
[
Âos
])

924 
	`ERROR
(
ERR_UNEXPECTED_EOS
);

925 i‡(
f‹m©_°r
[
Âos
] == '\\') {

926 i‡(!
f‹m©_°r
[++
Âos
])

927 
	`ERROR
(
ERR_UNEXPECTED_EOS
);

929 i‡(
f‹m©_°r
[
Âos
] == '\'') {

930 
∑d
.
Àn
 = 
f‹m©_°r
 + 
Âos
 -Öad.
wh©
;

931 i‡(!
∑d
.
Àn
)

932 
	`ERROR
(
ERR_NULL_PS
);

935 
Âos
++;

939 
föfo
 |
INFO_T_ERROR
;

942 i‡(
¥es
 < 0)

943 
	`ERROR
(
ERR_PRES_EXPECTED
);

947 i‡(
föfo
 & 
INFO_ARRAY
) {

948 i‡(
ˇrg
->
ty≥
 !
T_ARRAY
)

949 
	`ERROR
(
ERR_ARRAY_EXPECTED
);

950 i‡(
ˇrg
->
u
.
¨r
->
size
 == 0) {

951 
œ°
 = 
Âos
;

952 
Âos
--;

955 
ˇrg
 = (
¨gv
 + 
•rötf_°©e
->
cur_¨g
)->
u
.
¨r
->
ôem
;

956 
√Àmno
 = 1;

959 i‡((
föfo
 & 
INFO_T
Ë=
INFO_T_LPC
) {

960 
outbuf„r_t
 
outbuf
;

962 
	`outbuf_zîo
(&
outbuf
);

963 
	`svÆue_to_°rög
(
ˇrg
, &
outbuf
, 0, 0, 0);

964 
	`outbuf_fix
(&
outbuf
);

966 
•rötf_°©e
->
˛ón
.
ty≥
 = 
T_STRING
;

967 
•rötf_°©e
->
˛ón
.
subty≥
 = 
STRING_MALLOC
;

968 
•rötf_°©e
->
˛ón
.
u
.
°rög
 = 
outbuf
.
buf„r
;

969 
ˇrg
 = &(
•rötf_°©e
->
˛ón
);

970 
föfo
 ^
INFO_T_LPC
;

971 
föfo
 |
INFO_T_STRING
;

973 i‡((
föfo
 & 
INFO_T
Ë=
INFO_T_ERROR
) {

974 
	`ERROR
(
ERR_INVALID_FORMAT_STR
);

975 #ifde‡
DEBUG


976 } i‡((
föfo
 & 
INFO_T
Ë=
INFO_T_NULL
) {

978 
	`Ârötf
(
°dîr
, "/%s: (s)printf: INFO_T_NULL.... found.\n",

979 
cuºít_obje˘
->
«me
);

980 
	`ADD_CHAR
('%');

982 } i‡((
föfo
 & 
INFO_T
Ë=
INFO_T_STRING
) {

983 
¶í
;

989 i‡(
ˇrg
->
ty≥
 =
T_NUMBER
 && c¨g->
u
.
numbî
 == 0) {

990 
•rötf_°©e
->
˛ón
.
ty≥
 = 
T_STRING
;

991 
•rötf_°©e
->
˛ón
.
subty≥
 = 
STRING_MALLOC
;

992 
•rötf_°©e
->
˛ón
.
u
.
°rög
 = 
	`°rög_c›y
(
NULL_MSG
, "sprintf NULL");

993 
ˇrg
 = &(
•rötf_°©e
->
˛ón
);

995 i‡(
ˇrg
->
ty≥
 !
T_STRING
) {

996 
	`ERROR
(
ERR_INCORRECT_ARG_S
);

998 
¶í
 = 
	`SVALUE_STRLEN
(
ˇrg
);

999 i‡((
föfo
 & 
INFO_COLS
Ë|| (föfÿ& 
INFO_TABLE
)) {

1000 
c°
 **
ãmp
;

1002 i‡(!
fs
) {

1003 
	`ERROR
(
ERR_CST_REQUIRES_FS
);

1006 
ãmp
 = &(
•rötf_°©e
->
c°s
);

1007 *
ãmp
)

1008 
ãmp
 = &((*ãmp)->
√xt
);

1009 i‡(
föfo
 & 
INFO_COLS
) {

1010 
tmp
;

1011 i‡(
¥es
 > 
fs
)Öres = fs;

1012 *
ãmp
 = 
	`ALLOCATE
(
c°
, 
TAG_TEMPORARY
, "string_print: 3");

1013 (*
ãmp
)->
√xt
 = 0;

1014 (*
ãmp
)->
d
.
cﬁ
 = 
ˇrg
->
u
.
°rög
;

1015 (*
ãmp
)->
∑d
 = 
	`make_∑d
(&pad);

1016 (*
ãmp
)->
size
 = 
fs
;

1017 (*
ãmp
)->
¥es
 = (¥esË?Öª†: 
fs
;

1018 (*
ãmp
)->
öfo
 = 
föfo
;

1019 (*
ãmp
)->
°¨t
 = 
	`gë_cuΩos
();

1020 
tmp
 = ((
f‹m©_°r
[
Âos
] != '\n')

1021 && (
f‹m©_°r
[
Âos
] != '\0'))

1022 || ((
föfo
 & 
INFO_ARRAY
)

1023 && (
√Àmno
 < (
¨gv
 + 
•rötf_°©e
->
cur_¨g
)->
u
.
¨r
->
size
));

1024 
tmp
 = 
	`add_cﬁumn
(
ãmp
,Åmp);

1025 i‡(
tmp
 =2 && !
f‹m©_°r
[
Âos
]) {

1026 
	`ADD_CHAR
('\n');

1029 
n
, 
Àn
, 
max_Àn
;

1030 *
p1
, *
p2
;

1032 
	#TABLE
 
ˇrg
->
u
.
°rög


	)

1033 (*
ãmp
Ë
	`ALLOCATE
(
c°
, 
TAG_TEMPORARY
, "string_print: 4");

1034 (*
ãmp
)->
d
.
èb
 = 0;

1035 (*
ãmp
)->
∑d
 = 
	`make_∑d
(&pad);

1036 (*
ãmp
)->
öfo
 = 
föfo
;

1037 (*
ãmp
)->
°¨t
 = 
	`gë_cuΩos
();

1038 (*
ãmp
)->
√xt
 = 0;

1039 
max_Àn
 = 0;

1040 
n
 = 1;

1042 
p2
 = 
p1
 = 
TABLE
;

1043 *
p1
) {

1044 i‡(*
p1
 == '\n') {

1045 i‡(
p1
 - 
p2
 > 
max_Àn
)

1046 
max_Àn
 = 
p1
 - 
p2
;

1047 
p1
++;

1048 i‡(*(
p2
 = 
p1
))

1049 
n
++;

1051 
p1
++;

1053 i‡(!
¥es
) {

1055 i‡(
p1
 - 
p2
 > 
max_Àn
)

1056 
max_Àn
 = 
p1
 - 
p2
;

1057 
¥es
 = 
fs
 / (
max_Àn
 + 2);

1059 i‡(!
¥es
)

1060 
¥es
 = 1;

1072 
Àn
 = (
n
-1)/
¥es
 + 1;

1073 i‡(
n
 > 
¥es
 &&Ç %Öres)

1074 
¥es
 -’ª†- 
n
 %ÖªsË/ 
Àn
;

1076 
Àn
 = (
n
-1)/
¥es
 + 1;

1078 (*
ãmp
)->
size
 = 
fs
 / 
¥es
;

1079 (*
ãmp
)->
ªmaödî
 = 
fs
 % 
¥es
;

1080 i‡(
n
 < 
¥es
) {

1085 (*
ãmp
)->
ªmaödî
 +(
¥es
 - 
n
)*((*ãmp)->
size
);

1086 
¥es
 = 
n
;

1089 (*
ãmp
)->
d
.
èb
 = 
	`CALLOCATE
(
¥es
 + 1, 
èb_d©a_t
,

1090 
TAG_TEMPORARY
, "string_print: 5");

1091 (*
ãmp
)->
nocﬁs
 = 
¥es
;

1092 (*
ãmp
)->
d
.
èb
[0].
°¨t
 = 
TABLE
;

1093 i‡(
¥es
 == 1) {

1094 (*
ãmp
)->
d
.
èb
[1].
°¨t
 = 
TABLE
 + 
	`SVALUE_STRLEN
(
ˇrg
) + 1;

1096 
i
 = 1;

1097 
n
 = 0;

1100 
p1
 = 
TABLE
;

1101 *
p1
) {

1102 i‡(*
p1
++ ='\n' && ++
n
 >
Àn
) {

1103 (*
ãmp
)->
d
.
èb
[
i
++].
°¨t
 = 
p1
;

1104 
n
 = 0;

1107  ; 
i
 <
¥es
; i++)

1108 (*
ãmp
)->
d
.
èb
[
i
].
°¨t
 = ++
p1
;

1110 
i
 = 0; i < 
¥es
; i++)

1111 (*
ãmp
)->
d
.
èb
[
i
].
cur
 = (*ãmp)->d.èb[i].
°¨t
;

1113 
	`add_èbÀ
(
ãmp
);

1116 i‡(
¥es
 &&Öª†< 
¶í
)

1117 
¶í
 = 
¥es
;

1118 
	`add_ju°ifõd
(
ˇrg
->
u
.
°rög
, 
¶í
, &
∑d
, 
fs
, 
föfo
,

1119 (((
f‹m©_°r
[
Âos
] != '\n') && (format_str[fpos] != '\0'))

1120 || ((
föfo
 & 
INFO_ARRAY
Ë&& (
√Àmno
 < (
¨gv
 + 
•rötf_°©e
->
cur_¨g
)->
u
.
¨r
->
size
)))

1121 || 
ˇrg
->
u
.
°rög
[
¶í
 - 1] != '\n');

1123 } i‡(
föfo
 & 
INFO_T_INT
) {

1125 
chót
[8];

1126 
ãmp
[100];

1128 *
chót
 = '%';

1129 
i
 = 1;

1130 
föfo
 & 
INFO_PP
) {

1131 
INFO_PP_SPACE
:

1132 
chót
[
i
++] = ' ';

1134 
INFO_PP_PLUS
:

1135 
chót
[
i
++] = '+';

1138 i‡(
¥es
) {

1139 
chót
[
i
++] = '.';

1140 i‡(
¥es
 >(
ãmp
))

1141 
	`•rötf
(
chót
 + 
i
, "%d", (
ãmp
) - 1);

1143 
	`•rötf
(
chót
 + 
i
, "%d", 
¥es
);

1144 
i
 +
	`°æí
(
chót
 + i);

1146 
föfo
 & 
INFO_T
) {

1147 
INFO_T_INT
:

1148 
chót
[
i
++] = 'd';

1150 
INFO_T_FLOAT
:

1151 
chót
[
i
++] = 'f';

1153 
INFO_T_CHAR
:

1154 
chót
[
i
++] = 'c';

1156 
INFO_T_OCT
:

1157 
chót
[
i
++] = 'o';

1159 
INFO_T_HEX
:

1160 
chót
[
i
++] = 'x';

1162 
INFO_T_C_HEX
:

1163 
chót
[
i
++] = 'X';

1166 
	`ERROR
(
ERR_BAD_INT_TYPE
);

1168 i‡((
chót
[
i
 - 1] ='f' && 
ˇrg
->
ty≥
 !
T_REAL
Ë|| (chót[ò- 1] !'f' && c¨g->ty≥ !
T_NUMBER
)) {

1169 #ifde‡
RETURN_ERROR_MESSAGES


1170 
	`•rötf
(
buff
,

1172 
chót
[
i
 - 1], 
•rötf_°©e
->
cur_¨g
);

1173 
	`Ârötf
(
°dîr
, "Progøm /%†Fûe: %s: %s", 
cuºít_¥og
->
«me
,

1174 
	`gë_löe_numbî_if_™y
(), 
buff
);

1175 
	`debug_mesßge
("%s", 
buff
);

1176 i‡(
cuºít_obje˘
) {

1177 
	`debug_mesßge
("program: /%s, object: %s, file: %s\n",

1178 
cuºít_¥og
 ? cuºít_¥og->
«me
 : "",

1179 
cuºít_obje˘
->
«me
,

1180 
	`gë_löe_numbî_if_™y
());

1182 
	`ERROR
(
ERR_RECOVERY_ONLY
);

1184 
	`îr‹
("ERROR: (s)printf(): IncorrectárgumentÅypeÅo %%%c.\n",

1185 
chót
[
i
 - 1]);

1188 
chót
[
i
] = '\0';

1190 i‡(
ˇrg
->
ty≥
 =
T_REAL
) {

1191 
	`•rötf
(
ãmp
, 
chót
, 
ˇrg
->
u
.
ªÆ
);

1193 
	`•rötf
(
ãmp
, 
chót
, 
ˇrg
->
u
.
numbî
);

1195 
tm∂
 = 
	`°æí
(
ãmp
);

1197 
	`add_ju°ifõd
(
ãmp
, 
tm∂
, &
∑d
, 
fs
, 
föfo
,

1198 (((
f‹m©_°r
[
Âos
] != '\n') && (format_str[fpos] != '\0'))

1199 || ((
föfo
 & 
INFO_ARRAY
Ë&& (
√Àmno
 < (
¨gv
 + 
•rötf_°©e
->
cur_¨g
)->
u
.
¨r
->
size
))));

1202 
	`ERROR
(
ERR_UNDEFINED_TYPE
);

1203 i‡(
•rötf_°©e
->
˛ón
.
ty≥
 !
T_NUMBER
) {

1204 
	`‰ì_svÆue
(&(
•rötf_°©e
->
˛ón
), "string_print_formatted");

1205 
•rötf_°©e
->
˛ón
.
ty≥
 = 
T_NUMBER
;

1208 i‡(!(
föfo
 & 
INFO_ARRAY
))

1210 i‡(
√Àmno
 >(
¨gv
 + 
•rötf_°©e
->
cur_¨g
)->
u
.
¨r
->
size
)

1212 
ˇrg
 = (
¨gv
 + 
•rötf_°©e
->
cur_¨g
)->
u
.
¨r
->
ôem
 + 
√Àmno
++;

1214 
œ°
 = 
Âos
;

1215 
Âos
--;

1219 
	`outbuf_fix
(&
•rötf_°©e
->
obuff
);

1220 
ªtvÆue
 = 
•rötf_°©e
->
obuff
.
buf„r
;

1221 
•rötf_°©e
->
obuff
.
buf„r
 = 0;

1222 
	`p›_°ack
();

1223  
ªtvÆue
;

1224 
	}
}

	@sprintf.h

1 #i‚de‡
SPRINTF_H


2 
	#SPRINTF_H


	)

4 
	~"Õc_ö˛.h
"

6 
svÆue_to_°rög
 
PROT
((
svÆue_t
 *, 
outbuf„r_t
 *, , , ));

7 *
°rög_¥öt_f‹m©ãd
 
PROT
((*, , 
svÆue_t
 *));

	@std.h

1 #i‚de‡
STD_H


2 
	#STD_H


	)

7 
	~"¨ch.h
"

9 #ifde‡
EDIT_SOURCE


10 
	#CONST


	)

11 
	#INLINE


	)

14 
	~"›ti⁄s_ö˛.h
"

15 
	~"c⁄figuª.h
"

17 #ifde‡
PEDANTIC


18 #unde‡
INLINE


19 
	#INLINE


	)

23 
	~"p‹èbûôy.h
"

24 
	~"ma¸os.h
"

25 #i‚de‡
_FUNC_SPEC_


26 
	~"°d_ö˛.h
"

27 
	~"mÆloc_ö˛.h
"

28 #i‚de‡
NO_OPCODES


29 
	~"›codes.h
"

32 
	~"debug.h
"

34 #ifde‡
WIN32


35 
	#ouç
 
ouçå


	)

	@std_incl.h

1 #i‡!
deföed
(
STD_INCL_H
Ë&& !deföed(
_FUNC_SPEC_
)

2 
	#STD_INCL_H


	)

4 #ifde‡
INCL_STDLIB_H


5 
	~<°dlib.h
>

7 #ifde‡
INCL_UNISTD_H


8 
	~<uni°d.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<°dio.h
>

13 
	~<£tjmp.h
>

14 
	~<sig«l.h
>

15 
	~<m©h.h
>

16 
	~<˘y≥.h
>

17 
	~<î∫o.h
>

18 #ifde‡
INCL_FCNTL_H


19 
	~<f˙é.h
>

22 #ifde‡
INCL_TIME_H


23 
	~<time.h
>

25 #ifde‡
INCL_SYS_TIME_H


26 
	~<sys/time.h
>

28 #ifde‡
INCL_DOS_H


29 
	~<dos.h
>

31 #ifde‡
INCL_SYS_TIMES_H


32 
	~<sys/times.h
>

34 #ifde‡
INCL_USCLKC_H


35 
	~<us˛kc.h
>

38 #ifde‡
INCL_SYS_WAIT_H


39 
	~<sys/waô.h
>

41 #ifde‡
INCL_SYS_CRYPT_H


42 
	~<sys/¸y±.h
>

44 #ifde‡
INCL_CRYPT_H


45 
	~<¸y±.h
>

47 #ifde‡
INCL_VALUES_H


48 
	~<vÆues.h
>

50 #ifde‡
INCL_LIMITS_H


51 
	~<limôs.h
>

53 #ifde‡
INCL_MALLOC_H


54 
	~<mÆloc.h
>

56 #ifde‡
INCL_LOCALE_H


57 
	~<loˇÀ.h
>

60 #ifde‡
INCL_DLFCN_H


61 
	~<dlf˙.h
>

64 #ifde‡
LATTICE


65 #unde‡
VOID


68 #i‚de‡
_AUX_SOURCE


70 
	~<°rög.h
>

73 #i‚de‡
NO_SOCKETS


74 #ifde‡
INCL_NETINET_IN_H


75 
	~<√töë/ö.h
>

77 #ifde‡
INCL_ARPA_INET_H


78 
	~<¨∑/öë.h
>

81 #i‡
deföed
(
LATTICE
Ë|| deföed(
__SASC
)

82 
	~"amiga/amiga.h
"

83 
	~"amiga/nsig«l.h
"

84 
	~"amiga/sockë.h
"

87 #i‡
deföed
(
WIN32
Ë|| deföed(
LATTICE
)

88 
dos_°yÀ_lök
 
PROT
((*, *));

89 
	#lök
(
x
, 
y
Ë
	`dos_°yÀ_lök
(x, y)

	)

92 #ifde‡
NeXT


93 
	~<libc.h
>

96 #ifde‡
WIN32


97 
	~<sys/timeb.h
>

100 #i‡!
deföed
(
NeXT
Ë&& !deföed(
LATTICE
Ë&& !deföed(
WIN32
)

101 
	~<sys/∑øm.h
>

104 #ifde‡
OLD_ULTRIX


105 
	~<°ddef.h
>

106 
	#size_t
 

	)

109 #ifde‡
INCL_MACH_MACH_H


110 
	~<mach/mach.h
>

113 #ifde‡
INCL_MACH_H


114 
	~<mach.h
>

117 #ifde‡
sun


118 
	~<Æloˇ.h
>

121 #i‡(
deföed
(
__APPLE__
Ë&& deföed(
__GNUC__
)) || __GNUC__ > 2

123 
	~<°d¨g.h
>

125 #ifde‡
INCL_STDARG_H


126 
	~<°d¨g.h
>

128 
	~<v¨¨gs.h
>

132 #ifde‡
INCL_BSTRING_H


133 
	~<b°rög.h
>

137 #i‚de‡
USHRT_MAX


138 
	#USHRT_MAX
 ((1 << (()*8)Ë- 1)

	)

	@stralloc.c

1 
	~"°d.h
"

2 
	~"Õc_ö˛.h
"

3 
	~"°øŒoc.h
"

4 
	~"hash.h
"

5 
	~"comm.h
"

8 
	gsvÆue_°æí_size
;

10 #ifde‡
NOISY_DEBUG


11 
bp
 
PROT
(()) {

54 #ifde‡
STRING_STATS


55 
	gnum_di°ö˘_°rögs
 = 0;

56 
	gbyãs_di°ö˘_°rögs
 = 0;

57 
	govîhód_byãs
 = 0;

58 
	gÆlocd_°rögs
 = 0;

59 
	gÆlocd_byãs
 = 0;

60 
	g£¨ch_Àn
 = 0;

61 
	gnum_°r_£¨ches
 = 0;

64 
	#SåHash
(
s
Ë(
	`whash°r
((s), 20Ë& (
hèbÀ_size_möus_⁄e
))

	)

66 
	#hfödblock
(
s
, 
h
Ë
	`sfödblock
(s, h = 
	`SåHash
(s))

	)

67 
	#födblock
(
s
Ë
	`sfödblock
(s, 
	`SåHash
(s))

	)

69 
INLINE_STATIC
 
block_t
 *
sfödblock
 
PROT
((*, ));

79 
block_t
 **
	gba£_èbÀ
 = (block_t **) 0;

80 
	ghèbÀ_size
;

81 
	ghèbÀ_size_möus_⁄e
;

83 
INLINE_STATIC
 
block_t
 *
Æloc_√w_°rög
 
PROT
((*, ));

85 
	$öô_°rögs
()

87 
x
, 
y
;

90 
y
 = 
HTABLE_SIZE
;

91 
hèbÀ_size
 = 1; hèbÀ_sizê< 
y
; htable_size *= 2)

93 
hèbÀ_size_möus_⁄e
 = 
hèbÀ_size
 - 1;

94 
ba£_èbÀ
 = 
	`CALLOCATE
(
hèbÀ_size
, 
block_t
 *,

95 
TAG_STR_TBL
, "init_strings");

96 #ifde‡
STRING_STATS


97 
ovîhód_byãs
 +((
block_t
 *Ë* 
hèbÀ_size
);

100 
x
 = 0; x < 
hèbÀ_size
; x++) {

101 
ba£_èbÀ
[
x
] = 0;

103 
	}
}

112 
INLINE_STATIC
 
block_t
 *

113 
sfödblock
 
	$P2
(*, 
s
, , 
h
)

115 
block_t
 *
cuº
, *
¥ev
;

117 
cuº
 = 
ba£_èbÀ
[
h
];

118 
¥ev
 = 
NULL
;

119 #ifde‡
STRING_STATS


120 
num_°r_£¨ches
++;

123 
cuº
) {

124 #ifde‡
STRING_STATS


125 
£¨ch_Àn
++;

127 i‡(*(
	`STRING
(
cuº
)Ë=*
s
 && !
	`°rcmp
(STRING(curr), s)) {

128 i‡(
¥ev
) {

129 
	`NEXT
(
¥ev
ËNEXT(
cuº
);

130 
	`NEXT
(
cuº
Ë
ba£_èbÀ
[
h
];

131 
ba£_èbÀ
[
h
] = 
cuº
;

133  (
cuº
);

135 
¥ev
 = 
cuº
;

136 
cuº
 = 
	`NEXT
(curr);

138  ((
block_t
 *) 0);

139 
	}
}

142 
föd°rög
 
	$P1
(*, 
s
)

144 
block_t
 *
b
;

146 i‡((
b
 = 
	`födblock
(
s
))) {

147  
	`STRING
(
b
);

149  (
NULL
);

151 
	}
}

155 
INLINE_STATIC
 
block_t
 *

156 
Æloc_√w_°rög
 
	$P2
(*, 
°rög
, , 
h
)

158 
block_t
 *
b
;

159 
Àn
 = 
	`°æí
(
°rög
);

160 
size
;

162 i‡(
Àn
 > 
max_°rög_Àngth
) {

163 
Àn
 = 
max_°rög_Àngth
;

165 
size
 = (
block_t
Ë+ 
Àn
 + 1;

166 
b
 = (
block_t
 *Ë
	`DXALLOC
(
size
, 
TAG_SHARED_STRING
, "alloc_new_string");

167 
	`°∫˝y
(
	`STRING
(
b
), 
°rög
, 
Àn
);

168 
	`STRING
(
b
)[
Àn
] = '\0';

170 
	`SIZE
(
b
Ë(
Àn
 > 
USHRT_MAX
 ? USHRT_MAX :Üen);

171 
	`REFS
(
b
) = 1;

172 
	`NEXT
(
b
Ë
ba£_èbÀ
[
h
];

173 
ba£_èbÀ
[
h
] = 
b
;

174 
	`ADD_NEW_STRING
(
	`SIZE
(
b
), (
block_t
));

175 
	`ADD_STRING
(
	`SIZE
(
b
));

176  (
b
);

177 
	}
}

180 
make_sh¨ed_°rög
 
	$P1
(*, 
°r
)

182 
block_t
 *
b
;

183 
h
;

185 
b
 = 
	`hfödblock
(
°r
, 
h
);

186 i‡(!
b
) {

187 
b
 = 
	`Æloc_√w_°rög
(
°r
, 
h
);

189 i‡(
	`REFS
(
b
))

190 
	`REFS
(
b
)++;

191 
	`ADD_STRING
(
	`SIZE
(
b
));

193 
	`NDBG
(
b
);

194  (
	`STRING
(
b
));

195 
	}
}

202 
ªf_°rög
 
	$P1
(*, 
°r
)

204 
block_t
 *
b
;

206 
b
 = 
	`BLOCK
(
°r
);

207 #ifde‡
DEBUG


208 i‡(
b
 !
	`födblock
(
°r
)) {

209 
	`Áèl
("°øŒoc.c: cÆÀdÑef_°rög o¿n⁄-sh¨ed såög: %s.\n", 
°r
);

212 i‡(
	`REFS
(
b
))

213 
	`REFS
(
b
)++;

214 
	`NDBG
(
b
);

215 
	`ADD_STRING
(
	`SIZE
(
b
));

216  
°r
;

217 
	}
}

226 
‰ì_°rög
 
	$P1
(*, 
°r
)

228 
block_t
 **
¥ev
, *
b
;

229 
h
;

231 
b
 = 
	`BLOCK
(
°r
);

232 
	`DEBUG_CHECK1
(
b
 !
	`födblock
(
°r
),"stralloc.c: free_string called onÇon-shared string: %s.\n", str);

238 i‡(!
	`REFS
(
b
))

241 
	`REFS
(
b
)--;

242 
	`SUB_STRING
(
	`SIZE
(
b
));

244 
	`NDBG
(
b
);

245 i‡(
	`REFS
(
b
) > 0)

248 
h
 = 
	`SåHash
(
°r
);

249 
¥ev
 = 
ba£_èbÀ
 + 
h
;

250 (
b
 = *
¥ev
)) {

251 i‡(
	`STRING
(
b
Ë=
°r
) {

252 *
¥ev
 = 
	`NEXT
(
b
);

255 
¥ev
 = &(
	`NEXT
(
b
));

258 
	`DEBUG_CHECK1
(!
b
, "‰ì_°rög:ÇŸ found i¿°rögÅabÀ! (\"%s\")\n", 
°r
);

260 
	`SUB_NEW_STRING
(
	`SIZE
(
b
), (
block_t
));

261 
	`FREE
(
b
);

262 
CHECK_STRING_STATS
;

263 
	}
}

266 
dóŒoˇã_°rög
 
	$P1
(*, 
°r
)

268 
h
;

269 
block_t
 *
b
, **
¥ev
;

271 
h
 = 
	`SåHash
(
°r
);

272 
¥ev
 = 
ba£_èbÀ
 + 
h
;

273 (
b
 = *
¥ev
)) {

274 i‡(
	`STRING
(
b
Ë=
°r
) {

275 *
¥ev
 = 
	`NEXT
(
b
);

278 
¥ev
 = &(
	`NEXT
(
b
));

280 
	`DEBUG_CHECK1
(!
b
,"°øŒoc.c: dóŒoˇã_°rög cÆÀd o¿n⁄-sh¨ed såög: %s.\n", 
°r
);

282 
	`FREE
(
b
);

283 
	}
}

286 
add_°rög_°©us
 
	$P2
(
outbuf„r_t
 *, 
out
, , 
vîbo£
)

288 #ifde‡
STRING_STATS


289 i‡(
vîbo£
 == 1) {

290 
	`outbuf_add
(
out
, "All strings:\n");

291 
	`outbuf_add
(
out
, "-------------------------\t Strings Bytes\n");

293 i‡(
vîbo£
 != -1)

294 
	`outbuf_addv
(
out
, "All strings:\t\t\t%8d %8d + %d overhead\n",

295 
num_di°ö˘_°rögs
, 
byãs_di°ö˘_°rögs
, 
ovîhód_byãs
);

296 i‡(
vîbo£
 == 1) {

297 
	`outbuf_addv
(
out
, "Totalásked for\t\t\t%8d %8d\n",

298 
Ælocd_°rögs
, 
Ælocd_byãs
);

299 
	`outbuf_addv
(
out
, "SpaceáctuallyÑequired/total string bytes %d%%\n",

300 (
byãs_di°ö˘_°rögs
 + 
ovîhód_byãs
Ë* 100 / 
Ælocd_byãs
);

301 
	`outbuf_addv
(
out
, "Searches: %d Average searchÜength: %6.3f\n",

302 
num_°r_£¨ches
, (Ë
£¨ch_Àn
 /Çum_str_searches);

304  (
byãs_di°ö˘_°rögs
 + 
ovîhód_byãs
);

306 i‡(
vîbo£
)

307 
	`outbuf_add
(
out
, "<String statistics disabled,Ço informationávailable>\n");

310 
	}
}

312 #ifde‡
DEBUGMALLOC_EXTENSIONS


313 
	#DME
 0,

	)

315 
	#DME


	)

324 #ifde‡
DEBUGMALLOC


325 *
öt_√w_°rög
 
	$P2
(, 
size
, *, 
èg
)

327 *
öt_√w_°rög
 
	$P1
(, 
size
)

330 
mÆloc_block_t
 *
mbt
;

333 i‡(!
size
) {

334 
the_nuŒ_°rög_blocks
[0].
ªf
++;

335 
	`ADD_NEW_STRING
(0, (
mÆloc_block_t
));

336  
the_nuŒ_°rög
;

340 
mbt
 = (
mÆloc_block_t
 *)
	`DXALLOC
(
size
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, 
èg
);

341 i‡(
size
 < 
USHRT_MAX
) {

342 
mbt
->
size
 = size;

343 
	`ADD_NEW_STRING
(
size
, (
mÆloc_block_t
));

345 
mbt
->
size
 = 
USHRT_MAX
;

346 
	`ADD_NEW_STRING
(
USHRT_MAX
, (
mÆloc_block_t
));

348 
mbt
->
ªf
 = 1;

349 
	`ADD_STRING
(
mbt
->
size
);

350 
CHECK_STRING_STATS
;

351  (*)(
mbt
 + 1);

352 
	}
}

354 *
exãnd_°rög
 
	$P2
(*, 
°r
, , 
Àn
) {

355 
mÆloc_block_t
 *
mbt
;

356 #ifde‡
STRING_STATS


357 
ﬁdsize
 = 
	`MSTR_SIZE
(
°r
);

360 
mbt
 = (
mÆloc_block_t
 *)
	`DREALLOC
(
	`MSTR_BLOCK
(
°r
), 
Àn
 + (mÆloc_block_tË+ 1, 
TAG_MALLOC_STRING
, "extend_string");

361 i‡(
Àn
 < 
USHRT_MAX
) {

362 
mbt
->
size
 = 
Àn
;

364 
mbt
->
size
 = 
USHRT_MAX
;

366 
	`ADD_STRING_SIZE
(
mbt
->
size
 - 
ﬁdsize
);

367 
CHECK_STRING_STATS
;

369  (*)(
mbt
 + 1);

370 
	}
}

372 #ifde‡
DEBUGMALLOC


373 *
öt_Æloc_c°rög
 
	$P2
(*, 
°r
, *, 
èg
)

375 *
öt_Æloc_c°rög
 
	$P1
(*, 
°r
)

378 *
ªt
;

380 
ªt
 = (*)
	`DXALLOC
(
	`°æí
(
°r
Ë+ 1, 
TAG_STRING
, 
èg
);

381 
	`°r˝y
(
ªt
, 
°r
);

382  
ªt
;

383 
	}
}

	@stralloc.h

1 #i‚de‡
_STRALLOC_H_


2 
	#_STRALLOC_H_


	)

5 #unde‡
NOISY_DEBUG


6 
	#NOISY_STRING
 "w‹kroom"

	)

9 #ifde‡
NOISY_DEBUG


10 
bp
 
PROT
(());

11 #ifde‡
NOISY_STRING


12 
	#NDBG
(
x
Ëi‡(
	`°rcmp
(
	`STRING
(x), 
NOISY_STRING
)==0) \

13 
	`debug_mesßge
("%†- %d\n", 
	`STRING
(
x
), 
	`REFS
(x)), 
	`bp
()

	)

15 
	#NDBG
(
x
Ë
	`debug_mesßge
("%†- %d\n", 
	`STRING
(x), 
	`REFS
(x)), 
	`bp
()

	)

18 
	#NDBG
(
x
)

	)

21 #i‡
deföed
(
DEBUGMALLOC_EXTENSIONS
Ë&& deföed(
STRING_STATS
)

29 
	#CHECK_STRING_STATS


	)

31 
	#CHECK_STRING_STATS


	)

34 #ifde‡
STRING_STATS


35 
	#ADD_NEW_STRING
(
Àn
, 
ovîhód
Ë
num_di°ö˘_°rögs
++; 
byãs_di°ö˘_°rögs
 +À¿+ 1; 
ovîhód_byãs
 +
	)
overhead

36 
	#SUB_NEW_STRING
(
Àn
, 
ovîhód
Ë
num_di°ö˘_°rögs
--; 
byãs_di°ö˘_°rögs
 -À¿+ 1; 
ovîhód_byãs
 -
	)
overhead

38 
	#ADD_STRING
(
Àn
Ë
Ælocd_°rögs
++; 
Ælocd_byãs
 +À¿+ 1; 
CHECK_STRING_STATS


	)

39 
	#ADD_STRING_SIZE
(
Àn
Ë
Ælocd_byãs
 +Àn; 
byãs_di°ö˘_°rögs
 +
	)
len

40 
	#SUB_STRING
(
Àn
Ë
Ælocd_°rögs
--; 
Ælocd_byãs
 -À¿+ 1; 
CHECK_STRING_STATS


	)

43 
	#ADD_NEW_STRING
(
x
, 
y
)

	)

44 
	#SUB_NEW_STRING
(
x
, 
y
)

	)

45 
	#ADD_STRING
(
x
)

	)

46 
	#ADD_STRING_SIZE
(
x
)

	)

47 
	#SUB_STRING
(
x
)

	)

50 
	smÆloc_block_s
 {

51 #ifde‡
DEBUGMALLOC_EXTENSIONS


52 
	mexåa_ªf
;

54 
	msize
;

55 
	mªf
;

56 } 
	tmÆloc_block_t
;

58 
	#MSTR_BLOCK
(
x
Ë(((
mÆloc_block_t
 *)(x)Ë- 1)

	)

59 
	#MSTR_EXTRA_REF
(
x
Ë(
	`MSTR_BLOCK
(x)->
exåa_ªf
)

	)

60 
	#MSTR_REF
(
x
Ë(
	`MSTR_BLOCK
(x)->
ªf
)

	)

61 
	#MSTR_SIZE
(
x
Ë(
	`MSTR_BLOCK
(x)->
size
)

	)

62 
	#MSTR_UPDATE_SIZE
(
x
, 
y
Ë
	`SAFE
(\

63 
	`ADD_STRING_SIZE
(
y
 - 
	`MSTR_SIZE
(
x
));\

64 
	`MSTR_BLOCK
(
x
)->
size
 = \

65 (
y
 > 
USHRT_MAX
 ? USHRT_MAX : y);\

66 )

	)

68 
	#FREE_MSTR
(
x
Ë
	`SAFE
(\

69 
	`DEBUG_CHECK
(
	`MSTR_REF
(
x
) != 1, "FREE_MSTR used oná multiplyÑeferenced string\n");\

70 
svÆue_°æí_size
 = 
	`MSTR_SIZE
(
x
);\

71 
	`SUB_NEW_STRING
(
svÆue_°æí_size
, \

72 (
mÆloc_block_t
));\

73 
	`FREE
(
	`MSTR_BLOCK
(
x
));\

74 
	`SUB_STRING
(
svÆue_°æí_size
);\

75 )

	)

82 
	#COUNTED_STRLEN
(
x
Ë((
svÆue_°æí_size
 = 
	`MSTR_SIZE
(x)), svÆue_°æí_sizê!
USHRT_MAX
 ? svÆue_°æí_sizê: 
	`°æí
((x)+USHRT_MAX)+USHRT_MAX)

	)

85 
	#COUNTED_REF
(
x
Ë
	`MSTR_REF
(x)

	)

89 
	#INC_COUNTED_REF
(
x
Ëi‡(
	`MSTR_REF
(x)ËMSTR_REF(x)++;

	)

92 
	#DEC_COUNTED_REF
(
x
Ë(!(
	`MSTR_REF
(xË=0 || --MSTR_REF(xË> 0))

	)

94 
	sblock_s
 {

95 
block_s
 *
	m√xt
;

96 #i‡
deföed
(
DEBUGMALLOC_EXTENSIONS
Ë|| (
SIZEOF_PTR
 == 8)

97 
	mexåa_ªf
;

100 
	msize
;

101 
	mªfs
;

102 } 
	tblock_t
;

104 
	#NEXT
(
x
Ë(x)->
√xt


	)

105 
	#REFS
(
x
Ë(x)->
ªfs


	)

106 
	#EXTRA_REF
(
x
Ë(x)->
exåa_ªf


	)

107 
	#SIZE
(
x
Ë(x)->
size


	)

108 
	#BLOCK
(
x
Ë(((
block_t
 *)(x)Ë- 1Ë

	)

109 
	#STRING
(
x
Ë((*)(x + 1))

	)

111 
	#SHARED_STRLEN
(
x
Ë
	`COUNTED_STRLEN
(x)

	)

113 
	#SVALUE_STRLEN
(
x
Ë(((x)->
subty≥
 & 
STRING_COUNTED
) ? \

114 
	`COUNTED_STRLEN
((
x
)->
u
.
°rög
) : \

115 
	`°æí
((
x
)->
u
.
°rög
))

	)

118 
	#SVALUE_STRLEN_DIFFERS
(
x
, 
y
Ë((((x)->
subty≥
 & 
STRING_COUNTED
) && \

119 ((
y
)->
subty≥
 & 
STRING_COUNTED
)) ? \

120 
	`MSTR_SIZE
((
x
)->
u
.
°rög
) != \

121 
	`MSTR_SIZE
((
y
)->
u
.
°rög
Ë: 0)

	)

125 
öô_°rögs
 
PROT
(());

126 *
föd°rög
 
PROT
((*));

127 *
make_sh¨ed_°rög
 
PROT
((*));

128 *
ªf_°rög
 
PROT
((*));

129 
‰ì_°rög
 
PROT
((*));

130 
dóŒoˇã_°rög
 
PROT
((*));

131 
add_°rög_°©us
 
PROT
((
outbuf„r_t
 *, ));

133 *
exãnd_°rög
 
PROT
((*, ));

135 
svÆue_°æí_size
;

137 #ifde‡
STRING_STATS


138 
num_di°ö˘_°rögs
;

139 
byãs_di°ö˘_°rögs
;

140 
Ælocd_°rögs
;

141 
Ælocd_byãs
;

142 
ovîhód_byãs
;

	@strfuncs.c

6 
	~"°d.h
"

8 
	#DIGIT
(
x
Ë(
	`isdigô
(x) ? (x) - '0' : \

9 
	`i¶owî
(
x
Ë? (xË+ 10 - 'a' : (xË+ 10 - 'A')

	)

10 
	#MBASE
 ('z' - 'a' + 1 + 10)

	)

12 
°πﬁ
 
	$P3
(*, 
°r
, **, 
±r
, , 
ba£
)

14 
vÆ
;

15 
c
;

16 
xx
, 
√g
 = 0;

18 i‡(
±r
 != (**) 0)

19 *
±r
 = 
°r
;

20 i‡(
ba£
 < 0 || ba£ > 
MBASE
)

22 i‡(!
	`iß um
(
c
 = *
°r
)) {

23 
	`is•a˚
(
c
))

24 
c
 = *++
°r
;

25 
c
) {

27 
√g
++;

29 
c
 = *++
°r
;

32 i‡(
ba£
 == 0)

33 i‡(
c
 != '0')

34 
ba£
 = 10;

35 i‡(
°r
[1] == 'x' || str[1] == 'X')

36 
ba£
 = 16;

38 
ba£
 = 8;

43 i‡(!
	`iß um
(
c
Ë|| (
xx
 = 
	`DIGIT
(c)Ë>
ba£
)

45 i‡(
ba£
 =16 && 
c
 ='0' && 
	`isxdigô
(
°r
[2]) &&

46 (
°r
[1] == 'x' || str[1] == 'X'))

47 
c
 = *(
°r
 += 2);

48 
vÆ
 = -
	`DIGIT
(
c
); 
	`iß um
(¯*++
°r
Ë&& (
xx
 = DIGIT(c)Ë< 
ba£
;)

50 
vÆ
 = 
ba£
 * vÆ - 
xx
;

51 i‡(
±r
 != (**) 0)

52 *
±r
 = 
°r
;

53  (
√g
 ? 
vÆ
 : -val);

54 
	}
}

56 
°rc•n
 
	$P2
(*, 
s
, *, 
£t
)

58 *
t
;

59 
cou¡
 = 0;

61 *
s
) {

62 
t
 = 
£t
;

63 *
t
 && (*
s
 != *t))

64 
t
++;

65 i‡(!*
t
) {

66 
s
++;

67 
cou¡
++;

72  (
cou¡
);

73 
	}
}

76 
INLINE
 *
mem£t
 
	$P3
(*, 
s
, , 
c
, , 
n
)

78 i‡(
c
 == 0)

79 
	`bzîo
(
s
, 
n
);

81 
	`debug_mesßge
("Failed in memset\n");

82 
	`exô
(1);

84 
	}
}

86 
INLINE
 *
mem˝y
 
	$P3
(*, 
b
, *, 
a
, , 
s
)

88 
	`bc›y
(
a
, 
b
, 
s
);

89  
b
;

90 
	}
}

	@swap.c

1 
	~"°d.h
"

2 
	~"sw≠.h
"

3 
	~"fûe_ö˛.h
"

4 
	~"simul_efun.h
"

5 
	~"ma°î.h
"

6 
	~"comm.h
"

7 
	~"md.h
"

8 
	~"fûe.h
"

9 
	~"p‹t.h
"

20 
	gnum_sw≠≥d
;

21 
	gtŸÆ_byãs_sw≠≥d
;

22 
	glöe_num_byãs_sw≠≥d
;

23 
	gfûe_«me_buf
[100];

24 *
	gfûe_«me
 = 
fûe_«me_buf
;

27 #ifde‡
SWAP_USE_FD


28 
	gsw≠_fûe
;

30 
FILE
 *
	gsw≠_fûe
;

33 
	#DIFF
(
x
, 
y
Ë((*)(xË- (*)(y))

	)

34 
	#ADD
(
x
, 
y
Ë(&(((*)(y))[(
POINTER_INT
)x]))

	)

36 
	ssw_block_s
 {

37 
	m°¨t
;

38 
	mÀngth
;

39 
sw_block_s
 *
	m√xt
;

40 } 
	tsw_block_t
;

42 
sw_block_t
 *
	gsw≠_‰ì
;

44 
	gœ°_d©a
;

46 
as£π_sw≠_fûe
 
PROT
(());

47 
Æloc_sw≠
 
PROT
(());

48 
‰ì_sw≠
 
PROT
((
°¨t
, 
Àngth
));

49 
sw≠_ö
 
PROT
((**, ));

50 
sw≠_out
 
PROT
((*, , *));

59 
	$as£π_sw≠_fûe
()

61 i‡(
sw≠_fûe
 =
NULL
) {

62 #ifde‡
SWAP_USE_FD


63 
ho°
[50];

65 
	`gëho°«me
(
ho°
,  host);

66 
	`•rötf
(
fûe_«me_buf
, "%s.%s.%d", 
SWAP_FILE
, 
ho°
,

67 
exã∫Æ_p‹t
[0].
p‹t
);

68 
fûe_«me
 = 
fûe_«me_buf
;

69 i‡(
fûe_«me
[0] == '/')

70 
fûe_«me
++;

71 
sw≠_fûe
 = 
	`›í
(
fûe_«me
, 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
);

73 
ho°
[50];

75 
	`gëho°«me
(
ho°
,  host);

76 
	`•rötf
(
fûe_«me_buf
, "%s.%s.%d", 
SWAP_FILE
, 
ho°
,

77 
exã∫Æ_p‹t
[0].
p‹t
);

78 
fûe_«me
 = 
fûe_«me_buf
;

79 i‡(
fûe_«me
[0] == '/')

80 
fûe_«me
++;

81 
sw≠_fûe
 = 
	`f›í
(
fûe_«me
, "w+b");

83 
sw≠_‰ì
 = 0;

84 
œ°_d©a
 = 0;

86 i‡(
sw≠_fûe
 == 0)

90 
	}
}

96 
sw≠_£ek
 
	$P2
(, 
off£t
, , 
Êag
) {

97 
ªt
;

100 #ifde‡
SWAP_USE_FD


101 
ªt
 = 
	`l£ek
(
sw≠_fûe
, 
off£t
, 
Êag
);

103 
ªt
 = 
	`f£ek
(
sw≠_fûe
, 
off£t
, 
Êag
);

105 } 
ªt
 =-1 && 
î∫o
 =
EINTR
);

106 i‡(
ªt
 == -1)

107 
	`Áèl
("Couldn't seekÅhe swap file,Érror %s, offset %d.\n",

108 
	`p‹t_°ªº‹
(
î∫o
), 
off£t
);

109 
	}
}

117 
Æloc_sw≠
 
	$P1
(, 
Àngth
)

119 
sw_block_t
 *
±r
, *
¥ev
;

120 
ªt
;

126 
±r
 = 
sw≠_‰ì
, 
¥ev
 = 0;Öå;Öªv =Öå,Öå =Öå->
√xt
) {

127 i‡(
±r
->
Àngth
 <Üength)

132 
ªt
 = 
±r
->
°¨t
;

133 
±r
->
°¨t
 +
Àngth
;

134 
±r
->
Àngth
 -=Üength;

135 i‡(
±r
->
Àngth
 == 0) {

139 i‡(!
¥ev
)

140 
sw≠_‰ì
 = 
±r
->
√xt
;

142 
¥ev
->
√xt
 = 
±r
->next;

143 
	`FREE
(
±r
);

145  
ªt
;

151  
œ°_d©a
;

152 
	}
}

160 
‰ì_sw≠
 
	$P2
(, 
°¨t
, , 
Àngth
)

162 
sw_block_t
 *
m
, *
±r
, *
¥ev
;

164 
Àngth
 += ();

169 
m
 = (
sw_block_t
 *Ë
	`DXALLOC
((sw_block_t), 
TAG_SWAP
, "free_swap");

170 
m
->
°¨t
 = start;

171 
m
->
Àngth
 =Üength;

173 
±r
 = 
sw≠_‰ì
, 
¥ev
 = 0;Öå;Öªv =Öå,Öå =Öå->
√xt
) {

174 i‡(
°¨t
 < 
±r
->start)

177 i‡(!
¥ev
) {

178 
sw≠_‰ì
 = 
m
;

180 
¥ev
->
√xt
 = 
m
;

182 
m
->
√xt
 = 
±r
;

187 i‡(
±r
 && 
m
->
°¨t
 + m->
Àngth
 ==Ötr->start) {

188 
m
->
Àngth
 +
±r
->length;

189 
m
->
√xt
 = 
±r
->next;

190 
	`FREE
(
±r
);

192 i‡(
¥ev
 &&Öªv->
°¨t
 +Öªv->
Àngth
 =
m
->start) {

193 
¥ev
->
Àngth
 +
m
->length;

194 
¥ev
->
√xt
 = 
m
->next;

195 
	`FREE
(
m
);

196 
m
 = 
¥ev
;

203 i‡(
m
->
°¨t
 + m->
Àngth
 =
œ°_d©a
) {

204 
	`DEBUG_CHECK
(
m
->
√xt
, "extraneous free swap blocks!\n");

206 
±r
 = 
sw≠_‰ì
, 
¥ev
 = 0;Öå !
m
;Öªv =Öå,Öå =Öå->
√xt
);

207 
œ°_d©a
 = 
m
->
°¨t
;

208 
	`FREE
(
m
);

209 i‡(!
¥ev
)

210 
sw≠_‰ì
 = 0;

212 
¥ev
->
√xt
 = 0;

214 
	}
}

223 
sw≠_out
 
	$P3
(*, 
block
, , 
size
, *, 
lo˝
)

225 i‡(!
block
 || 
time_to_sw≠
 == 0)

227 i‡(!
	`as£π_sw≠_fûe
())

230 i‡(*
lo˝
 == -1) {

231 *
lo˝
 = 
	`Æloc_sw≠
(
size
 +  size);

232 
	`sw≠_£ek
(*
lo˝
, 0);

233 #ifde‡
SWAP_USE_FD


234 i‡((
	`wrôe
(
sw≠_fûe
, &
size
,  size) !=  size) ||

235 
	`wrôe
(
sw≠_fûe
, 
block
, 
size
) != size) {

236 
	`debug_≥º‹
("sw≠_out", 
sw≠_fûe
);

237 *
lo˝
 = -1;

241 i‡(
	`fwrôe
((*Ë&
size
,  size, 1, 
sw≠_fûe
) != 1 ||

242 
	`fwrôe
(
block
, 
size
, 1, 
sw≠_fûe
) != 1) {

243 
	`debug_≥º‹
("swap_out:swap file", 0);

244 *
lo˝
 = -1;

248 i‡(*
lo˝
 >
œ°_d©a
)

249 
œ°_d©a
 = *
lo˝
 +  
size
 + size;

251 
tŸÆ_byãs_sw≠≥d
 +
size
;

253 
	}
}

261 
sw≠_ö
 
	$P2
(**, 
blockp
, , 
loc
)

263 
size
;

265 
	`DEBUG_CHECK
(!
blockp
, "blockpÇull in swap_in()\n");

267 i‡(
loc
 == -1)

269 
	`sw≠_£ek
(
loc
, 0);

270 #ifde‡
SWAP_USE_FD


272 i‡(
	`ªad
(
sw≠_fûe
, &
size
,  size) == -1)

273 
	`Áèl
("Couldn'tÑeadÅhe swap file.\n");

274 
	`DEBUG_CHECK
(
size
 <= 0, "Illegal sizeÑead from swap file.\n");

275 *
blockp
 = 
	`DXALLOC
(
size
, 
TAG_SWAP
, "swap_in");

276 i‡(
	`ªad
(
sw≠_fûe
, *
blockp
, 
size
) == -1)

277 
	`Áèl
("Couldn'tÑeadÅhe swap file.\n");

280 i‡(
	`‰ód
((*Ë&
size
,  size, 1, 
sw≠_fûe
) == -1)

281 
	`Áèl
("Couldn'tÑeadÅhe swap file.\n");

282 
	`DEBUG_CHECK
(
size
 <= 0, "Illegal sizeÑead from swap file.\n");

283 *
blockp
 = 
	`DXALLOC
(
size
, 
TAG_SWAP
, "swap_in");

284 i‡(
	`‰ód
(*
blockp
, 
size
, 1, 
sw≠_fûe
) == -1)

285 
	`Áèl
("Couldn'tÑeadÅhe swap file.\n");

287 
tŸÆ_byãs_sw≠≥d
 -
size
;

288  
size
;

289 
	}
}

306 
loˇã_out
 
	$P1
(
¥ogøm_t
 *, 
¥og
)

308 i‡(!
¥og
)

310 
	`debug
(
d_Êag
, ("locate_out: %p %p %p %p %p %p %p\n",

311 
¥og
->
¥ogøm
,Örog->
fun˘i⁄_èbÀ
,

312 
¥og
->
°rögs
,Örog->
v¨übÀ_èbÀ
,Örog->
öhîô
,

313 
¥og
->
¨gumít_ty≥s
,Örog->
ty≥_°¨t
));

315 
¥og
->
¥ogøm
 = (*)
	`DIFF
(prog->program,Örog);

316 
¥og
->
fun˘i⁄_èbÀ
 = (
fun˘i⁄_t
 *)
	`DIFF
(prog->function_table,Örog);

317 
¥og
->
fun˘i⁄_Êags
 = (*)
	`DIFF
(prog->function_flags,Örog);

318 
¥og
->
°rögs
 = (**)
	`DIFF
(prog->strings,Örog);

319 
¥og
->
v¨übÀ_èbÀ
 = (**)
	`DIFF
(prog->variable_table,Örog);

320 
¥og
->
v¨übÀ_ty≥s
 = (*)
	`DIFF
(prog->variable_types,Örog);

321 
¥og
->
öhîô
 = (
öhîô_t
 *)
	`DIFF
(prog->inherit,Örog);

322 
¥og
->
˛as£s
 = (
˛ass_def_t
 *)
	`DIFF
(prog->classes,Örog);

323 
¥og
->
˛ass_membîs
 = (
˛ass_membî_íåy_t
 *)
	`DIFF
(prog->class_members,Örog);

324 i‡(
¥og
->
ty≥_°¨t
) {

325 
¥og
->
¨gumít_ty≥s
 = (*)
	`DIFF
(prog->argument_types,Örog);

326 
¥og
->
ty≥_°¨t
 = (*)
	`DIFF
(prog->type_start,Örog);

329 
	}
}

343 
loˇã_ö
 
	$P1
(
¥ogøm_t
 *, 
¥og
)

345 i‡(!
¥og
)

347 
¥og
->
¥ogøm
 = 
	`ADD
(prog->program,Örog);

348 
¥og
->
fun˘i⁄_èbÀ
 = (
fun˘i⁄_t
 *)
	`ADD
(prog->function_table,Örog);

349 
¥og
->
fun˘i⁄_Êags
 = (*)
	`ADD
(prog->function_flags,Örog);

350 
¥og
->
°rögs
 = (**)
	`ADD
(prog->strings,Örog);

351 
¥og
->
v¨übÀ_èbÀ
 = (**)
	`ADD
(prog->variable_table,Örog);

352 
¥og
->
v¨übÀ_ty≥s
 = (*)
	`ADD
(prog->variable_types,Örog);

353 
¥og
->
öhîô
 = (
öhîô_t
 *)
	`ADD
(prog->inherit,Örog);

354 
¥og
->
˛as£s
 = (
˛ass_def_t
 *)
	`ADD
(prog->classes,Örog);

355 
¥og
->
˛ass_membîs
 = (
˛ass_membî_íåy_t
 *)
	`ADD
(prog->class_members,Örog);

356 i‡(
¥og
->
ty≥_°¨t
) {

357 
¥og
->
¨gumít_ty≥s
 = (*)
	`ADD
(prog->argument_types,Örog);

358 
¥og
->
ty≥_°¨t
 = (*)
	`ADD
(prog->type_start,Örog);

360 
	`debug
(
d_Êag
, ("locate_in: %p %p %p %p %p %p %p\n",

361 
¥og
->
¥ogøm
,Örog->
fun˘i⁄_èbÀ
,

362 
¥og
->
°rögs
,Örog->
v¨übÀ_èbÀ
,Örog->
öhîô
,

363 
¥og
->
¨gumít_ty≥s
,Örog->
ty≥_°¨t
));

366 
	}
}

373 
sw≠
 
	$P1
(
obje˘_t
 *, 
ob
)

384 i‡(
ob
 =
simul_efun_ob
 || ob =
ma°î_ob
)  0;

385 i‡(
ob
->
Êags
 & 
O_DESTRUCTED
)

387 
	`debug
(
d_Êag
, ("Sw≠ obje˘ /%†‘e‡%d)", 
ob
->
«me
, ob->
ªf
));

389 i‡(
ob
->
¥og
->
löe_öfo
)

390 
	`sw≠_löe_numbîs
(
ob
->
¥og
);

391 i‡((
ob
->
Êags
 & 
O_HEART_BEAT
Ë|| (ob->Êag†& 
O_CLONE
)) {

392 
	`debug
(
d_Êag
, (" objectÇot swapped - heart beat or cloned."));

395 i‡(
ob
->
¥og
->
ªf
 > 1 || ob->
öãø˘ive
) {

396 
	`debug
(
d_Êag
, (" objectÇot swapped - inherited or interactive or inápply_low() cache."));

400 i‡(
ob
->
¥og
->
func_ªf
 > 0) {

401 
	`debug
(
d_Êag
, (" objectÇot swapped -Ñeferenced by functions."));

405 
	`loˇã_out
(
ob
->
¥og
);

406 i‡(
	`sw≠_out
((*Ë
ob
->
¥og
, ob->¥og->
tŸÆ_size
, (*Ë&ob->
sw≠_num
)) {

407 
num_sw≠≥d
++;

408 
	`‰ì_¥og
(
ob
->
¥og
, 0);

409 
ob
->
¥og
 = 0;

410 
ob
->
Êags
 |
O_SWAPPED
;

413 
	`loˇã_ö
(
ob
->
¥og
);

416 
	}
}

418 
lﬂd_ob_‰om_sw≠
 
	$P1
(
obje˘_t
 *, 
ob
)

420 i‡(
ob
->
sw≠_num
 == -1)

421 
	`Áèl
("LoadingÇot swapped object.\n");

423 
	`debug
(
d_Êag
, ("Unsw≠ obje˘ /%†‘e‡%d)", 
ob
->
«me
, ob->
ªf
));

425 
	`sw≠_ö
((**Ë&
ob
->
¥og
, ob->
sw≠_num
);

426 
	`SET_TAG
(
ob
->
¥og
, 
TAG_PROGRAM
);

431 
	`loˇã_ö
(
ob
->
¥og
);

434 
ob
->
Êags
 &~
O_SWAPPED
;

435 
num_sw≠≥d
--;

436 
tŸÆ_¥og_block_size
 +
ob
->
¥og
->
tŸÆ_size
;

437 
tŸÆ_num_¥og_blocks
 += 1;

438 
	}
}

444 
sw≠_löe_numbîs
 
	$P1
(
¥ogøm_t
 *, 
¥og
)

446 
size
;

448 i‡(!
¥og
 || !¥og->
löe_öfo
)

451 
	`debug
(
d_Êag
, ("Sw≠Üöênumbî†f‹ /%s", 
¥og
->
«me
));

453 
size
 = 
¥og
->
fûe_öfo
[0];

454 i‡(
	`sw≠_out
((*Ë
¥og
->
fûe_öfo
, 
size
,

455 &
¥og
->
löe_sw≠_ödex
)) {

456 
löe_num_byãs_sw≠≥d
 +
size
;

457 
	`FREE
(
¥og
->
fûe_öfo
);

458 
¥og
->
fûe_öfo
 = 0;

459 
¥og
->
löe_öfo
 = 0;

463 
	}
}

468 
lﬂd_löe_numbîs
 
	$P1
(
¥ogøm_t
 *, 
¥og
)

470 
size
;

472 i‡(
¥og
->
löe_öfo
)

475 
	`debug
(
d_Êag
, ("Unsw≠Üöênumbî†f‹ /%s\n", 
¥og
->
«me
));

477 
size
 = 
	`sw≠_ö
((**Ë&
¥og
->
fûe_öfo
,Örog->
löe_sw≠_ödex
);

478 
	`SET_TAG
(
¥og
->
fûe_öfo
, 
TAG_LINENUMBERS
);

479 
¥og
->
löe_öfo
 = (*)&¥og->
fûe_öfo
[prog->file_info[1]];

480 
löe_num_byãs_sw≠≥d
 -
size
;

481 
	}
}

490 
ªmove_sw≠_fûe
 
	$P1
(
obje˘_t
 *, 
ob
)

492 i‡(!
ob
)

496 i‡(
ob
->
Êags
 & 
O_SWAPPED
)

497 
	`lﬂd_ob_‰om_sw≠
(
ob
);

498 i‡(
ob
->
¥og
)

499 
	`‰ì_sw≠
(
ob
->
sw≠_num
, ob->
¥og
->
tŸÆ_size
);

500 
ob
->
sw≠_num
 = -1;

501 
	}
}

507 
ªmove_löe_sw≠
 
	$P1
(
¥ogøm_t
 *, 
¥og
)

509 i‡(!
¥og
->
löe_öfo
)

510 
	`lﬂd_löe_numbîs
(
¥og
);

511 i‡(
¥og
->
löe_sw≠_ödex
 !-1 &&Örog->
löe_öfo
)

512 
	`‰ì_sw≠
(
¥og
->
löe_sw≠_ödex
,

513 
¥og
->
fûe_öfo
[0]);

514 
¥og
->
löe_sw≠_ödex
 = -1;

515 
	}
}

517 
¥öt_sw≠_°©s
 
	$P1
(
outbuf„r_t
 *, 
out
)

519 
size
, 
˙t
, 
íd
;

520 
sw_block_t
 *
m
;

522 
	`outbuf_add
(
out
, "Swap information:\n");

523 
	`outbuf_add
(
out
, "-------------------------\n");

524 
	`outbuf_addv
(
out
, "Prog†sw≠≥d: %10lu\n", 
num_sw≠≥d
);

525 
	`outbuf_addv
(
out
, "Löíum byãs: %10lu\n", 
löe_num_byãs_sw≠≥d
);

526 
	`outbuf_addv
(
out
, "TŸÆ byã†sw≠≥d: %10lu\n", 
tŸÆ_byãs_sw≠≥d
);

527 i‡(!
sw≠_fûe
) {

528 
	`outbuf_add
(
out
, "No swap file\n");

531 
size
 = 
˙t
 = 0;

532 
m
 = 
sw≠_‰ì
; m; 
size
 +m->
Àngth
, 
˙t
++, m = m->
√xt
);

533 
	`sw≠_£ek
(0, 2);

534 #ifde‡
SWAP_USE_FD


535 
íd
 = 
	`ãŒ
(
sw≠_fûe
Ë- 
œ°_d©a
;

537 
íd
 = 
	`·ñl
(
sw≠_fûe
Ë- 
œ°_d©a
;

539 i‡(
íd
) {

540 
size
 +
íd
;

541 
˙t
++;

543 
	`outbuf_addv
(
out
, "Fªed byãs: %10lu (%d chunks)\n", 
size
, 
˙t
);

544 
	}
}

549 
	$u∆ök_sw≠_fûe
()

551 i‡(
sw≠_fûe
 == 0)

553 #ifde‡
SWAP_USE_FD


554 
	`˛o£
(
sw≠_fûe
);

555 
	`u∆ök
(
fûe_«me
);

557 
	`u∆ök
(
fûe_«me
);

558 
	`f˛o£
(
sw≠_fûe
);

560 
	}
}

	@swap.h

1 #i‚de‡
SWAP_H


2 
	#SWAP_H


	)

4 
	~"Õc_ö˛.h
"

9 
sw≠
 
PROT
((
obje˘_t
 *));

10 
sw≠_löe_numbîs
 
PROT
((
¥ogøm_t
 *));

11 
lﬂd_ob_‰om_sw≠
 
PROT
((
obje˘_t
 *));

12 
lﬂd_löe_numbîs
 
PROT
((
¥ogøm_t
 *));

13 
ªmove_sw≠_fûe
 
PROT
((
obje˘_t
 *));

14 
u∆ök_sw≠_fûe
 
PROT
(());

15 
ªmove_löe_sw≠
 
PROT
((
¥ogøm_t
 *));

16 
loˇã_ö
 
PROT
((
¥ogøm_t
 *));

17 
loˇã_out
 
PROT
((
¥ogøm_t
 *));

18 
¥öt_sw≠_°©s
 
PROT
((
outbuf„r_t
 *));

	@sysmalloc.c

1 
	#IN_MALLOC_WRAPPER


	)

2 
	#NO_OPCODES


	)

3 
	~"°d.h
"

4 
	~"Õc_ö˛.h
"

5 
	~"simuœã.h
"

6 
	~"comm.h
"

8 #ifde‡
DO_MSTATS


9 
show_m°©s
 
	$P2
(
outbuf„r_t
 *, 
ob
, *, 
s
) {

10 
	`outbuf_add
(
ob
, "No malloc statisticsávailable with SYSMALLOC\n");

11 
	}
}

	@telnet.h

23 
	#IAC
 255

	)

24 
	#DONT
 254

	)

25 
	#DO
 253

	)

26 
	#WONT
 252

	)

27 
	#WILL
 251

	)

28 
	#SB
 250

	)

29 
	#GA
 249

	)

30 
	#EL
 248

	)

31 
	#EC
 247

	)

32 
	#AYT
 246

	)

33 
	#AO
 245

	)

34 
	#IP
 244

	)

35 
	#BREAK
 243

	)

36 
	#DM
 242

	)

37 
	#NOP
 241

	)

38 
	#SE
 240

	)

39 
	#EOR
 239

	)

40 
	#ABORT
 238

	)

41 
	#SUSP
 237

	)

42 
	#xEOF
 236

	)

44 
	#SYNCH
 242

	)

46 #ifde‡
TELCMDS


47 *
	gãlcmds
[] =

54 
	#TELCMD_FIRST
 
xEOF


	)

55 
	#TELCMD_LAST
 
IAC


	)

56 
	#TELCMD_OK
(
x
Ë((xË<
TELCMD_LAST
 && (xË>
TELCMD_FIRST
)

	)

57 
	#TELCMD
(
x
Ë
ãlcmds
[(x)-
TELCMD_FIRST
]

	)

61 
	#TELOPT_BINARY
 0

	)

62 
	#TELOPT_ECHO
 1

	)

63 
	#TELOPT_RCP
 2

	)

64 
	#TELOPT_SGA
 3

	)

65 
	#TELOPT_NAMS
 4

	)

66 
	#TELOPT_STATUS
 5

	)

67 
	#TELOPT_TM
 6

	)

68 
	#TELOPT_RCTE
 7

	)

69 
	#TELOPT_NAOL
 8

	)

70 
	#TELOPT_NAOP
 9

	)

71 
	#TELOPT_NAOCRD
 10

	)

72 
	#TELOPT_NAOHTS
 11

	)

73 
	#TELOPT_NAOHTD
 12

	)

74 
	#TELOPT_NAOFFD
 13

	)

75 
	#TELOPT_NAOVTS
 14

	)

76 
	#TELOPT_NAOVTD
 15

	)

77 
	#TELOPT_NAOLFD
 16

	)

78 
	#TELOPT_XASCII
 17

	)

79 
	#TELOPT_LOGOUT
 18

	)

80 
	#TELOPT_BM
 19

	)

81 
	#TELOPT_DET
 20

	)

82 
	#TELOPT_SUPDUP
 21

	)

83 
	#TELOPT_SUPDUPOUTPUT
 22

	)

84 
	#TELOPT_SNDLOC
 23

	)

85 
	#TELOPT_TTYPE
 24

	)

86 
	#TELOPT_EOR
 25

	)

87 
	#TELOPT_TUID
 26

	)

88 
	#TELOPT_OUTMRK
 27

	)

89 
	#TELOPT_TTYLOC
 28

	)

90 
	#TELOPT_3270REGIME
 29

	)

91 
	#TELOPT_X3PAD
 30

	)

92 
	#TELOPT_NAWS
 31

	)

93 
	#TELOPT_TSPEED
 32

	)

94 
	#TELOPT_LFLOW
 33

	)

95 
	#TELOPT_LINEMODE
 34

	)

96 
	#TELOPT_EXOPL
 255

	)

98 
	#NTELOPTS
 (1+
TELOPT_LINEMODE
)

	)

99 #ifde‡
TELOPTS


100 *
	gãl›ts
[
NTELOPTS
] =

113 
	#TELOPT_FIRST
 
TELOPT_BINARY


	)

114 
	#TELOPT_LAST
 
TELOPT_LINEMODE


	)

115 
	#TELOPT_OK
(
x
Ë((xË<
TELOPT_LAST
 && (xË>
TELOPT_FIRST
)

	)

116 
	#TELOPT
(
x
Ë
ãl›ts
[(x)-
TELOPT_FIRST
]

	)

120 
	#TELQUAL_IS
 0

	)

121 
	#TELQUAL_SEND
 1

	)

127 
	#LM_MODE
 1

	)

128 
	#LM_FORWARDMASK
 2

	)

129 
	#LM_SLC
 3

	)

131 
	#MODE_EDIT
 0x01

	)

132 
	#MODE_TRAPSIG
 0x02

	)

133 
	#MODE_ACK
 0x04

	)

135 
	#MODE_MASK
 (
MODE_EDIT
|
MODE_TRAPSIG
|
MODE_ACK
)

	)

138 
	#MODE_FLOW
 0x0100

	)

139 
	#MODE_ECHO
 0x0200

	)

140 
	#MODE_INBIN
 0x0400

	)

141 
	#MODE_OUTBIN
 0x0800

	)

142 
	#MODE_FORCE
 0x1000

	)

144 
	#SLC_SYNCH
 1

	)

145 
	#SLC_BRK
 2

	)

146 
	#SLC_IP
 3

	)

147 
	#SLC_AO
 4

	)

148 
	#SLC_AYT
 5

	)

149 
	#SLC_EOR
 6

	)

150 
	#SLC_ABORT
 7

	)

151 
	#SLC_EOF
 8

	)

152 
	#SLC_SUSP
 9

	)

153 
	#SLC_EC
 10

	)

154 
	#SLC_EL
 11

	)

155 
	#SLC_EW
 12

	)

156 
	#SLC_RP
 13

	)

157 
	#SLC_LNEXT
 14

	)

158 
	#SLC_XON
 15

	)

159 
	#SLC_XOFF
 16

	)

160 
	#SLC_FORW1
 17

	)

161 
	#SLC_FORW2
 18

	)

163 
	#NSLC
 18

	)

169 
	#SLC_NAMELIST
 "0", "SYNCH", "BRK", "IP", "AO", "AYT", "EOR", \

171 "LNEXT", "XON", "XOFF", "FORW1", "FORW2"

	)

173 #ifde‡
SLC_NAMES


174 *
	g¶c_«mes
[] = {

175 
SLC_NAMELIST
;

178 *
¶c_«mes
[];

181 
	#SLC_NAME_OK
(
x
Ë(()(xË<
NSLC
)

	)

182 
	#SLC_NAME
(
x
Ë
¶c_«mes
[x]

	)

184 
	#SLC_NOSUPPORT
 0

	)

185 
	#SLC_CANTCHANGE
 1

	)

186 
	#SLC_VARIABLE
 2

	)

187 
	#SLC_DEFAULT
 3

	)

188 
	#SLC_LEVELBITS
 0x03

	)

190 
	#SLC_FUNC
 0

	)

191 
	#SLC_FLAGS
 1

	)

192 
	#SLC_VALUE
 2

	)

194 
	#SLC_ACK
 0x80

	)

195 
	#SLC_FLUSHIN
 0x40

	)

196 
	#SLC_FLUSHOUT
 0x20

	)

	@testsuite/clone/login.c

1 
	~<globÆs.h
>

5 #ifde‡
__INTERACTIVE_CATCH_TELL__


6 
	$ˇtch_ãŒ
(
°rög
 
°r
) {

7 
	`ª˚ive
(
°r
);

8 
	}
}

12 
	$log⁄
()

14 
obje˘
 
u£r
;

16 #ifde‡
__NO_ADD_ACTION__


17 
	`£t_this_∂ayî
(
	`this_obje˘
());

19 
	`wrôe
("WelcomeÅo Lil!\n\n");

20 
	`ˇt
("/etc/motd");

21 
	`wrôe
("\n> ");

22 #ifde‡
__PACKAGE_UIDS__


23 
	`£ãuid
(
	`gëuid
(
	`this_obje˘
()));

25 
u£r

	`√w
("/clone/user");

26 
u£r
->
	`£t_«me
("°uf" + 
	`gëoid
(user));

27 
	`exec
(
u£r
, 
	`this_obje˘
());

28 
u£r
->
	`£tup
();

29 #i‚de‡
__NO_ENVIRONMENT__


30 
u£r
->
	`move
(
VOID_OB
);

32 
	`de°ru˘
(
	`this_obje˘
());

33 
	}
}

	@testsuite/clone/user.c

5 
	~<globÆs.h
>

7 
öhîô
 
	gBASE
;

9 
¥iv©e
 
°rög
 
	g«me
;

11 #ifde‡
__INTERACTIVE_CATCH_TELL__


12 
	$ˇtch_ãŒ
(
°rög
 
°r
) {

13 
	`ª˚ive
(
°r
);

14 
	}
}

19 
°rög


20 
	$quîy_cwd
()

23 
	}
}

28 
	$log⁄
()

30 
	`wrôe
("WelcomeÅo Lil.\n> ");

31 
	}
}

35 
°rög


36 
	$quîy_«me
()

38  
«me
;

39 
	}
}

42 
	$£t_«me
(
°rög
 
¨g
)

46 
«me
 = 
¨g
;

47 
	}
}

53 
	$id
(
°rög
 
¨g
)

55  (
¨g
 =
	`quîy_«me
()Ë|| 
ba£
::
	`id
(arg);

56 
	}
}

58 #i‚de‡
__OLD_ED__


60 
	$wrôe_¥om±
() {

61 
	`quîy_ed_mode
()) {

64 
	`wrôe
(":");

68 
	`wrôe
("> ");

72 
	`wrôe
("*\b");

75 
	}
}

78 
	$°¨t_ed
(
°rög
 
fûe
) {

79 
	`wrôe
(
	`ed_°¨t
(
fûe
, 0));

80 
	}
}

83 #ifde‡
__NO_ADD_ACTION__


85 
	$exec_comm™d
(
°rög
 
¨g
) {

86 
°rög
 *
∑πs
 = 
	`ex∂ode
(
¨g
, " ");

87 
°rög
 
vîb
 = (
∑πs
) ?Öarts[0] : "";

88 
°rög
 
ª°
 = 
	`im∂ode
(
∑πs
[1..], " ");

89 
°rög
 
cmd_∑th
 = 
COMMAND_PREFIX
 + 
vîb
;

90 
obje˘
 
cobj
 = 
	`lﬂd_obje˘
(
cmd_∑th
);

92 i‡(
cobj
) {

93 
cobj
->
	`maö
(
ª°
);

97 
	}
}

100 
	$¥o˚ss_öput
(
°rög
 
¨g
) {

101 #i‚de‡
__OLD_ED__


102 i‡(
	`quîy_ed_mode
() != -1) {

103 i‡(
¨g
[0] != '!') {

104 
	`wrôe
(
	`ed_cmd
(
¨g
));

107 
¨g
 =árg[1..];

110 
	`exec_comm™d
(
¨g
);

111 
	}
}

113 
°rög


114 
	$¥o˚ss_öput
(
°rög
 
¨g
)

116 #i‚de‡
__OLD_ED__


117 i‡(
	`quîy_ed_mode
() != -1) {

118 i‡(
¨g
[0] != '!') {

119 
	`wrôe
(
	`ed_cmd
(
¨g
));

122 
¨g
 =árg[1..];

126  
¨g
;

127 
	}
}

130 
	$comm™dHook
(
°rög
 
¨g
)

132 
°rög
 
cmd_∑th
;

133 
obje˘
 
cobj
;

135 
cmd_∑th
 = 
COMMAND_PREFIX
 + 
	`quîy_vîb
();

137 
cobj
 = 
	`lﬂd_obje˘
(
cmd_∑th
);

138 i‡(
cobj
) {

139  ()
cobj
->
	`maö
(
¨g
);

144 
	}
}

150 
	$öô
()

156 i‡(
	`this_obje˘
(Ë=
	`this_∂ayî
()) {

157 
	`add_a˘i⁄
("commandHook", "", 1);

159 
	}
}

165 
	$¸óã
()

167 #ifde‡
__PACKAGE_UIDS__


168 
	`£ãuid
(0);

170 
	}
}

175 
	$ª˚ive_mesßge
(
°rög
 
√w˛ass
, såög 
msg
)

178 
	`ª˚ive
(
msg
);

179 
	}
}

185 
	$£tup
()

187 
	`£t_hóπ_bót
(1);

188 #ifde‡
__PACKAGE_UIDS__


189 
	`£ãuid
(
	`gëuid
(
	`this_obje˘
()));

191 #i‚de‡
__NO_WIZARDS__


192 
	`íabÀ_wiz¨d
();

194 #i‚de‡
__NO_ADD_ACTION__


195 
	`£t_livög_«me
(
	`quîy_«me
());

196 
	`íabÀ_comm™ds
();

197 
	`add_a˘i⁄
("commandHook", "", 1);

199 
	`£t_this_∂ayî
(
	`this_obje˘
());

201 
	}
}

206 #i‚de‡
__NO_ENVIRONMENT__


207 
	$ãŒ_room
(
obje˘
 
ob
, 
°rög
 
msg
) {

208 
	`f‹óch
 (
ob
 
ö
 
	`Æl_övít‹y
(obË- ({ 
	`this_obje˘
() }))

209 
	`ãŒ_obje˘
(
ob
, 
msg
);

210 
	}
}

214 
	$√t_dód
()

216 
	`£t_hóπ_bót
(0);

217 #i‚de‡
__NO_ENVIRONMENT__


218 
	`ãŒ_room
(
	`ívú⁄mít
(), 
	`quîy_«me
() + " isÜink-dead.\n");

220 
	}
}

225 
	$ªc⁄√˘
()

227 
	`£t_hóπ_bót
(1);

228 #i‚de‡
__NO_ENVIRONMENT__


229 
	`ãŒ_room
(
	`ívú⁄mít
(), "Reconnected.\n");

230 
	`ãŒ_room
(
	`ívú⁄mít
(), 
	`quîy_«me
() + " hasÑeconnected.\n");

232 
	}
}

	@testsuite/command/codefor.c

2 
	$maö
(
°rög
 
a
)

4 
obje˘
 
ªt
;

5 
mixed
 
code
;

7 i‡(
	`fûe_size
("/tmp_eval_file.c") != -1)

8 
	`rm
 ("/tmp_eval_file.c");

9 i‡(
	`föd_obje˘
("/tmp_eval_file"))

10 
	`de°ru˘
(
	`föd_obje˘
("/tmp_eval_file"));

12 
	`wrôe_fûe
("/tmp_evÆ_fûe.c", "mixedÉvÆ(Ë{ " + 
a
 + "; }\n");

14 
ªt
 = 
	`lﬂd_obje˘
("/tmp_eval_file");

16 
	`dump_¥og
(
ªt
, 1, "/CODE_TMP_FILE");

17 
code
 = 
	`ªad_fûe
( "/CODE_TMP_FILE");

18 
	`rm
("/CODE_TMP_FILE");

19 
	`rm
("/tmp_eval_file.c");

21 
code
 = 
	`ex∂ode
(code, ";;; *** Disassembly ***\n");

22 
code
 = code[1];

23 
	`wrôe
(
code
[0..
	`°æí
(code)-1]);

25 
	}
}

	@testsuite/command/dest.c

1 
	~<comm™d.h
>

4 
	$maö
(
°rög
 
¨g
)

6 
obje˘
 
obj
;

8 i‡(!
¨g
) {

9 #i‚de‡
__NO_ADD_ACTION__


10  
	`nŸify_Áû
("usage: dest object\n");

12 
	`wrôe
("usage: dest object\n");

16 
obj
 = 
	`föd_obje˘
(
¨g
);

17 #i‚de‡
__NO_ENVIRONMENT__


18 i‡(!
obj
) {

19 
obj
 = 
	`¥e£¡
(
¨g
);

20 i‡(!
obj
) {

21 
obj
 = 
	`¥e£¡
(
¨g
, 
	`ívú⁄mít
(
	`¥evious_obje˘
()));

25 i‡(!
obj
) {

26 #i‚de‡
__NO_ADD_ACTION__


27  
	`nŸify_Áû
("can't findÅhat.\n");

29 
	`wrôe
("can't findÅhat.\n");

33 
obj
->
	`ªmove
();

34 i‡(
obj
) {

35 
	`de°ru˘
(
obj
);

38 
	}
}

	@testsuite/command/ed.c

1 
	~<globÆs.h
>

4 
	$maö
(
°rög
 
fûe
)

7 #ifde‡
__OLD_ED__


8 
	`ed
(
fûe
);

10 
	`this_∂ayî
()->
	`°¨t_ed
(
fûe
);

13 
	}
}

	@testsuite/command/eval.c

2 
	$maö
(
°rög
 
¨g
)

5 i‡(
	`fûe_size
("/tmp_eval_file.c") != -1)

6 
	`rm
 ("/tmp_eval_file.c");

7 i‡(
	`föd_obje˘
("/tmp_eval_file"))

8 
	`de°ru˘
(
	`föd_obje˘
("/tmp_eval_file"));

10 
	`wrôe_fûe
("/tmp_evÆ_fûe.c","mixedÉvÆ(Ë{ "+
¨g
+"; }\n");

11 
	`¥ötf
("Resu… = %O\n", "/tmp_evÆ_fûe"->
	`evÆ
());

13 
	}
}

	@testsuite/command/quit.c

1 
	~<comm™d.h
>

3 #ifde‡
__NO_ENVIRONMENT__


4 
	#ßy
(
x
Ë
	`shout
(x)

	)

8 
	$maö
(
°rög
 
¨g
)

10 
	`wrôe
("Bye.\n");

11 
	`ßy
((
°rög
)
	`¥evious_obje˘
()->
	`quîy_«me
()

13 
	`¥evious_obje˘
()->
	`ªmove
();

15 
	}
}

	@testsuite/command/rm.c

1 
	~<globÆs.h
>

4 
	$maö
(
°rög
 
fûe
)

7 
	`rm
(
fûe
);

9 
	}
}

	@testsuite/command/say.c

1 
	~<comm™d.h
>

3 #ifde‡
__NO_ENVIRONMENT__


4 
	#ßy
(
x
Ë
	`shout
(x)

	)

7 
	$maö
(
°rög
 
¨g
)

9 
	`ßy
((
°rög
)
	`¥evious_obje˘
()->
	`quîy_«me
()

10 + " says: " + 
¨g
 + "\n");

12 
	}
}

	@testsuite/command/shutdown.c

1 
	~<comm™d.h
>

4 
	$maö
(
°rög
 
¨g
)

6 
	`shutdown
(0);

8 
	}
}

	@testsuite/command/speed.c

1 
	#OTHER_TESTS


	)

2 
	#STRING_TESTS


	)

3 
	#ARRAY_TESTS


	)

4 
	#MAPPING_TESTS


	)

6 
	göhîô
 "/single/inh";

8 
	gtime
;

9 
	gßve
;

10 
mixed
 * 
	ga_globÆ_v¨
;

11 
m≠pög
 
	g™Ÿhî
;

12 
°rög
 
	g⁄e_m‹e
;

14 #i‚de‡
MUDOS


15 
	#m≠_dñëe
 
m_dñëe


	)

18 #ifde‡
__DGD__


19 
	#out
(
x
Ë
	`£nd_mesßge
(x)

	)

21 
	#out
(
x
Ë
	`wrôe
(x)

	)

24 
	$¸óã
() {

25 
a_globÆ_v¨
 = ({ 1, 3, 5, ({ 4, 1 }) });

26 
™Ÿhî
 = ([ 1 : "foo", 3 : "bar" ]);

27 
⁄e_m‹e
 = "Hmm";

28 
	}
}

30 
	$lfun0
() {

31 
	}
}

33 
	$lfun1
(
mixed
 
a1
) {

34 
	}
}

36 
	$lfun2
(
mixed
 
a1
, mixed 
a2
) {

37 
	}
}

39 
	$lfun3
(
mixed
 
a1
, mixed 
a2
, mixed 
a3
) {

40 
	}
}

41 #ifde‡
MUDOS


42 
	#START
 dÿ{ 
	`ª£t_evÆ_co°
(); 
	`£t_evÆ_limô
(0x7fffffff); 
bef‹e
 = 
	`rußge
(); } 0)

	)

43 
	#END
 
a·î
 = 
	`rußge
(); 
time
 =á·î["°ime"] +á·î["utime"] - 
bef‹e
["°ime"] - bef‹e["utime"]

	)

45 #ifde‡
ANCIENT


46 
	#START
 
	`ssˇnf
(
	`rußge
(), 
bef‹e
, 
i
); bef‹ê+
	)
i

47 
	#END
 
	`ssˇnf
(
	`rußge
(), 
a·î
, 
i
); 
time
 =á·î + i - 
bef‹e


	)

49 
	#START
 
bef‹e
 = 
	`rußge
()

	)

50 
	#END
 
a·î
 = 
	`rußge
(); 
time
 =á·î[0] +á·î[1] - 
bef‹e
[0] - bef‹e[1]

	)

54 
	#REPORT
(
z
, 
t
Ë
	`out
((zË+ ": " + (tË+ "\n")

	)

55 
	#LOOP
(
n
, 
x
Ë
i
 = 0; i < (n); i++Ë{ x; }

	)

57 
	#DIFF
(
z
, 
n
, 
x
, 
y
Ë
START
; 
	`LOOP
“, x); 
END
; 
ßve
 = 
time
; \

58 
START
; 
	`LOOP
(
n
, 
y
); 
END
; 
	`REPORT
(
z
, 
time
 - 
ßve
)

	)

59 
	#SINGLE
(
z
, 
x
Ë
START
; x; 
END
; 
	`REPORT
(z, 
time
)

	)

62 
	#INIT
(
n
Ë
START
; 
	`LOOP
“, ); 
END
; 
em±y
##¿
time


	)

64 
	#TIMEDIFF
(
z
, 
n
, 
x
, 
d
Ë
START
; 
	`LOOP
“, x); 
END
; 
	`REPORT
(z, 
time
 - d)

	)

65 
	#TIME
(
z
, 
n
, 
x
Ë
START
; 
	`LOOP
“, x); 
END
; 
	`REPORT
(z, 
time
 - 
em±y
##n)

	)

66 
	#SAVETIME
(
z
, 
n
, 
x
Ë
START
; 
	`LOOP
“, x); 
END
; z = 
time


	)

68 
	$maö
() {

69 #ifde‡
MUDOS


70 
m≠pög
 
bef‹e
, 
a·î
;

72 *
bef‹e
, *
a·î
;

74 
i
;

75 #ifde‡
STRING_TESTS


76 
°rög
 
s
, 
s1
, 
s2
, 
s3
;

78 #ifde‡
ARRAY_TESTS


79 
mixed
 *
a
, *
a1
, *
a2
, *
a3
;

81 #ifde‡
MAPPING_TESTS


82 
m≠pög
 
m
, 
m1
;

84 
em±y300
, 
em±y1000
, 
em±y10000
, 
em±y20000
, 
em±y50000
,

85 
em±y100000
, 
em±y200000
, 
em±y1000000
;

86 
ßve
;

87 
ss
, 
sm
;

89 #ifde‡
STRING_TESTS


90 
s1
 = "This isáÅest";

91 
s2
 = " ofÅheÉmergency broadcast system.";

92 
s3
 = 
s1
 + 
s2
;

94 #ifde‡
ARRAY_TESTS


95 
a1
 = ({ 5, 1, 3, 4, 2 });

96 
a2
 = ({ 9, 8, 7, 6, 10 });

97 
a3
 = ({ 4, 1 });

99 #ifde‡
MAPPING_TESTS


100 
m1
 = ([ "1" : "a", "2" : "b", "3" : "c", "4" : "d", "5" : "e" ]);

103 
	`out
("Initializing variables ...\n");

104 
	`INIT
(300);

105 
	`INIT
(1000);

106 
	`INIT
(10000);

107 
	`INIT
(20000);

108 
	`INIT
(50000);

109 
	`INIT
(100000);

110 
	`INIT
(200000);

111 
	`INIT
(1000000);

113 #ifde‡
OTHER_TESTS


114 
	`DIFF
("ö°ru˘i⁄", 10000000, 
ßve
, -save);

115 
	`SINGLE
("em±y f‹", 
i
 = 0; i < 3500000; i++) ;);

116 
i
 = 5000000; 
	`SINGLE
("while", i--); );

117 
i
 = 2500000; 
	`SINGLE
("while2", 1) { if (!(i--)) ; });

119 #ifde‡
STRING_TESTS


120 
	`TIME
("°rögássig¿(s)",1000000, 
s
 = 
s1
);

121 
	`TIME
("°rögássig¿(m)",200000, 
s
 = 
s3
);

122 
	`TIME
("°rögádd (ss)",200000, 
s1
 + 
s2
);

123 
	`TIME
("°rögádd (sm)",200000,
s1
 + 
s3
);

124 
	`TIME
("°rögádd (ms)",100000,
s3
 + 
s1
);

125 
	`TIME
("°rögádd (mm)",100000,
s3
 + s3);

126 
	`SAVETIME
(
ss
, 100000, 
s
 = 
s1
);

127 
	`SAVETIME
(
sm
, 100000, 
s
 = 
s3
);

128 
	`TIMEDIFF
("°rög +(ss)",100000,
s
 = 
s1
; s +
s2
, 
ss
);

129 
	`TIMEDIFF
("°rög +(sm)",100000,
s
 = 
s1
; s +
s3
, 
ss
);

130 
	`TIMEDIFF
("°rög +(ms)",100000,
s
 = 
s3
; s +
s1
, 
sm
);

131 
	`TIMEDIFF
("°rög +(mm)",100000,
s
 = 
s3
; s +s3, 
sm
);

133 #ifde‡
ARRAY_TESTS


134 
	`TIME
("Æloˇãáºay",10000, 
a
 = 
	`Æloˇã
(100));

135 
	`TIME
("array creation (int)",50000, ({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }));

136 
	`TIME
("array creation (string)",20000,({ "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

137 
	`TIME
("¨øyássign",200000,
a
 = 
a1
);

138 
	`TIME
("¨øyáddôi⁄",50000,
a1
 + 
a2
);

139 
	`TIME
("¨øy subåa˘i⁄",20000,
a1
 - 
a3
);

140 
	`TIME
("¨øyÜookup",100000,
a1
[3]);

141 
	`SAVETIME
(
ßve
,50000,
a
 = 
a1
);

142 
	`TIMEDIFF
("¨øy +=",50000,
a
 = 
a1
;á +
a2
,
ßve
);

143 
	`TIMEDIFF
("¨øy -=",50000,
a
 = 
a1
;á -
a3
, 
ßve
);

145 #ifde‡
MAPPING_TESTS


146 
	`TIME
("Æloˇã m≠pög",50000, 
m
 = 
	`Æloˇã_m≠pög
(100));

147 
	`TIME
("mapping creation (int)",50000, ([ 1 : 2, 3 : 4, 5 : 6, 7 : 8 ]));

148 
	`TIME
("mapping creation (string)",50000, ([ "1" : "a", "2" : "b", "3" : "c", "4" : "d", "5" : "e" ]));

149 
	`TIME
("looku∞”xi°)",100000, 
m1
["3"]);

150 
	`TIME
("looku∞(missög)",100000, 
m1
["6"]);

151 
	`TIME
("m≠pögássign",200000, 
m
 = 
m1
);

152 
	`SAVETIME
(
ßve
,100000, 
m
 = 
m1
);

153 
	`TIMEDIFF
("m≠pög in£π",100000, 
m
 = 
m1
; m["6"] = "f", 
ßve
);

154 
	`TIMEDIFF
("m≠pögÑïœ˚",100000, 
m
 = 
m1
; m["2"] = 0, 
ßve
);

155 
	`TIMEDIFF
("m≠pög dñëe",100000, 
m
 = 
m1
; 
	`m≠_dñëe
(m, "2"), 
ßve
);

157 #ifde‡
OTHER_TESTS


158 
	`TIME
("loˇ»ˇŒ (nÿ¨gs)",100000, 
	`lfun0
());

159 
	`TIME
("loˇ»ˇŒ (1árg)",100000, 
	`lfun1
(1));

160 
	`TIME
("loˇ»ˇŒ (2árgs)",100000, 
	`lfun2
("foo", 1));

161 
	`TIME
("loˇ»ˇŒ (3árgs)",100000, 
	`lfun3
("foo", 1, 
i
));

162 
	`TIME
("simul_efun",100000, 
	`simul
());

163 
	`TIME
("ˇŒ_Ÿhî",50000,
	`this_obje˘
()->
	`lfun0
());

164 #ifde‡
MUDOS


165 
	`TIME
("ˇŒ_Ÿhî (°rög)",50000,"/comm™d/•ìd"->
	`lfun0
());

167 
	`TIME
("ˇŒ_Ÿhî (°rög)",50000,"/comm™d/•ìd"->
	`lfun0
());

169 
	`TIME
("ˇŒ_Ÿhî (miss)",50000,
	`this_obje˘
()->
	`d€¢t_exi°
());

170 
	`TIME
("öhîôed cÆl",100000,
	`ifun
());

171 
	`TIME
("ex∂icô inhîôed",100000,
öh
::
	`ifun
());

172 
	`TIME
("ßve_obje˘",300,
	`ßve_obje˘
("/tmp/tmp"));

173 
	`TIME
("ª°‹e_obje˘",1000,
	`ª°‹e_obje˘
("/tmp/tmp"));

174 
	`SAVETIME
(
ss
, 1000000, 
ßve
 = 0);

175 
	`SAVETIME
(
sm
, 1000000, 
ßve
 = 1);

176 
ßve
 = 0;

177 
	`TIMEDIFF
("i‡(x =0ËT",1000000,i‡(
ßve
 =0Ë{ savê0; }, 
ss
);

178 
ßve
 = 1;

179 
	`TIME
("i‡(x =0ËF",1000000,i‡(
ßve
 == 0) { });

180 
ßve
 = 1;

181 
	`TIMEDIFF
("i‡(xËT",1000000,i‡(
ßve
Ë{ savê1; }, 
sm
);

182 
ßve
 = 0;

183 
	`TIME
("i‡(xËF",1000000,i‡(
ßve
) { });

184 
ßve
 = 0;

185 
	`TIMEDIFF
("i‡(x <ÇËT",1000000,i‡(
ßve
 < 1Ë{ savê0; }, 
ss
);

186 
ßve
 = 1;

187 
	`TIME
("i‡(x <ÇËF",1000000,i‡(
ßve
 < 1) { });

188 
ßve
 = 0;

189 
	`TIMEDIFF
("i‡(!xËT",1000000,i‡(!
ßve
Ë{ savê0; }, 
ss
);

190 
ßve
 = 1;

191 
	`TIME
("i‡(!xËF",1000000,i‡(!
ßve
) { });

192 
ßve
 = 1;

193 
	`TIMEDIFF
("i‡(x =nËT",1000000,i‡(
ßve
 =1Ë{ savê1; }, 
sm
);

194 
ßve
 = 0;

195 
	`TIME
("i‡(x =nËF",1000000,i‡(
ßve
 == 1) { });

196 
	`SAVETIME
(
ßve
, 1000000, 
sm
 = 0);

197 
sm
 = 0;

198 
ss
 = 1;

199 
	`TIME
("i‡(x && y && zËF",1000000, i‡(
sm
 && sm && sm) { sm = 0; });

200 
	`TIME
("i‡(x && y && zËTF",1000000, i‡(
ss
 && 
sm
 && sm) { sm = 0; });

201 
	`TIME
("i‡(x && y && zËTTF",1000000, i‡(
ss
 && s†&& 
sm
) { sm = 0; });

202 
	`TIMEDIFF
("i‡(x && y && zËTTT",1000000, i‡(
ss
 && s†&& ssË{ 
sm
 = 0; },

203 
ßve
);

206 
	}
}

	@testsuite/command/tests.c

1 
	~<globÆs.h
>

3 
maö
(
°rög
 
fun
);

5 
	$ªcur£
(
°rög
 
dú
) {

6 
mixed
 
Àaks
;

8 
	`f‹óch
 (
°rög
 
fûe
 
ö
 
	`gë_dú
(
dú
 + "*.c"))

9 
	`maö
(
dú
 + 
fûe
);

10 
	`f‹óch
 (
°rög
 
subdú
 
ö
 
	`m≠
(
	`fûãr
(
	`gë_dú
(
dú
 + "*", -1),

11 (: 
$1
[1] == -2 :)),

12 (: 
$1
[0] :)) - ({ ".", ".." }))

14 i‡(
subdú
 == "fail") {

15 
	`f‹óch
 (
°rög
 
‚
 
ö
 
	`gë_dú
(
dú
 + "fail/*.c")) {

16 
	`ASSERT2
(
	`ˇtch
(
	`lﬂd_obje˘
(
dú
+"Áû/"+
‚
)), "fail/" + fn + "Üoaded");

17 #i‡
	`deföed
(
__DEBUGMALLOC_EXTENSIONS__
Ë&& deföed(
__CHECK_MEMORY__
)

18 
Àaks
 = 
	`check_mem‹y
();

19 i‡((
	`fûãr
(
	`ex∂ode
(
Àaks
, "\n"), (: 
$1
 && $1[0] :))) != 1) {

20 
	`wrôe
("A·îÅryögÅÿcompûe: " + 
dú
 + "Áû/" + 
‚
 + "\n");

21 
	`wrôe
(
Àaks
);

22 
	`îr‹
("LEAK\n");

26 
	`rm
("/log/compile");

28 
	`ªcur£
(
dú
 + 
subdú
 + "/");

30 
	}
}

33 
	$maö
(
°rög
 
fun
)

35 
°rög
 
Àaks
;

36 
obje˘
 
ç
 = 
	`this_∂ayî
();

38 i‡(!
fun
 || fun == "") {

39 
	`ªcur£
("/single/tests/");

40 
	`wrôe
("Checks succeeded.\n");

43 
fun
->
	`do_ã°s
();

44 i‡(
ç
 !
	`this_∂ayî
())

45 
	`îr‹
("BadÅhis_∂ayî(Ëa·î cÆlög " + 
fun
 + "\n");

46 #i‡
	`deföed
(
__DEBUGMALLOC_EXTENSIONS__
Ë&& deföed(
__CHECK_MEMORY__
)

47 
Àaks
 = 
	`check_mem‹y
();

48 i‡((
	`fûãr
(
	`ex∂ode
(
Àaks
, "\n"), (: 
$1
 && $1[0] :))) != 1) {

49 
	`wrôe
("A·î cÆlög: " + 
fun
 + "\n");

50 
	`wrôe
(
Àaks
);

51 
	`îr‹
("LEAK\n");

55 
	}
}

	@testsuite/command/update.c

1 
	~<globÆs.h
>

4 
	$maö
(
°rög
 
fûe
)

6 
obje˘
 
obj
;

9 i‡(!
fûe
) {

10 #i‚de‡
__NO_ADD_ACTION__


11  
	`nŸify_Áû
("update what?\n");

13 
	`wrôe
("update what?\n");

17 i‡(
obj
 = 
	`föd_obje˘
(
fûe
)) {

18 
	`de°ru˘
(
obj
);

20 
	`lﬂd_obje˘
(
fûe
);

22 
	}
}

	@testsuite/command/who.c

1 
	~<comm™d.h
>

4 
	$maö
(
°rög
 
¨g
)

6 
obje˘
 *
li°
;

7 
j
;

9 
	`¥ötf
("%-25s idle\n", "name (*edit, +input)");

10 
	`¥ötf
("-------------------- ----\n");

11 
li°
 = 
	`u£rs
(), 
j
 = 0; j < (list); j++) {

12 
	`¥ötf
("%-25†%4d\n", (
°rög
)
li°
[
j
]->
	`quîy_«me
() +

13 (
	`ö_edô
(
	`this_∂ayî
()) ? "*" : "") +

14 (
	`ö_öput
(
	`this_∂ayî
()) ? "+" : ""),

15 
	`quîy_idÀ
(
	`this_∂ayî
()) / 60

19 
	}
}

	@testsuite/include/command.h

1 
	~<globÆs.h
>

3 
öhîô
 
	gCLEAN_UP
;

	@testsuite/include/config.h

6 #i‚de‡
__CONFIG_H__


7 
	#__CONFIG_H__


	)

	@testsuite/include/globals.h

3 #ifde‡
__SENSIBLE_MODIFIERS__


4 
	#°©icf
 
¥Ÿe˘ed


	)

5 
	#°©icv
 
noßve


	)

7 
	#°©icf
 

	)

8 
	#°©icv
 

	)

11 
	~"ã°s.h
"

13 
	#SINGLE_DIR
 "/sögÀ"

	)

14 
	#CONFIG_DIR
 "/ëc"

	)

15 
	#LOG_DIR
 "/log"

	)

17 
	#VIRTUAL_D
 "/sögÀ/vútuÆ"

	)

19 
	#LOGIN_OB
 "/˛⁄e/logö"

	)

20 
	#USER_OB
 "/˛⁄e/u£r"

	)

21 
	#VOID_OB
 "/sögÀ/void"

	)

23 
	#ROOT_UID
 "RoŸ"

	)

24 
	#BACKBONE_UID
 "Backb⁄e"

	)

26 
	#BASE
 "/öhîô/ba£"

	)

27 
	#OVERRIDES_FILE
 "/sögÀ/simul_efun"

	)

29 
	#COMMAND_PREFIX
 "/comm™d/"

	)

32 
	#M_STATUS
 "°©us"

	)

33 
	#M_SAY
 "ßy"

	)

35 
	#CLEAN_UP
 "/öhîô/˛ón_up"

	)

	@testsuite/include/lpctypes.h

3 #i‚de‡
_TYPE_H


4 
	#_TYPE_H


	)

6 
	#INT
 "öt"

	)

7 
	#STRING
 "°rög"

	)

8 
	#ARRAY
 "¨øy"

	)

9 
	#OBJECT
 "obje˘"

	)

10 
	#MAPPING
 "m≠pög"

	)

11 
	#FUNCTION
 "fun˘i⁄"

	)

12 
	#FLOAT
 "Êﬂt"

	)

13 
	#BUFFER
 "buf„r"

	)

14 
	#CLASS
 "˛ass"

	)

	@testsuite/include/tests.h

1 #i‚de‡
TESTS_H


2 
	#TESTS_H


	)

4 
	#ASSERT
(
x
Ëi‡(!(x)Ë{ 
	`îr‹
(
	`fûe_«me
(Ë+ ": Check faûed.\n"); }

	)

5 
	#ASSERT2
(
x
, 
r
Ëi‡(!(x)Ë{ 
	`îr‹
(
	`fûe_«me
(Ë+ ":" +Ñ + ", Check faûed.\n"); }

	)

7 
	#SAVETP
 
ç
 = 
	`this_∂ayî
()

	)

8 
	#RESTORETP
 { i‡(
ç
Ë
	`evÆu©e
(
	`böd
–(: 
íabÀ_comm™ds
 :),Åp)); { 
obje˘
 
youd_√vî_u£_this_as_a_v¨
 = 
	`√w
("/sögÀ/void");ÉvÆu©e(böd–(:É«bÀ_comm™d†:), youd_√vî_u£_this_as_a_v¨)); 
	`de°ru˘
(youd_√vî_u£_this_as_a_v¨); } }

	)

10 #ifde‡
__OLD_TYPE_BEHAVIOR__


11 
	#TYPETEST
 
s¸óm
 
™d
 
dõ


	)

13 
	#TYPETEST


	)

	@testsuite/inherit/base.c

4 
¥iv©e
 
°©icv
 
°rög
 *
	gids
;

7 
	$ªmove
()

11 
	`de°ru˘
(
	`this_obje˘
());

12 
	}
}

14 #i‚de‡
__NO_ENVIRONMENT__


16 
	$move
(
mixed
 
de°
)

20 
	`move_obje˘
(
de°
);

21 
	}
}

25 
	$£t_ids
(
°rög
 *
¨g
)

28 
ids
 = 
¨g
;

29 
	}
}

32 
	$id
(
°rög
 
¨g
)

34 i‡(!
¨g
 || !
ids
) {

37  (
	`membî_¨øy
(
¨g
, 
ids
) != -1);

38 
	}
}

	@testsuite/inherit/clean_up.c

3 
	$˛ón_up
(
öh
)

5 
	`de°ru˘
(
	`this_obje˘
());

7 
	}
}

	@testsuite/inherit/master/valid.c

6 
	~<globÆs.h
>

10 
	$¸óã
() {

11 
	}
}

14 
	$vÆid_shadow
(
obje˘
 
ob
)

16 #ifde‡
__PACKAGE_UIDS__


17 i‡(
	`gëuid
(
ob
Ë=
ROOT_UID
) {

21 i‡(
ob
->
	`quîy_¥evít_shadow
(
	`¥evious_obje˘
())) {

25 
	}
}

28 
	$vÆid_auth‹
(
°rög
)

31 
	}
}

40 
	$vÆid_ovîride
(
°rög
 
fûe
, såög 
«me
)

42 i‡(
fûe
 =
OVERRIDES_FILE
) {

45 i‡((
«me
 ="move_obje˘"Ë&& (
fûe
 !
BASE
))

49 
	}
}

55 
	$vÆid_£ãuid
(
obje˘
, 
°rög
)

58 
	}
}

64 
	$vÆid_domaö
(
°rög
)

67 
	}
}

73 
	$vÆid_sockë
(
obje˘
, 
°rög
, 
mixed
 *)

76 
	}
}

85 
	$vÆid_wrôe
(
°rög
, 
mixed
, string)

88 
	}
}

93 
	$vÆid_ªad
(
°rög
, 
mixed
, string)

96 
	}
}

97 
¥iv©e
 
	gy
 = 1;

	@testsuite/inherit/tests.c

1 
°rög
 
	gã°_desc
;

4 
	$des¸ibe_ã°
(
°rög
 
desc
)

6 
ã°_desc
 = 
desc
;

7 
	}
}

9 
°rög


10 
	$quîy_ã°_öfo
()

12  
ã°_desc
;

13 
	}
}

	@testsuite/single/inh.c

1 
	$ifun
() {

2 
	}
}

	@testsuite/single/master.c

3 
	~<globÆs.h
>

6 
	göhîô
 "/inherit/master/valid";

8 
	$Êag
(
°rög
 
°r
) {

9 
°r
) {

11 "/comm™d/ã°s"->
	`maö
();

15 
°rög
 
foo
 = "This isáÅest.\n";

16 
°rög
 
b¨
 = "OfÅhe sprintf benchmark system.\n";

17 
°rög
 
bazz
 = "This is onlyáÅest.\n";

19 
i
 = 0; i < 10000; i++) {

20 
	`•rötf
("Lë'†£êi‡%20|†thi†i†™y %-100†Á°îÅh™Åhê%20òﬁd way.%s", 
foo
, 
b¨
, 42, 
bazz
);

22 
	`shutdown
();

26 
	`wrôe
("Unknown flag.\n");

28 
	`shutdown
();

29 
	}
}

31 
obje˘


32 
	$c⁄√˘
()

34 
obje˘
 
logö_ob
;

35 
mixed
 
îr
;

37 
îr
 = 
	`ˇtch
(
logö_ob
 = 
	`√w
(
LOGIN_OB
));

39 i‡(
îr
) {

40 
	`wrôe
("ItÜooksÜike someone is working onÅheÖlayer object.\n");

41 
	`wrôe
(
îr
);

42 
	`de°ru˘
(
	`this_obje˘
());

44  
logö_ob
;

45 
	}
}

52 
mixed


53 
	$compûe_obje˘
(
°rög
 
fûe
)

57 
	}
}

63 
°©icf
 

64 
	$¸ash
(
°rög
, 
obje˘
, object)

66 
	`îr‹
("foo\n");

67 
	`f‹óch
 (
obje˘
 
ob
 
ö
 
	`u£rs
())

68 
	`ãŒ_obje˘
(
ob
, "Master object shouts: Damn!\nMaster objectÅells you: The game is crashing.\n");

70 
	`log_fûe
("¸ashes", 
MUD_NAME
 + " cøshed on: " + 
	`˘ime
(
	`time
()) +

71 ",Éº‹: " + 
îr‹
 + "\n");

72 i‡(
comm™d_givî
) {

73 
	`log_fûe
("¸ashes", "this_∂ayî: " + 
	`fûe_«me
(
comm™d_givî
) + "\n");

75 i‡(
cuºít_obje˘
) {

76 
	`log_fûe
("¸ashes", "this_obje˘: " + 
	`fûe_«me
(
cuºít_obje˘
) + "\n");

79 
	}
}

87 
°©icf
 
°rög
 *

88 
	$upd©e_fûe
(
°rög
 
fûe
)

90 
°rög
 *
¨r
;

91 
°rög
 
°r
;

92 
i
;

94 
°r
 = 
	`ªad_fûe
(
fûe
);

95 i‡(!
°r
) {

98 
¨r
 = 
	`ex∂ode
(
°r
, "\n");

99 
i
 = 0; i < (
¨r
); i++) {

100 i‡(
¨r
[
i
][0] == '#') {

101 
¨r
[
i
] = 0;

104  
¨r
;

105 
	}
}

110 
°rög
 *

111 
	$ïûog
()

113 
°rög
 *
ôems
;

115 
ôems
 = 
	`upd©e_fûe
(
CONFIG_DIR
 + "/preload");

116  
ôems
;

117 
	}
}

122 
	$¥ñﬂd
(
°rög
 
fûe
)

124 
t1
;

125 
°rög
 
îr
;

127 i‡(
	`fûe_size
(
fûe
 + ".c") == -1)

130 
t1
 = 
	`time
();

131 
	`wrôe
("Pªlﬂdög : " + 
fûe
 + "...");

132 
îr
 = 
	`ˇtch
(
	`ˇŒ_Ÿhî
(
fûe
, "??"));

133 i‡(
îr
 != 0) {

134 
	`wrôe
("\nEº‹ " + 
îr
 + " whíÜﬂdög " + 
fûe
 + "\n");

136 
t1
 = 
	`time
() -Å1;

137 
	`wrôe
("(" + 
t1
/60 + "." +Å1 % 60 + ")\n");

139 
	}
}

145 
	$log_îr‹
(
°rög
, såög 
mesßge
)

147 
	`wrôe_fûe
(
LOG_DIR
 + "/compûe", 
mesßge
);

148 
	}
}

155 
	$ßve_ed_£tup
(
obje˘
 
who
, 
code
)

157 
°rög
 
fûe
;

159 i‡(!
	`öç
(
code
)) {

162 #ifde‡
__PACKAGE_UIDS__


163 
fûe
 = 
	`u£r_∑th
(
	`gëuid
(
who
)) + ".edrc";

165 
fûe
 = "/.edrc";

167 
	`rm
(
fûe
);

168  
	`wrôe_fûe
(
fûe
, 
code
 + "");

169 
	}
}

175 
	$ªåõve_ed_£tup
(
obje˘
 
who
)

177 
°rög
 
fûe
;

178 
code
;

180 #ifde‡
__PACKAGE_UIDS__


181 
fûe
 = 
	`u£r_∑th
(
	`gëuid
(
who
)) + ".edrc";

183 
fûe
 = "/.edrc";

185 i‡(
	`fûe_size
(
fûe
) <= 0) {

188 
	`ssˇnf
(
	`ªad_fûe
(
fûe
), "%d", 
code
);

189  
code
;

190 
	}
}

196 
	$de°ru˘_ívú⁄mít_of
(
obje˘
 
ob
)

198 i‡(!
	`öãø˘ive
(
ob
)) {

201 
	`ãŒ_obje˘
(
ob
, "The object containing you was dested.\n");

202 
ob
->
	`move
(
VOID_OB
);

203 
	}
}

207 
°rög


208 
	$make_∑th_absﬁuã
(
°rög
 
fûe
)

210 
fûe
 = 
	`ªsﬁve_∑th
((
°rög
)
	`this_∂ayî
()->
	`quîy_cwd
(), file);

211  
fûe
;

212 
	}
}

214 
°rög


215 
	$gë_roŸ_uid
()

217  
ROOT_UID
;

218 
	}
}

220 
°rög


221 
	$gë_bb_uid
()

223  
BACKBONE_UID
;

224 
	}
}

226 
°rög


227 
	$¸ót‹_fûe
(
°rög
 
°r
)

229  (
°rög
)
	`ˇŒ_Ÿhî
(
SINGLE_DIR
 + "/simul_efun", "¸ót‹_fûe", 
°r
);

230 
	}
}

232 
°rög


233 
	$domaö_fûe
(
°rög
 
°r
)

235  (
°rög
)
	`ˇŒ_Ÿhî
(
SINGLE_DIR
 + "/simul_efun", "domaö_fûe", 
°r
);

236 
	}
}

238 
°rög


239 
	$auth‹_fûe
(
°rög
 
°r
)

241  (
°rög
)
	`ˇŒ_Ÿhî
(
SINGLE_DIR
 + "/simul_efun", "auth‹_fûe", 
°r
);

242 
	}
}

244 
°rög
 
	$¥ivs_fûe
(
°rög
 
f
) {

245  
f
;

246 
	}
}

248 
°©icf
 
	$îr‹_h™dÀr
(
m≠pög
 
m≠
, 
Êag
) {

249 
obje˘
 
ob
;

250 
°rög
 
°r
;

252 
ob
 = 
	`this_öãø˘ive
(Ë|| 
	`this_∂ayî
();

253 i‡(
Êag
Ë
°r
 = "*Error caught\n";

254 
°r
 = "";

255 
°r
 +
	`•rötf
("Error: %s\nCurrent object: %O\nCurrentÖrogram: %s\nFile: %O Line: %d\n%O\n",

256 
m≠
["error"], (map["object"] || "No current object"),

257 (
m≠
["program"] || "No currentÖrogram"),

258 
m≠
["file"], map["line"],

259 
	`im∂ode
(
	`m≠_¨øy
(
m≠
["trace"],

260 (: 
	`•rötf
("Löe: %O Fûe: %O Obje˘: %O Progøm: %O", 
$1
["line"], $1["file"], $1["object"] || "No object", $1["program"] ||

262 
	`wrôe_fûe
("/log/log", 
°r
);

263 i‡(!
Êag
 && 
ob
Ë
	`ãŒ_obje˘
(ob, 
°r
);

264 
	}
}

266 
	$vÆid_böd
() {

269 
	}
}

271 
	$vÆid_hide
() {

274 
	}
}

276 
	$vÆid_compûe_to_c
() {

278 
	}
}

	@testsuite/single/simul_efun.c

4 #¥agm®
show_îr‹_c⁄ãxt


5 
	~<globÆs.h
>

6 
	~<Õ˘y≥s.h
>

9 
	$ßme
(
mixed
 
x
, mixed 
y
) {

10 i‡(
	`ty≥of
(
x
Ë!ty≥of(
y
))  0;

11 
	`ty≥of
(
x
)) {

12 
INT
:

13 
STRING
:

14 
OBJECT
:

15 
FLOAT
:

16  
x
 =
y
;

17 
MAPPING
:

18 i‡(
x
 =
y
)  1;

19 i‡((
x
Ë!(
y
))  0;

20 i‡(!
	`ßme
(
	`keys
(
x
), keys(
y
)))  0;

21 i‡(!
	`ßme
(
	`vÆues
(
x
), vÆues(
y
)))  0;

23 
ARRAY
:

24 i‡(
x
 =
y
)  1;

25 i‡((
x
Ë!(
y
))  0;

26 
i
 = 0; i < (
x
); i++) {

27 i‡(!
	`ßme
(
x
[
i
], 
y
[i]))  0;

30 
BUFFER
:

31 
FUNCTION
:

32 
CLASS
:

33 
	`îr‹
("Not implemented.");

35 
	}
}

38 
	$ˇt
(
°rög
 
fûe
)

40 
	`wrôe
(
	`ªad_fûe
(
fûe
));

41 
	}
}

43 
v¨¨gs
 

44 
	$gëoid
(
obje˘
 
ob
)

46 
id
;

48 
	`ssˇnf
(
	`fûe_«me
(
ob
 || 
	`¥evious_obje˘
()), "%*s#%d", 
id
);

49  
id
;

50 
	}
}

52 
°rög


53 
	$u£r_cwd
(
°rög
 
«me
)

55  ("/u/" + 
«me
[0..0] + "/" +Çame);

56 
	}
}

58 
°rög
 
	$u£r_∑th
(
°rög
 
«me
)

60  (
	`u£r_cwd
(
«me
) + "/");

61 
	}
}

65 
°rög


66 
	$fûe_ow√r
(
°rög
 
fûe
)

68 
°rög
 
ãmp
;

70 i‡(
fûe
[0] != '/') file = "/" + file;

72 i‡(
	`ssˇnf
(
fûe
, "/u/%s/%s/%*s", 
ãmp
,Åemp) == 2) {

73  
ãmp
;

76 
	}
}

78 
	~<Õ˘y≥s.h
>

85 
°rög


86 
	$dump_v¨übÀ
(
mixed
 
¨g
)

88 
°rög
 
πn
;

89 
mixed
 
x
, 
y
;

91 
	`ty≥of
(
¨g
)) {

92 
OBJECT
:  "("+
	`fûe_«me
(
¨g
)+")";

93 
STRING
:  "\""+
¨g
+"\"";

94 
INT
:  "#"+
¨g
;

95 
ARRAY
:

97 
πn
 = "ARRAY\n";

98 
	`f‹óch
 (
y
 
ö
 
¨g
)

99 
πn
 +
	`•rötf
("[%d] =%s\n", 
x
++, 
	`dump_v¨übÀ
(
y
));

101  
πn
;

104 
MAPPING
:

106 
πn
 = "MAPPING\n" +

107 
	`im∂ode
(
	`vÆues
(
	`m≠_m≠pög
(
¨g
,

108 (: 
	`•rötf
("[%s] =%s", 
$1
, 
$2
) :))), "\n");

109  
πn
;

112 
FUNCTION
:

113 
CLASS
:

114 
FLOAT
:

115 
BUFFER
:

117  
	`•rötf
("%O\n", 
¨g
);

122 
	}
}

129 
°rög
 
	$ªsﬁve_∑th
(
°rög
 
cuº
, såög 
√wî
) {

130 
i
, 
j
, 
size
;

131 
°rög
 *
tmp
;

133 
√wî
) {

136  
cuº
;

138 #i‚de‡
__NO_ENVIRONMENT__


140  
	`fûe_«me
(
	`ívú⁄mít
())+".c";

144 i‡(
√wî
[0..1] ="~/"Ë√wî = 
	`u£r_∑th
((
°rög
)
	`this_∂ayî
()->
	`quîy_«me
()) +Çewer[2..];

146 
√wî
[0]) {

149 
i
 = 
	`°r§ch
(
√wî
, '/');

150 i‡(
i
 < 0Ë
√wî
 = 
	`u£r_∑th
(newer[1..]);

151 
√wî
 = 
	`u£r_∑th
“ewî[1..
i
-1]) +Çewer[i..];

155 : 
√wî
[<0..<1] = 
cuº
 + "/";

159 i‡(
√wî
[<1] != '/')Çewer += "/";

160 
size
 = (
tmp
 = 
	`ªgexp
(
	`ex∂ode
(
√wî
, "/"), "."));

162 
i
 = 
j
 = 0;

164 
i
 < 
size
) {

165 
tmp
[
i
]) {

167 i‡(
j
) {

168 
j
-- && !
tmp
[j]);

169 i‡(
j
 >0Ë
tmp
[j] = 0;

170 
j
++;

173 
tmp
[
i
++] = 0;

177 
j
 = ++
i
;

181  "/"+
	`im∂ode
(
tmp
, "/");

183 
	}
}

188 
°rög


189 
	$domaö_fûe
(
°rög
)

191  
ROOT_UID
;

192 
	}
}

196 
°rög


197 
	$¸ót‹_fûe
(
°rög
)

199  
ROOT_UID
;

200 
	}
}

204 
°rög


205 
	$auth‹_fûe
(
°rög
)

207  
ROOT_UID
;

208 
	}
}

210 
	$simul
(Ë{
	}
}

	@testsuite/single/tests/compiler/at_block.c

1 
	$do_ã°s
() {

2 
mixed
 *
a
;

3 
°rög
 
s
 = @
END


4 
xxx


5 
yyy


6 
END
;

7 
	`ASSERT
–
s
 == "xxx\nyyy\n");

8 
a
 = @@
END


9 
xxx


10 
yyy


11 
END
;

12 
	`ASSERT
((
a
) == 2);

13 
	}
}

	@testsuite/single/tests/compiler/constant_expr.c

1 
	$do_ã°s
() {

2 
mixed
 
code
;

5 
code
 = 
	`__TREE__
 ( ( ({ 1, 3, 3 }) ) );

6 
	`ASSERT
(
	`ßme
(
code
, ({ "number", 3 })));

8 
code
 = 
	`__TREE__
 ( ({ 1, 3, 3 })[0] );

9 
	`ASSERT
(
	`ßme
(
code
, ({ "number", 1 })));

11 
code
 = 
	`__TREE__
 ( ({ 1, 4, 9 })[<2] );

12 
	`ASSERT
(
	`ßme
(
code
, ({ "number", 4 })));

14 
code
 = 
__TREE__
 { 
i
; ; i < 5; i++) ; };

15 
	`ASSERT
(
	`ßme
(
code
, ({

23 
code
 = 
	`__TREE__
( !code ? 1 : 2 );

24 
	`ASSERT
(
	`ßme
(
code
, ({

33 
	`ASSERT
(5/3 == 1);

34 
	`ASSERT
(1/8.0 == 0.125);

35 
	`ASSERT
(1.0/2 == 0.5);

36 
	`ASSERT
(1.0/2.0 == 0.5);

37 
	}
}

	@testsuite/single/tests/compiler/fail/arr_index.c

1 
	gfoo
 {

	@testsuite/single/tests/compiler/fail/bad_break.c

1 
	$foo
() {

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_continue.c

1 
	$foo
() {

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_for_init.c

1 
	$foo
() {

2 
x
 += 1; ; ) ;

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_foreach.c

1 
	$foo
() {

2 
	`f‹óch
 (
x
 
	`ö
 ({})) ;

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_init.c

1 
	gx
 += 1;

	@testsuite/single/tests/compiler/fail/bad_local_init.c

1 
	$foo
() {

2 
x
 += 1;

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_local_init2.c

1 
TYPETEST


3 
	$foo
() {

4 
x
 = "hi";

5 
	}
}

	@testsuite/single/tests/compiler/fail/bad_param.c

1 
	$foo
() {

2 (: 
$
-1 :);

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_param2.c

1 
	$foo
() {

2 (: 
$1000
 :);

3 
	}
}

	@testsuite/single/tests/compiler/fail/bad_return.c

1 
TYPETEST


3 
	$foo
() {

5 
	}
}

	@testsuite/single/tests/compiler/fail/bad_return2.c

1 
TYPETEST


3 
	$foo
() {

5 
	}
}

	@testsuite/single/tests/compiler/fail/bad_type_init.c

1 
TYPETEST


3 
	gx
 = "hi";

	@testsuite/single/tests/compiler/fail/class_redef.c

1 ˛as†
	cfoo
 {

2 
	mx
;

5 ˛as†
	cfoo
 {

6 
°rög
 
	my
;

	@testsuite/single/tests/compiler/fail/div_zero.c

1 
	$foo
(
mixed
 
x
) {

2 
x
) {

5 
	}
}

	@testsuite/single/tests/compiler/fail/div_zero3.c

1 
	$foo
() {

3 
	}
}

	@testsuite/single/tests/compiler/fail/eof_in_comment.c

	@testsuite/single/tests/compiler/fail/eof_in_string.c

1 
	$¸óã
() {

3 
	}
}

	@testsuite/single/tests/compiler/fail/local_redef.c

1 
	$foo
(
x
) {

2 
x
;

3 
	}
}

	@testsuite/single/tests/compiler/fail/local_redef2.c

1 
	$foo
() {

2 
x
;

4 
x
;

6 
	}
}

	@testsuite/single/tests/compiler/fail/lvar_func.c

1 
	$foo
() {

2 
x
;

3 (: 
x
 :);

4 
	}
}

	@testsuite/single/tests/compiler/fail/lvar_func2.c

1 
	$foo
() {

2 
x
;

3 (: 
x
 + 1 :);

4 
	}
}

	@testsuite/single/tests/compiler/fail/missing_endif.c

	@testsuite/single/tests/compiler/fail/missing_type.c

1 
	gfoo
;

	@testsuite/single/tests/compiler/fail/mixed_case.c

1 
	$foo
(
mixed
 
x
) {

2 
x
) {

6 
	}
}

	@testsuite/single/tests/compiler/fail/mod_zero.c

1 
	$foo
(
mixed
 
x
) {

2 
x
) {

5 
	}
}

	@testsuite/single/tests/compiler/fail/no_member.c

1 ˛as†
	cfoo
 {

2 
	mx
;

5 
	$foo
() {

6 
foo
 
y
;

7 
y
->
z
;

8 
	}
}

	@testsuite/single/tests/compiler/fail/no_ret_type.c

1 #¥agm®
°ri˘_ty≥s


3 
	$foo
() {

4 
	}
}

	@testsuite/single/tests/compiler/fail/no_such_class.c

1 
	$foo
() {

2 
	`√w
(
˛ass
 
foo
);

3 
	}
}

	@testsuite/single/tests/compiler/fail/predef.c

1 #unde‡
__VERSION__


	@testsuite/single/tests/compiler/fail/redef_function.c

1 
	$foo
() {

2 
	}
}

4 
	$foo
() {

5 
	}
}

	@testsuite/single/tests/compiler/fail/static_local.c

1 
	$maö
() {

2 
x
 = 5;

3 
	}
}

	@testsuite/single/tests/compiler/fail/string_case.c

1 
	$foo
() {

5 
	}
}

	@testsuite/single/tests/compiler/fail/two_default.c

1 
	$foo
() {

6 
	}
}

	@testsuite/single/tests/compiler/fail/undef_class.c

1 
˛ass
 
foo
 
	gx
;

	@testsuite/single/tests/compiler/fail/var_to_nonvar.c

1 
TYPETEST


3 
	$foo
(
x
) {

4 
	}
}

6 
	$b¨
() {

7 
	`foo
( ({ })...);

8 
	}
}

	@testsuite/single/tests/compiler/fail/void_arg.c

1 
	$foo
(
x
) {

2 
	}
}

	@testsuite/single/tests/compiler/fail/void_arg2.c

1 
foo
(, 
b¨
);

	@testsuite/single/tests/compiler/fail/void_for_var.c

1 
	$foo
() {

2 
x
 = 1; ; ) ;

3 
	}
}

	@testsuite/single/tests/compiler/fail/void_global.c

1 
	gx
;

	@testsuite/single/tests/compiler/fail/void_local.c

1 
	$foo
() {

2 
x
;

3 
	}
}

	@testsuite/single/tests/compiler/fail/void_member.c

1 ˛as†
	cfoo
 {

2 
	mx
;

	@testsuite/single/tests/compiler/succeed.c

1 #¥agm®
no_°ri˘_ty≥s


2 
	$foo
(Ë{ 
	}
}

3 
	$b¨
(
x
Ë{ 
	}
}

4 #¥agm®
°ri˘_ty≥s


5 
	$¸óã
(Ë{ 
	}
}

7 
foo
();

11 
	gidít
;

12 
	#X1
 
id


	)

13 
	#X2
 
ít


	)

14 
	g∑°e
 = 
X1
##
X2
;

15 
°rög
 
	gx
 = @
END


16 
xxx


17 
END
;

18 
°rög
 * 
	gy
 = @@
END


19 
xxx


20 
yyy


21 
zzz


22 
END


	@testsuite/single/tests/efuns/add_action.c

1 
	gˇŒed
;

2 
	gxvîb
;

4 
	$do_ã°s
() {

5 #i‚de‡
__NO_ADD_ACTION__


6 
obje˘
 
ç
;

7 
xvîb
 = 
ˇŒed
 = 0;

8 
SAVETP
;

9 
	`íabÀ_comm™ds
();

10 
	`add_a˘i⁄
–(: 
ˇŒed
 = 1 :), "foo");

11 
	`add_a˘i⁄
–(: 
xvîb
 = 1 :), "b", 1);

12 
RESTORETP
;

13 
	`comm™d
("foo");

14 
	`comm™d
("bar");

15 
	`ASSERT
(
ˇŒed
);

16 
	`ASSERT
(
xvîb
);

18 
	}
}

	@testsuite/single/tests/efuns/add_light.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/all_inventory.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ENVIRONMENT__


3 
s
 = (
	`Æl_övít‹y
(
	`this_obje˘
()));

5 
	`ASSERT
((
	`Æl_övít‹y
()Ë=
s
);

7 
i
 = 0; i < 5; i++) {

8 
	`ASSERT
((
	`Æl_övít‹y
()Ë=
s
 + 
i
);

9 
	`˛⁄e_obje˘
(
	`fûe_«me
());

11 
	`ASSERT
(
	`fûãr
(
	`Æl_övít‹y
(
	`this_obje˘
()), (: !
$1
->
	`is_Æl_öv_ã°
() :)));

13 
	}
}

15 
	$is_Æl_öv_ã°
() {

17 
	}
}

20 
	$¸óã
() {

21 #i‚de‡
__NO_ENVIRONMENT__


22 i‡(
	`˛⁄ï
()) {

23 
°rög
 
s
 = 
	`fûe_«me
();

24 
	`ssˇnf
(
s
, "%s#%*d", s);

25 
	`move_obje˘
(
s
);

28 
	}
}

	@testsuite/single/tests/efuns/allocate.c

1 
	$do_ã°s
() {

2 
i
 = 0; i < 10; i++) {

3 
	`ASSERT
((
	`Æloˇã
(
i
)) == i);

4 
	`ASSERT
(
	`fûãr
(
	`Æloˇã
(
i
), (: 
$1
 :)) == ({}));

6 
	`ASSERT
(
	`Æloˇã
(0) == ({}));

7 
	`ASSERT
(
	`ˇtch
(
	`Æloˇã
(-10)));

8 
	}
}

	@testsuite/single/tests/efuns/allocate_buffer.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_BUFFER_TYPE__


3 
i
 = 
	`øndom
(100000);

5 
	`ASSERT
((
	`Æloˇã_buf„r
(
i
)) == i);

6 
	`ASSERT
(
	`ˇtch
(
	`Æloˇã_buf„r
(-20)));

8 
	}
}

	@testsuite/single/tests/efuns/allocate_mapping.c

1 
	$do_ã°s
() {

2 
m≠pög
 
m
 = 
	`Æloˇã_m≠pög
(
	`øndom
(1000));

3 
mixed
 
x
, 
y
;

5 
	`f‹óch
 (
x
, 
y
 
ö
 
m
) {

6 
	`ASSERT
(0);

8 
	}
}

	@testsuite/single/tests/efuns/badshad.c

1 
	$¸óã
(
¨g
) {

2 i‡(
¨g
) {

3 #i‚de‡
__NO_SHADOWS__


4 
	`ASSERT
(
	`ˇtch
(
	`shadow
(
	`¥evious_obje˘
())));

5 
	`de°ru˘
(
	`this_obje˘
());

8 
	}
}

10 
	$i_am_bad
() {

11 
	}
}

	@testsuite/single/tests/efuns/bind.c

1 
	gglob
;

3 
	#CANT_BIND
(
f
Ë
	`ASSERT
(
	`ˇtch
(
	`böd
(f, 
	`¥evious_obje˘
())))

	)

4 
	#CAN_BIND
(
f
Ë
	`ASSERT
(
	`böd
(f, 
	`¥evious_obje˘
()))

	)

6 
	$do_ã°s
() {

7 
	`CANT_BIND
((: 
do_ã°s
 :));

8 
	`CANT_BIND
((: 
glob
 :));

9 
	`CANT_BIND
((: 
glob
 + 1 :));

10 
	`CANT_BIND
((: 
	`do_ã°s
() :));

11 
	`CAN_BIND
((: 
$1
 + 
$2
 :));

12 
	`ASSERT
(
	`fun˘i⁄p
(
	`böd
–(: 
$1
 :), 
	`this_obje˘
())));

13 
	`ASSERT
(
	`evÆu©e
(
	`böd
–(: 
$1
 + 
$2
 :), 
	`this_obje˘
()), 3, 4) == 7);

14 
	}
}

	@testsuite/single/tests/efuns/break_string.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/cache_stats.c

1 
	$do_ã°s
() {

2 #ifde‡
__CACHE_STATS__


3 
	`ASSERT
(
	`°rögp
(
	`ˇche_°©s
()));

5 
	}
}

	@testsuite/single/tests/efuns/call_other.c

1 
	$foo
(Ë{  1; 
	}
}

3 
	$ßme
(
mixed
 *
x
, mixed *
y
) {

4 
i
 = 0; i < (
x
); i++) {

5  
x
[
i
] =
y
[i];

7 
	}
}

9 
	$b¨
(
x
) {

10  
x
;

11 
	}
}

13 
	$do_ã°s
() {

14 
	`ASSERT
(
	`fûe_«me
()->
	`foo
());

15 
	`ASSERT
(
	`this_obje˘
()->
	`foo
());

16 
	`ASSERT
(
	`ßme
((
mixed
 *)({ 
	`fûe_«me
(), 
	`this_obje˘
(Ë})->
	`foo
(), ({ 1, 1 })));

18 
	`ASSERT
(
	`ˇtch
(
	`ˇŒ_Ÿhî
(
	`this_obje˘
(), 0)));

19 
	`ASSERT
(
	`ˇŒ_Ÿhî
(
	`this_obje˘
(), "foo"));

20 
	`ASSERT
(
	`ˇŒ_Ÿhî
(
	`this_obje˘
(), ({ "foo", 1 })));

21 
	`ASSERT
(
	`ˇtch
(
	`ˇŒ_Ÿhî
("foadf", "foo")));

23 
	`ASSERT
(
	`undeföedp
(
	`this_obje˘
()->
	`bazz
()));

24 
	`de°ru˘
(
	`this_obje˘
());

25 
	`ASSERT
(
	`undeföedp
("/sögÀ/ma°î"->
	`vÆid_böd
()));

26 
	}
}

	@testsuite/single/tests/efuns/call_out.c

1 
obje˘
 
	gç
;

2 #ifde‡
__THIS_PLAYER_IN_CALL_OUT__


3 
	#TPIC
 
	`ASSERT
(
	`this_∂ayî
(Ë=
ç
)

	)

5 
	#TPIC


	)

8 
	gˇŒed
;

10 
	$no_¨gs
() {

11 
ˇŒed
++;

12 
TPIC
;

13 
	}
}

15 
	$⁄e_¨g
(
x
) {

16 
ˇŒed
++;

17 
TPIC
;

18 
	`ASSERT
(
x
 == 1);

19 
	}
}

21 
	$two_¨g
(
x
, 
y
) {

22 
ˇŒed
++;

23 
TPIC
;

24 
	`ASSERT
(
x
 == 1);

25 
	`ASSERT
(
y
 == 2);

26 
	}
}

28 
	$föish
() {

29 
	`ASSERT
(
ˇŒed
 == 6);

30 
	}
}

32 
	$do_ã°s
() {

33 
mixed
 
ˇŒs
, 
ˇŒ
;

35 
ç
 = 
	`this_∂ayî
();

36 
ˇŒed
 = 0;

37 
	`ˇŒ_out
–(: 
no_¨gs
 :), 1);

38 
	`ˇŒ_out
( "no_args", 2);

39 
	`ˇŒ_out
–(: 
⁄e_¨g
, 1 :), 3);

40 
	`ˇŒ_out
( "one_arg", 4, 1);

41 
	`ˇŒ_out
–(: 
two_¨g
, 1 :), 5, 2);

42 
	`ˇŒ_out
( "two_arg", 6, 1, 2);

43 
	`ˇŒ_out
( "finish", 10);

45 
ˇŒs
 = 
	`ˇŒ_out_öfo
();

46 
	`f‹óch
(
ˇŒ
 
ö
 
ˇŒs
) {

47 
	`ASSERT
(
	`obje˘p
(
ˇŒ
[0]));

48 
	`ASSERT
(
	`°rögp
(
ˇŒ
[1]));

49 
	`ASSERT
(
	`öç
(
ˇŒ
[2]));

51 
	}
}

	@testsuite/single/tests/efuns/call_stack.c

1 
	$do_ã°s
() {

2 
mixed
 
°ack
, 
íåy
;

3 
n
 = (
	`ˇŒ_°ack
(0));

5 
°ack
 = 
	`ˇŒ_°ack
(0);

6 
	`ASSERT
(
°ack
[0] =
__FILE__
);

7 
	`ASSERT
((
	`fûãr
(
°ack
, (: 
°rögp
 :))Ë=
n
);

8 
°ack
 = 
	`ˇŒ_°ack
(1);

9 
	`ASSERT
(
°ack
[0] =
	`this_obje˘
());

10 
	`ASSERT
((
	`fûãr
(
°ack
, (: 
obje˘p
 :))Ë=
n
);

11 
°ack
 = 
	`ˇŒ_°ack
(2);

12 
	`ASSERT
(
°ack
[0] == "do_tests");

13 
	`ASSERT
((
	`fûãr
(
°ack
, (: 
°rögp
 :))Ë=
n
);

14 
°ack
 = 
	`ˇŒ_°ack
(3);

15 
	`ASSERT
((
	`fûãr
(
°ack
, (: 
°rögp
 :))Ë=
n
);

16 
	`ASSERT
(
	`ˇtch
(
	`ˇŒ_°ack
(-100)));

17 
	`ASSERT
(
	`ˇtch
(
	`ˇŒ_°ack
(4)));

18 
	}
}

	@testsuite/single/tests/efuns/capitalize.c

7 
	$do_ã°s
()

9 
°rög
 
°r1
, 
°r2
, 
°r3
;

11 
°r1
 = "";

12 
°r2
 = 
	`ˇpôÆize
(
°r1
);

13 
°r3
 = "";

14 
	`ASSERT
(
°r2
 =
°r3
);

16 
°r1
 = "driver";

17 
°r2
 = 
	`ˇpôÆize
(
°r1
);

18 
°r3
 = "Driver";

19 
	`ASSERT
(
°r2
 =
°r3
);

20 
	`ASSERT
(
°r1
 == "driver");

22 
°r1
 = "Driver";

23 
°r2
 = 
	`ˇpôÆize
(
°r1
);

24 
°r3
 = "Driver";

25 
	`ASSERT
(
°r2
 =
°r3
);

26 
	`ASSERT
(
°r1
 == "Driver");

28 
°r1
 = "42driver";

29 
°r2
 = 
	`ˇpôÆize
(
°r1
);

30 
°r3
 = "42driver";

31 
	`ASSERT
(
°r2
 =
°r3
);

32 
	`ASSERT
(
°r1
 == "42driver");

33 
	}
}

	@testsuite/single/tests/efuns/children.c

1 
	$do_ã°s
() {

2 
obje˘
 
x
;

4 
	`f‹óch
 (
x
 
ö
 
	`chûdªn
(
__FILE__
))

5 i‡(
x
 !
	`this_obje˘
()Ë
	`de°ru˘
(x);

7 
i
 = 0; i < 5; i++)

8 
	`√w
(
__FILE__
);

10 
	`ASSERT
((
	`chûdªn
(
__FILE__
)) == 6);

11 
	}
}

	@testsuite/single/tests/efuns/clear_bit.c

1 
	$do_ã°s
() {

2 
°rög
 
°r
;

4 
	`ASSERT
(
	`ˇtch
(
	`˛ór_bô
("", 1000000000000)));

5 
	`ASSERT
(
	`ˇtch
(
	`˛ór_bô
("", -2)));

7 
°r
 = "11111";

8 
°r
 = 
	`˛ór_bô
(str, 7);

9 
	`ASSERT
(!
	`ã°_bô
(
°r
, 7));

10 
°r
 = 
	`˛ór_bô
(
	`£t_bô
(str, 12), 12);

11 
	`ASSERT
(!
	`ã°_bô
(
°r
, 7));

13 
	`ASSERT
(
°r
 =
	`˛ór_bô
(str, 40));

14 
	}
}

	@testsuite/single/tests/efuns/clone_object.c

1 
°rög
 
	gmy_¨g
;

3 
°rög
 
	$gë_¨g
() {

4  
my_¨g
;

5 
	}
}

7 
	$¸óã
(
°rög
 
¨g
) {

8 
my_¨g
 = 
¨g
;

9 
	}
}

11 
	$do_ã°s
() {

12 
obje˘
 
ob
;

13 #ifde‡
__PACKAGE_UIDS__


14 
	`£ãuid
(0);

15 
	`ASSERT
(
	`ˇtch
(
	`√w
(
__FILE__
)));

16 
	`£ãuid
(
	`gëuid
(
	`this_obje˘
()));

18 
	`ASSERT
(
	`√w
(
__FILE__
)->
	`gë_¨g
() == 0);

19 
	`ASSERT
((
°rög
)
	`√w
(
__FILE__
, "foo")->
	`gë_¨g
() == "foo");

20 
	}
}

	@testsuite/single/tests/efuns/clonep.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(!
	`˛⁄ï
());

3 
	`ASSERT
(!
	`˛⁄ï
(
	`this_obje˘
()));

4 
	`ASSERT
(
	`˛⁄ï
(
	`√w
(
__FILE__
)));

5 
	`ASSERT
(!
	`˛⁄ï
( ({ 1, 2 }) ));

6 
	`ASSERT
(!
	`˛⁄ï
(1));

7 
	}
}

	@testsuite/single/tests/efuns/command.c

1 
	gÊag
;

3 
	$a˘i⁄
() {

4 
Êag
 = 1;

6 
	}
}

8 
	$do_ã°s
() {

9 #i‚de‡
__NO_ADD_ACTION__


10 
obje˘
 
ßve_ç
 = 
	`this_∂ayî
();

11 
mixed
 *
comms
;

13 
Êag
 = 0;

14 
	`íabÀ_comm™ds
();

15 
	`add_a˘i⁄
–(: 
a˘i⁄
 :), "foo");

16 
comms
 = 
	`comm™ds
();

17 
	`dißbÀ_comm™ds
();

18 i‡(
ßve_ç
)

19 
	`evÆu©e
(
	`böd
–(: 
íabÀ_comm™ds
 :), 
ßve_ç
));

21 
	`ASSERT
(
	`comm™d
("foo"));

22 
	`ASSERT
((
comms
) == 1);

23 
	`ASSERT
(
comms
[0][0] == "foo");

24 
	`ASSERT
(
comms
[0][2] =
	`this_obje˘
());

25 
	`ASSERT
(
comms
[0][3] == "<function>");

26 
	`ASSERT
(
Êag
);

27 
	`de°ru˘
(
	`this_obje˘
());

29 
	}
}

	@testsuite/single/tests/efuns/cp.c

1 
	#TESTFILE
 "/ã°fûe"

	)

3 
	$do_ã°s
() {

4 
	`rm
(
TESTFILE
);

5 
	`ASSERT
(
	`fûe_size
(
TESTFILE
) == -1);

6 
	`ASSERT
(
	`˝
("/sögÀ/ma°î.c", 
TESTFILE
));

7 
	`ASSERT
(
	`fûe_size
(
TESTFILE
));

8 
	`ASSERT
(
	`ªad_fûe
("/sögÀ/ma°î.c"Ë=ªad_fûe(
TESTFILE
));

9 
	}
}

	@testsuite/single/tests/efuns/crc32.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`ˇtch
(
	`¸c32
(0)));

3 
	`ASSERT
(
	`öç
(
	`¸c32
("foobarbazz")));

4 
	}
}

	@testsuite/single/tests/efuns/ctime.c

1 
	$do_ã°s
() {

2 
°rög
 
tm
 = 
	`˘ime
(0);

3 
	`ASSERT
(
	`°rögp
(
tm
));

4 
	`ASSERT
(
	`°r§ch
(
tm
, '\n') == -1);

5 
	}
}

	@testsuite/single/tests/efuns/deep_inherit_list.c

1 
	$do_ã°s
() {

2 
mixed
 *
x
;

4 
	`ASSERT
(
	`dìp_öhîô_li°
(
	`this_obje˘
()) == ({ }));

5 
x
 = 
	`dìp_öhîô_li°
(
	`lﬂd_obje˘
("/single/tests/efuns/inh2.c"));

6 
	`ASSERT
((
x
) == 2);

7 
	`ASSERT
(
x
[0] == "/single/tests/efuns/inh1.c");

8 
	`ASSERT
(
x
[1] == "/single/tests/efuns/inh0.c");

9 
	}
}

	@testsuite/single/tests/efuns/deep_inventory.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ENVIRONMENT__


3 
obje˘
 
ob
;

5 
	`f‹óch
 (
ob
 
ö
 
	`dìp_övít‹y
(
	`this_obje˘
()))

6 i‡(
ob
)

7 
	`de°ru˘
(
ob
);

8 
	`√w
(
__FILE__
, 
	`this_obje˘
());

9 
	`√w
(
__FILE__
, 
	`this_obje˘
(), 1);

10 
	`ASSERT
((
	`dìp_övít‹y
(
	`this_obje˘
())) == 4);

12 
	}
}

14 
	$¸óã
(
obje˘
 
ob
, 
Êag
) {

15 #i‚de‡
__NO_ENVIRONMENT__


16 i‡(
ob
Ë
	`move_obje˘
(ob);

17 i‡(
Êag
) {

18 
	`√w
(
__FILE__
, 
	`this_obje˘
());

19 
	`√w
(
__FILE__
, 
	`this_obje˘
());

22 
	}
}

	@testsuite/single/tests/efuns/destruct.c

1 
	$do_ã°s
() {

2 
obje˘
 
ob
 = 
	`√w
(
__FILE__
);

3 
	`ASSERT
(
ob
);

4 
	`de°ru˘
(
ob
);

5 
	`ASSERT
(!
ob
);

6 
	}
}

	@testsuite/single/tests/efuns/disable_commands.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 
obje˘
 
ßve_ç
 = 
	`this_∂ayî
();

5 
	`dißbÀ_comm™ds
();

6 
	`ASSERT
(!
	`livög
(
	`this_obje˘
()));

7 
	`íabÀ_comm™ds
();

8 
	`ASSERT
(
	`livög
(
	`this_obje˘
()));

9 
	`dißbÀ_comm™ds
();

10 
	`ASSERT
(!
	`livög
(
	`this_obje˘
()));

12 i‡(
ßve_ç
)

13 
	`evÆu©e
(
	`böd
–(: 
íabÀ_comm™ds
 :), 
ßve_ç
));

15 
	}
}

	@testsuite/single/tests/efuns/dumpallobj.c

1 
	$do_ã°s
() {

2 
	`dum∑Œobj
();

3 
	`dum∑Œobj
("/OBJ_DUMP2");

4 
	}
}

	@testsuite/single/tests/efuns/ed.c

1 
	$do_ã°s
() {

2 #i‚de‡
__OLD_ED__


3 
	`ASSERT
(
	`ˇtch
(
	`ed_cmd
("foo")));

4 
	`rm
("/ed_test");

5 
	`wrôe_fûe
("/ed_test", "xyzzy\nxxx");

6 
	`ed_°¨t
("/ed_test");

7 
	`ASSERT
(
	`ed_cmd
("1s/y/a/g"));

8 
	`ASSERT
(
	`ed_cmd
("2s!x!b!"));

9 
	`ASSERT
(
	`ˇtch
(
	`ed_°¨t
("foo")));

10 
	`ASSERT
(
	`ed_cmd
("x"));

11 
	`ASSERT
(
	`ªad_fûe
("/ed_test") == "xazza\nbxx\n");

13 
	}
}

	@testsuite/single/tests/efuns/enable_wizard.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_WIZARDS__


3 
	`dißbÀ_wiz¨d
();

4 
	`ASSERT
(!
	`wiz¨dp
(
	`this_obje˘
()));

5 
	`íabÀ_wiz¨d
();

6 
	`ASSERT
(!
	`wiz¨dp
(
	`this_obje˘
()));

8 
	`evÆu©e
(
	`böd
–(: 
dißbÀ_wiz¨d
 :), 
	`this_∂ayî
()));

9 
	`ASSERT
(!
	`wiz¨dp
(
	`this_∂ayî
()));

10 
	`evÆu©e
(
	`böd
–(: 
íabÀ_wiz¨d
 :), 
	`this_∂ayî
()));

11 
	`ASSERT
(
	`wiz¨dp
(
	`this_∂ayî
()));

13 
	}
}

	@testsuite/single/tests/efuns/environment.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ENVIRONMENT__


3 
obje˘
 
ob
;

5 
	`ASSERT
(
	`ívú⁄mít
() == 0);

6 
	`ASSERT
(
	`ívú⁄mít
(
	`this_obje˘
()) == 0);

7 
ob
 = 
	`√w
(
__FILE__
, 1);

8 
	`ASSERT
(
	`ívú⁄mít
(
ob
Ë=
	`this_obje˘
());

10 
	}
}

12 
	$¸óã
(
Êag
) {

13 #i‚de‡
__NO_ENVIRONMENT__


14 i‡(
Êag
)

15 
	`move_obje˘
(
	`¥evious_obje˘
());

17 
	}
}

	@testsuite/single/tests/efuns/error.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`ˇtch
(
	`îr‹
("hi")) == "*hi\n");

3 
	`ASSERT
(
	`ˇtch
(
	`îr‹
("hi\n")) == "*hi\n");

4 
	}
}

	@testsuite/single/tests/efuns/exec.c

1 
	$do_ã°s
() {

2 
obje˘
 
ç
 = 
	`this_∂ayî
();

4 i‡(
ç
) {

5 
	`ASSERT
(
	`exec
(
	`this_obje˘
(), 
ç
));

6 
	`ASSERT
(
	`u£Ω
(
	`this_obje˘
()));

7 
	`ASSERT
(
	`exec
(
ç
, 
	`this_obje˘
()));

9 
	}
}

	@testsuite/single/tests/efuns/explode.c

1 
	$do_ã°s
() {

2 
°rög
 
tmp
 = "this isáÅest";

3 
mixed
 *
ªt
;

5 
ªt
 = 
	`ex∂ode
(
tmp
, "");

6 
	`ASSERT
((
ªt
Ë=(
	`fûãr
‘ë, (: 
	`°æí
(
$1
) == 1 :))));

7 
ªt
 = 
	`ex∂ode
(
tmp
, " ");

8 
	`ASSERT
((
ªt
) == 4);

9 
	`ASSERT
(
ªt
[1] == "is");

10 
	`ASSERT
(
ªt
[3] == "test");

12 
ªt
 = 
	`ex∂ode
(" " + 
tmp
, " ");

13 #i‚de‡
__REVERSIBLE_EXPLODE_STRING__


14 
	`ASSERT
((
ªt
) == 4);

15 
	`ASSERT
(
ªt
[1] == "is");

16 
	`ASSERT
(
ªt
[3] == "test");

18 
	`ASSERT
((
ªt
) == 5);

19 
	`ASSERT
(
ªt
[2] == "is");

20 
	`ASSERT
(
ªt
[4] == "test");

23 
ªt
 = 
	`ex∂ode
(" " + 
tmp
, " ");

24 #i‚de‡
__REVERSIBLE_EXPLODE_STRING__


25 #ifde‡
__SANE_EXPLODE_STRING__


26 
	`ASSERT
((
ªt
) == 8);

27 
	`ASSERT
(
ªt
[5] == "is");

28 
	`ASSERT
(
ªt
[7] == "test");

30 
	`ASSERT
((
ªt
) == 4);

31 
	`ASSERT
(
ªt
[1] == "is");

32 
	`ASSERT
(
ªt
[3] == "test");

35 
	`ASSERT
((
ªt
) == 9);

36 
	`ASSERT
(
ªt
[6] == "is");

37 
	`ASSERT
(
ªt
[8] == "test");

40 
tmp
 = "this isáÅest ";

41 
ªt
 = 
	`ex∂ode
(
tmp
, " ");

42 #i‚de‡
__REVERSIBLE_EXPLODE_STRING__


43 
	`ASSERT
((
ªt
) == 4);

45 
	`ASSERT
((
ªt
) == 5);

47 
	`ASSERT
(
ªt
[1] == "is");

48 
	`ASSERT
(
ªt
[3] == "test");

50 
ªt
 = 
	`ex∂ode
(" " + 
tmp
, " ");

51 #i‚de‡
__REVERSIBLE_EXPLODE_STRING__


52 
	`ASSERT
((
ªt
) == 4);

53 
	`ASSERT
(
ªt
[1] == "is");

54 
	`ASSERT
(
ªt
[3] == "test");

56 
	`ASSERT
((
ªt
) == 6);

57 
	`ASSERT
(
ªt
[2] == "is");

58 
	`ASSERT
(
ªt
[4] == "test");

61 
ªt
 = 
	`ex∂ode
(" " + 
tmp
, " ");

62 #i‚de‡
__REVERSIBLE_EXPLODE_STRING__


63 #ifde‡
__SANE_EXPLODE_STRING__


64 
	`ASSERT
((
ªt
) == 6);

65 
	`ASSERT
(
ªt
[3] == "is");

66 
	`ASSERT
(
ªt
[5] == "test");

68 
	`ASSERT
((
ªt
) == 4);

69 
	`ASSERT
(
ªt
[1] == "is");

70 
	`ASSERT
(
ªt
[3] == "test");

73 
	`ASSERT
((
ªt
) == 8);

74 
	`ASSERT
(
ªt
[4] == "is");

75 
	`ASSERT
(
ªt
[6] == "test");

78 
	}
}

	@testsuite/single/tests/efuns/file_name.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`fûe_«me
(Ë+ ".c" =
__FILE__
);

3 
	}
}

	@testsuite/single/tests/efuns/file_size.c

1 
	$do_ã°s
() {

2 
°rög
 
°r
 = "This isáÅest";

3 
	`rm
("/test_file");

4 
	`wrôe_fûe
("/ã°_fûe", 
°r
);

5 
	`ASSERT
(
	`fûe_size
("ã°_fûe"Ë=
	`°æí
(
°r
));

6 
	}
}

	@testsuite/single/tests/efuns/filter.c

1 
	gtmp
 = 0;

3 
	$thúd
() {

4 i‡(++
tmp
 == 3) {

5 
tmp
 = 0;

9 
	}
}

11 
	$wh©evî1
(
mixed
 
x
, mixed 
y
, mixed 
z
) {

12  
x
;

13 
	}
}

15 
	$wh©evî2
(
mixed
 
x
, mixed 
y
, mixed 
z
) {

16  
y
;

17 
	}
}

19 
	$wh©evî3
(
mixed
 
x
, mixed 
y
, mixed 
z
) {

20  
z
;

21 
	}
}

23 
	$åue
(Ë{  1; 
	}
}

25 
	$ßme
(
mixed
* 
x
, mixed* 
y
) {

26 i‡((
x
Ë!(
y
))  0;

27 
i
 = 0; i < (
x
); i++) {

28 i‡(
x
[
i
] !
y
[i])  0;

31 
	}
}

33 
	$mßme
(
m≠pög
 
x
, m≠pög 
y
) {

34 
mixed
 
z
;

35 i‡((
	`keys
(
x
)Ë!(keys(
y
)))  0;

36 
	`f‹óch
 (
z
 
ö
 
	`keys
(
x
)) {

37 i‡(
x
[
z
] !
y
[z])  0;

40 
	}
}

42 
	$do_ã°s
() {

44 
	`ASSERT
(
	`ßme
(
	`fûãr
–({ 1, 2, 0, 3 }), (: 
$1
 :)), ({ 1, 2, 3 })));

45 
	`ASSERT
(
	`fûãr
( ({}), "foo") == ({}));

46 
	`ASSERT
((
	`fûãr
( ({ 1 }), "true")));

48 
	`ASSERT
(
	`ßme
(
	`fûãr
–({ 1,2,3,4,5,6,7,8,9 }), "thúd", 
	`this_obje˘
())

49 , 
	`fûãr
–({ 1,2,3,4,5,6,7,8,9 }), (: 
thúd
 :))));

51 
	`ASSERT
((
	`fûãr
–({ 0 }), (: 
wh©evî1
, 1 :))));

52 
	`ASSERT
((
	`fûãr
–({ 0 }), "wh©evî2", 
	`this_obje˘
(), 1)));

53 
	`ASSERT
((
	`fûãr
–({ 0 }), (: 
wh©evî2
 :), 1)));

54 
	`ASSERT
((
	`fûãr
–({ 0 }), "wh©evî2", 
__FILE__
, 1)));

57 
	`ASSERT
(
	`mßme
(
	`fûãr
–([ 1 : 2, 0 : 3 ]), (: 
$1
 :)), ([ 1 : 2 ])));

58 
	`ASSERT
(
	`mßme
(
	`fûãr
( ([]), "foo"), ([])));

59 
	`ASSERT
((
	`fûãr
( ([ 1 : 2 ]), "true")));

61 
	`ASSERT
(
	`mßme
(
	`fûãr
–([ 1:2,3:4,5:6 ]), "thúd", 
	`this_obje˘
()),

62 
	`fûãr
–([ 1:2,3:4,5:6 ]), (: 
thúd
 :))));

64 
	`ASSERT
(!(
	`fûãr
–([]), (: 
$1
 :))));

65 
	`ASSERT
((
	`fûãr
–([ 0 : 0 ]), (: 
wh©evî1
, 1 :))));

66 
	`ASSERT
((
	`fûãr
–([ 0 : 0 ]), "wh©evî3", 
	`this_obje˘
(), 1)));

67 
	`ASSERT
((
	`fûãr
–([ 0 : 0 ]), (: 
wh©evî3
 :), 1)));

68 
	`ASSERT
((
	`fûãr
–([ 0 : 0 ]), "wh©evî3", 
__FILE__
, 1)));

69 
	}
}

	@testsuite/single/tests/efuns/find_call_out.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`föd_ˇŒ_out
("foo") == -1);

3 
	`ˇŒ_out
("foo", 10);

4 
	`ASSERT
(
	`föd_ˇŒ_out
("foo") == 10);

5 
	`ASSERT
(
	`föd_ˇŒ_out
("bar") == -1);

6 
	}
}

	@testsuite/single/tests/efuns/find_living.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 
obje˘
 
ob
;

4 
obje˘
 
ç
;

6 
	`ASSERT
(!
	`föd_livög
("bar"));

7 
SAVETP
;

8 
	`íabÀ_comm™ds
();

9 
	`£t_livög_«me
("bar");

10 
ob
 = 
	`föd_livög
("bar");

11 
	`dißbÀ_comm™ds
();

12 
RESTORETP
;

13 
	`ASSERT
(
ob
 =
	`this_obje˘
());

14 
	`ASSERT
(!
	`föd_livög
("bar"));

16 
	}
}

	@testsuite/single/tests/efuns/find_object.c

1 
	$do_ã°s
() {

2 
obje˘
 
ob
;

4 
	`ASSERT
(
	`föd_obje˘
(
__FILE__
Ë=
	`this_obje˘
());

5 
ob
 = 
	`föd_obje˘
("/single/tests/efuns/unloaded");

6 i‡(
ob
)

7 
	`de°ru˘
(
ob
);

8 
	`ASSERT
(!
	`föd_obje˘
("/single/tests/efuns/unloaded"));

9 
	`ASSERT
(
ob
 = 
	`föd_obje˘
("/single/tests/efuns/unloaded", 1));

10 
	`ASSERT
(
	`fûe_«me
(
ob
) == "/single/tests/efuns/unloaded");

11 
	`de°ru˘
(
ob
);

12 
	`ASSERT
(
ob
 = 
	`lﬂd_obje˘
("/single/tests/efuns/unloaded", 1));

13 
	`ASSERT
(
	`fûe_«me
(
ob
) == "/single/tests/efuns/unloaded");

14 
	`ASSERT
(!
	`lﬂd_obje˘
("/foo"));

15 
	}
}

	@testsuite/single/tests/efuns/find_player.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 
obje˘
 
ç
;

4 
obje˘
 
o1
, 
o2
;

6 i‡(
	`this_∂ayî
()) {

7 
	`ASSERT
(!
	`föd_∂ayî
("bar"));

8 
SAVETP
;

9 
	`íabÀ_comm™ds
();

10 
	`£t_livög_«me
("bar");

11 
o1
 = 
	`föd_∂ayî
("bar");

12 
	`exec
(
	`this_obje˘
(), 
ç
);

13 
o2
 = 
	`föd_∂ayî
("bar");

14 
	`exec
(
ç
, 
	`this_obje˘
());

15 
	`dißbÀ_comm™ds
();

16 
RESTORETP
;

17 
	`ASSERT
(!
o1
);

18 
	`ASSERT
(
o2
 =
	`this_obje˘
());

21 
	}
}

	@testsuite/single/tests/efuns/function_exists.c

1 #i‚de‡
__SENSIBLE_MODIFIERS__


4 
	g¥Ÿe˘ed


6 
	$°©
() {

7 
	}
}

9 
¥iv©e
 
	$¥iv
() {

10 
	}
}

12 
	$do_ã°s
() {

13 
	`ASSERT
(
	`fun˘i⁄_exi°s
("°©", 
	`this_obje˘
(), 1));

14 
	`ASSERT
(
	`fun˘i⁄_exi°s
("¥iv", 
	`this_obje˘
(), 1));

16 
	`ASSERT
(!
	`fun˘i⁄_exi°s
("°©", 
	`this_obje˘
()));

17 
	`ASSERT
(!
	`fun˘i⁄_exi°s
("¥iv", 
	`this_obje˘
()));

19 
	`ASSERT
(!
	`fun˘i⁄_exi°s
("b¨", 
	`this_obje˘
()));

20 
	`ASSERT
(
	`fun˘i⁄_exi°s
("do_ã°s", 
	`this_obje˘
()Ë+ ".c" =
__FILE__
);

21 
	}
}

	@testsuite/single/tests/efuns/function_profile.c

1 
	$do_ã°s
() {

2 #ifde‡
__PROFILE_FUNCTIONS__


3 
mixed
 *
hmm
 = 
	`fun˘i⁄_¥ofûe
(
	`this_obje˘
());

4 
	`ASSERT
((
hmm
) == 1);

5 
	`ASSERT
(
hmm
[0]["calls"]);

6 
	`ASSERT
(!
	`undeföedp
(
hmm
[0]["self"]));

7 
	`ASSERT
(!
	`undeföedp
(
hmm
[0]["children"]));

8 
	`ASSERT
(
hmm
[0]["name"] == "do_tests");

10 
	}
}

	@testsuite/single/tests/efuns/functionp.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(!
	`fun˘i⁄p
(0));

3 
	`ASSERT
(!
	`fun˘i⁄p
("foo"));

4 
	`ASSERT
(
	`fun˘i⁄p
((: 
do_ã°s
 :)));

5 
	}
}

	@testsuite/single/tests/efuns/generate_source.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/get_char.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/get_config.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`gë_c⁄fig
(0Ë=
MUD_NAME
);

3 
	`ASSERT
(
	`ˇtch
(
	`gë_c⁄fig
(-1)));

4 
	}
}

	@testsuite/single/tests/efuns/get_dir.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/goodshad.c

1 
	$¸óã
(
¨g
) {

2 #i‚de‡
__NO_SHADOWS__


3 i‡(
¨g
) {

4 
	`ASSERT
(
	`shadow
(
	`¥evious_obje˘
()));

5 
	`ASSERT
(
	`ˇtch
(
	`shadow
(
	`¥evious_obje˘
())));

8 
	}
}

10 
obje˘
 
	$foo
() {

11  
	`this_obje˘
();

12 
	}
}

	@testsuite/single/tests/efuns/has_errors.c

	@testsuite/single/tests/efuns/implode.c

2 
	$do_ã°s
() {

3 
	`ASSERT
(
	`im∂ode
( ({ 1, 2, 3 }), "foo") == "");

4 
	`ASSERT
(
	`im∂ode
( ({ "foo", "bar" }), "bazz") == "foobazzbar");

5 
	`ASSERT
(
	`im∂ode
( ({ 1, "foo", "bar" }), "bazz") == "foobazzbar");

6 
	`ASSERT
(
	`im∂ode
( ({ "foo", "bar" }), "") == "foobar");

8 
	`ASSERT
(
	`im∂ode
–({ 1, 2, 3 }), (: 
$1
 + 
$2
 :)) == 6);

9 
	`ASSERT
(
	`im∂ode
–({ 1, 2, 3 }), (: 
$1
 + 
$2
 :), "") == "123");

10 
	`ASSERT
(
	`im∂ode
–({}), (: 
$1
 :), 666) == 666);

11 
	`ASSERT
(
	`im∂ode
–({}), (: 
$1
 :)) == 0);

12 
	`ASSERT
(
	`im∂ode
–({ 555 }), (: 
$1
 + 5 :)) == 555);

13 
	}
}

	@testsuite/single/tests/efuns/in_edit.c

1 
	$do_ã°s
() {

2 #i‚de‡
__OLD_ED__


3 
	`ASSERT
(!
	`ö_edô
(
	`this_obje˘
()));

4 
	`ed_°¨t
("/ed_test");

5 
	`ASSERT
(
	`ö_edô
(
	`this_obje˘
()) == "/ed_test");

6 
	`de°ru˘
(
	`this_obje˘
());

8 
	}
}

	@testsuite/single/tests/efuns/inh0.c

	@testsuite/single/tests/efuns/inh1.c

1 
	göhîô
 "/single/tests/efuns/inh0.c";

	@testsuite/single/tests/efuns/inh2.c

1 
	göhîô
 "/single/tests/efuns/inh1.c";

	@testsuite/single/tests/efuns/inherit_list.c

1 
	$do_ã°s
() {

2 
mixed
 *
x
;

3 
	`ASSERT
(
	`öhîô_li°
(
	`this_obje˘
()) == ({}));

4 
x
 = 
	`öhîô_li°
(
	`lﬂd_obje˘
("/single/tests/efuns/inh2.c"));

5 
	`ASSERT
((
x
) == 1);

6 
	`ASSERT
(
x
[0] == "/single/tests/efuns/inh1.c");

7 
	}
}

	@testsuite/single/tests/efuns/inherits.c

1 
	#OB2
 "/sögÀ/ã°s/efuns/öh2.c"

	)

2 
	#OB1
 "/sögÀ/ã°s/efuns/öh1.c"

	)

3 
	#OB0
 "/sögÀ/ã°s/efuns/öh0.c"

	)

5 
	$do_ã°s
() {

6 
obje˘
 
ob2
 = 
	`lﬂd_obje˘
(
OB2
);

7 
obje˘
 
ob1
 = 
	`lﬂd_obje˘
(
OB1
);

8 
obje˘
 
ob
 = 
	`lﬂd_obje˘
(
OB0
);

10 
	`ASSERT
(
	`öhîôs
(
OB1
, 
ob2
));

11 
	`ASSERT
(
	`öhîôs
(
OB0
, 
ob2
));

12 
	`ASSERT
(
	`öhîôs
(
OB0
, 
ob1
));

14 
	`ASSERT
(!
	`öhîôs
(
OB2
, 
ob1
));

15 
	`ASSERT
(!
	`öhîôs
(
OB2
, 
ob
));

16 
	`ASSERT
(!
	`öhîôs
(
OB1
, 
ob
));

17 
	`ASSERT
(!
	`öhîôs
("foo", 
ob
));

18 
	}
}

	@testsuite/single/tests/efuns/input_to.c

1 
	$foo
(Ë{
	}
}

3 
	$do_ã°s
() {

6 i‡(
	`this_∂ayî
())

7 
	`ASSERT
(
	`öput_to
((: 
foo
, "bazz" :), 1, "bar"));

8 
	}
}

	@testsuite/single/tests/efuns/interactive.c

1 
	$do_ã°s
() {

2 i‡(
	`this_∂ayî
())

3 
	`ASSERT
(
	`öãø˘ive
(
	`this_∂ayî
()));

4 
	`ASSERT
(!
	`öãø˘ive
(
	`this_obje˘
()));

5 
	`ASSERT
((
	`u£rs
()Ë=(
	`fûãr
(u£rs(), (: 
öãø˘ive
 :))));

6 
	}
}

	@testsuite/single/tests/efuns/intp.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`öç
(5));

3 
	`ASSERT
(
	`öç
(([])[0]));

4 
	`ASSERT
(!
	`öç
( ({}) ));

5 
	`ASSERT
(!
	`öç
(([])));

6 
	`ASSERT
(!
	`öç
(
	`this_obje˘
()));

7 
	`de°ru˘
(
	`this_obje˘
());

8 
	`ASSERT
(
	`öç
(
	`this_obje˘
()));

9 
	}
}

	@testsuite/single/tests/efuns/keys.c

1 
	$do_ã°s
() {

2 
m≠pög
 
m
 = ([ 1 : 2, 3 : 4, 5 : 6 ]);

3 
mixed
 *
k
 = 
	`keys
(
m
);

4 
mixed
 
x
, 
y
;

6 
	`f‹óch
 (
x
, 
y
 
ö
 
m
) {

7 
k
 -({ 
x
 });

9 
	`ASSERT
(
k
 == ({}));

10 
	}
}

	@testsuite/single/tests/efuns/light.c

1 
	$¸óã
() {

2 #i‚de‡
__NO_LIGHT__


3 
	`£t_light
(3);

5 
	}
}

7 
	$move
(
obje˘
 
ob
) {

8 #i‚de‡
__NO_ENVIRONMENT__


9 
	`move_obje˘
(
ob
);

11 
	}
}

	@testsuite/single/tests/efuns/living.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 i‡(
	`this_∂ayî
())

4 
	`ASSERT
(
	`livög
(
	`this_∂ayî
()));

5 
	`ASSERT
(!
	`livög
(
	`this_obje˘
()));

7 
	}
}

	@testsuite/single/tests/efuns/livings.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 
	`ASSERT
(!(
	`fûãr
(
	`livögs
(), (: !
	`livög
(
$1
) :))));

4 i‡(
	`this_∂ayî
())

5 
	`ASSERT
(
	`membî_¨øy
(
	`this_∂ayî
(), 
	`livögs
()) != -1);

7 
	}
}

	@testsuite/single/tests/efuns/lower_case.c

1 
	#STR
 
STR1


	)

2 
	#STR1
 "thi†i†®ã°!"

	)

3 
	#STR2
 "Thi†i†®ã°!"

	)

4 
	#STR3
 "Thi†i†AÅE°!"

	)

6 
	$do_ã°s
() {

7 
°rög
 
°r
;

8 
°r
 = 
STR1
;

9 
	`ASSERT
(
	`lowî_ˇ£
(
°r
Ë=
STR
);

10 
	`ASSERT
(
°r
 =
STR1
);

12 
°r
 = 
STR2
;

13 
	`ASSERT
(
	`lowî_ˇ£
(
°r
Ë=
STR
);

14 
	`ASSERT
(
°r
 =
STR2
);

16 
°r
 = 
STR3
;

17 
	`ASSERT
(
	`lowî_ˇ£
(
°r
Ë=
STR
);

18 
	`ASSERT
(
°r
 =
STR3
);

19 
	}
}

	@testsuite/single/tests/efuns/malloc_status.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`°rögp
(
	`mÆloc_°©us
()));

3 
	}
}

	@testsuite/single/tests/efuns/map.c

1 
	$ßme
(
mixed
* 
x
, mixed* 
y
) {

2 i‡((
x
Ë!(
y
))  0;

3 
i
 = 0; i < (
x
); i++) {

4 i‡(
x
[
i
] !
y
[i])  0;

7 
	}
}

9 
	$mßme
(
m≠pög
 
x
, m≠pög 
y
) {

10 
mixed
 
z
;

11 i‡((
	`keys
(
x
)Ë!(keys(
y
)))  0;

12 
	`f‹óch
 (
z
 
ö
 
	`keys
(
x
)) {

13 i‡(
x
[
z
] !
y
[z])  0;

16 
	}
}

18 
	$wh©evî1
(
mixed
 
x
, mixed 
y
, mixed 
z
) {

19  
x
;

20 
	}
}

22 
	$wh©evî2
(
mixed
 
x
, mixed 
y
, mixed 
z
) {

23  
y
;

24 
	}
}

26 
	$wh©evî3
(
mixed
 
x
, mixed 
y
, mixed 
z
) {

27  
z
;

28 
	}
}

30 
	$do_ã°s
() {

32 
	`ASSERT
(
	`ßme
(
	`m≠
–({ 1, 2, 0, 3 }), (: 
$1
 :)), ({ 1, 2, 0, 3 })));

33 
	`ASSERT
(
	`m≠
( ({ }), "foo") == ({}));

34 
	`ASSERT
(
	`ßme
(
	`m≠
–({ 2, 3 }), (: 
wh©evî1
, 1 :)), ({ 1, 1 })));

35 
	`ASSERT
(
	`ßme
(
	`m≠
–({ 2, 3 }), "wh©evî2", 
	`this_obje˘
(), 1), ({ 1, 1})));

36 
	`ASSERT
(
	`ßme
(
	`m≠
–({ 2, 3 }), (: 
wh©evî2
 :), 1), ({ 1, 1 })));

37 
	`ASSERT
(
	`ßme
(
	`m≠
–({ 2, 3 }), "wh©evî2", 
__FILE__
, 1), ({ 1, 1 })));

40 
	`ASSERT
(
	`mßme
(
	`m≠
–([ 1: 2, 0: 3 ]), (: 
$1
 :)), ([ 1: 1, 0: 0 ])));

41 
	`ASSERT
(
	`mßme
(
	`m≠
( ([ ]), "foo"), ([])));

42 
	`ASSERT
(
	`mßme
(
	`m≠
–([ 1: 2 ]), (: 
wh©evî1
, 3 :)), ([ 1: 3 ])));

43 
	`ASSERT
(
	`mßme
(
	`m≠
–([ 1: 2 ]), "wh©evî3", 
	`this_obje˘
(), 3), ([ 1: 3 ])));

44 
	`ASSERT
(
	`mßme
(
	`m≠
–([ 1: 2 ]), (: 
wh©evî3
 :), 3), ([ 1: 3 ])));

45 
	`ASSERT
(
	`mßme
(
	`m≠
–([ 1: 2 ]), "wh©evî3", 
__FILE__
, 3), ([ 1: 3 ])));

48 
	`ASSERT
(
	`m≠
–"foob¨", (: 
$1
 + 1 :)) == "gppcbs");

49 
	`ASSERT
(
	`m≠
("", "foo") == "");

50 
	`ASSERT
(
	`m≠
–"xy", (: 
wh©evî1
, 'c' :)) == "cc");

51 
	`ASSERT
(
	`m≠
–"xy", "wh©evî2", 
	`this_obje˘
(), 'c') == "cc");

52 
	`ASSERT
(
	`m≠
–"xy", (: 
wh©evî2
 :), 'c')== "cc");

53 
	`ASSERT
(
	`m≠
–"xy", "wh©evî2", 
__FILE__
, 'c')== "cc");

54 
	}
}

	@testsuite/single/tests/efuns/map_delete.c

1 
	$do_ã°s
() {

2 
m≠pög
 
m
 = ([ 1 : 2, "foo" : 3, 
	`this_obje˘
() : 5 ]);

4 
	`m≠_dñëe
(
m
, 1);

5 
	`ASSERT
(
	`undeföedp
(
m
[1]));

6 
	`m≠_dñëe
(
m
, ({}));

7 
	`m≠_dñëe
(
m
, "foo");

8 
	`ASSERT
(
	`undeföedp
(
m
["foo"]));

9 
	`m≠_dñëe
(
m
, 
	`this_obje˘
());

10 
	`ASSERT
(
	`undeföedp
(
m
[
	`this_obje˘
()]));

11 
	}
}

	@testsuite/single/tests/efuns/mapp.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`m≠p
(([])));

3 
	`ASSERT
(!
	`m≠p
(0));

4 
	`ASSERT
(!
	`m≠p
("foo"));

5 
	}
}

	@testsuite/single/tests/efuns/master.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`ma°î
());

3 
	`ASSERT
(
	`obje˘p
(
	`ma°î
()));

4 
	}
}

	@testsuite/single/tests/efuns/match_path.c

1 
	$do_ã°s
() {

2 
m≠pög
 
m
 = ([ "foo/" : 1, "bar" : 2, "bazz/foo" : 3, "foo/bar/bazz" : 4]);

4 
	`ASSERT
(!
	`m©ch_∑th
(
m
, "kajdfj"));

5 
	`ASSERT
(
	`m©ch_∑th
(
m
, "bar") == 2);

6 
	`ASSERT
(
	`m©ch_∑th
(
m
, "bar/") == 2);

7 
	`ASSERT
(
	`m©ch_∑th
(
m
, "bazz//foo") == 3);

8 
	`ASSERT
(
	`m©ch_∑th
(
m
, "bazz/foo//") == 3);

9 
	`ASSERT
(
	`m©ch_∑th
(
m
, "foo/bar") == 1);

10 
	`ASSERT
(
	`m©ch_∑th
(
m
, "foo/bar/bazz") == 4);

11 
	}
}

	@testsuite/single/tests/efuns/member_array.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`membî_¨øy
('c', "foo") == -1);

3 
	`ASSERT
(
	`membî_¨øy
('b', "abar") == 1);

4 
	`ASSERT
(
	`membî_¨øy
('y', "xyzzy") == 1);

5 
	`ASSERT
(
	`membî_¨øy
('y', "xyzzy", 2) == 4);

6 
	`ASSERT
(
	`membî_¨øy
(2, ({ 1, 2, 3 })) == 1);

7 
	`ASSERT
(
	`membî_¨øy
("foo", ({ 1, "foo", 3 })) == 1);

8 
	}
}

	@testsuite/single/tests/efuns/message.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/mkdir.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/move_object.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ENVIRONMENT__


3 
	`ASSERT
(
	`ˇtch
(
	`move_obje˘
("foo")));

4 
	`ASSERT
(
	`ˇtch
(
	`move_obje˘
(
__FILE__
)));

5 
	`ASSERT
(
	`ˇtch
(
	`move_obje˘
(
	`this_obje˘
())));

6 
	`move_obje˘
(
	`ma°î
());

7 
	`ASSERT
(
	`ívú⁄mít
(
	`this_obje˘
()Ë=
	`ma°î
());

8 
	`de°ru˘
(
	`this_obje˘
());

9 
	`ASSERT
(
	`ˇtch
(
	`move_obje˘
(
	`ma°î
())));

11 
	}
}

	@testsuite/single/tests/efuns/mud_status.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`°rögp
(
	`mud_°©us
()));

3 
	`ASSERT
(
	`°rögp
(
	`mud_°©us
(1)));

4 
	}
}

	@testsuite/single/tests/efuns/notify_fail.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 
	`nŸify_Áû
("foo");

4 
	`nŸify_Áû
((: 
	`wrôe
("hi!\n") :));

6 
	}
}

	@testsuite/single/tests/efuns/nullp.c

1 
	gx
;

3 
	$do_ã°s
() {

4 
	`ASSERT
(
	`evÆu©e
–(: 
	`nuŒp
(
$1
) :) ));

5 
	`ASSERT
(
	`nuŒp
(
x
));

6 
	`ASSERT
(!
	`nuŒp
(1));

7 
	}
}

	@testsuite/single/tests/efuns/objectp.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`obje˘p
(
	`this_obje˘
()));

3 
	`ASSERT
(!
	`obje˘p
(0));

4 
	}
}

	@testsuite/single/tests/efuns/opcprof.c

1 
	$do_ã°s
() {

2 #i‡
	`deföed
(
__OPCPROF__
Ë|| deföed(
__OPCPROF_2D__
)

3 
	`›˝rof
();

4 
	`›˝rof
("/opc");

6 
	}
}

	@testsuite/single/tests/efuns/origin.c

1 
	$lfun
() {

2 
	`ASSERT
(
	`‹igö
() == "local");

3 
	}
}

5 
	$co
() {

6 
	`ASSERT
(
	`‹igö
() == "internal");

7 
	}
}

9 
	$ef
() {

10 
	`ASSERT
(
	`‹igö
() == "efun");

11 
	}
}

13 
	$do_ã°s
() {

14 
	`ASSERT
(
	`‹igö
() == "call_other");

15 
	`lfun
();

16 
	`ˇŒ_out
("co", 1);

17 
	`fûãr
( ({ 1 }), "ef");

18 
	`ASSERT
(
	`evÆu©e
–(: 
‹igö
 :)) == "functionÖointer");

19 
	`ASSERT
(
	`evÆu©e
–(: 
	`‹igö
() :)) == "functional");

20 
	}
}

	@testsuite/single/tests/efuns/pointerp.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`poöãΩ
( ({}) ));

3 
	`ASSERT
(!
	`poöãΩ
( ([]) ));

4 
	}
}

	@testsuite/single/tests/efuns/present.c

1 
°rög
 
	gid
;

3 
	$id
(
°rög
 
«me
Ë{ Çamê=
id
; 
	}
}

5 
	$¸óã
(
°rög
 
¨g
) {

6 #i‚de‡
__NO_ENVIRONMENT__


7 
id
 = 
¨g
;

8 i‡(!
¨g
) {

9 
	`√w
(
__FILE__
, "foo");

11 
	`move_obje˘
(
	`¥evious_obje˘
());

14 
	}
}

16 
	$do_ã°s
() {

17 #i‚de‡
__NO_ENVIRONMENT__


18 
	`ASSERT
(
	`¥e£¡
("foo", 
	`this_obje˘
()));

19 
	`ASSERT
(
	`¥e£¡
("foo"));

21 
	}
}

	@testsuite/single/tests/efuns/previous_object.c

1 
	$do_ã°s
() {

2 
obje˘
 *
obs
 = 
	`¥evious_obje˘
(-1);

4 
i
 = 0; i < (
obs
); i++) {

5 
	`ASSERT
(
obs
[
i
] =
	`¥evious_obje˘
(i));

7 
	}
}

	@testsuite/single/tests/efuns/printf.c

1 
	$do_ã°s
() {

3 
	`¥ötf
("PrintfÅest.\n");

4 
	}
}

	@testsuite/single/tests/efuns/query_ed_mode.c

1 
	$do_ã°s
() {

2 #i‚de‡
__OLD_ED__


3 
	`ASSERT
(
	`quîy_ed_mode
() == -1);

4 
	`ed_°¨t
("/ed_test");

5 
	`ASSERT
(
	`quîy_ed_mode
() == 0);

6 
	`ed_cmd
("h");

7 
	`ASSERT
(
	`quîy_ed_mode
() == -2);

8 
	`ed_cmd
("");

9 
	`ASSERT
(
	`quîy_ed_mode
() == 0);

10 
	`ed_cmd
("2c");

11 
	`ASSERT
(
	`quîy_ed_mode
() == 2);

12 
	`ed_cmd
(".");

13 
	`ed_cmd
("Q");

14 
	`ASSERT
(
	`quîy_ed_mode
() == -1);

16 
	}
}

	@testsuite/single/tests/efuns/query_idle.c

1 
	$do_ã°s
() {

2 i‡(
	`this_∂ayî
())

3 
	`ASSERT
(
	`öç
(
	`quîy_idÀ
(
	`this_∂ayî
())));

4 
	}
}

	@testsuite/single/tests/efuns/query_ip_name.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`quîy_ù_numbî
(
	`this_obje˘
()) == 0);

3 i‡(
	`this_∂ayî
())

4 
	`ASSERT
(
	`°rögp
(
	`quîy_ù_numbî
(
	`this_∂ayî
())));

5 
	}
}

	@testsuite/single/tests/efuns/query_ip_number.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`quîy_ù_numbî
(
	`this_obje˘
()) == 0);

3 i‡(
	`this_∂ayî
())

4 
	`ASSERT
(
	`°rögp
(
	`quîy_ù_numbî
(
	`this_∂ayî
())));

5 
	}
}

	@testsuite/single/tests/efuns/query_load_average.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`°rögp
(
	`quîy_lﬂd_avîage
()));

3 
	}
}

	@testsuite/single/tests/efuns/query_privs.c

1 
	$do_ã°s
() {

2 #ifde‡
__PRIVS__


3 
	`ASSERT
(
	`quîy_¥ivs
(
	`this_obje˘
()));

5 
	}
}

	@testsuite/single/tests/efuns/query_snoop.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_SNOOP__


3 
	`ASSERT
(
	`quîy_¢o›
(
	`this_obje˘
()) == 0);

5 
	}
}

	@testsuite/single/tests/efuns/query_snooping.c

1 
	$do_ã°s
() {

2 #i‚de‡
__NO_SNOOP__


3 
	`ASSERT
(
	`quîy_¢o›ög
(
	`this_obje˘
()) == 0);

5 
	}
}

	@testsuite/single/tests/efuns/query_verb.c

1 #i‚de‡
__NO_ADD_ACTION__


2 
	$func
() {

3 
	`ASSERT
(
	`quîy_vîb
() == "foo");

4 
	}
}

7 
	$do_ã°s
() {

8 #i‚de‡
__NO_ADD_ACTION__


9 
obje˘
 
ç
;

10 
SAVETP
;

11 
	`íabÀ_comm™ds
();

12 
	`add_a˘i⁄
–(: 
func
 :), "foo");

13 
RESTORETP
;

14 
	`comm™d
("foo");

16 
	}
}

	@testsuite/single/tests/efuns/random.c

1 
	$do_ã°s
() {

2 
i
 = 0; i < 100; i++) {

3 
	`ASSERT
(
	`øndom
(5) >= 0);

4 
	`ASSERT
(
	`øndom
(5) < 5);

6 
	}
}

	@testsuite/single/tests/efuns/read_buffer.c

7 
	#TEST_STRING
 "ABC"

	)

9 #i‚de‡
__NO_BUFFER_TYPE__


10 
buf„r
 
	gb
;

12 
	gi
;

14 
	$do_ã°s
() {

15 
°rög
 
s
;

17 #i‚de‡
__NO_BUFFER_TYPE__


18 
s
 = 
	`ªad_buf„r
(
b
);

19 
	`ASSERT
(
s
 =
TEST_STRING
);

21 
s
 = 
	`ªad_buf„r
(
b
, (b)-1);

22 
	`ASSERT
(
s
 =
TEST_STRING
[
i
..i]);

24 
s
 = 
	`ªad_buf„r
(
b
, (b));

25 
	`ASSERT
(
s
 == 0);

27 
s
 = 
	`ªad_buf„r
(
b
, -(b));

28 
	`ASSERT
(
s
 =
TEST_STRING
);

30 
s
 = 
	`ªad_buf„r
(
b
, -((b) + 1));

31 
	`ASSERT
(
s
 == 0);

33 
s
 = 
	`ªad_buf„r
(
b
, 1, 1);

34 
	`ASSERT
(
s
 =
TEST_STRING
[1..1]);

36 
s
 = 
	`ªad_buf„r
(
b
, 1, (b));

37 
	`ASSERT
(
s
 =
TEST_STRING
[1..
i
]);

41 
	}
}

44 
	$¸óã
()

46 
j
, 
limô
;

48 
i
 = 
	`°æí
(
TEST_STRING
) - 1;

49 
limô
 = 
	`°æí
(
TEST_STRING
);

50 #i‚de‡
__NO_BUFFER_TYPE__


51 
b
 = 
	`Æloˇã_buf„r
(
limô
);

52 
j
 = 0; j < 
limô
; j++) {

53 
b
[
j
] = 
TEST_STRING
[j];

56 
	}
}

	@testsuite/single/tests/efuns/read_bytes.c

1 
	$do_ã°s
() {

2 
°rög
 
foo
 = 
	`ªad_fûe
("/testfile");

4 
	`ASSERT
(!
	`ªad_byãs
("/does_not_exist"));

5 
	`ASSERT
(!
	`ªad_byãs
("/does_not_exist", 1));

6 
	`ASSERT
(!
	`ªad_byãs
("/does_not_exist", 1, 2));

8 
	`ASSERT
(!
	`ªad_byãs
("/testfile", -100000, 10));

9 
	`ASSERT
(
	`ªad_byãs
("/ã°fûe", -10, 5Ë=
foo
[<10..<6]);

10 
	`ASSERT
(
	`ªad_byãs
("/ã°fûe", -10, 0Ë=
foo
[<10..]);

11 
	`ASSERT
(
	`ªad_byãs
("/ã°fûe", -10Ë=
foo
[<10..]);

12 
	`ASSERT
(
	`ªad_byãs
("/ã°fûe", -10, 100Ë=
foo
[<10..]);

13 
	`ASSERT
(
	`ªad_byãs
("/ã°fûe"Ë=
foo
);

14 
	`ASSERT
(!
	`ªad_byãs
("/testfile", 1000000, 10));

15 
	`ASSERT
(
	`ªad_byãs
("/ã°fûe", 100, 100Ë=
foo
[100..199]);

16 
	`ASSERT
(
	`°æí
(
	`ªad_byãs
("/testfile", 100, 100)) == 100);

17 
	}
}

	@testsuite/single/tests/efuns/read_file.c

1 
	$do_ã°s
() {

2 
°rög
 
foo
 = 
	`ªad_byãs
("/testfile");

3 
°rög
 
mid
 = 
	`im∂ode
(
	`ex∂ode
(
foo
, "\n")[99..198], "\n") + "\n";

5 
	`ASSERT
(!
	`ªad_fûe
("/single", 10, 10));

6 
	`ASSERT
(
	`ªad_fûe
("/ã°fûe"Ë=
foo
);

7 
	`ASSERT
(
	`ªad_fûe
("/ã°fûe", 100, 100Ë=
mid
);

8 
	`ASSERT
(!
	`ªad_fûe
("/does_not_exist"));

9 
	`ASSERT
(!
	`ªad_fûe
("/testfile", 10000, 1));

10 
	}
}

	@testsuite/single/tests/efuns/receive.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(!
	`ª˚ive
(""));

3 
	`ASSERT
(!
	`ª˚ive
("recieve_test"));

4 
	}
}

	@testsuite/single/tests/efuns/reg_assoc.c

1 
	$ßme_¨øy
(
mixed
 *
x
, mixed *
y
) {

2 i‡(!
	`¨øyp
(
x
Ë|| !¨øyp(
y
))  0;

3 i‡((
x
Ë!(
y
))  0;

4 
i
 = 0; i < (
x
); i++) {

5 i‡(
	`¨øyp
(
x
[
i
])) {

6 i‡(!
	`ßme_¨øy
(
x
[
i
], 
y
[i]))

8 } i‡(
x
[
i
] !
y
[i])

12 
	}
}

14 
	$do_ã°s
() {

15 
	`ASSERT
(
	`ßme_¨øy
(

16 
	`ªg_assoc
("testhahatest", ({ "haha", "te" }), ({ 2, 3 }), 4),

19 
	`ASSERT
(
	`ˇtch
(
	`ªg_assoc
("foo", ({ 1 }), ({ 2, 3 }))));

20 
	`ASSERT
(
	`ˇtch
(
	`ªg_assoc
("foo", ({ 1, 2 }), ({ 2, 3 }))));

21 
	`ASSERT
(
	`ˇtch
(
	`ªg_assoc
("foo", ({ "bar", "+" }), ({ 0, 1 }))));

22 
	}
}

	@testsuite/single/tests/efuns/regexp.c

1 
	$ßme_¨øy
(
mixed
 *
x
, mixed *
y
) {

2 i‡(!
	`¨øyp
(
x
Ë|| !¨øyp(
y
))  0;

3 i‡((
x
Ë!(
y
))  0;

4 
i
 = 0; i < (
x
); i++) {

5 i‡(
	`¨øyp
(
x
[
i
])) {

6 i‡(!
	`ßme_¨øy
(
x
[
i
], 
y
[i]))

8 } i‡(
x
[
i
] !
y
[i])

12 
	}
}

14 
	$do_ã°s
() {

15 
m≠pög
 
x
 = ([ 1 : "bazz" ]);

17 
	`ASSERT
(
	`ˇtch
(
	`ªgexp
("foo", "b¨", 
x
[1])));

18 
	`ASSERT
(
	`ˇtch
(
	`ªgexp
("foo", "bar", 1)));

20 
	`ASSERT
(
	`ªgexp
("tabba", "a*b"));

21 
	`ASSERT
(!
	`ªgexp
("tbba", "a+b"));

22 
	`ASSERT
(
	`ßme_¨øy
(

23 
	`ªgexp
( ({ "foo", "bar", "bazz" }), "b"),

25 
	`ASSERT
(
	`ßme_¨øy
(

26 
	`ªgexp
( ({ "foo", "bar", "bazz" }), "^...$"),

28 
	`ASSERT
(
	`ßme_¨øy
(
	`ªgexp
( ({ "foo", "bar", "bazz" }), "(oo|zz)", 1),

30 
	`ASSERT
(
	`ˇtch
(
	`ªgexp
("foo", "+")));

31 
	`ASSERT
(
	`ˇtch
(
	`ªgexp
( ({ "foo", "bar" }), "+")));

32 
	}
}

	@testsuite/single/tests/efuns/remove_action.c

1 
	gˇŒed
 = 0;

3 
	$func
(Ë{ 
ˇŒed
 = 1; 
	}
}

5 
	$do_ã°s
() {

6 #i‚de‡
__NO_ADD_ACTION__


7 
obje˘
 
ç
;

9 
SAVETP
;

10 
	`íabÀ_comm™ds
();

11 
	`add_a˘i⁄
( "func", "bar" );

12 
	`ASSERT
(
	`ªmove_a˘i⁄
( "func", "bar" ));

13 
RESTORETP
;

14 
	`comm™d
("bar");

15 
	`ASSERT
(!
ˇŒed
);

17 
	}
}

	@testsuite/single/tests/efuns/remove_call_out.c

1 
	gˇŒed
;

3 
	$fú°_ˇŒ
() {

4 
ˇŒed
 = 1;

5 
	}
}

7 
	$thúd_ˇŒ
() {

8 
	`ASSERT
(!
ˇŒed
);

9 
	}
}

11 
	$£c⁄d_ˇŒ
() {

12 
	`ASSERT
(!
ˇŒed
);

13 
	`ˇŒ_out
–(: 
fú°_ˇŒ
 :), 0);

14 
	`ªmove_ˇŒ_out
();

15 
	`ˇŒ_out
–(: 
thúd_ˇŒ
 :), 1);

16 
	}
}

18 
	$do_ã°s
() {

19 
ˇŒed
 = 0;

20 
	`ˇŒ_out
( "first_call", 0);

21 
	`ˇŒ_out
( "second_call", 1);

22 
	`ASSERT
(
	`ªmove_ˇŒ_out
("first_call") != -1);

23 
	`ASSERT
(
	`ªmove_ˇŒ_out
("foo") == -1);

24 
	}
}

	@testsuite/single/tests/efuns/rename.c

1 
	$do_ã°s
() {

2 
	`wrôe_fûe
("/rename_test", "Hmm.");

3 
	`ª«me
("/rename_test", "/ren_test");

4 
	`ASSERT
(
	`fûe_size
("/rename_test") == -1);

5 
	`ASSERT
(
	`ªad_fûe
("/ren_test") == "Hmm.");

6 
	`ª«me
("/ren_test", "/single");

7 
	`ASSERT
(
	`fûe_size
("/ren_test") == -1);

8 
	`ASSERT
(
	`ªad_fûe
("/single/ren_test") == "Hmm.");

9 
	`rm
("/single/ren_test");

10 
	}
}

	@testsuite/single/tests/efuns/replace_string.c

1 
	$do_ã°s
() {

2 
°rög
 
§c
 = "This isáÅest";

4 
i
 = 0; i < 2; i++) {

5 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "", "bar") == src);

6 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "foo", "bar", 5, 4) == src);

9 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x") == "Thx xáÅest");

10 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 1) == "Thx isáÅest");

11 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 0, 0) == "Thx xáÅest");

12 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 0, 1) == "Thx isáÅest");

13 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 0, 2) == "Thx xáÅest");

14 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 1, 1) == "Thx isáÅest");

15 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 1, 2) == "Thx xáÅest");

16 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "x", 2, 2) == "This xáÅest");

18 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "") == "TháÅest");

19 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 1) == "Th isáÅest");

20 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 0, 0) == "TháÅest");

21 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 0, 1) == "Th isáÅest");

22 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 0, 2) == "TháÅest");

23 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 1, 1) == "Th isáÅest");

24 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 1, 2) == "TháÅest");

25 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "", 2, 2) == "ThisáÅest");

27 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x") == "Thix ixáÅext");

28 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 1) == "Thix isáÅest");

29 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 2) == "Thix ixáÅest");

30 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 0, 0) == "Thix ixáÅext");

31 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 0, 1) == "Thix isáÅest");

32 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 0, 2) == "Thix ixáÅest");

33 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 1, 1) == "Thix isáÅest");

34 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 1, 2) == "Thix ixáÅest");

35 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 1, 3) == "Thix ixáÅext");

36 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "x", 2, 2) == "This ixáÅest");

38 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "") == "Thi iáÅet");

39 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 1) == "Thi isáÅest");

40 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 2) == "Thi iáÅest");

41 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 0, 0) == "Thi iáÅet");

42 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 0, 1) == "Thi isáÅest");

43 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 0, 2) == "Thi iáÅest");

44 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 1, 1) == "Thi isáÅest");

45 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 1, 2) == "Thi iáÅest");

46 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 1, 3) == "Thi iáÅet");

47 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "", 2, 2) == "This iáÅest");

49 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo") == "Thfoo fooáÅest");

50 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 1) == "Thfoo isáÅest");

51 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 2) == "Thfoo fooáÅest");

52 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 0, 0) == "Thfoo fooáÅest");

53 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 0, 1) == "Thfoo isáÅest");

54 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 0, 2) == "Thfoo fooáÅest");

55 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 1, 1) == "Thfoo isáÅest");

56 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 1, 2) == "Thfoo fooáÅest");

57 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 1, 3) == "Thfoo fooáÅest");

58 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "is", "foo", 2, 2) == "This fooáÅest");

60 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo") == "Thifoo ifooáÅefoot");

61 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 1) == "Thifoo isáÅest");

62 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 2) == "Thifoo ifooáÅest");

63 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 0, 0) == "Thifoo ifooáÅefoot");

64 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 0, 1) == "Thifoo isáÅest");

65 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 0, 2) == "Thifoo ifooáÅest");

66 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 1, 1) == "Thifoo isáÅest");

67 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 1, 2) == "Thifoo ifooáÅest");

68 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 1, 3) == "Thifoo ifooáÅefoot");

69 
	`ASSERT
(
	`ª∂a˚_°rög
(
§c
, "s", "foo", 2, 2) == "This ifooáÅest");

71 
§c
 = src[0..5] + src[6..];

73 
	}
}

	@testsuite/single/tests/efuns/restore_object.c

1 
	gv¨1
;

2 #i‚de‡
__SENSIBLE_MODIFIERS__


3 
	gv¨2
;

5 
noßve
 
	gv¨2
;

7 
	gv¨3
;

8 
	gv¨4
;

10 
	$£tup
() {

11 
v¨1
 = 1;

12 
v¨2
 = 2;

13 
v¨3
 = 3;

14 
v¨4
 = 4;

15 
	}
}

17 
	$do_ã°s
() {

18 
	`wrôe_fûe
("/sf.o", "#empty\n", 1);

19 
	`£tup
();

20 
	`ª°‹e_obje˘
("/sf");

21 
	`ASSERT
(!
v¨1
);

22 
	`ASSERT
(
v¨2
 == 2);

23 
	`ASSERT
(!
v¨3
);

24 
	`ASSERT
(!
v¨4
);

26 
	`£tup
();

27 
	`ª°‹e_obje˘
("/sf", 1);

28 
	`ASSERT
(
v¨1
 == 1);

29 
	`ASSERT
(
v¨2
 == 2);

30 
	`ASSERT
(
v¨3
 == 3);

31 
	`ASSERT
(
v¨4
 == 4);

33 
	`wrôe_fûe
("/sf.o", "var1 2\nvar2 4\nvar3 6\nvar4 8\n", 1);

34 
	`£tup
();

35 
	`ª°‹e_obje˘
("/sf", 1);

36 
	`ASSERT
(
v¨1
 == 2);

37 
	`ASSERT
(
v¨2
 == 2);

38 
	`ASSERT
(
v¨3
 == 6);

39 
	`ASSERT
(
v¨4
 == 8);

41 
	`wrôe_fûe
("/sf.o", "var4 1\nvar2 9\nvar1 3\nvar3 4\n", 1);

42 
	`£tup
();

43 
	`ª°‹e_obje˘
("/sf", 1);

44 
	`ASSERT
(
v¨1
 == 3);

45 
	`ASSERT
(
v¨2
 == 2);

46 
	`ASSERT
(
v¨3
 == 4);

47 
	`ASSERT
(
v¨4
 == 1);

48 
	}
}

	@testsuite/single/tests/efuns/restore_variable.c

1 
	#ERR
(
x
Ë
	`ASSERT2
(
	`ˇtch
(
	`ª°‹e_v¨übÀ
(x)), 
	`•rötf
("%O", x))

	)

2 
	#IS
(
x
, 
y
Ë
	`ASSERT2
(
	`ßme
(
	`ª°‹e_v¨übÀ
(x),y), 
	`•rötf
("%O", x))

	)

4 
°rög
 *
	gvÆue_îrs
 = ({ "\"\"x", "\"\\", "\"\\x\\", "\"\\x\"x",

6 
m≠pög
 
	gvÆues
 = ([

20 
	$do_ã°s
() {

21 
mixed
 
x
, 
y
;

22 
	`f‹óch
 (
x
 
ö
 
vÆue_îrs
) {

23 
	`ERR
(
x
);

26 
	`f‹óch
 (
x
, 
y
 
ö
 
vÆues
) {

27 
	`IS
(
x
, 
y
);

31 
	`f‹óch
 (
x
, 
y
 
ö
 
vÆues
) {

32 
	`IS
("({" + 
x
 + ",})", ({ 
y
 }));

33 
	`IS
("({" + 
x
 + "," + x + ",})", ({ 
y
, y }));

37 
	`f‹óch
 (
x
, 
y
 
ö
 
vÆues
) {

38 
	`IS
("([1:" + 
x
 + ",])", ([1:
y
 ]));

39 
	`IS
("([" + 
x
 + ":" + x + ",])", ([ 
y
: y ]));

41 
	}
}

	@testsuite/single/tests/efuns/rm.c

1 
	$do_ã°s
() {

2 
	`wrôe_fûe
("/rm_test", "foo");

3 
	`ASSERT
(
	`fûe_size
("/rm_test"));

4 
	`rm
("/rm_test");

5 
	`ASSERT
(
	`fûe_size
("/rm_test") == -1);

6 
	}
}

	@testsuite/single/tests/efuns/rmdir.c

1 
	$do_ã°s
() {

2 
	`mkdú
("/rm_dir");

3 
	`ASSERT
(
	`fûe_size
("/rm_dir") == -2);

4 
	`rmdú
("/rm_dir");

5 
	`ASSERT
(
	`fûe_size
("/rm_dir") == -1);

6 
	}
}

	@testsuite/single/tests/efuns/save_object.c

1 
	gx
 = 0;

2 #i‚de‡
__SENSIBLE_MODIFIERS__


3 
	gz
 = 5;

5 
noßve
 
	gz
 = 5;

7 
	gy
 = 1;

9 
	$do_ã°s
() {

10 
	`ßve_obje˘
("/sf");

11 
	`ASSERT
(
	`ªad_fûe
("/sf.o"Ë="#" + 
__FILE__
 + "\ny 1\n");

12 
	`ßve_obje˘
("/sf", 1);

13 
	`ASSERT
(
	`ªad_fûe
("/sf.o"Ë="#" + 
__FILE__
 + "\nx 0\ny 1\n");

14 
	}
}

	@testsuite/single/tests/efuns/save_variable.c

1 
	#IS
(
x
, 
y
Ë
	`ASSERT2
(
	`ßve_v¨übÀ
(x)==y, 
	`•rötf
("%O %O", x, save_v¨übÀ(x)))

	)

3 
m≠pög
 
	gvÆues
 =

18 
	$do_ã°s
() {

19 
mixed
 
x
, 
y
;

20 
	`f‹óch
 (
x
, 
y
 
ö
 
vÆues
) {

21 
	`IS
(
x
, 
y
);

25 
	`f‹óch
 (
x
, 
y
 
ö
 
vÆues
) {

26 
	`IS
–({ 
x
 }), "({" + 
y
 + ",})");

27 
	`IS
–({ 
x
, x }), "({" + 
y
 + "," + y + ",})");

31 
	`f‹óch
 (
x
, 
y
 
ö
 
vÆues
) {

32 
	`IS
–([ 1 : 
x
 ]), "([1:" + 
y
 + ",])");

33 
	`IS
–([ 
x
 : x ]), "([" + 
y
 + ":" + y + ",])");

35 
	}
}

	@testsuite/single/tests/efuns/say.c

1 #i‚de‡
__NO_ENVIRONMENT__


2 
°rög
 
	gîr
 = 0;

3 
°rög
 
	gyes
 = 0;

5 
	#YES
(
x
Ë
	`ASSERT2
((
èlkî
->
	`£nd
(x), 
yes
 =x), x); ASSERT2(—Ækî->£nd("no:" + x, 
	`this_obje˘
()), !
îr
),Éº); ASSERT2(—Ækî->£nd("no:" + x, ({Åhis_obje˘(Ë})), !îr),Éº)

	)

6 
	#NO
(
x
Ë
	`ASSERT2
((
èlkî
->
	`£nd
(x), !
îr
),Éº)

	)

8 
	$ˇtch_ãŒ
(
°rög
 
°r
) {

9 i‡(
°r
[0..2] != "yes")

10 
îr
 = 
°r
;

12 
yes
 = 
°r
;

13 
	}
}

15 
	$do_ã°s
() {

16 
obje˘
 
ç
;

17 
obje˘
 
èlkî
 = 
	`√w
(
__DIR__
 "talker");

19 #i‚de‡
__NO_ADD_ACTION__


20 
SAVETP
;

21 
	`íabÀ_comm™ds
();

22 
RESTORETP
;

24 
	`NO
("no-noenv");

25 
èlkî
->
	`move
(
	`this_obje˘
());

27 
	`YES
("yes-inside");

28 
èlkî
->
	`move
(
	`√w
("/single/void"));

29 
	`move_obje˘
(
èlkî
);

30 
	`YES
("yes-outside");

31 
	}
}

	@testsuite/single/tests/efuns/set_bit.c

1 
	$do_ã°s
() {

2 
°rög
 
°r
;

4 
	`ASSERT
(
	`ˇtch
(
	`£t_bô
("", 10000000000000)));

5 
	`ASSERT
(
	`ˇtch
(
	`£t_bô
("", -2)));

7 
°r
 = 
	`£t_bô
("", 100);

8 
	`ASSERT
(
	`ã°_bô
(
°r
, 100));

9 
i
 = 0; i < 200; i++) {

10 i‡(
i
 != 100)

11 
	`ASSERT
(!
	`ã°_bô
(
°r
, 
i
));

13 
°r
 = " ";

14 
°r
[0] = 5;

15 
	`ASSERT
(
	`ˇtch
(
	`£t_bô
(
°r
, 1)));

16 
°r
[0] = 255;

17 
	`ASSERT
(
	`ˇtch
(
	`£t_bô
(
°r
, 1)));

18 
	}
}

	@testsuite/single/tests/efuns/set_debug_level.c

1 
	$do_ã°s
() {

2 #ifde‡
__DEBUG_MACRO__


3 
	`£t_debug_Àvñ
(10);

4 
	`£t_debug_Àvñ
(0);

6 
	}
}

	@testsuite/single/tests/efuns/set_heart_beat.c

1 
	gx
;

3 
	$hóπ_bót
() {

4 
x
++;

5 
x
) {

7 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 1);

8 
	`£t_hóπ_bót
(2);

9 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 2);

12 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 2);

13 
	`£t_hóπ_bót
(-1);

14 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 2);

17 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 2);

18 
	`£t_hóπ_bót
(0);

19 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 0);

22 
	`ASSERT
(0);

24 
	}
}

26 
	$do_ã°s
() {

27 
x
 = 0;

28 
	`£t_hóπ_bót
(0);

29 
	`ASSERT
(!
	`quîy_hóπ_bót
(
	`this_obje˘
()));

30 
	`£t_hóπ_bót
(1);

31 
	`ASSERT
(
	`quîy_hóπ_bót
(
	`this_obje˘
()) == 1);

32 
	}
}

	@testsuite/single/tests/efuns/set_hide.c

1 
	$do_ã°s
() {

2 
	`£t_hide
(1);

3 
	`£t_hide
(0);

4 
	}
}

	@testsuite/single/tests/efuns/set_light.c

1 
	glight
 = 0;

3 
	#CHK
 
	`ASSERT
(
light
 = 
	`£t_light
(0));

	)

5 #i‚de‡
__NO_ENVIRONMENT__


6 
	$move_‹_de°ru˘
(
obje˘
 
ob
) {

7 
	`move_obje˘
(
	`√w
("/single/void"));

8 
	}
}

11 
	$do_ã°s
() {

12 
obje˘
 
ob
;

14 #i‚de‡
__NO_LIGHT__


15 
CHK
;

16 
	`£t_light
(2);

17 
light
 += 2;

18 
CHK
;

20 #i‚de‡
__NO_ENVIRONMENT__


21 
ob
 = 
	`√w
(
__DIR__
 "light");

22 
ob
->
	`move
(
	`this_obje˘
());

23 
light
 += 3;

24 
CHK
;

26 
	`de°ru˘
(
ob
);

27 
light
 -= 3;

28 
CHK
;

30 
ob
 = 
	`√w
(
__DIR__
 "light");

31 
	`move_obje˘
(
ob
);

32 
light
 += 3;

33 
CHK
;

35 
	`de°ru˘
(
ob
);

36 
light
 -= 3;

37 
CHK
;

40 
	}
}

	@testsuite/single/tests/efuns/set_living_name.c

1 
	$do_ã°s
() {

2 
obje˘
 
ç
;

3 #i‚de‡
__NO_ADD_ACTION__


4 
SAVETP
;

5 
	`íabÀ_comm™ds
();

6 
RESTORETP
;

7 
	`ASSERT
(!
	`föd_livög
("foo"));

8 
	`£t_livög_«me
("foo");

9 
	`ASSERT
(
	`föd_livög
("foo"Ë=
	`this_obje˘
());

10 
	`dißbÀ_comm™ds
();

11 
	`ASSERT
(!
	`föd_livög
("foo"));

12 
	`íabÀ_comm™ds
();

13 
RESTORETP
;

14 
	`£t_livög_«me
("bar");

15 
	`ASSERT
(!
	`föd_livög
("foo"));

16 
	`ASSERT
(
	`föd_livög
("b¨"Ë=
	`this_obje˘
());

17 
	`de°ru˘
(
	`this_obje˘
());

19 
	}
}

	@testsuite/single/tests/efuns/set_privs.c

1 
	$do_ã°s
() {

2 #ifde‡
__PRIVS__


3 
	`£t_¥ivs
(
	`this_obje˘
(), "foo");

4 
	`ASSERT
(
	`quîy_¥ivs
(
	`this_obje˘
()) == "foo");

5 
	`£t_¥ivs
(
	`this_obje˘
(), 0);

6 
	`ASSERT
(
	`quîy_¥ivs
(
	`this_obje˘
()) == 0);

8 
	}
}

	@testsuite/single/tests/efuns/shadow.c

1 
obje˘
 
	g¥ev
;

3 
	$¸óã
() {

4 
¥ev
 = 
	`¥evious_obje˘
();

5 
	}
}

7 
nomask
 
	$i_am_bad
() {

8 
	}
}

10 
	$do_ã°s
() {

11 
obje˘
 
ob
;

12 #i‚de‡
__NO_SHADOWS__


13 
	`ASSERT
(
	`ˇtch
(
	`shadow
(
	`this_obje˘
())));

14 
	`ASSERT
(
	`ˇtch
(
	`shadow
(
	`ma°î
())));

15 
	`√w
(
__DIR__
 "badshad", 1);

17 
	`ASSERT
(
	`shadow
(
	`this_obje˘
(), 0) == 0);

18 
	`ASSERT
((
obje˘
)
	`this_obje˘
()->
	`foo
() ==Åhis_object());

20 
ob
 = 
	`√w
(
__DIR__
 "goodshad", 1);

21 
	`ASSERT
(
	`shadow
(
	`this_obje˘
(), 0Ë=
ob
);

22 
	`ASSERT
((
obje˘
)
	`this_obje˘
()->
	`foo
(Ë=
ob
);

23 
	`ASSERT
((
obje˘
)
	`√w
(
__FILE__
)->
	`b¨
(Ë=
ob
);

25 
	`ASSERT
(
	`ˇtch
(
	`shadow
(
ob
)));

26 
	`ASSERT
(
	`ˇtch
(
	`shadow
(
	`√w
(
__FILE__
))));

29 
	}
}

31 
obje˘
 
	$foo
() {

32 
	`¥ötf
("%O\n", 
	`fûe_«me
());

33  
	`this_obje˘
();

34 
	}
}

36 
obje˘
 
	$b¨
() {

37  (
obje˘
)
¥ev
->
	`foo
();

38 
	}
}

	@testsuite/single/tests/efuns/shutdown.c

1 
	$do_the_«°y_dìd
() {

2 
	`shutdown
(55);

3 
	`ASSERT
(0);

4 
	}
}

6 
	$do_ã°s
() {

8 
	`ˇŒ_out
–(: 
do_the_«°y_dìd
 :), 60);

9 
	}
}

	@testsuite/single/tests/efuns/sizeof.c

1 
	$do_ã°s
() {

2 
	`ASSERT
((({ 1, 2, 3 })) == 3);

3 
	`ASSERT
((
	`Æloˇã
(50)) == 50);

4 
	`ASSERT
((
	`Æloˇã_m≠pög
(5)) == 0);

5 
	`ASSERT
(( ([ 1 : 2, 3 : 4 ]) ) == 2);

6 
	`ASSERT
(("foo") == 3);

7 
	`ASSERT
(((:  :)) == 0);

8 
	`ASSERT
((6) == 0);

9 
	}
}

	@testsuite/single/tests/efuns/snoop.c

1 
	$do_ã°s
() {

3 
	}
}

	@testsuite/single/tests/efuns/sprintf.c

8 
mixed
 
	$make_¨g
(
x
, 
åaû
) {

9 
	#BEFORE_INTS
 0

	)

10 
	#INTS_HI
 2

	)

11 
	#INTS_LO
 6

	)

12 
	#BEFORE_STRS
 (
INTS_HI
 * 
INTS_LO
)

	)

13 
	#STRS_HI
 1

	)

14 
	#STRS_LO
 1

	)

15 
	#BEFORE_FLOS
 (
BEFORE_STRS
 + 
STRS_HI
 * 
STRS_LO
)

	)

16 
	#FLOS_HI
 1

	)

17 
	#FLOS_LO
 1

	)

18 
	#BEFORE_CHRS
 (
BEFORE_FLOS
 + 
FLOS_HI
 * 
FLOS_LO
)

	)

19 
	#CHRS_HI
 1

	)

20 
	#CHRS_LO
 1

	)

21 
	#BEFORE_LPCS
 (
BEFORE_CHRS
 + 
CHRS_HI
 * 
CHRS_LO
)

	)

22 
	#LPCS_HI
 1

	)

23 
	#LPCS_LO
 9

	)

24 
	#TOTAL
 (
BEFORE_LPCS
 + 
LPCS_HI
 * 
LPCS_LO
)

	)

26 
mixed
 
ªt
;

27 
°rög
 
Õad
 = " ", 
Ωad
 = " ", 
m∑d
;

28 
tmp
;

31 
x
 % 
TOTAL
) {

32 
BEFORE_INTS
..BEFORE_INTS + 
INTS_HI
 * 
INTS_LO
 - 1:

33 
x
 % 
INTS_LO
) {

34 0: 
ªt
 = ({ "i", "5", 5 }); ;

35 1: 
ªt
 = ({ "d", "345", 345 }); ;

36 2: 
ªt
 = ({ "o", "111", 73 }); ;

37 3: 
ªt
 = ({ "x", "a9", 169 }); ;

38 4: 
ªt
 = ({ "X", "A9", 169 }); ;

39 5: 
ªt
 = ({ "i", "-345", -345 }); ;

41 
x
 / 
INTS_LO
) {

45 i‡(
ªt
[0][0] != 'i' &&Ñet[0][0] != 'd')

47 
ªt
[0] = "+" +Ñet[0];

48 i‡(
ªt
[1][0] != '-')Ñet[1] = "+" +Ñet[1];

49 
Õad
 = "+";

53 
BEFORE_STRS
..BEFORE_STRS + 
STRS_HI
 * 
STRS_LO
 - 1:

54 
x
 -
BEFORE_STRS
;

55 
x
 % 
STRS_LO
) {

56 0: 
ªt
 = ({ "s", "foo", "foo" }); ;

58 
x
 / 
STRS_LO
) {

63 
BEFORE_FLOS
..BEFORE_FLOS + 
FLOS_HI
 * 
FLOS_LO
 - 1:

64 
x
 -
BEFORE_FLOS
;

65 
x
 % 
FLOS_LO
) {

66 0: 
ªt
 = ({ "f", "1.234000", 1.234 }); ;

68 
x
 / 
FLOS_LO
) {

73 
BEFORE_CHRS
..BEFORE_CHRS + 
CHRS_HI
 * 
CHRS_LO
 - 1:

74 
x
 -
BEFORE_CHRS
;

75 
x
 % 
CHRS_LO
) {

76 0: 
ªt
 = ({ "c", "a", 97 }); ;

78 
x
 / 
CHRS_LO
) {

83 
BEFORE_LPCS
..BEFORE_LPCS + 
LPCS_HI
 * 
LPCS_LO
 - 1:

84 
x
 -
BEFORE_LPCS
;

85 
x
 % 
LPCS_LO
) {

86 0: 
ªt
 = ({ "O", "1", 1 }); ;

87 1: 
ªt
 = ({ "O", "1.500000", 1.5 }); ;

88 2: 
ªt
 = ({ "O", "\"foo\"", "foo" }); ;

89 3: 
ªt
 = ({ "O", "({ })", ({}) }); ;

90 4: 
ªt
 = ({ "O", "({ /* sizeof() == 2 */\n 1,\n 2\n})", ({ 1, 2 }) }); ;

91 5: 
ªt
 = ({ "O", "(: make_¨g, 5 :)", (: 
make_¨g
, 5 :) }); ;

92 6: 
ªt
 = ({ "O", "(: <code>($1Ë:)", (: 
$1
 :) }); ;

93 7: 
ªt
 = ({ "O", "(: s¥öt‡:)", (: 
•rötf
 :) }); ;

94 8: 
ªt
 = ({ "O", "([ /* sizeof() == 1 */\n 1 : 2,\n])", ([ 1 : 2 ]) }); ;

96 
x
 / 
LPCS_LO
) {

102 
tmp
 = 
	`øndom
(20);

103 i‡(
	`øndom
(5)) {

104 
m∑d
 = "xyzzy";

105 
x
 / 
TOTAL
) {

109 
ªt
[0] = "'xyzzy'" + 
tmp
 +Ñet[0];

110 i‡(
	`°æí
(
ªt
[1]Ë< 
tmp
) {

111 
ªt
[1] = 
m∑d
[0..((
tmp
 - 
	`°æí
(ret[1])) % strlen(mpad))-1]

112 + 
ªt
[1];

113 
	`°æí
(
ªt
[1]Ë+ såÀn(
m∑d
Ë<
tmp
)

114 
ªt
[1] = 
m∑d
 +Ñet[1];

119 
n
, 
Œ
, 
º
;

120 
ªt
[0] = "|'xyzzy'" + 
tmp
 +Ñet[0];

121 i‡((
n
 = 
	`°æí
(
ªt
[1])Ë< 
tmp
) {

122 
Œ
 = (
tmp
 - 
n
 + 1)/2;

123 i‡(
Œ
 % 
	`°æí
(
m∑d
))

124 
ªt
[1] = 
m∑d
[0..(
Œ
 % 
	`°æí
(mpad))-1] +Ñet[1];

125 
Œ
 =Ül/
	`°æí
(
m∑d
);

126 
Œ
--)

127 
ªt
[1] = 
m∑d
 +Ñet[1];

128 i‡(
åaû
) {

129 
º
 = (
tmp
 - 
n
)/2;

130 
n
 = (
º
 % 
	`°æí
(
m∑d
));

131 
º
 =Ñr/
	`°æí
(
m∑d
);

132 
º
--)

133 
ªt
[1] +
m∑d
;

134 i‡(
n
)

135 
ªt
[1] +
m∑d
[0..
n
-1];

141 
ªt
[0] = "-'xyzzy'" + 
tmp
 +Ñet[0];

142 i‡(
	`°æí
(
ªt
[1]Ë< 
tmp
) {

143 
n
 = ((
tmp
 - 
	`°æí
(
ªt
[1])Ë% såÀn(
m∑d
));

144 
	`°æí
(
ªt
[1]Ë+ såÀn(
m∑d
Ë<
tmp
)

145 
ªt
[1] +
m∑d
;

146 i‡(
n
)

147 
ªt
[1] +
m∑d
[0..
n
-1];

151 
ªt
[0] = "-*" + 
tmp
 +Ñet[0];

152 
ªt
 =Ñë[0..1] + ({ 
tmp
 }) +Ñet[2..];

153 
	`°æí
(
ªt
[1]Ë< 
tmp
)

154 
ªt
[1] +
Ωad
;

160 
x
 / 
TOTAL
) {

164 
ªt
[0] = 
tmp
 +Ñet[0];

165 
	`°æí
(
ªt
[1]Ë< 
tmp
)

166 
ªt
[1] = 
Õad
 +Ñet[1];

170 
n
, 
Œ
, 
º
;

171 
ªt
[0] = "|" + 
tmp
 +Ñet[0];

172 i‡((
n
 = 
	`°æí
(
ªt
[1])Ë< 
tmp
) {

173 
Œ
 = (
tmp
 - 
n
 + 1)/2;

174 
º
 = (
tmp
 - 
n
)/2;

175 
Œ
--)

176 
ªt
[1] = 
Õad
 +Ñet[1];

177 i‡(
åaû
)

178 
º
--)

179 
ªt
[1] +
Ωad
;

184 
ªt
[0] = "-" + 
tmp
 +Ñet[0];

185 
	`°æí
(
ªt
[1]Ë< 
tmp
)

186 
ªt
[1] +
Õad
;

189 
ªt
[0] = "-*" + 
tmp
 +Ñet[0];

190 
ªt
 =Ñë[0..1] + ({ 
tmp
 }) +Ñet[2..];

191 
	`°æí
(
ªt
[1]Ë< 
tmp
)

192 
ªt
[1] +
Õad
;

197 
ªt
[0] = "%" +Ñet[0];

198  
ªt
;

199 
	}
}

201 
	$do_ã°s
() {

202 
x
;

203 
mixed
 *
mx
;

204 
°rög
 
f‹m©
, 
shouldbe
;

205 
°rög
 
hmm
;

208 i‡(!(
mx
 = 
	`make_¨g
(
x
++, 1))) ;

210 
f‹m©
 = "$" + 
mx
[0] + "^";

211 
shouldbe
 = "$" + 
mx
[1] + "^";

212 
	`ASSERT2
(
	`•rötf
(
f‹m©
, 
mx
[2..]...Ë=
shouldbe
, shouldbe);

215 
hmm
 = 
	`•rötf
("xxx%#-20.5s\n", "This\nis\na\ntest\nof\nsprintf\ntable\nmode\n");

216 
	`ASSERT2
(
hmm
 == "xxxThisa ofÅabl\n isÅestsprimode\n", hmm);

217 
hmm
 = 
	`•rötf
("xxx%#-'y'20.5s\n", "This\nis\na\ntest\nof\nsprintf\ntable\nmode\n");

218 
	`ASSERT2
(
hmm
 == "xxxThisayyyofyytablyyyy\n isyytestsprimodeyyyy\n", hmm);

220 
hmm
 = 
	`•rötf
("%#-20s\n", "a\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\no\n");

221 
	`ASSERT2
(
hmm
 == "a d g j o\nbÉ h k \nc f iÜ \n", hmm);

222 
	}
}

	@testsuite/single/tests/efuns/sscanf.c

1 
	göhîô
 "/inherit/tests";

3 
	$do_ã°s
() {

4 
°rög
 
s
;

6 
	`ASSERT
(
	`ˇtch
(
	`ssˇnf
("you%", "%s%", 
s
)));

7 
	`ASSERT
(
	`ˇtch
(
	`ssˇnf
("you%", "%su%", 
s
)));

8 
	`ssˇnf
("you%", "%s%%", 
s
);

9 
	`ASSERT
(
s
 == "you");

10 
	`ssˇnf
("you%", "%su%%", 
s
);

11 
	`ASSERT
(
s
 == "yo");

12 
	}
}

	@testsuite/single/tests/efuns/talker.c

1 
	$¸óã
() {

2 #i‚de‡
__NO_ADD_ACTION__


3 
	`íabÀ_comm™ds
();

5 
	}
}

7 
	$ˇtch_ãŒ
(
°rög
 
°r
) {

8 
	}
}

10 
	$£nd
(
°rög
 
°r
, 
mixed
 
x
) {

11 #i‚de‡
__NO_ENVIRONMENT__


12 i‡(
x
)

13 
	`ßy
(
°r
, 
x
);

15 
	`ßy
(
°r
);

17 
	`shout
(
°r
);

19 
	}
}

21 
	$move
(
obje˘
 
ob
) {

22 #i‚de‡
__NO_ENVIRONMENT__


23 
	`move_obje˘
(
ob
);

25 
	}
}

	@testsuite/single/tests/efuns/to_float.c

1 
	göhîô
 "/inherit/tests";

3 
	$do_ã°s
() {

4 
i
 = 5;

5 
f
 = 6.7;

7 
f
 = 
	`to_Êﬂt
(
i
);

8 
	`ASSERT
(
f
 == 5.0);

10 
f
 = 
i
;

11 
	`ASSERT
(
f
 == 5.0);

13 
f
 = 
	`to_Êﬂt
("1.23");

14 
	`ASSERT
(
f
 == 1.23);

16 
f
 = 
	`to_Êﬂt
("ajdfj");

17 
	`ASSERT
(
f
 == 0.00);

18 
	}
}

	@testsuite/single/tests/efuns/to_int.c

1 
	$do_ã°s
() {

2 
i
 = 5;

3 
f
 = 6.7;

5 
i
 = 
	`to_öt
(
f
);

6 
	`ASSERT
(
i
 == 6);

8 
i
 = 
f
;

9 
	`ASSERT
(
i
 == 6);

11 
i
 = 
	`to_öt
("7");

12 
	`ASSERT
(
i
 == 7);

14 
i
 = 
	`to_öt
("ajdfj");

15 
	`ASSERT
(
i
 == 0);

16 
	}
}

	@testsuite/single/tests/efuns/unloaded.c

1 
	$¸óã
() {

2 
	}
}

	@testsuite/single/tests/efuns/users.c

1 
	$do_ã°s
() {

2 
	`ASSERT
(
	`¨øyp
(
	`u£rs
()));

3 i‡(
	`this_∂ayî
())

4 
	`ASSERT
(
	`membî_¨øy
(
	`this_∂ayî
(), 
	`u£rs
()) != -1);

5 
	}
}

	@testsuite/single/tests/efuns/values.c

1 
	$do_ã°s
() {

2 
m≠pög
 
m
 = ([ 1 : 2, 3 : 4, 5 : 6 ]);

3 
mixed
 *
k
 = 
	`vÆues
(
m
);

4 
mixed
 
x
, 
y
;

6 
	`f‹óch
 (
x
, 
y
 
ö
 
m
) {

7 
k
 -({ 
y
 });

9 
	`ASSERT
(
k
 == ({}));

10 
	}
}

	@testsuite/single/tests/operators/range.c

1 
	#ARR
 ({ 1, 2, 3 })

	)

3 
	$do_ã°s
() {

4 
mixed
 
¨r
 = ({ 1, 2, 3 });

5 #i‚de‡
__OLD_RANGE_BEHAVIOR__


6 
	`ASSERT
(
¨r
[0..-1] == ({}));

7 
	`ASSERT
(
ARR
[0..-1] == ({}));

8 
	`ASSERT
(
	`ßme
(
¨r
[0..<1], ({1, 2, 3})));

9 
	`ASSERT
(
	`ßme
(
ARR
[0..<1], ({1, 2, 3})));

10 
	`ASSERT
(
	`ßme
(
¨r
[1..<1], ({2, 3})));

11 
	`ASSERT
(
	`ßme
(
ARR
[1..<1], ({2, 3})));

12 
	`ASSERT
(
	`ßme
(
¨r
[0..<2], ({1, 2})));

13 
	`ASSERT
(
	`ßme
(
ARR
[0..<2], ({1, 2})));

14 
	`ASSERT
(
	`ßme
(
¨r
[1..1], ({ 2 })));

15 
	`ASSERT
(
	`ßme
(
ARR
[1..1], ({ 2 })));

17 
	}
}

	@testsuite/single/void.c

1 
	$dummy
()

3 
	}
}

	@testsuite/test_control.c

	@trees.c

12 
	#SUPPRESS_COMPILER_INLINES


	)

13 
	~"°d.h
"

14 
	~"Õc_ö˛.h
"

15 
	~"compûî.h
"

16 
	~"›codes.h
"

19 
∑r£_node_block_t
 *
	g∑r£_block_li°
 = 0;

20 
∑r£_node_block_t
 *
	g‰ì_block_li°
 = 0;

22 
∑r£_node_t
 *
	g√xt_node
 = 0;

23 
∑r£_node_t
 *
	gœ°_node
 = 0;

25 
	gœ°_¥og_size
 = 1;

29 
	$‰ì_åì
() {

30 
∑r£_node_block_t
 *
cur_block
;

32 i‡(!(
cur_block
 = 
∑r£_block_li°
))

35 
cur_block
->
√xt
) cur_block = cur_block->next;

38 
cur_block
->
√xt
 = 
‰ì_block_li°
;

39 
‰ì_block_li°
 = 
∑r£_block_li°
;

40 
∑r£_block_li°
 = 0;

41 
√xt_node
 = 0;

42 
œ°_node
 = 0;

43 
	}
}

47 
	$ªÀa£_åì
() {

48 
∑r£_node_block_t
 *
cur_block
;

49 
∑r£_node_block_t
 *
√xt_block
;

51 
	`‰ì_åì
();

52 
√xt_block
 = 
‰ì_block_li°
;

53 (
cur_block
 = 
√xt_block
)) {

54 
√xt_block
 = 
cur_block
->
√xt
;

55 
	`FREE
(
cur_block
);

57 
‰ì_block_li°
 = 0;

58 
œ°_¥og_size
 = 1;

59 
	}
}

62 
∑r£_node_t
 *

63 
	$√w_node
() {

64 
∑r£_node_block_t
 *
cur_block
;

67 i‡(
√xt_node
 < 
œ°_node
) {

68 
√xt_node
->
löe
 = 
cuºít_löe_ba£
 + 
cuºít_löe
;

69  
√xt_node
++;

73 i‡((
cur_block
 = 
‰ì_block_li°
)) {

74 
‰ì_block_li°
 = 
cur_block
->
√xt
;

76 
cur_block
 = 
	`ALLOCATE
(
∑r£_node_block_t
, 
TAG_COMPILER
, "new_node");

79 
cur_block
->
√xt
 = 
∑r£_block_li°
;

80 
∑r£_block_li°
 = 
cur_block
;

82 
√xt_node
 = &
cur_block
->
nodes
[0];

83 
œ°_node
 = &
cur_block
->
nodes
[
NODES_PER_BLOCK
];

84 
√xt_node
->
löe
 = 
cuºít_löe_ba£
 + 
cuºít_löe
;

85  
√xt_node
++;

86 
	}
}

92 
∑r£_node_t
 *

93 
	$√w_node_no_löe
() {

94 
∑r£_node_block_t
 *
cur_block
;

97 i‡(
√xt_node
 < 
œ°_node
) {

98 
√xt_node
->
löe
 = 0;

99  
√xt_node
++;

102 i‡((
cur_block
 = 
‰ì_block_li°
)) {

103 
‰ì_block_li°
 = 
cur_block
->
√xt
;

105 
cur_block
 = 
	`ALLOCATE
(
∑r£_node_block_t
, 
TAG_COMPILER
, "new_node");

108 
cur_block
->
√xt
 = 
∑r£_block_li°
;

109 
∑r£_block_li°
 = 
cur_block
;

111 
√xt_node
 = &
cur_block
->
nodes
[0];

112 
œ°_node
 = &
cur_block
->
nodes
[
NODES_PER_BLOCK
];

113 
√xt_node
->
löe
 = 0;

114  
√xt_node
++;

115 
	}
}

118 
∑r£_node_t
 *

119 
make_bønched_node
 
	$P4
(, 
köd
, , 
ty≥
,

120 
∑r£_node_t
 *, 
l
,Ö¨£_node_à*, 
r
) {

121 
∑r£_node_t
 *
ªt
;

123 
ªt
 = 
	`√w_node
();

124 
ªt
->
köd
 = kind;

125 
ªt
->
ty≥
 =Åype;

126 
ªt
->
l
.
ex¥
 =Ü;

127 
ªt
->
r
.
ex¥
 =Ñ;

128  
ªt
;

129 
	}
}

132 
∑r£_node_t
 *

133 
bö¨y_öt_›
 
	$P4
(
∑r£_node_t
 *, 
l
,Ö¨£_node_à*, 
r
,

134 , 
›
, *, 
«me
) {

135 
∑r£_node_t
 *
ªt
;

137 i‡(
exa˘_ty≥s
) {

138 i‡(!
	`IS_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
)) {

139 
buf
[256];

140 *
íd
 = 
	`EndOf
(
buf
);

141 *
p
;

143 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '");

144 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

145 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

146 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
l
->
ty≥
);

147 
p
 = 
	`°Ωut
’, 
íd
, "\"");

148 
	`yyîr‹
(
buf
);

150 i‡(!
	`IS_TYPE
(
r
->
ty≥
,
TYPE_NUMBER
)) {

151 
buf
[256];

152 *
íd
 = 
	`EndOf
(
buf
);

153 *
p
;

155 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '");

156 
p
 = 
	`°Ωut
’, 
íd
, 
«me
);

157 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

158 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
r
->
ty≥
);

159 
p
 = 
	`°Ωut
’, 
íd
, "\"");

160 
	`yyîr‹
(
buf
);

163 i‡(
l
->
köd
 =
NODE_NUMBER
) {

164 i‡(
r
->
köd
 =
NODE_NUMBER
) {

165 
›
) {

166 
F_OR
: 
l
->
v
.
numbî
 |
r
->v.number; ;

167 
F_XOR
: 
l
->
v
.
numbî
 ^
r
->v.number; ;

168 
F_AND
: 
l
->
v
.
numbî
 &
r
->v.number; ;

169 
F_LSH
: 
l
->
v
.
numbî
 <<
r
->v.number; ;

170 
F_RSH
: 
l
->
v
.
numbî
 >>
r
->v.number; ;

171 
F_MOD
:

172 i‡(
r
->
v
.
numbî
 == 0) {

173 
	`yyîr‹
("Modulo by zero constant");

176 
l
->
v
.
numbî
 %
r
->v.number; ;

177 : 
	`Áèl
("Unknown opcode in binary_int_op()\n");

179  
l
;

181 
›
) {

182 
F_OR
:

183 
F_XOR
:

184 
F_AND
:

185 
	`CREATE_BINARY_OP
(
ªt
, 
›
, 
TYPE_NUMBER
, 
r
, 
l
);

186  
ªt
;

189 
	`CREATE_BINARY_OP
(
ªt
, 
›
, 
TYPE_NUMBER
, 
l
, 
r
);

190  
ªt
;

191 
	}
}

193 
∑r£_node_t
 *
make_ønge_node
 
	$P4
(, 
code
, 
∑r£_node_t
 *, 
ex¥
,

194 
∑r£_node_t
 *, 
l
,

195 
∑r£_node_t
 *, 
r
) {

196 
∑r£_node_t
 *
√wnode
;

198 i‡(
r
) {

199 
	`CREATE_TERNARY_OP
(
√wnode
, 
code
, 0, 
l
, 
r
, 
ex¥
);

201 
	`CREATE_BINARY_OP
(
√wnode
, 
code
, 0, 
l
, 
ex¥
);

204 i‡(
exa˘_ty≥s
) {

205 
ex¥
->
ty≥
) {

206 
TYPE_ANY
:

207 
TYPE_STRING
:

208 
TYPE_BUFFER
:

209 
√wnode
->
ty≥
 = 
ex¥
->type;

213 i‡(
ex¥
->
ty≥
 & 
TYPE_MOD_ARRAY
Ë
√wnode
->type =Éxpr->type;

215 
	`ty≥_îr‹
("BadÅy≥ o‡¨gumíàu£d f‹Ñ™ge: ", 
ex¥
->
ty≥
);

216 
√wnode
->
ty≥
 = 
TYPE_ANY
;

220 i‡(!
	`IS_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
))

221 
	`ty≥_îr‹
("BadÅy≥ o‡À· indexÅÿøngê›î©‹", 
l
->
ty≥
);

222 i‡(
r
 && !
	`IS_TYPE
‘->
ty≥
, 
TYPE_NUMBER
))

223 
	`ty≥_îr‹
("BadÅy≥ o‡righàödexÅÿøngê›î©‹", 
r
->
ty≥
);

224 } 
√wnode
->
ty≥
 = 
TYPE_ANY
;

225  
√wnode
;

226 
	}
}

228 
∑r£_node_t
 *
ö£π_p›_vÆue
 
	$P1
(
∑r£_node_t
 *, 
ex¥
) {

229 
∑r£_node_t
 *
ª∂a˚mít
;

231 i‡(!
ex¥
)

233 i‡(
ex¥
->
ty≥
 =
TYPE_NOVALUE
) {

234 
ex¥
->
ty≥
 = 
TYPE_VOID
;

235  
ex¥
;

237 
ex¥
->
köd
) {

238 
NODE_EFUN
:

239 i‡(
ex¥
->
v
.
numbî
 & 
NOVALUE_USED_FLAG
) {

240 
ex¥
->
v
.
numbî
 &~
NOVALUE_USED_FLAG
;

241  
ex¥
;

244 
NODE_TWO_VALUES
:

259 i‡((
ex¥
->
r
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr)))

260  
ex¥
;

261  
ex¥
->
l
.expr;

262 
NODE_IF
:

267 
ex¥
->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->l.expr);

268 
ex¥
->
r
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr);

270 i‡(!
ex¥
->
l
.ex¥ && !ex¥->
r
.expr) {

272  
	`ö£π_p›_vÆue
(
ex¥
->
v
.expr);

274  
ex¥
;

275 
NODE_TERNARY_OP
:

276 
ex¥
->
r
.ex¥->
v
.
numbî
) {

277 
F_NN_RANGE
: 
F_RN_RANGE
: 
F_RR_RANGE
: 
F_NR_RANGE
:

278 
ex¥
->
köd
 = 
NODE_TWO_VALUES
;

279 
ex¥
->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->l.expr);

280 
ex¥
->
r
.ex¥->
köd
 = 
NODE_TWO_VALUES
;

281 
ex¥
->
r
.ex¥->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr->l.expr);

282 
ex¥
->
r
.ex¥->r.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr->r.expr);

284 i‡(!
ex¥
->
l
.expr) {

285 
ex¥
 =Éx¥->
r
.expr;

286 i‡(!
ex¥
->
l
.expr)

287  
ex¥
->
r
.expr;

288 i‡(!
ex¥
->
r
.expr)

289  
ex¥
->
l
.expr;

291 i‡(!
ex¥
->
r
.ex¥->
l
.expr) {

292 
ex¥
->
r
.expr =Éxpr->r.expr->r.expr;

293 i‡(!
ex¥
->
r
.expr)

294  
ex¥
->
l
.expr;

296 i‡(!
ex¥
->
r
.expr->r.expr)

297 
ex¥
->
r
.ex¥ =Éx¥->r.ex¥->
l
.expr;

300  
ex¥
;

304 
NODE_CALL
:

305 
NODE_BINARY_OP
:

306 
NODE_UNARY_OP_1
:

307 
NODE_UNARY_OP
:

308 
NODE_OPCODE_1
:

309 
ex¥
->
v
.
numbî
) {

310 
F_AGGREGATE_ASSOC
:

313  
	`throw_away_m≠pög
(
ex¥
);

314 
F_AGGREGATE
:

315  
	`throw_away_ˇŒ
(
ex¥
);

316 
F_PRE_INC
: 
F_POST_INC
:

317 
ex¥
->
v
.
numbî
 = 
F_INC
;

318  
ex¥
;

319 
F_PRE_DEC
: 
F_POST_DEC
:

320 
ex¥
->
v
.
numbî
 = 
F_DEC
;

321  
ex¥
;

322 
F_NOT
: 
F_COMPL
: 
F_NEGATE
:

323 
ex¥
 = 
	`ö£π_p›_vÆue
”x¥->
r
.expr);

324  
ex¥
;

325 
F_MEMBER
:

326 
ex¥
 = 
	`ö£π_p›_vÆue
”x¥->
r
.expr);

327  
ex¥
;

328 
F_LOCAL
: 
F_GLOBAL
: 
F_REF
:

330 
F_EQ
: 
F_NE
: 
F_GT
: 
F_GE
: 
F_LT
: 
F_LE
:

331 
F_OR
: 
F_XOR
: 
F_AND
: 
F_LSH
: 
F_RSH
:

332 
F_ADD
: 
F_SUBTRACT
: 
F_MULTIPLY
: 
F_DIVIDE
:

333 
F_MOD
: 
F_RE_RANGE
: 
F_NE_RANGE
: 
F_RINDEX
:

334 
F_INDEX
:

335 i‡((
ex¥
->
l
.ex¥ = 
	`ö£π_p›_vÆue
(expr->l.expr))) {

336 i‡((
ex¥
->
r
.ex¥ = 
	`ö£π_p›_vÆue
(expr->r.expr))) {

337 
ex¥
->
köd
 = 
NODE_TWO_VALUES
;

338  
ex¥
;

340  
ex¥
->
l
.expr;

342  
	`ö£π_p›_vÆue
(
ex¥
->
r
.expr);

344 
F_ASSIGN
:

345 i‡(
	`IS_NODE
(
ex¥
->
r
.ex¥, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

346 
tmp
 = 
ex¥
->
r
.ex¥->
l
.
numbî
;

347 
ex¥
->
köd
 = 
NODE_UNARY_OP_1
;

348 
ex¥
->
r
.ex¥ =Éx¥->
l
.expr;

349 
ex¥
->
v
.
numbî
 = 
F_VOID_ASSIGN_LOCAL
;

350 
ex¥
->
l
.
numbî
 = 
tmp
;

351 } 
ex¥
->
v
.
numbî
 = 
F_VOID_ASSIGN
;

352  
ex¥
;

353 
F_ADD_EQ
:

354 
ex¥
->
v
.
numbî
 = 
F_VOID_ADD_EQ
;

355  
ex¥
;

358 
NODE_PARAMETER
:

359 
NODE_ANON_FUNC
:

360 
NODE_FUNCTION_CONSTRUCTOR
:

362 
NODE_NUMBER
:

363 
NODE_STRING
:

364 
NODE_REAL
:

367 
	`CREATE_UNARY_OP
(
ª∂a˚mít
, 
F_POP_VALUE
, 0, 
ex¥
);

368  
ª∂a˚mít
;

369 
	}
}

371 
∑r£_node_t
 *
p›_vÆue
 
	$P1
(
∑r£_node_t
 *, 
≤
) {

372 i‡(
≤
) {

373 
∑r£_node_t
 *
ªt
 = 
	`ö£π_p›_vÆue
(
≤
);

375 i‡(!
ªt
) {

376 i‡(
≤
->
köd
 =
NODE_BINARY_OP
 &&Ön->
v
.
numbî
 >
F_EQ
 &&

377 
≤
->
v
.
numbî
 <
F_GT
)

378 
	`yyw¨n
("Value of conditionalÉxpression is unused");

380 
	`yyw¨n
("Expression hasÇo sideÉffects,ándÅhe value is unused");

382  
ªt
;

386 
	}
}

388 
is_boﬁón
 
	$P1
(
∑r£_node_t
 *, 
≤
) {

389 
≤
->
köd
) {

390 
NODE_UNARY_OP
:

391 i‡(
≤
->
v
.
numbî
 =
F_NOT
)

394 
NODE_BINARY_OP
:

395 i‡(
≤
->
v
.
numbî
 >
F_EQ
 &&Ön->v.numbî <
F_GT
)

398 
NODE_LAND_LOR
:

399 
NODE_BRANCH_LINK
:

403 
	}
}

405 
∑r£_node_t
 *
›timize_lo›_ã°
 
	$P1
(
∑r£_node_t
 *, 
≤
) {

406 
∑r£_node_t
 *
ªt
;

408 i‡(!
≤
)  0;

410 i‡(
	`IS_NODE
(
≤
, 
NODE_BINARY_OP
, 
F_LT
) &&

411 
	`IS_NODE
(
≤
->
l
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL
)) {

412 i‡(
	`IS_NODE
(
≤
->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL
)) {

413 
	`CREATE_OPCODE_2
(
ªt
, 
F_LOOP_COND_LOCAL
, 0,

414 
≤
->
l
.
ex¥
->l.
numbî
,

415 
≤
->
r
.
ex¥
->
l
.
numbî
);

416 } i‡(
≤
->
r
.
ex¥
->
köd
 =
NODE_NUMBER
) {

417 
	`CREATE_OPCODE_2
(
ªt
, 
F_LOOP_COND_NUMBER
, 0,

418 
≤
->
l
.
ex¥
->l.
numbî
,

419 
≤
->
r
.
ex¥
->
v
.
numbî
);

421 
ªt
 = 
≤
;

422 } i‡(
	`IS_NODE
(
≤
, 
NODE_UNARY_OP
, 
F_POST_DEC
) &&

423 
	`IS_NODE
(
≤
->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

424 
lv¨
 = 
≤
->
r
.
ex¥
->
l
.
numbî
;

425 
	`CREATE_OPCODE_1
(
ªt
, 
F_WHILE_DEC
, 0, 
lv¨
);

427 
ªt
 = 
≤
;

429  
ªt
;

430 
	}
}

	@trees.h

5 #i‚de‡
_TREES_H


6 
	#_TREES_H


	)

8 
	#NODES_PER_BLOCK
 256

	)

10 
	enode_ty≥
 {

11 
	mNODE_RETURN
, 
	mNODE_TWO_VALUES
, 
	mNODE_OPCODE
, 
	mNODE_OPCODE_1
, 
	mNODE_OPCODE_2
,

12 
	mNODE_UNARY_OP
, 
	mNODE_UNARY_OP_1
, 
	mNODE_BINARY_OP
, 
	mNODE_BINARY_OP_1
,

13 
	mNODE_TERNARY_OP
, 
	mNODE_TERNARY_OP_1
, 
	mNODE_CONTROL_JUMP
, 
	mNODE_LOOP
,

14 
	mNODE_CALL
, 
	mNODE_CALL_1
, 
	mNODE_CALL_2
, 
	mNODE_LAND_LOR
, 
	mNODE_FOREACH
,

15 
	mNODE_LVALUE_EFUN
, 
	mNODE_SWITCH_RANGES
, 
	mNODE_SWITCH_STRINGS
,

16 
	mNODE_SWITCH_DIRECT
, 
	mNODE_SWITCH_NUMBERS
, 
	mNODE_CASE_NUMBER
,

17 
	mNODE_CASE_STRING
, 
	mNODE_DEFAULT
, 
	mNODE_IF
, 
	mNODE_BRANCH_LINK
, 
	mNODE_PARAMETER
,

18 
	mNODE_PARAMETER_LVALUE
, 
	mNODE_EFUN
, 
	mNODE_ANON_FUNC
, 
	mNODE_REAL
, 
	mNODE_NUMBER
,

19 
	mNODE_STRING
, 
	mNODE_FUNCTION_CONSTRUCTOR
, 
	mNODE_CATCH
, 
	mNODE_TIME_EXPRESSION
,

20 
	mNODE_FUNCTION


23 
	ec⁄åﬁ_jump_ty≥
 {

24 
	mCJ_BREAK_SWITCH
 = 2, 
	mCJ_BREAK
 = 0, 
	mCJ_CONTINUE
 = 1

27 
	u∑r£_vÆue
 {

28 
	mnumbî
;

29 
	mªÆ
;

30 
∑r£_node_s
 *
	mex¥
;

33 
	s∑r£_node_s
 {

34 
	mköd
;

35 
	mlöe
;

36 
	mty≥
;

37 
∑r£_vÆue
 
	mv
, 
	ml
, 
	mr
;

38 } 
	t∑r£_node_t
;

40 
	s∑r£_node_block_s
 {

41 
∑r£_node_block_s
 *
	m√xt
;

42 
∑r£_node_t
 
	mnodes
[
NODES_PER_BLOCK
];

43 } 
	t∑r£_node_block_t
;

45 
	#IS_NODE
(
vn
, 
¡
, 
›
Ë((vn)->
köd
 =¡ && (vn)->
v
.
numbî
 =›)

	)

47 
	#CREATE_TERNARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
, 
z
Ë
	`SAFE
(\

48 (
vn
Ë
	`√w_node
();\

49 (
vn
)->
köd
 = 
NODE_TERNARY_OP
;\

50 
	`INT_CREATE_TERNARY_OP
(
vn
, 
›
, 
t
,\

51 
x
, 
y
, 
z
);\

52 )

	)

53 
	#INT_CREATE_TERNARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
, 
z
Ë
	`SAFE
(\

54 (
vn
)->
l
.
ex¥
 = (
x
);\

55 (
vn
)->
ty≥
 = 
t
;\

56 
	`CREATE_BINARY_OP
((
vn
)->
r
.
ex¥
, 
›
, 
t
, 
y
, 
z
);\

57 )

	)

58 
	#CREATE_BINARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
Ë
	`SAFE
(\

59 (
vn
Ë
	`√w_node
();\

60 (
vn
)->
köd
 = 
NODE_BINARY_OP
;\

61 
	`INT_CREATE_BINARY_OP
(
vn
, 
›
,\

62 
t
, 
x
, 
y
);\

63 )

	)

64 
	#INT_CREATE_BINARY_OP
(
vn
, 
›
, 
t
, 
x
, 
y
Ë
	`SAFE
(\

65 
	`INT_CREATE_UNARY_OP
(
vn
, 
›
,\

66 
t
, 
y
);\

67 (
vn
)->
l
.
ex¥
 = 
x
;\

68 )

	)

69 
	#CREATE_UNARY_OP
(
vn
, 
›
, 
t
, 
x
Ë
	`SAFE
(\

70 (
vn
Ë
	`√w_node
();\

71 (
vn
)->
köd
 = 
NODE_UNARY_OP
;\

72 
	`INT_CREATE_UNARY_OP
(
vn
, 
›
, 
t
, 
x
);\

73 )

	)

74 
	#INT_CREATE_UNARY_OP
(
vn
, 
›
, 
t
, 
x
Ë
	`SAFE
(\

75 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

76 (
vn
)->
r
.
ex¥
 = 
x
;\

77 )

	)

78 
	#CREATE_OPCODE
(
vn
, 
›
, 
t
Ë
	`SAFE
(\

79 (
vn
Ë
	`√w_node
();\

80 (
vn
)->
köd
 = 
NODE_OPCODE
;\

81 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

82 )

	)

83 
	#INT_CREATE_OPCODE
(
vn
, 
›
, 
t
Ë
	`SAFE
(\

84 (
vn
)->
v
.
numbî
 = 
›
;\

85 (
vn
)->
ty≥
 = 
t
;\

86 )

	)

88 
	#CREATE_OPCODE_1
(
vn
, 
›
, 
t
, 
p
Ë
	`SAFE
(\

89 (
vn
Ë
	`√w_node
();\

90 (
vn
)->
köd
 = 
NODE_OPCODE_1
;\

91 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

92 (
vn
)->
l
.
numbî
 = 
p
;\

93 )

	)

94 
	#CREATE_OPCODE_2
(
vn
, 
›
, 
t
, 
p1
, 
p2
Ë
	`SAFE
(\

95 (
vn
Ë
	`√w_node
();\

96 (
vn
)->
köd
 = 
NODE_OPCODE_2
;\

97 
	`INT_CREATE_OPCODE
(
vn
, 
›
, 
t
);\

98 (
vn
)->
l
.
numbî
 = 
p1
;\

99 (
vn
)->
r
.
numbî
 = 
p2
;\

100 )

	)

101 
	#CREATE_UNARY_OP_1
(
vn
, 
›
, 
t
, 
x
, 
p
Ë
	`SAFE
(\

102 (
vn
Ë
	`√w_node
();\

103 (
vn
)->
köd
 = 
NODE_UNARY_OP_1
;\

104 
	`INT_CREATE_UNARY_OP
(
vn
,\

105 
›
, 
t
, 
x
);\

106 (
vn
)->
l
.
numbî
 = 
p
;\

107 )

	)

108 
	#CREATE_BINARY_OP_1
(
vn
, 
›
, 
t
, 
x
, 
y
, 
p
Ë
	`SAFE
(\

109 (
vn
Ë
	`√w_node
();\

110 (
vn
)->
köd
 = 
NODE_BINARY_OP_1
;\

111 
	`INT_CREATE_BINARY_OP
(
vn
, 
›
,\

112 
t
, 
x
, 
y
);\

113 (
vn
)->
ty≥
 = 
p
;\

114 )

	)

115 
	#CREATE_TERNARY_OP_1
(
vn
, 
›
, 
t
, 
x
, 
y
, 
z
, 
p
Ë
	`SAFE
(\

116 (
vn
Ë
	`√w_node
();\

117 (
vn
)->
köd
 = 
NODE_TERNARY_OP_1
;\

118 
	`INT_CREATE_TERNARY_OP
(
vn
, 
›
, 
t
,\

119 
x
, 
y
, 
z
);\

120 (
vn
)->
r
.
ex¥
->
ty≥
 = 
p
;\

121 )

	)

122 
	#CREATE_RETURN
(
vn
, 
vÆ
Ë
	`SAFE
(\

123 (
vn
Ë
	`√w_node_no_löe
();\

124 (
vn
)->
köd
 = 
NODE_RETURN
;\

125 (
vn
)->
r
.
ex¥
 = 
vÆ
;\

126 )

	)

127 
	#CREATE_LAND_LOR
(
vn
, 
›
, 
x
, 
y
Ë
	`SAFE
(\

128 (
vn
Ë
	`√w_node
();\

129 (
vn
)->
köd
 = 
NODE_LAND_LOR
;\

130 (
vn
)->
v
.
numbî
 = 
›
;\

131 (
vn
)->
l
.
ex¥
 = 
x
;\

132 (
vn
)->
r
.
ex¥
 = 
y
;\

133 (
vn
)->
ty≥
 = ((
x
->ty≥ =
y
->type)\

134 ? 
x
->
ty≥
 : 
TYPE_ANY
);\

135 )

	)

136 
	#CREATE_CALL
(
vn
, 
›
, 
t
, 
ñ
Ë
	`SAFE
(\

137 (
vn
Ë
ñ
;\

138 (
vn
)->
köd
 = 
NODE_CALL
;\

139 (
vn
)->
l
.
numbî
 = (vn)->
v
.number;\

140 (
vn
)->
v
.
numbî
 = 
›
;\

141 (
vn
)->
ty≥
 = 
t
;\

142 )

	)

143 
	#CREATE_STATEMENTS
(
vn
, 
 
, 
∫
Ë
	`SAFE
(\

144 (
vn
Ë
	`√w_node_no_löe
();\

145 (
vn
)->
köd
 = 
NODE_TWO_VALUES
;\

146 (
vn
)->
l
.
ex¥
 = 
 
;\

147 (
vn
)->
r
.
ex¥
 = 
∫
;\

148 )

	)

149 
	#CREATE_TWO_VALUES
(
vn
, 
t
, 
 
, 
∫
Ë
	`SAFE
(\

150 
	`CREATE_STATEMENTS
(
vn
, 
 
, 
∫
);\

151 (
vn
)->
ty≥
 = 
t
;\

152 )

	)

153 
	#CREATE_CONTROL_JUMP
(
vn
, 
›
Ë
	`SAFE
(\

154 (
vn
Ë
	`√w_node_no_löe
();\

155 (
vn
)->
köd
 = 
NODE_CONTROL_JUMP
;\

156 (
vn
)->
v
.
numbî
 = 
›
;\

157 )

	)

158 
	#CREATE_PARAMETER
(
vn
, 
t
, 
p
Ë
	`SAFE
(\

159 (
vn
Ë
	`√w_node_no_löe
();\

160 (
vn
)->
köd
 = 
NODE_PARAMETER
;\

161 (
vn
)->
ty≥
 = 
t
;\

162 (
vn
)->
v
.
numbî
 = 
p
;\

163 )

	)

164 
	#CREATE_IF
(
vn
, 
c
, 
s
, 
e
Ë
	`SAFE
(\

165 (
vn
Ë
	`√w_node_no_löe
();\

166 (
vn
)->
köd
 = 
NODE_IF
;\

167 (
vn
)->
v
.
ex¥
 = 
c
;\

168 (
vn
)->
l
.
ex¥
 = 
s
;\

169 (
vn
)->
r
.
ex¥
 = (
e
);\

170 )

	)

172 
	#CREATE_IGNORE
(
vn
, 
c
,
s
,
e
Ë
	`SAFE
(\

173 (
vn
Ë
	`√w_node_no_löe
();\

174 (
vn
)->
köd
 = 
NODE_IGNORE
;\

175 (
vn
)->
v
.
ex¥
 = 
c
;\

176 (
vn
)->
l
.
ex¥
 = 
s
;\

177 (
vn
)->
r
.
ex¥
 = (
e
);\

178 )

	)

180 
	#CREATE_LOOP
(
vn
, 
tf
, 
b
, 
i
, 
t
Ë
	`SAFE
(\

181 (
vn
Ë
	`√w_node_no_löe
();\

182 (
vn
)->
köd
 = 
NODE_LOOP
;\

183 (
vn
)->
ty≥
 = 
tf
;\

184 (
vn
)->
v
.
ex¥
 = 
b
;\

185 (
vn
)->
l
.
ex¥
 = 
i
;\

186 (
vn
)->
r
.
ex¥
 = 
t
;\

187 )

	)

188 
	#CREATE_LVALUE_EFUN
(
vn
, 
t
, 
lvl
Ë
	`SAFE
(\

189 (
vn
Ë
	`√w_node
();\

190 (
vn
)->
köd
 = 
NODE_LVALUE_EFUN
;\

191 (
vn
)->
r
.
ex¥
 = 
lvl
;\

192 (
vn
)->
ty≥
 = 
t
;\

193 )

	)

194 
	#CREATE_FOREACH
(
vn
, 
 
, 
∫
Ë
	`SAFE
(\

195 (
vn
Ë
	`√w_node
();\

196 (
vn
)->
köd
 = 
NODE_FOREACH
;\

197 (
vn
)->
l
.
ex¥
 = 
 
;\

198 (
vn
)->
r
.
ex¥
 = 
∫
;\

199 )

	)

200 
	#CREATE_ERROR
(
vn
Ë
	`SAFE
(\

201 (
vn
Ë
	`√w_node_no_löe
();\

202 (
vn
)->
köd
 = 
NODE_NUMBER
;\

203 (
vn
)->
ty≥
 = 
TYPE_ANY
;\

204 )

	)

205 
	#CREATE_REAL
(
vn
, 
vÆ
Ë
	`SAFE
(\

206 (
vn
Ë
	`√w_node_no_löe
();\

207 (
vn
)->
köd
 = 
NODE_REAL
;\

208 (
vn
)->
ty≥
 = 
TYPE_REAL
;\

209 (
vn
)->
v
.
ªÆ
 = 
vÆ
;\

210 )

	)

211 
	#CREATE_NUMBER
(
vn
, 
vÆ
Ë
	`SAFE
(\

212 (
vn
Ë
	`√w_node_no_löe
();\

213 (
vn
)->
köd
 = 
NODE_NUMBER
;\

214 (
vn
)->
ty≥
 = (
vÆ
 ? 
TYPE_NUMBER
 : 
TYPE_ANY
);\

215 (
vn
)->
v
.
numbî
 = 
vÆ
;\

216 )

	)

217 
	#CREATE_STRING
(
vn
, 
vÆ
Ë
	`SAFE
(\

218 (
vn
Ë
	`√w_node_no_löe
();\

219 (
vn
)->
köd
 = 
NODE_STRING
;\

220 (
vn
)->
ty≥
 = 
TYPE_STRING
;\

221 (
vn
)->
v
.
numbî
 = 
	`°‹e_¥og_°rög
(
vÆ
);\

222 )

	)

223 
	#CREATE_EXPR_LIST
(
vn
, 
≤
Ë
	`SAFE
(\

224 (
vn
Ë
	`√w_node
();\

225 (
vn
)->
v
.
numbî
 = (
≤
 ? ((
∑r£_node_t
 *Ìn)->
köd
 : 0);\

226 (
vn
)->
l
.
ex¥
 = (
≤
 ? ((
∑r£_node_t
 *)pn)->l.expr : (vn));\

227 (
vn
)->
r
.
ex¥
 = 
≤
;\

228 )

	)

229 
	#CREATE_EXPR_NODE
(
vn
, 
≤
, 
f
Ë
	`SAFE
(\

230 (
vn
Ë
	`√w_node_no_löe
();\

231 (
vn
)->
v
.
ex¥
 = 
≤
;\

232 (
vn
)->
l
.
ex¥
 = vn;\

233 (
vn
)->
r
.
ex¥
 = 0;\

234 (
vn
)->
ty≥
 = 
f
;\

235 )

	)

236 
	#CREATE_CATCH
(
vn
, 
≤
Ë
	`SAFE
(\

237 (
vn
Ë
	`√w_node
();\

238 (
vn
)->
köd
 = 
NODE_CATCH
;\

239 (
vn
)->
ty≥
 = 
TYPE_ANY
;\

240 (
vn
)->
r
.
ex¥
 = 
≤
;\

241 )

	)

242 
	#CREATE_TIME_EXPRESSION
(
vn
, 
≤
Ë
	`SAFE
(\

243 (
vn
Ë
	`√w_node
();\

244 (
vn
)->
köd
 = 
NODE_TIME_EXPRESSION
;\

245 (
vn
)->
ty≥
 = 
TYPE_ANY
;\

246 (
vn
)->
r
.
ex¥
 = 
≤
;\

247 )

	)

249 
	#NODE_NO_LINE
(
x
,
y
Ë
	`SAFE
(\

250 (
x
Ë
	`√w_node_no_löe
();\

251 (
x
)->
köd
 = 
y
;\

252 )

	)

255 
‰ì_åì
 
PROT
(());

256 
ªÀa£_åì
 
PROT
(());

257 
lock_ex¥essi⁄s
 
PROT
(());

258 
u∆ock_ex¥essi⁄s
 
PROT
(());

260 
∑r£_node_t
 *
√w_node
 
PROT
(());

261 
∑r£_node_t
 *
√w_node_no_löe
 
PROT
(());

262 
∑r£_node_t
 *
make_bønched_node
 
PROT
((, ,

263 
∑r£_node_t
 *,Öarse_node_t *));

265 
∑r£_node_t
 *
bö¨y_öt_›
 
PROT
((parse_node_t *,Öarse_node_t *,

267 
∑r£_node_t
 *
make_ønge_node
 
PROT
((,Öarse_node_t *,

268 
∑r£_node_t
 *,

269 
∑r£_node_t
 *));

270 
∑r£_node_t
 *
ö£π_p›_vÆue
 
PROT
((parse_node_t *));

271 
∑r£_node_t
 *
p›_vÆue
 
PROT
((parse_node_t *));

272 
∑r£_node_t
 *
›timize_lo›_ã°
 
PROT
((parse_node_t *));

273 
is_boﬁón
 
PROT
((
∑r£_node_t
 *));

	@ualarm.c

1 
	~"°d.h
"

2 #i‚de‡
HAS_UALARM


36 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

37 
	gsccsid
[] = "@(#)ualarm.c 5.5 (Berkeley) 2/23/91";

40 
	#USPS
 1000000

	)

42 
uÆ¨m
 
PROT
((, ));

49 
uÆ¨m
 
	$P2
(, 
u£cs
, , 
ªlﬂd
) {

50 
ôimîvÆ
 
√w
, 
ﬁd
;

52 
√w
.
ô_öãrvÆ
.
tv_u£c
 = 
ªlﬂd
 % 
USPS
;

53 
√w
.
ô_öãrvÆ
.
tv_£c
 = 
ªlﬂd
 / 
USPS
;

55 
√w
.
ô_vÆue
.
tv_u£c
 = 
u£cs
 % 
USPS
;

56 
√w
.
ô_vÆue
.
tv_£c
 = 
u£cs
 / 
USPS
;

58 i‡(
	`£tôimî
(
ITIMER_REAL
, &
√w
, &
ﬁd
) == 0)

59  
ﬁd
.
ô_vÆue
.
tv_£c
 * 
USPS
 + old.ô_vÆue.
tv_u£c
;

62 
	}
}

	@windows/configure.h

1 
	#INCL_STDLIB_H


	)

2 
	#INCL_TIME_H


	)

3 
	#INCL_FCNTL_H


	)

4 
	#INCL_DOS_H


	)

5 
	#INCL_SYS_STAT_H


	)

6 
	#INCL_LIMITS_H


	)

7 
	#USE_STRUCT_DIRENT


	)

8 
	#INCL_STDARG_H


	)

9 
	#HAS_MEMMOVE


	)

10 
	#RAND


	)

11 
	#HAS_STRERROR


	)

12 
	#HAS_GETCWD


	)

14 
	#SIZEOF_INT
 4

	)

15 
	#SIZEOF_PTR
 4

	)

16 
	#SIZEOF_SHORT
 2

	)

17 
	#SIZEOF_FLOAT
 4

	)

	@wrappedmalloc.c

6 
	#IN_MALLOC_WRAPPER


	)

7 
	#NO_OPCODES


	)

8 
	~"°d.h
"

9 
	~"my_mÆloc.h
"

10 
	~"Õc_ö˛.h
"

11 
	~"comm.h
"

13 
	s°©s_s
 {

14 
	m‰ì_ˇŒs
, 
	mÆloc_ˇŒs
, 
	mªÆloc_ˇŒs
;

15 } 
	t°©s_t
;

17 
°©s_t
 
	g°©s
;

19 
	$wøµedmÆloc_öô
()

21 
°©s
.
‰ì_ˇŒs
 = 0;

22 
°©s
.
Æloc_ˇŒs
 = 0;

23 
°©s
.
ªÆloc_ˇŒs
 = 0;

24 
	}
}

26 
INLINE
 *
wøµedªÆloc
 
	$P2
(*, 
±r
, , 
size
)

28 
°©s
.
ªÆloc_ˇŒs
++;

29  (*Ë
	`REALLOC
(
±r
, 
size
);

30 
	}
}

32 
INLINE
 *
wøµedmÆloc
 
	$P1
(, 
size
)

34 
°©s
.
Æloc_ˇŒs
++;

35  (*Ë
	`MALLOC
(
size
);

36 
	}
}

38 
INLINE
 *
wøµedˇŒoc
 
	$P2
(, 
nôems
, , 
size
)

40 
°©s
.
Æloc_ˇŒs
++;

41  (*Ë
	`CALLOC
(
nôems
, 
size
);

42 
	}
}

44 
INLINE
 
wøµed‰ì
 
	$P1
(*, 
±r
)

46 
°©s
.
‰ì_ˇŒs
++;

47 
	`FREE
(
±r
);

48 
	}
}

50 
dump_mÆloc_d©a
 
	$P1
(
outbuf„r_t
 *, 
ob
)

52 
	`outbuf_add
(
ob
, "using wrapped malloc:\n\n");

53 
	`outbuf_addv
(
ob
, "#Ælo¯ˇŒs: %10lu\n", 
°©s
.
Æloc_ˇŒs
);

54 
	`outbuf_addv
(
ob
, "#‰ì cÆls: %10lu\n", 
°©s
.
‰ì_ˇŒs
);

55 
	`outbuf_addv
(
ob
, "#alloc - #free: %10lu\n",

56 
°©s
.
Æloc_ˇŒs
 - sèts.
‰ì_ˇŒs
);

57 
	`outbuf_addv
(
ob
, "#ªÆlo¯ˇŒs: %10lu\n", 
°©s
.
ªÆloc_ˇŒs
);

58 
	}
}

	@wrappedmalloc.h

1 #i‚de‡
WRAPPED_MALLOC_H


2 
	#WRAPPED_MALLOC_H


	)

3 #ifde‡
WRAPPEDMALLOC


4 *
wøµedmÆloc
 
PROT
(());

5 *
wøµedªÆloc
 
PROT
((*, ));

6 *
wøµedˇŒoc
 
PROT
((, ));

7 
wøµed‰ì
 
PROT
((*));

9 
wøµedmÆloc_öô
 
PROT
(());

10 
dump_mÆloc_d©a
 
PROT
((
outbuf„r_t
 *));

	@y.tab.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "3.0.2"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

68 
	~"°d.h
"

69 
	~"compûî.h
"

70 
	~"Àx.h
"

71 
	~"s¸©ch∑d.h
"

73 
	~"Õc_ö˛.h
"

74 
	~"simul_efun.h
"

75 
	~"gíî©e.h
"

76 
	~"ma°î.h
"

79 #ifde‡
WIN32


80 
	#MSDOS


	)

96 
	gc⁄ãxt
;

97 
	gnum_ªfs
;

102 
yy∑r£
 
PROT
(());

107 #i‚de‡
YY_NULLPTR


108 #i‡
deföed
 
__˝lu•lus
 && 201103L <= __cplusplus

109 
	#YY_NULLPTR
 
nuŒ±r


	)

111 
	#YY_NULLPTR
 0

	)

116 #ifde‡
YYERROR_VERBOSE


117 #unde‡
YYERROR_VERBOSE


118 
	#YYERROR_VERBOSE
 1

	)

120 
	#YYERROR_VERBOSE
 0

	)

125 #i‚de‡
YY_YY_Y_TAB_H_INCLUDED


126 
	#YY_YY_Y_TAB_H_INCLUDED


	)

128 #i‚de‡
YYDEBUG


129 
	#YYDEBUG
 0

	)

131 #i‡
YYDEBUG


132 
yydebug
;

136 #i‚de‡
YYTOKENTYPE


137 
	#YYTOKENTYPE


	)

138 
	eyytokíty≥


140 
	mL_STRING
 = 258,

141 
	mL_NUMBER
 = 259,

142 
	mL_REAL
 = 260,

143 
	mL_BASIC_TYPE
 = 261,

144 
	mL_TYPE_MODIFIER
 = 262,

145 
	mL_DEFINED_NAME
 = 263,

146 
	mL_IDENTIFIER
 = 264,

147 
	mL_EFUN
 = 265,

148 
	mL_INC
 = 266,

149 
	mL_DEC
 = 267,

150 
	mL_ASSIGN
 = 268,

151 
	mL_LAND
 = 269,

152 
	mL_LOR
 = 270,

153 
	mL_LSH
 = 271,

154 
	mL_RSH
 = 272,

155 
	mL_ORDER
 = 273,

156 
	mL_NOT
 = 274,

157 
	mL_IF
 = 275,

158 
	mL_ELSE
 = 276,

159 
	mL_SWITCH
 = 277,

160 
	mL_CASE
 = 278,

161 
	mL_DEFAULT
 = 279,

162 
	mL_RANGE
 = 280,

163 
	mL_DOT_DOT_DOT
 = 281,

164 
	mL_WHILE
 = 282,

165 
	mL_DO
 = 283,

166 
	mL_FOR
 = 284,

167 
	mL_FOREACH
 = 285,

168 
	mL_IN
 = 286,

169 
	mL_BREAK
 = 287,

170 
	mL_CONTINUE
 = 288,

171 
	mL_RETURN
 = 289,

172 
	mL_ARROW
 = 290,

173 
	mL_INHERIT
 = 291,

174 
	mL_COLON_COLON
 = 292,

175 
	mL_ARRAY_OPEN
 = 293,

176 
	mL_MAPPING_OPEN
 = 294,

177 
	mL_FUNCTION_OPEN
 = 295,

178 
	mL_NEW_FUNCTION_OPEN
 = 296,

179 
	mL_SSCANF
 = 297,

180 
	mL_CATCH
 = 298,

181 
	mL_ARRAY
 = 299,

182 
	mL_REF
 = 300,

183 
	mL_PARSE_COMMAND
 = 301,

184 
	mL_TIME_EXPRESSION
 = 302,

185 
	mL_CLASS
 = 303,

186 
	mL_NEW
 = 304,

187 
	mL_PARAMETER
 = 305,

188 
	mLOWER_THAN_ELSE
 = 306,

189 
	mL_EQ
 = 307,

190 
	mL_NE
 = 308

194 
	#L_STRING
 258

	)

195 
	#L_NUMBER
 259

	)

196 
	#L_REAL
 260

	)

197 
	#L_BASIC_TYPE
 261

	)

198 
	#L_TYPE_MODIFIER
 262

	)

199 
	#L_DEFINED_NAME
 263

	)

200 
	#L_IDENTIFIER
 264

	)

201 
	#L_EFUN
 265

	)

202 
	#L_INC
 266

	)

203 
	#L_DEC
 267

	)

204 
	#L_ASSIGN
 268

	)

205 
	#L_LAND
 269

	)

206 
	#L_LOR
 270

	)

207 
	#L_LSH
 271

	)

208 
	#L_RSH
 272

	)

209 
	#L_ORDER
 273

	)

210 
	#L_NOT
 274

	)

211 
	#L_IF
 275

	)

212 
	#L_ELSE
 276

	)

213 
	#L_SWITCH
 277

	)

214 
	#L_CASE
 278

	)

215 
	#L_DEFAULT
 279

	)

216 
	#L_RANGE
 280

	)

217 
	#L_DOT_DOT_DOT
 281

	)

218 
	#L_WHILE
 282

	)

219 
	#L_DO
 283

	)

220 
	#L_FOR
 284

	)

221 
	#L_FOREACH
 285

	)

222 
	#L_IN
 286

	)

223 
	#L_BREAK
 287

	)

224 
	#L_CONTINUE
 288

	)

225 
	#L_RETURN
 289

	)

226 
	#L_ARROW
 290

	)

227 
	#L_INHERIT
 291

	)

228 
	#L_COLON_COLON
 292

	)

229 
	#L_ARRAY_OPEN
 293

	)

230 
	#L_MAPPING_OPEN
 294

	)

231 
	#L_FUNCTION_OPEN
 295

	)

232 
	#L_NEW_FUNCTION_OPEN
 296

	)

233 
	#L_SSCANF
 297

	)

234 
	#L_CATCH
 298

	)

235 
	#L_ARRAY
 299

	)

236 
	#L_REF
 300

	)

237 
	#L_PARSE_COMMAND
 301

	)

238 
	#L_TIME_EXPRESSION
 302

	)

239 
	#L_CLASS
 303

	)

240 
	#L_NEW
 304

	)

241 
	#L_PARAMETER
 305

	)

242 
	#LOWER_THAN_ELSE
 306

	)

243 
	#L_EQ
 307

	)

244 
	#L_NE
 308

	)

247 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


248 
YYSTYPE
 
	tYYSTYPE
;

249 
	uYYSTYPE


253 
POINTER_INT
 
	mpoöãr_öt
;

254 
	mnumbî
;

255 
	mªÆ
;

256 *
	m°rög
;

257 
	mty≥
;

258 °ru˘ { 
	mnum_¨g
; 
	mÊags
; } 
	m¨gumít
;

259 
idít_hash_ñem_t
 *
	mihe
;

260 
∑r£_node_t
 *
	mnode
;

261 
fun˘i⁄_c⁄ãxt_t
 *
	mc⁄ãxç
;

263 
∑r£_node_t
 *
	mnode
;

264 
	mnum
;

265 } 
	mde˛
;

267 
	mnum_loˇl
;

268 
	mmax_num_loˇls
;

269 
	mc⁄ãxt
;

270 
	mßve_cuºít_ty≥
;

271 
	mßve_exa˘_ty≥s
;

272 } 
	mfunc_block
;

276 
	#YYSTYPE_IS_TRIVIAL
 1

	)

277 
	#YYSTYPE_IS_DECLARED
 1

	)

281 
YYSTYPE
 
yylvÆ
;

283 
yy∑r£
 ();

295 #ifde‡
YYTYPE_UINT8


296 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

298 
	tyyty≥_uöt8
;

301 #ifde‡
YYTYPE_INT8


302 
YYTYPE_INT8
 
	tyyty≥_öt8
;

304 sig√d 
	tyyty≥_öt8
;

307 #ifde‡
YYTYPE_UINT16


308 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

310 
	tyyty≥_uöt16
;

313 #ifde‡
YYTYPE_INT16


314 
YYTYPE_INT16
 
	tyyty≥_öt16
;

316 
	tyyty≥_öt16
;

319 #i‚de‡
YYSIZE_T


320 #ifde‡
__SIZE_TYPE__


321 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

322 #ñi‡
deföed
 
size_t


323 
	#YYSIZE_T
 
size_t


	)

324 #ñi‡! 
deföed
 
YYSIZE_T


325 
	~<°ddef.h
>

326 
	#YYSIZE_T
 
size_t


	)

328 
	#YYSIZE_T
 

	)

332 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

334 #i‚de‡
YY_


335 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

336 #i‡
ENABLE_NLS


337 
	~<liböé.h
>

338 
	#YY_
(
Msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", Msgid)

	)

341 #i‚de‡
YY_


342 
	#YY_
(
Msgid
Ë
	)
Msgid

346 #i‚de‡
YY_ATTRIBUTE


347 #i‡(
deföed
 
__GNUC__
 \

348 && (2 < 
	g__GNUC__
 || (__GNUC__ =2 && 96 <
__GNUC_MINOR__
))) \

349 || 
deföed
 
__SUNPRO_C
 && 0x5110 <= __SUNPRO_C

350 
	#YY_ATTRIBUTE
(
S≥c
Ë
	`__©åibuã__
(S≥c)

	)

352 
	#YY_ATTRIBUTE
(
S≥c
Ë

	)

356 #i‚de‡
YY_ATTRIBUTE_PURE


357 
	#YY_ATTRIBUTE_PURE
 
	`YY_ATTRIBUTE
 ((
__puª__
))

	)

360 #i‚de‡
YY_ATTRIBUTE_UNUSED


361 
	#YY_ATTRIBUTE_UNUSED
 
	`YY_ATTRIBUTE
 ((
__unu£d__
))

	)

364 #i‡!
deföed
 
_N‹ëu∫
 \

365 && (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 201112)

366 #i‡
deföed
 
_MSC_VER
 && 1200 <= _MSC_VER

367 
	#_N‹ëu∫
 
	`__de˛•ec
 (
n‹ëu∫
)

	)

369 
	#_N‹ëu∫
 
	`YY_ATTRIBUTE
 ((
__n‹ëu∫__
))

	)

374 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


375 
	#YYUSE
(
E
Ë((Ë(E))

	)

377 
	#YYUSE
(
E
Ë

	)

380 #i‡
deföed
 
__GNUC__
 && 407 <__GNUC__ * 100 + 
__GNUC_MINOR__


382 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 \

383 
	`_Pøgma
 ("GCC diagnosticÖush") \

384 
	`_Pøgma
 ("GCC diagnostic ignored \"-Wuninitialized\"")\

385 
	`_Pøgma
 ("GCC dügno°i¯ign‹ed \"-Wmaybe-unöôülized\"")

	)

386 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END
 \

387 
	`_Pøgma
 ("GCC dügno°i¯p›")

	)

389 
	#YY_INITIAL_VALUE
(
VÆue
Ë
	)
Value

391 #i‚de‡
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


392 
	#YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


	)

393 
	#YY_IGNORE_MAYBE_UNINITIALIZED_END


	)

395 #i‚de‡
YY_INITIAL_VALUE


396 
	#YY_INITIAL_VALUE
(
VÆue
Ë

	)

400 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


404 #ifde‡
YYSTACK_USE_ALLOCA


405 #i‡
YYSTACK_USE_ALLOCA


406 #ifde‡
__GNUC__


407 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

408 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


409 
	~<Æloˇ.h
>

410 #ñi‡
deföed
 
_AIX


411 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

412 #ñi‡
deföed
 
_MSC_VER


413 
	~<mÆloc.h
>

414 
	#Æloˇ
 
_Æloˇ


	)

416 
	#YYSTACK_ALLOC
 
Æloˇ


	)

417 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS


418 
	~<°dlib.h
>

420 #i‚de‡
EXIT_SUCCESS


421 
	#EXIT_SUCCESS
 0

	)

428 #ifde‡
YYSTACK_ALLOC


430 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 0)

	)

431 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


436 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

439 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

440 
	#YYSTACK_FREE
 
YYFREE


	)

441 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


442 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

444 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

445 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

446 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

447 
	~<°dlib.h
>

448 #i‚de‡
EXIT_SUCCESS


449 
	#EXIT_SUCCESS
 0

	)

452 #i‚de‡
YYMALLOC


453 
	#YYMALLOC
 
mÆloc


	)

454 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS


455 *
mÆloc
 (
YYSIZE_T
);

458 #i‚de‡
YYFREE


459 
	#YYFREE
 
‰ì


	)

460 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS


461 
‰ì
 (*);

468 #i‡(! 
deföed
 
yyovîÊow
 \

469 && (! 
deföed
 
	g__˝lu•lus
 \

470 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

473 
	uyyÆloc


475 
yyty≥_öt16
 
	myyss_Æloc
;

476 
YYSTYPE
 
	myyvs_Æloc
;

480 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

484 
	#YYSTACK_BYTES
(
N
) \

485 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

486 + 
YYSTACK_GAP_MAXIMUM
)

	)

488 
	#YYCOPY_NEEDED
 1

	)

495 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

498 
YYSIZE_T
 
yy√wbyãs
; \

499 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

500 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

501 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

502 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

504 0)

	)

508 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

511 #i‚de‡
YYCOPY


512 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

513 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

514 
	`__buûtö_mem˝y
 (
D°
, 
Src
, (
Cou¡
Ë*  (*(Src)))

	)

516 
	#YYCOPY
(
D°
, 
Src
, 
Cou¡
) \

519 
YYSIZE_T
 
yyi
; \

520 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

521 (
D°
)[
yyi
] = (
Src
)[yyi]; \

523 0)

	)

529 
	#YYFINAL
 3

	)

531 
	#YYLAST
 1827

	)

534 
	#YYNTOKENS
 75

	)

536 
	#YYNNTS
 101

	)

538 
	#YYNRULES
 255

	)

540 
	#YYNSTATES
 481

	)

544 
	#YYUNDEFTOK
 2

	)

545 
	#YYMAXUTOK
 308

	)

547 
	#YYTRANSLATE
(
YYX
) \

548 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

552 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

587 #i‡
YYDEBUG


589 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

620 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 0

623 c⁄° *c⁄° 
	gyyäame
[] =

655 "@20", "efun_ovîride", "fun˘i⁄_«me", "c⁄d", "›ti⁄Æ_ñ£_∑π", 
YY_NULLPTR


659 #ifde‡
YYPRINT


662 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

675 
	#YYPACT_NINF
 -343

	)

677 
	#yy∑˘_vÆue_is_deÁu…
(
Yy°©e
) \

678 (!!((
Yy°©e
Ë=(-343)))

	)

680 
	#YYTABLE_NINF
 -250

	)

682 
	#yyèbÀ_vÆue_is_îr‹
(
YyèbÀ_vÆue
) \

683 0

	)

687 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

743 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

797 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

813 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

831 c⁄° 
yyty≥_öt16
 
	gyyèbÀ
[] =

1018 c⁄° 
yyty≥_öt16
 
	gyycheck
[] =

1207 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1261 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

1292 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

1323 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1324 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1325 
	#YYEMPTY
 (-2)

	)

1326 
	#YYEOF
 0

	)

1328 
	#YYACCEPT
 
yyac˚±œb


	)

1329 
	#YYABORT
 
yyab‹éab


	)

1330 
	#YYERROR
 
yyîr‹œb


	)

1333 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1335 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1337 i‡(
yych¨
 =
YYEMPTY
) \

1339 
yych¨
 = (
Tokí
); \

1340 
yylvÆ
 = (
VÆue
); \

1341 
	`YYPOPSTACK
 (
yyÀn
); \

1342 
yy°©e
 = *
yys•
; \

1343 
yybackup
; \

1347 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1348 
YYERROR
; \

1350 0)

	)

1353 
	#YYTERROR
 1

	)

1354 
	#YYERRCODE
 256

	)

1359 #i‡
YYDEBUG


1361 #i‚de‡
YYFPRINTF


1362 
	~<°dio.h
>

1363 
	#YYFPRINTF
 
Ârötf


	)

1366 
	#YYDPRINTF
(
Args
) \

1368 i‡(
yydebug
) \

1369 
YYFPRINTF
 
Args
; \

1370 } 0)

	)

1373 #i‚de‡
YY_LOCATION_PRINT


1374 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1378 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1380 i‡(
yydebug
) \

1382 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1383 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1384 
Ty≥
, 
VÆue
); \

1385 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1387 } 0)

	)

1395 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1397 
FILE
 *
yyo
 = 
yyouçut
;

1398 
	`YYUSE
 (
yyo
);

1399 i‡(!
yyvÆuï
)

1401 #ifde‡
YYPRINT


1402 i‡(
yyty≥
 < 
YYNTOKENS
)

1403 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1405 
	`YYUSE
 (
yyty≥
);

1406 
	}
}

1414 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1416 
	`YYFPRINTF
 (
yyouçut
, "%s %s (",

1417 
yyty≥
 < 
YYNTOKENS
 ? "tokí" : "¡îm", 
yyäame
[yytype]);

1419 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1420 
	`YYFPRINTF
 (
yyouçut
, ")");

1421 
	}
}

1429 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1431 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1432 ; 
yybŸtom
 <
yyt›
; yybottom++)

1434 
yybŸ
 = *
yybŸtom
;

1435 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1437 
	`YYFPRINTF
 (
°dîr
, "\n");

1438 
	}
}

1440 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1442 i‡(
yydebug
) \

1443 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1444 } 0)

	)

1452 
	$yy_ªdu˚_¥öt
 (
yyty≥_öt16
 *
yys•
, 
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1454 
yy o
 = 
yyæöe
[
yyruÀ
];

1455 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1456 
yyi
;

1457 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1458 
yyruÀ
 - 1, 
yy o
);

1460 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1462 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1463 
	`yy_symbﬁ_¥öt
 (
°dîr
,

1464 
yy°os
[
yys•
[
yyi
 + 1 - 
yyƒhs
]],

1465 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1467 
	`YYFPRINTF
 (
°dîr
, "\n");

1469 
	}
}

1471 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1473 i‡(
yydebug
) \

1474 
	`yy_ªdu˚_¥öt
 (
yys•
, 
yyv•
, 
RuÀ
); \

1475 } 0)

	)

1479 
	gyydebug
;

1481 
	#YYDPRINTF
(
Args
)

	)

1482 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1483 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1484 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1489 #i‚de‡
YYINITDEPTH


1490 
	#YYINITDEPTH
 200

	)

1500 #i‚de‡
YYMAXDEPTH


1501 
	#YYMAXDEPTH
 10000

	)

1505 #i‡
YYERROR_VERBOSE


1507 #i‚de‡
yy°æí


1508 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1509 
	#yy°æí
 
°æí


	)

1512 
YYSIZE_T


1513 
	$yy°æí
 (c⁄° *
yy°r
)

1515 
YYSIZE_T
 
yyÀn
;

1516 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1518  
yyÀn
;

1519 
	}
}

1523 #i‚de‡
yy°p˝y


1524 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1525 
	#yy°p˝y
 
°p˝y


	)

1530 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1532 *
yyd
 = 
yyde°
;

1533 c⁄° *
yys
 = 
yy§c
;

1535 (*
yyd
++ = *
yys
++) != '\0')

1538  
yyd
 - 1;

1539 
	}
}

1543 #i‚de‡
yyäamîr


1551 
YYSIZE_T


1552 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1554 i‡(*
yy°r
 == '"')

1556 
YYSIZE_T
 
yyn
 = 0;

1557 c⁄° *
yyp
 = 
yy°r
;

1560 *++
yyp
)

1564 
do_nŸ_°rù_quŸes
;

1567 i‡(*++
yyp
 != '\\')

1568 
do_nŸ_°rù_quŸes
;

1571 i‡(
yyªs
)

1572 
yyªs
[
yyn
] = *
yyp
;

1573 
yyn
++;

1577 i‡(
yyªs
)

1578 
yyªs
[
yyn
] = '\0';

1579  
yyn
;

1581 
do_nŸ_°rù_quŸes
: ;

1584 i‡(! 
yyªs
)

1585  
	`yy°æí
 (
yy°r
);

1587  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1588 
	}
}

1600 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

1601 
yyty≥_öt16
 *
yys•
, 
yytokí
)

1603 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yytokí
]);

1604 
YYSIZE_T
 
yysize
 = 
yysize0
;

1605 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1607 c⁄° *
yyf‹m©
 = 
YY_NULLPTR
;

1609 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1612 
yycou¡
 = 0;

1637 i‡(
yytokí
 !
YYEMPTY
)

1639 
yyn
 = 
yy∑˘
[*
yys•
];

1640 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1641 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1646 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1648 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1649 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1650 
yyx
;

1652 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1653 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1654 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1656 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1658 
yycou¡
 = 1;

1659 
yysize
 = 
yysize0
;

1662 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1664 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (
YY_NULLPTR
, 
yyäame
[
yyx
]);

1665 i‡(! (
yysize
 <
yysize1


1666 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

1668 
yysize
 = 
yysize1
;

1674 
yycou¡
)

1676 
	#YYCASE_
(
N
, 
S
) \

1677 
N
: \

1678 
yyf‹m©
 = 
S
; \

1679 

	)

1680 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1681 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1682 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1683 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1684 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1685 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1686 #unde‡
YYCASE_


1690 
YYSIZE_T
 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1691 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1693 
yysize
 = 
yysize1
;

1696 i‡(*
yymsg_Æloc
 < 
yysize
)

1698 *
yymsg_Æloc
 = 2 * 
yysize
;

1699 i‡(! (
yysize
 <*
yymsg_Æloc


1700 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1701 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1709 *
yyp
 = *
yymsg
;

1710 
yyi
 = 0;

1711 (*
yyp
 = *
yyf‹m©
) != '\0')

1712 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1714 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1715 
yyf‹m©
 += 2;

1719 
yyp
++;

1720 
yyf‹m©
++;

1724 
	}
}

1732 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1734 
	`YYUSE
 (
yyvÆuï
);

1735 i‡(!
yymsg
)

1736 
yymsg
 = "Deleting";

1737 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1739 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1740 
	`YYUSE
 (
yyty≥
);

1741 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1742 
	}
}

1748 
	gyych¨
;

1751 
YYSTYPE
 
	gyylvÆ
;

1753 
	gyy√ºs
;

1761 
	$yy∑r£
 ()

1763 
yy°©e
;

1765 
yyîr°©us
;

1775 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1776 
yyty≥_öt16
 *
yyss
;

1777 
yyty≥_öt16
 *
yys•
;

1780 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1781 
YYSTYPE
 *
yyvs
;

1782 
YYSTYPE
 *
yyv•
;

1784 
YYSIZE_T
 
yy°acksize
;

1786 
yyn
;

1787 
yyªsu…
;

1789 
yytokí
 = 0;

1792 
YYSTYPE
 
yyvÆ
;

1794 #i‡
YYERROR_VERBOSE


1796 
yymsgbuf
[128];

1797 *
yymsg
 = 
yymsgbuf
;

1798 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1801 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1805 
yyÀn
 = 0;

1807 
yys•
 = 
yyss
 = 
yysß
;

1808 
yyv•
 = 
yyvs
 = 
yyvß
;

1809 
yy°acksize
 = 
YYINITDEPTH
;

1811 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1813 
yy°©e
 = 0;

1814 
yyîr°©us
 = 0;

1815 
yy√ºs
 = 0;

1816 
yych¨
 = 
YYEMPTY
;

1817 
yy£t°©e
;

1822 
yy√w°©e
:

1825 
yys•
++;

1827 
yy£t°©e
:

1828 *
yys•
 = 
yy°©e
;

1830 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1833 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1835 #ifde‡
yyovîÊow


1840 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1841 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1847 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1848 &
yyss1
, 
yysize
 *  (*
yys•
),

1849 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1850 &
yy°acksize
);

1852 
yyss
 = 
yyss1
;

1853 
yyvs
 = 
yyvs1
;

1856 #i‚de‡
YYSTACK_RELOCATE


1857 
yyexhau°edœb
;

1860 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1861 
yyexhau°edœb
;

1862 
yy°acksize
 *= 2;

1863 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1864 
yy°acksize
 = 
YYMAXDEPTH
;

1867 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1868 
yyÆloc
 *
yy±r
 =

1869 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1870 i‡(! 
yy±r
)

1871 
yyexhau°edœb
;

1872 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1873 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1874 #unde‡
YYSTACK_RELOCATE


1875 i‡(
yyss1
 !
yysß
)

1876 
	`YYSTACK_FREE
 (
yyss1
);

1881 
yys•
 = 
yyss
 + 
yysize
 - 1;

1882 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1884 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1885 (Ë
yy°acksize
));

1887 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1888 
YYABORT
;

1891 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1893 i‡(
yy°©e
 =
YYFINAL
)

1894 
YYACCEPT
;

1896 
yybackup
;

1901 
yybackup
:

1907 
yyn
 = 
yy∑˘
[
yy°©e
];

1908 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1909 
yydeÁu…
;

1914 i‡(
yych¨
 =
YYEMPTY
)

1916 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1917 
yych¨
 = 
	`yyÀx
 ();

1920 i‡(
yych¨
 <
YYEOF
)

1922 
yych¨
 = 
yytokí
 = 
YYEOF
;

1923 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1927 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1928 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1933 
yyn
 +
yytokí
;

1934 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1935 
yydeÁu…
;

1936 
yyn
 = 
yyèbÀ
[yyn];

1937 i‡(
yyn
 <= 0)

1939 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1940 
yyîæab
;

1941 
yyn
 = -yyn;

1942 
yyªdu˚
;

1947 i‡(
yyîr°©us
)

1948 
yyîr°©us
--;

1951 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1954 
yych¨
 = 
YYEMPTY
;

1956 
yy°©e
 = 
yyn
;

1957 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


1958 *++
yyv•
 = 
yylvÆ
;

1959 
YY_IGNORE_MAYBE_UNINITIALIZED_END


1961 
yy√w°©e
;

1967 
yydeÁu…
:

1968 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1969 i‡(
yyn
 == 0)

1970 
yyîæab
;

1971 
yyªdu˚
;

1977 
yyªdu˚
:

1979 
yyÀn
 = 
yyr2
[
yyn
];

1989 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1992 
	`YY_REDUCE_PRINT
 (
yyn
);

1993 
yyn
)

1999 
comp_åìs
[
TREE_MAIN
] = (
yyvÆ
.
node
);

2008 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 0, (
yyv•
[-2].node), (yyvsp[-1].node));

2017 (
yyvÆ
.
node
) = 0;

2027 
	`yyw¨n
("Extra ';'. Ignored.");

2036 
obje˘_t
 *
ob
;

2037 
öhîô_t
 
öhîô
;

2038 
öôülizî
;

2039 
acc_mod
;

2041 (
yyv•
[-3].
ty≥
Ë|
globÆ_modifõrs
;

2043 
acc_mod
 = ((
yyv•
[-3].
ty≥
Ë& 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

2044 i‡(
acc_mod
 & (acc_mod - 1)) {

2045 
buf
[256];

2046 *
íd
 = 
	`EndOf
(
buf
);

2047 *
p
;

2049 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

2050 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, (
yyv•
[-3].
ty≥
));

2051 
p
 = 
	`°Ωut
’, 
íd
, ") for inheritance");

2052 
	`yyîr‹
(
buf
);

2055 i‡(!((
yyv•
[-3].
ty≥
Ë& 
DECL_ACCESS
)Ë(yyv•[-3].ty≥Ë|
DECL_PUBLIC
;

2057 i‡(
v¨_deföed
)

2058 
	`yyîr‹
("IllegalÅo inheritáfter defining global variables.");

2059 
ob
 = 
	`föd_obje˘2
((
yyv•
[-1].
°rög
));

2060 i‡(
ob
 == 0) {

2061 
öhîô_fûe
 = 
	`Æloc_c°rög
((
yyv•
[-1].
°rög
), "inherit");

2063 
YYACCEPT
;

2065 
	`s¸©ch_‰ì
((
yyv•
[-1].
°rög
));

2066 
öhîô
.
¥og
 = 
ob
->prog;

2068 i‡(
mem_block
[
A_INHERITS
].
cuºít_size
){

2069 
öhîô_t
 *
¥ev_öhîô
 = 
	`INHERIT
(
NUM_INHERITS
 - 1);

2071 
öhîô
.
fun˘i⁄_ödex_off£t


2072 
¥ev_öhîô
->
fun˘i⁄_ödex_off£t


2073 + 
¥ev_öhîô
->
¥og
->
num_fun˘i⁄s_deföed


2074 + 
¥ev_öhîô
->
¥og
->
œ°_öhîôed
;

2075 i‡(
¥ev_öhîô
->
¥og
->
num_fun˘i⁄s_deföed
 &&

2076 
¥ev_öhîô
->
¥og
->
fun˘i⁄_èbÀ
[¥ev_öhîô->¥og->
num_fun˘i⁄s_deföed
 - 1].
«me
[0] == '#')

2077 
öhîô
.
fun˘i⁄_ödex_off£t
--;

2078 } 
öhîô
.
fun˘i⁄_ödex_off£t
 = 0;

2080 
öhîô
.
v¨übÀ_ödex_off£t
 =

2081 
mem_block
[
A_VAR_TEMP
].
cuºít_size
 /

2082  (
v¨übÀ_t
);

2083 
öhîô
.
ty≥_mod
 = (
yyv•
[-3].
ty≥
);

2084 
	`add_to_mem_block
(
A_INHERITS
, (*)&
öhîô
,  inherit);

2087 
	`c›y_°ru˘uªs
(
ob
->
¥og
);

2088 
	`c›y_v¨übÀs
(
ob
->
¥og
, (
yyv•
[-3].
ty≥
));

2089 
öôülizî
 = 
	`c›y_fun˘i⁄s
(
ob
->
¥og
, (
yyv•
[-3].
ty≥
));

2090 i‡(
öôülizî
 >= 0) {

2091 
∑r£_node_t
 *
node
, *
√wnode
;

2096 
node
 = 
	`√w_node_no_löe
();

2097 
node
->
köd
 = 
NODE_CALL_2
;

2098 
node
->
r
.
ex¥
 = 0;

2099 
node
->
v
.
numbî
 = 
F_CALL_INHERITED
;

2100 
node
->
l
.
numbî
 = 
öôülizî
 | ((
NUM_INHERITS
 - 1) << 16);

2101 
node
->
ty≥
 = 
TYPE_ANY
;

2105 
√wnode
 = 
comp_åìs
[
TREE_INIT
];

2106 
	`CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
],0, 
√wnode
, 
node
);

2107 
comp_åìs
[
TREE_INIT
] = 
	`p›_vÆue
(comp_trees[TREE_INIT]);

2110 (
yyvÆ
.
node
) = 0;

2119 
	`CREATE_REAL
((
yyvÆ
.
node
), (
yyv•
[0].
ªÆ
));

2128 
	`CREATE_NUMBER
((
yyvÆ
.
node
), (
yyv•
[0].
numbî
));

2137 (
yyvÆ
.
ty≥
) = 0;

2146 (
yyvÆ
.
ty≥
Ë
TYPE_MOD_ARRAY
;

2155 (
yyvÆ
.
node
Ë(
yyv•
[0].
de˛
).node;

2156 i‡(!(
yyvÆ
.
node
)) {

2157 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

2167 (
yyvÆ
.
node
) = 0;

2176 (
yyvÆ
.
node
) = 0;

2185 (
yyvÆ
.
°rög
Ë
	`s¸©ch_c›y
((
yyv•
[0].
ihe
)->
«me
);

2194 
Êags
;

2195 
acc_mod
;

2197 
Êags
 = ((
yyv•
[-2].
ty≥
) >> 16);

2199 
Êags
 |
globÆ_modifõrs
;

2201 
acc_mod
 = (
Êags
 & 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

2202 i‡(
acc_mod
 & (acc_mod - 1)) {

2203 
buf
[256];

2204 *
íd
 = 
	`EndOf
(
buf
);

2205 *
p
;

2207 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

2208 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, 
Êags
);

2209 
p
 = 
	`°Ωut
’, 
íd
, ") for function");

2210 
	`yyîr‹
(
buf
);

2213 i‡(!(
Êags
 & 
DECL_ACCESS
)ËÊag†|
DECL_PUBLIC
;

2214 i‡(
Êags
 & 
DECL_NOSAVE
) {

2215 
	`yyw¨n
("IllegalÅo declareÇosave function.");

2216 
Êags
 &~
DECL_NOSAVE
;

2218 (
yyv•
[-2].
ty≥
Ë(
Êags
 << 16) | ((yyvsp[-2].type) & 0xffff);

2221 i‡((
yyv•
[-2].
ty≥
) & 0xffff) {

2222 
exa˘_ty≥s
 = ((
yyv•
[-2].
ty≥
)& 0xffff) | (yyvsp[-1].type);

2224 i‡(
¥agmas
 & 
PRAGMA_STRICT_TYPES
) {

2225 i‡(
	`°rcmp
((
yyv•
[0].
°rög
), "create") != 0)

2226 
	`yyîr‹
("\"#pragma strict_types\"ÑequiresÅype of function");

2228 
exa˘_ty≥s
 = 
TYPE_VOID
;

2230 
exa˘_ty≥s
 = 0;

2240 *
p
 = (
yyv•
[-4].
°rög
);

2241 (
yyv•
[-4].
°rög
Ë
	`make_sh¨ed_°rög
((yyvsp[-4].string));

2242 
	`s¸©ch_‰ì
(
p
);

2252 (
yyvÆ
.
numbî
Ë
FUNC_PROTOTYPE
;

2253 i‡((
yyv•
[-1].
¨gumít
).
Êags
 & 
ARG_IS_VARARGS
) {

2254 (
yyvÆ
.
numbî
Ë|(
FUNC_TRUE_VARARGS
 | 
FUNC_VARARGS
);

2256 (
yyvÆ
.
numbî
Ë|((
yyv•
[-6].
ty≥
) >> 16);

2258 
	`deföe_√w_fun˘i⁄
((
yyv•
[-4].
°rög
), (yyv•[-1].
¨gumít
).
num_¨g
, 0, (
yyvÆ
.
numbî
), ((yyv•[-6].
ty≥
) & 0xffff)| (yyvsp[-5].type));

2261 
	`‰ì_°rög
((
yyv•
[-4].
°rög
));

2262 
c⁄ãxt
 = 0;

2272 i‡((
yyv•
[0].
node
)) {

2273 
fun
;

2275 (
yyv•
[-1].
numbî
Ë&~
FUNC_PROTOTYPE
;

2276 i‡((
yyv•
[0].
node
)->
köd
 !
NODE_RETURN
 &&

2277 ((
yyv•
[0].
node
)->
köd
 !
NODE_TWO_VALUES


2278 || (
yyv•
[0].
node
)->
r
.
ex¥
->
köd
 !
NODE_RETURN
)) {

2279 
∑r£_node_t
 *
ª∂a˚mít
;

2280 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyv•
[0].
node
), 0);

2281 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

2282 (
yyv•
[0].
node
Ë
ª∂a˚mít
;

2285 
fun
 = 
	`deföe_√w_fun˘i⁄
((
yyv•
[-6].
°rög
), (yyv•[-3].
¨gumít
).
num_¨g
,

2286 
max_num_loˇls
 - (
yyv•
[-3].
¨gumít
).
num_¨g
,

2287 (
yyv•
[-1].
numbî
), ((yyv•[-8].
ty≥
) & 0xffff) | (yyvsp[-7].type));

2288 i‡(
fun
 != -1) {

2289 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

2290 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION
;

2291 (
yyvÆ
.
node
)->
v
.
numbî
 = 
fun
;

2292 (
yyvÆ
.
node
)->
l
.
numbî
 = 
max_num_loˇls
;

2293 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[0].node);

2295 (
yyvÆ
.
node
) = 0;

2297 (
yyvÆ
.
node
) = 0;

2298 
	`‰ì_Æl_loˇl_«mes
(!!(
yyv•
[0].
node
));

2307 i‡(!((
yyv•
[-2].
ty≥
Ë& ~(
DECL_MODS
)Ë&& (
¥agmas
 & 
PRAGMA_STRICT_TYPES
))

2308 
	`yyîr‹
("MissingÅype for global variable declaration");

2309 (
yyvÆ
.
node
) = 0;

2318 i‡(!(
yyv•
[-1].
ty≥
))

2319 
	`yyîr‹
("modifierÜist mayÇot beÉmpty.");

2321 i‡((
yyv•
[-1].
ty≥
Ë& 
FUNC_VARARGS
) {

2322 
	`yyîr‹
("Illegal modifier 'varargs' in global modifierÜist.");

2323 (
yyv•
[-1].
ty≥
Ë&~
FUNC_VARARGS
;

2326 i‡(!((
yyv•
[-1].
ty≥
Ë& 
DECL_ACCESS
)Ë(yyv•[-1].ty≥Ë|
DECL_PUBLIC
;

2327 
globÆ_modifõrs
 = (
yyv•
[-1].
ty≥
);

2328 (
yyvÆ
.
node
) = 0;

2340 i‡(
cuºít_ty≥
 =
TYPE_VOID
)

2341 
	`yyîr‹
("IllegalÅo declare class member ofÅype void.");

2342 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
cuºít_ty≥
 | (yyv•[-1].
ty≥
));

2343 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2352 
cuºít_ty≥
 = (
yyv•
[0].
ty≥
);

2361 
idít_hash_ñem_t
 *
ihe
;

2363 
ihe
 = 
	`föd_‹_add_idít
(

2364 
	`PROG_STRING
((
yyvÆ
.
numbî
Ë
	`°‹e_¥og_°rög
((
yyv•
[-1].
°rög
))),

2365 
FOA_GLOBAL_SCOPE
);

2366 i‡(
ihe
->
dn
.
˛ass_num
 == -1) {

2367 
ihe
->
£m_vÆue
++;

2368 
ihe
->
dn
.
˛ass_num
 = 
mem_block
[
A_CLASS_DEF
].
cuºít_size
 / (
˛ass_def_t
);

2369 i‡(
ihe
->
dn
.
˛ass_num
 > 
CLASS_NUM_MASK
){

2370 
buf
[256];

2371 *
p
;

2373 
p
 = 
buf
;

2374 
	`•rötf
(
p
, "Toÿm™y cœs£s, max i†%d.\n", 
CLASS_NUM_MASK
 + 1);

2375 
	`yyîr‹
(
buf
);

2378 
	`s¸©ch_‰ì
((
yyv•
[-1].
°rög
));

2379 (
yyv•
[-2].
ihe
) = 0;

2382 (
yyv•
[-2].
ihe
) = ihe;

2392 
˛ass_def_t
 *
sd
;

2393 
˛ass_membî_íåy_t
 *
sme
;

2394 
i
, 
øi£_îr‹
 = 0;

2397 i‡((
yyv•
[-5].
ihe
) != 0) {

2398 
sd
 = 
	`CLASS
((
yyv•
[-5].
ihe
)->
dn
.
˛ass_num
);

2399 i‡(
sd
->
size
 !
cuºít_numbî_of_loˇls
)

2400 
øi£_îr‹
 = 1;

2402 
i
 = 
sd
->
size
;

2403 
sme
 = (
˛ass_membî_íåy_t
 *)
mem_block
[
A_CLASS_MEMBER
].
block
 + 
sd
->
ödex
;

2404 
i
--) {

2406 i‡(
	`°rcmp
(
	`PROG_STRING
(
sme
[
i
].
«me
), 
loˇls_±r
[i].
ihe
->name) != 0 ||

2407 
sme
[
i
].
ty≥
 !(
ty≥_of_loˇls_±r
[i] & ~
LOCAL_MODS
)) {

2408 
øi£_îr‹
 = 1;

2415 i‡(
øi£_îr‹
) {

2416 
buf
[256];

2417 *
íd
 = 
	`EndOf
(
buf
);

2418 *
p
;

2420 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅoÑedefine class ");

2421 
p
 = 
	`°Ωut
’, 
íd
, 
	`PROG_STRING
((
yyvÆ
.
numbî
)));

2422 
	`yyîr‹
(
buf
);

2424 
sd
 = (
˛ass_def_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_DEF
, (class_def_t));

2425 
i
 = 
sd
->
size
 = 
cuºít_numbî_of_loˇls
;

2426 
sd
->
ödex
 = 
mem_block
[
A_CLASS_MEMBER
].
cuºít_size
 / (
˛ass_membî_íåy_t
);

2427 
sd
->
«me
 = (
yyv•
[-2].
numbî
);

2429 
sme
 = (
˛ass_membî_íåy_t
 *)
	`Æloˇã_ö_mem_block
(
A_CLASS_MEMBER
, (˛ass_membî_íåy_tË* 
cuºít_numbî_of_loˇls
);

2431 
i
--) {

2432 
sme
[
i
].
«me
 = 
	`°‹e_¥og_°rög
(
loˇls_±r
[i].
ihe
->name);

2433 
sme
[
i
].
ty≥
 = 
ty≥_of_loˇls_±r
[i] & ~
LOCAL_MODS
;

2437 
	`‰ì_Æl_loˇl_«mes
(0);

2438 (
yyvÆ
.
node
) = 0;

2447 i‡((
yyv•
[0].
ihe
)->
dn
.
loˇl_num
 != -1) {

2448 
buff
[256];

2449 *
íd
 = 
	`EndOf
(
buff
);

2450 *
p
;

2452 
p
 = 
	`°Ωut
(
buff
, 
íd
, "IllegalÅoÑedeclareÜocalÇame '");

2453 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

2454 
p
 = 
	`°Ωut
’, 
íd
, "'");

2455 
	`yyîr‹
(
buff
);

2457 (
yyvÆ
.
°rög
Ë
	`s¸©ch_c›y
((
yyv•
[0].
ihe
)->
«me
);

2466 i‡((
yyv•
[0].
ihe
)->
dn
.
˛ass_num
 == -1) {

2467 
buf
[256];

2468 *
íd
 = 
	`EndOf
(
buf
);

2469 *
p
;

2471 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

2472 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

2473 
p
 = 
	`°Ωut
’, 
íd
, "'");

2474 
	`yyîr‹
(
buf
);

2475 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2477 (
yyvÆ
.
ty≥
Ë(
yyv•
[0].
ihe
)->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

2487 
buf
[256];

2488 *
íd
 = 
	`EndOf
(
buf
);

2489 *
p
;

2491 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

2492 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

2493 
p
 = 
	`°Ωut
’, 
íd
, "'");

2494 
	`yyîr‹
(
buf
);

2495 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2504 (
yyvÆ
.
ty≥
Ë
TYPE_ANY
;

2513 (
yyvÆ
.
ty≥
Ë(
yyv•
[-1].ty≥Ë| 
TYPE_MOD_ARRAY
;

2522 (
yyvÆ
.
ty≥
Ë(
yyv•
[-1].ty≥Ë| 
LOCAL_MOD_REF
;

2531 (
yyvÆ
.
numbî
Ë(
yyv•
[-1].
ty≥
) | (yyvsp[0].type);

2532 i‡((
yyv•
[-1].
ty≥
Ë!
TYPE_VOID
)

2533 
	`add_loˇl_«me
("", (
yyv•
[-1].
ty≥
) | (yyvsp[0].type));

2542 i‡((
yyv•
[-2].
ty≥
Ë=
TYPE_VOID
)

2543 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2544 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), (yyv•[-2].
ty≥
) | (yyvsp[-1].type));

2545 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2546 (
yyvÆ
.
numbî
Ë(
yyv•
[-2].
ty≥
) | (yyvsp[-1].type);

2555 i‡(
exa˘_ty≥s
) {

2556 
	`yyîr‹
("MissingÅype forárgument");

2558 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
TYPE_ANY
);

2559 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2560 (
yyvÆ
.
numbî
Ë
TYPE_ANY
;

2569 (
yyvÆ
.
¨gumít
).
num_¨g
 = 0;

2570 (
yyvÆ
.
¨gumít
).
Êags
 = 0;

2579 
x
 = 
ty≥_of_loˇls_±r
[
max_num_loˇls
-1];

2580 
…
 = 
x
 & ~
LOCAL_MODS
;

2582 (
yyvÆ
.
¨gumít
Ë(
yyv•
[-1].argument);

2583 (
yyvÆ
.
¨gumít
).
Êags
 |
ARG_IS_VARARGS
;

2585 i‡(
x
 & 
LOCAL_MOD_REF
) {

2586 
	`yyîr‹
("VariableÅo holdÑemainder ofárgs mayÇot beáÑeference");

2587 
x
 &~
LOCAL_MOD_REF
;

2589 i‡(
…
 !
TYPE_ANY
 && !÷à& 
TYPE_MOD_ARRAY
))

2590 
	`yyw¨n
("VariableÅo holdÑemainder ofárguments should beánárray.");

2599 i‡(((
yyv•
[0].
numbî
Ë& 
TYPE_MASK
Ë=
TYPE_VOID
 && !((yyv•[0].numbîË& 
TYPE_MOD_CLASS
)) {

2600 i‡((
yyv•
[0].
numbî
Ë& ~
TYPE_MASK
)

2601 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2602 (
yyvÆ
.
¨gumít
).
num_¨g
 = 0;

2604 (
yyvÆ
.
¨gumít
).
num_¨g
 = 1;

2606 (
yyvÆ
.
¨gumít
).
Êags
 = 0;

2615 i‡(!(
yyvÆ
.
¨gumít
).
num_¨g
)

2616 
	`yyîr‹
("argument ofÅype void must beÅhe onlyárgument.");

2617 i‡(((
yyv•
[0].
numbî
Ë& 
TYPE_MASK
Ë=
TYPE_VOID
 && !((yyv•[0].numbîË& 
TYPE_MOD_CLASS
))

2618 
	`yyîr‹
("IllegalÅo declareárgument ofÅype void.");

2620 (
yyvÆ
.
¨gumít
Ë(
yyv•
[-2].argument);

2621 (
yyvÆ
.
¨gumít
).
num_¨g
++;

2630 (
yyvÆ
.
ty≥
) = 0;

2639 
acc_mod
;

2641 (
yyvÆ
.
ty≥
Ë(
yyv•
[-1].type) | (yyvsp[0].type);

2643 
acc_mod
 = ((
yyvÆ
.
ty≥
Ë& 
DECL_ACCESS
Ë& ~
globÆ_modifõrs
;

2644 i‡(
acc_mod
 & (acc_mod - 1)) {

2645 
buf
[256];

2646 *
íd
 = 
	`EndOf
(
buf
);

2647 *
p
;

2649 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Multipleáccess modifiers (");

2650 
p
 = 
	`gë_ty≥_modifõrs
’, 
íd
, (
yyvÆ
.
ty≥
));

2651 
p
 = 
	`°Ωut
’, 
íd
, ") ");

2652 
	`yyîr‹
(
buf
);

2653 (
yyvÆ
.
ty≥
Ë
DECL_PUBLIC
;

2663 (
yyvÆ
.
ty≥
Ë((
yyv•
[-1].type) << 16) | (yyvsp[0].type);

2664 
cuºít_ty≥
 = (
yyvÆ
.
ty≥
);

2673 (
yyvÆ
.
ty≥
Ë(
yyv•
[-2].type) | (yyvsp[-1].type);

2682 (
yyvÆ
.
ty≥
Ë
TYPE_UNKNOWN
;

2691 i‡(
cuºít_ty≥
 & (
FUNC_VARARGS
 << 16)){

2692 
	`yyîr‹
("IllegalÅo declare varargs variable.");

2693 
cuºít_ty≥
 &~(
FUNC_VARARGS
 << 16);

2700 i‡(
cuºít_ty≥
 & 0xffff0000){

2701 
cuºít_ty≥
 = (current_type >> 16) | (current_type & 0xffff);

2704 
cuºít_ty≥
 |
globÆ_modifõrs
;

2706 i‡(!(
cuºít_ty≥
 & 
DECL_ACCESS
)Ëcuºít_ty≥ |
DECL_PUBLIC
;

2708 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

2709 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2711 
	`deföe_√w_v¨übÀ
((
yyv•
[0].
°rög
), 
cuºít_ty≥
 | (yyv•[-1].
ty≥
));

2712 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2721 
∑r£_node_t
 *
ex¥
, *
√wnode
;

2722 
ty≥
;

2724 i‡(
cuºít_ty≥
 & (
FUNC_VARARGS
 << 16)){

2725 
	`yyîr‹
("IllegalÅo declare varargs variable.");

2726 
cuºít_ty≥
 &~(
FUNC_VARARGS
 << 16);

2729 i‡(
cuºít_ty≥
 & 0xffff0000){

2730 
cuºít_ty≥
 = (current_type >> 16) | (current_type & 0xffff);

2733 
cuºít_ty≥
 |
globÆ_modifõrs
;

2735 i‡(!(
cuºít_ty≥
 & 
DECL_ACCESS
)Ëcuºít_ty≥ |
DECL_PUBLIC
;

2737 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

2738 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2740 i‡((
yyv•
[-1].
numbî
Ë!
F_ASSIGN
)

2741 
	`yyîr‹
("Only '=' isÜegal in initializers.");

2745 i‡(
cuºít_ty≥
) {

2746 
ty≥
 = (
cuºít_ty≥
 | (
yyv•
[-3].ty≥)Ë& ~
DECL_MODS
;

2747 i‡((
cuºít_ty≥
 & ~
DECL_MODS
Ë=
TYPE_VOID
)

2748 
	`yyîr‹
("IllegalÅo declare global variable ofÅype void.");

2749 i‡(!
	`com∑tibÀ_ty≥s
(
ty≥
, (
yyv•
[0].
node
)->type)) {

2750 
buff
[256];

2751 *
íd
 = 
	`EndOf
(
buff
);

2752 *
p
;

2754 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2755 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[0].
node
)->type);

2756 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

2757 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
°rög
));

2758 
	`yyîr‹
(
buff
);

2761 (
yyv•
[0].
node
Ë
	`do_¥omŸi⁄s
((yyv•[0].node), 
ty≥
);

2763 
	`CREATE_BINARY_OP
(
ex¥
, 
F_VOID_ASSIGN
, 0, (
yyv•
[0].
node
), 0);

2764 
	`CREATE_OPCODE_1
(
ex¥
->
r
.ex¥, 
F_GLOBAL_LVALUE
, 0,

2765 
	`deföe_√w_v¨übÀ
((
yyv•
[-2].
°rög
), 
cuºít_ty≥
 | (yyv•[-3].
ty≥
)));

2766 
√wnode
 = 
comp_åìs
[
TREE_INIT
];

2767 
	`CREATE_TWO_VALUES
(
comp_åìs
[
TREE_INIT
], 0,

2768 
√wnode
, 
ex¥
);

2769 
	`s¸©ch_‰ì
((
yyv•
[-2].
°rög
));

2778 i‡((
yyv•
[-2].
de˛
).
node
 && (yyvsp[-1].node)) {

2779 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-2].decl).node, (yyvsp[-1].node));

2780 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[-2].decl).node ? (yyvsp[-2].decl).node : (yyvsp[-1].node));

2781 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-2].decl).num;

2790 (
yyvÆ
.
de˛
).
node
 = 0;

2791 (
yyvÆ
.
de˛
).
num
 = 0;

2800 i‡((
yyv•
[0].
ty≥
Ë=
TYPE_VOID
)

2801 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

2805 
cuºít_ty≥
 = (
yyv•
[0].
ty≥
);

2814 i‡((
yyv•
[-4].
de˛
).
node
 && (yyvsp[-1].decl).node) {

2815 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-4].decl).node, (yyvsp[-1].decl).node);

2816 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[-4].decl).node ? (yyvsp[-4].decl).node : (yyvsp[-1].decl).node);

2817 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-4].decl).num + (yyvsp[-1].decl).num;

2826 i‡(
cuºít_ty≥
 & 
LOCAL_MOD_REF
) {

2827 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

2828 
cuºít_ty≥
 &~
LOCAL_MOD_REF
;

2830 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
cuºít_ty≥
 | (yyv•[-1].
ty≥
Ë| 
LOCAL_MOD_UNUSED
);

2832 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2833 (
yyvÆ
.
node
) = 0;

2842 
ty≥
 = (
cuºít_ty≥
 | (
yyv•
[-3].ty≥)Ë& ~
DECL_MODS
;

2844 i‡(
cuºít_ty≥
 & 
LOCAL_MOD_REF
) {

2845 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

2846 
cuºít_ty≥
 &~
LOCAL_MOD_REF
;

2847 
ty≥
 &~
LOCAL_MOD_REF
;

2850 i‡((
yyv•
[-1].
numbî
Ë!
F_ASSIGN
)

2851 
	`yyîr‹
("Only '=' isállowed in initializers.");

2852 i‡(!
	`com∑tibÀ_ty≥s
((
yyv•
[0].
node
)->
ty≥
,Åype)) {

2853 
buff
[256];

2854 *
íd
 = 
	`EndOf
(
buff
);

2855 *
p
;

2857 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2858 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[0].
node
)->type);

2859 
p
 = 
	`°Ωut
’, 
íd
, " when initializing ");

2860 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
°rög
));

2862 
	`yyîr‹
(
buff
);

2865 (
yyv•
[0].
node
Ë
	`do_¥omŸi⁄s
((yyv•[0].node), 
ty≥
);

2867 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_VOID_ASSIGN_LOCAL
, 0, (
yyv•
[0].node),

2868 
	`add_loˇl_«me
((
yyv•
[-2].
°rög
), 
cuºít_ty≥
 | (yyv•[-3].
ty≥
Ë| 
LOCAL_MOD_UNUSED
));

2869 
	`s¸©ch_‰ì
((
yyv•
[-2].
°rög
));

2878 i‡((
yyv•
[-2].
ty≥
Ë=
TYPE_VOID
)

2879 
	`yyîr‹
("IllegalÅo declareÜocal variable ofÅype void.");

2881 (
yyvÆ
.
numbî
Ë
	`add_loˇl_«me
((
yyv•
[0].
°rög
), (yyv•[-2].
ty≥
) | (yyvsp[-1].type));

2882 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

2891 
ty≥
 = 
ty≥_of_loˇls_±r
[(
yyv•
[-2].
numbî
)];

2893 i‡(
ty≥
 & 
LOCAL_MOD_REF
) {

2894 
	`yyîr‹
("IllegalÅo declareÜocal variableásÑeference");

2895 
ty≥_of_loˇls_±r
[(
yyv•
[-2].
numbî
)] &~
LOCAL_MOD_REF
;

2897 
ty≥
 &~
LOCAL_MODS
;

2899 i‡((
yyv•
[-1].
numbî
Ë!
F_ASSIGN
)

2900 
	`yyîr‹
("Only '=' isállowed in initializers.");

2901 i‡(!
	`com∑tibÀ_ty≥s
((
yyv•
[0].
node
)->
ty≥
,Åype)) {

2902 
buff
[256];

2903 *
íd
 = 
	`EndOf
(
buff
);

2904 *
p
;

2906 
p
 = 
	`°Ωut
(
buff
, 
íd
, "Type mismatch ");

2907 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
ty≥
, (
yyv•
[0].
node
)->type);

2908 
p
 = 
	`°Ωut
’, 
íd
, " when initializing.");

2909 
	`yyîr‹
(
buff
);

2912 (
yyv•
[0].
node
Ë
	`do_¥omŸi⁄s
((yyv•[0].node), 
ty≥
);

2915 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ASSIGN
, 0, (
yyv•
[0].node), 0);

2916 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
r
.
ex¥
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[-2].
numbî
));

2925 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[0].node);

2926 (
yyvÆ
.
de˛
).
num
 = 1;

2935 i‡((
yyv•
[-2].
node
Ë&& (yyv•[0].
de˛
).node) {

2936 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-2].node), (yyvsp[0].decl).node);

2937 } (
yyvÆ
.
de˛
).
node
 = ((
yyv•
[-2].node) ? (yyvsp[-2].node) : (yyvsp[0].decl).node);

2938 (
yyvÆ
.
de˛
).
num
 = 1 + (
yyv•
[0].decl).num;

2947 (
yyvÆ
.
node
) = 0;

2956 i‡((
yyv•
[-1].
node
) && (yyvsp[0].node)) {

2957 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[-1].node), (yyvsp[0].node));

2958 } (
yyvÆ
.
node
Ë((
yyv•
[-1].node) ? (yyvsp[-1].node) : (yyvsp[0].node));

2967 (
yyvÆ
.
node
) = 0;

2976 (
yyvÆ
.
node
Ë
	`p›_vÆue
((
yyv•
[-1].node));

2977 #ifde‡
DEBUG


2979 
∑r£_node_t
 *
ª∂a˚mít
;

2980 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyvÆ
.
node
), 0);

2981 
	`CREATE_OPCODE
(
ª∂a˚mít
->
r
.
ex¥
, 
F_BREAK_POINT
, 0);

2982 (
yyvÆ
.
node
Ë
ª∂a˚mít
;

2993 (
yyvÆ
.
node
Ë(
yyv•
[0].
de˛
).node;

2994 
	`p›_n_loˇls
((
yyv•
[0].
de˛
).
num
);

3003 (
yyvÆ
.
node
) = 0;

3012 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
) {

3013 
	`yyîr‹
("Cannot break out of catch { } orÅime_expression { }");

3014 (
yyvÆ
.
node
) = 0;

3016 i‡(
c⁄ãxt
 & 
SWITCH_CONTEXT
) {

3017 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_BREAK_SWITCH
);

3019 i‡(
c⁄ãxt
 & 
LOOP_CONTEXT
) {

3020 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_BREAK
);

3021 i‡(
c⁄ãxt
 & 
LOOP_FOREACH
) {

3022 
∑r£_node_t
 *
ª∂a˚
;

3023 
	`CREATE_STATEMENTS
(
ª∂a˚
, 0, (
yyvÆ
.
node
));

3024 
	`CREATE_OPCODE
(
ª∂a˚
->
l
.
ex¥
, 
F_EXIT_FOREACH
, 0);

3025 (
yyvÆ
.
node
Ë
ª∂a˚
;

3028 
	`yyîr‹
("break statement outsideÜoop");

3029 (
yyvÆ
.
node
) = 0;

3039 i‡(
c⁄ãxt
 & 
SPECIAL_CONTEXT
)

3040 
	`yyîr‹
("Cannot continue out of catch { } orÅime_expression { }");

3042 i‡(!(
c⁄ãxt
 & 
LOOP_CONTEXT
))

3043 
	`yyîr‹
("continue statement outsideÜoop");

3044 
	`CREATE_CONTROL_JUMP
((
yyvÆ
.
node
), 
CJ_CONTINUE
);

3053 (
yyv•
[-3].
numbî
Ë
c⁄ãxt
;

3054 
c⁄ãxt
 = 
LOOP_CONTEXT
;

3063 
	`CREATE_LOOP
((
yyvÆ
.
node
), 1, (
yyv•
[0].node), 0, 
	`›timize_lo›_ã°
((yyvsp[-3].node)));

3064 
c⁄ãxt
 = (
yyv•
[-5].
numbî
);

3073 (
yyv•
[0].
numbî
Ë
c⁄ãxt
;

3074 
c⁄ãxt
 = 
LOOP_CONTEXT
;

3083 
	`CREATE_LOOP
((
yyvÆ
.
node
), 0, (
yyv•
[-5].node), 0, 
	`›timize_lo›_ã°
((yyvsp[-2].node)));

3084 
c⁄ãxt
 = (
yyv•
[-7].
numbî
);

3093 (
yyv•
[-5].
de˛
).
node
 = 
	`p›_vÆue
((yyvsp[-5].decl).node);

3094 (
yyv•
[-7].
numbî
Ë
c⁄ãxt
;

3095 
c⁄ãxt
 = 
LOOP_CONTEXT
;

3104 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-7].decl).num;

3106 (
yyv•
[-3].
node
Ë
	`p›_vÆue
((yyvsp[-3].node));

3107 i‡((
yyv•
[-3].
node
Ë&& 
	`IS_NODE
((yyv•[-3].node), 
NODE_UNARY_OP
, 
F_INC
)

3108 && 
	`IS_NODE
((
yyv•
[-3].
node
)->
r
.
ex¥
, 
NODE_OPCODE_1
, 
F_LOCAL_LVALUE
)) {

3109 
lv¨
 = (
yyv•
[-3].
node
)->
r
.
ex¥
->
l
.
numbî
;

3110 
	`CREATE_OPCODE_1
((
yyv•
[-3].
node
), 
F_LOOP_INCR
, 0, 
lv¨
);

3113 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-7].decl).node, 0);

3114 
	`CREATE_LOOP
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
, 1, (
yyv•
[0].node), (yyv•[-3].node), 
	`›timize_lo›_ã°
((yyvsp[-5].node)));

3116 
c⁄ãxt
 = (
yyv•
[-9].
numbî
);

3125 i‡((
yyv•
[0].
ihe
)->
dn
.
loˇl_num
 != -1) {

3126 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[0].
ihe
)->
dn
.
loˇl_num
);

3127 
ty≥_of_loˇls_±r
[(
yyv•
[0].
ihe
)->
dn
.
loˇl_num
] &~
LOCAL_MOD_UNUSED
;

3129 i‡((
yyv•
[0].
ihe
)->
dn
.
globÆ_num
 != -1) {

3130 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, (
yyv•
[0].
ihe
)->
dn
.
globÆ_num
);

3132 
buf
[256];

3133 *
íd
 = 
	`EndOf
(
buf
);

3134 *
p
;

3136 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

3137 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

3138 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

3139 
	`yyîr‹
(
buf
);

3140 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, 0);

3142 (
yyvÆ
.
de˛
).
num
 = 0;

3151 i‡(
ty≥_of_loˇls_±r
[(
yyv•
[0].
numbî
)] & 
LOCAL_MOD_REF
) {

3152 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_REF_LVALUE
, 0, (
yyv•
[0].
numbî
));

3154 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_LOCAL_LVALUE
, 0, (
yyv•
[0].
numbî
));

3155 
ty≥_of_loˇls_±r
[(
yyv•
[0].
numbî
)] &~
LOCAL_MOD_UNUSED
;

3157 (
yyvÆ
.
de˛
).
num
 = 1;

3166 
buf
[256];

3167 *
íd
 = 
	`EndOf
(
buf
);

3168 *
p
;

3170 
p
 = 
	`°Ωut
(
buf
, 
íd
, "'");

3171 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

3172 
p
 = 
	`°Ωut
’, 
íd
, "' isÇotáÜocal orá global variable.");

3173 
	`yyîr‹
(
buf
);

3174 
	`CREATE_OPCODE_1
((
yyvÆ
.
de˛
).
node
, 
F_GLOBAL_LVALUE
, 0, 0);

3175 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

3176 (
yyvÆ
.
de˛
).
num
 = 0;

3185 
	`CREATE_FOREACH
((
yyvÆ
.
de˛
).
node
, (
yyv•
[0].decl).node, 0);

3186 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[0].decl).num;

3195 
	`CREATE_FOREACH
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-2].decl).node, (yyvsp[0].decl).node);

3196 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-2].decl).num + (yyvsp[0].decl).num;

3197 i‡((
yyv•
[-2].
de˛
).
node
->
v
.
numbî
 =
F_REF_LVALUE
)

3198 
	`yyîr‹
("Mapping key mayÇot beáÑeference in foreach()");

3207 (
yyv•
[-3].
de˛
).
node
->
v
.
ex¥
 = (yyvsp[-1].node);

3208 (
yyv•
[-5].
numbî
Ë
c⁄ãxt
;

3209 
c⁄ãxt
 = 
LOOP_CONTEXT
 | 
LOOP_FOREACH
;

3218 (
yyvÆ
.
de˛
).
num
 = (
yyv•
[-5].decl).num;

3220 
	`CREATE_STATEMENTS
((
yyvÆ
.
de˛
).
node
, (
yyv•
[-5].decl).node, 0);

3221 
	`CREATE_LOOP
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
, 2, (
yyv•
[0].node), 0, 0);

3222 
	`CREATE_OPCODE
((
yyvÆ
.
de˛
).
node
->
r
.
ex¥
->r.ex¥, 
F_NEXT_FOREACH
, 0);

3224 
c⁄ãxt
 = (
yyv•
[-7].
numbî
);

3233 (
yyvÆ
.
node
) = 0;

3242 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[0].node);

3243 (
yyvÆ
.
de˛
).
num
 = 0;

3252 (
yyvÆ
.
de˛
).
node
 = (
yyv•
[0].node);

3253 (
yyvÆ
.
de˛
).
num
 = 1;

3262 (
yyv•
[-3].
numbî
Ë
c⁄ãxt
;

3263 
c⁄ãxt
 &
LOOP_CONTEXT
;

3264 
c⁄ãxt
 |
SWITCH_CONTEXT
;

3265 (
yyv•
[-2].
numbî
Ë
mem_block
[
A_CASES
].
cuºít_size
;

3274 
∑r£_node_t
 *
node1
, *
node2
;

3276 i‡((
yyv•
[-1].
node
)) {

3277 
	`CREATE_STATEMENTS
(
node1
, (
yyv•
[-2].
node
), (yyvsp[-1].node));

3278 } 
node1
 = (
yyv•
[-2].
node
);

3280 i‡(
c⁄ãxt
 & 
SWITCH_STRINGS
) {

3281 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_STRINGS
);

3282 } i‡(
c⁄ãxt
 & 
SWITCH_RANGES
) {

3283 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_RANGES
);

3285 
	`NODE_NO_LINE
(
node2
, 
NODE_SWITCH_NUMBERS
);

3288 
node2
->
l
.
ex¥
 = (
yyv•
[-7].
node
);

3289 
node2
->
r
.
ex¥
 = 
node1
;

3290 
	`¥ï¨e_ˇ£s
(
node2
, (
yyv•
[-8].
numbî
));

3291 
c⁄ãxt
 = (
yyv•
[-9].
numbî
);

3292 (
yyvÆ
.
node
Ë
node2
;

3293 
	`p›_n_loˇls
((
yyv•
[-3].
de˛
).
num
);

3302 i‡((
yyv•
[0].
node
)){

3303 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[-1].node), (yyvsp[0].node));

3304 } (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

3313 i‡((
yyv•
[0].
node
)){

3314 
	`CREATE_STATEMENTS
((
yyvÆ
.
node
), (
yyv•
[-1].node), (yyvsp[0].node));

3315 } (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

3324 (
yyvÆ
.
node
) = 0;

3333 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

3334 (
yyvÆ
.
node
)->
v
.
ex¥
 = 0;

3336 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyv•
[-1].
node
)), ((yyvsp[-1].node)));

3345 i‡–(
yyv•
[-3].
node
)->
köd
 !
NODE_CASE_NUMBER


3346 || (
yyv•
[-1].
node
)->
köd
 !
NODE_CASE_NUMBER
 )

3347 
	`yyîr‹
("String caseÜabelsÇotállowedásÑange bounds");

3348 i‡((
yyv•
[-3].
node
)->
r
.
numbî
 > (yyvsp[-1].node)->r.number) ;

3350 
c⁄ãxt
 |
SWITCH_RANGES
;

3352 (
yyvÆ
.
node
Ë(
yyv•
[-3].node);

3353 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[-1].node);

3355 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyv•
[-3].
node
)), ((yyvsp[-3].node)));

3364 i‡(
c⁄ãxt
 & 
SWITCH_DEFAULT
) {

3365 
	`yyîr‹
("Duplicate default");

3366 (
yyvÆ
.
node
) = 0;

3369 (
yyvÆ
.
node
Ë
	`√w_node
();

3370 (
yyvÆ
.
node
)->
köd
 = 
NODE_DEFAULT
;

3371 (
yyvÆ
.
node
)->
v
.
ex¥
 = 0;

3372 
	`add_to_mem_block
(
A_CASES
, (*)&((
yyvÆ
.
node
)), ((yyval.node)));

3373 
c⁄ãxt
 |
SWITCH_DEFAULT
;

3382 i‡((
c⁄ãxt
 & 
SWITCH_STRINGS
Ë&& (
yyv•
[0].
poöãr_öt
))

3383 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

3385 i‡((
yyv•
[0].
poöãr_öt
)Ë
c⁄ãxt
 |
SWITCH_NUMBERS
;

3387 (
yyvÆ
.
node
Ë
	`√w_node
();

3388 (
yyvÆ
.
node
)->
köd
 = 
NODE_CASE_NUMBER
;

3389 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
∑r£_node_t
 *)(
yyv•
[0].
poöãr_öt
);

3398 
°r
;

3400 
°r
 = 
	`°‹e_¥og_°rög
((
yyv•
[0].
°rög
));

3401 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

3402 i‡(
c⁄ãxt
 & 
SWITCH_NUMBERS
)

3403 
	`yyîr‹
("Mixed caseÜabelÜistÇotállowed");

3404 
c⁄ãxt
 |
SWITCH_STRINGS
;

3405 (
yyvÆ
.
node
Ë
	`√w_node
();

3406 (
yyvÆ
.
node
)->
köd
 = 
NODE_CASE_STRING
;

3407 (
yyvÆ
.
node
)->
r
.
numbî
 = 
°r
;

3416 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) | (yyvsp[0].pointer_int);

3425 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) ^ (yyvsp[0].pointer_int);

3434 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) & (yyvsp[0].pointer_int);

3443 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) == (yyvsp[0].pointer_int);

3452 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) != (yyvsp[0].pointer_int);

3461 (
yyv•
[-1].
numbî
)){

3462 
F_GE
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) >= (yyvsp[0].pointer_int); ;

3463 
F_LE
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) <= (yyvsp[0].pointer_int); ;

3464 
F_GT
: (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) > (yyvsp[0].pointer_int); ;

3474 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) < (yyvsp[0].pointer_int);

3483 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) << (yyvsp[0].pointer_int);

3492 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) >> (yyvsp[0].pointer_int);

3501 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) + (yyvsp[0].pointer_int);

3510 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) - (yyvsp[0].pointer_int);

3519 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-2].pointer_int) * (yyvsp[0].pointer_int);

3528 i‡((
yyv•
[0].
poöãr_öt
)Ë(
yyvÆ
.poöãr_ötË(yyv•[-2].poöãr_ötË% (yyv•[0].poöãr_öt); 
	`yyîr‹
("Modulo by zero");

3537 i‡((
yyv•
[0].
poöãr_öt
)Ë(
yyvÆ
.poöãr_ötË(yyv•[-2].poöãr_ötË/ (yyv•[0].poöãr_öt); 
	`yyîr‹
("Division by zero");

3546 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[-1].pointer_int);

3555 (
yyvÆ
.
poöãr_öt
Ë(
yyv•
[0].
numbî
);

3564 (
yyvÆ
.
poöãr_öt
Ë-(
yyv•
[0].
numbî
);

3573 (
yyvÆ
.
poöãr_öt
Ë!(
yyv•
[0].
numbî
);

3582 (
yyvÆ
.
poöãr_öt
Ë~(
yyv•
[0].
numbî
);

3591 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

3600 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), (
yyv•
[0].node)->
ty≥
, 
	`p›_vÆue
((yyvsp[-2].node)), (yyvsp[0].node));

3609 
›
;

3611 i‡(!(
c⁄ãxt
 & 
ARG_LIST
))

3612 
	`yyîr‹
("ref illegal outside functionárgumentÜist");

3614 
num_ªfs
++;

3616 (
yyv•
[0].
node
)->
köd
) {

3617 
NODE_PARAMETER_LVALUE
:

3618 
›
 = 
F_LOCAL_LVALUE
;

3620 
NODE_TERNARY_OP
:

3621 
NODE_OPCODE_1
:

3622 
NODE_UNARY_OP_1
:

3623 
NODE_BINARY_OP
:

3624 
›
 = (
yyv•
[0].
node
)->
v
.
numbî
;

3625 i‡(
›
 > 
F_RINDEX_LVALUE
) {

3626 
	`yyîr‹
("IllegalÅo makeÑeferenceÅoÑange");

3630 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MAKE_REF
, 
TYPE_ANY
, (
yyv•
[0].node), 
›
);

3639 
∑r£_node_t
 *
l
 = (
yyv•
[-2].
node
), *
r
 = (yyvsp[0].node);

3644 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), (
yyv•
[-1].
numbî
), 
r
->
ty≥
,Ñ, 
l
);

3646 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
(
r
->
ty≥
, 
l
->type) &&

3647 !((
yyv•
[-1].
numbî
Ë=
F_ADD_EQ


3648 && 
r
->
ty≥
 =
TYPE_STRING
 &&

3649 
	`COMP_TYPE
(
l
->
ty≥
, 
TYPE_NUMBER
))) {

3650 
buf
[256];

3651 *
íd
 = 
	`EndOf
(
buf
);

3652 *
p
;

3654 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badássignment ");

3655 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
l
->
ty≥
, 
r
->type);

3656 
p
 = 
	`°Ωut
’, 
íd
, ".");

3657 
	`yyîr‹
(
buf
);

3660 i‡((
yyv•
[-1].
numbî
Ë=
F_ASSIGN
)

3661 (
yyvÆ
.
node
)->
l
.
ex¥
 = 
	`do_¥omŸi⁄s
(
r
,Ü->
ty≥
);

3670 
	`yyîr‹
("Illegal LHS");

3671 
	`CREATE_ERROR
((
yyvÆ
.
node
));

3680 
∑r£_node_t
 *
p1
 = (
yyv•
[-2].
node
), *
p2
 = (yyvsp[0].node);

3682 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
(
p1
->
ty≥
, 
p2
->type)) {

3683 
buf
[256];

3684 *
íd
 = 
	`EndOf
(
buf
);

3685 *
p
;

3687 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Types in ?: doÇot match ");

3688 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
p1
->
ty≥
, 
p2
->type);

3689 
p
 = 
	`°Ωut
’, 
íd
, ".");

3690 
	`yyw¨n
(
buf
);

3694 i‡(
	`IS_NODE
((
yyv•
[-4].
node
), 
NODE_UNARY_OP
, 
F_NOT
)) {

3696 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[-4].node)->
r
.
ex¥
, 
p2
, 
p1
);

3698 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[-4].node), 
p1
, 
p2
);

3700 (
yyvÆ
.
node
)->
ty≥
 = ((
p1
->ty≥ =
p2
->ty≥Ë?Ö1->ty≥ : 
TYPE_ANY
);

3709 
	`CREATE_LAND_LOR
((
yyvÆ
.
node
), 
F_LOR
, (
yyv•
[-2].node), (yyvsp[0].node));

3710 i‡(
	`IS_NODE
((
yyv•
[-2].
node
), 
NODE_LAND_LOR
, 
F_LOR
))

3711 (
yyv•
[-2].
node
)->
köd
 = 
NODE_BRANCH_LINK
;

3720 
	`CREATE_LAND_LOR
((
yyvÆ
.
node
), 
F_LAND
, (
yyv•
[-2].node), (yyvsp[0].node));

3721 i‡(
	`IS_NODE
((
yyv•
[-2].
node
), 
NODE_LAND_LOR
, 
F_LAND
))

3722 (
yyv•
[-2].
node
)->
köd
 = 
NODE_BRANCH_LINK
;

3731 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3733 i‡(
	`is_boﬁón
((
yyv•
[-2].
node
)) && is_boolean((yyvsp[0].node)))

3734 
	`yyw¨n
("bitwise operation on boolean values.");

3735 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

3736 i‡(
t1
 !
t3
) {

3737 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

3738 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

3739 
buf
[256];

3740 *
íd
 = 
	`EndOf
(
buf
);

3741 *
p
;

3743 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for | ");

3744 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3745 
p
 = 
	`°Ωut
’, 
íd
, ".");

3746 
	`yyîr‹
(
buf
);

3748 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

3750 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_OR
, 
t1
, (
yyv•
[-2].node), (yyvsp[0].node));

3752 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_OR
, "|");

3761 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_XOR
, "^");

3770 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3771 i‡(
	`is_boﬁón
((
yyv•
[-2].
node
)) && is_boolean((yyvsp[0].node)))

3772 
	`yyw¨n
("bitwise operation on boolean values.");

3773 i‡((
t1
 & 
TYPE_MOD_ARRAY
Ë|| (
t3
 & TYPE_MOD_ARRAY)) {

3774 i‡(
t1
 !
t3
) {

3775 i‡((
t1
 !
TYPE_ANY
Ë&& (
t3
 != TYPE_ANY) &&

3776 !(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
)) {

3777 
buf
[256];

3778 *
íd
 = 
	`EndOf
(
buf
);

3779 *
p
;

3781 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IncompatibleÅypes for & ");

3782 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3783 
p
 = 
	`°Ωut
’, 
íd
, ".");

3784 
	`yyîr‹
(
buf
);

3786 
t1
 = 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
;

3788 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_AND
, 
t1
, (
yyv•
[-2].node), (yyvsp[0].node));

3789 } (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_AND
, "&");

3798 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
((
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type)){

3799 
buf
[256];

3800 *
íd
 = 
	`EndOf
(
buf
);

3801 *
p
;

3803 
p
 = 
	`°Ωut
(
buf
, 
íd
, "==álways false because of incompatibleÅypes ");

3804 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type);

3805 
p
 = 
	`°Ωut
’, 
íd
, ".");

3806 
	`yyîr‹
(
buf
);

3809 i‡(
	`IS_NODE
((
yyv•
[-2].
node
), 
NODE_NUMBER
, 0)) {

3810 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[0].node));

3812 i‡(
	`IS_NODE
((
yyv•
[0].
node
), 
NODE_NUMBER
, 0)) {

3813 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[-2].node));

3815 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_EQ
, 
TYPE_NUMBER
, (
yyv•
[-2].node), (yyvsp[0].node));

3825 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s2
((
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type)){

3826 
buf
[256];

3827 *
íd
 = 
	`EndOf
(
buf
);

3828 *
p
;

3830 
p
 = 
	`°Ωut
(
buf
, 
íd
, "!=álwaysÅrue because of incompatibleÅypes ");

3831 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[-2].
node
)->
ty≥
, (yyvsp[0].node)->type);

3832 
p
 = 
	`°Ωut
’, 
íd
, ".");

3833 
	`yyîr‹
(
buf
);

3835 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_NE
, 
TYPE_NUMBER
, (
yyv•
[-2].node), (yyvsp[0].node));

3844 i‡(
exa˘_ty≥s
) {

3845 
t1
 = (
yyv•
[-2].
node
)->
ty≥
;

3846 
t3
 = (
yyv•
[0].
node
)->
ty≥
;

3848 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

3849 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

3850 
buf
[256];

3851 *
íd
 = 
	`EndOf
(
buf
);

3852 *
p
;

3854 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '");

3855 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
((
yyv•
[-1].
numbî
)));

3856 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

3857 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

3858 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3859 
	`yyîr‹
(
buf
);

3860 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

3861 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

3862 
buf
[256];

3863 *
íd
 = 
	`EndOf
(
buf
);

3864 *
p
;

3866 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '");

3867 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
((
yyv•
[-1].
numbî
)));

3868 
p
 = 
	`°Ωut
’, 
íd
, "' : \"");

3869 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

3870 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3871 
	`yyîr‹
(
buf
);

3872 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

3873 
buf
[256];

3874 *
íd
 = 
	`EndOf
(
buf
);

3875 *
p
;

3877 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo ");

3878 
p
 = 
	`°Ωut
’, 
íd
, 
	`quîy_ö°r_«me
((
yyv•
[-1].
numbî
)));

3879 
p
 = 
	`°Ωut
’, 
íd
, " doÇot have compatibleÅypes : ");

3880 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3881 
	`yyîr‹
(
buf
);

3884 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), (
yyv•
[-1].
numbî
), 
TYPE_NUMBER
, (yyvsp[-2].node), (yyvsp[0].node));

3893 i‡(
exa˘_ty≥s
) {

3894 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3896 i‡(!
	`COMP_TYPE
(
t1
, 
TYPE_NUMBER
)

3897 && !
	`COMP_TYPE
(
t1
, 
TYPE_STRING
)) {

3898 
buf
[256];

3899 *
íd
 = 
	`EndOf
(
buf
);

3900 *
p
;

3902 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÜeftárgumentÅo '<' : \"");

3903 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t1
);

3904 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3905 
	`yyîr‹
(
buf
);

3906 } i‡(!
	`COMP_TYPE
(
t3
, 
TYPE_NUMBER
)

3907 && !
	`COMP_TYPE
(
t3
, 
TYPE_STRING
)) {

3908 
buf
[200];

3909 *
íd
 = 
	`EndOf
(
buf
);

3910 *
p
;

3912 
p
 = 
	`°Ωut
(
buf
, 
íd
, "BadÑightárgumentÅo '<' : \"");

3913 
p
 = 
	`gë_ty≥_«me
’, 
íd
, 
t3
);

3914 
p
 = 
	`°Ωut
’, 
íd
, "\"");

3915 
	`yyîr‹
(
buf
);

3916 } i‡(!
	`com∑tibÀ_ty≥s2
(
t1
,
t3
)) {

3917 
buf
[256];

3918 *
íd
 = 
	`EndOf
(
buf
);

3919 *
p
;

3921 
p
 = 
	`°Ωut
(
buf
, 
íd
, "ArgumentsÅo < doÇot have compatibleÅypes : ");

3922 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

3923 
	`yyîr‹
(
buf
);

3926 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_LT
, 
TYPE_NUMBER
, (
yyv•
[-2].node), (yyvsp[0].node));

3935 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_LSH
, "<<");

3944 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_RSH
, ">>");

3953 
ªsu…_ty≥
;

3955 i‡(
exa˘_ty≥s
) {

3956 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

3958 i‡(
t1
 =
t3
){

3959 #ifde‡
CAST_CALL_OTHERS


3960 i‡(
t1
 =
TYPE_UNKNOWN
){

3961 
	`yyîr‹
("BadárgumentsÅo '+' (unknown vs unknown)");

3962 
ªsu…_ty≥
 = 
TYPE_ANY
;

3965 
ªsu…_ty≥
 = 
t1
;

3967 i‡(
t1
 =
TYPE_ANY
) {

3968 i‡(
t3
 =
TYPE_FUNCTION
) {

3969 
	`yyîr‹
("BadÑightárgumentÅo '+' (function)");

3970 
ªsu…_ty≥
 = 
TYPE_ANY
;

3971 } 
ªsu…_ty≥
 = 
t3
;

3972 } i‡(
t3
 =
TYPE_ANY
) {

3973 i‡(
t1
 =
TYPE_FUNCTION
) {

3974 
	`yyîr‹
("BadÜeftárgumentÅo '+' (function)");

3975 
ªsu…_ty≥
 = 
TYPE_ANY
;

3976 } 
ªsu…_ty≥
 = 
t1
;

3978 
t1
) {

3979 
TYPE_STRING
:

3981 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_NUMBER
){

3982 
ªsu…_ty≥
 = 
TYPE_STRING
;

3983 } 
add_îr‹
;

3986 
TYPE_NUMBER
:

3988 i‡(
t3
 =
TYPE_REAL
 ||Å3 =
TYPE_STRING
)

3989 
ªsu…_ty≥
 = 
t3
;

3990 
add_îr‹
;

3993 
TYPE_REAL
:

3995 i‡(
t3
 =
TYPE_NUMBER
Ë
ªsu…_ty≥
 = 
TYPE_REAL
;

3996 i‡(
t3
 =
TYPE_STRING
Ë
ªsu…_ty≥
 = TYPE_STRING;

3997 
add_îr‹
;

4002 i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
) {

4003 
ªsu…_ty≥
 = 
TYPE_ANY
|
TYPE_MOD_ARRAY
;

4006 
add_îr‹
:

4008 
buf
[256];

4009 *
íd
 = 
	`EndOf
(
buf
);

4010 *
p
;

4012 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidárgumentÅypesÅo '+' ");

4013 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4014 
	`yyîr‹
(
buf
);

4015 
ªsu…_ty≥
 = 
TYPE_ANY
;

4021 
ªsu…_ty≥
 = 
TYPE_ANY
;

4032 (
yyv•
[-2].
node
)->
köd
) {

4033 
NODE_NUMBER
:

4035 i‡((
yyv•
[-2].
node
)->
v
.
numbî
 == 0 &&

4036 ((
yyv•
[0].
node
)->
ty≥
 =
TYPE_NUMBER
 || (yyv•[0].node)->ty≥ =
TYPE_REAL
)) {

4037 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4040 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4041 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4042 (
yyv•
[-2].
node
)->
v
.
numbî
 += (yyvsp[0].node)->v.number;

4045 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4046 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4047 (
yyv•
[0].
node
)->
v
.
ªÆ
 +(yyv•[-2].node)->v.
numbî
;

4051 i‡((
yyv•
[0].
node
)->
ty≥
 !
TYPE_STRING
 && (yyv•[0].node)->ty≥ !
TYPE_ANY
)

4052 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4054 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4056 
NODE_REAL
:

4057 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4058 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4059 (
yyv•
[-2].
node
)->
v
.
ªÆ
 +(yyv•[0].node)->v.
numbî
;

4062 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4063 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4064 (
yyv•
[-2].
node
)->
v
.
ªÆ
 += (yyvsp[0].node)->v.real;

4068 i‡((
yyv•
[0].
node
)->
ty≥
 !
TYPE_STRING
 && (yyv•[0].node)->ty≥ !
TYPE_ANY
)

4069 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4071 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4073 
NODE_STRING
:

4074 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_STRING
) {

4076 
n1
, 
n2
;

4077 *
√w
, *
s1
, *
s2
;

4078 
l
;

4080 
n1
 = (
yyv•
[-2].
node
)->
v
.
numbî
;

4081 
n2
 = (
yyv•
[0].
node
)->
v
.
numbî
;

4082 
s1
 = 
	`PROG_STRING
(
n1
);

4083 
s2
 = 
	`PROG_STRING
(
n2
);

4084 
√w
 = (*)
	`DXALLOC
–(
l
 = 
	`°æí
(
s1
))+°æí(
s2
)+1, 
TAG_COMPILER
, "combine string" );

4085 
	`°r˝y
(
√w
, 
s1
);

4086 
	`°rˇt
(
√w
 + 
l
, 
s2
);

4088 i‡(
n1
 > 
n2
) {

4089 
	`‰ì_¥og_°rög
(
n1
); fªe_¥og_°rög(
n2
);

4091 
	`‰ì_¥og_°rög
(
n2
); fªe_¥og_°rög(
n1
);

4093 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4094 (
yyvÆ
.
node
)->
v
.
numbî
 = 
	`°‹e_¥og_°rög
(
√w
);

4095 
	`FREE
(
√w
);

4106 i‡(
	`IS_NODE
((
yyv•
[0].
node
), 
NODE_NUMBER
, 0) &&

4107 ((
yyv•
[-2].
node
)->
ty≥
 =
TYPE_NUMBER
 || (yyv•[-2].node)->ty≥ =
TYPE_REAL
)) {

4108 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4111 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_ADD
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4122 
ªsu…_ty≥
;

4124 i‡(
exa˘_ty≥s
) {

4125 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

4127 i‡(
t1
 =
t3
){

4128 
t1
){

4129 
TYPE_ANY
:

4130 
TYPE_NUMBER
:

4131 
TYPE_REAL
:

4132 
ªsu…_ty≥
 = 
t1
;

4135 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

4136 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

4137 
ªsu…_ty≥
 = 
TYPE_ANY
;

4138 } 
ªsu…_ty≥
 = 
t1
;

4140 } i‡(
t1
 =
TYPE_ANY
){

4141 
t3
){

4142 
TYPE_REAL
:

4143 
TYPE_NUMBER
:

4144 
ªsu…_ty≥
 = 
t3
;

4147 i‡(!(
t3
 & 
TYPE_MOD_ARRAY
)){

4148 
	`ty≥_îr‹
("Badárgumíànumbî 2Åÿ'-'", 
t3
);

4149 
ªsu…_ty≥
 = 
TYPE_ANY
;

4150 } 
ªsu…_ty≥
 = 
t3
;

4152 } i‡(
t3
 =
TYPE_ANY
){

4153 
t1
){

4154 
TYPE_REAL
:

4155 
TYPE_NUMBER
:

4156 
ªsu…_ty≥
 = 
t1
;

4159 i‡(!(
t1
 & 
TYPE_MOD_ARRAY
)){

4160 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'-'", 
t1
);

4161 
ªsu…_ty≥
 = 
TYPE_ANY
;

4162 } 
ªsu…_ty≥
 = 
t1
;

4164 } i‡((
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
) ||

4165 (
t3
 =
TYPE_REAL
 && 
t1
 =
TYPE_NUMBER
)){

4166 
ªsu…_ty≥
 = 
TYPE_REAL
;

4167 } i‡(
t1
 & 
t3
 & 
TYPE_MOD_ARRAY
){

4168 
ªsu…_ty≥
 = 
TYPE_MOD_ARRAY
|
TYPE_ANY
;

4170 
buf
[256];

4171 *
íd
 = 
	`EndOf
(
buf
);

4172 *
p
;

4174 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '-' ");

4175 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4176 
	`yyîr‹
(
buf
);

4177 
ªsu…_ty≥
 = 
TYPE_ANY
;

4179 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4181 (
yyv•
[-2].
node
)->
köd
) {

4182 
NODE_NUMBER
:

4183 i‡((
yyv•
[-2].
node
)->
v
.
numbî
 == 0) {

4184 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NEGATE
, (
yyv•
[0].node)->
ty≥
, (yyvsp[0].node));

4185 } i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4186 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4187 (
yyv•
[-2].
node
)->
v
.
numbî
 -= (yyvsp[0].node)->v.number;

4188 } i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4189 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4190 (
yyv•
[0].
node
)->
v
.
ªÆ
 = (yyv•[-2].node)->v.
numbî
 - (yyvsp[0].node)->v.real;

4192 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4195 
NODE_REAL
:

4196 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4197 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4198 (
yyv•
[-2].
node
)->
v
.
ªÆ
 -(yyv•[0].node)->v.
numbî
;

4199 } i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4200 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4201 (
yyv•
[-2].
node
)->
v
.
ªÆ
 -= (yyvsp[0].node)->v.real;

4203 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4208 i‡(
	`IS_NODE
((
yyv•
[0].
node
), 
NODE_NUMBER
, 0)) {

4209 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4211 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_SUBTRACT
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4221 
ªsu…_ty≥
;

4223 i‡(
exa˘_ty≥s
){

4224 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

4226 i‡(
t1
 =
t3
){

4227 
t1
){

4228 
TYPE_MAPPING
:

4229 
TYPE_ANY
:

4230 
TYPE_NUMBER
:

4231 
TYPE_REAL
:

4232 
ªsu…_ty≥
 = 
t1
;

4235 
	`ty≥_îr‹
("Badárgumíànumbî 1Åÿ'*'", 
t1
);

4236 
ªsu…_ty≥
 = 
TYPE_ANY
;

4238 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

4239 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

4240 
t
){

4241 
TYPE_NUMBER
:

4242 
TYPE_REAL
:

4243 
TYPE_MAPPING
:

4244 
ªsu…_ty≥
 = 
t
;

4247 
	`ty≥_îr‹
((
t1
 =
TYPE_ANY
) ?

4250 
t
);

4251 
ªsu…_ty≥
 = 
TYPE_ANY
;

4253 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

4254 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)){

4255 
ªsu…_ty≥
 = 
TYPE_REAL
;

4257 
buf
[256];

4258 *
íd
 = 
	`EndOf
(
buf
);

4259 *
p
;

4261 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '*' ");

4262 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4263 
	`yyîr‹
(
buf
);

4264 
ªsu…_ty≥
 = 
TYPE_ANY
;

4266 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4268 (
yyv•
[-2].
node
)->
köd
) {

4269 
NODE_NUMBER
:

4270 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4271 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4272 (
yyvÆ
.
node
)->
v
.
numbî
 *(
yyv•
[0].node)->v.number;

4275 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4276 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4277 (
yyv•
[0].
node
)->
v
.
ªÆ
 *(yyv•[-2].node)->v.
numbî
;

4280 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4282 
NODE_REAL
:

4283 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4284 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4285 (
yyv•
[-2].
node
)->
v
.
ªÆ
 *(yyv•[0].node)->v.
numbî
;

4288 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4289 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4290 (
yyv•
[-2].
node
)->
v
.
ªÆ
 *= (yyvsp[0].node)->v.real;

4293 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[0].node), (yyvsp[-2].node));

4296 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_MULTIPLY
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4306 (
yyvÆ
.
node
Ë
	`bö¨y_öt_›
((
yyv•
[-2].node), (yyv•[0].node), 
F_MOD
, "%");

4315 
ªsu…_ty≥
;

4317 i‡(
exa˘_ty≥s
){

4318 
t1
 = (
yyv•
[-2].
node
)->
ty≥
, 
t3
 = (yyvsp[0].node)->type;

4320 i‡(
t1
 =
t3
){

4321 
t1
){

4322 
TYPE_NUMBER
:

4323 
TYPE_REAL
:

4324 
TYPE_ANY
:

4325 
ªsu…_ty≥
 = 
t1
;

4328 
	`ty≥_îr‹
("Badárgumíà1Åÿ'/'", 
t1
);

4329 
ªsu…_ty≥
 = 
TYPE_ANY
;

4331 } i‡(
t1
 =
TYPE_ANY
 || 
t3
 == TYPE_ANY){

4332 
t
 = (
t1
 =
TYPE_ANY
Ë? 
t3
 :Å1;

4333 i‡(
t
 =
TYPE_REAL
 ||Å =
TYPE_NUMBER
)

4334 
ªsu…_ty≥
 = 
t
;

4336 
	`ty≥_îr‹
(
t1
 =
TYPE_ANY
 ?

4338 "Badárgumíà1Åÿ'/'", 
t
);

4339 
ªsu…_ty≥
 = 
TYPE_ANY
;

4341 } i‡((
t1
 =
TYPE_NUMBER
 && 
t3
 =
TYPE_REAL
) ||

4342 (
t1
 =
TYPE_REAL
 && 
t3
 =
TYPE_NUMBER
)) {

4343 
ªsu…_ty≥
 = 
TYPE_REAL
;

4345 
buf
[256];

4346 *
íd
 = 
	`EndOf
(
buf
);

4347 *
p
;

4349 
p
 = 
	`°Ωut
(
buf
, 
íd
, "InvalidÅypesÅo '/' ");

4350 
p
 = 
	`gë_two_ty≥s
’, 
íd
, 
t1
, 
t3
);

4351 
	`yyîr‹
(
buf
);

4352 
ªsu…_ty≥
 = 
TYPE_ANY
;

4354 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4357 (
yyv•
[-2].
node
)->
köd
) {

4358 
NODE_NUMBER
:

4359 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4360 i‡((
yyv•
[0].
node
)->
v
.
numbî
 == 0) {

4361 
	`yyîr‹
("Divide by zero in constant");

4362 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4365 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4366 (
yyv•
[-2].
node
)->
v
.
numbî
 /= (yyvsp[0].node)->v.number;

4369 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4370 i‡((
yyv•
[0].
node
)->
v
.
ªÆ
 == 0.0) {

4371 
	`yyîr‹
("Divide by zero in constant");

4372 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4375 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4376 (
yyv•
[0].
node
)->
v
.
ªÆ
 = ((yyv•[-2].node)->v.
numbî
 / (yyvsp[0].node)->v.real);

4379 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4381 
NODE_REAL
:

4382 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4383 i‡((
yyv•
[0].
node
)->
v
.
numbî
 == 0) {

4384 
	`yyîr‹
("Divide by zero in constant");

4385 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4388 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4389 (
yyv•
[-2].
node
)->
v
.
ªÆ
 /(yyv•[0].node)->v.
numbî
;

4392 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_REAL
) {

4393 i‡((
yyv•
[0].
node
)->
v
.
ªÆ
 == 0.0) {

4394 
	`yyîr‹
("Divide by zero in constant");

4395 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4398 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4399 (
yyv•
[-2].
node
)->
v
.
ªÆ
 /= (yyvsp[0].node)->v.real;

4402 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4405 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_DIVIDE
, 
ªsu…_ty≥
, (
yyv•
[-2].node), (yyvsp[0].node));

4415 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4416 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-1].type);

4418 i‡(
exa˘_ty≥s
 &&

4419 (
yyv•
[0].
node
)->
ty≥
 != (yyvsp[-1].type) &&

4420 (
yyv•
[0].
node
)->
ty≥
 !
TYPE_ANY
 &&

4421 (
yyv•
[0].
node
)->
ty≥
 !
TYPE_UNKNOWN
 &&

4422 (
yyv•
[-1].
ty≥
Ë!
TYPE_VOID
) {

4423 
buf
[256];

4424 *
íd
 = 
	`EndOf
(
buf
);

4425 *
p
;

4427 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Cannot cast ");

4428 
p
 = 
	`gë_ty≥_«me
’, 
íd
, (
yyv•
[0].
node
)->
ty≥
);

4429 
p
 = 
	`°Ωut
’, 
íd
, "to ");

4430 
p
 = 
	`gë_ty≥_«me
’, 
íd
, (
yyv•
[-1].
ty≥
));

4431 
	`yyîr‹
(
buf
);

4441 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_PRE_INC
, 0, (
yyv•
[0].node));

4442 i‡(
exa˘_ty≥s
){

4443 (
yyv•
[0].
node
)->
ty≥
){

4444 
TYPE_NUMBER
:

4445 
TYPE_ANY
:

4446 
TYPE_REAL
:

4448 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[0].node)->type;

4454 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4455 
	`ty≥_îr‹
("Badárgumíà1Åÿ++x", (
yyv•
[0].
node
)->
ty≥
);

4458 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4467 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_PRE_DEC
, 0, (
yyv•
[0].node));

4468 i‡(
exa˘_ty≥s
){

4469 (
yyv•
[0].
node
)->
ty≥
){

4470 
TYPE_NUMBER
:

4471 
TYPE_ANY
:

4472 
TYPE_REAL
:

4474 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[0].node)->type;

4480 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4481 
	`ty≥_îr‹
("Badárgumíà1Åÿ--x", (
yyv•
[0].
node
)->
ty≥
);

4484 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4494 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4495 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4496 (
yyvÆ
.
node
)->
v
.
numbî
 = !((yyval.node)->v.number);

4498 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[0].node));

4508 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
((
yyv•
[0].
node
)->
ty≥
, 
TYPE_NUMBER
))

4509 
	`ty≥_îr‹
("Badárgumíàtÿ~", (
yyv•
[0].
node
)->
ty≥
);

4510 i‡((
yyv•
[0].
node
)->
köd
 =
NODE_NUMBER
) {

4511 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4512 (
yyvÆ
.
node
)->
v
.
numbî
 = ~(yyval.node)->v.number;

4514 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_COMPL
, 
TYPE_NUMBER
, (
yyv•
[0].node));

4524 
ªsu…_ty≥
;

4525 i‡(
exa˘_ty≥s
){

4526 
t
 = (
yyv•
[0].
node
)->
ty≥
;

4527 i‡(!
	`COMP_TYPE
(
t
, 
TYPE_NUMBER
)){

4528 
	`ty≥_îr‹
("Badárgumíàtÿu«ry '-'", 
t
);

4529 
ªsu…_ty≥
 = 
TYPE_ANY
;

4530 } 
ªsu…_ty≥
 = 
t
;

4531 } 
ªsu…_ty≥
 = 
TYPE_ANY
;

4533 (
yyv•
[0].
node
)->
köd
) {

4534 
NODE_NUMBER
:

4535 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4536 (
yyvÆ
.
node
)->
v
.
numbî
 = -(yyval.node)->v.number;

4538 
NODE_REAL
:

4539 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4540 (
yyvÆ
.
node
)->
v
.
ªÆ
 = -(yyval.node)->v.real;

4543 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_NEGATE
, 
ªsu…_ty≥
, (
yyv•
[0].node));

4553 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_POST_INC
, 0, (
yyv•
[-1].node));

4554 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_POST_INC
;

4555 i‡(
exa˘_ty≥s
){

4556 (
yyv•
[-1].
node
)->
ty≥
){

4557 
TYPE_NUMBER
:

4558 
TYPE_ANY
:

4559 
TYPE_REAL
:

4561 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-1].node)->type;

4567 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4568 
	`ty≥_îr‹
("Badárgumíà1Åÿx++", (
yyv•
[-1].
node
)->
ty≥
);

4571 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4580 
	`CREATE_UNARY_OP
((
yyvÆ
.
node
), 
F_POST_DEC
, 0, (
yyv•
[-1].node));

4581 i‡(
exa˘_ty≥s
){

4582 (
yyv•
[-1].
node
)->
ty≥
){

4583 
TYPE_NUMBER
:

4584 
TYPE_ANY
:

4585 
TYPE_REAL
:

4587 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-1].node)->type;

4593 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4594 
	`ty≥_îr‹
("Badárgumíà1Åÿx--", (
yyv•
[-1].
node
)->
ty≥
);

4597 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

4606 i‡(
exa˘_ty≥s
 && !
	`IS_TYPE
”xa˘_ty≥s, 
TYPE_VOID
))

4607 
	`yyw¨n
("Non-void functions mustÑeturná value.");

4608 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4617 i‡(
exa˘_ty≥s
 && !
	`com∑tibÀ_ty≥s
((
yyv•
[-1].
node
)->
ty≥
,Éxact_types)) {

4618 
buf
[256];

4619 *
íd
 = 
	`EndOf
(
buf
);

4620 *
p
;

4622 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Type ofÑeturned value doesn't match functionÑeturnÅype ");

4623 
p
 = 
	`gë_two_ty≥s
’, 
íd
, (
yyv•
[-1].
node
)->
ty≥
, 
exa˘_ty≥s
);

4624 
	`yyîr‹
(
buf
);

4626 i‡(
	`IS_NODE
((
yyv•
[-1].
node
), 
NODE_NUMBER
, 0)) {

4627 
	`CREATE_RETURN
((
yyvÆ
.
node
), 0);

4629 
	`CREATE_RETURN
((
yyvÆ
.
node
), (
yyv•
[-1].node));

4639 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), 0);

4648 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[0].node));

4657 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[-1].node));

4666 
	`CREATE_EXPR_NODE
((
yyvÆ
.
node
), (
yyv•
[0].node), 0);

4675 
	`CREATE_EXPR_NODE
((
yyvÆ
.
node
), (
yyv•
[-1].node), 1);

4684 (
yyv•
[0].
node
)->
köd
 = 1;

4686 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4695 (
yyv•
[0].
node
)->
köd
 = 0;

4697 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4698 (
yyvÆ
.
node
)->
köd
++;

4699 (
yyvÆ
.
node
)->
l
.
ex¥
->
r
.ex¥ = (
yyv•
[0].node);

4700 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
yyv•
[0].node);

4710 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), 0);

4719 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[0].node));

4728 
	`CREATE_EXPR_LIST
((
yyvÆ
.
node
), (
yyv•
[-1].node));

4737 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

4738 (
yyvÆ
.
node
)->
köd
 = 2;

4739 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[0].node);

4740 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

4741 (
yyvÆ
.
node
)->
ty≥
 = 0;

4743 (
yyvÆ
.
node
)->
l
.
ex¥
 = (yyval.node);

4752 
∑r£_node_t
 *
ex¥
;

4754 
ex¥
 = 
	`√w_node_no_löe
();

4755 
ex¥
->
köd
 = 0;

4756 
ex¥
->
v
.ex¥ = (
yyv•
[0].
node
);

4757 
ex¥
->
r
.expr = 0;

4758 
ex¥
->
ty≥
 = 0;

4760 (
yyv•
[-2].
node
)->
l
.
ex¥
->
r
.expr =Éxpr;

4761 (
yyv•
[-2].
node
)->
l
.
ex¥
 =Éxpr;

4762 (
yyv•
[-2].
node
)->
köd
 += 2;

4763 (
yyvÆ
.
node
Ë(
yyv•
[-2].node);

4772 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 0, (
yyv•
[-2].node), (yyvsp[0].node));

4781 
	#LV_ILLEGAL
 1

	)

4782 
	#LV_RANGE
 2

	)

4783 
	#LV_INDEX
 4

	)

4785 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

4786 (
yyvÆ
.
node
)->
köd
) {

4788 
	`yyîr‹
("IllegalÜvalue");

4790 
NODE_PARAMETER
:

4791 (
yyvÆ
.
node
)->
köd
 = 
NODE_PARAMETER_LVALUE
;

4793 
NODE_TERNARY_OP
:

4794 (
yyvÆ
.
node
)->
v
.
numbî
 = (yyvÆ.node)->
r
.
ex¥
->v.number;

4795 
NODE_OPCODE_1
:

4796 
NODE_UNARY_OP_1
:

4797 
NODE_BINARY_OP
:

4798 i‡((
yyvÆ
.
node
)->
v
.
numbî
 >
F_LOCAL
 && (yyvÆ.node)->v.numbî <
F_MEMBER
)

4799 (
yyvÆ
.
node
)->
v
.
numbî
++;

4800 i‡((
yyvÆ
.
node
)->
v
.
numbî
 >
F_INDEX


4801 && (
yyvÆ
.
node
)->
v
.
numbî
 <
F_RE_RANGE
) {

4802 
∑r£_node_t
 *
node
 = (
yyvÆ
.node);

4803 
Êag
 = 0;

4805 
node
->
köd
) {

4806 
NODE_PARAMETER
:

4807 
node
->
köd
 = 
NODE_PARAMETER_LVALUE
;

4808 
Êag
 |
LV_ILLEGAL
;

4810 
NODE_TERNARY_OP
:

4811 
node
->
v
.
numbî
 =Çode->
r
.
ex¥
->v.number;

4812 
NODE_OPCODE_1
:

4813 
NODE_UNARY_OP_1
:

4814 
NODE_BINARY_OP
:

4815 i‡(
node
->
v
.
numbî
 >
F_LOCAL


4816 && 
node
->
v
.
numbî
 <
F_MEMBER
) {

4817 
node
->
v
.
numbî
++;

4818 
Êag
 |
LV_ILLEGAL
;

4820 } i‡(
node
->
v
.
numbî
 =
F_INDEX
 ||

4821 
node
->
v
.
numbî
 =
F_RINDEX
) {

4822 
node
->
v
.
numbî
++;

4823 
Êag
 |
LV_INDEX
;

4825 } i‡(
node
->
v
.
numbî
 >
F_ADD_EQ


4826 && 
node
->
v
.
numbî
 <
F_ASSIGN
) {

4827 i‡(!(
Êag
 & 
LV_INDEX
)) {

4828 
	`yyîr‹
("IllegalÜvalue,áÖossibleÜvalue is (x <assign> y)[a]");

4830 i‡(
node
->
r
.
ex¥
->
köd
 =
NODE_BINARY_OP
||

4831 
node
->
r
.
ex¥
->
köd
 =
NODE_TERNARY_OP
){

4832 i‡(
node
->
r
.
ex¥
->
v
.
numbî
 >
F_NN_RANGE_LVALUE
 &&Çode->r.ex¥->v.numbî <
F_NR_RANGE_LVALUE
)

4833 
	`yyîr‹
("IllegalÅo have (x[a..b] <assign> y)Åo beÅhe beginning ofánÜvalue");

4835 
Êag
 = 
LV_ILLEGAL
;

4837 } i‡(
node
->
v
.
numbî
 >
F_NN_RANGE


4838 && 
node
->
v
.
numbî
 <
F_RE_RANGE
) {

4839 i‡(
Êag
 & 
LV_RANGE
) {

4840 
	`yyîr‹
("Can't doÑangeÜvalue ofÑangeÜvalue.");

4841 
Êag
 |
LV_ILLEGAL
;

4844 i‡(
Êag
 & 
LV_INDEX
){

4845 
	`yyîr‹
("Can't do indexedÜvalue ofÑangeÜvalue.");

4846 
Êag
 |
LV_ILLEGAL
;

4849 i‡(
node
->
v
.
numbî
 =
F_NE_RANGE
) {

4851 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

4852 
node
->
köd
 = 
NODE_TERNARY_OP
;

4853 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

4854 
F_NR_RANGE_LVALUE
,

4855 0, 0, 
rchûd
);

4856 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

4857 } i‡(
node
->
v
.
numbî
 =
F_RE_RANGE
) {

4859 
∑r£_node_t
 *
rchûd
 = 
node
->
r
.
ex¥
;

4860 
node
->
köd
 = 
NODE_TERNARY_OP
;

4861 
	`CREATE_BINARY_OP
(
node
->
r
.
ex¥
,

4862 
F_RR_RANGE_LVALUE
,

4863 0, 0, 
rchûd
);

4864 
	`CREATE_NUMBER
(
node
->
r
.
ex¥
->
l
.expr, 1);

4866 
node
->
r
.
ex¥
->
v
.
numbî
++;

4867 
Êag
 |
LV_RANGE
;

4868 
node
 =Çode->
r
.
ex¥
->r.expr;

4872 
	`yyîr‹
("IllegalÜvalue");

4873 
Êag
 = 
LV_ILLEGAL
;

4876 i‡((
Êag
 & 
LV_ILLEGAL
Ë|| !(
node
 =Çode->
r
.
ex¥
)) ;

4880 
	`yyîr‹
("IllegalÜvalue");

4891 (
yyvÆ
.
numbî
Ë((
yyv•
[0].numbîË<< 8Ë| 
FP_EFUN
;

4900 
i
;

4901 i‡((
i
 = (
yyv•
[0].
ihe
)->
dn
.
loˇl_num
) != -1) {

4902 
ty≥_of_loˇls_±r
[
i
] &~
LOCAL_MOD_UNUSED
;

4903 i‡(
ty≥_of_loˇls_±r
[
i
] & 
LOCAL_MOD_REF
)

4904 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_REF
, 
ty≥_of_loˇls_±r
[
i
] & ~
LOCAL_MOD_REF
,i & 0xff);

4906 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, 
ty≥_of_loˇls_±r
[
i
], i & 0xff);

4907 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4908 
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
++;

4910 i‡((
i
 = (
yyv•
[0].
ihe
)->
dn
.
globÆ_num
) != -1) {

4911 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4912 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

4913 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_GLOBAL
,

4914 
	`VAR_TEMP
(
i
)->
ty≥
 & ~
DECL_MODS
, i);

4915 i‡(
	`VAR_TEMP
(
i
)->
ty≥
 & 
DECL_HIDDEN
) {

4916 
buf
[256];

4917 *
íd
 = 
	`EndOf
(
buf
);

4918 *
p
;

4920 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

4921 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

4922 
p
 = 
	`°Ωut
’, 
íd
, "'");

4923 
	`yyîr‹
(
buf
);

4926 
buf
[256];

4927 *
íd
 = 
	`EndOf
(
buf
);

4928 *
p
;

4930 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

4931 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
ihe
)->
«me
);

4932 
p
 = 
	`°Ωut
’, 
íd
, "'");

4933 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

4934 
	`add_loˇl_«me
((
yyv•
[0].
ihe
)->
«me
, 
TYPE_ANY
);

4936 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4937 
	`yyîr‹
(
buf
);

4947 
buf
[256];

4948 *
íd
 = 
	`EndOf
(
buf
);

4949 *
p
;

4951 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined variable '");

4952 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

4953 
p
 = 
	`°Ωut
’, 
íd
, "'");

4954 i‡(
cuºít_numbî_of_loˇls
 < 
CFG_MAX_LOCAL_VARIABLES
) {

4955 
	`add_loˇl_«me
((
yyv•
[0].
°rög
), 
TYPE_ANY
);

4957 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4958 
	`yyîr‹
(
buf
);

4959 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

4968 
	`CREATE_PARAMETER
((
yyvÆ
.
node
), 
TYPE_ANY
, (
yyv•
[0].
numbî
));

4977 (
yyvÆ
.
c⁄ãxç
Ë
cuºít_fun˘i⁄_c⁄ãxt
;

4979 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

4980 
cuºít_fun˘i⁄_c⁄ãxt
 = cuºít_fun˘i⁄_c⁄ãxt->
∑ª¡
;

4989 
∑r£_node_t
 *
node
;

4991 
cuºít_fun˘i⁄_c⁄ãxt
 = (
yyv•
[-2].
c⁄ãxç
);

4993 i‡(!
cuºít_fun˘i⁄_c⁄ãxt
 || cuºít_fun˘i⁄_c⁄ãxt->
num_∑ømëîs
 == -2) {

4997 
	`CREATE_ERROR
((
yyvÆ
.
node
));

4999 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_LOCAL
, (
yyv•
[-1].node)->
ty≥
,

5000 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
köd
++);

5002 
node
 = 
	`√w_node_no_löe
();

5003 
node
->
ty≥
 = 0;

5004 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
->
r
.ex¥ = 
node
;

5005 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
l
.
ex¥
 = 
node
;

5006 
node
->
r
.
ex¥
 = 0;

5007 
node
->
v
.
ex¥
 = (
yyv•
[-1].node);

5017 i‡((
yyv•
[-2].
node
)->
ty≥
 =
TYPE_ANY
) {

5018 
cmi
;

5019 
ç
;

5021 i‡((
cmi
 = 
	`lookup_™y_˛ass_membî
((
yyv•
[0].
°rög
), &
ç
)) != -1) {

5022 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MEMBER
, 
ç
, (
yyv•
[-2].node), 0);

5023 (
yyvÆ
.
node
)->
l
.
numbî
 = 
cmi
;

5025 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5027 } i‡(!
	`IS_CLASS
((
yyv•
[-2].
node
)->
ty≥
)) {

5028 
	`yyîr‹
("Leftárgument of -> isÇotá class");

5029 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5031 
	`CREATE_UNARY_OP_1
((
yyvÆ
.
node
), 
F_MEMBER
, 0, (
yyv•
[-2].node), 0);

5032 (
yyvÆ
.
node
)->
l
.
numbî
 = 
	`lookup_˛ass_membî
(
	`CLASS_IDX
((
yyv•
[-2].node)->
ty≥
),

5033 (
yyv•
[0].
°rög
),

5034 &((
yyvÆ
.
node
)->
ty≥
));

5037 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

5046 i‡((
yyv•
[-5].
node
)->
ty≥
 !
TYPE_MAPPING
 &&

5047 (
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 < 0)

5048 
	`yyw¨n
("AÇegative constantásÅhe secondÉlement ofárr[x..y]ÇoÜonger means indexing fromÅheÉnd. Useárr[x..<y]");

5049 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NN_RANGE
, (
yyv•
[-5].node), (yyvsp[-3].node), (yyvsp[-1].node));

5058 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RN_RANGE
, (
yyv•
[-6].node), (yyvsp[-3].node), (yyvsp[-1].node));

5067 i‡((
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 <= 1)

5068 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RE_RANGE
, (
yyv•
[-7].node), (yyvsp[-4].node), 0);

5070 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RR_RANGE
, (
yyv•
[-7].node), (yyvsp[-4].node), (yyvsp[-1].node));

5079 i‡((
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 <= 1)

5080 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NE_RANGE
, (
yyv•
[-6].node), (yyvsp[-4].node), 0);

5082 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NR_RANGE
, (
yyv•
[-6].node), (yyvsp[-4].node), (yyvsp[-1].node));

5091 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_NE_RANGE
, (
yyv•
[-4].node), (yyvsp[-2].node), 0);

5100 (
yyvÆ
.
node
Ë
	`make_ønge_node
(
F_RE_RANGE
, (
yyv•
[-5].node), (yyvsp[-2].node), 0);

5109 i‡(
	`IS_NODE
((
yyv•
[-4].
node
), 
NODE_CALL
, 
F_AGGREGATE
)

5110 && (
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
) {

5111 
i
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5112 i‡(
i
 < 1 || i > (
yyv•
[-4].
node
)->
l
.
numbî
)

5113 
	`yyîr‹
("Illegal indexÅoárray constant.");

5115 
∑r£_node_t
 *
node
 = (
yyv•
[-4].node)->
r
.
ex¥
;

5116 
i
 = (
yyv•
[-4].
node
)->
l
.
numbî
 - i;

5117 
i
--)

5118 
node
 =Çode->
r
.
ex¥
;

5119 (
yyvÆ
.
node
Ënode->
v
.
ex¥
;

5123 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_RINDEX
, 0, (
yyv•
[-1].node), (yyvsp[-4].node));

5124 i‡(
exa˘_ty≥s
) {

5125 (
yyv•
[-4].
node
)->
ty≥
) {

5126 
TYPE_MAPPING
:

5127 
	`yyîr‹
("Illegal index for mapping.");

5128 
TYPE_ANY
:

5129 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5131 
TYPE_STRING
:

5132 
TYPE_BUFFER
:

5133 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_NUMBER
;

5134 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5135 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5139 i‡((
yyv•
[-4].
node
)->
ty≥
 & 
TYPE_MOD_ARRAY
) {

5140 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-4].node)->ty≥ & ~
TYPE_MOD_ARRAY
;

5141 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5142 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5144 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", (
yyv•
[-4].
node
)->
ty≥
);

5145 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5148 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5167 i‡(
	`IS_NODE
((
yyv•
[-3].
node
), 
NODE_CALL
, 
F_AGGREGATE
Ë&& (yyv•[-1].node)->
köd
 =
NODE_NUMBER
) {

5168 
i
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5169 i‡(
i
 < 0 || i >(
yyv•
[-3].
node
)->
l
.
numbî
)

5170 
	`yyîr‹
("Illegal indexÅoárray constant.");

5172 
∑r£_node_t
 *
node
 = (
yyv•
[-3].node)->
r
.
ex¥
;

5173 
i
--)

5174 
node
 =Çode->
r
.
ex¥
;

5175 (
yyvÆ
.
node
Ënode->
v
.
ex¥
;

5179 i‡((
yyv•
[-1].
node
)->
köd
 =
NODE_NUMBER
 && (yyv•[-1].node)->
v
.
numbî
 < 0)

5180 
	`yyw¨n
("AÇegative constant inárr[x]ÇoÜonger means indexing fromÅheÉnd. Useárr[<x]");

5181 
	`CREATE_BINARY_OP
((
yyvÆ
.
node
), 
F_INDEX
, 0, (
yyv•
[-1].node), (yyvsp[-3].node));

5182 i‡(
exa˘_ty≥s
) {

5183 (
yyv•
[-3].
node
)->
ty≥
) {

5184 
TYPE_MAPPING
:

5185 
TYPE_ANY
:

5186 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5188 
TYPE_STRING
:

5189 
TYPE_BUFFER
:

5190 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_NUMBER
;

5191 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5192 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5196 i‡((
yyv•
[-3].
node
)->
ty≥
 & 
TYPE_MOD_ARRAY
) {

5197 (
yyvÆ
.
node
)->
ty≥
 = (
yyv•
[-3].node)->ty≥ & ~
TYPE_MOD_ARRAY
;

5198 i‡(!
	`IS_TYPE
((
yyv•
[-1].
node
)->
ty≥
,
TYPE_NUMBER
))

5199 
	`ty≥_îr‹
("BadÅy≥ o‡ödex", (
yyv•
[-1].
node
)->
ty≥
);

5201 
	`ty≥_îr‹
("VÆuêödexed ha†®badÅy≥ ", (
yyv•
[-3].
node
)->
ty≥
);

5202 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5205 } (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5214 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5223 i‡((
yyv•
[0].
ty≥
Ë!
TYPE_FUNCTION
Ë
	`yyîr‹
("ReservedÅypeÇame unexpected.");

5224 (
yyvÆ
.
func_block
).
num_loˇl
 = 
cuºít_numbî_of_loˇls
;

5225 (
yyvÆ
.
func_block
).
max_num_loˇls
 = max_num_locals;

5226 (
yyvÆ
.
func_block
).
c⁄ãxt
 = context;

5227 (
yyvÆ
.
func_block
).
ßve_cuºít_ty≥
 = 
cuºít_ty≥
;

5228 (
yyvÆ
.
func_block
).
ßve_exa˘_ty≥s
 = 
exa˘_ty≥s
;

5229 i‡(
ty≥_of_loˇls_±r
 + 
max_num_loˇls
 + 
CFG_MAX_LOCAL_VARIABLES
 >&
ty≥_of_loˇls
[
ty≥_of_loˇls_size
])

5230 
	`ªÆloˇã_loˇls
();

5231 
	`dó˘iv©e_cuºít_loˇls
();

5232 
loˇls_±r
 +
cuºít_numbî_of_loˇls
;

5233 
ty≥_of_loˇls_±r
 +
max_num_loˇls
;

5234 
max_num_loˇls
 = 
cuºít_numbî_of_loˇls
 = 0;

5235 
	`push_fun˘i⁄_c⁄ãxt
();

5236 
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 = -1;

5237 
exa˘_ty≥s
 = 
TYPE_ANY
;

5238 
c⁄ãxt
 = 0;

5247 i‡((
yyv•
[-2].
¨gumít
).
Êags
 & 
ARG_IS_VARARGS
) {

5248 
	`yyîr‹
("Anonymous varargs functionsáren't implemented");

5250 i‡(!(
yyv•
[0].
de˛
).
node
) {

5251 
	`CREATE_RETURN
((
yyv•
[0].
de˛
).
node
, 0);

5252 } i‡((
yyv•
[0].
de˛
).
node
->
köd
 !
NODE_RETURN
 &&

5253 ((
yyv•
[0].
de˛
).
node
->
köd
 !
NODE_TWO_VALUES
 || (yyv•[0].de˛).node->
r
.
ex¥
->köd !
NODE_RETURN
)) {

5254 
∑r£_node_t
 *
ª∂a˚mít
;

5255 
	`CREATE_STATEMENTS
(
ª∂a˚mít
, (
yyv•
[0].
de˛
).
node
, 0);

5256 
	`CREATE_RETURN
(
ª∂a˚mít
->
r
.
ex¥
, 0);

5257 (
yyv•
[0].
de˛
).
node
 = 
ª∂a˚mít
;

5260 (
yyvÆ
.
node
Ë
	`√w_node
();

5261 (
yyvÆ
.
node
)->
köd
 = 
NODE_ANON_FUNC
;

5262 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5263 (
yyvÆ
.
node
)->
l
.
numbî
 = (
max_num_loˇls
 - (
yyv•
[-2].
¨gumít
).
num_¨g
);

5264 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[0].
de˛
).node;

5265 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[-2].
¨gumít
).
num_¨g
;

5266 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
)

5267 (
yyvÆ
.
node
)->
v
.
numbî
 |= 0x10000;

5268 
	`‰ì_Æl_loˇl_«mes
(1);

5270 
cuºít_numbî_of_loˇls
 = (
yyv•
[-4].
func_block
).
num_loˇl
;

5271 
max_num_loˇls
 = (
yyv•
[-4].
func_block
).max_num_locals;

5272 
c⁄ãxt
 = (
yyv•
[-4].
func_block
).context;

5273 
cuºít_ty≥
 = (
yyv•
[-4].
func_block
).
ßve_cuºít_ty≥
;

5274 
exa˘_ty≥s
 = (
yyv•
[-4].
func_block
).
ßve_exa˘_ty≥s
;

5275 
	`p›_fun˘i⁄_c⁄ãxt
();

5277 
loˇls_±r
 -
cuºít_numbî_of_loˇls
;

5278 
ty≥_of_loˇls_±r
 -
max_num_loˇls
;

5279 
	`ªa˘iv©e_cuºít_loˇls
();

5288 (
yyvÆ
.
node
Ë
	`√w_node
();

5289 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5290 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5291 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5292 (
yyv•
[-2].
numbî
) & 0xff) {

5293 
FP_L_VAR
:

5294 
	`yyîr‹
("IllegalÅo useÜocal variable iná functional.");

5295 
	`CREATE_NUMBER
((
yyvÆ
.
node
)->
l
.
ex¥
, 0);

5296 (
yyvÆ
.
node
)->
l
.
ex¥
->
r
.expr = 0;

5297 (
yyvÆ
.
node
)->
l
.
ex¥
->l.expr = 0;

5298 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
;

5300 
FP_G_VAR
:

5301 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_GLOBAL
, 0, (
yyv•
[-2].
numbî
) >> 8);

5302 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
 | 
FP_NOT_BINDABLE
;

5303 i‡(
	`VAR_TEMP
((
yyvÆ
.
node
)->
l
.
ex¥
->l.
numbî
)->
ty≥
 & 
DECL_HIDDEN
) {

5304 
buf
[256];

5305 *
íd
 = 
	`EndOf
(
buf
);

5306 *
p
;

5308 
p
 = 
	`°Ωut
(
buf
, 
íd
, "IllegalÅo useÖrivate variable '");

5309 
p
 = 
	`°Ωut
’, 
íd
, 
	`VAR_TEMP
((
yyvÆ
.
node
)->
l
.
ex¥
->l.
numbî
)->
«me
);

5310 
p
 = 
	`°Ωut
’, 
íd
, "'");

5311 
	`yyîr‹
(
buf
);

5315 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[-2].number);

5326 (
yyvÆ
.
node
Ë
	`√w_node
();

5327 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5328 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5329 (
yyvÆ
.
node
)->
v
.
numbî
 = (
yyv•
[-4].number);

5330 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[-2].node);

5332 (
yyv•
[-4].
numbî
) & 0xff) {

5333 
FP_EFUN
: {

5334 *
¨gp
;

5335 
f
 = (
yyv•
[-4].
numbî
) >>8;

5336 
num
 = (
yyv•
[-2].
node
)->
köd
;

5337 
max_¨g
 = 
¥edefs
[
f
].
max_¨gs
;

5339 i‡(
num
 > 
max_¨g
 && max_arg != -1) {

5340 
∑r£_node_t
 *
≤
 = (
yyv•
[-2].
node
);

5342 
≤
) {

5343 i‡(
≤
->
ty≥
 & 1) ;

5344 
≤
 =Ön->
r
.
ex¥
;

5347 i‡(!
≤
) {

5348 
bff
[256];

5349 *
íd
 = 
	`EndOf
(
bff
);

5350 *
p
;

5352 
p
 = 
	`°Ωut
(
bff
, 
íd
, "Too manyárgumentsÅo ");

5353 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

5354 
	`yyîr‹
(
bff
);

5356 } i‡(
max_¨g
 !-1 && 
exa˘_ty≥s
) {

5360 
i
, 
¨gn
, 
tmp
;

5361 
∑r£_node_t
 *
íode
 = (
yyv•
[-2].
node
);

5362 
¨gp
 = &
efun_¨g_ty≥s
[
¥edefs
[
f
].
¨g_ödex
];

5364 
¨gn
 = 0;árg¿< 
num
;árgn++) {

5365 i‡(
íode
->
ty≥
 & 1) ;

5367 
tmp
 = 
íode
->
v
.
ex¥
->
ty≥
;

5368 
i
=0; !
	`com∑tibÀ_ty≥s
(
tmp
, 
¨gp
[i])

5369 && 
¨gp
[
i
] != 0; i++)

5371 i‡(
¨gp
[
i
] == 0) {

5372 
buf
[256];

5373 *
íd
 = 
	`EndOf
(
buf
);

5374 *
p
;

5376 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Badárgument ");

5377 
p
 = 
	`°Ωut_öt
’, 
íd
, 
¨gn
+1);

5378 
p
 = 
	`°Ωut
’, 
íd
, "ÅoÉfun ");

5379 
p
 = 
	`°Ωut
’, 
íd
, 
¥edefs
[
f
].
w‹d
);

5380 
p
 = 
	`°Ωut
’, 
íd
, "()");

5381 
	`yyîr‹
(
buf
);

5386 i‡(
tmp
 =
TYPE_NUMBER
 && 
¨gp
[
i
] =
TYPE_REAL
) {

5387 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_NUMBER
; i++)

5389 i‡(!
¨gp
[
i
])

5390 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_Êﬂt
(enode->v.expr);

5392 i‡(
tmp
 =
TYPE_REAL
 && 
¨gp
[
i
] =
TYPE_NUMBER
) {

5393 
i
++; 
¨gp
[i] &&árgp[i] !
TYPE_REAL
; i++)

5395 i‡(!
¨gp
[
i
])

5396 
íode
->
v
.
ex¥
 = 
	`¥omŸe_to_öt
(enode->v.expr);

5399 
¨gp
[
i
] != 0)

5400 
i
++;

5401 
¨gp
 +
i
 + 1;

5402 
íode
 =Énode->
r
.
ex¥
;

5407 
FP_L_VAR
:

5408 
FP_G_VAR
:

5409 
	`yyîr‹
("Can't giveÖarametersÅo functional.");

5420 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
num_loˇls
)

5421 
	`yyîr‹
("IllegalÅo useÜocal variable in functional.");

5422 i‡(
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
)

5423 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->
r
.
ex¥
->
köd
 = current_function_context->values_list->kind;

5425 (
yyvÆ
.
node
Ë
	`√w_node
();

5426 (
yyvÆ
.
node
)->
köd
 = 
NODE_FUNCTION_CONSTRUCTOR
;

5427 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_FUNCTION
;

5428 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
yyv•
[-2].node);

5429 i‡((
yyv•
[-2].
node
)->
köd
 =
NODE_STRING
)

5430 
	`yyw¨n
("FunctionÖointerÑeturning string constant is NOTá function call");

5431 (
yyvÆ
.
node
)->
r
.
ex¥
 = 
cuºít_fun˘i⁄_c⁄ãxt
->
vÆues_li°
->r.expr;

5432 (
yyvÆ
.
node
)->
v
.
numbî
 = 
FP_FUNCTIONAL
 + 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ


5433 + (
cuºít_fun˘i⁄_c⁄ãxt
->
num_∑ømëîs
 << 8);

5434 
	`p›_fun˘i⁄_c⁄ãxt
();

5443 
	`CREATE_CALL
((
yyvÆ
.
node
), 
F_AGGREGATE_ASSOC
, 
TYPE_MAPPING
, (
yyv•
[-2].node));

5452 
	`CREATE_CALL
((
yyvÆ
.
node
), 
F_AGGREGATE
, 
TYPE_ANY
 | 
TYPE_MOD_ARRAY
, (
yyv•
[-2].node));

5461 (
yyvÆ
.
node
Ë(
yyv•
[0].
de˛
).node;

5470 (
yyvÆ
.
node
Ë
	`ö£π_p›_vÆue
((
yyv•
[-1].node));

5479 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5480 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

5489 
	`CREATE_CATCH
((
yyvÆ
.
node
), (
yyv•
[0].node));

5490 
c⁄ãxt
 = (
yyv•
[-1].
numbî
);

5499 
p
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5500 
	`CREATE_LVALUE_EFUN
((
yyvÆ
.
node
), 
TYPE_NUMBER
, (
yyv•
[-1].node));

5501 
	`CREATE_BINARY_OP_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_SSCANF
, 0, (
yyv•
[-4].node), (yyv•[-2].node), 
p
);

5510 
p
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5511 
	`CREATE_LVALUE_EFUN
((
yyvÆ
.
node
), 
TYPE_NUMBER
, (
yyv•
[-1].node));

5512 
	`CREATE_TERNARY_OP_1
((
yyvÆ
.
node
)->
l
.
ex¥
, 
F_PARSE_COMMAND
, 0,

5513 (
yyv•
[-6].
node
), (yyv•[-4].node), (yyv•[-2].node), 
p
);

5522 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5523 
c⁄ãxt
 = 
SPECIAL_CONTEXT
;

5532 
	`CREATE_TIME_EXPRESSION
((
yyvÆ
.
node
), (
yyv•
[0].node));

5533 
c⁄ãxt
 = (
yyv•
[-1].
numbî
);

5542 (
yyvÆ
.
node
Ë
	`√w_node_no_löe
();

5543 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5544 (
yyvÆ
.
node
)->
v
.
numbî
 = 0;

5553 
∑r£_node_t
 *
ö£π
;

5555 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

5556 
ö£π
 = 
	`√w_node_no_löe
();

5557 
ö£π
->
r
.
ex¥
 = (
yyv•
[0].
node
)->r.expr;

5558 
ö£π
->
l
.
ex¥
 = (
yyv•
[-1].
node
);

5559 (
yyv•
[0].
node
)->
r
.
ex¥
 = 
ö£π
;

5560 (
yyvÆ
.
node
)->
v
.
numbî
++;

5569 
	`CREATE_STRING
((
yyvÆ
.
node
), (
yyv•
[0].
°rög
));

5570 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

5579 (
yyvÆ
.
°rög
Ë(
yyv•
[-1].string);

5588 (
yyvÆ
.
°rög
Ë
	`s¸©ch_joö
((
yyv•
[-2].string), (yyvsp[0].string));

5597 (
yyvÆ
.
°rög
Ë
	`s¸©ch_joö
((
yyv•
[-1].string), (yyvsp[0].string));

5606 (
yyvÆ
.
node
Ë
	`√w_node
();

5607 (
yyvÆ
.
node
)->
l
.
ex¥
 = (
∑r£_node_t
 *)(
yyv•
[-2].
°rög
);

5608 (
yyvÆ
.
node
)->
v
.
ex¥
 = (
yyv•
[0].node);

5609 (
yyvÆ
.
node
)->
r
.
ex¥
 = 0;

5618 (
yyvÆ
.
node
) = 0;

5627 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

5628 (
yyvÆ
.
node
)->
r
.
ex¥
 = (
yyv•
[-2].node);

5637 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5638 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5639 
c⁄ãxt
 |
ARG_LIST
;

5648 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5649 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
((
yyv•
[-4].
numbî
),(yyvsp[-1].node));

5650 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5651 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5660 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5661 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5662 
c⁄ãxt
 |
ARG_LIST
;

5671 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5672 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
√w_efun
, (
yyv•
[-1].node));

5673 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5674 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5683 
∑r£_node_t
 *
node
;

5685 i‡((
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
 == -1) {

5686 
buf
[256];

5687 *
íd
 = 
	`EndOf
(
buf
);

5688 *
p
;

5690 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

5691 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
ihe
)->
«me
);

5692 
p
 = 
	`°Ωut
’, 
íd
, "'");

5693 
	`yyîr‹
(
buf
);

5694 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5695 
node
 = (
yyv•
[-1].node);

5696 
node
) {

5697 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

5698 
node
 =Çode->
r
.
ex¥
;

5701 
ty≥
 = (
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
 | 
TYPE_MOD_CLASS
;

5703 i‡((
node
 = (
yyv•
[-1].node))) {

5704 
	`CREATE_TWO_VALUES
((
yyvÆ
.
node
), 
ty≥
, 0, 0);

5705 (
yyvÆ
.
node
)->
l
.
ex¥
 = 
	`ª‹dî_˛ass_vÆues
((
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
,

5706 
node
);

5707 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
)->
r
.
ex¥
, 
F_NEW_CLASS
,

5708 
ty≥
, (
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
);

5711 
	`CREATE_OPCODE_1
((
yyvÆ
.
node
), 
F_NEW_EMPTY_CLASS
,

5712 
ty≥
, (
yyv•
[-2].
ihe
)->
dn
.
˛ass_num
);

5723 
∑r£_node_t
 *
node
;

5724 
buf
[256];

5725 *
íd
 = 
	`EndOf
(
buf
);

5726 *
p
;

5728 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined class '");

5729 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[-2].
°rög
));

5730 
p
 = 
	`°Ωut
’, 
íd
, "'");

5731 
	`yyîr‹
(
buf
);

5732 
	`CREATE_ERROR
((
yyvÆ
.
node
));

5733 
node
 = (
yyv•
[-1].node);

5734 
node
) {

5735 
	`s¸©ch_‰ì
((*)
node
->
l
.
ex¥
);

5736 
node
 =Çode->
r
.
ex¥
;

5746 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5747 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5748 
c⁄ãxt
 |
ARG_LIST
;

5757 
f
;

5759 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5760 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5761 i‡((
f
 = (
yyv•
[-4].
ihe
)->
dn
.
fun˘i⁄_num
) != -1) {

5762 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5763 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5765 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5766 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5767 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5768 (
yyvÆ
.
node
)->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, (
yyv•
[-1].node)->
r
.
ex¥
);

5769 } i‡((
f
=(
yyv•
[-4].
ihe
)->
dn
.
simul_num
) != -1) {

5770 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5771 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_SIMUL_EFUN
;

5772 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5773 (
yyvÆ
.
node
)->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
DECL_MODS
;

5774 } i‡((
f
=(
yyv•
[-4].
ihe
)->
dn
.
efun_num
) != -1) {

5775 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
f
, (
yyv•
[-1].node));

5785 
f
;

5787 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5788 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5790 
f
 = 
	`deföe_√w_fun˘i⁄
((
yyv•
[-4].
ihe
)->
«me
, 0, 0,

5791 
DECL_PUBLIC
|
FUNC_UNDEFINED
, 
TYPE_ANY
);

5792 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5793 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5794 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5795 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5796 i‡(
exa˘_ty≥s
) {

5797 
buf
[256];

5798 *
íd
 = 
	`EndOf
(
buf
);

5799 *
p
;

5800 *
n
 = (
yyv•
[-4].
ihe
)->
«me
;

5801 i‡(*
n
 == ':')Ç++;

5807 
	`FUNCTION_FLAGS
(
f
Ë&~
FUNC_UNDEFINED
;

5808 
	`FUNCTION_FLAGS
(
f
Ë|(
FUNC_INHERITED
 | 
FUNC_VARARGS
);

5809 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

5810 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

5811 
	`yyîr‹
(
buf
);

5814 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5815 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5824 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5825 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5826 
c⁄ãxt
 |
ARG_LIST
;

5835 *
«me
 = (
yyv•
[-4].
°rög
);

5837 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5838 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5840 i‡(
cuºít_fun˘i⁄_c⁄ãxt
)

5841 
cuºít_fun˘i⁄_c⁄ãxt
->
bödabÀ
 = 
FP_NOT_BINDABLE
;

5843 i‡(*
«me
 == ':') {

5844 
f
;

5846 i‡((
f
 = 
	`¨ønge_ˇŒ_öhîôed
(
«me
 + 1, (
yyvÆ
.
node
))) != -1)

5854 
f
;

5855 
idít_hash_ñem_t
 *
ihe
;

5857 
f
 = (
ihe
 = 
	`lookup_idít
(
«me
)Ë? ihe->
dn
.
fun˘i⁄_num
 : -1;

5858 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5859 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_CALL_FUNCTION_BY_ADDRESS
;

5860 i‡(
f
!=-1) {

5865 (
yyvÆ
.
node
)->
ty≥
 = 
	`vÆid©e_fun˘i⁄_ˇŒ
(
f
, (
yyv•
[-1].node)->
r
.
ex¥
);

5867 
f
 = 
	`deföe_√w_fun˘i⁄
(
«me
, 0, 0,

5868 
DECL_PUBLIC
|
FUNC_UNDEFINED
, 
TYPE_ANY
);

5870 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5876 i‡(
exa˘_ty≥s
 && (
	`FUNCTION_FLAGS
(
f
Ë& 
FUNC_UNDEFINED
)) {

5877 
buf
[256];

5878 *
íd
 = 
	`EndOf
(
buf
);

5879 *
p
;

5880 *
n
 = (
yyv•
[-4].
°rög
);

5881 i‡(*
n
 == ':')Ç++;

5883 
	`FUNCTION_FLAGS
(
f
Ë&~
FUNC_UNDEFINED
;

5884 
	`FUNCTION_FLAGS
(
f
Ë|(
FUNC_INHERITED
 | 
FUNC_VARARGS
);

5885 
p
 = 
	`°Ωut
(
buf
, 
íd
, "Undefined function ");

5886 
p
 = 
	`°Ωut
’, 
íd
, 
n
);

5887 
	`yyîr‹
(
buf
);

5889 i‡(!(
	`FUNCTION_FLAGS
(
f
Ë& 
FUNC_UNDEFINED
))

5890 (
yyvÆ
.
node
)->
ty≥
 = 
	`FUNCTION_DEF
(
f
)->type;

5892 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5894 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5895 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5896 
	`s¸©ch_‰ì
(
«me
);

5905 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5906 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5907 
c⁄ãxt
 |
ARG_LIST
;

5916 
idít_hash_ñem_t
 *
ihe
;

5917 
f
;

5918 
∑r£_node_t
 *
≤1
, *
≤2
;

5920 (
yyv•
[-1].
node
)->
v
.
numbî
 += 2;

5922 
≤1
 = 
	`√w_node_no_löe
();

5923 
≤1
->
ty≥
 = 0;

5924 
≤1
->
v
.
ex¥
 = (
yyv•
[-6].
node
);

5925 
≤1
->
köd
 = (
yyv•
[-1].
node
)->
v
.
numbî
;

5927 
≤2
 = 
	`√w_node_no_löe
();

5928 
≤2
->
ty≥
 = 0;

5929 
	`CREATE_STRING
(
≤2
->
v
.
ex¥
, (
yyv•
[-4].
°rög
));

5930 
	`s¸©ch_‰ì
((
yyv•
[-4].
°rög
));

5933 
≤2
->
r
.
ex¥
 = (
yyv•
[-1].
node
)->r.expr;

5934 
≤1
->
r
.
ex¥
 = 
≤2
;

5935 (
yyv•
[-1].
node
)->
r
.
ex¥
 = 
≤1
;

5937 i‡(!(
yyv•
[-1].
node
)->
l
.
ex¥
Ë(yyv•[-1].node)->l.ex¥ = 
≤2
;

5939 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5940 
ihe
 = 
	`lookup_idít
("call_other");

5942 i‡((
f
 = 
ihe
->
dn
.
simul_num
) != -1) {

5943 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5944 (
yyvÆ
.
node
)->
köd
 = 
NODE_CALL_1
;

5945 (
yyvÆ
.
node
)->
v
.
numbî
 = 
F_SIMUL_EFUN
;

5946 (
yyvÆ
.
node
)->
l
.
numbî
 = 
f
;

5947 (
yyvÆ
.
node
)->
ty≥
 = (
	`SIMUL
(
f
)->ty≥Ë& ~
DECL_MODS
;

5949 (
yyvÆ
.
node
Ë
	`vÆid©e_efun_ˇŒ
(
¨row_efun
, (
yyv•
[-1].node));

5950 #ifde‡
CAST_CALL_OTHERS


5951 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_UNKNOWN
;

5953 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5956 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5957 
num_ªfs
 = (
yyv•
[-3].
numbî
);

5966 (
yyvÆ
.
numbî
Ë
c⁄ãxt
;

5967 (
yyv•
[0].
numbî
Ë
num_ªfs
;

5968 
c⁄ãxt
 |
ARG_LIST
;

5977 
∑r£_node_t
 *
ex¥
;

5979 
c⁄ãxt
 = (
yyv•
[-2].
numbî
);

5980 (
yyvÆ
.
node
Ë(
yyv•
[-1].node);

5981 (
yyvÆ
.
node
)->
köd
 = 
NODE_EFUN
;

5982 (
yyvÆ
.
node
)->
l
.
numbî
 = (yyvÆ.node)->
v
.number + 1;

5983 (
yyvÆ
.
node
)->
v
.
numbî
 = 
¥edefs
[
evÆu©e_efun
].
tokí
;

5984 #ifde‡
CAST_CALL_OTHERS


5985 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_UNKNOWN
;

5987 (
yyvÆ
.
node
)->
ty≥
 = 
TYPE_ANY
;

5989 
ex¥
 = 
	`√w_node_no_löe
();

5990 
ex¥
->
ty≥
 = 0;

5991 
ex¥
->
v
.ex¥ = (
yyv•
[-5].
node
);

5992 
ex¥
->
r
.ex¥ = (
yyvÆ
.
node
)->r.expr;

5993 (
yyvÆ
.
node
)->
r
.
ex¥
 =Éxpr;

5994 (
yyvÆ
.
node
Ë
	`check_ªfs
(
num_ªfs
 - (
yyv•
[-3].
numbî
), (yyvsp[-1].node), (yyval.node));

5995 
num_ªfs
 = (
yyv•
[-3].
numbî
);

6004 
svÆue_t
 *
ªs
;

6005 
idít_hash_ñem_t
 *
ihe
;

6007 (
yyvÆ
.
numbî
Ë(
ihe
 = 
	`lookup_idít
((
yyv•
[0].
°rög
))Ë? ihe->
dn
.
efun_num
 : -1;

6008 i‡((
yyvÆ
.
numbî
) == -1) {

6009 
buf
[256];

6010 *
íd
 = 
	`EndOf
(
buf
);

6011 *
p
;

6013 
p
 = 
	`°Ωut
(
buf
, 
íd
, "UnknownÉfun: ");

6014 
p
 = 
	`°Ωut
’, 
íd
, (
yyv•
[0].
°rög
));

6015 
	`yyîr‹
(
buf
);

6017 
	`push_mÆlo˚d_°rög
(
	`the_fûe_«me
(
cuºít_fûe
));

6018 
	`sh¨e_™d_push_°rög
((
yyv•
[0].
°rög
));

6019 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
	`maö_fûe_«me
()));

6020 
ªs
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_OVERRIDE
, 3);

6021 i‡(!
	`MASTER_APPROVED
(
ªs
)) {

6022 
	`yyîr‹
("Invalid simulatedÉfunction override");

6023 (
yyvÆ
.
numbî
) = -1;

6026 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

6035 
svÆue_t
 *
ªs
;

6037 
	`push_mÆlo˚d_°rög
(
	`the_fûe_«me
(
cuºít_fûe
));

6038 
	`push_c⁄°™t_°rög
("new");

6039 
	`push_mÆlo˚d_°rög
(
	`add_¶ash
(
	`maö_fûe_«me
()));

6040 
ªs
 = 
	`ß„_≠∂y_ma°î_ob
(
APPLY_VALID_OVERRIDE
, 3);

6041 i‡(!
	`MASTER_APPROVED
(
ªs
)) {

6042 
	`yyîr‹
("Invalid simulatedÉfunction override");

6043 (
yyvÆ
.
numbî
) = -1;

6044 } (
yyvÆ
.
numbî
Ë
√w_efun
;

6053 
l
 = 
	`°æí
((
yyv•
[0].
°rög
)) + 1;

6054 *
p
;

6059 (
yyvÆ
.
°rög
Ë
	`s¸©ch_ªÆloc
((
yyv•
[0].°rög), 
l
 + 3);

6060 
p
 = (
yyvÆ
.
°rög
Ë+ 
l
;

6061 
p
--,
l
--)

6062 *(
p
+3) = *p;

6063 
	`°∫˝y
((
yyvÆ
.
°rög
), ":::", 3);

6072 
z
, 
l
 = 
	`°æí
((
yyv•
[0].
°rög
)) + 1;

6073 *
p
;

6075 
z
 = 
	`°æí
(
compûî_ty≥_«mes
[(
yyv•
[-2].
ty≥
)]) + 3;

6076 (
yyvÆ
.
°rög
Ë
	`s¸©ch_ªÆloc
((
yyv•
[0].°rög), 
l
 + 
z
);

6077 
p
 = (
yyvÆ
.
°rög
Ë+ 
l
;

6078 
p
--,
l
--)

6079 *(
p
+
z
) = *p;

6080 (
yyvÆ
.
°rög
)[0] = ':';

6081 
	`°∫˝y
((
yyvÆ
.
°rög
Ë+ 1, 
compûî_ty≥_«mes
[(
yyv•
[-2].
ty≥
)], 
z
 - 3);

6082 (
yyvÆ
.
°rög
)[
z
-2] = ':';

6083 (
yyvÆ
.
°rög
)[
z
-1] = ':';

6092 
l
 = 
	`°æí
((
yyv•
[-2].
°rög
));

6094 (
yyvÆ
.
°rög
Ë
	`s¸©ch_Æloc
(
l
 + 
	`°æí
((
yyv•
[0].string)) + 4);

6095 *((
yyvÆ
.
°rög
)) = ':';

6096 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 1, (
yyv•
[-2].string));

6097 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 
l
 + 1, "::");

6098 
	`°r˝y
((
yyvÆ
.
°rög
Ë+ 
l
 + 3, (
yyv•
[0].string));

6099 
	`s¸©ch_‰ì
((
yyv•
[-2].
°rög
));

6100 
	`s¸©ch_‰ì
((
yyv•
[0].
°rög
));

6110 i‡(
	`IS_NODE
((
yyv•
[-3].
node
), 
NODE_BINARY_OP
, 
F_NE
)) {

6111 i‡(
	`IS_NODE
((
yyv•
[-3].
node
)->
r
.
ex¥
, 
NODE_NUMBER
, 0))

6112 (
yyv•
[-3].
node
Ë(yyv•[-3].node)->
l
.
ex¥
;

6113 i‡(
	`IS_NODE
((
yyv•
[-3].
node
)->
l
.
ex¥
, 
NODE_NUMBER
, 0))

6114 (
yyv•
[-3].
node
Ë(yyv•[-3].node)->
r
.
ex¥
;

6121 i‡((
yyv•
[-1].
node
) == 0) {

6122 i‡((
yyv•
[0].
node
) == 0) {

6124 (
yyvÆ
.
node
Ë
	`p›_vÆue
((
yyv•
[-3].node));

6128 
∑r£_node_t
 *
ª∂
;

6130 
	`CREATE_UNARY_OP
(
ª∂
, 
F_NOT
, 
TYPE_NUMBER
, (
yyv•
[-3].
node
));

6131 (
yyv•
[-3].
node
Ë
ª∂
;

6132 (
yyv•
[-1].
node
) = (yyvsp[0].node);

6133 (
yyv•
[0].
node
) = 0;

6136 
	`CREATE_IF
((
yyvÆ
.
node
), (
yyv•
[-3].node), (yyvsp[-1].node), (yyvsp[0].node));

6145 (
yyvÆ
.
node
) = 0;

6154 (
yyvÆ
.
node
Ë(
yyv•
[0].node);

6174 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

6176 
	`YYPOPSTACK
 (
yyÀn
);

6177 
yyÀn
 = 0;

6178 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6180 *++
yyv•
 = 
yyvÆ
;

6186 
yyn
 = 
yyr1
[yyn];

6188 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

6189 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

6190 
yy°©e
 = 
yyèbÀ
[yystate];

6192 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

6194 
yy√w°©e
;

6200 
yyîæab
:

6203 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

6206 i‡(!
yyîr°©us
)

6208 ++
yy√ºs
;

6209 #i‡! 
YYERROR_VERBOSE


6210 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

6212 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

6213 
yys•
, 
yytokí
)

	)

6215 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

6216 
yysy¡ax_îr‹_°©us
;

6217 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

6218 i‡(
yysy¡ax_îr‹_°©us
 == 0)

6219 
yymsgp
 = 
yymsg
;

6220 i‡(
yysy¡ax_îr‹_°©us
 == 1)

6222 i‡(
yymsg
 !
yymsgbuf
)

6223 
	`YYSTACK_FREE
 (
yymsg
);

6224 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

6225 i‡(!
yymsg
)

6227 
yymsg
 = 
yymsgbuf
;

6228 
yymsg_Æloc
 =  
yymsgbuf
;

6229 
yysy¡ax_îr‹_°©us
 = 2;

6233 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

6234 
yymsgp
 = 
yymsg
;

6237 
	`yyîr‹
 (
yymsgp
);

6238 i‡(
yysy¡ax_îr‹_°©us
 == 2)

6239 
yyexhau°edœb
;

6241 #unde‡
YYSYNTAX_ERROR


6247 i‡(
yyîr°©us
 == 3)

6252 i‡(
yych¨
 <
YYEOF
)

6255 i‡(
yych¨
 =
YYEOF
)

6256 
YYABORT
;

6260 
	`yyde°ru˘
 ("Error: discarding",

6261 
yytokí
, &
yylvÆ
);

6262 
yych¨
 = 
YYEMPTY
;

6268 
yyîæab1
;

6274 
yyîr‹œb
:

6280 
yyîr‹œb
;

6284 
	`YYPOPSTACK
 (
yyÀn
);

6285 
yyÀn
 = 0;

6286 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6287 
yy°©e
 = *
yys•
;

6288 
yyîæab1
;

6294 
yyîæab1
:

6295 
yyîr°©us
 = 3;

6299 
yyn
 = 
yy∑˘
[
yy°©e
];

6300 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

6302 
yyn
 +
YYTERROR
;

6303 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

6305 
yyn
 = 
yyèbÀ
[yyn];

6306 i‡(0 < 
yyn
)

6312 i‡(
yys•
 =
yyss
)

6313 
YYABORT
;

6316 
	`yyde°ru˘
 ("Error:Öopping",

6317 
yy°os
[
yy°©e
], 
yyv•
);

6318 
	`YYPOPSTACK
 (1);

6319 
yy°©e
 = *
yys•
;

6320 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6323 
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN


6324 *++
yyv•
 = 
yylvÆ
;

6325 
YY_IGNORE_MAYBE_UNINITIALIZED_END


6329 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

6331 
yy°©e
 = 
yyn
;

6332 
yy√w°©e
;

6338 
yyac˚±œb
:

6339 
yyªsu…
 = 0;

6340 
yyªtu∫
;

6345 
yyab‹éab
:

6346 
yyªsu…
 = 1;

6347 
yyªtu∫
;

6349 #i‡!
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


6353 
yyexhau°edœb
:

6354 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

6355 
yyªsu…
 = 2;

6359 
yyªtu∫
:

6360 i‡(
yych¨
 !
YYEMPTY
)

6364 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

6365 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

6366 
yytokí
, &
yylvÆ
);

6370 
	`YYPOPSTACK
 (
yyÀn
);

6371 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

6372 
yys•
 !
yyss
)

6374 
	`yyde°ru˘
 ("Cleanup:Öopping",

6375 
yy°os
[*
yys•
], 
yyv•
);

6376 
	`YYPOPSTACK
 (1);

6378 #i‚de‡
yyovîÊow


6379 i‡(
yyss
 !
yysß
)

6380 
	`YYSTACK_FREE
 (
yyss
);

6382 #i‡
YYERROR_VERBOSE


6383 i‡(
yymsg
 !
yymsgbuf
)

6384 
	`YYSTACK_FREE
 (
yymsg
);

6386  
yyªsu…
;

6387 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/arpa/telnet.h

32 #i‚de‡
_ARPA_TELNET_H


33 
	#_ARPA_TELNET_H
 1

	)

38 
	#IAC
 255

	)

39 
	#DONT
 254

	)

40 
	#DO
 253

	)

41 
	#WONT
 252

	)

42 
	#WILL
 251

	)

43 
	#SB
 250

	)

44 
	#GA
 249

	)

45 
	#EL
 248

	)

46 
	#EC
 247

	)

47 
	#AYT
 246

	)

48 
	#AO
 245

	)

49 
	#IP
 244

	)

50 
	#BREAK
 243

	)

51 
	#DM
 242

	)

52 
	#NOP
 241

	)

53 
	#SE
 240

	)

54 
	#EOR
 239

	)

55 
	#ABORT
 238

	)

56 
	#SUSP
 237

	)

57 
	#xEOF
 236

	)

59 
	#SYNCH
 242

	)

61 #ifde‡
TELCMDS


62 *
	gãlcmds
[] = {

68 *
ãlcmds
[];

71 
	#TELCMD_FIRST
 
xEOF


	)

72 
	#TELCMD_LAST
 
IAC


	)

73 
	#TELCMD_OK
(
x
Ë(()(xË<
TELCMD_LAST
 && \

74 ()(
x
Ë>
TELCMD_FIRST
)

	)

75 
	#TELCMD
(
x
Ë
ãlcmds
[(x)-
TELCMD_FIRST
]

	)

78 
	#TELOPT_BINARY
 0

	)

79 
	#TELOPT_ECHO
 1

	)

80 
	#TELOPT_RCP
 2

	)

81 
	#TELOPT_SGA
 3

	)

82 
	#TELOPT_NAMS
 4

	)

83 
	#TELOPT_STATUS
 5

	)

84 
	#TELOPT_TM
 6

	)

85 
	#TELOPT_RCTE
 7

	)

86 
	#TELOPT_NAOL
 8

	)

87 
	#TELOPT_NAOP
 9

	)

88 
	#TELOPT_NAOCRD
 10

	)

89 
	#TELOPT_NAOHTS
 11

	)

90 
	#TELOPT_NAOHTD
 12

	)

91 
	#TELOPT_NAOFFD
 13

	)

92 
	#TELOPT_NAOVTS
 14

	)

93 
	#TELOPT_NAOVTD
 15

	)

94 
	#TELOPT_NAOLFD
 16

	)

95 
	#TELOPT_XASCII
 17

	)

96 
	#TELOPT_LOGOUT
 18

	)

97 
	#TELOPT_BM
 19

	)

98 
	#TELOPT_DET
 20

	)

99 
	#TELOPT_SUPDUP
 21

	)

100 
	#TELOPT_SUPDUPOUTPUT
 22

	)

101 
	#TELOPT_SNDLOC
 23

	)

102 
	#TELOPT_TTYPE
 24

	)

103 
	#TELOPT_EOR
 25

	)

104 
	#TELOPT_TUID
 26

	)

105 
	#TELOPT_OUTMRK
 27

	)

106 
	#TELOPT_TTYLOC
 28

	)

107 
	#TELOPT_3270REGIME
 29

	)

108 
	#TELOPT_X3PAD
 30

	)

109 
	#TELOPT_NAWS
 31

	)

110 
	#TELOPT_TSPEED
 32

	)

111 
	#TELOPT_LFLOW
 33

	)

112 
	#TELOPT_LINEMODE
 34

	)

113 
	#TELOPT_XDISPLOC
 35

	)

114 
	#TELOPT_OLD_ENVIRON
 36

	)

115 
	#TELOPT_AUTHENTICATION
 37

	)

116 
	#TELOPT_ENCRYPT
 38

	)

117 
	#TELOPT_NEW_ENVIRON
 39

	)

118 
	#TELOPT_EXOPL
 255

	)

121 
	#NTELOPTS
 (1+
TELOPT_NEW_ENVIRON
)

	)

122 #ifde‡
TELOPTS


123 *
	gãl›ts
[
NTELOPTS
+1] = {

136 
	#TELOPT_FIRST
 
TELOPT_BINARY


	)

137 
	#TELOPT_LAST
 
TELOPT_NEW_ENVIRON


	)

138 
	#TELOPT_OK
(
x
Ë(()(xË<
TELOPT_LAST
)

	)

139 
	#TELOPT
(
x
Ë
ãl›ts
[(x)-
TELOPT_FIRST
]

	)

143 
	#TELQUAL_IS
 0

	)

144 
	#TELQUAL_SEND
 1

	)

145 
	#TELQUAL_INFO
 2

	)

146 
	#TELQUAL_REPLY
 2

	)

147 
	#TELQUAL_NAME
 3

	)

149 
	#LFLOW_OFF
 0

	)

150 
	#LFLOW_ON
 1

	)

151 
	#LFLOW_RESTART_ANY
 2

	)

152 
	#LFLOW_RESTART_XON
 3

	)

158 
	#LM_MODE
 1

	)

159 
	#LM_FORWARDMASK
 2

	)

160 
	#LM_SLC
 3

	)

162 
	#MODE_EDIT
 0x01

	)

163 
	#MODE_TRAPSIG
 0x02

	)

164 
	#MODE_ACK
 0x04

	)

165 
	#MODE_SOFT_TAB
 0x08

	)

166 
	#MODE_LIT_ECHO
 0x10

	)

168 
	#MODE_MASK
 0x1f

	)

171 
	#MODE_FLOW
 0x0100

	)

172 
	#MODE_ECHO
 0x0200

	)

173 
	#MODE_INBIN
 0x0400

	)

174 
	#MODE_OUTBIN
 0x0800

	)

175 
	#MODE_FORCE
 0x1000

	)

177 
	#SLC_SYNCH
 1

	)

178 
	#SLC_BRK
 2

	)

179 
	#SLC_IP
 3

	)

180 
	#SLC_AO
 4

	)

181 
	#SLC_AYT
 5

	)

182 
	#SLC_EOR
 6

	)

183 
	#SLC_ABORT
 7

	)

184 
	#SLC_EOF
 8

	)

185 
	#SLC_SUSP
 9

	)

186 
	#SLC_EC
 10

	)

187 
	#SLC_EL
 11

	)

188 
	#SLC_EW
 12

	)

189 
	#SLC_RP
 13

	)

190 
	#SLC_LNEXT
 14

	)

191 
	#SLC_XON
 15

	)

192 
	#SLC_XOFF
 16

	)

193 
	#SLC_FORW1
 17

	)

194 
	#SLC_FORW2
 18

	)

196 
	#NSLC
 18

	)

202 
	#SLC_NAMELIST
 "0", "SYNCH", "BRK", "IP", "AO", "AYT", "EOR", \

204 "LNEXT", "XON", "XOFF", "FORW1", "FORW2", 0,

	)

205 #ifdef 
SLC_NAMES


206 *
	g¶c_«mes
[] = {

207 
SLC_NAMELIST


210 *
¶c_«mes
[];

211 
	#SLC_NAMES
 
SLC_NAMELIST


	)

214 
	#SLC_NAME_OK
(
x
Ë(()(xË<
NSLC
)

	)

215 
	#SLC_NAME
(
x
Ë
¶c_«mes
[x]

	)

217 
	#SLC_NOSUPPORT
 0

	)

218 
	#SLC_CANTCHANGE
 1

	)

219 
	#SLC_VARIABLE
 2

	)

220 
	#SLC_DEFAULT
 3

	)

221 
	#SLC_LEVELBITS
 0x03

	)

223 
	#SLC_FUNC
 0

	)

224 
	#SLC_FLAGS
 1

	)

225 
	#SLC_VALUE
 2

	)

227 
	#SLC_ACK
 0x80

	)

228 
	#SLC_FLUSHIN
 0x40

	)

229 
	#SLC_FLUSHOUT
 0x20

	)

231 
	#OLD_ENV_VAR
 1

	)

232 
	#OLD_ENV_VALUE
 0

	)

233 
	#NEW_ENV_VAR
 0

	)

234 
	#NEW_ENV_VALUE
 1

	)

235 
	#ENV_ESC
 2

	)

236 
	#ENV_USERVAR
 3

	)

245 
	#AUTH_WHO_CLIENT
 0

	)

246 
	#AUTH_WHO_SERVER
 1

	)

247 
	#AUTH_WHO_MASK
 1

	)

252 
	#AUTH_HOW_ONE_WAY
 0

	)

253 
	#AUTH_HOW_MUTUAL
 2

	)

254 
	#AUTH_HOW_MASK
 2

	)

256 
	#AUTHTYPE_NULL
 0

	)

257 
	#AUTHTYPE_KERBEROS_V4
 1

	)

258 
	#AUTHTYPE_KERBEROS_V5
 2

	)

259 
	#AUTHTYPE_SPX
 3

	)

260 
	#AUTHTYPE_MINK
 4

	)

261 
	#AUTHTYPE_CNT
 5

	)

263 
	#AUTHTYPE_TEST
 99

	)

265 #ifdef 
AUTH_NAMES


266 *
	gauthty≥_«mes
[] = {

270 *
authty≥_«mes
[];

273 
	#AUTHTYPE_NAME_OK
(
x
Ë(()(xË< 
AUTHTYPE_CNT
)

	)

274 
	#AUTHTYPE_NAME
(
x
Ë
authty≥_«mes
[x]

	)

279 
	#ENCRYPT_IS
 0

	)

280 
	#ENCRYPT_SUPPORT
 1

	)

281 
	#ENCRYPT_REPLY
 2

	)

282 
	#ENCRYPT_START
 3

	)

283 
	#ENCRYPT_END
 4

	)

284 
	#ENCRYPT_REQSTART
 5

	)

285 
	#ENCRYPT_REQEND
 6

	)

286 
	#ENCRYPT_ENC_KEYID
 7

	)

287 
	#ENCRYPT_DEC_KEYID
 8

	)

288 
	#ENCRYPT_CNT
 9

	)

290 
	#ENCTYPE_ANY
 0

	)

291 
	#ENCTYPE_DES_CFB64
 1

	)

292 
	#ENCTYPE_DES_OFB64
 2

	)

293 
	#ENCTYPE_CNT
 3

	)

295 #ifdef 
ENCRYPT_NAMES


296 *
	gí¸y±_«mes
[] = {

301 *
	gí˘y≥_«mes
[] = {

305 *
í¸y±_«mes
[];

306 *
í˘y≥_«mes
[];

310 
	#ENCRYPT_NAME_OK
(
x
Ë(()(xË< 
ENCRYPT_CNT
)

	)

311 
	#ENCRYPT_NAME
(
x
Ë
í¸y±_«mes
[x]

	)

313 
	#ENCTYPE_NAME_OK
(
x
Ë(()(xË< 
ENCTYPE_CNT
)

	)

314 
	#ENCTYPE_NAME
(
x
Ë
í˘y≥_«mes
[x]

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/mysql/mysql.h

26 #i‚de‡
_mysql_h


27 
	#_mysql_h


	)

29 #ifde‡
_AIX


30 
	~<°™d¨ds.h
>

33 #ifde‡
__CYGWIN__


34 #unde‡
WIN


35 #unde‡
_WIN


36 #unde‡
_WIN32


37 #unde‡
_WIN64


38 #unde‡
__WIN__


41 #ifdef 
__˝lu•lus


45 #i‚de‡
_globÆ_h


46 #i‚de‡
MYSQL_ABI_CHECK


47 
	~<sys/ty≥s.h
>

49 #ifde‡
__LCC__


50 
	~<wösock2.h
>

52 
	tmy_boﬁ
;

53 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__WIN__
)

54 
	#__WIN__


	)

56 #i‡!
deföed
(
__WIN__
)

57 
	#STDCALL


	)

59 
	#STDCALL
 
__°dˇŒ


	)

62 #i‚de‡
my_sockë_deföed


63 #ifde‡
__WIN__


64 
	#my_sockë
 
SOCKET


	)

66 
	tmy_sockë
;

71 
	~"mysql_vîsi⁄.h
"

72 
	~"mysql_com.h
"

73 
	~"mysql_time.h
"

75 
	~"my_li°.h
"

77 
mysql_p‹t
;

78 *
mysql_unix_p‹t
;

80 
	#CLIENT_NET_READ_TIMEOUT
 365*24*3600

	)

81 
	#CLIENT_NET_WRITE_TIMEOUT
 365*24*3600

	)

83 
	#IS_PRI_KEY
(
n
Ë(“Ë& 
PRI_KEY_FLAG
)

	)

84 
	#IS_NOT_NULL
(
n
Ë(“Ë& 
NOT_NULL_FLAG
)

	)

85 
	#IS_BLOB
(
n
Ë(“Ë& 
BLOB_FLAG
)

	)

90 
	#IS_NUM
(
t
Ë((—Ë<
MYSQL_TYPE_INT24
 && (tË!
MYSQL_TYPE_TIMESTAMP
Ë|| (tË=
MYSQL_TYPE_YEAR
 || (tË=
MYSQL_TYPE_NEWDECIMAL
)

	)

91 
	#IS_LONGDATA
(
t
Ë(—Ë>
MYSQL_TYPE_TINY_BLOB
 && (tË<
MYSQL_TYPE_STRING
)

	)

94 
	s°_mysql_fõld
 {

95 *
	g«me
;

96 *
	g‹g_«me
;

97 *
	gèbÀ
;

98 *
	g‹g_èbÀ
;

99 *
	gdb
;

100 *
	gˇèlog
;

101 *
	gdef
;

102 
	gÀngth
;

103 
	gmax_Àngth
;

104 
	g«me_Àngth
;

105 
	g‹g_«me_Àngth
;

106 
	gèbÀ_Àngth
;

107 
	g‹g_èbÀ_Àngth
;

108 
	gdb_Àngth
;

109 
	gˇèlog_Àngth
;

110 
	gdef_Àngth
;

111 
	gÊags
;

112 
	gdecimÆs
;

113 
	gch¨£är
;

114 
íum_fõld_ty≥s
 
	gty≥
;

115 *
	gexãnsi⁄
;

116 } 
	tMYSQL_FIELD
;

118 **
	tMYSQL_ROW
;

119 
	tMYSQL_FIELD_OFFSET
;

121 #i‚de‡
_globÆ_h


122 #i‡
deföed
(
NO_CLIENT_LONG_LONG
)

123 
	tmy_ul⁄gl⁄g
;

124 #ñi‡
deföed
 (
__WIN__
)

125 
	t__öt64
 
	tmy_ul⁄gl⁄g
;

127 
	tmy_ul⁄gl⁄g
;

131 
	~"ty≥lib.h
"

133 
	#MYSQL_COUNT_ERROR
 (~(
my_ul⁄gl⁄g
Ë0)

	)

136 
	#ER_WARN_DATA_TRUNCATED
 
WARN_DATA_TRUNCATED


	)

138 
	s°_mysql_rows
 {

139 
°_mysql_rows
 *
	g√xt
;

140 
MYSQL_ROW
 
	gd©a
;

141 
	gÀngth
;

142 } 
	tMYSQL_ROWS
;

144 
MYSQL_ROWS
 *
	tMYSQL_ROW_OFFSET
;

146 
	~"my_Æloc.h
"

148 
embedded_quîy_ªsu…
 
	tEMBEDDED_QUERY_RESULT
;

149 
	s°_mysql_d©a
 {

150 
MYSQL_ROWS
 *
	gd©a
;

151 
embedded_quîy_ªsu…
 *
	gembedded_öfo
;

152 
MEM_ROOT
 
	gÆloc
;

153 
my_ul⁄gl⁄g
 
	grows
;

154 
	gfõlds
;

156 *
	gexãnsi⁄
;

157 } 
	tMYSQL_DATA
;

159 
	emysql_›ti⁄


161 
	gMYSQL_OPT_CONNECT_TIMEOUT
, 
	gMYSQL_OPT_COMPRESS
, 
	gMYSQL_OPT_NAMED_PIPE
,

162 
	gMYSQL_INIT_COMMAND
, 
	gMYSQL_READ_DEFAULT_FILE
, 
	gMYSQL_READ_DEFAULT_GROUP
,

163 
	gMYSQL_SET_CHARSET_DIR
, 
	gMYSQL_SET_CHARSET_NAME
, 
	gMYSQL_OPT_LOCAL_INFILE
,

164 
	gMYSQL_OPT_PROTOCOL
, 
	gMYSQL_SHARED_MEMORY_BASE_NAME
, 
	gMYSQL_OPT_READ_TIMEOUT
,

165 
	gMYSQL_OPT_WRITE_TIMEOUT
, 
	gMYSQL_OPT_USE_RESULT
,

166 
	gMYSQL_OPT_USE_REMOTE_CONNECTION
, 
	gMYSQL_OPT_USE_EMBEDDED_CONNECTION
,

167 
	gMYSQL_OPT_GUESS_CONNECTION
, 
	gMYSQL_SET_CLIENT_IP
, 
	gMYSQL_SECURE_AUTH
,

168 
	gMYSQL_REPORT_DATA_TRUNCATION
, 
	gMYSQL_OPT_RECONNECT
,

169 
	gMYSQL_OPT_SSL_VERIFY_SERVER_CERT
, 
	gMYSQL_PLUGIN_DIR
, 
	gMYSQL_DEFAULT_AUTH
,

170 
	gMYSQL_ENABLE_CLEARTEXT_PLUGIN


177 
	g°_mysql_›ti⁄s_exã¡i⁄
;

179 
	s°_mysql_›ti⁄s
 {

180 
	gc⁄√˘_timeout
, 
	gªad_timeout
, 
	gwrôe_timeout
;

181 
	gp‹t
, 
	g¥Ÿocﬁ
;

182 
	g˛õ¡_Êag
;

183 *
	gho°
,*
	gu£r
,*
	g∑ssw‹d
,*
	gunix_sockë
,*
	gdb
;

184 
°_dy«mic_¨øy
 *
	göô_comm™ds
;

185 *
	gmy_˙f_fûe
,*
	gmy_˙f_group
, *
	gch¨£t_dú
, *
	gch¨£t_«me
;

186 *
	gs¶_key
;

187 *
	gs¶_˚π
;

188 *
	gs¶_ˇ
;

189 *
	gs¶_ˇ∑th
;

190 *
	gs¶_cùhî
;

191 *
	gsh¨ed_mem‹y_ba£_«me
;

192 
	gmax_Ælowed_∑ckë
;

193 
my_boﬁ
 
	gu£_s¶
;

194 
my_boﬁ
 
	gcom¥ess
,
	g«med_pùe
;

195 
my_boﬁ
 
	gunu£d1
;

196 
my_boﬁ
 
	gunu£d2
;

197 
my_boﬁ
 
	gunu£d3
;

198 
my_boﬁ
 
	gunu£d4
;

199 
mysql_›ti⁄
 
	gmëhods_to_u£
;

200 *
	g˛õ¡_ù
;

202 
my_boﬁ
 
	g£cuª_auth
;

204 
my_boﬁ
 
	gªp‹t_d©a_åunˇti⁄
;

207 (*
	gloˇl_öfûe_öô
)(**, const *, *);

208 (*
	gloˇl_öfûe_ªad
)(*, *, );

209 (*
	gloˇl_öfûe_íd
)(*);

210 (*
	gloˇl_öfûe_îr‹
)(*, *, );

211 *
	gloˇl_öfûe_u£rd©a
;

212 
°_mysql_›ti⁄s_exã¡i⁄
 *
	gexãnsi⁄
;

215 
	emysql_°©us


217 
	gMYSQL_STATUS_READY
, 
	gMYSQL_STATUS_GET_RESULT
, 
	gMYSQL_STATUS_USE_RESULT
,

218 
	gMYSQL_STATUS_STATEMENT_GET_RESULT


221 
	emysql_¥Ÿocﬁ_ty≥


223 
	gMYSQL_PROTOCOL_DEFAULT
, 
	gMYSQL_PROTOCOL_TCP
, 
	gMYSQL_PROTOCOL_SOCKET
,

224 
	gMYSQL_PROTOCOL_PIPE
, 
	gMYSQL_PROTOCOL_MEMORY


227 
	sch¨a˘î_£t


229 
	gnumbî
;

230 
	g°©e
;

231 c⁄° *
	gc¢ame
;

232 c⁄° *
	g«me
;

233 c⁄° *
	gcommít
;

234 c⁄° *
	gdú
;

235 
	gmbmöÀn
;

236 
	gmbmaxÀn
;

237 } 
	tMY_CHARSET_INFO
;

239 
	g°_mysql_mëhods
;

240 
	g°_mysql_°mt
;

242 
	s°_mysql


244 
NET
 
	g√t
;

245 *
	gc⁄√˘‹_fd
;

246 *
	gho°
,*
	gu£r
,*
	g∑sswd
,*
	gunix_sockë
,*
	g£rvî_vîsi⁄
,*
	gho°_öfo
;

247 *
	göfo
, *
	gdb
;

248 
ch¨£t_öfo_°
 *
	gch¨£t
;

249 
MYSQL_FIELD
 *
	gfõlds
;

250 
MEM_ROOT
 
	gfõld_Æloc
;

251 
my_ul⁄gl⁄g
 
	gaf„˘ed_rows
;

252 
my_ul⁄gl⁄g
 
	gö£π_id
;

253 
my_ul⁄gl⁄g
 
	gexåa_öfo
;

254 
	gthªad_id
;

255 
	g∑ckë_Àngth
;

256 
	gp‹t
;

257 
	g˛õ¡_Êag
,
	g£rvî_ˇ∑bûôõs
;

258 
	g¥Ÿocﬁ_vîsi⁄
;

259 
	gfõld_cou¡
;

260 
	g£rvî_°©us
;

261 
	g£rvî_œnguage
;

262 
	gw¨nög_cou¡
;

263 
°_mysql_›ti⁄s
 
	g›ti⁄s
;

264 
mysql_°©us
 
	g°©us
;

265 
my_boﬁ
 
	g‰ì_me
;

266 
my_boﬁ
 
	gªc⁄√˘
;

269 
	gs¸ambÀ
[
SCRAMBLE_LENGTH
+1];

270 
my_boﬁ
 
	gunu£d1
;

271 *
	gunu£d2
, *
	gunu£d3
, *
	gunu£d4
, *
	gunu£d5
;

273 
LIST
 *
	g°mts
;

274 c⁄° 
°_mysql_mëhods
 *
	gmëhods
;

275 *
	gthd
;

280 
my_boﬁ
 *
	gunbuf„ªd_„tch_ow√r
;

282 *
	göfo_buf„r
;

283 *
	gexãnsi⁄
;

284 } 
	tMYSQL
;

287 
	s°_mysql_ªs
 {

288 
my_ul⁄gl⁄g
 
	grow_cou¡
;

289 
MYSQL_FIELD
 *
	gfõlds
;

290 
MYSQL_DATA
 *
	gd©a
;

291 
MYSQL_ROWS
 *
	gd©a_curs‹
;

292 *
	gÀngths
;

293 
MYSQL
 *
	gh™dÀ
;

294 c⁄° 
°_mysql_mëhods
 *
	gmëhods
;

295 
MYSQL_ROW
 
	grow
;

296 
MYSQL_ROW
 
	gcuºít_row
;

297 
MEM_ROOT
 
	gfõld_Æloc
;

298 
	gfõld_cou¡
, 
	gcuºít_fõld
;

299 
my_boﬁ
 
	geof
;

301 
my_boﬁ
 
	gunbuf„ªd_„tch_ˇn˚Œed
;

302 *
	gexãnsi⁄
;

303 } 
	tMYSQL_RES
;

306 #i‡!
deföed
(
MYSQL_SERVER
Ë&& !deföed(
MYSQL_CLIENT
)

307 
	#MYSQL_CLIENT


	)

311 
	s°_mysql_∑ømëîs


313 *
	gp_max_Ælowed_∑ckë
;

314 *
	gp_√t_buf„r_Àngth
;

315 *
	gexãnsi⁄
;

316 } 
	tMYSQL_PARAMETERS
;

318 #i‡!
deföed
(
MYSQL_SERVER
Ë&& !deföed(
EMBEDDED_LIBRARY
)

319 
	#max_Ælowed_∑ckë
 (*
	`mysql_gë_∑ømëîs
()->
p_max_Ælowed_∑ckë
)

	)

320 
	#√t_buf„r_Àngth
 (*
	`mysql_gë_∑ømëîs
()->
p_√t_buf„r_Àngth
)

	)

328 
STDCALL
 
mysql_£rvî_öô
(
¨gc
, **
¨gv
, **
groups
);

329 
STDCALL
 
mysql_£rvî_íd
();

340 
	#mysql_libøry_öô
 
mysql_£rvî_öô


	)

341 
	#mysql_libøry_íd
 
mysql_£rvî_íd


	)

343 
MYSQL_PARAMETERS
 *
STDCALL
 
mysql_gë_∑ømëîs
();

351 
my_boﬁ
 
STDCALL
 
mysql_thªad_öô
();

352 
STDCALL
 
mysql_thªad_íd
();

359 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_num_rows
(
MYSQL_RES
 *
ªs
);

360 
STDCALL
 
mysql_num_fõlds
(
MYSQL_RES
 *
ªs
);

361 
my_boﬁ
 
STDCALL
 
mysql_eof
(
MYSQL_RES
 *
ªs
);

362 
MYSQL_FIELD
 *
STDCALL
 
mysql_„tch_fõld_dúe˘
(
MYSQL_RES
 *
ªs
,

363 
fõldƒ
);

364 
MYSQL_FIELD
 * 
STDCALL
 
mysql_„tch_fõlds
(
MYSQL_RES
 *
ªs
);

365 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_row_ãŒ
(
MYSQL_RES
 *
ªs
);

366 
MYSQL_FIELD_OFFSET
 
STDCALL
 
mysql_fõld_ãŒ
(
MYSQL_RES
 *
ªs
);

368 
STDCALL
 
mysql_fõld_cou¡
(
MYSQL
 *
mysql
);

369 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_af„˘ed_rows
(
MYSQL
 *
mysql
);

370 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_ö£π_id
(
MYSQL
 *
mysql
);

371 
STDCALL
 
mysql_î∫o
(
MYSQL
 *
mysql
);

372 c⁄° * 
STDCALL
 
mysql_îr‹
(
MYSQL
 *
mysql
);

373 c⁄° *
STDCALL
 
mysql_sql°©e
(
MYSQL
 *
mysql
);

374 
STDCALL
 
mysql_w¨nög_cou¡
(
MYSQL
 *
mysql
);

375 c⁄° * 
STDCALL
 
mysql_öfo
(
MYSQL
 *
mysql
);

376 
STDCALL
 
mysql_thªad_id
(
MYSQL
 *
mysql
);

377 c⁄° * 
STDCALL
 
mysql_ch¨a˘î_£t_«me
(
MYSQL
 *
mysql
);

378 
STDCALL
 
mysql_£t_ch¨a˘î_£t
(
MYSQL
 *
mysql
, c⁄° *
c¢ame
);

380 
MYSQL
 * 
STDCALL
 
mysql_öô
(MYSQL *
mysql
);

381 
my_boﬁ
 
STDCALL
 
mysql_s¶_£t
(
MYSQL
 *
mysql
, c⁄° *
key
,

382 c⁄° *
˚π
, c⁄° *
ˇ
,

383 c⁄° *
ˇ∑th
, c⁄° *
cùhî
);

384 c⁄° * 
STDCALL
 
mysql_gë_s¶_cùhî
(
MYSQL
 *
mysql
);

385 
my_boﬁ
 
STDCALL
 
mysql_ch™ge_u£r
(
MYSQL
 *
mysql
, c⁄° *
u£r
,

386 c⁄° *
∑sswd
, c⁄° *
db
);

387 
MYSQL
 * 
STDCALL
 
mysql_ªÆ_c⁄√˘
(MYSQL *
mysql
, c⁄° *
ho°
,

388 c⁄° *
u£r
,

389 c⁄° *
∑sswd
,

390 c⁄° *
db
,

391 
p‹t
,

392 c⁄° *
unix_sockë
,

393 
˛õ¡Êag
);

394 
STDCALL
 
mysql_£À˘_db
(
MYSQL
 *
mysql
, c⁄° *
db
);

395 
STDCALL
 
mysql_quîy
(
MYSQL
 *
mysql
, c⁄° *
q
);

396 
STDCALL
 
mysql_£nd_quîy
(
MYSQL
 *
mysql
, c⁄° *
q
,

397 
Àngth
);

398 
STDCALL
 
mysql_ªÆ_quîy
(
MYSQL
 *
mysql
, c⁄° *
q
,

399 
Àngth
);

400 
MYSQL_RES
 * 
STDCALL
 
mysql_°‹e_ªsu…
(
MYSQL
 *
mysql
);

401 
MYSQL_RES
 * 
STDCALL
 
mysql_u£_ªsu…
(
MYSQL
 *
mysql
);

403 
STDCALL
 
mysql_gë_ch¨a˘î_£t_öfo
(
MYSQL
 *
mysql
,

404 
MY_CHARSET_INFO
 *
ch¨£t
);

408 
	#LOCAL_INFILE_ERROR_LEN
 512

	)

411 
mysql_£t_loˇl_öfûe_h™dÀr
(
MYSQL
 *
mysql
,

412 (*
loˇl_öfûe_öô
)(**, const *,

414 (*
loˇl_öfûe_ªad
)(*, *,

416 (*
loˇl_öfûe_íd
)(*),

417 (*
loˇl_öfûe_îr‹
)(*, *,

422 
mysql_£t_loˇl_öfûe_deÁu…
(
MYSQL
 *
mysql
);

424 
STDCALL
 
mysql_shutdown
(
MYSQL
 *
mysql
,

425 
mysql_íum_shutdown_Àvñ


426 
shutdown_Àvñ
);

427 
STDCALL
 
mysql_dump_debug_öfo
(
MYSQL
 *
mysql
);

428 
STDCALL
 
mysql_ª‰esh
(
MYSQL
 *
mysql
,

429 
ª‰esh_›ti⁄s
);

430 
STDCALL
 
mysql_kûl
(
MYSQL
 *
mysql
,
pid
);

431 
STDCALL
 
mysql_£t_£rvî_›ti⁄
(
MYSQL
 *
mysql
,

432 
íum_mysql_£t_›ti⁄


433 
›ti⁄
);

434 
STDCALL
 
mysql_pög
(
MYSQL
 *
mysql
);

435 c⁄° * 
STDCALL
 
mysql_°©
(
MYSQL
 *
mysql
);

436 c⁄° * 
STDCALL
 
mysql_gë_£rvî_öfo
(
MYSQL
 *
mysql
);

437 c⁄° * 
STDCALL
 
mysql_gë_˛õ¡_öfo
();

438 
STDCALL
 
mysql_gë_˛õ¡_vîsi⁄
();

439 c⁄° * 
STDCALL
 
mysql_gë_ho°_öfo
(
MYSQL
 *
mysql
);

440 
STDCALL
 
mysql_gë_£rvî_vîsi⁄
(
MYSQL
 *
mysql
);

441 
STDCALL
 
mysql_gë_¥Ÿo_öfo
(
MYSQL
 *
mysql
);

442 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_dbs
(
MYSQL
 *
mysql
,c⁄° *
wûd
);

443 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_èbÀs
(
MYSQL
 *
mysql
,c⁄° *
wûd
);

444 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_¥o˚s£s
(
MYSQL
 *
mysql
);

445 
STDCALL
 
mysql_›ti⁄s
(
MYSQL
 *
mysql
,
mysql_›ti⁄
 
›ti⁄
,

446 c⁄° *
¨g
);

447 
STDCALL
 
mysql_‰ì_ªsu…
(
MYSQL_RES
 *
ªsu…
);

448 
STDCALL
 
mysql_d©a_£ek
(
MYSQL_RES
 *
ªsu…
,

449 
my_ul⁄gl⁄g
 
off£t
);

450 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_row_£ek
(
MYSQL_RES
 *
ªsu…
,

451 
MYSQL_ROW_OFFSET
 
off£t
);

452 
MYSQL_FIELD_OFFSET
 
STDCALL
 
mysql_fõld_£ek
(
MYSQL_RES
 *
ªsu…
,

453 
MYSQL_FIELD_OFFSET
 
off£t
);

454 
MYSQL_ROW
 
STDCALL
 
mysql_„tch_row
(
MYSQL_RES
 *
ªsu…
);

455 * 
STDCALL
 
mysql_„tch_Àngths
(
MYSQL_RES
 *
ªsu…
);

456 
MYSQL_FIELD
 * 
STDCALL
 
mysql_„tch_fõld
(
MYSQL_RES
 *
ªsu…
);

457 
MYSQL_RES
 * 
STDCALL
 
mysql_li°_fõlds
(
MYSQL
 *
mysql
, c⁄° *
èbÀ
,

458 c⁄° *
wûd
);

459 
STDCALL
 
mysql_esˇ≥_°rög
(*
to
,c⁄° *
‰om
,

460 
‰om_Àngth
);

461 
STDCALL
 
mysql_hex_°rög
(*
to
,c⁄° *
‰om
,

462 
‰om_Àngth
);

463 
STDCALL
 
mysql_ªÆ_esˇ≥_°rög
(
MYSQL
 *
mysql
,

464 *
to
,c⁄° *
‰om
,

465 
Àngth
);

466 
STDCALL
 
mysql_debug
(c⁄° *
debug
);

467 
STDCALL
 
myodbc_ªmove_esˇ≥
(
MYSQL
 *
mysql
,*
«me
);

468 
STDCALL
 
mysql_thªad_ß„
();

469 
my_boﬁ
 
STDCALL
 
mysql_embedded
();

470 
my_boﬁ
 
STDCALL
 
mysql_ªad_quîy_ªsu…
(
MYSQL
 *
mysql
);

479 
	eíum_mysql_°mt_°©e


481 
	gMYSQL_STMT_INIT_DONE
1, 
	gMYSQL_STMT_PREPARE_DONE
, 
	gMYSQL_STMT_EXECUTE_DONE
,

482 
	gMYSQL_STMT_FETCH_DONE


549 
	s°_mysql_böd


551 *
	gÀngth
;

552 
my_boﬁ
 *
	gis_nuŒ
;

553 *
	gbuf„r
;

555 
my_boﬁ
 *
	gîr‹
;

556 *
	grow_±r
;

557 (*
	g°‹e_∑øm_func
)(
NET
 *
	g√t
, 
°_mysql_böd
 *
	g∑øm
);

558 (*
	g„tch_ªsu…
)(
	g°_mysql_böd
 *, 
	gMYSQL_FIELD
 *,

559 **
	grow
);

560 (*
	gskù_ªsu…
)(
	g°_mysql_böd
 *, 
	gMYSQL_FIELD
 *,

561 **
	grow
);

563 
	gbuf„r_Àngth
;

564 
	goff£t
;

565 
	gÀngth_vÆue
;

566 
	g∑øm_numbî
;

567 
	g∑ck_Àngth
;

568 
íum_fõld_ty≥s
 
	gbuf„r_ty≥
;

569 
my_boﬁ
 
	gîr‹_vÆue
;

570 
my_boﬁ
 
	gis_unsig√d
;

571 
my_boﬁ
 
	gl⁄g_d©a_u£d
;

572 
my_boﬁ
 
	gis_nuŒ_vÆue
;

573 *
	gexãnsi⁄
;

574 } 
	tMYSQL_BIND
;

577 
	g°_mysql_°mt_exãnsi⁄
;

580 
	s°_mysql_°mt


582 
MEM_ROOT
 
	gmem_roŸ
;

583 
LIST
 
	gli°
;

584 
MYSQL
 *
	gmysql
;

585 
MYSQL_BIND
 *
	g∑øms
;

586 
MYSQL_BIND
 *
	gböd
;

587 
MYSQL_FIELD
 *
	gfõlds
;

588 
MYSQL_DATA
 
	gªsu…
;

589 
MYSQL_ROWS
 *
	gd©a_curs‹
;

594 (*
	gªad_row_func
)(
°_mysql_°mt
 *
	g°mt
,

595 **
	grow
);

597 
my_ul⁄gl⁄g
 
	gaf„˘ed_rows
;

598 
my_ul⁄gl⁄g
 
	gö£π_id
;

599 
	g°mt_id
;

600 
	gÊags
;

601 
	g¥e„tch_rows
;

606 
	g£rvî_°©us
;

607 
	gœ°_î∫o
;

608 
	g∑øm_cou¡
;

609 
	gfõld_cou¡
;

610 
íum_mysql_°mt_°©e
 
	g°©e
;

611 
	gœ°_îr‹
[
MYSQL_ERRMSG_SIZE
];

612 
	gsql°©e
[
SQLSTATE_LENGTH
+1];

614 
my_boﬁ
 
	g£nd_ty≥s_to_£rvî
;

615 
my_boﬁ
 
	gböd_∑øm_d⁄e
;

616 
	gböd_ªsu…_d⁄e
;

618 
my_boﬁ
 
	gunbuf„ªd_„tch_ˇn˚Œed
;

623 
my_boﬁ
 
	gupd©e_max_Àngth
;

624 
°_mysql_°mt_exãnsi⁄
 *
	gexãnsi⁄
;

625 } 
	tMYSQL_STMT
;

627 
	eíum_°mt_©å_ty≥


636 
	gSTMT_ATTR_UPDATE_MAX_LENGTH
,

641 
	gSTMT_ATTR_CURSOR_TYPE
,

646 
	gSTMT_ATTR_PREFETCH_ROWS


650 
MYSQL_STMT
 * 
STDCALL
 
mysql_°mt_öô
(
MYSQL
 *
mysql
);

651 
STDCALL
 
mysql_°mt_¥ï¨e
(
MYSQL_STMT
 *
°mt
, c⁄° *
quîy
,

652 
Àngth
);

653 
STDCALL
 
mysql_°mt_execuã
(
MYSQL_STMT
 *
°mt
);

654 
STDCALL
 
mysql_°mt_„tch
(
MYSQL_STMT
 *
°mt
);

655 
STDCALL
 
mysql_°mt_„tch_cﬁumn
(
MYSQL_STMT
 *
°mt
, 
MYSQL_BIND
 *
böd_¨g
,

656 
cﬁumn
,

657 
off£t
);

658 
STDCALL
 
mysql_°mt_°‹e_ªsu…
(
MYSQL_STMT
 *
°mt
);

659 
STDCALL
 
mysql_°mt_∑øm_cou¡
(
MYSQL_STMT
 * 
°mt
);

660 
my_boﬁ
 
STDCALL
 
mysql_°mt_©å_£t
(
MYSQL_STMT
 *
°mt
,

661 
íum_°mt_©å_ty≥
 
©å_ty≥
,

662 c⁄° *
©å
);

663 
my_boﬁ
 
STDCALL
 
mysql_°mt_©å_gë
(
MYSQL_STMT
 *
°mt
,

664 
íum_°mt_©å_ty≥
 
©å_ty≥
,

665 *
©å
);

666 
my_boﬁ
 
STDCALL
 
mysql_°mt_böd_∑øm
(
MYSQL_STMT
 * 
°mt
, 
MYSQL_BIND
 * 
bnd
);

667 
my_boﬁ
 
STDCALL
 
mysql_°mt_böd_ªsu…
(
MYSQL_STMT
 * 
°mt
, 
MYSQL_BIND
 * 
bnd
);

668 
my_boﬁ
 
STDCALL
 
mysql_°mt_˛o£
(
MYSQL_STMT
 * 
°mt
);

669 
my_boﬁ
 
STDCALL
 
mysql_°mt_ª£t
(
MYSQL_STMT
 * 
°mt
);

670 
my_boﬁ
 
STDCALL
 
mysql_°mt_‰ì_ªsu…
(
MYSQL_STMT
 *
°mt
);

671 
my_boﬁ
 
STDCALL
 
mysql_°mt_£nd_l⁄g_d©a
(
MYSQL_STMT
 *
°mt
,

672 
∑øm_numbî
,

673 c⁄° *
d©a
,

674 
Àngth
);

675 
MYSQL_RES
 *
STDCALL
 
mysql_°mt_ªsu…_mëad©a
(
MYSQL_STMT
 *
°mt
);

676 
MYSQL_RES
 *
STDCALL
 
mysql_°mt_∑øm_mëad©a
(
MYSQL_STMT
 *
°mt
);

677 
STDCALL
 
mysql_°mt_î∫o
(
MYSQL_STMT
 * 
°mt
);

678 c⁄° *
STDCALL
 
mysql_°mt_îr‹
(
MYSQL_STMT
 * 
°mt
);

679 c⁄° *
STDCALL
 
mysql_°mt_sql°©e
(
MYSQL_STMT
 * 
°mt
);

680 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_°mt_row_£ek
(
MYSQL_STMT
 *
°mt
,

681 
MYSQL_ROW_OFFSET
 
off£t
);

682 
MYSQL_ROW_OFFSET
 
STDCALL
 
mysql_°mt_row_ãŒ
(
MYSQL_STMT
 *
°mt
);

683 
STDCALL
 
mysql_°mt_d©a_£ek
(
MYSQL_STMT
 *
°mt
, 
my_ul⁄gl⁄g
 
off£t
);

684 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_°mt_num_rows
(
MYSQL_STMT
 *
°mt
);

685 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_°mt_af„˘ed_rows
(
MYSQL_STMT
 *
°mt
);

686 
my_ul⁄gl⁄g
 
STDCALL
 
mysql_°mt_ö£π_id
(
MYSQL_STMT
 *
°mt
);

687 
STDCALL
 
mysql_°mt_fõld_cou¡
(
MYSQL_STMT
 *
°mt
);

689 
my_boﬁ
 
STDCALL
 
mysql_commô
(
MYSQL
 * 
mysql
);

690 
my_boﬁ
 
STDCALL
 
mysql_rﬁlback
(
MYSQL
 * 
mysql
);

691 
my_boﬁ
 
STDCALL
 
mysql_autocommô
(
MYSQL
 * 
mysql
, my_boﬁ 
auto_mode
);

692 
my_boﬁ
 
STDCALL
 
mysql_m‹e_ªsu…s
(
MYSQL
 *
mysql
);

693 
STDCALL
 
mysql_√xt_ªsu…
(
MYSQL
 *
mysql
);

694 
STDCALL
 
mysql_°mt_√xt_ªsu…
(
MYSQL_STMT
 *
°mt
);

695 
STDCALL
 
mysql_˛o£
(
MYSQL
 *
sock
);

699 
	#MYSQL_NO_DATA
 100

	)

700 
	#MYSQL_DATA_TRUNCATED
 101

	)

702 
	#mysql_ªlﬂd
(
mysql
Ë
	`mysql_ª‰esh
((mysql),
REFRESH_GRANT
)

	)

704 #ifde‡
USE_OLD_FUNCTIONS


705 
MYSQL
 * 
STDCALL
 
mysql_c⁄√˘
(MYSQL *
mysql
, c⁄° *
ho°
,

706 c⁄° *
u£r
, c⁄° *
∑sswd
);

707 
STDCALL
 
mysql_¸óã_db
(
MYSQL
 *
mysql
, c⁄° *
DB
);

708 
STDCALL
 
mysql_dr›_db
(
MYSQL
 *
mysql
, c⁄° *
DB
);

710 
	#HAVE_MYSQL_REAL_CONNECT


	)

712 #ifdef 
__˝lu•lus


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__glibc_ª£rved
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/regexp.h

19 #i‚de‡
_REGEXP_H


20 
	#_REGEXP_H
 1

	)

31 
	~<„©uªs.h
>

32 
	~<Æloˇ.h
>

33 
	~<ªgex.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

81 
__BEGIN_DECLS


85 *
loc1
;

86 *
loc2
;

90 *
locs
;

93 #i‚de‡
__DO_NOT_DEFINE_COMPILE


101 
	$compûe
 (*
__ª°ri˘
 
ö°rög
, *__ª°ri˘ 
expbuf
,

102 c⁄° *
__ª°ri˘
 
ídbuf
, 
eof
)

104 *
__öput_buf„r
 = 
NULL
;

105 
size_t
 
__öput_size
 = 0;

106 
size_t
 
__cuºít_size
 = 0;

107 
__ch
;

108 
__îr‹
;

109 
INIT


114 
ªgex_t
 *
__ex¥_±r
;

115 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

116 c⁄° 
size_t
 
__ªq
 = 
	`__Æignof__
 (
ªgex_t
 *);

120 c⁄° 
size_t
 
__ªq
 = 8;

122 
expbuf
 +
__ªq
;

123 
expbuf
 -”xpbu‡- ((*Ë0)Ë% 
__ªq
;

124 i‡(
ídbuf
 < 
expbuf
 +  (
ªgex_t
))

126 
	`ERROR
 (50);

128 
__ex¥_±r
 = (
ªgex_t
 *Ë
expbuf
;

131 
__ex¥_±r
->
	`__REPB_PREFIX
 (
buf„r
Ë
expbuf
 +  (
ªgex_t
);

132 
__ex¥_±r
->
	`__REPB_PREFIX
 (
Æloˇãd
)

133 
ídbuf
 - (*Ë
__ex¥_±r
->
	`__REPB_PREFIX
 (
buf„r
);

135 (
__ch
 = (
	`GETC
 ())Ë!
eof
)

137 i‡(
__ch
 == '\0' || __ch == '\n')

139 
	`UNGETC
 (
__ch
);

143 i‡(
__cuºít_size
 + 1 >
__öput_size
)

145 
size_t
 
__√w_size
 = 
__öput_size
 ? 2 * __input_size : 128;

146 *
__√w_room
 = (*Ë
	`Æloˇ
 (
__√w_size
);

148 i‡(
__√w_room
 + 
__√w_size
 =
__öput_buf„r
)

150 
__öput_size
 +
__√w_size
;

151 
__öput_buf„r
 = (*Ë
	`mem˝y
 (
__√w_room
, __input_buffer,

152 
__cuºít_size
);

154 i‡(
__öput_buf„r
 + 
__öput_size
 =
__√w_room
)

155 
__öput_size
 +
__√w_size
;

158 
__öput_size
 = 
__√w_size
;

159 
__öput_buf„r
 = (*Ë
	`mem˝y
 (
__√w_room
, __input_buffer,

160 
__cuºít_size
);

163 
__öput_buf„r
[
__cuºít_size
++] = 
__ch
;

165 i‡(
__cuºít_size
)

166 
__öput_buf„r
[
__cuºít_size
++] = '\0';

168 
__öput_buf„r
 = "";

171 
__îr‹
 = 
	`ªgcomp
 (
__ex¥_±r
, 
__öput_buf„r
, 
REG_NEWLINE
);

172 i‡(
__îr‹
 != 0)

174 
__îr‹
)

176 
REG_BADPAT
:

177 
REG_ECOLLATE
:

178 
REG_ECTYPE
:

179 
REG_EESCAPE
:

180 
REG_BADRPT
:

181 
REG_EEND
:

182 
REG_ERPAREN
:

185 
	`RETURN
 (36);

186 
REG_ESUBREG
:

187 
	`RETURN
 (25);

188 
REG_EBRACK
:

189 
	`RETURN
 (49);

190 
REG_EPAREN
:

191 
	`RETURN
 (42);

192 
REG_EBRACE
:

193 
	`RETURN
 (44);

194 
REG_BADBR
:

195 
	`RETURN
 (46);

196 
REG_ERANGE
:

197 
	`RETURN
 (11);

198 
REG_ESPACE
:

199 
REG_ESIZE
:

200 
	`ERROR
 (50);

204 
	`RETURN
 ((*Ë(
__ex¥_±r
->
	`__REPB_PREFIX
 (
buf„r
)

205 + 
__ex¥_±r
->
	`__REPB_PREFIX
 (
u£d
)));

206 
	}
}

214 
	$°ï
 (c⁄° *
__ª°ri˘
 
__°rög
,

215 c⁄° *
__ª°ri˘
 
__expbuf
Ë
__THROW
;

220 
	$adv™˚
 (c⁄° *
__ª°ri˘
 
__°rög
,

221 c⁄° *
__ª°ri˘
 
__expbuf
Ë
__THROW
;

224 
__END_DECLS


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

222 
	#RES_NOTLDQUERY
 0x01000000

	)

225 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

230 
	#RES_PRF_STATS
 0x00000001

	)

231 
	#RES_PRF_UPDATE
 0x00000002

	)

232 
	#RES_PRF_CLASS
 0x00000004

	)

233 
	#RES_PRF_CMD
 0x00000008

	)

234 
	#RES_PRF_QUES
 0x00000010

	)

235 
	#RES_PRF_ANS
 0x00000020

	)

236 
	#RES_PRF_AUTH
 0x00000040

	)

237 
	#RES_PRF_ADD
 0x00000080

	)

238 
	#RES_PRF_HEAD1
 0x00000100

	)

239 
	#RES_PRF_HEAD2
 0x00000200

	)

240 
	#RES_PRF_TTLID
 0x00000400

	)

241 
	#RES_PRF_HEADX
 0x00000800

	)

242 
	#RES_PRF_QUERY
 0x00001000

	)

243 
	#RES_PRF_REPLY
 0x00002000

	)

244 
	#RES_PRF_INIT
 0x00004000

	)

248 
__BEGIN_DECLS


249 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

250 
__END_DECLS


251 
	#_ªs
 (*
	`__ªs_°©e
())

	)

253 #i‚de‡
__BIND_NOSTATIC


254 
	#Â_nquîy
 
__Â_nquîy


	)

255 
	#Â_quîy
 
__Â_quîy


	)

256 
	#ho°Æüs
 
__ho°Æüs


	)

257 
	#p_quîy
 
__p_quîy


	)

258 
	#ªs_˛o£
 
__ªs_˛o£


	)

259 
	#ªs_öô
 
__ªs_öô


	)

260 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

261 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

262 
	#ªs_quîy
 
__ªs_quîy


	)

263 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

264 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

265 
	#ªs_£nd
 
__ªs_£nd


	)

267 
__BEGIN_DECLS


268 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

269 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

270 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

271 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

272 
	$ªs_˛o£
 (Ë
__THROW
;

273 
	$ªs_öô
 (Ë
__THROW
;

274 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

275 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

276 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

277 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_quîydomaö
 (const *, const *, , ,

279 
u_ch¨
 *, Ë
__THROW
;

280 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

281 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

282 
__END_DECLS


285 
	#b64_¡›
 
__b64_¡›


	)

286 
	#b64_±⁄
 
__b64_±⁄


	)

287 
	#dn_comp
 
__dn_comp


	)

288 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

289 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

290 
	#dn_skù«me
 
__dn_skù«me


	)

291 
	#Â_ªs°©
 
__Â_ªs°©


	)

292 
	#loc_©⁄
 
__loc_©⁄


	)

293 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

294 
	#p_cd«me
 
__p_cd«me


	)

295 
	#p_cd¬ame
 
__p_cd¬ame


	)

296 
	#p_˛ass
 
__p_˛ass


	)

297 
	#p_fq«me
 
__p_fq«me


	)

298 
	#p_fq¬ame
 
__p_fq¬ame


	)

299 
	#p_›ti⁄
 
__p_›ti⁄


	)

300 
	#p_£c°od©e
 
__p_£c°od©e


	)

301 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

302 
	#p_time
 
__p_time


	)

303 
	#p_ty≥
 
__p_ty≥


	)

304 
	#p_rcode
 
__p_rcode


	)

305 
	#pué⁄g
 
__pué⁄g


	)

306 
	#putsh‹t
 
__putsh‹t


	)

307 
	#ªs_dnok
 
__ªs_dnok


	)

308 
	#ªs_hnok
 
__ªs_hnok


	)

309 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

310 
	#ªs_maûok
 
__ªs_maûok


	)

311 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

312 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

313 
	#ªs_nöô
 
__ªs_nöô


	)

314 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

315 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

316 
	#ªs_nquîy
 
__ªs_nquîy


	)

317 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

318 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

319 
	#ªs_n£nd
 
__ªs_n£nd


	)

320 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

321 
	#ªs_ownok
 
__ªs_ownok


	)

322 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

323 
	#ªs_øndomid
 
__ªs_øndomid


	)

324 
	#sym_¡›
 
__sym_¡›


	)

325 
	#sym_¡os
 
__sym_¡os


	)

326 
	#sym_°⁄
 
__sym_°⁄


	)

327 
__BEGIN_DECLS


328 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

330 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

331 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

332 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

333 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

334 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

335 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

336 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

337 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

338 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

339 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

340 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

341 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

342 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

343 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

344 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

345 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

347 
__THROW
;

348 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

350 , *, Ë
__THROW
;

351 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

352 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

353 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

354 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

355 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

356 
__THROW
;

357 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

358 *, Ë
__THROW
;

359 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

360 
	$ªs_«meöquîy
 (const *, , ,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

363 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

364 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

366 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

367 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

368 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

369 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

370 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

371 
__THROW
;

372 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

373 
__THROW
;

374 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

377 
__THROW
;

378 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

379 , 
u_ch¨
 *, Ë
__THROW
;

380 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

381 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

382 Ë
__THROW
;

383 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

384 
__THROW
;

385 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

386 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/values.h

22 #i‚def 
_VALUES_H


23 
	#_VALUES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<limôs.h
>

29 
	#_TYPEBITS
(
ty≥
Ë( (ty≥Ë* 
CHAR_BIT
)

	)

31 
	#CHARBITS
 
	`_TYPEBITS
 ()

	)

32 
	#SHORTBITS
 
	`_TYPEBITS
 ()

	)

33 
	#INTBITS
 
	`_TYPEBITS
 ()

	)

34 
	#LONGBITS
 
	`_TYPEBITS
 ()

	)

35 
	#PTRBITS
 
	`_TYPEBITS
 (*)

	)

36 
	#DOUBLEBITS
 
	`_TYPEBITS
 ()

	)

37 
	#FLOATBITS
 
	`_TYPEBITS
 ()

	)

39 
	#MINSHORT
 
SHRT_MIN


	)

40 
	#MININT
 
INT_MIN


	)

41 
	#MINLONG
 
LONG_MIN


	)

43 
	#MAXSHORT
 
SHRT_MAX


	)

44 
	#MAXINT
 
INT_MAX


	)

45 
	#MAXLONG
 
LONG_MAX


	)

47 
	#HIBITS
 
MINSHORT


	)

48 
	#HIBITL
 
MINLONG


	)

51 
	~<Êﬂt.h
>

53 
	#MAXDOUBLE
 
DBL_MAX


	)

54 
	#MAXFLOAT
 
FLT_MAX


	)

55 
	#MINDOUBLE
 
DBL_MIN


	)

56 
	#MINFLOAT
 
FLT_MIN


	)

57 
	#DMINEXP
 
DBL_MIN_EXP


	)

58 
	#FMINEXP
 
FLT_MIN_EXP


	)

59 
	#DMAXEXP
 
DBL_MAX_EXP


	)

60 
	#FMAXEXP
 
FLT_MAX_EXP


	)

63 #ifde‡
__USE_MISC


65 
	#BITSPERBYTE
 
CHAR_BIT


	)

	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/regex.h

20 #i‚de‡
_REGEX_H


21 
	#_REGEX_H
 1

	)

23 
	~<sys/ty≥s.h
>

24 
	~<gnu/›ti⁄-groups.h
>

27 #ifde‡
__˝lu•lus


35 
	ts_ªg_t
;

36 
	ta˘ive_ªg_t
;

43 
	tªg_sy¡ax_t
;

45 #ifde‡
__USE_GNU


48 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

53 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

59 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

73 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

81 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

85 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

89 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

93 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

97 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

102 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

106 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

110 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

115 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

119 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

123 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

127 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

133 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

137 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

141 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

145 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

153 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

158 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

161 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


164 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

169 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

173 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

177 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

185 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

187 #ifde‡
__USE_GNU


192 
	#RE_SYNTAX_EMACS
 0

	)

194 
	#RE_SYNTAX_AWK
 \

195 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

196 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

197 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

198 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

199 | 
RE_CHAR_CLASSES
 \

200 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

202 
	#RE_SYNTAX_GNU_AWK
 \

203 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

204 | 
RE_INVALID_INTERVAL_ORD
) \

205 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

206 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

208 
	#RE_SYNTAX_POSIX_AWK
 \

209 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

210 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

211 | 
RE_INVALID_INTERVAL_ORD
)

	)

213 
	#RE_SYNTAX_GREP
 \

214 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

215 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

216 | 
RE_NEWLINE_ALT
)

	)

218 
	#RE_SYNTAX_EGREP
 \

219 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

220 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

221 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

222 | 
RE_NO_BK_VBAR
)

	)

224 
	#RE_SYNTAX_POSIX_EGREP
 \

225 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

226 | 
RE_INVALID_INTERVAL_ORD
)

	)

229 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

231 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

234 
	#_RE_SYNTAX_POSIX_COMMON
 \

235 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

236 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

238 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


239 
	#RE_SYNTAX_POSIX_BASIC
 \

240 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

242 
	#RE_SYNTAX_POSIX_BASIC
 \

243 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

249 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

250 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

252 
	#RE_SYNTAX_POSIX_EXTENDED
 \

253 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

254 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

255 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

256 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

260 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

261 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

262 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

263 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

264 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

270 #ifde‡
RE_DUP_MAX


271 #unde‡
RE_DUP_MAX


274 
	#RE_DUP_MAX
 (0x7fff)

	)

282 
	#REG_EXTENDED
 1

	)

286 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

291 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

295 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

305 
	#REG_NOTBOL
 1

	)

308 
	#REG_NOTEOL
 (1 << 1)

	)

310 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


313 
	#REG_STARTEND
 (1 << 2)

	)

321 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


322 
	gREG_ENOSYS
 = -1,

325 
	gREG_NOERROR
 = 0,

326 
	gREG_NOMATCH
,

330 
	gREG_BADPAT
,

331 
	gREG_ECOLLATE
,

332 
	gREG_ECTYPE
,

333 
	gREG_EESCAPE
,

334 
	gREG_ESUBREG
,

335 
	gREG_EBRACK
,

336 
	gREG_EPAREN
,

337 
	gREG_EBRACE
,

338 
	gREG_BADBR
,

339 
	gREG_ERANGE
,

340 
	gREG_ESPACE
,

341 
	gREG_BADRPT
,

344 
	gREG_EEND
,

345 
	gREG_ESIZE
,

346 
	gREG_ERPAREN


347 } 
	tªg_îrcode_t
;

355 #i‚de‡
RE_TRANSLATE_TYPE


356 
	#__RE_TRANSLATE_TYPE
 *

	)

357 #ifde‡
__USE_GNU


358 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

362 #ifde‡
__USE_GNU


363 
	#__REPB_PREFIX
(
«me
Ë
	)
name

365 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

368 
	sª_∑âîn_buf„r


373 *
__REPB_PREFIX
(
buf„r
);

376 
__REPB_PREFIX
(
Æloˇãd
);

379 
__REPB_PREFIX
(
u£d
);

382 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

387 *
__REPB_PREFIX
(
Á°m≠
);

393 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

396 
size_t
 
	gª_nsub
;

402 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

408 #ifde‡
__USE_GNU


409 
	#REGS_UNALLOCATED
 0

	)

410 
	#REGS_REALLOCATE
 1

	)

411 
	#REGS_FIXED
 2

	)

413 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

417 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

421 
__REPB_PREFIX
(
no_sub
) : 1;

425 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

428 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

431 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

434 
ª_∑âîn_buf„r
 
	tªgex_t
;

437 
	tªgoff_t
;

440 #ifde‡
__USE_GNU


443 
	sª_ªgi°îs


445 
	gnum_ªgs
;

446 
ªgoff_t
 *
	g°¨t
;

447 
ªgoff_t
 *
	gíd
;

454 #i‚de‡
RE_NREGS


455 
	#RE_NREGS
 30

	)

465 
ªgoff_t
 
	grm_so
;

466 
ªgoff_t
 
	grm_eo
;

467 } 
	tªgm©ch_t
;

471 #ifde‡
__USE_GNU


474 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

484 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

485 
ª_∑âîn_buf„r
 *
__buf„r
);

491 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

499 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

500 
__Àngth
, 
__°¨t
, 
__ønge
,

501 
ª_ªgi°îs
 *
__ªgs
);

506 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

507 c⁄° *
__°rög1
, 
__Àngth1
,

508 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

509 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

514 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

515 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

519 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

520 c⁄° *
__°rög1
, 
__Àngth1
,

521 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

522 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

537 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

538 
ª_ªgi°îs
 *
__ªgs
,

539 
__num_ªgs
,

540 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

543 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_BSD
)

544 #i‚de‡
_CRAY


546 *
ª_comp
 (const *);

547 
ª_exec
 (const *);

553 #i‚de‡
__ª°ri˘


554 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

555 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


556 
	#__ª°ri˘
 
ª°ri˘


	)

558 
	#__ª°ri˘


	)

563 #i‚de‡
__ª°ri˘_¨r


564 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

565 && !
deföed
 
	g__GNUG__


566 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

568 
	#__ª°ri˘_¨r


	)

573 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

574 c⁄° *
__ª°ri˘
 
__∑âîn
,

575 
__cÊags
);

577 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

578 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

579 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

580 
__eÊags
);

582 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

583 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

585 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

588 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
479
12317
Win32/ar.c
Win32/configure.h
Win32/touch.c
add_action.c
add_action.h
addr_server.c
addr_server.h
amiga/amiga.h
amiga/ccdep.h
amiga/crypt.c
amiga/cstrip.c
amiga/nsignal.h
amiga/replace.c
amiga/signal.c
amiga/signal_rr.c
amiga/socket.c
amiga/socket.h
amiga/times.h
amiga/touch.c
applies.h
applies_table.c
arch.h
array.c
array.h
avltree.c
avltree.h
backend.c
backend.h
binaries.c
binaries.h
bsdmalloc.c
bsdmalloc.h
buffer.c
buffer.h
call_out.c
call_out.h
cc.h
ccode.c
ccode.h
cfuns.c
cfuns.h
class.c
class.h
comm.c
comm.h
compat/parser_error.c
compat/simuls/apply.c
compat/simuls/break_string.c
compat/simuls/dump_socket_status.c
compat/simuls/parse_command.c
compat/simuls/process_string.c
compat/simuls/tail.c
compile_file.c
compile_file.h
compiler.c
compiler.h
comptest.c
comptest.tab.c
comptest.y
config.h
configure.h
crc32.c
crc32.h
crctab.h
crypt.c
crypt.h
debug.c
debug.h
debugmalloc.c
debugmalloc.h
disassembler.c
dumpstat.c
dumpstat.h
ed.c
ed.h
edit_source.c
edit_source.h
efun_defs.c
efun_protos.h
efunctions.h
efuns_incl.h
efuns_main.c
efuns_main.h
efuns_port.c
eoperators.c
eoperators.h
file.c
file.h
file_incl.h
func_spec.c
func_spec.cpp
function.c
function.h
generate.c
generate.h
grammar.tab.c
grammar.tab.h
grammar.y
hash.c
hash.h
icode.c
icode.h
include/function.h
include/localtime.h
include/origin.h
include/parser_error.h
include/runtime_config.h
include/socket_err.h
include/type.h
interface.h
interpret.c
interpret.h
lex.c
lex.h
lint.h
lpc.h
lpc_incl.h
lpc_to_c.h
macros.h
main.c
main.h
make_func.h
make_func.tab.c
make_func.y
make_malloc.c
malloc.c
malloc.h
malloc_incl.h
mallocwrapper.c
mallowrapper.c
mapping.c
mapping.h
master.c
master.h
md.c
md.h
mudlib/interface.c
my_malloc.h
network_incl.h
object.c
object.h
op_spec.c
opc.h
opcodes.h
option_defs.c
options.h
options_incl.h
origin.h
otable.c
otable.h
packages/contrib.c
packages/contrib_spec.c
packages/db.c
packages/db.h
packages/db_spec.c
packages/develop.c
packages/develop_spec.c
packages/external.c
packages/external_spec.c
packages/gdbm.c
packages/gdbm.h
packages/math.c
packages/math_spec.c
packages/matrix.c
packages/matrix.h
packages/matrix_spec.c
packages/mongo.c
packages/mongo.h
packages/mongo_spec.c
packages/mudlib_stats.c
packages/mudlib_stats.h
packages/mudlib_stats_spec.c
packages/parser.c
packages/parser.h
packages/parser_spec.c
packages/sockets.c
packages/sockets_spec.c
packages/uids.c
packages/uids.h
packages/uids_spec.c
parse.c
parse.h
patchlevel.h
plainwrapper.c
port.c
port.h
portability.h
portbind.c
preprocess.c
preprocess.h
program.c
program.h
qsort.c
qsort.h
rc.c
rc.h
reclaim.c
reclaim.h
regexp.c
regexp.h
replace_program.c
replace_program.h
scratchpad.c
scratchpad.h
simul_efun.c
simul_efun.h
simulate.c
simulate.h
smalloc.c
smalloc.h
socket_ctrl.c
socket_ctrl.h
socket_efuns.c
socket_efuns.h
socket_err.c
socket_err.h
spec.h
sprintf.c
sprintf.h
std.h
std_incl.h
stralloc.c
stralloc.h
strfuncs.c
swap.c
swap.h
sysmalloc.c
telnet.h
testsuite/clone/login.c
testsuite/clone/user.c
testsuite/command/codefor.c
testsuite/command/dest.c
testsuite/command/ed.c
testsuite/command/eval.c
testsuite/command/quit.c
testsuite/command/rm.c
testsuite/command/say.c
testsuite/command/shutdown.c
testsuite/command/speed.c
testsuite/command/tests.c
testsuite/command/update.c
testsuite/command/who.c
testsuite/include/command.h
testsuite/include/config.h
testsuite/include/globals.h
testsuite/include/lpctypes.h
testsuite/include/tests.h
testsuite/inherit/base.c
testsuite/inherit/clean_up.c
testsuite/inherit/master/valid.c
testsuite/inherit/tests.c
testsuite/single/inh.c
testsuite/single/master.c
testsuite/single/simul_efun.c
testsuite/single/tests/compiler/at_block.c
testsuite/single/tests/compiler/constant_expr.c
testsuite/single/tests/compiler/fail/arr_index.c
testsuite/single/tests/compiler/fail/bad_break.c
testsuite/single/tests/compiler/fail/bad_continue.c
testsuite/single/tests/compiler/fail/bad_for_init.c
testsuite/single/tests/compiler/fail/bad_foreach.c
testsuite/single/tests/compiler/fail/bad_init.c
testsuite/single/tests/compiler/fail/bad_local_init.c
testsuite/single/tests/compiler/fail/bad_local_init2.c
testsuite/single/tests/compiler/fail/bad_param.c
testsuite/single/tests/compiler/fail/bad_param2.c
testsuite/single/tests/compiler/fail/bad_return.c
testsuite/single/tests/compiler/fail/bad_return2.c
testsuite/single/tests/compiler/fail/bad_type_init.c
testsuite/single/tests/compiler/fail/class_redef.c
testsuite/single/tests/compiler/fail/div_zero.c
testsuite/single/tests/compiler/fail/div_zero3.c
testsuite/single/tests/compiler/fail/eof_in_comment.c
testsuite/single/tests/compiler/fail/eof_in_string.c
testsuite/single/tests/compiler/fail/local_redef.c
testsuite/single/tests/compiler/fail/local_redef2.c
testsuite/single/tests/compiler/fail/lvar_func.c
testsuite/single/tests/compiler/fail/lvar_func2.c
testsuite/single/tests/compiler/fail/missing_endif.c
testsuite/single/tests/compiler/fail/missing_type.c
testsuite/single/tests/compiler/fail/mixed_case.c
testsuite/single/tests/compiler/fail/mod_zero.c
testsuite/single/tests/compiler/fail/no_member.c
testsuite/single/tests/compiler/fail/no_ret_type.c
testsuite/single/tests/compiler/fail/no_such_class.c
testsuite/single/tests/compiler/fail/predef.c
testsuite/single/tests/compiler/fail/redef_function.c
testsuite/single/tests/compiler/fail/static_local.c
testsuite/single/tests/compiler/fail/string_case.c
testsuite/single/tests/compiler/fail/two_default.c
testsuite/single/tests/compiler/fail/undef_class.c
testsuite/single/tests/compiler/fail/var_to_nonvar.c
testsuite/single/tests/compiler/fail/void_arg.c
testsuite/single/tests/compiler/fail/void_arg2.c
testsuite/single/tests/compiler/fail/void_for_var.c
testsuite/single/tests/compiler/fail/void_global.c
testsuite/single/tests/compiler/fail/void_local.c
testsuite/single/tests/compiler/fail/void_member.c
testsuite/single/tests/compiler/succeed.c
testsuite/single/tests/efuns/add_action.c
testsuite/single/tests/efuns/add_light.c
testsuite/single/tests/efuns/all_inventory.c
testsuite/single/tests/efuns/allocate.c
testsuite/single/tests/efuns/allocate_buffer.c
testsuite/single/tests/efuns/allocate_mapping.c
testsuite/single/tests/efuns/badshad.c
testsuite/single/tests/efuns/bind.c
testsuite/single/tests/efuns/break_string.c
testsuite/single/tests/efuns/cache_stats.c
testsuite/single/tests/efuns/call_other.c
testsuite/single/tests/efuns/call_out.c
testsuite/single/tests/efuns/call_stack.c
testsuite/single/tests/efuns/capitalize.c
testsuite/single/tests/efuns/children.c
testsuite/single/tests/efuns/clear_bit.c
testsuite/single/tests/efuns/clone_object.c
testsuite/single/tests/efuns/clonep.c
testsuite/single/tests/efuns/command.c
testsuite/single/tests/efuns/cp.c
testsuite/single/tests/efuns/crc32.c
testsuite/single/tests/efuns/ctime.c
testsuite/single/tests/efuns/deep_inherit_list.c
testsuite/single/tests/efuns/deep_inventory.c
testsuite/single/tests/efuns/destruct.c
testsuite/single/tests/efuns/disable_commands.c
testsuite/single/tests/efuns/dumpallobj.c
testsuite/single/tests/efuns/ed.c
testsuite/single/tests/efuns/enable_wizard.c
testsuite/single/tests/efuns/environment.c
testsuite/single/tests/efuns/error.c
testsuite/single/tests/efuns/exec.c
testsuite/single/tests/efuns/explode.c
testsuite/single/tests/efuns/file_name.c
testsuite/single/tests/efuns/file_size.c
testsuite/single/tests/efuns/filter.c
testsuite/single/tests/efuns/find_call_out.c
testsuite/single/tests/efuns/find_living.c
testsuite/single/tests/efuns/find_object.c
testsuite/single/tests/efuns/find_player.c
testsuite/single/tests/efuns/function_exists.c
testsuite/single/tests/efuns/function_profile.c
testsuite/single/tests/efuns/functionp.c
testsuite/single/tests/efuns/generate_source.c
testsuite/single/tests/efuns/get_char.c
testsuite/single/tests/efuns/get_config.c
testsuite/single/tests/efuns/get_dir.c
testsuite/single/tests/efuns/goodshad.c
testsuite/single/tests/efuns/has_errors.c
testsuite/single/tests/efuns/implode.c
testsuite/single/tests/efuns/in_edit.c
testsuite/single/tests/efuns/inh0.c
testsuite/single/tests/efuns/inh1.c
testsuite/single/tests/efuns/inh2.c
testsuite/single/tests/efuns/inherit_list.c
testsuite/single/tests/efuns/inherits.c
testsuite/single/tests/efuns/input_to.c
testsuite/single/tests/efuns/interactive.c
testsuite/single/tests/efuns/intp.c
testsuite/single/tests/efuns/keys.c
testsuite/single/tests/efuns/light.c
testsuite/single/tests/efuns/living.c
testsuite/single/tests/efuns/livings.c
testsuite/single/tests/efuns/lower_case.c
testsuite/single/tests/efuns/malloc_status.c
testsuite/single/tests/efuns/map.c
testsuite/single/tests/efuns/map_delete.c
testsuite/single/tests/efuns/mapp.c
testsuite/single/tests/efuns/master.c
testsuite/single/tests/efuns/match_path.c
testsuite/single/tests/efuns/member_array.c
testsuite/single/tests/efuns/message.c
testsuite/single/tests/efuns/mkdir.c
testsuite/single/tests/efuns/move_object.c
testsuite/single/tests/efuns/mud_status.c
testsuite/single/tests/efuns/notify_fail.c
testsuite/single/tests/efuns/nullp.c
testsuite/single/tests/efuns/objectp.c
testsuite/single/tests/efuns/opcprof.c
testsuite/single/tests/efuns/origin.c
testsuite/single/tests/efuns/pointerp.c
testsuite/single/tests/efuns/present.c
testsuite/single/tests/efuns/previous_object.c
testsuite/single/tests/efuns/printf.c
testsuite/single/tests/efuns/query_ed_mode.c
testsuite/single/tests/efuns/query_idle.c
testsuite/single/tests/efuns/query_ip_name.c
testsuite/single/tests/efuns/query_ip_number.c
testsuite/single/tests/efuns/query_load_average.c
testsuite/single/tests/efuns/query_privs.c
testsuite/single/tests/efuns/query_snoop.c
testsuite/single/tests/efuns/query_snooping.c
testsuite/single/tests/efuns/query_verb.c
testsuite/single/tests/efuns/random.c
testsuite/single/tests/efuns/read_buffer.c
testsuite/single/tests/efuns/read_bytes.c
testsuite/single/tests/efuns/read_file.c
testsuite/single/tests/efuns/receive.c
testsuite/single/tests/efuns/reg_assoc.c
testsuite/single/tests/efuns/regexp.c
testsuite/single/tests/efuns/remove_action.c
testsuite/single/tests/efuns/remove_call_out.c
testsuite/single/tests/efuns/rename.c
testsuite/single/tests/efuns/replace_string.c
testsuite/single/tests/efuns/restore_object.c
testsuite/single/tests/efuns/restore_variable.c
testsuite/single/tests/efuns/rm.c
testsuite/single/tests/efuns/rmdir.c
testsuite/single/tests/efuns/save_object.c
testsuite/single/tests/efuns/save_variable.c
testsuite/single/tests/efuns/say.c
testsuite/single/tests/efuns/set_bit.c
testsuite/single/tests/efuns/set_debug_level.c
testsuite/single/tests/efuns/set_heart_beat.c
testsuite/single/tests/efuns/set_hide.c
testsuite/single/tests/efuns/set_light.c
testsuite/single/tests/efuns/set_living_name.c
testsuite/single/tests/efuns/set_privs.c
testsuite/single/tests/efuns/shadow.c
testsuite/single/tests/efuns/shutdown.c
testsuite/single/tests/efuns/sizeof.c
testsuite/single/tests/efuns/snoop.c
testsuite/single/tests/efuns/sprintf.c
testsuite/single/tests/efuns/sscanf.c
testsuite/single/tests/efuns/talker.c
testsuite/single/tests/efuns/to_float.c
testsuite/single/tests/efuns/to_int.c
testsuite/single/tests/efuns/unloaded.c
testsuite/single/tests/efuns/users.c
testsuite/single/tests/efuns/values.c
testsuite/single/tests/operators/range.c
testsuite/single/void.c
testsuite/test_control.c
trees.c
trees.h
ualarm.c
windows/configure.h
wrappedmalloc.c
wrappedmalloc.h
y.tab.c
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/arpa/telnet.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/mysql/mysql.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/regexp.h
/usr/include/resolv.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/values.h
/usr/include/arpa/nameser.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/regex.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/arpa/nameser_compat.h
/usr/include/stdc-predef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
